{
  "openapi" : "3.0.1",
  "servers" : [ {
    "url" : "https://localhost:8080/OB-API-REST/v2"
  } ],
  "info" : {
    "description" : "Public API of Diebold Nixdorf for Banking Core Systems integration",
    "version" : "2.2.2",
    "title" : "DN Open Backend API",
    "contact" : {
      "name" : "Thorsten Brinkmann",
      "email" : "Thorsten.Brinkmann@dieboldnixdorf.com"
    },
    "termsOfService" : "/terms-of-use"
  },
  "externalDocs" : {
    "url" : "/docs",
    "description" : "Find more information here"
  },
  "tags" : [ {
    "name" : "Authentication API",
    "description" : "Authentication request for a transaction."
  }, {
    "name" : "Account Information API",
    "description" : "Fetches account information."
  }, {
    "name" : "Consumer Information API",
    "description" : "Fetches consumer information."
  }, {
    "name" : "Account Processing API",
    "description" : "Performs a transaction."
  } ],
  "paths" : {
    "/getToken" : {
      "get" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/tokenAuthorization"
        } ],
        "summary" : "Get token required for a transaction.",
        "tags" : [ "Authentication API" ],
        "operationId" : "getToken",
        "description" : "Retrieves a session Token which can be used for a transaction.",
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/tokenResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/accountList" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Get the account list of a consumer",
        "tags" : [ "Account Information API" ],
        "operationId" : "accountList",
        "description" : "Retrieves a list of all accounts of a consumer",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/accountListRequest"
              }
            }
          },
          "description" : "Account List Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. The list of accounts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/accountListResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/accountInquiry" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns detail information of an account",
        "tags" : [ "Account Information API" ],
        "operationId" : "accountInquiry",
        "description" : "Returns detail information of an account.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/accountInquiryRequest"
              }
            }
          },
          "description" : "Account Inquiry Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. Detail information of an account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/accountInquiryResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/consumerIdentify" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns detailed information of a consumer",
        "tags" : [ "Consumer Information API" ],
        "operationId" : "consumerIdentify",
        "description" : "Returns detailed information of a consumer.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/consumerIdentifyRequest"
              }
            }
          },
          "description" : "Consumer Inquiry Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. Detailed information of a consumer.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/consumerIdentifyResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/getAccountMovement" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns the list of all the transactions processed in an account.",
        "tags" : [ "Account Information API" ],
        "operationId" : "getAccountMovement",
        "description" : "Returns the list of all the transactions processed in an account.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/getAccountMovementRequest"
              }
            }
          },
          "description" : "GetAccountMovement Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. List of all the transactions processed in an account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getAccountMovementResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/getAccountStopHold" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns list of Holds on an account.",
        "tags" : [ "Account Information API" ],
        "operationId" : "getAccountStopHold",
        "description" : "Returns list of Holds on an account.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/getAccountStopHoldRequest"
              }
            }
          },
          "description" : "GetAccountHold Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. List of Hold on an account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getAccountStopHoldResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/getAccountWarnings" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns list of Account Warnings on an account.",
        "tags" : [ "Account Information API" ],
        "operationId" : "getAccountWarnings",
        "description" : "Returns list of Account Warnings on an account.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/getAccountWarningsRequest"
              }
            }
          },
          "description" : "GetAccountWarnings Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. List of Account Warnings on an account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getAccountWarningsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/getAccountListWarnings" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns list of Account Warnings on every account.",
        "tags" : [ "Account Information API" ],
        "operationId" : "getAccountListWarnings",
        "description" : "Returns list of Account Warnings on every account.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/getAccountListWarningsRequest"
              }
            }
          },
          "description" : "GetAccountWarnings Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. List of Account Warnings on every account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getAccountListWarningsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/getBusinessDate" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns the Business Date.",
        "tags" : [ "Account Information API" ],
        "operationId" : "getBusinessDate",
        "description" : "Returns the Business Date.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/getBusinessDateRequest"
              }
            }
          },
          "description" : "Get Business Date Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. Returns the Business Date.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBusinessDateResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/getCardList" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns list of Cards of an account.",
        "tags" : [ "Account Information API" ],
        "operationId" : "getCardList",
        "description" : "Returns list of Cards of an account.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/getCardListRequest"
              }
            }
          },
          "description" : "GetCardList Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. List of Cards of an account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getCardListResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/getCheckIssuerDetails" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns details of a check.",
        "tags" : [ "Account Information API" ],
        "operationId" : "getCheckIssuerDetails",
        "description" : "Returns details of a check.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/getCheckIssuerDetailsRequest"
              }
            }
          },
          "description" : "GetCheckIssuerDetails Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. Returns details of a check.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getCheckIssuerDetailsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/getConsumerWarnings" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns a list of consumer warnings on an account.",
        "tags" : [ "Consumer Information API" ],
        "operationId" : "getConsumerWarnings",
        "description" : "Returns a list of consumer warnings on an account.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/getConsumerWarningsRequest"
              }
            }
          },
          "description" : "GetConsumerWarnings Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. List of consumer warnings on an account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getConsumerWarningsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/getScheduledTransactions" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns the list of all the transactions that are yet to be in an account.",
        "tags" : [ "Account Information API" ],
        "operationId" : "getScheduledTransactions",
        "description" : "Returns the list of all the transactions that are yet to be in an account.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/getScheduledTransactionsRequest"
              }
            }
          },
          "description" : "GetScheduledTransactions Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. List of all the transactions that are yet to be in an account.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getScheduledTransactionsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ofacSearch" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Returns the list of all ofac accounts.",
        "tags" : [ "Consumer Information API" ],
        "operationId" : "ofacSearch",
        "description" : "Returns the list of all ofac accounts.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/getOfacSearchRequest"
              }
            }
          },
          "description" : "OfacSearch Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK. List of all ofac accounts.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getOfacSearchResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/accountHold" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Account Hold",
        "tags" : [ "Account Information API" ],
        "operationId" : "accountHold",
        "description" : "Account Hold",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/accountHoldRequest"
              }
            }
          },
          "description" : "Account Hold Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "accountHold response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionConfirmationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cancelAccountHold" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Cancel Account Hold.",
        "tags" : [ "Account Information API" ],
        "operationId" : "cancelAccountHold",
        "description" : "Cancel Account Hold.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/cancelAccountHoldRequest"
              }
            }
          },
          "description" : "Cancel Account Hold. Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "cancelAccountHold response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionConfirmationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/credit" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "performs credit operation",
        "tags" : [ "Account Processing API" ],
        "operationId" : "credit",
        "description" : "performs credit operation",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/creditRequest"
              }
            }
          },
          "description" : "Credit Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "credit response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionConfirmationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/debit" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "performs debit operation",
        "tags" : [ "Account Processing API" ],
        "operationId" : "debit",
        "description" : "performs debit operation",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/debitRequest"
              }
            }
          },
          "description" : "Debit Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "debit response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionConfirmationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pinCheck" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Verify pin.",
        "tags" : [ "Account Processing API" ],
        "operationId" : "pinCheck",
        "description" : "Verify pin.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/pinCheckRequest"
              }
            }
          },
          "description" : "Pin Check Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "pinCheck response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionConfirmationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transfer" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "performs transfer operation",
        "tags" : [ "Account Processing API" ],
        "operationId" : "transfer",
        "description" : "performs transfer operation",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/transferRequest"
              }
            }
          },
          "description" : "Transfer Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "transfer response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionConfirmationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/updateAccountNickName" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "update the account nickname",
        "tags" : [ "Account Information API" ],
        "operationId" : "updateAccountNickName",
        "description" : "update the account nickname",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/updateAccountNickNameRequest"
              }
            }
          },
          "description" : "Update Account Nickname Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "updateAccountNickName response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionConfirmationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/updateCardState" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Updates the card state",
        "tags" : [ "Consumer Information API" ],
        "operationId" : "updateCardState",
        "description" : "Updates the card state",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/updateCardStateRequest"
              }
            }
          },
          "description" : "Update Card State Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "updateCardState response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionConfirmationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reversal" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Performs reversal for a transaction.",
        "tags" : [ "Account Processing API" ],
        "operationId" : "reversal",
        "description" : "Performs reversal for a transaction.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/reversalRequest"
              }
            }
          },
          "description" : "Reversal Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "updateCardState response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionConfirmationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/currencyTransactionReporting" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "performs transactions that consists of cash deposits, check deposits, cash withdrawals and cash checks",
        "tags" : [ "Account Processing API" ],
        "operationId" : "currencyTransactionReporting",
        "description" : "Allows consumers to create teller transactions that consist of cash deposits, check deposits, cash withdrawals, and cash checks. It also allow consumers to add teller currency transactions.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/currencyTransactionReportingRequest"
              }
            }
          },
          "description" : "Currency Transaction Reporting Object Structure"
        },
        "responses" : {
          "200" : {
            "description" : "currency transaction reporting response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/currencyTransactionReportingResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing currency transaction reporting operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/login" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Login",
        "tags" : [ "Authorization Processing API" ],
        "operationId" : "login",
        "description" : "ATM Login",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/login.request"
              }
            }
          },
          "description" : "Login Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/login.response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logout" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Logout",
        "tags" : [ "Authorization Processing API" ],
        "operationId" : "logout",
        "description" : "ATM Logout",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/logout.request"
              }
            }
          },
          "description" : "Logout Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/logout.response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cassCounterChanged" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Posts details of Cass Counter changes",
        "tags" : [ "Authorization Processing API" ],
        "operationId" : "cassCounterChanged",
        "description" : "Posts details of Cass Counter changes",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/cassCounterChanged.request"
              }
            }
          },
          "description" : "Cass Counter Changed Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/cassCounterChanged.response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pinChangeAuthorize" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Change pin.",
        "tags" : [ "Authorization Processing API" ],
        "operationId" : "pinChangeAuthorize",
        "description" : "Change pin.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/pinChange.authorize.Request"
              }
            }
          },
          "description" : "Pin Change Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "pinChange response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/pinChange.authorize.response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pinChangeFinalize" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Change pin.",
        "tags" : [ "Authorization Processing API" ],
        "operationId" : "pinChangeFinalize",
        "description" : "Change pin.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/pinChange.finalize.request"
              }
            }
          },
          "description" : "Pin Change Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "pinChange response OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/transactionConfirmationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/withdrawalAuthorize" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Authorize Withdrawal transaction",
        "tags" : [ "Authorization Processing API" ],
        "operationId" : "withdrawalAuthorize",
        "description" : "Posts details of Withdrawal Authorization",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/withdrawal.authorize.request"
              }
            }
          },
          "description" : "Withdrawal Authorize Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/withdrawal.authorize.response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/withdrawalFinalize" : {
      "post" : {
        "parameters" : [ {
          "$ref" : "#/components/parameters/version"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyId"
        }, {
          "$ref" : "#/components/parameters/productName"
        }, {
          "$ref" : "#/components/parameters/initiatingPartyName"
        }, {
          "$ref" : "#/components/parameters/timestamp"
        }, {
          "$ref" : "#/components/parameters/referenceId"
        }, {
          "$ref" : "#/components/parameters/sessionToken"
        }, {
          "$ref" : "#/components/parameters/authorization"
        }, {
          "$ref" : "#/components/parameters/authType"
        } ],
        "summary" : "Finalize Withdrawal transaction",
        "tags" : [ "Authorization Processing API" ],
        "operationId" : "withdrawalFinalize",
        "description" : "Posts details of Withdrawal Finalization",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/withdrawal.finalize.request"
              }
            }
          },
          "description" : "Withdrawal Finalize Request Structure"
        },
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/withdrawal.finalize.response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input fields, object invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error while performing operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "version" : {
        "name" : "version",
        "in" : "header",
        "description" : "Version of DN Open Backend API being used.",
        "required" : true,
        "schema" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 10,
          "example" : "2.2.0"
        }
      },
      "operation" : {
        "name" : "operation",
        "in" : "header",
        "description" : "Name of the operation that is requested. eg. credit",
        "required" : true,
        "schema" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255,
          "example" : "transfer"
        }
      },
      "initiatingPartyId" : {
        "name" : "initiatingPartyId",
        "in" : "header",
        "description" : "Identifier of the party that has initiated this transaction, in this case Diebold Nixdorf's ID.",
        "required" : true,
        "schema" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255,
          "example" : "DN123"
        }
      },
      "productName" : {
        "name" : "productName",
        "in" : "header",
        "description" : "The name of the product which is consuming the service (business product name).",
        "required" : true,
        "schema" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255,
          "example" : "Vynamic Transaction Engine"
        }
      },
      "initiatingPartyName" : {
        "name" : "initiatingPartyName",
        "in" : "header",
        "description" : "The name of the initiating party.",
        "required" : true,
        "schema" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 255,
          "example" : "Diebold Nixdorf"
        }
      },
      "timestamp" : {
        "name" : "timestamp",
        "in" : "header",
        "description" : "timestamp of the transaction",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "yyyy-MM-dd HH:mm:ssZ",
          "description" : "A timestamp as defined by date-time - RFC3339. Please see: https://tools.ietf.org/html/rfc3339",
          "example" : "2019-09-23T16:40:521"
        }
      },
      "referenceId" : {
        "name" : "referenceId",
        "in" : "header",
        "description" : "Unique identifier for the transaction request.",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "A123F34"
        }
      },
      "sessionToken" : {
        "name" : "token",
        "in" : "header",
        "description" : "Unique identifier for a session. This token can vary per request or can be re-generated on a scheduled basis like every 1 hour or 1 day.",
        "schema" : {
          "type" : "string",
          "example" : "T2131241"
        }
      },
      "authType" : {
        "name" : "authType",
        "in" : "header",
        "description" : "Authentication mechanisam being used.  BASIC_AUTH, TOKEN, NONE",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "BASIC_AUTH"
        }
      },
      "tokenAuthorization" : {
        "name" : "Authorization",
        "in" : "header",
        "description" : "Contains base 64 encoded userName:password string using HTTP Basic Authentication.",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "Basic afae1wad213da"
        }
      },
      "authorization" : {
        "name" : "Authorization",
        "in" : "header",
        "description" : "Contains base 64 encoded userName:password string using HTTP Basic Authentication.",
        "schema" : {
          "type" : "string",
          "example" : "Basic afae1wad213da"
        }
      }
    },
    "schemas" : {
      "errorResponse" : {
        "type" : "object",
        "required" : [ "responseCode" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "error" : {
            "required" : [ "code", "message" ],
            "properties" : {
              "code" : {
                "$ref" : "#/components/schemas/ErrorCode"
              },
              "message" : {
                "$ref" : "#/components/schemas/ErrorMessage"
              }
            }
          }
        }
      },
      "tokenResponse" : {
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "token", "validity" ],
            "properties" : {
              "token" : {
                "type" : "string",
                "example" : "123456789"
              },
              "expirationDate" : {
                "type" : "string",
                "format" : "yyyy-MM-dd HH:mm:ssZ",
                "description" : "Expiry timestamp of the genrated token.",
                "example" : "2019-09-23T16:40:521"
              }
            }
          }
        }
      },
      "accountInquiryRequest" : {
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbAccountOverview"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "accountInquiry"
              }
            }
          },
          "payload" : {
            "required" : [ "accountRef" ],
            "properties" : {
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "consumerIdentifyRequest" : {
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbLogin"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "consumerIdentify"
              }
            }
          },
          "payload" : {
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "consumerSearchForm" : {
                "type" : "object",
                "properties" : {
                  "firstName" : {
                    "type" : "string",
                    "minLength" : 1,
                    "maxLength" : 255,
                    "description" : "The first name of the account holder.",
                    "example" : "Betty"
                  },
                  "lastName" : {
                    "type" : "string",
                    "minLength" : 1,
                    "maxLength" : 255,
                    "description" : "The last name of the account holder.",
                    "example" : "Adams"
                  },
                  "name" : {
                    "type" : "string",
                    "minLength" : 1,
                    "maxLength" : 255,
                    "description" : "The full name of the account holder. Represents the full name of the individual or name of the business entity if the holder is a business organisation.",
                    "example" : "Betty Adams"
                  },
                  "phoneNumber" : {
                    "type" : "string",
                    "minLength" : 1,
                    "maxLength" : 255,
                    "description" : "The phone number of the entity holding the account.",
                    "example" : "91-1234567890"
                  },
                  "taxId" : {
                    "type" : "string",
                    "minLength" : 1,
                    "maxLength" : 255,
                    "description" : "The Tax Identification Number",
                    "example" : "123456789"
                  }
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "accountInquiryResponse" : {
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "accountDetails" ],
            "properties" : {
              "accountDetails" : {
                "$ref" : "#/components/schemas/AccountInfo"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "creditRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbDeposit"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "credit"
              }
            }
          },
          "payload" : {
            "required" : [ "accountRef", "amount" ],
            "properties" : {
              "amount" : {
                "$ref" : "#/components/schemas/Amount"
              },
              "consumerId" : {
                "type" : "string",
                "example" : 123456
              },
              "check" : {
                "$ref" : "#/components/schemas/Check"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "remark" : {
                "type" : "string",
                "maxLength" : 255,
                "description" : "transaction comments.",
                "example" : "some remark."
              },
              "clearingCategoryCode" : {
                "type" : "string",
                "description" : "Clearing Category Code",
                "example" : "IMED"
              },
              "type" : {
                "type" : "string",
                "example" : "PAYOFF"
              },
              "valueDate" : {
                "$ref" : "#/components/schemas/Date"
              },
              "fundTypeCode" : {
                "type" : "string",
                "description" : "Fund Type",
                "example" : "CASH"
              },
              "cashBoxNumber" : {
                "type" : "integer",
                "description" : "Cash Box Number",
                "example" : 1234
              },
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "debitRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbWithdrawal"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "debit"
              }
            }
          },
          "payload" : {
            "required" : [ "accountRef", "amount" ],
            "properties" : {
              "amount" : {
                "$ref" : "#/components/schemas/Amount"
              },
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "check" : {
                "$ref" : "#/components/schemas/Check"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "remark" : {
                "type" : "string",
                "maxLength" : 255,
                "description" : "transaction comments.",
                "example" : "some remark."
              },
              "clearingCategoryCode" : {
                "type" : "string",
                "description" : "Clearing Category Code",
                "example" : "IMED"
              },
              "type" : {
                "type" : "string",
                "example" : "PAYOFF"
              },
              "valueDate" : {
                "$ref" : "#/components/schemas/Date"
              },
              "fundTypeCode" : {
                "type" : "string",
                "description" : "Fund Type",
                "example" : "CASH"
              },
              "cashBoxNumber" : {
                "type" : "integer",
                "description" : "Cash Box Number",
                "example" : 1234
              },
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "transferRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbTransfer"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "transfer"
              }
            }
          },
          "payload" : {
            "required" : [ "accountRefTo", "accountRefFrom", "amount" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "remark" : {
                "type" : "string",
                "maxLength" : 255,
                "description" : "transaction comments.",
                "example" : "some remark."
              },
              "type" : {
                "type" : "string",
                "example" : "PAYOFF"
              },
              "clearingCategoryCode" : {
                "type" : "string",
                "description" : "Clearing Category Code",
                "example" : "IMED"
              },
              "valueDate" : {
                "$ref" : "#/components/schemas/Date"
              },
              "fundTypeCode" : {
                "type" : "string",
                "description" : "Fund Type",
                "example" : "CASH"
              },
              "accountRefTo" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "accountRefFrom" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "amount" : {
                "$ref" : "#/components/schemas/Amount"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "currencyTransactionReportingRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "currencyTransactionReporting"
              }
            }
          },
          "payload" : {
            "properties" : {
              "remark" : {
                "type" : "string",
                "maxLength" : 255,
                "description" : "currency transaction reporting comments.",
                "example" : "CTR request in process."
              },
              "conductorConsumerId" : {
                "type" : "string",
                "example" : "A000013"
              },
              "conductorNonConsumerId" : {
                "type" : "string",
                "example" : 243234
              },
              "conductorType" : {
                "type" : "string",
                "example" : "NonConsumer"
              },
              "transactionMetaData" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TransactionMetaData"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "currencyTransactionReportingResponse" : {
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "type" : "object",
            "properties" : {
              "receiptId" : {
                "type" : "string",
                "minLength" : 1,
                "description" : "Receipt identification number of the transaction",
                "example" : "998a87999"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "updateCardStateRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "updateCardState"
              }
            }
          },
          "payload" : {
            "required" : [ "card" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/Card"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "accountHoldRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "accountHold"
              }
            }
          },
          "payload" : {
            "required" : [ "amount", "expiryDate", "holdType" ],
            "properties" : {
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "amount" : {
                "$ref" : "#/components/schemas/Amount"
              },
              "expiryDate" : {
                "$ref" : "#/components/schemas/Date"
              },
              "effectiveDate" : {
                "$ref" : "#/components/schemas/Date"
              },
              "holdType" : {
                "$ref" : "#/components/schemas/HoldType"
              },
              "remark" : {
                "type" : "string",
                "maxLength" : 255,
                "description" : "transaction comments.",
                "example" : "hold for this account"
              },
              "payeeName" : {
                "type" : "string",
                "maxLength" : 255,
                "example" : "Betty"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getAccountStopHoldRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "accountStopHold"
              }
            }
          },
          "payload" : {
            "required" : [ "accountRef" ],
            "properties" : {
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getAccountStopHoldResponse" : {
        "type" : "object",
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "accountHoldList" ],
            "properties" : {
              "accountHoldList" : {
                "items" : {
                  "$ref" : "#/components/schemas/AccountHold"
                }
              },
              "accountStopPaymentList" : {
                "items" : {
                  "$ref" : "#/components/schemas/AccountStop"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "cancelAccountHoldRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "cancelAccountHold"
              }
            }
          },
          "payload" : {
            "required" : [ "holdId", "accountRef" ],
            "properties" : {
              "holdId" : {
                "type" : "string",
                "description" : "stop sequence.",
                "example" : ""
              },
              "cancelEffectiveDate" : {
                "$ref" : "#/components/schemas/Date"
              },
              "amount" : {
                "$ref" : "#/components/schemas/Amount"
              },
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getAccountWarningsRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "accountWarnings"
              }
            }
          },
          "payload" : {
            "required" : [ "accountRef" ],
            "properties" : {
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getAccountWarningsResponse" : {
        "type" : "object",
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "accountWarnings", "isBankEmployee" ],
            "properties" : {
              "accountWarnings" : {
                "items" : {
                  "$ref" : "#/components/schemas/Warning"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getAccountListWarningsRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "accountListWarnings"
              }
            }
          },
          "payload" : {
            "required" : [ "accounts" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "accounts" : {
                "items" : {
                  "$ref" : "#/components/schemas/AccountRef"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getAccountListWarningsResponse" : {
        "type" : "object",
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "accountWarnings" ],
            "properties" : {
              "accountInformationList" : {
                "items" : {
                  "$ref" : "#/components/schemas/AccountListWarning"
                }
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getConsumerWarningsRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "consumerWarnings"
              }
            }
          },
          "payload" : {
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getConsumerWarningsResponse" : {
        "type" : "object",
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "consumerWarnings", "isBankEmployee" ],
            "properties" : {
              "isBankEmployee" : {
                "type" : "boolean",
                "description" : "Is Bank Employee."
              },
              "consumerWarnings" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Warning"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getCardListRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "cardList"
              }
            }
          },
          "payload" : {
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getCardListResponse" : {
        "type" : "object",
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "cards" ],
            "properties" : {
              "cards" : {
                "items" : {
                  "$ref" : "#/components/schemas/Cards"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "updateAccountNickNameRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "updateAccountNickName"
              }
            }
          },
          "payload" : {
            "required" : [ "accountRef", "accountName" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "accountName" : {
                "type" : "string",
                "minLength" : 1,
                "maxLength" : 255,
                "example" : "Betty Adams"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getBusinessDateRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "businessDate"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "properties" : {
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getBusinessDateResponse" : {
        "type" : "object",
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "businessDate" ],
            "properties" : {
              "businessDate" : {
                "$ref" : "#/components/schemas/BusinessDate"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getAccountMovementRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbAccountMovement"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "accountMovement"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "required" : [ "accountRef" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "startDate" : {
                "$ref" : "#/components/schemas/Date"
              },
              "endDate" : {
                "$ref" : "#/components/schemas/Date"
              },
              "maxRecords" : {
                "type" : "integer",
                "description" : "Maximum number of records to fetch.",
                "example" : 10
              },
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getAccountMovementResponse" : {
        "type" : "object",
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "accountMovements" ],
            "properties" : {
              "accountMovements" : {
                "items" : {
                  "$ref" : "#/components/schemas/AccountMovements"
                }
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getOfacSearchRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "ofacSearch"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "consumerSearchForm" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "minLength" : 1,
                    "maxLength" : 255,
                    "description" : "The name of the account owner.",
                    "example" : "Betty Adams"
                  },
                  "consumerType" : {
                    "$ref" : "#/components/schemas/ConsumerType"
                  }
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getOfacSearchResponse" : {
        "type" : "object",
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "ofacSearchDetails" ],
            "properties" : {
              "ofacSearchDetails" : {
                "items" : {
                  "$ref" : "#/components/schemas/OfacSearch"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getScheduledTransactionsRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "scheduledTransactions"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "required" : [ "accountRef" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getScheduledTransactionsResponse" : {
        "type" : "object",
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "accountMovements" ],
            "properties" : {
              "accountMovements" : {
                "items" : {
                  "$ref" : "#/components/schemas/AccountMovements"
                }
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getCheckIssuerDetailsRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "checkIssuerDetails"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "required" : [ "checkInfo" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "checkInfo" : {
                "$ref" : "#/components/schemas/Check"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "getCheckIssuerDetailsResponse" : {
        "type" : "object",
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "checkIssuerDetails" ],
            "properties" : {
              "checkIssuerDetails" : {
                "$ref" : "#/components/schemas/CheckIssuerDetails"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "reversalRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction", "confirmationNumber" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : ""
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "reversal"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "required" : [ "confirmationNumber" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "amount" : {
                "$ref" : "#/components/schemas/Amount"
              },
              "confirmationNumber" : {
                "type" : "string",
                "description" : "the transaction confirmation number for the transaction to be reversed.",
                "minLength" : 0,
                "example" : "12a23e131"
              },
              "remarks" : {
                "type" : "string",
                "maxLength" : 255,
                "description" : "Remarks for the transaction.",
                "example" : "Reversal for ACCT XXXX 4567"
              },
              "cancelReason" : {
                "$ref" : "#/components/schemas/CancelReason"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "pinCheckRequest" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbCheckPin"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "pinCheck"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "required" : [ "card", "pin" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "login.request" : {
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbLogin"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "process"
              }
            }
          },
          "payload" : {
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "login.response" : {
        "type" : "object",
        "required" : [ "responseCode" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "type" : "object",
            "required" : [ "accountInformationList" ],
            "properties" : {
              "enabledTransactions" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TransactionTypes"
                }
              },
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "accounts" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AccountInfo"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "logout.request" : {
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbLogout"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "process"
              }
            }
          },
          "payload" : {
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "logout.response" : {
        "type" : "object",
        "required" : [ "responseCode" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          }
        }
      },
      "cassCounterChanged.request" : {
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "clientStateNotification"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "notify"
              }
            }
          },
          "payload" : {
            "properties" : {
              "reason" : {
                "$ref" : "#/components/schemas/CassCounterChangeReason"
              },
              "newCassCounterList" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CassCounter"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "cassCounterChanged.response" : {
        "type" : "object",
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "type" : "object",
            "properties" : {
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "pinChange.authorize.Request" : {
        "type" : "object",
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbPinChange"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "authorize"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "required" : [ "card", "oldPin", "newPin" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "oldPin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "newPin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "verifiedNewPin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "pinChange.authorize.response" : {
        "type" : "object",
        "required" : [ "responseCode" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "type" : "object",
            "properties" : {
              "confirmationNumber" : {
                "type" : "string",
                "description" : "Confirmation number of the transaction",
                "example" : "547384793853"
              },
              "emvScript" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EMVScriptTagData"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "pinChange.finalize.request" : {
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbPinChange"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "confirm"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "emvScriptResult" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EMVScriptTagData"
                }
              },
              "accountingState" : {
                "$ref" : "#/components/schemas/AccountingState"
              },
              "cancelReason" : {
                "$ref" : "#/components/schemas/CancelReason"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "withdrawal.authorize.request" : {
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbWithdrawal"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "authorize"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "required" : [ "accountRef", "amount" ],
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "accountRef" : {
                "$ref" : "#/components/schemas/AccountRef"
              },
              "amount" : {
                "$ref" : "#/components/schemas/Amount"
              },
              "fees" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TransactionFee"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "withdrawal.authorize.response" : {
        "type" : "object",
        "required" : [ "responseCode" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "type" : "object",
            "properties" : {
              "confirmationNumber" : {
                "type" : "string",
                "description" : "Confirmation number of the transaction",
                "example" : "547384793853"
              },
              "fees" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TransactionFee"
                }
              },
              "emvScript" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EMVScriptTagData"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "withdrawal.finalize.request" : {
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbWithdrawal"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "confirm"
              }
            }
          },
          "payload" : {
            "type" : "object",
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "emvScriptResult" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EMVScriptTagData"
                }
              },
              "amount" : {
                "$ref" : "#/components/schemas/Amount"
              },
              "accountingState" : {
                "$ref" : "#/components/schemas/AccountingState"
              },
              "mediaStates" : {
                "type" : "array",
                "items" : {
                  "properties" : {
                    "media" : {
                      "$ref" : "#/components/schemas/MediaType"
                    },
                    "state" : {
                      "$ref" : "#/components/schemas/MediaState"
                    }
                  }
                }
              },
              "fees" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TransactionFee"
                }
              },
              "itemMixUsed" : {
                "type" : "array",
                "description" : "List of dispensed notes and coins",
                "items" : {
                  "$ref" : "#/components/schemas/CassCounter"
                }
              },
              "itemMixTotal" : {
                "type" : "array",
                "description" : "list of dispensed notes and coins since last settlement",
                "items" : {
                  "$ref" : "#/components/schemas/CassCounter"
                }
              },
              "cancelReason" : {
                "$ref" : "#/components/schemas/CancelReason"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "withdrawal.finalize.response" : {
        "type" : "object",
        "required" : [ "responseCode" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "type" : "object",
            "properties" : {
              "confirmationNumber" : {
                "type" : "string",
                "description" : "Confirmation number of the transaction",
                "example" : "547384793853"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "Error" : {
        "type" : "object",
        "required" : [ "code", "message" ],
        "properties" : {
          "code" : {
            "$ref" : "#/components/schemas/ErrorCode"
          },
          "message" : {
            "$ref" : "#/components/schemas/ErrorMessage"
          }
        }
      },
      "ResponseCode" : {
        "type" : "string",
        "enum" : [ "OK", "FAIL", "RESUBMIT" ],
        "example" : "OK"
      },
      "ErrorCode" : {
        "type" : "string",
        "enum" : [ "SERVER_FAILURE", "NO_RESULT", "ACCOUNT_NOT_FOUND", "ACCOUNT_CLOSED", "ACCOUNT_TYPE_INVALID", "LIMIT_EXCEEDED", "INSUFFICIENT_FUNDS", "SERVER_NOT_READY", "REQUEST_DATA_INVALID", "TRX_NOT_PERMITTED_TO_ACCOUNT", "TRANSACTION_NOT_POSSIBLE", "HOST_OFFLINE", "HOST_CANCEL", "HOST_BUSINESS_ERROR", "RESPONSE_FEE_CONFIRM_REQUIRED", "OVERDRAFT_CONFIRM_REQUIRED", "PIN_VALIDATION_FAILED" ],
        "description" : "Error Code Mapping as per Diebold Nixdorf"
      },
      "ErrorMessage" : {
        "type" : "string",
        "description" : "Description if the error.",
        "maxLength" : 500,
        "example" : "Error occured while processing the request"
      },
      "PointOfInteraction" : {
        "required" : [ "clientId" ],
        "properties" : {
          "clientId" : {
            "type" : "string",
            "minLength" : 1,
            "description" : "DN Teller Id",
            "example" : "123"
          },
          "institutionId" : {
            "type" : "string",
            "minLength" : 1,
            "description" : "The id of the institute.",
            "example" : "1234"
          },
          "tellerId" : {
            "type" : "string",
            "minLength" : 1,
            "description" : "The id of the teller.",
            "example" : ""
          },
          "branchCode" : {
            "type" : "string",
            "minLength" : 1,
            "description" : "Branch Code",
            "example" : ""
          },
          "channel" : {
            "$ref" : "#/components/schemas/Channel"
          }
        }
      },
      "Card" : {
        "type" : "object",
        "required" : [ "pan" ],
        "properties" : {
          "pan" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "Card number of the consumer",
            "example" : 4512665599887762
          },
          "cardState" : {
            "type" : "string",
            "description" : "Defines the state of the card (Active, Blocked etc)",
            "maxLength" : 255,
            "enum" : [ "ACTIVE", "CLOSED", "EXPIRED", "BLOCKED", "ISSUED", "HOTCARD" ]
          },
          "cardStateReasonCode" : {
            "type" : "string",
            "description" : "Card State Reason Code",
            "maxLength" : 255,
            "enum" : [ "LOST", "STOLEN", "EXPIRED", "DAMAGED", "SUSPECTED_FRAUD", "FRAUD", "CLOSED_BY_CUSTOMER", "AUTOMATIC_AGREEMENT_COPY", "DO_NOT_HONOUR" ]
          },
          "cardStateReasonDescription" : {
            "type" : "string",
            "description" : "Card State Reason Description",
            "maxLength" : 255,
            "example" : "Activate Card"
          }
        }
      },
      "CardPan" : {
        "type" : "object",
        "required" : [ "pan" ],
        "properties" : {
          "pan" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "Primary Account Number (PAN) of the card",
            "example" : "4490739000000895"
          },
          "track2" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "ISO track 2 issued from the magnetic stripe card or from the ICC"
          },
          "emvData" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EMVScriptTagData"
            }
          },
          "cardSequenceNumber" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "Identify a card or a payment token inside a set of cards with the same PAN"
          },
          "expiryDate" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "Expiry date of the card expressed in YYMM format",
            "example" : 2107
          },
          "consumerGroup" : {
            "type" : "string",
            "description" : "Consumer Group Name",
            "example" : "CG_ON_US_DEBIT"
          }
        }
      },
      "EMVScriptTagData" : {
        "type" : "object",
        "properties" : {
          "tag" : {
            "$ref" : "#/components/schemas/EMVTags"
          },
          "value" : {
            "type" : "string",
            "example" : "673336XXXXXXXXX1005D2005201XXXXXXXXXXF"
          }
        }
      },
      "EMVTags" : {
        "type" : "string",
        "example" : "EMV_57",
        "enum" : [ "EMV_42", "EMV_4F", "EMV_50", "EMV_57", "EMV_5A", "EMV_5F28", "EMV_5F55", "EMV_5F56", "EMV_5F57", "EMV_61", "EMV_6F", "EMV_70", "EMV_71", "EMV_72", "EMV_73", "EMV_77", "EMV_80", "EMV_81", "EMV_82", "EMV_83", "EMV_84", "EMV_86", "EMV_87", "EMV_88", "EMV_89", "EMV_8A", "EMV_8B", "EMV_8C", "EMV_8D", "EMV_8E", "EMV_8F", "EMV_90", "EMV_91", "EMV_92", "EMV_93", "EMV_94", "EMV_95", "EMV_97", "EMV_98", "EMV_99", "EMV_9A", "EMV_9B", "EMV_9C", "EMV_9D", "EMV_5F20", "EMV_5F24", "EMV_5F25", "EMV_5F2A", "EMV_5F2D", "EMV_5F30", "EMV_5F34", "EMV_5F36", "EMV_5F50", "EMV_5F53", "EMV_5F54", "EMV_9F01", "EMV_9F02", "EMV_9F03", "EMV_9F04", "EMV_9F05", "EMV_9F06", "EMV_9F07", "EMV_9F08", "EMV_9F09", "EMV_9F0B", "EMV_9F0D", "EMV_9F0E", "EMV_9F0F", "EMV_9F10", "EMV_9F11", "EMV_9F12", "EMV_9F13", "EMV_9F14", "EMV_9F15", "EMV_9F16", "EMV_9F17", "EMV_9F18", "EMV_9F19", "EMV_9F1A", "EMV_9F1B", "EMV_9F1C", "EMV_9F1D", "EMV_9F1E", "EMV_9F1F", "EMV_9F20", "EMV_9F21", "EMV_9F22", "EMV_9F23", "EMV_9F24", "EMV_9F26", "EMV_9F27", "EMV_9F2D", "EMV_9F2E", "EMV_9F2F", "EMV_9F32", "EMV_9F33", "EMV_9F34", "EMV_9F35", "EMV_9F36", "EMV_9F37", "EMV_9F38", "EMV_9F39", "EMV_9F3A", "EMV_9F3B", "EMV_9F3C", "EMV_9F3D", "EMV_9F40", "EMV_9F41", "EMV_9F42", "EMV_9F43", "EMV_9F44", "EMV_9F45", "EMV_9F46", "EMV_9F47", "EMV_9F48", "EMV_9F49", "EMV_9F4A", "EMV_9F4B", "EMV_9F4C", "EMV_9F4D", "EMV_9F4E", "EMV_9F4F", "EMV_9F53", "EMV_9F5B", "EMV_A5", "EMV_BF0C", "EMV_C0", "EMV_6E", "EMV_E7", "EMV_DF01", "EMV_DF02", "EMV_DF03", "EMV_DF04" ]
      },
      "Check" : {
        "type" : "object",
        "required" : [ "checkNumber" ],
        "properties" : {
          "checkNumber" : {
            "type" : "string",
            "example" : 214214
          },
          "micr" : {
            "type" : "string",
            "example" : 9879078.0
          },
          "checkType" : {
            "$ref" : "#/components/schemas/CheckType"
          },
          "bankRoutingId" : {
            "type" : "string",
            "description" : "Contains the BIC (aka. bank identifier code)The BIC - also known as SWIFT-code - as defined by ISO 9362 is required in/for cross border transfers/transactions. Please see: https://en.wikipedia.org/wiki/ISO_9362\n  This field can also be used to send/receive an ABA RTN (ABA routing transit number) or Canadian TN (Canadian transit number).\n  See also: https://en.wikipedia.org/wiki/Routing_transit_number",
            "minLength" : 8,
            "maxLength" : 11,
            "example" : "335668810"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "the Account Number.",
            "maxLength" : 255,
            "example" : "A131234"
          }
        }
      },
      "FormFieldsOfac" : {
        "type" : "object",
        "required" : [ "consumerId" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "The accunt name of the account",
            "example" : "Betty Adams"
          },
          "nameType" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "Name type",
            "example" : "Business/consumer"
          }
        }
      },
      "FormFieldsConsumer" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "The first name of the account holder.",
            "example" : "Betty"
          },
          "lastName" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "The last name of the account holder.",
            "example" : "Adams"
          },
          "name" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "The full name of the account holder. Represents the name of the business entity if the holder is a business organisation.",
            "example" : "DN Holdings Pvt. Ltd."
          },
          "phoneNumber" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "The phone number of the entity holding the account.",
            "example" : "1(571)123-4567"
          },
          "taxId" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "The Tax Identification Number",
            "example" : "123-45-6789"
          }
        }
      },
      "ConsumerSearchForm" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "The name of the account owner.",
            "example" : "Betty Adams"
          },
          "nameType" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 255,
            "description" : "Name type",
            "example" : "Business/consumer"
          }
        }
      },
      "Transaction" : {
        "type" : "object",
        "required" : [ "id", "type", "operation" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "minLength" : 1,
            "example" : "212423521525"
          },
          "type" : {
            "type" : "string",
            "minLength" : 1,
            "example" : "withdrawal"
          },
          "operation" : {
            "type" : "string",
            "minLength" : 1,
            "example" : "debit"
          }
        }
      },
      "Pin" : {
        "type" : "object",
        "properties" : {
          "encryptedPin" : {
            "type" : "string",
            "description" : "encrypted PIN block",
            "example" : "21412414asdad14121"
          },
          "format" : {
            "type" : "string",
            "description" : "encryption format for provided PIN",
            "example" : "VISA_1"
          },
          "zpkGeneration" : {
            "type" : "string",
            "description" : "Generation of Zone PIN Key used to encrypt the PIN",
            "example" : "2"
          }
        }
      },
      "CheckIssuerDetails" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "unqiue identifier for the check.",
            "example" : "edc856895cee42b5a859acec7f332ca3"
          },
          "transactionNumber" : {
            "type" : "string",
            "description" : "transaction number.",
            "example" : "12489891247987"
          },
          "score" : {
            "type" : "integer",
            "description" : "check score."
          },
          "state" : {
            "type" : "string",
            "description" : "check state.",
            "example" : "OPEN"
          },
          "suspectedFraud" : {
            "type" : "boolean",
            "description" : "true if check is suspected as fraud."
          },
          "checkNumber" : {
            "type" : "string",
            "example" : 214214
          },
          "micr" : {
            "type" : "string",
            "example" : 9879078.0
          },
          "checkType" : {
            "$ref" : "#/components/schemas/CheckType"
          },
          "bankRoutingId" : {
            "type" : "string",
            "description" : "Contains the BIC (aka. bank identifier code)The BIC - also known as SWIFT-code - as defined by ISO 9362 is required in/for cross border transfers/transactions. Please see: https://en.wikipedia.org/wiki/ISO_9362\n  This field can also be used to send/receive an ABA RTN (ABA routing transit number) or Canadian TN (Canadian transit number).\n  See also: https://en.wikipedia.org/wiki/Routing_transit_number",
            "minLength" : 8,
            "maxLength" : 11,
            "example" : "335668810"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "the Account Number.",
            "maxLength" : 255,
            "example" : "A131234"
          },
          "accountType" : {
            "$ref" : "#/components/schemas/AccountType"
          },
          "rejectedBy" : {
            "type" : "string",
            "description" : "check rejected by.",
            "example" : "UNDEFINED"
          },
          "rejectedReason" : {
            "type" : "integer",
            "description" : "reason for check rejection."
          }
        }
      },
      "OfacSearch" : {
        "type" : "object",
        "required" : [ "ofacMatchType" ],
        "properties" : {
          "ofacMatchType" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "OFAC Match Type.",
            "example" : "OFACAlias"
          },
          "ofacMatchRef" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "OFAC Match Reference ID.",
            "example" : "L0305"
          },
          "id" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "OFAC ID.",
            "example" : "6366"
          },
          "aliasID" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "OFAC alias ID.",
            "example" : "4349"
          },
          "aliasName" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "OFAC alias name.",
            "example" : "A.C.L."
          },
          "name" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Full Name.",
            "example" : "Alliance Corporation Limited "
          },
          "type" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "OFAC Type.",
            "example" : "Unknown"
          },
          "program" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "OFAC Program.",
            "example" : "FTO] [SDGT] [SDT"
          },
          "street" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "OFAC Street.",
            "example" : "A.B. street"
          },
          "city" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "OFAC City.",
            "example" : "New York"
          },
          "country" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "OFAC Country.",
            "example" : "USA"
          },
          "remarks" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Remarks for the transaction.",
            "example" : "Search for ACCT XXXX 4567"
          }
        }
      },
      "AccountMovements" : {
        "type" : "object",
        "required" : [ "entryDate", "transactionDate", "amount", "associatedAccount", "accountRef" ],
        "properties" : {
          "effectiveDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "transactionId" : {
            "type" : "string",
            "description" : "Transaction Id",
            "example" : "212423521525"
          },
          "type" : {
            "type" : "string",
            "description" : "transaction Type",
            "example" : "credit"
          },
          "transactionDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "primanota" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Primanota for this account movement",
            "example" : "87536789"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "accountRef" : {
            "$ref" : "#/components/schemas/AccountRef"
          },
          "remarks" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "information on the transaction.",
            "example" : "Misc Debit with description."
          },
          "additionalProperties" : {
            "$ref" : "#/components/schemas/AdditionalProperties"
          }
        }
      },
      "BusinessDate" : {
        "type" : "object",
        "required" : [ "cutOffTime", "businessDate" ],
        "properties" : {
          "cutOffTime" : {
            "type" : "string",
            "format" : "time",
            "example" : "12:30"
          },
          "businessDate" : {
            "$ref" : "#/components/schemas/Date"
          }
        }
      },
      "Cards" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Card"
        }
      },
      "AccountHold" : {
        "type" : "object",
        "required" : [ "id", "effectiveDate", "expiryDate", "type", "code", "amount" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "minLength" : 1,
            "example" : 123
          },
          "expiryDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "effectiveDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "type" : {
            "type" : "string",
            "maxLength" : 255,
            "example" : "GENERAL PURPOSE HOLD"
          },
          "code" : {
            "type" : "string",
            "maxLength" : 255,
            "example" : "HOLD"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "description" : {
            "type" : "string",
            "maxLength" : 255,
            "example" : "Hold for this account"
          }
        }
      },
      "AccountStop" : {
        "type" : "object",
        "required" : [ "id", "effectiveDate", "expiryDate", "type", "code", "checkNumberStart", "checkNumberEnd" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "minLength" : 1,
            "example" : 123
          },
          "expiryDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "effectiveDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "type" : {
            "type" : "string",
            "maxLength" : 255,
            "example" : "STOP PAYMENT"
          },
          "code" : {
            "type" : "string",
            "maxLength" : 255,
            "example" : "STOL"
          },
          "description" : {
            "type" : "string",
            "maxLength" : 255,
            "example" : "Stop for this account"
          },
          "checkNumberStart" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Check Number Start",
            "example" : "123"
          },
          "checkNumberEnd" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Check Number End",
            "example" : "789"
          }
        }
      },
      "AccountRef" : {
        "type" : "object",
        "required" : [ "accountNumber", "accountType" ],
        "properties" : {
          "accountNumber" : {
            "description" : "The account number. The length varies greatly. In Europe defined by ISO 13616/2007\nSee also:\nhttps://en.wikipedia.org/wiki/International_Bank_Account_Number\n",
            "type" : "string",
            "minLength" : 5,
            "maxLength" : 32,
            "example" : "A0123456789"
          },
          "accountType" : {
            "$ref" : "#/components/schemas/AccountType"
          }
        }
      },
      "Amount" : {
        "description" : "The basic type of an amount.",
        "type" : "object",
        "required" : [ "value", "currency" ],
        "properties" : {
          "value" : {
            "description" : "The amount value of the given currency. As defined by ISO 20022, CurrencyAndAmount.",
            "type" : "string",
            "pattern" : "[0-9]{1,13}\\.[0-9]{1,3}",
            "minimum" : 0,
            "example" : "100.50"
          },
          "currency" : {
            "description" : "The currency code as defined by ISO 20022, ActiveCurrencyCode\nSee also: https://en.wikipedia.org/wiki/ISO_4217\n",
            "type" : "string",
            "minLength" : 3,
            "maxLength" : 3,
            "pattern" : "[A-Z]{3,3}",
            "example" : "USD"
          }
        }
      },
      "AmountEUR" : {
        "description" : "The basic type of an amount.",
        "type" : "object",
        "required" : [ "value", "currency" ],
        "properties" : {
          "value" : {
            "type" : "string",
            "example" : 91.01
          },
          "currency" : {
            "type" : "string",
            "example" : "EUR"
          }
        }
      },
      "ConsumerId" : {
        "type" : "string",
        "minLength" : 1,
        "description" : "A unique identifier of a consumer (within an external system), which is required to identify the consumer.\n    Maybe the consumerId is moreover/also used to authorize the consumer against an external system",
        "example" : "123456"
      },
      "accountListRequest" : {
        "required" : [ "pointOfInteraction", "payload", "transaction" ],
        "properties" : {
          "pointOfInteraction" : {
            "$ref" : "#/components/schemas/PointOfInteraction"
          },
          "transaction" : {
            "type" : "object",
            "required" : [ "id", "type", "operation" ],
            "properties" : {
              "id" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "212423521525"
              },
              "type" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "sbAccountOverview"
              },
              "operation" : {
                "type" : "string",
                "minLength" : 1,
                "example" : "accountList"
              }
            }
          },
          "payload" : {
            "properties" : {
              "consumerId" : {
                "$ref" : "#/components/schemas/ConsumerId"
              },
              "card" : {
                "$ref" : "#/components/schemas/CardPan"
              },
              "pin" : {
                "$ref" : "#/components/schemas/Pin"
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "transactionConfirmationResponse" : {
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "type" : "object",
            "properties" : {
              "confirmationNumber" : {
                "type" : "string",
                "minLength" : 1,
                "description" : "Confirmation number of the transaction",
                "example" : 998087999
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "accountListResponse" : {
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "accounts" ],
            "properties" : {
              "accounts" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AccountInfo"
                }
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "consumerIdentifyResponse" : {
        "required" : [ "responseCode", "payload" ],
        "properties" : {
          "responseCode" : {
            "$ref" : "#/components/schemas/ResponseCode"
          },
          "payload" : {
            "required" : [ "consumerDetails" ],
            "properties" : {
              "consumerDetails" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ConsumerProfile"
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AdditionalProperties"
              },
              "supplementaryData" : {
                "$ref" : "#/components/schemas/SupplementaryData"
              }
            }
          }
        }
      },
      "ConsumerLevel" : {
        "type" : "string",
        "enum" : [ "NORMAL", "SENSITIVE", "HIGHLY_SENSITIVE" ],
        "description" : "The consumer level",
        "example" : "NORMAL"
      },
      "PhoneNumber" : {
        "type" : "object",
        "required" : [ "number", "phoneType" ],
        "properties" : {
          "number" : {
            "type" : "string",
            "example" : "+919123456789"
          },
          "phoneType" : {
            "type" : "string",
            "example" : "HOME"
          }
        }
      },
      "ConsumerType" : {
        "type" : "string",
        "enum" : [ "INDIVIDUAL", "BUSINESS", "UNKNOWN" ],
        "description" : "Type of the consumer",
        "example" : "INDIVIDUAL"
      },
      "ConsumerProfile" : {
        "type" : "object",
        "required" : [ "consumerId", "firstname", "taxId" ],
        "properties" : {
          "consumerId" : {
            "$ref" : "#/components/schemas/ConsumerId"
          },
          "consumerLevel" : {
            "$ref" : "#/components/schemas/ConsumerLevel"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Betty"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Adams"
          },
          "name" : {
            "type" : "string",
            "example" : "Betty Adams"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "betty.adams123456@cmail.com"
          },
          "phoneNumbers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PhoneNumber"
            }
          },
          "taxId" : {
            "type" : "string",
            "description" : "The Tax Id of the account.",
            "example" : 123
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "isBankEmployee" : {
            "type" : "boolean"
          },
          "consumerType" : {
            "$ref" : "#/components/schemas/ConsumerType"
          },
          "consumerWarnings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Warning"
            }
          },
          "additionalProperties" : {
            "$ref" : "#/components/schemas/AdditionalProperties"
          }
        }
      },
      "AccountType" : {
        "type" : "string",
        "enum" : [ "NOT_SPECIFIED", "GIRO", "SAVINGS", "SECURITIES_DEPOSIT", "SAVINGS_SECURITIES_DEPOSIT", "GIRO_SECURITIES_DEPOSIT", "FIXED_TERM_DEPOSIT", "CREDIT_CARD", "LOAN", "MORTGAGE", "FOREIGN_CURRENCY", "EXTERNAL", "CHECKING", "UNIVERSAL", "SPENDING_POWER", "FEE_COLLECTION_ACCOUNT", "ATM", "VENDOR", "SHAREHOLDER", "GENERAL_LEDGER", "CASH_RESERVE", "LOAN_DENIAL", "LEASE", "CONSUMER_LOAN", "COMMERCIAL_LOAN", "RETIREMENT_LOAN", "EXTERNAL_LOAN", "SHARE", "INDIVIDUAL_RETIREMENT" ],
        "example" : "SAVINGS",
        "description" : "| Symbolic name              | Comment                                                        | |----------------------------|----------------------------------------------------------------| | NOT_SPECIFIED              | Default value for unknowaccounts.                              | | GIRO                       | Giro account.                                                  | | SAVINGS                    | Savings account. (ISO 8583; MC DE.54->10 / VISA DE.54->10).    | | SECURITIES_DEPOSIT         | Depot of securities (shares and so on).                        | | SAVINGS_SECURITIES_DEPOSIT | Savings securities.                                            | | GIRO_SECURITIES_DEPOSIT    | Giro securities.                                               | | FIXED_TERM_DEPOSIT         | Fixed term deposit.                                            | | CREDIT_CARD                | Credit card account. (ISO 8583; MC DE.54->30 / VISA DE.54->30).| | LOAN                       | An account that covers a credit and its balance and movements. | | MORTGAGE                   | Security for a loan.                                           | | FOREIGN_CURRENCY           | An account that holds money in a foreign curreny.              | | EXTERNAL                   | An account that represents an account of a foreign institution.| | CHECKING                   | Checking account. (ISO 8583; MC DE.54->20 / VISA DE.54->20)    |  | UNIVERSAL                  | ISO 8583; VISA DE.54->40)                                      |  | SPENDING_POWER             | ISO 8583; VISA DE.54->64)                                      |  | FEE_COLLECTION_ACCOUNT     | used to collect fees                                           |  | ATM                        | ATM                                                            | | VENDOR                     | Vendor                                                         | | SHAREHOLDER                | Shareholder                                                    | | GENERAL_LEDGER             | General ledger                                                 | | CASH_RESERVE               | Cash Reserve Line of Credit                                    | | LOAN_DENIAL                | Load denial                                                    | | LEASE                      | Lease                                                          | | CONSUMER_LOAN              | Consumer loan                                                  | | COMMERCIAL_LOAN            | Cemercial loan                                                 | | RETIREMENT_LOAN            | Retirement loan                                                | | EXTERNAL_LOAN              | External loan                                                  | | SHARE                      | Share                                                          | | INDIVIDUAL_RETIREMENT      | Individual Retirement Account(IRA)                             |"
      },
      "AccountOwnership" : {
        "type" : "string",
        "enum" : [ "PRIMARY", "JOINT", "NOT_SPECIFIED" ],
        "example" : "PRIMARY"
      },
      "AccountStatus" : {
        "type" : "string",
        "description" : "The status of the account",
        "enum" : [ "ACTIVE", "APPROVED", "CLOSED", "DORMANT", "PENDING_CLOSED", "CHARGEOFF", "INACTIVE", "NON_ACCRUAL", "MATURED", "ESCHEAT", "ASSUMED", "LOAN_DENIED", "ORIGINATING", "REDEEMED", "MATURED_NOT_REDEEMED", "NO_DEBIT", "NO_CREDIT", "NO_POST", "FROZEN_NON_ACCRUAL", "CHARGEDOFF_NON_ACCRUAL", "OCCUPIED", "NOT_AVAILABLE", "UNOCCUPIED", "ACTIVE_NO_POD", "DO_NOT_CLOSE_ON_ZERO_BALANCE", "FROZEN_ACCRUAL", "OPEN_PRIMARY_ACCOUNT", "RESTRICTED_PRIMARY_ACCOUNT", "RESTRICTED_TO_DEPOSIT", "NOT_SPECIFIED" ],
        "example" : "ACTIVE"
      },
      "CheckType" : {
        "type" : "string",
        "enum" : [ "ON_US", "OFF_US", "GOVERNMENT", "NOT_SPECIFIED" ],
        "example" : "ON_US",
        "description" : "The Check Type value of the check"
      },
      "AccessPermission" : {
        "type" : "string",
        "enum" : [ "NO_PERMISSION", "FULL_PERMISSION", "DEPOSIT_ONLY_PERMISSION", "WITHDRAWAL_ONLY_PERMISSION" ],
        "example" : "FULL_PERMISSION",
        "description" : "The Access permission of the Account"
      },
      "AccountPermissions" : {
        "type" : "object",
        "properties" : {
          "accessPermission" : {
            "$ref" : "#/components/schemas/AccessPermission"
          },
          "markedForDepositOnly" : {
            "type" : "boolean",
            "example" : false
          }
        }
      },
      "Conductor" : {
        "type" : "object",
        "required" : [ "conductorId", "firstName" ],
        "properties" : {
          "conductorId" : {
            "type" : "string",
            "example" : "4562893742"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Betty"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Adams"
          },
          "role" : {
            "type" : "string",
            "example" : "PRIMARY"
          },
          "primaryIdentifier" : {
            "type" : "integer",
            "example" : 1
          },
          "accountPermissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountPermissions"
            }
          }
        }
      },
      "Amounts" : {
        "type" : "array",
        "items" : {
          "properties" : {
            "amountType" : {
              "$ref" : "#/components/schemas/AccountAmountType"
            },
            "value" : {
              "description" : "The amount value of the given currency. As defined by ISO 20022, CurrencyAndAmount.",
              "type" : "string",
              "pattern" : "[0-9]{1,13}\\.[0-9]{1,3}",
              "minimum" : 0,
              "example" : 100.5
            },
            "currency" : {
              "description" : "The currency code as defined by ISO 20022, ActiveCurrencyCode\nSee also: https://en.wikipedia.org/wiki/ISO_4217\n",
              "type" : "string",
              "minLength" : 3,
              "maxLength" : 3,
              "pattern" : "[A-Z]{3,3}",
              "example" : "USD"
            }
          }
        }
      },
      "AccountAmountType" : {
        "type" : "string",
        "enum" : [ "LEDGER_BALANCE", "AVAILABLE_BALANCE", "AVAILABLE_CREDIT", "CREDIT_LIMIT", "OVERDRAFT_LIMIT", "LOAN_BALANCE", "INTEREST_AMOUNT", "REGULAR_PAYMENT_AMOUNT", "REGULAR_PAYMENT_DUE", "PRINCIPLE_BALANCE", "CURRENT_AMOUNT_DUE", "LAST_PAYMENT_AMOUNT", "LAST_CHARGE_DUE", "INTEREST_PAID_YEAR_TO_DATE", "INTEREST_PAID_PREVIOUS_YEAR_TO_DATE", "OFF_HOST_DEBIT_AMOUNT", "OFF_HOST_CREDIT_AMOUNT", "TOTAL_DEBIT_AMOUNT", "TOTAL_CREDIT_AMOUNT", "PAYOFF_AMOUNT", "OWING_AMOUNT", "AMOUNT_ALREADY_DRAWN_ON", "MEMBER_PROVIDED_FEE_AMOUNT", "REMAINING_PREAUTHORIZED_AMOUNT", "HEALTHCARE_ELIGIBILITY_AMOUNT", "PRESCRIPTION_ELIGIBILITY_AMOUNT", "PREPAID_ONLINE_BILL_PAY_FEE_AMOUNT", "CASH_BACK", "ORIGINAL_AMOUNT", "POI_AMOUNT", "CO_PAY_AMOUNT" ],
        "example" : "AVAILABLE_BALANCE",
        "description" : "Amount types for account"
      },
      "LoanType" : {
        "type" : "string",
        "enum" : [ "LOAN", "CONSUMER_LOAN", "COMMERCIAL_LOAN", "MORTGAGE_LOAN", "EXTERNAL_LOAN", "LOAN_DENIAL" ],
        "example" : "MORTGAGE_LOAN",
        "description" : "All the possible account types for LOAN Accounts"
      },
      "Loan" : {
        "type" : "object",
        "description" : "Loan balance to be represented in amounts as LOAN_BALANCE",
        "properties" : {
          "loanType" : {
            "$ref" : "#/components/schemas/LoanType"
          },
          "loanMaturityDate" : {
            "$ref" : "#/components/schemas/Date"
          }
        }
      },
      "Credit" : {
        "type" : "object",
        "description" : "Credit amounts to be represnted in amounts as CREDIT_LIMIT, AVAILABLE_CREDIT, LAST_CHARGE_DUE, INTEREST_PAID_YEAR_TO_DATE, INTEREST_PAID_PREVIOUS_YEAR_TO_DATE, INTEREST_AMOUNT",
        "properties" : {
          "interestRate" : {
            "type" : "number",
            "format" : "double",
            "description" : "Interest rate for this account",
            "example" : 2.34
          }
        }
      },
      "Payment" : {
        "type" : "object",
        "description" : "Payment amounts to be represnted in amounts as REGULAR_PAYMENT_AMOUNT, REGULAR_PAYMENT_DUE, PRINCIPAL_BALANCE, PAYOFF_AMOUNT, LAST_PAYMENT_AMOUNT",
        "properties" : {
          "regularPaymentDueDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "regularPaymentFrequency" : {
            "type" : "string",
            "description" : "Regular payment frequency. This can be ‘Monthly’, ‘Weekly’ etc, for some hosts it is Integer value.",
            "example" : 4
          },
          "lastPaymentDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "paymentMethod" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "The payment method of this account."
          }
        }
      },
      "AccountListWarning" : {
        "type" : "object",
        "required" : [ "accountRef", "isBankEmployee", "accountWarnings" ],
        "properties" : {
          "accountRef" : {
            "$ref" : "#/components/schemas/AccountRef"
          },
          "isBankEmployee" : {
            "type" : "boolean",
            "description" : "Is Bank Employee."
          },
          "accountWarnings" : {
            "items" : {
              "$ref" : "#/components/schemas/Warning"
            }
          },
          "additionalProperties" : {
            "$ref" : "#/components/schemas/AdditionalProperties"
          }
        }
      },
      "Warning" : {
        "type" : "object",
        "required" : [ "warningCode", "effectiveDate" ],
        "properties" : {
          "effectiveDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "expirationDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "warningCode" : {
            "type" : "string",
            "example" : 94,
            "description" : "The warning code for warning."
          },
          "description" : {
            "type" : "string",
            "description" : "The description for this warning."
          },
          "category" : {
            "type" : "string",
            "description" : "The category for this warning."
          }
        }
      },
      "AccountInfo" : {
        "type" : "object",
        "required" : [ "accountType", "accountNumber", "accountOwnerName", "accountStatus", "amounts" ],
        "properties" : {
          "accountOwnerName" : {
            "type" : "string",
            "description" : "The owner of the account. ",
            "example" : "JOHN DOE"
          },
          "accountOwnership" : {
            "$ref" : "#/components/schemas/AccountOwnership"
          },
          "accountStatus" : {
            "$ref" : "#/components/schemas/AccountStatus"
          },
          "accountName" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "The account name/number which is displayed to the user.",
            "example" : "Your Savings account"
          },
          "cardNumber" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Card number",
            "example" : 3999821321
          },
          "accountNumber" : {
            "description" : "The account number. The length varies greatly. In Europe defined by ISO 13616/2007\nSee also:\nhttps://en.wikipedia.org/wiki/International_Bank_Account_Number\n",
            "type" : "string",
            "minLength" : 6,
            "maxLength" : 255,
            "example" : "A0123456789"
          },
          "accountCurrency" : {
            "description" : "The currency code as defined by ISO 20022, ActiveCurrencyCode\nSee also: https://en.wikipedia.org/wiki/ISO_4217\n",
            "type" : "string",
            "minLength" : 3,
            "maxLength" : 3,
            "pattern" : "[A-Z]{3,3}",
            "example" : "USD"
          },
          "accountType" : {
            "$ref" : "#/components/schemas/AccountType"
          },
          "accountSubType" : {
            "description" : "Returns the \"original\" backend type of the account. The value is taken from the backend response and put into the response to the client as it is!",
            "type" : "string",
            "maxLength" : 255,
            "example" : "Savings account"
          },
          "branchCode" : {
            "description" : "The branch code of the bank",
            "type" : "string",
            "example" : 1234
          },
          "bankCode" : {
            "description" : "Contains the BIC (aka. bank identifier code)\n  The BIC - also known as SWIFT-code - as defined by ISO 9362 is required in/for cross border transfers/transactions.\n  Please see: https://en.wikipedia.org/wiki/ISO_9362\n  \n  This field can also be used to send/receive an ABA RTN (ABA routing transit number) or Canadian TN (Canadian transit number).\n  See also: https://en.wikipedia.org/wiki/Routing_transit_number\n",
            "type" : "string",
            "minLength" : 8,
            "maxLength" : 11,
            "example" : ""
          },
          "instituteName" : {
            "description" : "The name of the institute, identified by the 'bankCode'. This field is always optional as long as it isn't marked as 'required'.\n",
            "type" : "string",
            "maxLength" : 255,
            "example" : "Deutsche Bank"
          },
          "nickName" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "NickName",
            "example" : "Nick"
          },
          "openDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "accountMaturityDate" : {
            "$ref" : "#/components/schemas/Date"
          },
          "amounts" : {
            "$ref" : "#/components/schemas/Amounts"
          },
          "conductors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Conductor"
            }
          },
          "possibleTransactionsAsSourceAccount" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TransactionTypes"
            }
          },
          "possibleTransactionsAsTargetAccount" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TransactionTypes"
            }
          },
          "loan" : {
            "$ref" : "#/components/schemas/Loan"
          },
          "credit" : {
            "$ref" : "#/components/schemas/Credit"
          },
          "payment" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "accountWarnings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Warning"
            }
          },
          "additionalProperties" : {
            "$ref" : "#/components/schemas/AdditionalProperties"
          }
        }
      },
      "AccountInformationBase" : {
        "type" : "object",
        "required" : [ "accountNumber", "accountType", "accountOwnerName", "accountStatus", "amounts" ],
        "properties" : {
          "accountNumber" : {
            "description" : "The account number. The length varies greatly. In Europe defined by ISO 13616/2007\nSee also:\nhttps://en.wikipedia.org/wiki/International_Bank_Account_Number\n",
            "type" : "string",
            "minLength" : 6,
            "maxLength" : 255,
            "example" : "A0123456789"
          },
          "accountType" : {
            "$ref" : "#/components/schemas/AccountType"
          },
          "accountOwnerName" : {
            "type" : "string",
            "description" : "The owner of the account. ",
            "example" : "JOHN DOE"
          },
          "accountOwnership" : {
            "$ref" : "#/components/schemas/AccountOwnership"
          },
          "accountStatus" : {
            "$ref" : "#/components/schemas/AccountStatus"
          },
          "accountName" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "The account name/number which is displayed to the user.",
            "example" : "Your Savings account"
          },
          "accountCurrency" : {
            "description" : "The currency code as defined by ISO 20022, ActiveCurrencyCode\nSee also: https://en.wikipedia.org/wiki/ISO_4217\ntype: string\nminLength: 3\nmaxLength: 3\npattern: '[A-Z]{3,3}'\nexample: USD\n"
          },
          "bankCode" : {
            "description" : "Contains the BIC (aka. bank identifier code)\n  The BIC - also known as SWIFT-code - as defined by ISO 9362 is required in/for cross border transfers/transactions.\n  Please see: https://en.wikipedia.org/wiki/ISO_9362\n  \n  This field can also be used to send/receive an ABA RTN (ABA routing transit number) or Canadian TN (Canadian transit number).\n  See also: https://en.wikipedia.org/wiki/Routing_transit_number\n",
            "type" : "string",
            "minLength" : 8,
            "maxLength" : 11,
            "example" : ""
          },
          "instituteName" : {
            "description" : "The name of the institute, identified by the 'bankCode'. This field is always optional as long as it isn't marked as 'required'.\n",
            "type" : "string",
            "maxLength" : 255,
            "example" : "Deutsche Bank"
          },
          "amounts" : {
            "$ref" : "#/components/schemas/Amounts"
          },
          "possibleTransactionsAsSourceAccount" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TransactionTypes"
            }
          },
          "possibleTransactionsAsTargetAccount" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TransactionTypes"
            }
          },
          "loan" : {
            "$ref" : "#/components/schemas/Loan"
          },
          "credit" : {
            "$ref" : "#/components/schemas/Credit"
          },
          "payment" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "accountWarnings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Warning"
            }
          }
        }
      },
      "AdditionalProperties" : {
        "type" : "object",
        "description" : "Additional properties can be provided within this object"
      },
      "SupplementaryData" : {
        "type" : "object",
        "description" : "Additional information incorporated as an extension to the message by mixins based on the transaction type          "
      },
      "Date" : {
        "type" : "string",
        "pattern" : "([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))",
        "description" : "The date pattern is defined \"YYYY-MM-DD\", with YYYY as 4-digit year, MM as 2-digit month and DD as 2-digit day of month.\nDate string as defined by date-time\n",
        "example" : "2019-09-23"
      },
      "Address" : {
        "type" : "object",
        "required" : [ "street", "streetno", "city", "zipcode" ],
        "properties" : {
          "street" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "The name of the street.",
            "example" : "Mainstreet"
          },
          "streetno" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "The street number of this address.",
            "example" : "119"
          },
          "city" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "The name of the city.",
            "example" : "New York"
          },
          "zipcode" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "The zip code of this city.",
            "example" : "N5467"
          },
          "countrycode" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "The ISO 3166 (alpha-3) country code of this address. \nSee also: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\n",
            "example" : "USA"
          }
        }
      },
      "TransactionMetaData" : {
        "type" : "object",
        "required" : [ "amount" ],
        "properties" : {
          "settlementType" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "The type of settlement.",
            "example" : "CASH"
          },
          "operationType" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "The type of operation.",
            "example" : "Credit"
          },
          "accountRef" : {
            "$ref" : "#/components/schemas/AccountRef"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "transactionRef" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Transaction reference.",
            "example" : "A12345"
          },
          "transactionDescCode" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Transaction description code",
            "example" : "Deposit"
          },
          "beneficiaryConsumerId" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Id of the beneficiary who is a consumer",
            "example" : "A000013"
          },
          "beneficiaryNonConsumerId" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Id of the beneficiary who is a non-consumer",
            "example" : 22343
          },
          "beneficiaryType" : {
            "type" : "string",
            "maxLength" : 255,
            "description" : "Type of the beneficiary",
            "example" : "Consumer"
          }
        }
      },
      "TransactionTypes" : {
        "type" : "string",
        "enum" : [ "sbLogin", "sbLogout", "sbRelogin", "sbOpenConsumer", "sbCardlessLogin", "sbAccountMovement", "sbAccountOverview", "sbCheckCashing", "sbDeposit", "sbMixedMediaPayment", "sbTransfer", "sbWithdrawal", "sbPinChange", "sbPrestagedCashOut", "sbPrestagedCashIn", "sbEReceipt", "sbLoadCustomerPreferences", "sbSaveCustomerPreferences", "sbAssistedWithdrawal", "sbAssistedDeposit", "sbLimitApproval", "sbRequestSupport", "sbCreditorSelection" ],
        "example" : "sbDeposit"
      },
      "TransactionFee" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Fee name",
            "example" : "TRANSACTION_FEE"
          },
          "type" : {
            "$ref" : "#/components/schemas/FeeType"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "accountRef" : {
            "$ref" : "#/components/schemas/AccountRef"
          },
          "state" : {
            "$ref" : "#/components/schemas/FeeState"
          }
        }
      },
      "FeeType" : {
        "type" : "string",
        "enum" : [ "DIRECT_ACQUIRER_FEE", "INDIRECT_ACQUIRER_FEE", "ISSUER_FEE", "SPECIAL_FEE", "SETTLEMENT_ACQUIRER_FEE", "TELLER_MODIFIABLE_FEE", "DCC_COMMISSION_FEE" ],
        "example" : "DIRECT_ACQUIRER_FEE"
      },
      "FeeState" : {
        "type" : "string",
        "enum" : [ "CONF_REQUIRED", "CONF_DECLINED", "CONFIRMED", "CONF_NOT_REQUIRED" ],
        "example" : "CONF_NOT_REQUIRED"
      },
      "Channel" : {
        "type" : "string",
        "enum" : [ "selfService", "network", "teller", "mobile", "undefined" ],
        "description" : "Channel through which transaction is initiated."
      },
      "Device" : {
        "type" : "object",
        "description" : "ATM Device",
        "required" : [ "device" ],
        "properties" : {
          "device" : {
            "type" : "string",
            "description" : "Device id. For a list of all 185 possible devices please refer to - http://[xxx.xxx.xxx.xxx]/pce-manuals/ruegen/pdf25/KnowledgeBase/doc/content.html?url=content/html/KnowledgeBase_SRV/SEC_possible_devices.html&search=PCEDeviceConstant",
            "example" : "DOCUMENT_FEED"
          },
          "deviceState" : {
            "type" : "string",
            "description" : "State of Device OPERATIONAL or NON_OPERATIONAL",
            "example" : "OPERATIONAL"
          }
        }
      },
      "AccountingState" : {
        "type" : "string",
        "enum" : [ "OK", "ABORT", "CRITICAL", "NOT_AUTHORIZED" ],
        "example" : "OK"
      },
      "MediaState" : {
        "type" : "string",
        "enum" : [ "UNKNOWN", "RETAINED", "OK", "JAMMED", "NO_MEDIA", "REMAINED_IN_SLOT", "REJECTED", "RECYCLED", "RECYCLING_ERROR" ],
        "example" : "OK"
      },
      "HoldType" : {
        "type" : "string",
        "enum" : [ "GENERAL_PURPOSE_HOLD", "CHECK_HOLD", "NOT_SPECIFIED" ],
        "example" : "GENERAL_PURPOSE_HOLD",
        "description" : "Type of Hold on Account"
      },
      "MediaType" : {
        "type" : "string",
        "enum" : [ "NOTE", "NOTE_L2", "NOTE_L3", "NOTE_L4", "NOTE_UNFIT", "COIN", "PRINT_DOCUMENTS", "CHECK", "ENVELOPE", "CARD", "PASSBOOK" ],
        "example" : "NOTE"
      },
      "CancelReason" : {
        "type" : "string",
        "description" : "Cancel Reason",
        "example" : "HARDWARE_ERROR",
        "enum" : [ "UNDEFINED", "TIME_OUT", "CONSUMER_CANCEL", "HARDWARE_ERROR", "COMMUNICATION_ERROR", "NOT_AUTHORIZED", "DOOR_OPENED", "LIMIT_EXCEEDED", "WORKSTATION_CLOSED", "CHIP_ERROR", "MESSAGE_INVALID", "HSM_STATE_INVALID", "CARD_READ_ERROR", "SERVER_ERROR", "CLIENT_ERROR", "APPLICATION_CANCEL", "COUNTERFEIT_LIMIT_EXCEEDED" ]
      },
      "DenomCounter" : {
        "type" : "object",
        "description" : "Denomination Counter",
        "required" : [ "currency", "denomination" ],
        "properties" : {
          "currency" : {
            "description" : "The currency code as defined by ISO 20022, ActiveCurrencyCode\nSee also: https://en.wikipedia.org/wiki/ISO_4217\n",
            "type" : "string",
            "minLength" : 3,
            "maxLength" : 3,
            "pattern" : "[A-Z]{3,3}",
            "example" : "USD"
          },
          "denomination" : {
            "type" : "string",
            "description" : "Denomination",
            "example" : 500
          },
          "release" : {
            "type" : "integer",
            "description" : "release of document (e.g. newer edition of banknote)"
          },
          "physicalType" : {
            "$ref" : "#/components/schemas/PhysicalType"
          },
          "dispensedCounter" : {
            "type" : "integer",
            "description" : "counter",
            "example" : 2
          },
          "dispensedToConsumerCount" : {
            "type" : "integer",
            "description" : "counter",
            "example" : 4
          },
          "remainingTotalCounter" : {
            "type" : "integer",
            "description" : "counter"
          },
          "level4Count" : {
            "type" : "integer",
            "description" : "counter"
          },
          "level3Count" : {
            "type" : "integer",
            "description" : "counter"
          },
          "level2Count" : {
            "type" : "integer",
            "description" : "counter"
          },
          "unfitCount" : {
            "type" : "integer",
            "description" : "counter"
          },
          "retainCount" : {
            "type" : "integer",
            "description" : "counter"
          },
          "rejectCounter" : {
            "type" : "integer",
            "description" : "counter"
          },
          "retractCounter" : {
            "type" : "integer",
            "description" : "counter"
          }
        }
      },
      "PhysicalType" : {
        "type" : "string",
        "description" : "type of documents NOTE | COIN",
        "enum" : [ "COIN", "NOTE" ],
        "example" : "NOTE"
      },
      "DeviceChangeType" : {
        "type" : "string",
        "enum" : [ "UNKNOWN", "DEVICE_ADDED", "DEVICE_REMOVED", "CASH_ADDED", "CASH_REMOVED", "NO_SOP_OPERATED_CHANGE", "NEW_CHECK_PERIOD" ],
        "example" : "UNKNOWN",
        "description" : "Device Change type"
      },
      "CassCounter" : {
        "type" : "object",
        "properties" : {
          "device" : {
            "$ref" : "#/components/schemas/Device"
          },
          "changeType" : {
            "$ref" : "#/components/schemas/DeviceChangeType"
          },
          "denomCounter" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DenomCounter"
            }
          }
        }
      },
      "CassCounterChangeReason" : {
        "type" : "string",
        "enum" : [ "INITIALIZED", "RESYNC_STATE_BY_COMMAND", "DEVICESTATE", "CASS_COUNTER_REPLENISHMENT", "SECURITY_VIOLATION" ],
        "example" : "INITIALIZED"
      }
    }
  }
}