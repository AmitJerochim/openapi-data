openapi: 3.0.0
info:
  description: API for Virtual Coach
  version: "0.1.0-oas3"
  title: Virtual Coach API
  contact:
    email: icarusxu@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: Operations for regular users
paths:
  /openDataset:
    post:
      tags: 
        - users
      summary: 開始收集資料 Start collecting data for building model
      requestBody:
        description: Provide user, sport and posture ID to begin a new data collection session
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "jt71XLVySQ"
                sportId:
                  type: string
                  example: "badminton"
                postureId:
                  type: string
                  description: "options including smash, clear, drive, slice, lift"
                  example: "smash"
              required:
                - userId
                - sportId
                - postureId
      responses:
        '200':
          description: return dataset ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasetId:
                    type: string
                    example: "wIs4ZLoqm1"
        '400':
          description: bad input parameter
          
  /dataset:
    post:
      tags: 
        - users
      summary: 新增一筆動作資料至資料集 add a new data to specified dataset
      requestBody:
        description: Provide the ID of dataset and series of 9 axis data points
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                datasetId:
                  type: string
                  example: "wIs4ZLoqm1"
                judge:
                  type: number
                  example: 1
                  description: whether the posture is good or bad. Good=1, Bad=0.
                series:
                  type: array
                  items:
                    $ref: '#/components/schemas/DataPoint'
              required:
                - datasetId
                - judge
                - series
      responses:
        '200':
          description: successfully saved data
        '400': 
          description: bad input parameter
          
  /closeDataset:
    post:
      tags: 
        - users
      summary: 關閉資料蒐集 Stop the collection of data for specified dataset
      requestBody:
        description: specify the ID of dataset to be closed
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                datasetId:
                  type: string
                  example: "wIs4ZLoqm1"
              required:
                - datasetId
      responses:
        '200':
          description: successfully closed data collection
        '400': 
          description: bad input parameter
          
  /startInspection:
    post:
      tags: 
        - users
      summary: 開啟新的檢測階段 Start a new session for inspecting user's posture
      requestBody:
        description: Provide the userID, sportID, and postureID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "jt71XLVySQ"
                sportId:
                  type: string
                  example: "badminton"
                postureId:
                  type: string
                  example: "smash"
              required:
                - userId
                - sportId
                - postureId
      responses:
        '200':
          description: succesfully loaded the model
          content:
            application/json:
              schema:
                type: object
                properties:
                  errno: 
                    type: number
                    example: 0
                  sessionId:
                    type: string
                    example: 'huWRVCXHU9'
              examples:
                OK:
                  summary: successfully loaded
                  value: 
                    errno: 0
                    sessionId: 'huWRVCXHU9'
                NoModel:
                  summary: model doesn't exist
                  value: 
                    errno: -1
                ModelIsBuilding:
                  summary: model is building
                  value:
                    errno: -2
        '400':
          description: bad input parameter

  /inspection:
    post:
      tags: 
        - users
      summary: 傳送一筆動作做檢測 Send a new posture data for inspection
      requestBody:
        description: Specify the ID of the inspection session
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: string
                  example: 'huWRVCXHU9'
                series:
                  type: array
                  items:
                    $ref: '#/components/schemas/DataPoint'
              required:
                - datasetId
      responses:
        '200':
          description: inspection succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  judge:
                    type: number
                    description: whether the posture is good or bad. Good=1, Bad=0.
                    example: 0
        '400': 
          description: bad input parameter
          
servers:
  - url: 'http://virtserver.swaggerhub.com/icarus/VirtualCoach/0.1.0'
components:
  schemas:
    DataPoint:
      type: object
      properties:
        accX:
          type: number
        accY:
          type: number
        accZ:
          type: number
        gyroX:
          type: number
        gyroY:
          type: number
        gyroZ:
          type: number
        magnetometerX:
          type: number
        magnetometerY:
          type: number
        magnetometerZ:
          type: number
        timestamp:
          type: string
          example: "2020-03-13T14:16:01.135Z"
