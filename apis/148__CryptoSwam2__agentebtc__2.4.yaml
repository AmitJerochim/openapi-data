openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/CryptoSwam2/agentebtc/1.0.1
  - description: AgenteBTC API
    url: https://api.agentebtc.com
info:
  title: AgenteBTC API
  description: El API de agente consiste de una REST API basado en JWT. Una vez obtenido el acceso, el usuario podrá realizar múltiples operaciones financieras.
  version: "2.4"
  contact:
    email: cryptoswam@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Autenticación
    description: La autentación de Agente BTC está basada en JWT que duran 24 horas en la que el usuario puede realizar múltiples tipos de operaciones financieras en nuestro sistema, e.g, cotizar, generar un pedido, enviar la confirmación del mismo o cancelarlo.
  - name: Users
    description: Users
  - name: Transaction
    description: Transaction
paths:
  /auth/register:
    post:
      tags:
        - Autenticación
      summary: Registro de nuevo usuario.
      operationId: registerUser
      description: Registro de nuevo usuario.  Necesito como mínimo un nombre de usuario, una contraseña y un correo. Se puede usar como nombre de usuario el correo electrónico
      responses:
        '201':
          description: Cuenta creada y correo electrónico de confirmación enviado a usuario.
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "account-created"
                  msg:
                    type: string
                    example: "Cuenta creado, porfavor verificar correo de confirmación"
        '400':
          description: Body incompleto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingFields'
        '409':
          description: Campos ingresados ya están se encuentra en uso solo hay dos opciones, o que el correo ya haya sido usado o que el cupón (si es ingresado) ya haya sido usado. Cuando el type  es mail-in-use significa que el correo ya ha sido usado. Cuando el type es coupon-used  significa cupón ya fue usado por otro usuario.
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "mail-in-use"
                  msg:
                    type: string
                    example: "Correo se encuentra en uso"
        '500':
          description: Error en el servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
    
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        description: User Register Object - username, password and email
  /auth/login:
    post:
      tags:
        - Autenticación
      summary: Logueo de usuario
      operationId: login
      description: Loguea a un usuario y retorna un token válido por 24 horas
      responses:
        '200':
          description: Logueo existoso y token válido por 24 horas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginToken'
        '400':
          description: Body incompleto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingFields'
        '401':
          description: Usuario o contraseña incorrecto
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "incorrect-credentials"
                  msg:
                    type: string
                    example: "Usuario o contraseña incorrecto"
        '403':
          description: Usuario debe verificar el correo
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "not-verified"
                  msg:
                    type: string
                    example: "Your account has not been verified."
        '404':
          description: Usuario no existente
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "not-found-user"
                  msg:
                    type: string
                    example: "Usuario no encontrado"
        '500':
          description: Body incompleto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        description: User Login Object - username and password

  /auth/resendtoken:
    post:
      tags:
        - Autenticación
      summary: Resend a token
      operationId: resendToken
      description: resend a Token
      responses:
        '201':
          description: "Token resend to email"
        '400':
          description: "Invalid email"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResendToken'
        description: Only email in body
        
  /auth/recover:
    post:
      tags:
        - Autenticación
      summary: sends an email to recover password
      operationId: recover
      description: sends an email to recover password
      responses:
        '201':
          description: "recover email sent"
        '400':
          description: "incorrect username or email"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        description: Inventory item to add
  /auth/changepassword:
    post:
      tags:
        - Autenticación
      summary: changes password given a token
      operationId: changepassword
      description: changes password given a token
      responses:
        '201':
          description: "Password changed succesfully"
        '401':
          description: "Incorrect token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        description: Password to change and Token
  /auth/confirm:
    post:
      tags:
        - Autenticación
      summary: confirms email
      operationId: confirmaccount
      description: confirms email
      responses:
        '201':
          description: "email confirmed"
        '400':
          description: "invalid token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        description: Inventory item to add
  /user/admin:
    get:
      security:
        - bearerAuth: []  
      tags:
        - Users
      summary: Get my user data
      operationId: getUsers
      description: Get array of all users matching criteria
      parameters:
        - in: query
          name: skip
          description: skip
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: limit
          required: false
          schema:
            type: integer
        - in: query
          name: name
          description: name
          required: false
          schema:
            type: string
        - in: query
          name: email
          description: email
          required: false
          schema:
            type: string
        - in: query
          name: isVerified
          description: isVerified
          required: false
          schema:
            type: boolean
        - in: query
          name: isValidated
          description: isValidated
          required: false
          schema:
            type: boolean
        - in: query
          name: hasCoupon
          description: hasCoupon
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Usuario no existente
        '403':
          description: Usuario no es administrador
        '500':
          description: Error en el servidor
  /user:
    get:
      security:
        - bearerAuth: []  
      tags:
        - Users
      summary: Get my user data
      operationId: getMyUserData
      description: Get my information as a user
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized request
    put:
      tags:
        - Users
      security:
        - bearerAuth: []  
      summary: Actualiza los datos personales del usuario
      operationId: updateuser
      description: Actualiza los datos personales del usuario. Se puede actualizar el teléfono, nombre, dirección, dni, wallet, número de cuenta, banco y el cupón. También puedes enviar la foto de DNI trasera y delantera. Recuerda que esta petición es multipart/form-data.
      responses:
        '200':
          description: El usuario fue actualizado con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "user-updated"
                  msg:
                    type: string
                    example: "Los datos del usuario fueron actualizados con éxito."
        '400':
          description: El usuario no existe en la base de datos
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "non-found-user"
                  msg:
                    type: string
                    example: "No hemos encontrado al usuario en nuestra base de datos"
        '409':
          description: Campos ingresados ya están se encuentra en uso. Cuando el type es coupon-used  significa cupón ya fue usado por otro usuario. Cuando el type es coupon-used  significa cupón ya fue usado por otro usuario.Cuando el type es user-has-coupon  significa que el usuario ya tiene un cupón de inicio.
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "coupon-used"
                  msg:
                    type: string
                    example: "El cupón ya fue usado por otro usuario. Favor de usar uno diferente."
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        description: Inventory item to add
  /admin/transactions:
    get:
      security:
        - bearerAuth: []  
      tags:
        - Transaction
      summary: get transactions
      operationId: searchTransactionsAdmin
      description: Get a list of all transactions
      parameters:
        - in: query
          name: skip
          description: skip
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: limit
          required: false
          schema:
            type: integer
        - in: query
          name: min_date
          description: min_date
          required: false
          schema:
            type: integer
        - in: query
          name: max_date
          description: max_date
          required: false
          schema:
            type: integer
        - in: query
          name: state
          description: state
          required: false
          schema:
            type: string
        - in: query
          name: transaction_type
          description: transaction_type
          required: false
          schema:
            type: string
        - in: query
          name: currency
          description: can be PEN or USD
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: username as optional query
          required: false
          schema:
            type: string
        - in: query
          name: id
          description: transaction id
          required: false
          schema:
            type: string
        - in: query
          name: wallet
          description: wallet
          required: false
          schema:
            type: string
        - in: query
          name: hasCoupon
          description: whether you are looking transactions with coupons
          required: false
          schema:
            type: boolean
        - in: query
          name: cumulative
          description: si es que se desean valores cumulativos
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: resultados que cumplan con los requerimientos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '400':
          description: Usuario no existente
        '403':
          description: Usuario no es administrador
        '500':
          description: Error en el servidor
  /transactions:
    get:
      security:
        - bearerAuth: []  
      tags:
        - Transaction
      summary: get transactions
      operationId: searchTransactions
      description: Get a list of transactions
      parameters:
        - in: query
          name: username
          description: name as optional query
          required: false
          schema:
            type: string
        - in: query
          name: maxDate
          description: maxDate
          required: false
          schema:
            type: number
        - in: query
          name: minDate
          description: minDate
          required: false
          schema:
            type: number
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '400':
          description: bad input parameter
    post:
      security:
        - bearerAuth: []  
      tags:
        - Transaction
      summary: Crea de una transacción
      operationId: createtransaction
      description: Crea una transacción
      responses:
        '200':
          description: transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: invalid transaction object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTransaction'
        description: Transaccion Object
      
  /transactions/:id:
    get:
      security:
        - bearerAuth: []  
      tags:
        - Transaction
      summary: Get specific transaction
      operationId: searchTransaction
      description: Looking for an specific transaction
      parameters:
        - in: path
          name: id
          description: Transaction ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
                  
        '400':
          description: bad input parameter
  /transactions/confirm/:id:
    put:
      security:
        - bearerAuth: []  
      tags:
        - Transaction
      summary: Confirm transaction data
      operationId: confirmTransaction
      description: Confirm transaction 
      responses:
        '201':
          description: transaction updated
        '400':
          description: invalid transaction object
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfirmTransaction'
        description: Transaccion Object
        
  /transaction/quote:
    post:
      security:
        - bearerAuth: []  
      tags:
        - Transaction
      summary: Solicita una cotización
      operationId: quoteTransaction
      description: Para saber cotizar la tasa de cambio necesitas hacer una petición a este endpoint
      responses:
        '200':
          description: transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'
        '400':
          description: Body incompleto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingFields'
        '403':
          description: Solicitud incorrecta
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "solicitud-incorrecta"
                  msg:
                    type: string
                    example: "El typo de conversión no es correcto"
        '500':
          description: Error en el servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuote'
        description: Transaccion Object
  /coupon/:id:
    get:
      security:
        - bearerAuth: []  
      tags:
        - Coupon
      summary: Get specific coupon
      operationId: searchCoupon
      description: Looking for an specific coupon
      parameters:
        - in: path
          name: id
          description: Coupon ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          description: bad input parameter
        
    
components:
  schemas:
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: jhonedoe@gmail.com
        password:
          type: string
          example: "@34$h78b!199S"
    UserResendToken:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: jhon.doe95@gmail.com
    UserRegister:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: jhon.doe
        email:
          type: string
          example: jhon.doe@doe.com
        password:
          type: string
          example: 5-f72n@!
        createdBy:
          type: string
          example: mark.doe
        coupon:
          type: string
          example: xhs1kj
    Coupon: 
      type: object
      properties:
        code:
          type: string
          example: xjs8aj
        type:
          type: string
          example: general-bonus
        provider:
          type: string
          example: recidare
        used:
          type: boolean
          example: false
        quantity:
          type: string
          example: 0.002
    User:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
          example: jhon.doe
        email:
          type: string
          example: jhon.doe@doe.com
        created_at:
          type: number
          example: 679356480268203
        phone:
          type: string
          example: +51 567 435 130
        name:
          type: string
          example: Jhon Doe
        createdBy:
          type: string
          example: mark.doe
        isAgent:
          type: boolean
          example: true
        address:
          type: string
          example: Avenida Tomas Marsano 3445
        isAdmin:
          type: boolean
          example: true
        isVerified:
          type: boolean
          example: true
        dniFront:
          type: string
          example: baas1897618as1234as.jpg
        dniBack:
          type: string
          example: a127618as1234s4asas.jpg
        isValidated:
          type: boolean
          example: true
        wallet:
          type: string
          example: hao172ma01bap1avak
        dni:
          type: number
          example: 15468367
        accountNumber:
          type: string
          example: 125643956168
        bank:
          type: string
          example: interbank
        registerCouponId:
          type: string
          example: fg568vnk
        hasRegisterCoupon:
          type: boolean
          example: false
    UpdateUser:
      type: object
      properties:
        phone:
          type: string
          example: +51 567 435 130
        name:
          type: string
          example: Jhon Doe
        address:
          type: string
          example: Avenida Tomas Marsano 3445
        dni:
          type: string
          example: 70450717
        wallet:
          type: string
          example: hao172ma01bap1avak
        accountNumber:
          type: string
          example: 125643956168
        bank:
          type: string
          example: interbank
        coupon:
          type: string
          example: xha79s 
        dniFront:
          type: string
          format: binary
        dniBack:
          type: string
          format: binary
    NewTransaction:
      type: object
      required:
        - username
        - email
      properties:
        ammounts:
          type: array
          items:
            type: number
          example: [0.15,1200.0]
        currencies:
          type: array
          items:
            type: string
          example: ["BTC", "USD"]
        transactionType:
          type: string
          example: 'SELL'
    NewQuote: 
      type: object
      required:
        - ammount
        - from
        - to
        - transactionType
      properties:
        ammount:
          type: number
          example: 100
        from:
          type: string
          example: 'BTC'
        to:
          type: string
          example: 'USD'
        transactionType:
          type: string
          example: 'SELL'
          
    Transaction:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
          example: jhon.doe
        ammounts:
          type: array
          items:
            type: number
          example: [0.15,1200.0]
        currencies:
          type: array
          items:
            type: string
          example: ["BTC", "USD"]
        transactionType:
          type: string
          example: 'SELL'
        rates:
          $ref: '#/components/schemas/Rates'
        price:
          $ref: '#/components/schemas/Price'
        createdAt:
          type: number
          example: 546379025722
        modifiedAt:
          type: number
          example: 467589026749
        couponId:
          type: string
          example: gan8af61n782avzm
        state:
          type: string
          example: CREATED
        history:
          type: array
          items:
            type: object
          example: [{date: 23452352345, state: 'CREATED'}]
        wallet:
          type: string
          example: a2b7o368asfydba78sfd
        bank:
          type: string
          example: interbank
        accountNumber:
          type: number
          example: 71825646427813
        voucherImage:
          type: string
          example: as21vasufa.jpg
        btcPlusCoupon:
          type: number
          example: 0.1028
        couponValue:
          type: number
          example: 0.0028
        hasCoupon:
          type: boolean
          example: true
    ConfirmTransaction:
      type: object
      required:
        - username
        - email
      properties:
        wallet:
          type: string
          example: a2b7o368asfydba78sfd
        bank:
          type: string
          example: interbank
        accountNumber:
          type: number
          example: 71825646427813
        voucherImage:
          type: string
          format: binary
      
    QuoteResponse: 
      type: object
      properties:
        types:
          type: array
          items:
            type: string
          example: ["IN","OUT"]
        ammounts:
          type: array
          items:
            type: number
          example: [0.15,1200.0]
        currencies:
          type: array
          items:
            type: string
          example: ["BTC", "USD"]
        transactionType:
          type: string
          example: 'SELL'
        rates:
          $ref: '#/components/schemas/Rates'
        price:
          $ref: '#/components/schemas/Variables'
        converted_limits:
          $ref: '#/components/schemas/ConvertedLimits'
    Price:
      type: object
      properties:
        buyBTCUSDSpread:
          type: number
          example: +650.0
        sellBTCUSDSpread:
          type: number
          example: -950
        buyUSDPENSpread:
          type: number
          example: 0.035
        sellUSDPENSpread:
          type: number
          example: -0.035
        deliveryBTC:
          type: number
          example: 0.01
        variable:
          type: number
          example: 0.0002
        BTCUSD:
          type: number
          example: 7363.66
        USDPEN:
          type: number
          example: 3.2965
    ConvertedLimits:
      type: object
      properties:
        btc : 
          type: object
          properties:
            sell: 
              type: array
              items:
                type: number
              example: [200, 100]
            buy: 
              type: array
              items:
                type: number
              example: [200, 100]
        usd : 
          type: object
          properties:
            sell: 
              type: array
              items:
                type: number
              example: [200, 100]
            buy: 
              type: array
              items:
                type: number
              example: [200, 100]
        pen :
          type: object
          properties:
            sell: 
              type: array
              items:
                type: number
              example: [200, 100]
            buy: 
              type: array
              items:
                type: number
              example: [200, 100]
    Rates:
      type: object
      properties:
        BTCUSDBuy:
          type: number
          example: 3500
        BTCUSDSell:
          type: number
          example: 3200
        BTCPENBuy:
          type: number
          example: 9200
        BTCPENSell: 
          type: number
          example: 8600
        USDPENBuy:
          type: number
          example: 3.46
        USDPENSell:
          type: number
          example: 3.32
    Variables:
      type: object
      properties:
        buyBTCUSDSpread:
          type: number
          example: +650.0
        sellBTCUSDSpread:
          type: number
          example: -950
        buyUSDPENSpread:
          type: number
          example: 0.035
        sellUSDPENSpread:
          type: number
          example: -0.035
        deliveryBTC:
          type: number
          example: 0.01
        variable:
          type: number
          example: 0.0002
        BTCUSD:
          type: number
          example: 7363.66
        USDPEN:
          type: number
          example: 3.2965
    LoginToken:
      type: object
      properties:
        type:
          type: string
          example: "successful-login"
        token:
          type: string
          example: "g6TGCZ$%55aht!@R245TTG3"
    Token:
      type: object
      properties:
        token:
          type: string
          example: "g6TGCZ$%55aht!@R245TTG3"
    ChangePassword:
      type: object
      properties:
        token:
          type: string
          example: "g6TGCZ$%55aht!@R245TTG3"
        newpassword:
          type: string
          example: "-456HYl@·#"
        confirmnewpassword:
          type: string
          example: "456HYl@·#"
    MissingFields:
      type: object
      properties:
        type:
          type: string
          example: "missing-fields"
        msg:
          type: string
          example: "Campos faltantes"
    ServerError:
      type: object
      properties:
        type:
          type: string
          example: "system-error"
        msg:
          type: string
          example: "Server error"
        
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT