openapi: 3.0.0
info:
  description: |
    This is new API documentation for TruImages
    [https://www.truimagesauto.com](https://www.truimagesauto.com).
  version: "1.0.0-oas3"
  title: TruImages API
  contact:
    email: vshklyaev@htc-cs.ru
tags:
  - name: Car
    description: Operations with cars
  - name: Dealer
    description: Operations with Dealerships and theirs departments - Rooftops
  - name: User
    description: Operations with users
  - name: Image
    description: Operations with Images
  - name: Video
    description: Operations with Video
  - name: Work Order
    description: Operations with Work Orders
    
paths:
  /dealership:
    get:
      tags:
        - Dealer
      summary: Get dealership list
      operationId: getDealershipList
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    DealershipId:
                      type: integer
                    Description:
                      type: string
                    IsActive:
                      type: boolean

  '/dealership/{dealershipId}':
    get:
      tags:
        - Dealer
      summary: Find dealership by ID
      description: Returns a single dealership by ID
      operationId: getDealershipDetailsAction
      parameters:
        - name: dealershipId
          in: path
          description: ID of dealership to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dealership'


  '/separated-work-order/{fileId}':
    get:
      tags:
        - Work Order
      summary: Get separated work order for cars
      operationId: getSeparatedWorkOrderAction
      parameters:
        - name: fileId
          in: path
          description: ID of inventory file to processing
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarType'
        '404':
          description: File not found
          
  '/used-work-order/{fileId}':
    get:
      description: Get used cars without images and/or videos
      tags:
        - Work Order
      summary: Get separated work order for used cars
      operationId: getUsedCarsWorkOrderAction
      parameters:
        - name: fileId
          in: path
          description: ID of inventory file to processing
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsedCar'
        '404':
          description: File not found
          
  /car-lookup:
    get:
      tags:
        - Car
      summary: Get car by VIN or Stock
      description: You can use VIN or Stock to car lookup (not both)
      operationId: getLookupAction
      parameters:
        - name: rooftopId
          in: query
          description: ID of rooftop that owns the car
          required: true
          schema:
            type: integer
            format: int64
        - name: vin
          in: query
          description: VIN of the car to search
          required: true
          schema:
            type: integer
            format: int64
        - name: stock
          in: query
          description: Stock number of the car to search
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarType'
        '404':
          description: Car not found
          
  /used-car-lookup:
    get:
      tags:
        - Car
      summary: Get used car by VIN or Stock
      description: You can use VIN or Stock to used car lookup (not both)
      operationId: getUsedCarLookupAction
      parameters:
        - name: rooftopId
          in: query
          description: ID of rooftop that owns the used car
          required: true
          schema:
            type: integer
            format: int64
        - name: vin
          in: query
          description: VIN of the car to search
          required: true
          schema:
            type: integer
            format: int64
        - name: stock
          in: query
          description: Stock number of the car to search
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsedCar'
        '404':
          description: Used car not found

  /image:
    post:
      tags:
        - Image
      description: Uploaded files may contain string "**for_featuring**" at the beginning of the file name. In this case, these files will be marked as a “featured” and will be placed in first positions of ImageSet (set of images for some car). Max multipart/form-data size to upload is **512M**;
      summary: Add images for car
      operationId: postImageUploadAction
      parameters:
        - name: inventoryId
          in: query
          description: Dealership Inventory ID of car to update
          required: true
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Image type (Interior | Exterior)
          required: true
          schema:
            type: string
        - name: imageOrder
          in: query
          description: Image Order (1, 2, 3, ...)
          required: false
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files[]:
                  description: Images array (or single image) to upload
                  type: string
                  format: binary
      responses:
        '204':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  Uploaded:
                    type: integer
                    description: Successful images uploaded count
        '404':
          description: Car not found
        '400':
          description: Some of required parameters are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Status code (400)
                  message:
                    type: string
                    description: Error message

  /image-number:
    post:
      tags:
        - Image
      summary: Get the number of images in a set
      operationId: getImagesCountAction
      parameters:
        - name: inventoryId
          in: query
          description: Dealership Inventory ID of car to update
          required: true
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Image type (Interior | Exterior)
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  ImageNumber:
                    type: integer
                    description: The number of images in the image set
        '404':
          description: Car not found
        '400':
          description: Some of required parameters are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Status code (400)
                  message:
                    type: string
                    description: Error message
                  
  /used-car-image:
    post:
      tags:
        - Image
      summary: Add images for used car
      description: Max multipart/form-data size to upload is **1024M**;
      operationId: postUsedCarImageUploadAction
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files[]:
                  description: Images array (or single image) to upload
                  type: string
                  format: binary
                usedCarId:
                  description: Used car ID to update
                  type: integer
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  Uploaded:
                    type: integer
                    description: Successfully images uploaded count
        '404':
          description: Used car not found
        '400':
          description: Some of required parameters are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Status code (400)
                  message:
                    type: string
                    description: Error message

  /video-upload-path:
    get:
      tags: 
        - Video
      summary: Get AWS S3 bucket and key to upload video
      description: Method for getting a bake and a key for uploading video to AWS S3 using AWS SDK
      operationId: getKeyAndBucketToUploadVideoAction
      parameters: 
        - name: dealershipId
          in: path
          description: Dealership ID (Video owner)
          required: true
          schema:
            type: integer
            format: int64
        - name: filename
          in: path
          description: File name
          required: true
          schema:
            type: string
        - name: extension
          in: path
          description: File extension without leading comma (e.g. mp4 or mov). Not required if the filename already contains an extension.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoUploadParams'
            
  /video:
    post:
      tags:
        - Video
      summary: Add video for car
      description: Max file size to upload is **1024M**. One of the parameters is required - **url** or **file**. If both exist, the priority **url** is to load.
      operationId: postVideoUploadAction
      parameters:
        - name: inventoryId
          in: query
          description: Dealership Inventory ID of car to update
          required: true
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Video type (Interior | Exterior | Full)
          required: true
          schema:
            type: string
        - name: url
          in: query
          description: Video URL on AWS S3. Not required if **file** exists.
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: Video to upload. Not required if **url** exists.
                  type: string
                  format: binary
      responses:
        '204':
          description: Successful operation
        '404':
          description: Inventory not found
        '400':
          description: Some of required parameters are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Status code (400)
                  message:
                    type: string
                    description: Error message
 
  /used-car-video:
    post:
      tags:
        - Video
      summary: Add video for used car
      description: Max multipart/form-data size to upload is **1024M**;
      operationId: postUsedCarVideoUploadAction
      parameters:
        - name: usedCarId
          in: query
          description: ID of Used Car to update
          required: true
          schema:
            type: integer
            format: int64
        - name: url
          in: query
          description: Video URL on AWS S3. Not required if **file** exists.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: Video file to upload
                  type: string
                  format: binary

  /login:
    post:
      tags:
        - User
      summary: Get UserID and AccessToken by Username and password
      operationId: postLoginAction
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found

components:

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-access-token
      
  schemas:
    User:
      type: object
      properties:
        UserId:
          type: integer
          description: The user ID.
        AccessToken:
          type: string
          description: Access token.
          
    VideoUploadParams:
      type: object
      properties:
        key:
          type: string
          description: Key for upload file to AWS S3
        bucket:
          type: string
          description: AWS S3 bucket name
    
    Dealership:
      type: object
      properties:
        DealershipId:
          type: integer
        Description:
          type: string
        IsActive:
          type: boolean
        Rooftops:
          type: array
          items:
            $ref: '#/components/schemas/Rooftop'
        LibraryCounts:
          type: object
          properties:
            Interior:
              $ref: '#/components/schemas/LibraryCounts'
            Exterior:
              $ref: '#/components/schemas/LibraryCounts'
    
    LibraryCounts:
      type: object
      description: Associative array where the **key** is the **year** and the 
        **value** is the **counter**
      example: 
        2019: 0
    
    Rooftop:
      type: object
      properties:
        RooftopId:
          type: integer
        Description:
          type: string
        IsActive:
          type: boolean
        UsedCarParsingEnabled:
          type: boolean
        InventoryFile:
          type: object
          $ref: '#/components/schemas/InventoryFile'
    
    InventoryFile:
      type: object
      properties:
        InventoryFileId:
          type: integer
        FileName:
          type: string
        RooftopId:
          type: integer
        FileDate:
          type: string
        InventoryFileStatus:
          type: object
          $ref: '#/components/schemas/InventoryFileStatus'
        InventoryCount:
          type: integer
        FailedCount:
          type: integer
        PhotoPercent:
          type: integer
    
    InventoryFileStatus:
      type: object
      properties:
        InventoryFileStatusId: 
          type: integer
        Status: 
          type: string
    
    MappedSets:
      type: object
      properties:
        MappedPhotoInterior:
          type: boolean
        MappedPhotoExterior:
          type: boolean    
        MappedVideoInterior:
          type: boolean
        MappedVideoExterior:
          type: boolean
        MappedVideoFull:
          type: boolean
          
    Car:
      type: object
      properties:
        CarId:
          type: integer
        Vin:
          type: string
        MappedSets:
          type: object
          $ref: '#/components/schemas/MappedSets'
        StockNumber:
          type: string
        IsBlocked:
          type: boolean
        RooftopId:
          type: integer
        DealershipInventoryId:
          type: integer
        CreatedDate:
          type: integer
          description: Car created date timestamp
          
    ModelNameOptions:
      type: object
      properties:
        OptionCode:
          type: string
          
    CarType:
      type: object
      properties:
        CarTypeId:
          type: integer
        ModelTrim:
          type: string
        ModelName:
          type: string
        Year:
          type: integer
        Make:
          type: string
        ModelNameOptions:
          type: array
          items:
            $ref: '#/components/schemas/ModelNameOptions'
        InteriorDealershipCarTypeId:
          type: integer
        ExteriorDealershipCarTypeId:
          type: integer
        Cars:
          type: array
          items:
            $ref: '#/components/schemas/Car'
        InteriorColorCode:
          type: string
        ExteriorColorCode:
          type: string
        MatchingCars:
          type: array
          items:
            $ref: '#/components/schemas/CarTypeMatch'
        ImageSets:
          type: array
          items:
            $ref: '#/components/schemas/ImageSet'
        VideoSets:
          type: array
          items:
            $ref: '#/components/schemas/VideoSet'
            
    UsedCarImage:
      type: object
      properties:
        UsedCarImageId:
          type: integer
        ImageUrl:
          type: string
        Dealershipid:
          type: integer
          
    UsedCarVideo:
      type: object
      properties:
        UsedCarVideoId:
          type: integer
        VideoUrl:
          type: string
        Dealershipid:
          type: integer
          
    UsedCar:
      type: object
      properties:
        UsedCarId:
          type: integer
        Vin:
          type: string
        StockNumber:
          type: string
        DealershipId:
          type: integer
        RooftopId:
          type: integer
        CreatedDate:
          type: integer
          description: Used Car created date timestamp
        UsedCarImages:
          type: array
          items:
            $ref: '#/components/schemas/UsedCarImage'
        UsedCarVideos:
          type: array
          items:
            $ref: '#/components/schemas/UsedCarVideo'
            
    MatchingCar:
      type: object
      properties:
        Vin:
          type: string
        StockNumber:
          type: string
          
    MatchingTypes:
      type: object
      properties:
        Desc:
          type: string
        Cars:
          type: array
          items:
            $ref: '#/components/schemas/MatchingCar'   
            
    CarTypeMatch:
      type: object
      properties:
        FileName:
          type: string
        Types:
          type: array
          items:
            $ref: '#/components/schemas/MatchingTypes'
            
    Image:
      type: object
      properties:
        ImageId:
          type: integer
        ImageUrl:
          type: string
          
    ImageSet:
      type: object
      properties:
        ImageSetId:
          type: integer
        ImageSetType:
          type: string
        Images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
            
    Video:
      type: object
      properties:
        VideoId:
          type: integer
        VideoUrl:
          type: string
          
    VideoSet:
      type: object
      properties:
        VideoSetId:
          type: integer
        VideoSetType:
          type: string
        Videos:
          type: array
          items:
            $ref: '#/components/schemas/Video'
          
servers:
  - url: https://api-beta.truimagesauto.com
    description: Beta server (uses test data)
  - url: https://api.truimagesauto.com/
    description: Production server (uses live data)
