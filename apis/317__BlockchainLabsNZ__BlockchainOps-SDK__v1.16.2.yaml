openapi: 3.0.0
info:
  # IMPORTANT: This must match the version number in `./package.json`!
  version: "v1.16.2"

  title: BlockchainOps
  description: |-
    _rapidly prototype your next blockchain app_

    BlockchainOps is a powerful suite of serverless modules and tools to bridge
    apps with blockchain.

    Learn more at <https://blockchainops.dev/>.

    ---

    ## Authentication
    API requests must be signed using
    [AWS Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html).

    Make sure to select the appropriate credentials â€” the request must be signed
    by an account that has permission to send API Gateway requests to your
    BlockchainOps AWS account.

    For more information and/or sample scripts demonstrating how to sign
    BlockchainOps API requests, please get in touch with your BlockchainOps
    support contact.

    ---

    ## Common Errors
    - `401` - `{"message":"Unauthorized"}`

      - You have not added an `Authorization: auth-key key:secret` request header, or
      - You have used an invalid key or secret in the Authorization request header

    - `403` - `not a valid key=value pair (missing equal-sign) in Authorization header`

      - You are using an invalid endpoint e.g. you have a typo in the URL.

    - `403` - `Authorization header requires 'Credential' parameter. Authorization header requires 'Signature' parameter.`

      - You are using an invalid method e.g. a POST instead of a PUT

    ---

tags:
  - name: Settings
    description: >-
      A BlockchainOps deployment has configuration settings, including third-party service
      API keys. These settings are managed with the settings endpoint.
  - name: Accounts
    description: >-
      An account is the top-level object in BlockchainOps. Once created, an account can
      be configured with one-or-more of our blockchain services.
  - name: Ethereum - OA
    description: >-
      An Ethereum Operating Address is required by Ethereum services to fund
      operational transactions. For example, the Operating Address is used to
      generate child addresses for Ethereum Proxy proposals and to generate new
      Ethereum Spendable Wallet instances.
  - name: (Service) Bitcoin - Copay
    description: >-
      The Bitcoin Copay service creates a new Copay Multi-sig Wallet for the
      account. BlockchainOps is set as one of the wallet owners and an invitation
      is returned so that other owners can join the wallet.
  - name: (Service) Ethereum - Executor
    description: >-
      The Ethereum Executor service runs Ethereum transactions for you. It
      queues transactions, optimises gas price and gracefully handles
      common problems.
  - name: (Service) Ethereum - Proxy
    description: >-
      The Ethereum Proxy service maintains a pool of child addresses that
      forward payments they receive to a single collectorAddress. This allows
      each Payment Proposal to have a unique paymentAddress.
  - name: (Service) Ethereum - Spendable Wallet
    description: >-
      The Spendable Wallet option allows you to deploy instances of account wallets.
      The wallets accept tokens, and allow users to "spend" those tokens for services
      rendered.
components:
  schemas:
    ErrorResponse:
      title: Error
      description: >-
        An error occurred
      type: object
      properties:
        error:
          type: string
        message:
          type: string
      required:
        - error
      example:
        error: Error
        message: Something went wrong
    # === v0.2 ===
    AccountCreate:
      properties:
        name:
          type: string
      required:
        - name
      example:
        name: Test Account
    AccountCreateResponse:
      properties:
        accountId:
          type: string
      example:
        accountId: 7abc
    AccountListResponse:
      properties:
        accountId:
          type: string
      example:
        accountId: 7abc
    accountSubscribeToAlerts:
      properties:
        subscribers:
          type: array
      example:
        subscribers: ["me@email.nz","you@email.com"]
    accountSubscribeToAlertsResponse:
      properties:
        emails:
          type: array
      example:
        emails: ["me@email.nz","you@email.com"]
    # ===========
    CopayCreate:
      properties:
        network:
          type: string
          enum:
            - testnet
            - livenet
        m:
          type: number
          enum:
            - 2
            - 3
        n:
          type: number
          enum:
            - 3
            - 5
        overwrite:
          type: boolean
      required:
        - network
        - m
        - n
    CopayCreateResponse:
      properties:
        invitation:
          type: string
      example:
        invitation: '000000000000000000000000000000000000000000000000000000000000000000000000000000'
    Copayer:
      properties:
        name:
          type: string
      example:
        name: 'Mr Greg Copayer'
    CopayStatusResponse:
      properties:
        status:
          type: object
          properties:
            walletId:
              type: string
              example: 5a5597cf-e1b2-4767-b1bd-99628436d361
            walletName:
              type: string
              example: My Product 7abc
            m:
              type: number
              example: 2
            n:
              type: number
              example: 3
            invitation:
              type: string
              example: '000000000000000000000000000000000000000000000000000000000000000000000000000000'
            status:
              type: string
              enum:
                - pending
                - complete
            copayers:
              type: array
              items:
                $ref: '#/components/schemas/Copayer'
    EthereumOperatingAddressCreate:
      properties:
        network:
          type: string
          enum:
            - testnet
            - kovan
            - livenet
        overwrite:
          type: boolean
      required:
        - network
      example:
        network: kovan
    EthereumOperatingAddressCreateResponse:
      properties:
        operatingAddress:
          type: string
        batchOperatingAddress:
          type: string
      example:
        operatingAddress: '0x0000000000000000000000000000000000000000'
        batchOperatingAddress: '0x1111111111111111111111111111111111111111'
    EthereumOperatingAddressResponse:
      properties:
        operatingAddress:
          type: string
        batchOperatingAddress:
          type: string
      example:
        operatingAddress: '0x0000000000000000000000000000000000000000'
        batchOperatingAddress: '0x1111111111111111111111111111111111111111'
    EthereumOperatingAddressBalanceResponse:
      properties:
        balance:
          type: object
          properties:
            operatingAddressBalance:
              type: number
              example: 271189250000000000
            batchOperatingAddressBalance:
              type: number
              example: 499789275800000000
    EthereumOperatingAddressUpdate:
      properties:
        nonceSync:
          type: boolean
      example:
        nonceSync: true
    EthereumOperatingAddressUpdateResponse:
      properties:
        nonce:
          type: number
      example:
        nonce: 121
    EthereumExecutorCreate:
      properties:
        address:
          type: string
        abi:
          type: array
        method:
          type: string
        args:
          type: array
        value:
          type: number
        callbackUrl:
          type: string
        oaType:
          type: string
        targetBlocks:
          type: number
        startGasPrice:
          type: number
      required:
        - address
        - abi
        - method
        - args
      example:
        address: '0x0000000000000000000000000000000000000000'
        abi: [{
          "constant": false,
          "inputs": [
            {
              "name": "flavor",
              "type": "string"
            }
          ],
          "name": "newCookie",
          "outputs": [
            {
              "name": "newContract",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        }]
        method: 'newCookie'
        args: [
          "Fish"
        ]
        value: 123456789000000000
        callbackUrl: https://your.callback.url/page?var=1
        oaType: ethOperatingAddress
        targetBlocks: 200
        startGasPrice: 1
    EthereumExecutorCreateResponse:
      properties:
        executionId:
          type: string
      example:
        status: dc633ac4-e03a-4b2b-acf4-b7b8a17d14a5
    EthereumExecutorExecutionListResponse:
      properties:
        docs:
          type: array
          items:
            $ref: '#/components/schemas/EthereumExecutorExecutionGetResponse'
        count:
          type: number
          example: 1
        cursor:
          type: string
          example: eyJhY2NvdW50SWQiOiI4ZWFkIiwidHMiOjE1MzQxMTE2ODIsImV4ZWN1dGlvbklkIjoiZTIzZDY0NjQtMWMzYi00MTc1LTljNGEtNDk1MzE2YzAwMDJiIn0=
    EthereumExecutorExecutionGetResponse:
      properties:
        ts:
          type: number
          example: 1534111728
        oaType:
          type: string
          example: ethOperatingAddress
        accountId:
          type: string
          example: c3a3
        gasPrice:
          type: number
          example: 2.7
        executionId:
          type: string
          example: 7e44b1f0-dbfc-4150-be65-db8546f871bb
        txHash:
          type: string
          example: '0x9999999999999999999999999999999999999999999999999999999999999999'
        executionLock:
          type: boolean
          example: true
        gasPrices:
          type: object
          properties:
            safeLow:
              type: number
              example: 2.7
            standard:
              type: number
              example: 3
            web3:
              type: number
              example: 3.4
            fast:
              type: number
              example: 5.1
            fastest:
              type: number
              example: 8
        gasUsed:
          type: number
          example: 43003
        nonce:
          type: number
          example: 332
        errorMessage:
          type: string
          example: 'null'
        receiptStatus:
          type: number
          example: 1
        options:
          type: string
    EthereumExecutorUpdate:
      properties:
        action:
          type: string
          enum:
            - update
            - cancel
            - sync
            - fork
        forceGasPrice:
          type: number
        startGasPrice:
          type: number
      required:
        - action
      example:
        action: fork
        startGasPrice: 3000000000
    EthereumExecutorUpdateResponse:
      properties:
        txHash:
          type: string
        gasUsed:
          type: integer
        status:
          type: integer
          enum:
            - 0
            - 1
            - 2
        newExecutionId:
          type: string
        message:
          type: string
      example:
        txHash: '0x9999999999999999999999999999999999999999999999999999999999999999'
        gasUsed: 123456
        status: 2
        newExecutionId: 3344b1f0-dbfc-4150-be35-db8576f879d1
        message: execution fa1b17af-c408-42ef-98fa-4f8a2ac67691 forking a new execution with the same nonce 63
    EthereumProxySetup:
      properties:
        network:
          type: string
          enum:
            - testnet
            - kovan
            - mainnet
        factoryAddress:
          type: string
        collectorAddress:
          type: string
        childPoolSize:
          type: integer
        overwrite:
          type: boolean
      required:
        - network
        - factoryAddress
        - collectorAddress
      example:
        network: kovan
        factoryAddress: '0x0000000000000000000000000000000000000000'
        collectorAddress: '0x1111111111111111111111111111111111111111'
    EthereumProxySetupResponse:
      properties:
        status:
          type: string
      example:
        status: success
    EthereumProxyUpdate:
      properties:
        childPoolSize:
          type: integer
      required:
        - childPoolSize
      example:
        childPoolSize: 100
    EthereumProxyUpdateResponse:
      properties:
        status:
          type: string
      example:
        status: success
    EthereumProxyChildCountResponse:
      properties:
        childCount:
          type: integer
      example:
        childCount: 3
    EthereumProxyChildPoolInitResponse:
      properties:
        status:
          type: string
      example:
        status: Executing
    EthereumProxyChildPoolStatusResponse:
      properties:
        full:
          type: boolean
    ProposalCreate:
      properties:
        reference:
          type: string
        uniqueId:
          type: string
        fromAmount:
          type: number
        fromCurrencyId:
          type: string
        toCurrencyId:
          type: string
          enum:
            - BTC
            - ETH
        openSeconds:
          type: integer
        watchSeconds:
          type: integer
        longPoll:
          type: integer
        callbackUrl:
          type: string
      required:
        - reference
        - uniqueId
        - fromAmount
        - fromCurrencyId
        - toCurrencyId
      example:
        reference: invoice123
        uniqueId: id321
        fromAmount: 100.55
        fromCurrencyId: NZD
        toCurrencyId: ETH
    ProposalResponse:
      properties:
        instances:
          type: object
          properties:
            status:
              type: string
              enum:
                - new
                - existing
              example: new
            instanceId:
              type: string
              example: f94fed72357e47960684ed3053b406a2
            instanceAddress:
              type: string
              example: '0x0000000000000000000000000000000000000000'
            fromAmount:
              type: number
              example: 100.55
            fromCurrencyId:
              type: string
              example: NZD
            toAmount:
              type: number
              example: 0.09729051754486577
            toCurrencyId:
              type: string
              enum:
                - BTC
                - ETH
              example: ETH
            exchangeRate:
              type: number
              example: 1033.50257083
            tsOpened:
              type: integer
              example: 1525836293258
            tsClosed:
              type: integer
              example: 0
            isOpen:
              type: integer
              enum:
                - 0
                - 1
              example: 1
            tx:
              type: object
              example: {}
            network:
              type: string
              example: kovan
            webhookStatus:
              type: string
              enum:
                - pending
                - ok
              example: pending
            aiId:
              type: string
              example: 7abc-customer1
    InstanceCreate:
      properties:
        reference:
          type: string
      example:
        reference: customer1
    InstanceResponse:
      properties:
        instance:
          type: object
          properties:
            instanceId:
              type: string
              example: f94fed72357e47960684ed3053b406a2
            instanceAddress:
              type: string
              example: '0x0000000000000000000000000000000000000000'
            fromAmount:
              type: number
              example: 100.55
            fromCurrencyId:
              type: string
              example: NZD
            toAmount:
              type: number
              example: 0.09729051754486577
            toCurrencyId:
              type: string
              enum:
                - BTC
                - ETH
              example: ETH
            exchangeRate:
              type: number
              example: 1033.50257083
            tsOpened:
              type: integer
              example: 1525836293258
            tsClosed:
              type: integer
              example: 0
            isOpen:
              type: integer
              enum:
                - 0
                - 1
              example: 1
            tx:
              type: object
              example: {}
            network:
              type: string
              example: kovan
            webhookStatus:
              type: string
              enum:
                - pending
                - ok
              example: pending
            aiId:
              type: string
              example: 7abc-customer1
    InstanceGetResponse:
      properties:
        instances:
          type: array
          items:
            $ref: '#/components/schemas/InstanceResponse'
    InstanceClose:
      properties:
        closeAttempt:
          type: number
      required:
        - closeAttempt
      example:
        closeAttempt: 1
    InstanceCloseResponse:
      properties:
        instanceIds:
          type: array
          example: [49bd247e62c7425c7fcbafbca742fa37, fcd3c71f80ad7bb99538836cb018b8cd]
        InstanceClosed:
          type: array
          example: [true, false]
        closeAttempt:
          type: number
          example: 1
    EthereumSWalletSetup:
      properties:
        network:
          type: string
          enum:
            - testnet
            - kovan
            - mainnet
        factoryAddress:
          type: string
        tokenAddress:
          type: string
        childPoolSize:
          type: integer
        overwrite:
          type: boolean
      required:
        - network
        - factoryAddress
        - tokenAddress
      example:
        network: kovan
        factoryAddress: '0x0000000000000000000000000000000000000000'
        tokenAddress: '0x1111111111111111111111111111111111111111'
    EthereumSWalletSetupResponse:
      properties:
        status:
          type: string
      example:
        status: success
    SpendableWalletSpend:
      properties:
        to:
          type: string
        amount:
          type: number
        callbackUrl:
          type: string
      required:
        - amount
      example:
        to: '0x0000000000000000000000000000000000000000'
        amount: 1000000000000000000
        callbackUrl: https://your.callback.url/page?var=1
    SpendableWalletSpendResponse:
      properties:
        status:
          type: string
          example: 'success'
    SpendableWalletTransfer:
      properties:
        to:
          type: string
        amount:
          type: number
        callbackUrl:
          type: string
      required:
        - to
        - amount
      example:
        to: '0x0000000000000000000000000000000000000000'
        amount: 1000000000000000000
        callbackUrl: https://your.callback.url/page?var=1
    SpendableWalletTransferResponse:
      properties:
        status:
          type: string
          example: 'success'
    SpendableWalletWithdraw:
      properties:
        to:
          type: string
        amount:
          type: number
        callbackUrl:
          type: string
      required:
        - to
        - amount
      example:
        to: '0x0000000000000000000000000000000000000000'
        amount: 1000000000000000000
        callbackUrl: https://your.callback.url/page?var=1
    SpendableWalletWithdrawResponse:
      properties:
        status:
          type: string
          example: 'success'
    InstanceToken:
      properties:
        balance:
          type: number
          example: 400000000000000000000100
        contract:
          type: object
          properties:
            contract:
              type: string
              example: '0x0000000000000000000000000000000000000000'
            address:
              type: string
              example: '0x0000000000000000000000000000000000000000'
            name:
              type: string
              example: BlabsCoin
            decimals:
              type: number
              example: 18
            symbol:
              type: string
              example: BLABS
    InstanceGetTokensResponse:
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/InstanceToken'
    InstanceGetBalanceResponse:
      properties:
        network:
          type: string
          example: mainnet
        tokenAddress:
          type: string
          example: '0x0000000000000000000000000000000000000000'
        instanceAddress:
          type: string
          example: '0x1111111111111111111111111111111111111111'
        balance:
          type: number
          example: 987652953
    InstanceBtcTx:
      properties:
        network:
          type: string
          example: BTC
        data:
          type: object
          properties:
            hash:
              type: string
              example: '5c1d4579672256101acfe66a1ca9066ac433c4425cb501cc82fefe41847053a2'
            confirmations:
              type: number
              example: 4
    InstanceGetBtcTxResponse:
      properties:
        txs:
          type: array
          items:
            $ref: '#/components/schemas/InstanceBtcTx'
        total:
          type: number
          example: 102
        limit:
          type: number
          example: 20
        page:
          type: number
          example: 3
        pages:
          type: number
          example: 6
    InstanceTx:
      properties:
        hash:
          type: string
        timestamp:
          type: number
        nonce:
          type: number
        value:
          type: number
        amount:
          type: number
        from:
          type: string
        to:
          type: string
        confirmations:
          type: number
        gas:
          type: number
        gasPrice:
          type: number
        gasUsed:
          type: number
      example:
        hash: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
        timeStamp: 1529574208
        nonce: 422
        value: 1234000000000000
        amount: 0.001234
        from: '0x1111111111111111111111111111111111111111'
        to: '0x2222222222222222222222222222222222222222'
        confirmations: 6
        gas: 21000
        gasPrice: 2000000000
        gasUsed: 21000
    InstanceGetTxResponse:
      properties:
        txs:
          type: array
          items:
            $ref: '#/components/schemas/InstanceTx'
        total:
          type: number
          example: 102
        limit:
          type: number
          example: 20
        page:
          type: number
          example: 3
        pages:
          type: number
          example: 6
    InstanceTxPending:
      properties:
        hash:
          type: string
        blockNumber:
          type: number
        amount:
          type: number
        status:
          type: boolean
        confirmations:
          type: number
      example:
        hash: '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
        blockNumber: 1234325
        amount: 1000000
        status: true
        confirmations: 3
    InstanceGetTxPendingResponse:
      properties:
        txs:
          type: array
          items:
            $ref: '#/components/schemas/InstanceTxPending'
        total:
          type: number
          example: 1
    SettingStatusResponse:
      properties:
        status:
          type: object
          properties:
            ok:
              type: boolean
            settings:
              type: object
      example:
        ok: false
        settings:
          productName:
            set: true
            required: true
          infuraToken:
            set: false
            required: true
    SettingPut:
      properties:
        settingName:
          type: string
    SettingPutResponse:
      properties:
        status:
          type: object
          properties:
            settingName:
              type: object
              properties:
                Version:
                  type: number
  securitySchemes: {}
paths:
  /accounts:
    post:
      tags:
        - Accounts
      operationId: accountCreate
      summary: Creates an account
      description: Creates a new account in the system
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
        description: '- @param {String} **name** - The account name.'
      responses:
        '200':
          description: '@returns {Object} includes a unique accountId value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCreateResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Accounts
      operationId: accountList
      summary: List accounts
      description: Gets a list of account IDs
      parameters:
        - name: limit
          in: query
          description: The number of results returned
          required: false
          schema:
            type: number
        - name: cursor
          in: query
          description: The page cursor to start after
          required: false
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} list of account IDs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountListResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}':
    get:
      tags:
        - Accounts
      operationId: accountGet
      summary: Get account
      description: Gets information from an existing account
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} account data'
          content:
            application/json:
              schema:
                # TODO
                $ref: '#/components/schemas/AccountGetResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/alerts/subscribe':
    post:
      tags:
        - Accounts
      operationId: accountSubscribeToAlerts
      summary:
        Subscribe users to account alerts (e.g., low operating address balance).
      description: >-
        Subscribe user emails to account notification system.  Subscribed emails
        will receive alerts whenever any of the following conditions occur:

        - Low Operating Address Balance

        - Low Batch Operating Address Balance


        **Important:** each subscriber will receive a confirmation email; the
        recipient must click on the activation link in that email in order to
        receive alerts.
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountSubscribeToAlerts'
        description: |-
          - @param {Array} **m** - Array of email addresses to subscribe to alerts
      responses:
        '200':
          description: '@returns {Object} accounts subscribed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountSubscribeToAlertsResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/accounts/{accountId}/btc/copay':
    post:
      tags:
        - (Service) Bitcoin - Copay
      operationId: CopayCreate
      summary: Creates a new Copay Wallet.
      description: >-
        Creates a new Copay Wallet for the account
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopayCreate'
        description: |-
          - @param {('testnet'|'livenet')} **network**
          - @param {Integer} **m** - Number of copayers required for authorising a transaction.
          - @param {Integer} **n** - Number of copayers for the wallet.
          - @param {Boolean} [**overwrite**] - Overwrite an existing wallet.
      responses:
        '200':
          description: '@returns {Object} includes invitation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopayCreateResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - (Service) Bitcoin - Copay
      operationId: copayStatus
      summary: Get Copay Wallet status.
      description: Gets the Copay Wallet status for the account.
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes status value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopayStatusResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/btc/copay/proposals':
    post:
      tags:
        - (Service) Bitcoin - Copay
      operationId: copayProposalInit
      summary: Create a payment proposal
      description: >-
        Create a new payment proposal.

        If an open payment proposal for the same reference exists then that
        will be returned instead of a new one.
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalCreate'
        description: >-
          - @param {String} **reference** e.g. an invoice number

          - @param {String} **uniqueId** the third-party reference (if there is one).
          Alternatively, this may be the same as the reference.

          - @param {Float} **fromAmount** the amount to request in the payment proposal.

          - @param {String} **fromCurrencyId** - The currency the fromAmount is in.

          - @param {('BTC'|'ETH')} **toCurrencyId** - The currency to convert
          to. Set this to the same as fromCurrencyId for no conversion.

          - @param {Integer} [**openSeconds=3600**] - Seconds that a payment
          proposal will be valid for i.e. seconds after which a new payment
          proposal should be generated.

          - @param {Integer} [**watchSeconds=86400**] - Seconds that payment
          transactions to the payment proposal's payment address will be monitored.

          - @param {Integer} [**longPoll=0**] - Seconds to wait for confirmation
          that payment address monitoring has been setup.

          - @param {String} [**callbackUrl**] - The URL to notify when transactions are received.
      responses:
        '200':
          description: >-
            @returns {Object} with payment proposal details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/btc/copay/proposals/{instanceId}':
    get:
      tags:
        - (Service) Bitcoin - Copay
      operationId: copayProposalGet
      summary: Fetch Payment Proposal
      description: >-
        Get one or more payment proposals
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId or a semi-colon seperated list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes payment array of payment proposals'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - (Service) Bitcoin - Copay
      operationId: copayProposalClose
      summary: Close Payment Proposal
      description: >-
        Close one or more payment proposals
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId or a semi-colon separated list
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceClose'
      responses:
        '200':
          description: '@returns {Object} includes instanceIds closed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceCloseResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/btc/copay/proposals/{instanceId}/txs':
    get:
      tags:
        - (Service) Bitcoin - Copay
      operationId: copayProposalGetTx
      summary: Fetch Payment Proposals Transactions
      description: >-
        Get a list of transactions for the payment proposal
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId
          required: true
          schema:
            type: string
        - name: fromBlock
          in: query
          description: The block to start from
          required: false
          schema:
            type: number
        - name: limit
          in: query
          description: The maximum number of results to return [50]
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: The page number [1]
          required: false
          schema:
            type: number
      responses:
        '200':
          description: '@returns {Object} includes payment array of payment proposals'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetBtcTxResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/btc/copay/proposals/addresses/{paymentAddress}':
    get:
      tags:
        - (Service) Bitcoin - Copay
      operationId: copayProposalGetByAddress
      summary: Fetch Payment Proposals by address
      description: >-
        Get a list of payment proposals by payment address
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: paymentAddress
          in: path
          description: A single paymentAddress or a semi-colon separated list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes payment array of payment proposals'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/oa':
    post:
      tags:
        - Ethereum - OA
      operationId: ethereumOperatingAddressCreate
      summary: Create Ethereum Operating Addresses
      description: >-
        The Operating Address and Batch Operating Address are used to fund operational transactions, including creating child addresses. It is used by:

        - Proxy /accounts/{accountId}/eth/proxy

        - Wallet /accounts/{accountId}/eth/spendablewallet
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EthereumOperatingAddressCreate'
        description: >-
          - @param {String} **network** - The network to use.

          - @param {Boolean} **[overwrite]** - Overwrite an existing operating
          address.
      responses:
        '200':
          description: '@returns {Object} includes a unique operatingAddress value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumOperatingAddressCreateResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Ethereum - OA
      operationId: ethereumOperatingAddressGet
      summary: Get the Ethereum Operating Addresses
      description: Gets the Operating Addresses for the account.
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes a unique operatingAddress and batchOperatingAddress values'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumOperatingAddressResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/oa/createTopic':
    get:
      tags:
        - Ethereum - OA
      operationId: ethOACreateAlertsTopic
      summary: Create alerts email endpoint for an existing account
      description: Create alerts email endpoint for an existing account
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
  '/accounts/{accountId}/eth/oa/balance':
    get:
      tags:
        - Ethereum - OA
      operationId: ethereumOperatingAddressGetBalance
      summary: Get the balances for the Operating Addresses
      description: Gets the Operating Address and Batch Operating Address balances for the account
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes a balance value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumOperatingAddressBalanceResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/oa/standard':
    put:
      tags:
        - Ethereum - OA
      operationId: ethereumOperatingAddressUpdate
      summary: Update Ethereum Operating Addresses
      description: >-
        Performs actions on the Operating Address
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EthereumOperatingAddressUpdate'
        description: >-
          - @param {Boolean} **[nonceSync]** - Sync the nonce with the blockchain
      responses:
        '200':
          description: '@returns {Object} includes nonce value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumOperatingAddressUpdateResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/oa/batch':
    put:
      tags:
        - Ethereum - OA
      operationId: ethereumBatchOperatingAddressUpdate
      summary: Update Ethereum Batch Operating Addresses
      description: >-
        Performs actions on the Batch Operating Address
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EthereumOperatingAddressUpdate'
        description: >-
          - @param {Boolean} **[nonceSync]** - Sync the nonce with the blockchain
      responses:
        '200':
          description: '@returns {Object} includes nonce value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumOperatingAddressUpdateResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/executor':
    post:
      tags:
        - (Service) Ethereum - Executor
      operationId: ethereumExecutorCreate
      summary: Execute an Ethereum transaction
      description: >-
        The Ethereum Executor service runs Ethereum transactions for you. It
        queues transactions, optimises gas price (by ramping it up according
        to the targetBlocks you set) and gracefully handles common problems like
        connection failures.
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EthereumExecutorCreate'
        description: >-
          - @param {String} **address** - The 'to' address for the transaction.

          - @param {Array} **abi** - The ABI for the contract

          - @param {String} **method** - The method to call

          - @param {Array} **args** - The arguments to pass to the method

          - @param {Integer} [**value=0**] - The value in Wei

          - @param {String} [**callbackUrl**] - A callback URL that will accept JSON
            POSTed variables when the transaction succeeds or fails

          - @param {('ethOperatingAddress'|'ethBatchOperatingAddress')}
            [**oaType=ethOperatingAddress**] - The type of Operating Address
            to use

          - @param {Integer} [**targetBlocks=200**] - The number of blocks to
            aim to have the transaction confirm within

          - @param {Integer} [**startGasPrice**] - The gas price in Wei to
            start with
      responses:
        '200':
          description: '@returns {Object} includes status value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumExecutorCreateResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - (Service) Ethereum - Executor
      operationId: ethereumExecutorExecutionList
      summary: List the Ethereum executions
      description: >-
        List the Ethereum executions
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results returned
          required: false
          schema:
            type: number
        - name: cursor
          in: query
          description: The page cursor to start after
          required: false
          schema:
            type: string
        - name: isOpen
          in: query
          description: List only opened executions
          required: false
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Array} of executions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumExecutorExecutionListResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/executor/{executionId}':
    get:
      tags:
        - (Service) Ethereum - Executor
      operationId: ethereumExecutorExecutionGet
      summary: Get the result of an Ethereum execution
      description: >-
        Get the result of an Ethereum execution, including its status and hash
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          description: The Execution ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object}'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumExecutorExecutionGetResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - (Service) Ethereum - Executor
      operationId: ethereumExecutorUpdate
      summary: Update an Ethereum transaction execution
      description: >-
        The Ethereum Executor execution can be updated in a number of ways

        - update - set a new gas price for a running execution
          - The executor sets and increases the gas price over time automatically, but sometimes it is useful to speed up a transaction by forcibly updating it with a higher gas price.

        - cancel - attempt to cancel a running execution
          - If the an execution transaction is still pending, it may be possible to cancel it. The executor will attempt to do this by sending a new 0 ETH transfer with the same nonce and a higher gas price.

        - sync - sync the status of the execution with the blockchain
          - A transaction may be mined after an execution timeout, causing the execution to have an incorrect status. If this happens, calling sync will update the status from the blockchain.

        - fork - fork (retry) a failed execution, with the same settings
          - Failed and pending transactions can be retried. For example, a transaction may fail due to a low gas limit, or it may stay as pending due to a low gas price. Using fork creates a new execution with the same settings. You can also optionally include a new startGasPrice.
          - Note: Instead of forking, you can ignore the failed execution and do a Operating Address nonceSync update so that you can reuse that nonce in another execution.
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          description: The Execution ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EthereumExecutorUpdate'
        description: >-
          - @param {('**update**|**cancel**'|'**sync**'|'**fork**')} action - The action to take

          - @param {Integer} [**forceGasPrice**] - update only - The value in Wei to force a running execution to use

          - @param {Integer} [**startGasPrice**] - fork only - The value in Wei to start an execution fork with

          - @param {Integer} [**targetBlocks**] - fork only - The number of blocks to aim to have the transaction confirm within

          - @param {Integer} [**maxBlocks**] - fork only - The maximum blocks to aim to have the transaction confirm within
      responses:
        '200':
          description: '@returns {Object} includes status value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumExecutorUpdateResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/executor/{executionId}/loops':
    get:
      tags:
        - (Service) Ethereum - Executor
      operationId: ethereumExecutorExecutionGetLoops
      summary: Get the loops of an Ethereum execution
      description: >-
        Get the loops of an Ethereum execution, including its status and hash
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: executionId
          in: path
          description: The Execution ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object}'
          content:
            application/json:
              schema:
                # TODO
                $ref: '#/components/schemas/EthereumExecutorExecutionGetLoopsResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/proxy':
    post:
      tags:
        - (Service) Ethereum - Proxy
      operationId: ethereumProxySetup
      summary: Setup an Ethereum Proxy Factory
      description: >-
        The Ethereum Proxy Factory generates child Ethereum addresses that
        transfer Ethereum they receive to the collectorAddress
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EthereumProxySetup'
        description: >-
          - @param {('testnet'|'kovan'|'mainnet')} **network**

          - @param {String} **factoryAddress** - The address for the factory.

          - @param {String} **collectorAddress** - The address where the funds
          should ultimately end-up.

          - @param {Integer} [**childPoolSize=5**] - The size of the pool of
          factory children contract addresses.

          - @param {Boolean} [**overwrite**] - Overwrite an existing
          factory address.
      responses:
        '200':
          description: '@returns {Object} includes status value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumProxySetupResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - (Service) Ethereum - Proxy
      operationId: ethereumProxyUpdate
      summary: Update an Ethereum Proxy Factory
      description: >-
        The Ethereum Proxy Factory settings can be updated using this endpoint
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EthereumProxyUpdate'
        description: >-
          - @param {Integer} **childPoolSize** - The size of the pool of
          proxy factory children contract addresses.
      responses:
        '200':
          description: '@returns {Object} includes status value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumProxyUpdateResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/proxy/child/count':
    get:
      tags:
        - (Service) Ethereum - Proxy
      operationId: ethereumProxyChildCount
      summary: Get a count of the number of contract children
      description: >-
        Count the number of child Ethereum proxy contracts
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes childCount.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumProxyChildCountResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/proxy/child/pool':
    put:
      tags:
        - (Service) Ethereum - Proxy
      operationId: ethereumProxyChildPoolInit
      summary: Initialise the child pool
      description: >-
        The child pool monitoring service is designed to run automatically when
        the Operating Address receives funds, but you can also trigger it manually
        with this endpoint.
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes status.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumProxyChildPoolInitResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - (Service) Ethereum - Proxy
      operationId: ethereumProxyChildPoolStatus
      summary: Check pool status
      description: >-
        Check if the pool of child Ethereum Proxy contracts is full
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes full.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumProxyChildPoolStatusResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/proxy/proposals':
    post:
      tags:
        - (Service) Ethereum - Proxy
      operationId: ethereumProxyProposalInit
      summary: Create a payment proposal
      description: >-
        Create a new payment proposal.

        If an open payment proposal for the same reference exists then that
        will be returned instead of a new one.
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalCreate'
        description: >-
          - @param {String} **reference** e.g. an invoice number

          - @param {String} **uniqueId** the third-party reference (if there is one).
          Alternatively, this may be the same as the reference.

          - @param {Float} **fromAmount** the amount to request in the payment proposal.

          - @param {String} **fromCurrencyId** - The currency the fromAmount is in.

          - @param {('BTC'|'ETH')} **toCurrencyId** - The currency to convert
          to. Set this to the same as fromCurrencyId for no conversion.

          - @param {Integer} [**openSeconds=3600**] - Seconds that a payment
          proposal will be valid for i.e. seconds after which a new payment
          proposal should be generated.

          - @param {Integer} [**watchSeconds=86400**] - Seconds that payment
          transactions to the payment proposal's payment address will be monitored.

          - @param {Integer} [**longPoll=0**] - Seconds to wait for confirmation
          that payment address monitoring has been setup.

          - @param {String} [**callbackUrl**] - The URL to notify when transactions are received.
      responses:
        '200':
          description: >-
            @returns {Object} with payment proposal details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/proxy/proposals/{instanceId}':
    get:
      tags:
        - (Service) Ethereum - Proxy
      operationId: ethereumProxyProposalGet
      summary: Fetch Payment Proposal
      description: >-
        Get one or more payment proposals
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId or a semi-colon seperated list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes payment array of payment proposals'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - (Service) Ethereum - Proxy
      operationId: ethereumProxyProposalClose
      summary: Close Payment Proposal
      description: >-
        Close one or more payment proposals
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId or a semi-colon separated list
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceClose'
      responses:
        '200':
          description: '@returns {Object} includes instanceIds closed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceCloseResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/proxy/proposals/{instanceId}/txs':
    get:
      tags:
        - (Service) Ethereum - Proxy
      operationId: ethereumProxyProposalGetTx
      summary: Fetch Payment Proposals Transactions
      description: >-
        Get a list of transactions for the payment proposal
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId
          required: true
          schema:
            type: string
        - name: fromBlock
          in: query
          description: The block to start from
          required: false
          schema:
            type: number
        - name: limit
          in: query
          description: The maximum number of results to return [50]
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: The page number [1]
          required: false
          schema:
            type: number
        - name: status
          in: query
          description: Filter by transaction status
          required: false
          schema:
            type: string
            enum:
              - pending
              - confirmed
      responses:
        '200':
          description: '@returns {Object} includes payment array of payment proposals'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetTxResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/proxy/proposals/addresses/{paymentAddress}':
    get:
      tags:
        - (Service) Ethereum - Proxy
      operationId: ethereumProxyProposalGetByAddress
      summary: Fetch Payment Proposals by address
      description: >-
        Get a list of payment proposals by payment address
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: paymentAddress
          in: path
          description: A single paymentAddress or a semi-colon separated list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes payment array of payment proposals'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet':
    post:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletSetup
      summary: Setup an Ethereum Spendable Wallet Factory
      description: >-
        The Ethereum Spendable Wallet Factory generates wallets
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EthereumSWalletSetup'
        description: >-
          - @param {('testnet'|'kovan'|'mainnet')} **network**

          - @param {String} **factoryAddress** - The address for the factory.

          - @param {String} **tokenAddress** - The address for the ERC20 contract.

          - @param {Integer} [**childPoolSize=5**] - The size of the pool of
          factory children contract addresses.

          - @param {Boolean} [**overwrite**] - Overwrite an existing
          factory address.
      responses:
        '200':
          description: '@returns {Object} includes status value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthereumSWalletSetupResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletUpdate
      summary: Update an Ethereum Spendable Wallet Factory
      description: >-
        The Ethereum Spendable Wallet Factory settings can be updated using this endpoint
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              # TODO
              $ref: '#/components/schemas/EthereumProxyUpdate'
        description: >-
          - @param {Integer} **childPoolSize** - The size of the pool of
          factory children contract addresses.
      responses:
        '200':
          description: '@returns {Object} includes status value'
          content:
            application/json:
              schema:
                # TODO
                $ref: '#/components/schemas/EthereumProxyUpdateResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/child/count':
    get:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletChildCount
      summary: Get a count of the number of contract children
      description: >-
        Count the number of child Ethereum contracts
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes childCount.'
          content:
            application/json:
              schema:
                # TODO
                $ref: '#/components/schemas/EthereumProxyChildCountResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/child/pool':
    put:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletChildPoolInit
      summary: Initialise the child pool
      description: >-
        The child pool monitoring service is designed to run automatically when
        the Operating Address receives funds, but you can also trigger it manually
        with this endpoint.
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes status.'
          content:
            application/json:
              schema:
                # TODO
                $ref: '#/components/schemas/EthereumProxyChildPoolInitResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletChildPoolStatus
      summary: Check pool status
      description: >-
        Check if the pool of child contracts is full
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes full.'
          content:
            application/json:
              schema:
                # TODO
                $ref: '#/components/schemas/EthereumProxyChildPoolStatusResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/instances':
    post:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceInit
      summary: Create a wallet instance
      description: >-
        Create a new wallet instance.
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceCreate'
        description: >-
          - @param {String} [**reference**] - Optional reference
      responses:
        '200':
          description: >-
            @returns {Object} with instance details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/instances/{instanceId}':
    get:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceGet
      summary: Fetch Instance
      description: >-
        Get one or more instances
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId or a semi-colon seperated list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes array of instances'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceClose
      summary: Close Instance
      description: >-
        Close one or more instances
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId or a semi-colon separated list
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceClose'
      responses:
        '200':
          description: '@returns {Object} includes instanceIds closed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceCloseResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/instances/{instanceId}/spend':
    post:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceSpend
      summary: Spend tokens
      description: >-
        Spend tokens
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpendableWalletSpend'
        description: >-
          - @param {String} **to** - the address to transfer to

          - @param {Integer} **amount** - number of tokens to spend
          where 1,000,000,000,000,000,000 is 1 token when the token has 18 decimal places

          - @param {String} **callbackUrl** - a callback URL that JSON will be
          posted to on failure or success of the transaction
      responses:
        '200':
          description: '@returns {Object} includes status of request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendableWalletSpendResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/instances/{instanceId}/transfer':
    post:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceTransfer
      summary: Transfer tokens
      description: >-
        Transfer tokens between wallets
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpendableWalletTransfer'
        description: >-
          - @param {String} **to** - the address to transfer to

          - @param {Integer} **amount** - number of tokens to spend
          where 1,000,000,000,000,000,000 is 1 token when the token has 18 decimal places

          - @param {String} **callbackUrl** - a callback URL that JSON will be
          posted to on failure or success of the transaction
      responses:
        '200':
          description: '@returns {Object} includes status of request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendableWalletTransferResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/instances/{instanceId}/withdraw':
    post:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceWithdraw
      summary: Withdraw tokens
      description: >-
        Withdraw tokens
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpendableWalletWithdraw'
        description: >-
          - @param {String} **to** - the address to withdraw to

          - @param {Integer} **amount** - number of tokens to spend
          where 1,000,000,000,000,000,000 is 1 token when the token has 18 decimal places

          - @param {String} **callbackUrl** - a callback URL that JSON will be
          posted to on failure or success of the transaction
      responses:
        '200':
          description: '@returns {Object} includes status of request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendableWalletWithdrawResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/instances/{instanceId}/tokens':
    get:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceGetTokens
      summary: (DEPRECATED) Fetch list of tokens
      description: >-
        (DEPRECATED) Fetch list of tokens and their balances for an instance
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes array of tokens and balances'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetTokensResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/instances/{instanceId}/balance':
    get:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceGetBalance
      summary: Get the token balance
      description: >-
        Get the balance of tokens that the instance address has for the
        tokenAddress contract
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} with balance of tokens'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetBalanceResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/instances/{instanceId}/txs':
    get:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceGetTx
      summary: Fetch Instance's Transactions
      description: >-
        Get a list of transactions for the instance
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId
          required: true
          schema:
            type: string
        - name: fromBlock
          in: query
          description: The block to start from
          required: false
          schema:
            type: number
        - name: limit
          in: query
          description: The maximum number of results to return [50]
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: The page number [1]
          required: false
          schema:
            type: number
        - name: status
          in: query
          description: Filter by transaction status
          required: false
          schema:
            type: string
            enum:
              - pending
              - confirmed
      responses:
        '200':
          description: '@returns {Object} includes array of txs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetTxResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/instances/{instanceId}/txs/pending':
    get:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceGetTxPending
      summary: Fetch Instance's Pending Transactions
      description: >-
        Get a list of pending transactions for the instance
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceId
          in: path
          description: A single instanceId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes array of txs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetTxPendingResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/accounts/{accountId}/eth/spendablewallet/instances/addresses/{instanceAddress}':
    get:
      tags:
        - (Service) Ethereum - Spendable Wallet
      operationId: ethereumSpendableWalletInstanceGetByAddress
      summary: Fetch Instance by address
      description: >-
        Get a list of instances by address
      parameters:
        - name: accountId
          in: path
          description: The account ID
          required: true
          schema:
            type: string
        - name: instanceAddress
          in: path
          description: A single instanceAddress or a semi-colon separated list
          required: true
          schema:
            type: string
      responses:
        '200':
          description: '@returns {Object} includes array of instances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceGetResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/settings':
    get:
      tags:
        - Settings
      operationId: settingStatus
      summary: Get the status for settings
      description: >-
        Settings need to be applied, including API keys for third-party services.
        This endpoint gives a summary of the settings and their status.
      responses:
        '200':
          description: '@returns {Object} includes status of settings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingStatusResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Settings
      operationId: settingPut
      summary: Add settings
      description: >-
        Settings need to be applied, including API keys for third-party services.
        This endpoint allow settings to be set and updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingPut'
      responses:
        '200':
          description: '@returns {Object} includes status of settings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingPutResponse'
        '400':
          description: '@returns {Object} error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'