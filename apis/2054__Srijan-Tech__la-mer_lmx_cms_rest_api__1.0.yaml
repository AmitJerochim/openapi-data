openapi: 3.0.0
info:
  title: LaMer (LMX) CMS REST API
  description: LaMer (LMX) CMS REST API
  version: "1.0"

servers:
  - url: http://api.example.com
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing

tags:
- name: "Authentication"
  description: "Authentication"
  externalDocs:
    description: "Authentication"
    url: "https://esteelauder-confluence.codefactori.com/display/LMOE"
- name: "Menus"
  description: "Menus"
  externalDocs:
    description: "Menus"
    url: "https://esteelauder-confluence.codefactori.com/display/LMOE"
- name: "Support Email"
  description: "Support and Global Support Email"
- name: "Homepage"
  description: "Homepage Sections"
  externalDocs:
    description: "Homepage Sections"
    url: "https://esteelauder-confluence.codefactori.com/display/LMOE"
- name: "Products"
  description: "Products"
  externalDocs:
    description: "Feature reference for  Product feature"
    url: "https://esteelauder-confluence.codefactori.com/display/LMOE"
- name: "Videos"
  description: "Videos or Video Resources"
  externalDocs:
    description: "Feature reference for Videos API"
    url: "https://esteelauder-confluence.codefactori.com/display/LMOE"
- name: "Tools"
  description: "Tools or PDF Resources"
  externalDocs:
    description: "Feature reference for  PDF Tools."
    url: "https://esteelauder-confluence.codefactori.com/display/LMOE"
- name: "Courses"
  description: "Courses"
  externalDocs:
    description: "Feature reference for Courses feature."
    url: "https://esteelauder-confluence.codefactori.com/display/LMOE"
- name: "Legal"
  description: "Terms & Conditions and Privacy policy API"
  externalDocs:
    description: "Feature reference for Terms & Conditions and Privacy policy Feature"
    url: "https://esteelauder-confluence.codefactori.com/display/LMOE/Legal"
- name: "User"
  description: "User APIs"
  externalDocs:
    description: "Feature reference for User API"
    url: "https://esteelauder-confluence.codefactori.com/display/LMOE/User+Management"

paths:
  # Authentication APIs
  /oauth/token:
    post:
      summary: Login API. Authenticate the user.
      tags:
        - Authentication
      parameters:
        - $ref: '#/components/parameters/contenttype'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oauthtokenrb'
      responses:
        '200':
          $ref: '#/components/responses/oauthtoken'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '406':
          $ref: '#/components/responses/UserLocked'
        '5XX':
          description: "Internal Server Error."
  /oauth/refreshtoken:
    post:
      summary: Request a new refresh token from the existing one.oauth/refreshtoken will not work.
        Please use /oauth/token instead.
      tags:
        - Authentication
      parameters:
        - $ref: '#/components/parameters/contenttype'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refreshoauthtokenrb'
      responses:
        '200':
          $ref: '#/components/responses/refreshoauthtoken'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          description: "Internal Server Error."
  /api/v1/userLogout:
    post:
      summary: User Logout API
      tags:
        - Authentication
      parameters:
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logoutreqbody'
      responses:
        '200':
          $ref: '#/components/responses/logout'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '5XX':
          description: 'Internal Server Error.'

  # Menus
  /api/v1/primaryNavigationMenu:
    get:
      summary: "Primary Navigation Menu"
      tags:
        - "Menus"
      parameters:
        # Header Parameters
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/operationheaders'
        - $ref: '#/components/parameters/requestidheader'
        - $ref: '#/components/parameters/timestampheader'
        # Query Parameters
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          $ref: '#/components/responses/PrimaryMenu'
        '400':
          $ref: '#/components/responses/Badrequest'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          description: "Method Not Allowed."
        '500':
          description: "Internal Server Error"
      security:
        - ApiAuthorization: [accessToken]
  /api/v1/footerMenu:
    get:
      summary: "Footer Menu"
      tags:
        - "Menus"
      parameters:
        # Header Parameters
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/operationheaders'
        - $ref: '#/components/parameters/requestidheader'
        - $ref: '#/components/parameters/timestampheader'
        # Query Parameters
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          $ref: '#/components/responses/FooterMenu'
        '400':
          $ref: '#/components/responses/Badrequest'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          description: "Method Not Allowed."
        '500':
          description: "Internal Server Error"
      security:
        - ApiAuthorization: [accessToken]
  /api/v1/headerMenu:
    get:
      summary: Header Menu.
      tags:
        - Menus
      parameters:
        #Header Parameter.
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/authorization'
         # Query Parameters
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          $ref: '#/components/responses/HeaderMenu'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadrequestWithStatus'
        '5XX':
          description: 'Internal Server Error.'
      security:
        - ApiAuthorization: [accessToken]

  # Spport Emails
  /api/v1/globalSupportEmail:
    get:
      summary: Global Support Email API.
      tags:
        - Support Email
      parameters:
        - $ref: '#/components/parameters/format'
        - $ref: '#/components/parameters/clientId'
      responses:
        '200':
          $ref: '#/components/responses/supportEmail'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '5XX':
          description: 'Internal Server Error.'
  /api/v1/supportEmail:
    get:
      summary: Support Email API. This API will provide support email as per user's first market.
      tags:
        - Support Email
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          $ref: '#/components/responses/supportEmail'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '5XX':
          description: 'Internal Server Error.'
      security:
        - ApiAuthorization: [accessToken]

  # Products APIs
  /api/v1/products:
    get:
      summary: "Product Listings API"
      tags:
        - "Products"
      parameters:
        # Header Parameters
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/operationheaders'
        - $ref: '#/components/parameters/requestidheader'
        - $ref: '#/components/parameters/timestampheader'
        # Query Parameters
        - $ref: '#/components/parameters/format'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/productListing'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '406':
          $ref: '#/components/responses/UserLocked'
        '5XX':
          description: "Internal Server Error."
      security:
        - ApiAuthorization: [accessToken]

  # Videos APIs
  /api/v1/videoCategory:
      get:
        summary: "Video Category Listing API"
        tags:
          - "Videos"
        parameters:
          # Header Parameters
          - $ref: '#/components/parameters/authorization'
          - $ref: '#/components/parameters/contenttype'
          # Query Parameters
          - $ref: '#/components/parameters/format'
          - $ref: '#/components/parameters/limit'
          - $ref: '#/components/parameters/offset'

        responses:
          '200':
            $ref: '#/components/responses/videoCatListings'
          '404':
            $ref: '#/components/responses/NotFound'
          '400':
            $ref: '#/components/responses/Badrequest'
          '401':
            $ref: '#/components/responses/Unauthenticate'
          '406':
            $ref: '#/components/responses/UserLocked'
          '5XX':
            description: "Internal Server Error."
        security:
          - ApiAuthorization: [accessToken]
  /api/v1/videoListings:
      get:
        summary: "Videos Listings API"
        tags:
          - "Videos"
        parameters:
          # Header Parameters
          - $ref: '#/components/parameters/authorization'
          - $ref: '#/components/parameters/contenttype'
            # Query Parameters
          - $ref: '#/components/parameters/format'
          - $ref: '#/components/parameters/categoryId'
          - $ref: '#/components/parameters/limit'
          - $ref: '#/components/parameters/offset'
        responses:
          '200':
            $ref: '#/components/responses/videoListings'
          '404':
            $ref: '#/components/responses/NotFound'
          '400':
            $ref: '#/components/responses/Badrequest'
          '401':
            $ref: '#/components/responses/Unauthenticate'
          '406':
            $ref: '#/components/responses/UserLocked'
          '5XX':
            description: "Internal Server Error."
        security:
          - ApiAuthorization: [accessToken]

  # Tools API.
  /api/v1/toolCategories:
    get:
      summary: Tool categories.
      tags:
        - Tools
      parameters:
        #Header Parameter.
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/authorization'
        # Query Parameters
        - $ref: '#/components/parameters/format'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/videoCatListings'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '5XX':
          description: 'Internal Server Error.'
      security:
        - ApiAuthorization: [accessToken]
  /api/v1/tools:
    get:
      summary: "Tool Listings API"
      tags:
        - "Tools"
      parameters:
        # Header Parameters
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/operationheaders'
        - $ref: '#/components/parameters/requestidheader'
        - $ref: '#/components/parameters/timestampheader'
        # Query Parameters
        - $ref: '#/components/parameters/format'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/ToolListing'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '406':
          $ref: '#/components/responses/UserLocked'
        '5XX':
          description: "Internal Server Error."
      security:
        - ApiAuthorization: [accessToken]


  #Legal - Privacy Policy
  /api/v1/privacyPolicy:
    get:
      summary: "Privacy policy API. This API will provide policies of user's market in user's language."
      tags:
        - "Legal"
      parameters:
        # Header Parameters
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          $ref: '#/components/responses/PrivacyPolicy'
        '400':
          $ref: '#/components/responses/Badrequest'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          description: "Method Not Allowed."
        '500':
          description: "Internal Server Error"
      security:
        - ApiAuthorization: [accessToken]

  /api/v1/globalPrivacyPolicy:
    get:
      summary: "Global Privacy policy. This API will provide content in selected market and language."
      tags:
        - "Legal"
      parameters:
        # Query Parameters
        - $ref: '#/components/parameters/clientId'
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/country'
      responses:
        '200':
          $ref: '#/components/responses/PrivacyPolicy'
        '400':
          $ref: '#/components/responses/Badrequest'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          description: "Method Not Allowed."
        '500':
          description: "Internal Server Error"

  # Legal - T&C
  /api/v1/termsAndConditions:
    get:
      summary: "Terms & Conditions. Terms and conditions will be in user's language."
      tags:
        - "Legal"
      parameters:
        # Header Parameters
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/contenttype'
        # Query parameters.
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          $ref: '#/components/responses/TermsAndConditions'
        '400':
          $ref: '#/components/responses/Badrequest'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          description: "Method Not Allowed."
        '500':
          description: "Internal Server Error"
      security:
        - ApiAuthorization: [accessToken]
  /api/v1/globalTermsAndCondition:
    get:
      summary: "Global Terms & Condition. Global terms and condition will provide content in selected language."
      tags:
        - "Legal"
      parameters:
        # Header Parameters
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/clientId'
      responses:
        '200':
          $ref: '#/components/responses/TermsAndConditions'
        '400':
          $ref: '#/components/responses/Badrequest'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          description: "Method Not Allowed."
        '500':
          description: "Internal Server Error"

  #User Related APIs
  /user/lost-password:
    post:
      summary: Forgot Password
      tags:
        - User
      parameters:
        # Header parameter
        - $ref: '#/components/parameters/contenttype'
        # Query Parameters
        - $ref: '#/components/parameters/format'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lostpassword'
      responses:
        '200':
          $ref: '#/components/responses/lost-password'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '5XX':
          description: 'Internal Server Error.'
  /user/lost-password-reset:
    post:
      summary: Reset Lost password Via Temp password
      tags:
        - User
      parameters:
        # Header parameter
        - $ref: '#/components/parameters/contenttype'
        # Query Parameters
        - $ref: '#/components/parameters/format'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lostpasswordreset'
      responses:
        '200':
          $ref: '#/components/responses/lost-password-reset'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '5XX':
          description: 'Internal Server Error.'
  /api/v1/passwordChange:
    post:
      summary: Password Edit/Update API
      tags:
        - User
      parameters:
        # Header Parameters.
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/authorization'
        # Query Parameters
        - $ref: '#/components/parameters/format'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passwordChange'
      responses:
        '200':
          $ref: '#/components/responses/passwordChange'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '5XX':
          description: 'Internal Server Error.'
      security:
        - ApiAuthorization: [accessToken]
  /api/v1/userDashboard:
    post:
      summary: User Profile/Dashboard API
      tags:
        - User
      parameters:
        #Header Parameter.
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/authorization'
         # Query Parameters
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          $ref: '#/components/responses/userDashboard'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/Badrequest'
        '5XX':
          description: 'Internal Server Error.'
      security:
        - ApiAuthorization: [accessToken]
  /api/v1/userPolicyFlag:
    post:
      summary: User Flag for privacy policy or terms and conditions.
      tags:
        - User
      parameters:
        #Header Parameter.
        - $ref: '#/components/parameters/contenttype'
        - $ref: '#/components/parameters/authorization'
         # Query Parameters
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          $ref: '#/components/responses/passwordChange'
        '401':
          $ref: '#/components/responses/Unauthenticate'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadrequestWithStatus'
        '5XX':
          description: 'Internal Server Error.'
      security:
        - ApiAuthorization: [accessToken]

components:
  parameters:
    clientId:
      name: "clientId"
      in: "query"
      description: "REST API client id"
      required: true
      schema:
        type: string
    operationheaders:
      name: x-trace-operation
      in: header
      description: Random ID for log debug
      schema:
        type: string
    requestidheader:
      name: x-trace-requestid
      in: header
      description: Loged-in user ID
      schema:
        type: string
    timestampheader:
      name: x-trace-timestamp
      in: header
      description: Request timestamp
      schema:
        type: string
    authorization:
      name: Authorization
      in: header
      description: Authorization should be access token - Bearer {{Oauth Token}}
      required: true
      schema:
        type: string
    contenttype:
      name: Content-Type
      in: header
      description: Content type should be application/json
      required: true
      schema:
        type: string
    refreshgranttype:
      name: grant_type
      in: header
      description: Grant type should be refresh token
      required: true
      schema:
        type: string
    granttype:
      name: grant_type
      in: header
      description: Grant type should be password
      required: true
      schema:
        type: string
    logout:
      name: access_token
      in: query
      description: Access token to verify user
      required: true
      schema:
        type: string
    emailid:
      name: emailid
      in: query
      description: Email id for send a resetpassword link
      required: true
      schema:
        type: string
    clientid:
      name: client_id
      in: query
      description: Client id should be user uuid
      required: true
      schema:
        type: string
    clientsecret:
      name: client_secret
      in: query
      description: Client secret can be anything
      required: true
      schema:
        type: string
    language:
      name: language
      in: query
      description: List of defined languages in CMS
      required: true
      schema:
        type: string
    selectedlanguage:
      name: x-locale
      in: header
      description: Selected language by user
      required: true
      schema:
        type: string
    username:
      name: username
      in: query
      description: It should be username which is used to login
      required: true
      schema:
        type: string
    password:
      name: password
      in: query
      description: It should be password which is used to login
      required: true
      schema:
        type: string
    refreshtoken:
      name: refresh_token
      in: query
      description: It should be refresh bearer token
      required: true
      schema:
        type: string
    accesstoken:
      name: access_token
      in: query
      description: It should be access bearer token
      required: true
      schema:
        type: string
    userid:
      name: user_id
      in: query
      description: It should be user id.
      required: true
      schema:
        type: string
    deviceId:
      name: deviceId
      in: query
      description: Device unique identifier
      required: true
      schema:
        type: string
    locale:
      name: locale
      in: query
      description: 'Locale ({ISO 639-1/2 language}-{ISO 639 alpha-2/3 counntry code})'
      required: true
      schema:
        type: string
    format:
      name: "_format"
      in: "query"
      required: true
      description: "json"
      schema:
        type: "string"
    categoryId:
      name: "categoryId"
      in: "query"
      description: "json"
      schema:
        type: "integer"
    limit:
      name: "limit"
      in: "query"
      description: "json"
      schema:
        type: "integer"
        default: 10
    offset:
      name: 'offset'
      in: "query"
      description: "json"
      schema:
        type: "integer"
        default: 0
    lang:
      name: "lang"
      in: "query"
      description: "Frontend language"
      required: true
      schema:
        type: "string"
    country:
      name: "country"
      in: "query"
      description: "Country Id"
      required: true
      schema:
        type: "integer"

  responses:
    passwordChange:
      description: Response send by password change API.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/passwordChangeResponse'
    userDashboard:
      description: Response send by userDashboard API.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userDashboard'
    lost-password:
      description: Response send by forgot password.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LostPassword'
    lost-password-reset:
      description: Response send by reset password.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LostPassword-Reset'
    logout:
      description: Unset the user session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Logout'
    oauthtoken:
      description: success response for profile request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Oauthtoken'
    refreshoauthtoken:
      description: Success message with a new refresh token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Refreshoauthtoken'
    defaultError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Access Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthenticate:
      description: Not Authenticated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UserLocked:
      description: User Locked message
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLocked'
    Badrequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadrequestWithStatus:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadrequestWithStatus'
    Unexpected:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    productListing:
      description: "Response for product listing"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductListing'
    videoListings:
      description: "Response for video listing"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VideoListings'
    videoCatListings:
      description: "Response for video category listing"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VideoCatListings'
    ToolListing:
      description: "Response for tool listing"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ToolListing'
    PrimaryMenu:
      description: Primary Navigation Menu
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PrimaryMenu'
    FooterMenu:
      description: "Response for footer menu"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FooterMenu'
    PrivacyPolicy:
      description: "Response for Privacy policy"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PrivacyPolicy'
    TermsAndConditions:
      description: "Response for T&C."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TermsAndConditions'
    globalTermsAndCondition:
      description: "Response for Global Privacy policy"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/globalTermsAndCondition'
    supportEmail:
      description: "Support email response."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/supportEmail'
    HeaderMenu:
      description: "Header Menu."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HeaderMenu'
    Categories:
      description: "Categories"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Categories'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    ApiAuthorization:
      type: apiKey
      in: header
      name: Access-Token
  schemas:
    passwordChangeResponse:
      description: Response sent by password change API.
      properties:
        message:
          description: if password updated successfully.
          type: string
          example: 'Updated successfully.'
        status:
          description: Success status.
          type: string
          example: true
    passwordChange:
      description: Parameter to send in password change API.
      properties:
        currentPassword:
          description: User's current password.
          type: string
          example: 'myOldPassword@123'
        newPassword:
          description: User's new password.
          type: string
          example: 'myNewPassword@123'
    LostPassword:
      description: Lost/Forgot password response.
      properties:
        message:
          description: Further instructions have been sent to your email address.
          type: string
          example: 'Further instructions have been sent to your email address.'
    LostPassword-Reset:
      description: Reset password response.
      properties:
        message:
          description: Your New Password has been saved please log in.
          type: string
          example: 'Your New Password has been saved please log in.'
    lostpassword:
      description: Parameter to send in forgot password.
      properties:
        mail:
          description: Email account which needs to reset password.
          type: string
          example: 'myuser@mailinator.com'
    lostpasswordreset:
      description: Parameter to send in reset password via Temp pass.
      properties:
        mail:
          description: Email account which needs to reset password.
          type: string
          example: 'testuser@gmail.com'
        tempPass:
          description: tempPass.
          type: string
          example: 'Kslv6ShYDf'
        newPass:
          description: set new password.
          type: string
          example: '1234'
    Logout:
      description: Logout definition
      properties:
        status:
          description: status of logout
          type: string
          example: 'True|False'
        message:
          description: Logout successfully
          type: string
          example: 'Your token has been revoked'
    logoutreqbody:
      description: Oauth Token needs to be revoke.
      properties:
        token:
          description: Oauth token which needs to be revoke.
          type: string
          example: '1db7440c-79f0-....'
    oauthtokenrb:
      description: Login request body
      properties:
        grant_type:
          description: It should be password
          type: string
          example: 'password'
        client_id:
          description: It should be some thing '1db7440c-79f0-....'
          type: string
          example: '1db7440c-79f0-....'
        client_secret:
          description: Client secret can be any text
          type: string
          example: '1db7440c79f0'
        username:
          description: It should be user's username
          type: string
          example: 'user_name'
        password:
          description: It should be user's password
          type: string
          example: 'user_password'
    refreshoauthtokenrb:
      description: Profile definition
      properties:
        grant_type:
          description: It should be refresh_token
          type: string
          example: 'refresh_token'
        client_id:
          description: It should be some thing '1db7440c-79f0-....'
          type: string
          example: '1db7440c-79f0-....'
        client_secret:
          description: Client secret can be any text
          type: string
          example: 'dasdasdasdas'
        refresh_token:
          description: It should be refresh token
          type: string
          example: 'asdfsafdsafdsfsfsdfsdfsdfs'
    Oauthtoken:
      description: Profile definition
      properties:
        token_type:
          description: Oauth token type will be Bearer
          type: string
        expires_in:
          description: Expires time in second
          type: integer
        access_token:
          description: Access token will be Bearer token
          type: string
        refresh_token:
          description: Refresh token will be refresh token
          type: string
    Refreshoauthtoken:
      description: Refresh token API response.
      properties:
        token_type:
          description: Oauth token type will be Bearer
          type: string
          example: 'Bearer'
        expires_in:
          description: Expires time in second
          type: integer
          example: 43200
        access_token:
          description: Access token will be Bearer token
          type: string
          example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0ayNmVjYWFmYmJmZmVhYzgzYmU'
        refresh_token:
          description: Refresh token will be refresh token
          type: string
          example: 'iOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImFkYzBlMmWFmYmJmZmVhYzgzYmU'
    Error:
      description: error definition
      required:
        - message
      properties:
        message:
          description: error message
          type: string
    BadrequestWithStatus:
      description: error definition
      required:
        - message
      properties:
        message:
          description: error message
          type: string
          example: "error message"
        status:
          description: error message
          type: string
          example: "false"
    UserLocked:
      description: You have exceeded maximum login attempts. Please wait 30 minutes before attempting to login again.
      required:
        - message
      properties:
        message:
          description: error message
          type: string
    ProductListing:
      description: Product listing
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ListingItem'
        pager:
          $ref: '#/components/schemas/pager'
    VideoListings:
      description: Videos listing
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ListingVideoItem'
        pager:
          $ref: '#/components/schemas/pager'
    VideoCatListings:
      description: Videos category listing
      type: object
      properties:
        totalCount:
          type: integer
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/ListingVideoCatItem'
        pager:
          $ref: '#/components/schemas/pager'
    ListingVideoItem:
      properties:
        nid:
          description: Content Id
          type: integer
          example: 123
        title:
          description: Title.
          type: "string"
          example: "Lmx e-learning"
        image:
          description: image url.
          type: "string"
          example: "http://mylmx.com/sites/default/files/styles/product_listing_310_425/public/5.PF_ANREyeGel.png?itok=Xpz9caT4"
        video:
          description: video url.
          type: "string"
          example: "http://localhost:88/sites/default/files/2019-09/y2mate.com%20-%20how_to_make_helicopter_matchbox_helicopter_toy_diy_SC4JxhrBtUM_144p.mp4"
        videoSubtitle:
          description: Url to video Subtitle file.
          type: "string"
          example: "http://localhost:88/sites/default/files/2019-09/example.vtt"
        categoryName:
          description: Video Category name.
          type: "string"
          example: "cat1"
        categoryId:
          description: Video Category id.
          type: integer
          example: 86462
        pointValue:
          description: Point Value.
          type: integer
          example: 12
    ListingVideoCatItem:
      properties:
        name:
          description: Name of category.
          type: "string"
          example: cat1
        categoryId:
          description: Category id.
          type: integer
          example: 86462
    ListingItem:
      properties:
        nid:
          description: Content Id
          type: integer
          example: 123
        imageLarge:
          description: Large image url.
          type: "string"
          example: "http://mylmx.com/sites/default/files/styles/product_listing_310_425/public/5.PF_ANREyeGel.png?itok=Xpz9caT4"
        imageMedium:
          description: Medium image url.
          type: "string"
          example: "http://mylmx.com/sites/default/files/styles/product_listing_310_425/public/5.PF_ANREyeGel.png?itok=Xpz9caT4"
        imageSmall:
          description: Small image url.
          type: "string"
          example: "http://mylmx.com/sites/default/files/styles/product_listing_310_425/public/5.PF_ANREyeGel.png?itok=Xpz9caT4"
        displayTitle:
          description: Display title.
          type: "string"
          example: "Product display"
        subTitle:
          description: Sub title.
          type: "string"
          example: "Product subtitle"
        pointValue:
          description: Point Value.
          type: "integer"
          example: 12
    pager:
      properties:
        count:
          description: Total Count
          type: integer
        pages:
          description: No of pages
          type: integer
        items_per_page:
          description: Items per page
          type: integer
        current_page:
          description: Current Page
          type: integer
        next_page:
          description: Next Page
          type: integer
    PrimaryMenu:
      description: Primary Menu
      type: object
      properties:
        primaryNavigationMenu:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
    FooterMenu:
      description: Product listing
      type: object
      properties:
        socialMenu:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
        privacyMenu:
          type: array
          items:
            $ref: '#/components/schemas/MenuItem'
    MenuItem:
      properties:
        sequenceId:
          description: Weight of menu item.
          type: integer
          example: 1
        id:
          description: Menu item ID.
          type: integer
          example: 1
        content:
          description: Large image url.
          type: "string"
          example: "home"
        name:
          description: Title of menu.
          type: "string"
          example: "Home"
        URL:
          description: URL if there is any.
          type: "string"
          example: "/front"
        type:
          description: Type of menu item.
          type: "string"
          example: "internal/external"
        targetId:
          description: Target Id if needs to pass from menu to some page.Default will be 0.
          type: integer
          example: 10
        parent:
          description: Item parent id.
          type: "integer"
          example: 0
        iconImage:
          description: Menu Item image if there is any
          type: string
    PrivacyPolicy:
      description: Privacy Policy.
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/PrivacyPolicyItem'
    PrivacyPolicyItem:
      description: "Privacy Policy Item"
      properties:
        mid:
          description: Market id
          type: integer
          example: 1
        market:
          description: Market name
          type: string
          example: "US"
        title:
          description: "Title"
          type: string
          example: "Privacy Policy for US"
        body:
          description: "Body content for Privacy policy"
          type: string
          example: "Content for privacy policy of US."
        effective_date:
          description: "Effective date"
          type: string
          example: "January 11, 2019"
    TermsAndConditions:
      description: "T&C Items."
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/TermsAndConditionsItem'
    TermsAndConditionsItem:
      properties:
        title:
          description: "Title"
          type: string
          example: "T_C English"
        body:
          description: "Body content"
          type: string
          example: "<p>This is test content.......</p>\n"
        effective_date:
          description: "Effective date"
          type: string
          example: "January 23, 2019"
    globalTermsAndCondition:
      description: "Global Terms & Condition API"
      properties:
        title:
          description: "Title"
          type: string
          example: "T_C English"
        body:
          description: "Body content"
          type: string
          example: "<p>This is test content.......</p>\n"
        effective_date:
          description: "Effective date"
          type: string
          example: "January 23, 2019"
    userDashboard:
      description: "Global Terms & Condition API"
      properties:
        name:
          description: "name"
          type: string
          example: "john doe"
        role:
          description: "Role"
          type: string
          example: "Administrator, Beauty Advisor"
        firstName:
          description: "First Name"
          type: string
          example: "John"
        lastName:
          description: "Last Name"
          type: string
          example: "Doe"
        createdDate:
          description: "Created Date"
          type: integer
          example: 1421100544
        userPicture:
          description: "Picture of User"
          type: string
          example: "https://cdn/mylmx.com/sites/default/files/picture.jpg"
        currentLanguageName:
          description: "Current Language"
          type: string
          example: "currentLanguageName"
        policyFlag:
          description: "Policy Flag"
          type: string
          example: "True"
        currentLanguageId:
          description: "Current Language Id"
          type: string
          example: "en"
        markets:
          description: "Markets"
          type: array
          items:
            $ref: '#/components/schemas/marketItem'
        regions:
          description: "Regions"
          type: array
          example: []
        LevelStatus:
          description: "Level Status"
          type: integer
          example: 0
        levelId:
          description: "Level Status"
          type: integer
          example: 0
        storeInfo:
          description: "Store Info"
          type: array
          items:
            properties:
              store:
                description: User's store. It may be empty.
                type: string
                example: "Dummy Store"
              city:
                description: User's city. It may be empty.
                type: string
                example: "city"
              state:
                description: User's state. It may be empty.
                type: string
                example: "State"
              rank:
                description: User's rank..
                type: integer
                example: 0
        userPoints:
          description: "User Points"
          type: integer
          example:  10
    supportEmail:
      description: Support Email
      properties:
        supportEmail:
          description: "support email"
          type: string
          example: "support@mail.com"
    marketItem:
      properties:
        name:
          description: Market Name.
          type: string
          example: 'United State'
        mid:
          description: Market ID.
          type: integer
          example: 101
        lang:
          description: Market language code.
          type: "string"
          example: "en"
    HeaderMenu:
      description: Header Menu.
      type: object
      properties:
        userDetails:
          type: array
          items:
            properties:
              name:
                type: string
                example: 'John'
              imageUrl:
                type: string
                example: 'https://cdn.mylmx.com/image.png'
              market:
                type: string
                example: 'United states'
              role:
                type: string
                example: 'Beauty Advisor'
        navData:
          type: array
          items:
            $ref: '#/components/schemas/HeaderMenuItem'
    HeaderMenuItem:
      properties:
        sequenceId:
          type: integer
          example: -50
        content:
          type: string
          example: "Leaderboard"
    Categories:
      description: Categories.
      type: array
      items:
        $ref: '#/components/schemas/CateogriesItem'
    CateogriesItem:
      description: "Category Item"
      properties:
        tid:
          description: Term id
          type: integer
          example: 1
        name:
          description: Term name
          type: string
          example: "Eyes"
    ToolListing:
      description: Tool listing
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ToolListingItem'
        pager:
          $ref: '#/components/schemas/pager'
    ToolListingItem:
      properties:
        nid:
          description: Content Id
          type: integer
          example: 123
        title:
          description: Display title.
          type: "string"
          example: "Tools"
        subTitle:
          description: Sub title.
          type: "string"
          example: "Product subtitle"
        imageLarge:
          description: Large image url.
          type: "string"
          example: "http://mylmx.com/sites/default/files/styles/product_listing_310_425/public/5.PF_ANREyeGel.png?itok=Xpz9caT4"
        imageMedium:
          description: Medium image url.
          type: "string"
          example: "http://mylmx.com/sites/default/files/styles/product_listing_310_425/public/5.PF_ANREyeGel.png?itok=Xpz9caT4"
        imageSmall:
          description: Small image url.
          type: "string"
          example: "http://mylmx.com/sites/default/files/styles/product_listing_310_425/public/5.PF_ANREyeGel.png?itok=Xpz9caT4"
        fileUrl:
          description: Tool media URL.
          type: "string"
          example: "http://mylmx.com/sites/default/files/tool.pdf"
        pointValue:
          description: Point Value.
          type: "integer"
          example: 12
        description:
          description: Tool description.
          type: string
          example: "Tool description"