openapi: 3.0.1
info:
  title: Simple Core API
  description: These services simulate a very simple banking core.
  version: '1'
externalDocs:
  url: 'https://cs-gitlab.avoka.com/carbon-canyon-bank/ccb-simple-core'
servers:
  - url: 'https://simplecore.carboncanyonbank.com/'
    description: Primary Server
    variables: {}
security:
  - basicauth: []
paths:
  /rest/v1/account/addAccount:
    post:
      operationId: addAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/xml:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  '/rest/v1/account/getAccount/{accountId}':
    get:
      operationId: getAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /rest/v1/customer/addCustomer:
    post:
      summary: Add a single customer
      operationId: addCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Returns the new customer with the customer ID populated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
  '/rest/v1/customer/getCustomer/{customerId}':
    get:
      summary: Get a single user
      operationId: getCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: If the customer id cannot be found
  '/rest/v1/customer/assignAccountToCustomer/{accountId}/{customerId}':
    post:
      summary: Assigns the given account to the given customer
      operationId: assignAccountToCustomer
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: If the customer id or account id cannot be found
  '/rest/v1/customer/getCustomers/{startAt}/{numResults}':
    get:
      summary: 'Gets all customers, based on the parameters'
      operationId: getCustomers
      parameters:
        - name: startAt
          in: path
          description: Start the query at this number of rows
          required: true
          schema:
            type: integer
            format: int32
        - name: numResults
          in: path
          description: Return at most this many results
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Returns all customers, based on the parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
  /rest/v1/customer/getCustomers:
    get:
      summary: Gets all customers
      operationId: getCustomers_1
      responses:
        '200':
          description: Returns all customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
  /rest/v1/heartbeat:
    get:
      operationId: getHeartBeat
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  /rest/v1/version/summary:
    get:
      operationId: getTextStatus
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  /rest/v1/version:
    get:
      operationId: getFullStatus
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
components:
  schemas:
    Account:
      type: object
      properties:
        accountId:
          type: integer
          format: int32
        balance:
          type: number
          format: double
        accountType:
          type: string
          xml:
            name: accountType
          enum:
            - CHECKING
            - SAVINGS
            - CD
      xml:
        name: account
    Address:
      type: object
      properties:
        streetAddress:
          type: string
        city:
          type: string
        postalCode:
          type: string
        provinceState:
          type: string
      xml:
        name: address
    Customer:
      type: object
      properties:
        customerId:
          type: integer
          format: int32
        dateOfBirth:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        ssn:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
      xml:
        name: customer
  securitySchemes:
    basicauth:
      type: http
      description: >-
        All calls use basic authentication.  The user name is any email address
        and the password MUST be avoka
      scheme: basic
