{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "AplusC.Phoboss3",
    "description" : "Photo database service",
    "version" : "2.0.0.0"
  },
  "servers" : [ {
    "url" : "https://meg.media-press.tv/{customerId}/hubert/phoboss/2.0",
    "variables" : {
      "customerId" : {
        "default" : "customer",
        "description" : "Customer ID assigned by media-press"
      }
    }
  } ],
  "paths" : {
    "/UpsertMediaRecords" : {
      "post" : {
        "operationId" : "UpsertMediaRecords",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertMediaRecordsRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpsertMediaRecordsResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ApiKeyAuth" : [ ]
        } ]
      }
    },
    "/CreateStream" : {
      "summary" : "Creates a stream for uploading image bytes to phoboss service. Returns unique stream identifier which is used in WriteToStream, CloseStream, DeleteStream and UpsertMediaRecords",
      "post" : {
        "operationId" : "CreateStream",
        "summary" : "Creates a stream for uploading image bytes to phoboss service. Returns unique stream identifier which is used in WriteToStream, CloseStream, DeleteStream and UpsertMediaRecords",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateStreamRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateStreamResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ApiKeyAuth" : [ ]
        } ]
      }
    },
    "/WriteToStream" : {
      "summary" : "Sends N bytes of an image to phoboss service using the stream created in method CreateStream.",
      "post" : {
        "operationId" : "WriteToStream",
        "summary" : "Sends N bytes of an image to phoboss service using the stream created in method CreateStream.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WriteToStreamRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WriteToStreamResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ApiKeyAuth" : [ ]
        } ]
      }
    },
    "/CloseStream" : {
      "summary" : "Ends data transfer to phoboss service. Closed stream can be used as parameter in other API methods. Closed stream lives for an hour and is not available after that time",
      "post" : {
        "operationId" : "CloseStream",
        "summary" : "Ends data transfer to phoboss service. Closed stream can be used as parameter in other API methods. Closed stream lives for an hour and is not available after that time",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CloseStreamRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloseStreamResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ApiKeyAuth" : [ ]
        } ]
      }
    },
    "/DeleteStream" : {
      "summary" : "Releases resources used by the stream. It is done automatically by the service after an hour after closing the stream, but can be also called by a client as soon as it has finished all API operations that used the stream.",
      "post" : {
        "operationId" : "DeleteStream",
        "summary" : "Releases resources used by the stream. It is done automatically by the service after an hour after closing the stream, but can be also called by a client as soon as it has finished all API operations that used the stream.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeleteStreamRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeleteStreamResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "ApiKeyAuth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "RequestBase" : {
        "type" : "object",
        "properties" : {
          "ApiVersion" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "UpsertMediaRecordsRequest" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "UpsertData" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MeUpsertData"
              }
            },
            "AreaId" : {
              "type" : "integer",
              "format" : "int64",
              "nullable" : true
            },
            "UpdateAllAreaKeywords" : {
              "type" : "boolean"
            },
            "IsHuman" : {
              "type" : "boolean"
            }
          }
        }, {
          "$ref" : "#/components/schemas/RequestBase"
        } ]
      },
      "MeUpsertData" : {
        "type" : "object",
        "properties" : {
          "Keywords" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MediaRecordKeyword"
            }
          },
          "Cultures" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "MediaRecordsIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "StreamIds" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "MediaFileIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "StreamPosters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GuidGuidPair"
            }
          },
          "MediaRecordCategoryLevel0" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "MediaRecordCategoryLevel1" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "Copyrights" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MeCopyrights"
            }
          },
          "LanguageFeatures" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LanguageFeature"
            }
          },
          "ForeignSources" : {
            "type" : "array",
            "description" : "Identyfikatory zdjęcia w obcych źródłach. Kolekcja uwzględniana tylko dla zdjęć przesyłanych przez strumień (tylko dla <see cref=\"P:AplusC.Services.Phoboss3.DataContracts.Views.MultiEdit.MeUpsertData.StreamIds\" />)",
            "items" : {
              "$ref" : "#/components/schemas/ForeignSourceId"
            }
          },
          "Cuts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DefinedPictureCut"
            }
          },
          "ColorProfiles" : {
            "type" : "array",
            "description" : "Zdarza się że redaktor chciałby wstawić do Phobossa zdjęcie, które już jest obrobione w jakimś wariancie. Bo np. zrobił je sobie na boczku.            Obecnie aby takie zdjęcie zafunkcjonowało jako zdjęcie z wariantem, redaktor musi je sztucznie przepuścić przez workflow zdjęciowy(a to kupa klikania).            W związku z tym dodajemy możliwość uploadu zdjęcia z automatycznym utworzeniem zdjęcia w wybranym wariancie/wariantach",
            "items" : {
              "$ref" : "#/components/schemas/StreamColorProfile"
            }
          },
          "CreateNewMediaRecord" : {
            "type" : "boolean",
            "description" : "Jeżeli <code>true</code> tworzony jest nowy media rekord."
          }
        }
      },
      "MediaRecordKeyword" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "SyncId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "FieldTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "EnumTypeId" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "Values" : {
            "type" : "array",
            "description" : "List of keyword values (one value per culture)",
            "items" : {
              "$ref" : "#/components/schemas/KeywordValue"
            }
          },
          "ParentValues" : {
            "type" : "array",
            "description" : "List of keyword values from parent areas (one value per culture in parent area,             sorted by areas assignment order",
            "items" : {
              "$ref" : "#/components/schemas/KeywordValue"
            }
          }
        }
      },
      "KeywordValue" : {
        "type" : "object",
        "properties" : {
          "CultureId" : {
            "type" : "string"
          },
          "AreaId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ValueText" : {
            "type" : "string"
          },
          "ValueInt" : {
            "type" : "integer",
            "format" : "int64",
            "nullable" : true
          },
          "ValueDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ValueDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ValueTime" : {
            "type" : "string",
            "nullable" : true
          },
          "ValueDouble" : {
            "type" : "number",
            "format" : "double",
            "nullable" : true
          },
          "ValueBool" : {
            "type" : "boolean",
            "nullable" : true
          },
          "ValueGuid" : {
            "type" : "string",
            "format" : "uuid",
            "nullable" : true
          },
          "ValueEnum" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "ValueTextArray" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ValueIntArray" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "ValueDateTimeArray" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "ValueDateArray" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "ValueTimeArray" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ValueDoubleArray" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "ValueBoolArray" : {
            "type" : "array",
            "items" : {
              "type" : "boolean"
            }
          },
          "ValueGuidArray" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "uuid"
            }
          },
          "ValueEnumArray" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "GuidGuidPair" : {
        "type" : "object",
        "properties" : {
          "FirstValue" : {
            "type" : "string",
            "format" : "uuid"
          },
          "SecondValue" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "CopyrightSet" : {
        "type" : "object",
        "properties" : {
          "CopyrightNotice" : {
            "type" : "string"
          },
          "Paid" : {
            "type" : "boolean"
          },
          "FileSource" : {
            "type" : "string"
          },
          "SourceId" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "PrintOnly" : {
            "type" : "boolean"
          },
          "VgMedia" : {
            "type" : "boolean"
          },
          "DistributorId" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "DistributorExtId" : {
            "type" : "string"
          },
          "Owner" : {
            "type" : "string"
          },
          "UsageArea" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PriceLevel" : {
            "type" : "string"
          },
          "EmmisionRestriction" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "ExpiresOn" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }
      },
      "MeCopyrights" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "MediaFileIds" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int32"
              }
            },
            "StreamIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "uuid"
              }
            }
          }
        }, {
          "$ref" : "#/components/schemas/CopyrightSet"
        } ]
      },
      "LanguageFeature" : {
        "type" : "object",
        "properties" : {
          "LanguageFeatureId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "CultureId" : {
            "type" : "string"
          }
        }
      },
      "ForeignSourceId" : {
        "type" : "object",
        "properties" : {
          "ForeignSourceDefId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ForeignId" : {
            "type" : "string"
          },
          "MediaFileId" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }
      },
      "DefinedPictureCut" : {
        "type" : "object",
        "properties" : {
          "CutDefinitionId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Cut" : {
            "$ref" : "#/components/schemas/PictureCut"
          }
        }
      },
      "PictureCut" : {
        "type" : "object",
        "properties" : {
          "X" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Y" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Width" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Height" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "StreamColorProfile" : {
        "type" : "object",
        "properties" : {
          "StreamId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "ColorProfileId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "OverrideExisting" : {
            "type" : "boolean"
          }
        }
      },
      "ResponseBase" : {
        "type" : "object",
        "properties" : { }
      },
      "UpsertMediaRecordsResponse" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "Success" : {
              "type" : "boolean"
            },
            "Errors" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/UpsertMediaRecordError"
              }
            },
            "StreamMediaRecords" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/IntGuidPair"
              }
            },
            "NothingChanged" : {
              "type" : "boolean"
            }
          }
        }, {
          "$ref" : "#/components/schemas/ResponseBase"
        } ]
      },
      "UpsertMediaRecordError" : {
        "type" : "object",
        "properties" : {
          "StreamId" : {
            "type" : "string",
            "format" : "uuid",
            "nullable" : true
          },
          "Code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Details" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "IntGuidPair" : {
        "type" : "object",
        "properties" : {
          "IntValue" : {
            "type" : "integer",
            "format" : "int32"
          },
          "GuidValue" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "CreateStreamRequest" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "Capacity" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "$ref" : "#/components/schemas/RequestBase"
        } ]
      },
      "CreateStreamResponse" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "StreamId" : {
              "type" : "string",
              "format" : "uuid"
            },
            "ServiceNotInitialized" : {
              "type" : "boolean"
            }
          }
        }, {
          "$ref" : "#/components/schemas/ResponseBase"
        } ]
      },
      "WriteToStreamRequest" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "StreamId" : {
              "type" : "string",
              "format" : "uuid"
            },
            "Data" : {
              "type" : "array",
              "items" : {
                "type" : "number",
                "format" : "int32"
              }
            },
            "Base64Data" : {
              "type" : "string"
            },
            "Count" : {
              "type" : "integer",
              "format" : "int32"
            },
            "Position" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "$ref" : "#/components/schemas/RequestBase"
        } ]
      },
      "WriteToStreamResponse" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : { }
        }, {
          "$ref" : "#/components/schemas/ResponseBase"
        } ]
      },
      "CloseStreamRequest" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "StreamId" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }, {
          "$ref" : "#/components/schemas/RequestBase"
        } ]
      },
      "CloseStreamResponse" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "Sha1Hash" : {
              "type" : "string"
            },
            "MediaRecordId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "MediaFileId" : {
              "type" : "integer",
              "format" : "int32"
            },
            "Success" : {
              "type" : "boolean"
            },
            "ErrorMsg" : {
              "type" : "string"
            },
            "Width" : {
              "type" : "integer",
              "format" : "int32"
            },
            "Height" : {
              "type" : "integer",
              "format" : "int32"
            },
            "PreviewBase64Data" : {
              "type" : "string"
            },
            "HiddenInAreas" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "FileFormat" : {
              "type" : "integer",
              "format" : "int32",
              "nullable" : true
            }
          }
        }, {
          "$ref" : "#/components/schemas/ResponseBase"
        } ]
      },
      "DeleteStreamRequest" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "StreamId" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        }, {
          "$ref" : "#/components/schemas/RequestBase"
        } ]
      },
      "DeleteStreamResponse" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : { }
        }, {
          "$ref" : "#/components/schemas/ResponseBase"
        } ]
      }
    },
    "securitySchemes" : {
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "Authorization"
      }
    }
  },
  "security" : [ {
    "ApiKeyAuth" : [ ]
  } ],
  "tags" : [ ]
}