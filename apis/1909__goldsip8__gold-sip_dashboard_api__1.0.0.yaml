openapi: 3.0.0
info:
  version: "1.0.0"
  title: GoldSIP Dashboard API
paths:
  /admin/bullions:
    post:
      tags:
        - Bullion
      summary: Add a new bullion to the system (Type, Purity, Display Name)
      operationId: createBullion
      responses:
        '405':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bullion'
        description: 'Create a new Bullion'
        required: true

    put:
      tags:
        - Bullion
      summary: Update an existing metal
      operationId: updateBullion
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Bullion not found
        '405':
          description: Validation exception
      parameters:
        - name: id
          in: path
          description: Id of the metal to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Bullion'
    get:
      tags:
        - Bullion
      summary: Finds Bullion by ID
      description: Finds Bullion by ID
      operationId: getBullion
      parameters:
        - name: id
          in: path
          description: Id of the metal to fetch back
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bullion'
    delete:
      tags:
        - Bullion
      summary: Deletes a Bullion by ID
      description: Deletes Bullion by ID
      operationId: deleteBullion
      parameters:
        - name: id
          in: path
          description: Id of the metal to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation

  /admin/bullionrates:
    post:
      tags:
        - Bullion Rate
      summary: Create new Rate
      operationId: createBullionRate
      responses:
        '405':
          description: Validation exception
      parameters:
        - name: id
          in: path
          description: Id of the metal rate to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BullionInputRate'
      
  /admin/bullionrates/{id}:
    put:
      tags:
        - Bullion Rate
      summary: Update an existing rate
      operationId: updateBullionRate
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Bullion not found
        '405':
          description: Validation exception
      parameters:
        - name: id
          in: path
          description: Id of the metal rate to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BullionInputRate'
    get:
      tags:
        - Bullion Rate
      summary: Finds Bullion Rate by ID
      description: Finds Bullion Rate by ID
      operationId: getBullionRate
      parameters:
        - name: id
          in: path
          description: Id of the metal rate to fetch back
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BullionInputRate'
    delete:
      tags:
        - Bullion Rate
      summary: Deletes a Bullion Rate by ID
      description: Deletes Bullion Rate by ID
      operationId: deleteBullionRate
      parameters:
        - name: id
          in: path
          description: Id of the metal rate to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
  /admin/searchbullionrates:
    post:
      tags:
        - Bullion Rate
      summary: Seearches hostoric rate data in the system.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BullionRateSerachInput'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BullionInputRate'

  /admin/partners:
    post:
      tags:
        - Partner
      summary: Add new partner
      operationId: addPartner
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to add partner due to internal error
        '200':
          description: Partner added successfully
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Partner'
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Partner'
    get:
      tags:
        - Partner
      summary: get list of partners
      operationId: getPartners
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get partners due to internal error
        '200':
          description: Partner list returned successfully
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Partner' 
                  description: array of Partners
  /admin/partners/{partnerCode}:
    put:
      tags:
        - Partner
      summary: Update a partner
      operationId: updatePartner
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to update partner due to internal error
        '200':
          description: Partner updated successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Partner'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the MFI Partner whose details are updated
          required: true
          schema:
            type: string   
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Partner'
    get:
      tags:
        - Partner
      summary: Get a Partner details
      operationId: getPartner
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to find a Partner due to internal error
        '200':
          description: Partner data returned successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Partner'          
      parameters:
        - name: partnerCode
          in: path
          description: unique code of the MFI Partner whose details are requested
          required: true
          schema:
            type: string
  /admin/partners/{partnerCode}/private-data:
    post:
      tags:
        - Partner
      summary: Add private data of partner
      operationId: addPartnerPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to add partner private data due to internal error
        '200':
          description: Partner private data added successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/PartnerPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose privtae data is bveing added
          required: true
          schema:
            type: string 
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/PartnerPrivateData'    
    put:
      tags:
        - Partner
      summary: Update private data of partner
      operationId: updatePartnerPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to update partner private data due to internal error
        '200':
          description: Partner private data updated successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/PartnerPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose private data is being updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/PartnerPrivateData'
    get:
      tags:
        - Partner
      summary: Get private data of partner
      operationId: getPartnerPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get partner private data due to internal error
        '200':
          description: Partner private data returned successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/PartnerPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose private data is being requested
          required: true
          schema:
            type: string
  /admin/partners/{partnerCode}/branches/{branchId}/private-data:
    post:
      tags:
        - Branch
      summary: Add private data of a branch
      operationId: addBranchPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner/Branch not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to add branch private data due to internal error
        '200':
          description: Branch private data added successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BranchPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose branches privtae data is being added
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          description: unique external branch id whose private data is being added
          required: true
          schema:
            type: string                          
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BranchPrivateData'    
    put:
      tags:
        - Branch
      summary: Update private data of a branch
      operationId: updateBranchPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner/Branch not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to update branch private data due to internal error
        '200':
          description: Branch private data updated successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BranchPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose branches privtae data is being updated
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          description: unique external branch id whose private data is being updated
          required: true
          schema:
            type: string                          
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BranchPrivateData'   
    get:
      tags:
        - Branch
      summary: Get private data of a branch
      operationId: getBranchPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner/Branch not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get branch private data due to internal error
        '200':
          description: Branch private data returned successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BranchPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose branches privtae data is being requested
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          description: unique external branch id whose private data is being requested
          required: true
          schema:
            type: string     
  /admin/partners/{partnerCode}/agents/{agentId}/private-data:
    post:
      tags:
        - Agent
      summary: Add private data of an agent
      operationId: addAgentPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner/Agent not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to add agent private data due to internal error
        '200':
          description: Agent private data added successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AgentPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose agent private data is being added
          required: true
          schema:
            type: string
        - name: agentId
          in: path
          description: unique external agent id whose private data is being added
          required: true
          schema:
            type: string                          
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/AgentPrivateData'    
    put:
      tags:
        - Agent
      summary: Update private data of an agent
      operationId: updateAgentPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner/Agent not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to update agent private data due to internal error
        '200':
          description: Agent private data updated successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AgentPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose agent private data is being updated
          required: true
          schema:
            type: string
        - name: agentId
          in: path
          description: unique external agent id whose private data is being updated
          required: true
          schema:
            type: string                          
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/AgentPrivateData' 
    get:
      tags:
        - Agent
      summary: Get private data of an agent
      operationId: getAgentPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner/Agent not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get agent private data due to internal error
        '200':
          description: Agent private data returned successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AgentPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose agent private data is being requested
          required: true
          schema:
            type: string
        - name: agentId
          in: path
          description: unique external agent id whose private data is being requested
          required: true
          schema:
            type: string                     
  /admin/partners/{partnerCode}/customers/{customerId}/private-data:
    post:
      tags:
        - Customer
      summary: Add private data of a customer
      operationId: addCustomerPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner/Customer not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to add customer private data due to internal error
        '200':
          description: Customer private data added successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/CustomerPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose customer's private data is being added
          required: true
          schema:
            type: string
        - name: customerId
          in: path
          description: unique external customer id whose private data is being added
          required: true
          schema:
            type: string                          
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/CustomerPrivateData'    
    put:
      tags:
        - Customer
      summary: Update private data of a customer
      operationId: updateCustomerPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner/Customer not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to update customer private data due to internal error
        '200':
          description: Customer private data updated successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/CustomerPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose customer's private data is being updated
          required: true
          schema:
            type: string
        - name: customerId
          in: path
          description: unique external customer id whose private data is being updated
          required: true
          schema:
            type: string                          
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/CustomerPrivateData'    
    get:
      tags:
        - Customer
      summary: Get private data of a customer
      operationId: getCustomerPrivateData
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Partner/Customer not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get customer private data due to internal error
        '200':
          description: Customer private data returned successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/CustomerPrivateData'            
      parameters:
        - name: partnerCode
          in: path
          description: Unique code of the Partner whose customer's private data is being requested
          required: true
          schema:
            type: string
        - name: customerId
          in: path
          description: unique external customer id whose private data is being requested
          required: true
          schema:
            type: string
  /admin/searchorders:
    post:
      tags:
        - Order
      summary: Get list of orders with various filter and sort criterias, including partner, type, status, date etc
      operationId: getOrders
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get orders due to internal error
        '200':
          description: Order list returned successfully
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Order' 
                  description: array of orders
      parameters:
        - name: partnerId
          in: query
          description: Optional filter to get orders for a given partner. Provide internal ID of the MFI Partner.
          required: false
          schema:
            type: string
            format: uuid
        - name: orderType
          in: query
          description: Optional filter to get orders for a given order type
          required: false
          schema:
            type: string
            enum:
              - buy
              - sell
              - emergencySell
              - coin
              - jeweler
              - sip               
        - name: status
          in: query
          description: Optional filter to get orders for a given order status
          required: false
          schema:
            type: string
            enum:
              - new
              - inprogress
              - complete
              - cancelled
        - name: bullionName
          in: query
          description: Optional filter to get orders for a given bullion by providing unique bullion name
          required: false
          schema:
            type: string
        - name: bullionId
          in: query
          description: Optional filter to get orders for a given bullion and purity by providing unique bullion identifier
          required: false
          schema:
            type: string
            format: uuid                     
        - name: startDate
          in: query
          description: Optional filter to get orders where order date is on or after startDate
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Optional filter to get orders where order date is on or before endDate
          required: false
          schema:
            type: string
            format: date          
        - name: limit
          in: query
          description: result set limit, if not provided default 25 is used
          required: false
          schema:
            type: integer
            format: int32     
        - name: offset
          in: query
          description: offset for result set, if not provided default 0 is used i.e. results are returned from begining.
          required: false
          schema:
            type: integer
            format: int32                         
        - name: sort
          in: query
          description: sort column and sort order, + is ascending, - is descending. Default sort order is -orderDate
          required: false
          schema:
            type: string
            enum:
              - -orderDate
              - +orderDate
              - -customerName
              - +customerName
              - -amount
              - +amount                                          
              - -weight
              - +weight                             
  /admin/orders/{orderId}:
    get:
      tags:
        - Order
      summary: Get an order details for the given order identifier
      operationId: getOrder
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided          
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Order not found                    
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get order due to internal error
        '200':
          description: Order list returned successfully
          content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/DetailedOrder'   
      parameters:
        - name: orderId
          in: path
          description: get order for a given order id. Provide internal ID of the order.
          required: true
          schema:
            type: string
            format: uuid
  /admin/bullionbanks:
    post:
      tags:
        - Bullion Bank
      summary: Add new Bullion Bank
      operationId: addBullionBank
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to add bullion bank due to internal error
        '200':
          description: Bullion Bank added successfully
          content:
              application/json:
                schema:
                    $ref: '#/components/schemas/BullionBank'
      requestBody:
        content:
          application/json:
            schema: 
                $ref: '#/components/schemas/BullionBank'
    get:
      tags:
        - Bullion Bank
      summary: Get list of Bullion Banks
      operationId: getBullionBanks
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get bullion banks due to internal error
        '200':
          description: Bullion Bank list returned successfully
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/BullionBank'
                  description: array of Bullion Banks
      parameters:
        - name: name
          in: query
          description: partial/full name of the bullion bank
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: filter bullion banks based on the provided type
          required: false
          schema:
            type: string
            enum:
              - bullionBank
              - bullionBroker
              - jeweler
        - name: state
          in: query
          description: filter bullion banks based on the provided state
          required: false
          schema:
            type: string                                                                          
  /admin/bullionbanks/{bullionBankId}:
    put:
      tags:
        - Bullion Bank
      summary: Update a Bullion Bank
      operationId: updateBullionBank
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Bullion Bank not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to update bullion bank due to internal error
        '200':
          description: Bullion Bank updated successfully
      parameters:
        - name: bullionBankId
          in: path
          description: unique id of the Bullion Bank requiring update
          required: true
          schema:
            type: string      
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BullionBank'
    get:
      tags:
        - Bullion Bank
      summary: get a Bullion Bank
      operationId: getBullionBank
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Bullion Bank not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get Bullion Bank due to internal error
        '200':
          description: Bullion Bank returned successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BullionBank'                
      parameters:
        - name: bullionBankId
          in: path
          description: unique id of the Bullion Bank being requested
          required: true
          schema:
            type: string                        
  /admin/vaults:
    post:
      tags:
        - Vault
      summary: Add new Vault
      operationId: addVault
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to add vault due to internal error
        '200':
          description: Vault added successfully
          content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Vault'
      requestBody:
        content:
          application/json:
            schema: 
                $ref: '#/components/schemas/Vault'
    get:
      tags:
        - Vault
      summary: Get list of Vaults
      operationId: getVaults
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get vaults due to internal error
        '200':
          description: Vault list returned successfully
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Vault'
                  description: array of Vaults
      parameters:
        - name: name
          in: query
          description: partial/full name of the vault
          required: false
          schema:
            type: string
        - name: state
          in: query
          description: filter vaults based on the provided state
          required: false
          schema:
            type: string                                                         
  /admin/vaults/{vaultId}:
    put:
      tags:
        - Vault
      summary: Update a Vault
      operationId: updateVault
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Vault not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to update vault due to internal error
        '200':
          description: Vault updated successfully
      parameters:
        - name: vaultId
          in: path
          description: unique id of the vault requiring update
          required: true
          schema:
            type: string      
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Vault'
    get:
      tags:
        - Vault
      summary: get a Vault
      operationId: getVault
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Vault not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get Vault due to internal error
        '200':
          description: Vault returned successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Vault'                
      parameters:
        - name: vaultId
          in: path
          description: unique id of the Vault being requested
          required: true
          schema:
            type: string                                    
  /admin/inventoryitems:
    post:
      tags:
        - Inventory Item
      summary: Add new Inventory Item
      operationId: addInventoryItem
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to add inventory item due to internal error
        '200':
          description: Inventory item added successfully
          content:
              application/json:
                schema:
                    $ref: '#/components/schemas/InventoryItem'
      requestBody:
        content:
          application/json:
            schema: 
                $ref: '#/components/schemas/InventoryItem'
    get:
      tags:
        - Inventory Item
      summary: Get list of Inventory Items
      operationId: getInventoryItems
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get Inventory Items due to internal error
        '200':
          description: Inventory Item list returned successfully
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/InventoryItem'
                  description: array of Inventory items
      parameters:
        - name: name
          in: query
          description: Optional filter for name (partial/full) of the inventory item
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Optional filter for inventory items based on the provided type
          required: false
          schema:
            type: string
            enum:
              - coin
              - bar
              - chain 
        - name: bullionId
          in: query
          description: Optional filter to get inventory items for a given bullion and purity by providing unique internal bullion identifier
          required: false
          schema:
            type: string
            format: uuid                                                                                
  /admin/inventoryitems/{inventoryItemId}:
    put:
      tags:
        - Inventory Item
      summary: Update an Inventory Item
      operationId: updateInventoryItem
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Inventory Item not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to update Inventory Item due to internal error
        '200':
          description: Inventory Item updated successfully
      parameters:
        - name: inventoryItemId
          in: path
          description: unique id of the Inventory Item requiring update
          required: true
          schema:
            type: string      
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/InventoryItem'
    get:
      tags:
        - Inventory Item
      summary: get an Inventory Item
      operationId: getInventoryItem
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Inventory Item not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get Inventory Item due to internal error
        '200':
          description: Inventory Item returned successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/InventoryItem'                
      parameters:
        - name: inventoryItemId
          in: path
          description: unique id of the InventoryItem being requested
          required: true
          schema:
            type: string
  /admin/jewelers:
    post:
      tags:
        - Jeweler
      summary: Add new Jeweler
      operationId: addJeweler
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to add jeweler due to internal error
        '200':
          description: Jeweler added successfully
          content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Jeweler'
      requestBody:
        content:
          application/json:
            schema: 
                $ref: '#/components/schemas/Jeweler'  
    get:
      tags:
        - Jeweler
      summary: Get list of Jewelers with various filter and sort criterias
      operationId: getJewelers
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to get jewelers due to internal error
        '200':
          description: Jewelers list returned successfully
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Jeweler' 
                  description: array of Jewelers
      parameters:
        - name: jewelerName
          in: query
          description: partial/full name of the jeweler business
          required: false
          schema:
            type: string
        - name: location
          in: query
          description: gps coordinate of the location
          required: false
          schema:
            type: string
        - name: searchRadius
          in: query
          description: within the searchRadius Km, if not provided default 10 Km redius is used
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: search result limit, if not provided default 25 is used
          required: false
          schema:
            type: integer
            format: int32            
        - name: sort
          in: query
          description: sort column and sort order, + is ascending, - is descending. Default sort order is +name
          required: false
          schema:
            type: string
            enum:
              - +distance
              - -distance
              - +name
              - -name
              - +ownerName
              - -ownerName      
  /admin/jewelers/{jewelerId}:
    get:
      tags:
        - Jeweler
      summary: Get a Jeweler
      operationId: getJeweler
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Jeweler not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to find a Jeweler due to internal error
        '200':
          description: Jeweler data returned successfully
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Jeweler'          
      parameters:
        - name: jewelerId
          in: path
          description: unique internal id of the jeweler being requested
          required: true
          schema:
            type: string  
    put:
      tags:
        - Jeweler
      summary: Update Jeweler
      operationId: updateJeweler
      responses:
        '400':
          $ref: '#/components/responses/ErrorResponse'        
          description: Invalid data provided
        '401':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unauthorized access          
        '404':
          $ref: '#/components/responses/ErrorResponse'           
          description: Jeweler not found
        '500':
          $ref: '#/components/responses/ErrorResponse'           
          description: Unable to update Jeweler due to internal error
        '200':
          description: Jeweler updated successfully
      parameters:
        - name: jewelerId
          in: path
          description: unique internal id of the jeweler being updated
          required: true
          schema:
            type: string    
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Jeweler'                                                                     
components:
  responses:
    ErrorResponse:
      description: Error occured while processing the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:    
    BullionRateSerachInput:
      type: object
      properties:
        bullionid:
          type: string
          format: uuid
          description: ID of the metal for which the rate search need to run.
        fromDate:
          type: string
          format: date
        toDate:
          type: string
          format: date
        rateType:
          type: string
          enum:
            - buy
            - sell
        fromRate:
          type: number
          format: float
        toRate:
          type: number
          format: float
    Partner:
      type: object
      required:
        - id
        - accountId
        - name
        - partnerType
        - communicationAddress
        - registeredAddress
        - isSingleAddress
        - gst
        - pan
        - bankAccount
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: internal partner id
        accountId:
          type: integer
          format: int32
          readOnly: true
          description: internal account id
        partnerType:
          type: string
          enum:
            - mfi
            - paymentWallet
            - bank
            - broker 
          description: type of partner                                          
        name:
          type: string
          description: business/legal name of the partner
        businessGroupName:
          type: string
          description: partner business group or parent company name
        communicationAddress:
            $ref: '#/components/schemas/BusinessAddress'
        registeredAddress:
            $ref: '#/components/schemas/BusinessAddress'
        isSingleAddress:
          type: boolean
          description: Both registered and communication address same?
        gst:
          type: string
          description: gst of the partner
        pan:
          type: string
          description: pan of the partner
        keyContacts:
          type: array
          items:
            $ref: '#/components/schemas/BusinessContact'
        bankAccount:
          $ref: '#/components/schemas/BankAccount'
    PartnerPrivateData:
      type: object
      required:
        - id
        - comissionType       
      properties:
        id:
          type: string
          format: uuid
          readOnly: true         
        comissionType:
          type: string
          enum:
            - direct
            - slabWise
            - fixed
            - transactionVolume
            - customerVolume
    BusinessAddress:
      type: object
      required:
        - id
        - unitNumber
        - streetName
        - district
        - pinCode
        - state
        - country
        - stdCode
      properties:
        id:
          type: string
          format: uuid
          readOnly: true      
        unitNumber:
          type: string        
        streetName:
          type: string
        area:
          type: string
        cityOrVillage:
          type: string        
        postOffice:
          type: string
        district:
          type: string
        pinCode:
          type: integer
          format: int32     
        state:
          type: string
        stdCode:
          type: integer
          format: int32     
        landmark:
          type: string        
        country:
          type: string                 
    Address:
      type: object
      required:
        - id
        - houseNumber
        - streetName
        - district
        - pinCode
        - state
        - country
        - stdCode
      properties:
        id:
          type: string
          format: uuid
          readOnly: true      
        houseNumber:
          type: string        
        streetName:
          type: string
        area:
          type: string
        cityOrVillage:
          type: string        
        postOffice:
          type: string
        district:
          type: string
        pinCode:
          type: integer
          format: int32     
        state:
          type: string
        stdCode:
          type: integer
          format: int32     
        landmark:
          type: string        
        country:
          type: string
    Contact:
        type: object
        required:
          - id
          - name
        properties:
          id:
            type: string
            format: uuid
            readOnly: true      
          extId:
            type: string                
          name:
            $ref: '#/components/schemas/Name'
          dob:
            type: string
            format: date
          gender:
            type: string
            description: contact gender, supported values are Male(m), Female(f) and Others(o)
            enum:
              - m
              - f
              - o
    PersonalContact:
      allOf:
        - $ref: '#/components/schemas/Contact'
        - type: object
          required:
          - relation
          - phone
          properties:
            relation:
              type: string
              description: relation with the person with whom this contact is associated - spouse, parent, child, sibling etc
            email:
              type: string
              format: email
            phone:
              $ref: '#/components/schemas/Phone'
            address:
                $ref: '#/components/schemas/Address'                                        
    BusinessContact:
      allOf:
        - $ref: '#/components/schemas/Contact'
        - type: object
          required:
          - role
          - type
          - isPrimary
          - email
          - phone
          properties:
            role:
              type: string
              description: role in the business organization
            type:
              type: string
              description: decision maker, influencer, accounts, ops
            escalationLevel:
              type: integer
              format: int32
              description: escalation level, starting from 1
            isPrimary:
              type: boolean
              default: false
              description: if the contact is a primary contact
            email:
              type: string
              format: email
            phone:
              $ref: '#/components/schemas/BusinessPhone'
            address:
                $ref: '#/components/schemas/BusinessAddress'                                                         
    Name:
      type: object
      required:
        - id
        - first
        - last
      properties:
        id:
          type: string
          format: uuid
          readOnly: true      
        first:
          type: string        
        middle:
          type: string
        last:
          type: string
    BusinessPhone:
      type: object
      required:
        - id 
        - mobile
        - landline
      properties:
        id:
          type: string
          format: uuid
          readOnly: true      
        mobile:
          type: string        
        alternateMobile:
          type: string
        landline:
          type: string
        whatsapp:
          type: string
        boardNumber:
          type: string
        extension:
          type: string          
    Phone:
      type: object
      required:
        - id
        - mobile
      properties:
        id:
          type: string
          format: uuid
          readOnly: true      
        mobile:
          type: string        
        alternateMobile:
          type: string
        landline:
          type: string
        whatsapp:
          type: string
    BankAccount:
      type: object
      required:
        - id
        - accountNumber
        - ifsc
        - accountName
        - bankName
        - branchName
      properties:
        id:
          type: string
          format: uuid
          readOnly: true      
        accountNumber:
          type: string      
        ifsc:
          type: string
        accountName:
          type: string
        bankName:
          type: string
        branchName:
          type: string       
    BranchPrivateData:
      type: object
      required:
        - id
        - incentiveType
        - bullionMultilipier       
      properties:
        id:
          type: string
          format: uuid
          readOnly: true    
        incentiveType:
          type: string
          enum:
            - direct
            - slabWise
            - fixed
            - transactionVolume
            - customerVolume
          description: type of commission                                          
        bullionMultilipier:
          type: array
          items:
            $ref: '#/components/schemas/BullionMultiplier'
          description: list of branch level bullion multipliers for buy and sell rates
    Bullion:
      type: object
      required:
        - id
        - bullionName
        - purity
        - status
      properties:
        id:
          type: string
          format: uuid
          readOnly: true            
        bullionName:
          type: string
          enum:
            - Gold
            - Silver
            - Platinum
        bullionShortName:
          type: string            
        purity:
         $ref: '#/components/schemas/Purity'
        isBaseBullion:
          type: boolean
        status:
          type: string
          enum:
            - available
            - unAvailable    
    BullionInputRate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        createdAt: 
          readOnly: true
          type: string
          format: date-time
          description: Date and time at which this rate was created.                   
        updatedAt:      
          readOnly: true           
          type: string
          format: date-time
          description: Date and time at which this rate was last modified.
        bullion:
          $ref: '#/components/schemas/Bullion'
        rateInrPerGm:
          type: number
          format: float
        rateType:
          type: string
          enum:
            - buy
            - sipBuy
            - sell
            - emergencySell            
        
    BullionRate:
      type: object
      required:
        - id
        - bullion
        - rateInrPerGm
        - rateType
        - validUntil
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        bullion:
          $ref: '#/components/schemas/Bullion'
        rateInrPerGm:
          type: number
          format: float
        rateType:
          type: string
          enum:
            - buy
            - sell
            - emergencySell
            - sipBuy            
        validUntil:
          type: string
          format: date-time
          description: validity of this rate                   
    BullionMultiplier:
      type: object
      required:
        - id
        - availableBullion
        - multiplierType
        - multiplierValue
      properties:
        id:
          type: string
          format: uuid
          readOnly: true      
        availableBullion:
            $ref: '#/components/schemas/Bullion'
        multiplierType:
          type: string
          enum:
            - buy
            - sell
            - sipBuy
            - emergencySell
          description: multiplier type             
        multiplierValue:
          type: number
          format: float
          description: multiplier value for the given multiplier type
    AgentPrivateData:
      type: object
      required:
        - id
        - incentiveType       
      properties:
        id:
          type: string
          format: uuid
          readOnly: true         
        incentiveType:
          type: string
          enum:
            - direct
            - slabWise
            - fixed
            - transactionVolume
            - customerVolume             
    CustomerPrivateData:
      type: object
      required:
        - id    
      properties:
        id:
          type: string
          format: uuid
          readOnly: true      
        interestedInBullions:
          type: array
          items:
            type: string
            format: uuid
            description: unique ids of bullions in the system
        customerSegment:
          type: string
        savingObjective:
          type: string
        educationLevel:
          type: string
          enum:
            - none
            - fifth
            - tenth
            - twelfth
            - graduate
            - postGraduate
            - doctorate
        annualIncomeInr:
          type: integer
          format: int32
        religion:
          type: string
        isPrimayEarner:
          type: boolean
    Order:
      type: object
      required:
        - id
        - partner
        - customer
        - agent
        - bullion
        - bullionRate
        - weightInGm
        - orderType
        - orderValueInr
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        partner:
          $ref: '#/components/schemas/Name-ID'
        customer:
          $ref: '#/components/schemas/Name-ID'
        agent:
          $ref: '#/components/schemas/Name-ID'    
        bullion:
          $ref: '#/components/schemas/Name-ID'          
        bullionRate:
          $ref: '#/components/schemas/BullionRate'      
        weightInGm:
          type: number
          format: float
        taxRates:  
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        orderTotalValueInr:
          type: number
          format: float
        requestDate:
          type: string
          format: date-time
          readOnly: true          
          description: order initiated Date
        completionDate:
          type: string
          format: date-time
          readOnly: true             
          description: order completion Date
        status:
          type: string
          readOnly: true             
          enum:
            - new
            - inprogress
            - complete
            - cancelled
        orderType:
          type: string
          readOnly: true             
          enum:
            - buy
            - sell
            - emergencySell
            - coin
            - jeweler
            - sip            
        buyType:
          type: string
          enum:
            - FixedWeight
            - FixedAmount
    DetailedOrder:
      type: object
      required:
        - id
        - partner
        - customer
        - agent
        - bullion
        - bullionRate
        - weightInGm
        - orderType
        - orderValueInr
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        partner:
          $ref: '#/components/schemas/Name-ID'
        customer:
          $ref: '#/components/schemas/Name-ID'
        agent:
          $ref: '#/components/schemas/Name-ID'    
        bullion:
          $ref: '#/components/schemas/Name-ID'          
        bullionRate:
          $ref: '#/components/schemas/BullionRate'      
        weightInGm:
          type: number
          format: float
        taxRates:  
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        orderTotalValueInr:
          type: number
          format: float
        requestDate:
          type: string
          format: date-time
          readOnly: true          
          description: order initiated Date
        completionDate:
          type: string
          format: date-time
          readOnly: true             
          description: order completion Date
        status:
          type: string
          readOnly: true             
          enum:
            - new
            - inprogress
            - complete
            - cancelled
        orderType:
          type: string
          readOnly: true             
          enum:
            - buy
            - sell
            - emergencySell
            - coin
            - jeweler
            - sip            
        buyType:
          type: string
          enum:
            - FixedWeight
            - FixedAmount
        sip:
             $ref: '#/components/schemas/Sip'
        coins:
          type: array
          items:
            $ref: '#/components/schemas/CoinOrderItem'
        shipment:
             $ref: '#/components/schemas/Shipment'
        jeweler:
             $ref: '#/components/schemas/Jeweler'
    CoinOrderItem:
      type: object
      required:
        - coinSpecification
        - quantity
      properties:
        coinSpecification:
          $ref:  '#/components/schemas/CoinSpecification'
        quantity:
          type: number
          format: int32        
    LightBusinessContact:
      allOf:
        - $ref: '#/components/schemas/Contact'
        - type: object
          required:
          - email
          - phone
          properties:
            email:
              type: string
              format: email
            phone:
              $ref: '#/components/schemas/BusinessPhone'
            address:
                $ref: '#/components/schemas/BusinessAddress'
    Jeweler:
      type: object
      required:
        - id
        - name
        - communicationAddress
        - pan
        - ownerContact
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: internal jeweler id                                      
        name:
          type: string
          description: business/legal name of the jewelery business
        communicationAddress:
            $ref: '#/components/schemas/BusinessAddress'
        email:
          type: string
          format: email
        phone:
          $ref: '#/components/schemas/BusinessPhone'
        gstNumber:
          type: string
          description: gst number of the jeweler
        pan:
          type: string
          description: pan of the jeweler
        bankAccount:
          $ref: '#/components/schemas/BankAccount'
        location:
          type: string
          description: lat,long comma separated          
        ownerContact:
          $ref: '#/components/schemas/LightBusinessContact'
          description: contact details of the business owner            
    Shipment:
      type: object
      required:
        - id
        - shippingAddress
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        orderId:
          type: string
          format: uuid
          readOnly: true
        trackingId:
          type: string
          description: shipment tracking id provided by the shipping partner
          readOnly: true          
        shippingPartnerName:
          type: string
          readOnly: true          
        shippingAddress:
            $ref: '#/components/schemas/Address'
        shippingCharges:
          type: number
          format: float                                
        status:
          type: string
          readOnly: true          
          enum:
            - notShipped
            - inTransit
            - delivered
            - returned
            - cancelled    
        shippingStartDate:
          type: string
          format: date
          readOnly: true          
          description: shipping order create date
        deliveryDate:
          type: string
          format: date
          readOnly: true          
          description: expected or actual delivery date
        statusUpdates:
          type: array        
          items:
            $ref: '#/components/schemas/EventUpdates'
          description: shipping event updates
          readOnly: true
          example:
            2017-07-21T17:32:28Z: shipped
            2017-07-21T19:32:28Z: on its way for delivery
    Sip:
      type: object
      required:
        - id
        - sipName        
        - bullion
        - bullionRateId
        - startDate
        - frequency
        - durationInMths
        - numberofInstallments
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sipName:
          type: string
          description: SIP name
        bullion:
          $ref: '#/components/schemas/Bullion'   
        status:
          type: string
          readOnly: true
          enum:
            - new
            - inprogress
            - complete
            - cancelled      
        sipInstallmentAmtInr:
          type: number
          format: float
        targetQuantityInGm:
          type: number
          format: float        
        startDate:
          type: string
          format: date
          description: SIP start Date
        paymentPeriodInMths:
          type: number
          format: int32
          description: SIP completion date          
        frequency:
          type: string
          enum:
            - daily
            - weekly
            - fortnightly
            - monthly
        numberofInstallments:
          type: integer
          format: int32
          readOnly: true                 
        sipInstallments:
          type: array
          items:
            $ref: '#/components/schemas/SipInstallment'
    SipInstallment:
      type: object
      required:
        - id
        - scheduledDate
        - installmentNumber
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        orderId:
          type: string
          format: uuid
          readOnly: true
          description: uniuqe id of the order which was executed to fulfil this SIP installement
        installmentNumber:
          type: integer
          format: int32                
        status:
          type: string
          readOnly: true
          enum:
            - pending
            - scheduled
            - complete
            - cancelled
        scheduledDate:
          type: string
          format: date
    CoinSpecification:
      type: object
      required:
        - id
        - name
        - bullionDetails
        - weightInGm
        - makingChargesInr
        - design
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        bullionDetails:
          $ref:  '#/components/schemas/Bullion'
        design:
          type: string
          enum:
            - religious
            - plain
        name:
          type: string
          format: uuid  
        weightInGm:
          type: number
          format: float
        makingChargesInr:
          type: number
          format: float                         
        image:
          type: string
          format: uri                                                                             
    TaxRate:
      type: object
      required:
        - taxName
        - taxCode
        - taxRatePercent     
      properties:
        taxName:
          type: string 
        taxCode:
          type: string 
        taxRatePercent:
          type: number
          format: float     
        taxAmount:
          readOnly: true
          type: number
          format: float                                 
    Name-ID:
          type: object
          required:
            - name
            - id                       
          properties:
            name:
              type: string               
            id:
              type: string
    EventUpdates:
      type: object
      required:
        - eventTimestamp
        - eventDetails           
      properties:
        eventTimestamp:
          type: string
          format: date-time
        eventDetails:
          type: string        
    BullionBank:
      type: object
      required:
        - id
        - name
        - type
        - phone
        - communicationAddress
        - registeredAddress
        - gst
        - pan
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: internal bullion bank id                                      
        name:
          type: string
          description: business/legal name of the bullion bank
        type:
          type: string
          enum:
            - bullionBank
            - bullionBroker
            - jeweler       
        phone:
            $ref: '#/components/schemas/BusinessPhone'
        communicationAddress:
            $ref: '#/components/schemas/BusinessAddress'
        registeredAddress:
            $ref: '#/components/schemas/BusinessAddress'
        gst:
          type: string
          description: gst of the bullion bank
        pan:
          type: string
          description: pan of the bullion bank
        cin:
          type: string
          description: Company Identification Number of the bullion bank          
        keyContacts:
          type: array
          items:
            $ref: '#/components/schemas/BusinessContact'
          description: Key contacts of the bullion bank    
        bankAccount:
          $ref: '#/components/schemas/BankAccount'                    
    Vault:
      type: object
      required:
        - id
        - name
        - type
        - communicationAddress
        - registeredAddress
        - isSingleAddress
        - accounts
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: internal id of vaulting company                                      
        name:
          type: string
          description: business/legal name of the vaulting company
        email:
          type: string
          format: email       
          description: email of the vaulting company             
        phone:
            $ref: '#/components/schemas/BusinessPhone'
            description: phone of the vaulting company                  
        communicationAddress:
            $ref: '#/components/schemas/BusinessAddress'
            description: address of the vaulting company                 
        gst:
          type: string
          description: gst of the bullion bank
        pan:
          type: string
          description: pan of the bullion bank      
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/VaultAccount'
          description: vault accounts
    VaultAccount:
      type: object
      required:
        - id
        - number
        - name
        - type
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: internal vault account id   
        number:
          type: string
          description: vault account number                                             
        name:
          type: string
          description: vault account name   
        type:
          type: string
          enum:
            - trustee
            - workingCapital   
          description: vault account type              
    InventoryItem:
      type: object
      required:
        - id
        - name
        - sku
        - bullionId
        - weightInGm
        - type
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: internal inventory item id                                              
        name:
          type: string
          description: unique name of an inventory item. It is unique for each item.
          example:
            Gold 24Kt-999 20 gm coin MMT
        sku:
          type: string
          description: unique stock keeping unit (sku) of an inventory item. It is unique for each item.
          example:
            G9950020GMCNMMTC - for Gold (G) 995 purity (995) 20 gm weight (0020GM) coin (CN) from MMTC refiner (MMTC)                
        bullionId:
          type: string
          format: uuid
          description: Unique ID of (bullion + purity) of the items
        weightInGm:
          type: number
          format: float 
        refiner:
          type: string
          description: unique stock keeping unit (sku) of an inventory item. It is unique for each item.
        type:
          type: string
          enum:
            - coin
            - bar
            - chain   
          description: inventory item type  
    Purity:
          type: object
          required:
            - displayValue
            - value           
          properties:
            displayValue:
              type: string
            value:
              type: string                                                                                                                                                                                                 
    Error:
          type: object
          required:
            - code
            - message           
          properties:
            code:
              type: string
            message:
              type: string