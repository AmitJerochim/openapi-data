penapi: 3.0.0
info:
  description: |
    API permettant le fonctionnement du serveur du site HolyDriver - www.holy-driver.com
  version: "1.0.0"
  title: Holy Driver
  contact:
    email: benjamin.sureau@epitech.eu
    name: Chef de projet - HolyDriver
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HolyDriver/HolyDriver/1.0.0
  - url: "http://www.holy-driver.tools:3006/api"
tags:
  - name: Users
    description: Table de stockage des infos des utilisateurs
  - name: Products
    description: Produits achetables
  - name: Categories
    description: Toutes les catégories d'articles
  - name: Stores
    description: Drive auxquels on peut passer commande
  - name: Badges
    description: Badges qu'il est possible d'obtenir
  - name: Cart
    description: Panier des utilisateurs
  - name: ProductHistory
    description: Historique des variations de prix des articles
  - name: OrderHistory
    description: Historique des commandes passées par les utilisateurs
  - name: Orders
    description: Contenu d'une commande
  - name: Preferences
    description: Préférences de drive et de distance max d'un utilisateur
paths:
  /stores:
    post:
      tags:
        - Stores
      summary: Ajouter un drive
      operationId: addStore
      responses:
        '405':
          description: Invalid input
      security:
        - Sécurité: []
      requestBody:
        $ref: '#/components/requestBodies/Store'
    get:
      tags:
        - Stores
      summary: Récupérer tous les drives
      operationId: getAllDrives
      responses:
        '200':
          description: OK
        '401':
          description: Authentification erronnée
      security:
        - Sécurité: []
  /users:
    post:
      tags:
        - Users
      summary: Ajouter un drive
      operationId: addUser
      responses:
        '405':
          description: Invalid input
      security:
        - Sécurité: []
      requestBody:
        $ref: '#/components/requestBodies/User'
    get:
      tags:
        - Users
      summary: Récupérer tous les drives
      operationId: getAllUsers
      responses:
        '200':
          description: OK
        '401':
          description: Authentification erronnée
      security:
        - Sécurité: []
  /products:
    post:
      tags:
        - Products
      summary: Ajouter un drive
      operationId: addProduct
      responses:
        '405':
          description: Invalid input
      security:
        - Sécurité: []
      requestBody:
        $ref: '#/components/requestBodies/Product'
    get:
      tags:
        - Products
      summary: Récupérer tous les drives
      operationId: getAllProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Product'
              example:
                - _key: test@test.ai
                  _id: User/test@test.ai
                  _rev: _a-qTyHK---
                  email: test@test.ai
                  password: test
                  createdDate: 1580733982489
                  updatedDate: 1580733982489
                  isActive: true
                - _key: dd@dd.com
                  _id: User/dd@dd.com
                  _rev: _a-qUX3a---
                  email: dd@dd.com
                  password: dd
                  createdDate: 1580733982489
                  updatedDate: 1580733982489
                  isActive: true
                
        '401':
          description: Authentification erronnée
      security:
        - Sécurité: []
  /orders:
    post:
      tags:
        - Orders
      summary: Ajouter une commande
      operationId: addOrder
      responses:
        '405':
          description: Invalid input
      security:
        - Sécurité: []
      requestBody:
        $ref: '#/components/requestBodies/Order'
    get:
      tags:
        - Users
      summary: Récupérer toutes les commandes
      operationId: getAllOrders
      responses:
        '200':
          description: OK
        '401':
          description: Authentification erronnée
      security:
        - Sécurité: []
  /badge:
    post:
      tags:
        - Badges
      summary: Ajouter un badge
      operationId: addBadge
      responses:
        '405':
          description: Invalid input
      security:
        - Sécurité: []
      requestBody:
        $ref: '#/components/requestBodies/Badge'
    get:
      tags:
        - Badges
      summary: Récupérer tous les badges
      operationId: getAllBadges
      responses:
        '200':
          description: OK
        '401':
          description: Authentification erronnée
      security:
        - Sécurité: []
  /categories:
    post:
      tags:
        - Categories
      summary: Ajouter un badge
      operationId: addCategory
      responses:
        '405':
          description: Invalid input
      security:
        - Sécurité: []
      requestBody:
        $ref: '#/components/requestBodies/Category'
    get:
      tags:
        - Categories
      summary: Récupérer toutes les catégories
      operationId: getAllCategories
      responses:
        '200':
          description: OK
        '401':
          description: Authentification erronnée
      security:
        - Sécurité: []
  '/stores/{storeId}':
    get:
      tags:
        - Stores
      summary: Info d'un magasin
      description: Récupérer les informations d'un magasin depuis son ID
      operationId: findStoreByID
      parameters:
        - name: storeId
          in: path
          description: ID du drive à récupérer
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Store'
              example:
                _key: '258596'
                name: Carrefour
                longitude: 12.2334
                latitude: 23.133443
                address: 1bis rue de Carrefour
        '404':
          description: L'ID n'existe pas
      security:
        - Sécurité: []
components:
  schemas:
    Store:
      type: object
      properties:
        name:
          type: string
          example: Casino
        longitude:
          type: number
          example: 12.3341
        latitude:
          type: number
          example: -1.23234
        address:
          type: string
          example: 12 rue de la Gloire
    Preference:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    OrderHistory:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    Product:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    ProductHistory:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    ShoppingCart:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Badge:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Category:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Store:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Store'
      description: Drive à ajouter à l'application
      required: true
    Category:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
      description: Catégorie à ajouter à l'application
      required: true  
    Badge:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Badge'
      description: Badge à ajouter à l'application
      required: true
    Order:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
      description: Commande à ajouter à l'application
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: Utilisateur à ajouter à l'application
      required: true
    Product:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
      description: Produit à ajouter à l'application
      required: true
  securitySchemes:
    Sécurité:
      type: http
      scheme: basic