openapi: 3.0.1
info:
  title: Swagger for video reumes project (VL for short)
  description: 'Description of endpoints for VL backend'
  termsOfService: http://example.com/
  contact:
    email: ruslnnmzv@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "0.1.5"
servers:
- url: https://api.vlme.io
tags:
- name: users
  description: APIs related to users (registration, auth, settings, profile, )
  externalDocs:
    description: Find out more
    url: http://users-placeholder.io
- name: uploads
  description: APIs related to media uploads (mainly video uploads)
- name: feed
  description: APIs related to main feed (lists of videos for users)
paths:
  /users:
    post:
      tags:
      - users
      summary: Register new user (works as auth when user already exists)
      operationId: createUser
      requestBody:
        description: User info that needs to be present upon registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      parameters: 
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true
      responses:
        201:
          description: Successfull request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Auth'
        400:
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
      - users
      summary: Update profile details
      operationId: updateUser
      requestBody:
        description: User object with fields that need to be updated (not included field won't be updated)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      parameters: 
      - name: 'Authorization: Bearer'
        description: User access token
        in: header
        schema:
          type: string
        required: true
      responses:
        200:
          description: Successfull update
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
      - users
      summary: Get user profile
      operationId: getUser
      parameters: 
      - name: 'Authorization: Bearer'
        description: User access token
        in: header
        schema:
          type: string
        required: true
      - name: userId
        description: UserId to get profile for
        in: path
        schema:
          type: string
        required: true
      responses:
        200:
          description: Successfull update
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      
  /users/{userId}/videos:
    get:
      tags:
      - users
      summary: Load videos from user profile
      operationId: getUserVideos
      parameters:
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true    
      - name: count
        description: Amount of videos to return
        schema:
          type: integer
          format: int64
        in: query
      - name: offset
        description: offset from which to get videos
        schema:
          type: integer
          format: int64
        in: query
      - name: userId
        description: user's whos videos to load 
        schema:
          type: integer
          format: int64
        in: path
        required: true
      responses:
        200:
          description: Successful get videos response
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Feed'
        400:
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'        
  
  /users/{userId}/report:
    post:
      tags:
      - users
      summary: Report user for inappropriate behavior
      operationId: reportUser
      requestBody:
        description: Request payload to report user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportRequest'      
      parameters:
      - name: 'Authorization: Bearer' 
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true         
      - name: userId
        description: userId to report
        in: path
        schema:
          type: integer
          format: int64
        required: true
      responses:
        200:
          description: Success
          content: {}
        400:
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/auth:
    get:
      tags:
      - users
      summary: Authenticates user through identity provider 
      operationId: authUser
      parameters:
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true      
      responses:
        200:
          description: Successful auth
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Auth'
        400:
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/settings:
    get:
      tags:
      - users
      summary:  get user settings
      operationId: getSettings
      parameters:
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true 
      responses:
        200:
          description: Successful auth
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Settings'
        400:
          description: Invalid status value
          content: {}
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
      - users
      summary: update user settings
      operationId: updateSettings
      parameters:
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true 
      requestBody:
        description: settings to update, not present settings won't be updated
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Settings'
      responses:
        200:
          description: Successfull update
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Settings'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'      
  /users/linkDevice:
    post:
      tags:
      - users
      summary: link device for push notifications
      operationId: linkDevice
      parameters:
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true       
      requestBody:
        description: device to link
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Device'
      responses:
        200:
          description: Successfull link
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Device'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - users
      summary: unlink device from push notifications
      operationId: unlinkDevice
      parameters: 
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true
      - name: deviceId
        description: DeviceId to unlink
        in: query
        schema:
          type: string
      responses:
        200:
          description: Successfull unlink
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # /uploads:
  #   post:
  #     tags:
  #     - uploads
  #     summary: upload file
  #     operationId: uploadFile
  #     parameters:
  #     - name: 'Authorization: Bearer'
  #       description: Token from identity provider
  #       in: header
  #       schema:
  #         type: string
  #       required: true 
  #     requestBody:
  #       content:
  #         multipart/form-data:
  #           schema:
  #             properties:
  #               additionalMetadata:
  #                 type: object
  #                 description: Additional data to pass to server assosiated with file
  #                 $ref: '#/components/schemas/Video'
  #               file:
  #                 type: string
  #                 description: file to upload
  #                 format: binary
  #     responses:
  #       200:
  #         description: Successfull upload
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Video'
  #       400:
  #         description: Invalid input
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'
  #       500:
  #         description: Internal error happened
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ErrorResponse'      
  /mainVideo:
    post:
      tags:
      - uploads
      summary: sets mainVideo for user
      operationId: postMainVideo
      requestBody:
        description: mainVideo to link. You need to save video to aws first!
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MainVideoRequest'      
      parameters:
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true 
      responses:
        200:
          description: Successfully linked media
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainVideoResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'      
      
  /putfileurl:
    post:
      tags:
      - uploads
      summary: get put url to upload object directly to aws. this endpoint will be used for any file uploads. Returns unique filename and url to upload. Active for time specified
      operationId: createPutUrl
      parameters:
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true 
      - name: checkSum
        description: base64.StdEncoding of md5 checksum of file to upload
        in: query
        schema:
          type: string
        required: true
      - name: duration
        description: time in seconds for how long the url should be active. default is 30 min
        in: query
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successfull url creaton
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutUrlRequest'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  /feed:
    get:
      tags:
      - feed
      summary: feed of video files/profiles
      operationId: getFeed
      parameters: 
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true 
      - name: count
        description: count from which to get feed
        in: query
        schema:
          type: integer
          format: int64
      - name: offset
        description: offset from which to get feed
        in: query
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successfull feed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connections'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'       
  /connections:
    post:
      tags:
      - connections
      summary: create connection request to the user
      operationId: createConnection
      parameters:
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true 
      requestBody:
        description: body for the connection request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionRequest'
      responses:
        200:
          description: Successfull connection request
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
      - connections
      summary: get users connections
      operationId: getConnections
      parameters:
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true
      - name: type
        description: type of connections
        in: query
        schema:
          type: string
          enum:
            - incomming
            - accepted
      - name: count
        description: count of connections
        in: query
        schema:
          type: integer
          format: int64
      - name: offset
        description: offset of connections
        in: query
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successfull connection request
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/Connections'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - connections
      summary: delete connection with user or delete from incoming list
      operationId: deleteConnection
      parameters:
      - name: 'Authorization: Bearer'
        description: Token from identity provider
        in: header
        schema:
          type: string
        required: true
      - name: userId
        description: userId to delete connection with 
        in: query
        schema:
          type: integer
          format: int64
        required: true
      responses:
        200:
          description: Successfully deleted connection
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500: 
          description: Internal error happened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'      
      
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        title:
          type: string
        country:
          type: string
        github:
          type: string
        dribble:
          type: string
        website:
          type: string
        email:
          type: string
        totalVideos:
          type: integer
          format: int64
          description: total amout of videos uploaded by user
        mainVideo:  
          type: object
          $ref: '#/components/schemas/MainVideo'
        videoLinks:
          type: array
          description: array of links of videos uploaded by user, capped at 15
          items:
            type: object
            $ref: '#/components/schemas/Video'
        relation:
          type: string
          enum:
          - connected
          - pending
          - connect        
    Link:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
    Setting:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    Settings:
      type: array
      description: array of key value settings
      items:
        type: object
        $ref: '#/components/schemas/Setting'
    ShortUser:
      type: object
      description: short user info
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        mainVideo:
          type: object
          $ref: '#/components/schemas/MainVideo'          
        relation:
          type: string
          enum:
          - connected
          - pending
          - connect
          - self
    Connection:
      type: object
      description: Connection object
      properties:
        user:
          type: object
          $ref: '#/components/schemas/User'
        created_at:
          type: string
    Connections:
      type: array
      description: List of users connections
      items:
        type: object
        $ref: '#/components/schemas/Connection'
    MainVideo:
      type: object
      description: main videoo of profile
      properties:
        id:
          type: integer
          format: int64
        url:
          type: string
        thumbnail:
          type: string 
    MainVideoRequest:
      type: object
      description: main video request to post
      properties:
        fileName:
          type: string
        url:
          type: string
        thumbnail:
          type: object
          $ref: '#/components/schemas/Thumbnail'
    MainVideoResponse:
      type: object
      description: response with video_id
      properties:
        id:
          type: integer
          format: int64
    Thumbnail:
      type: object
      description: thumbnail of video
      properties:
        id:
          type: integer
          format: int64
        url:
          type: string
    Video:
      type: object
      description: video to be shown in feed/profile
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        url:
          type: string
        thumbnail:
          type: string
        link:
          type: string
        tags:
          type: string
        from:
          type: string
        to:
          type: string
        userId:
          type: integer
          format: int64
    Feed:
      type: array
      description: feed of videos/profiles to demonstrate to user
      items:
        type: object
        $ref: '#/components/schemas/Video'
    Auth:
      type: object
      properties:
        authToken:
          type: string
        refreshToken:
          type: string
    Device:
      type: object
      properties:
        deviceId:
          type: string
        platform:
          type: string
        system:
          type: string
    Error:
      type: object
      description: error object
      properties:
        code:
          type: integer
          format: int64
        description:
          type: string
    ErrorResponse:
      type: array
      description: array of errors
      items:
        type: object
        $ref: '#/components/schemas/Error'
    ConnectionRequest:
      type: object
      description: connection request to userId
      properties:
        userId:
          type: integer
          format: int64
    PutUrlRequest:
      type: object
      description: object that contains information regarding put object created
      properties:
        put_url:
          type: string
        read_url:
          type: string
        fileName:
          type: string
    # MediaRequest:
    #   type: object
    #   description: media object to link to the profile
    #   properties:
    #     url:
    #       type: string
    #     fileName:
    #       type: string
    #     type:
    #       type: string
    #       enum: 
    #       - video
    #       - thumbnail
    #       - mainVideo
  
    ReportRequest:
      type: object
      description: request to report user
      properties:
        reason:
          type: string
          enum:
          - abuse
          - content
          - spam
          - other
        text:
          type: string
