{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "RodeUnResto Member API",
    "description" : "This is the API intended to communicate with customer mobile apps. Please check the docs link below for additional information.",
    "contact" : {
      "email" : "benjamin@rodeunresto.com"
    },
    "version" : "1.0.0-beta8"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/BenMorel/RodeUnResto-Member/1.0.0-beta8",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://rodeunresto.com/api/member/v1",
    "description" : "RodeUnResto Live API"
  } ],
  "paths" : {
    "/auth/login" : {
      "post" : {
        "summary" : "Logs in using an email and password",
        "operationId" : "login",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Authentication successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "409" : {
            "description" : "The email or password is invalid. The response will contain an error message that can be displayed to the user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout" : {
      "post" : {
        "summary" : "Logs the user out (revokes the token). Pass the token through the Authorization header as usual.",
        "operationId" : "logout",
        "responses" : {
          "200" : {
            "description" : "Returns true if successfully revoked, false if unknown / already revoked.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/auth/signup" : {
      "post" : {
        "summary" : "Creates an account.",
        "operationId" : "signup",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SignupRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Signup successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            }
          },
          "409" : {
            "description" : "The account cannot be created. The response will contain an error message that can be displayed to the user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contact" : {
      "post" : {
        "summary" : "Sends a message to the team.",
        "operationId" : "contact",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactMessage"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Message sent."
          },
          "409" : {
            "description" : "The phone number is not valid. The response will contain an error message that can be displayed to the user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cuisines" : {
      "get" : {
        "summary" : "Lists available cuisines that can be used to filter restaurants.",
        "operationId" : "getCuisines",
        "responses" : {
          "200" : {
            "description" : "List of cuisines.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CuisineWithRestaurantCount"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/members/me" : {
      "get" : {
        "summary" : "Gets logged in member information.",
        "operationId" : "me",
        "responses" : {
          "200" : {
            "description" : "The member info.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberDetail"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "summary" : "Updates logged in member information.",
        "operationId" : "patchMe",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateMemberRequest"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Update successful."
          },
          "409" : {
            "description" : "The email address already exists, or the phone number is invalid. The response will contain an error message that can be displayed to the user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/members/me/stars" : {
      "get" : {
        "summary" : "Gets the favourite restaurants of the logged in member.",
        "operationId" : "getMeStars",
        "responses" : {
          "200" : {
            "description" : "The favourite restaurants.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Restaurant"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/reservations" : {
      "get" : {
        "summary" : "Returns the member's reservations, latest first.",
        "operationId" : "getReservations",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page of results to return.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "minimum" : 1
          },
          "example" : 2
        } ],
        "responses" : {
          "200" : {
            "description" : "Page of reservations.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReservationPage"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "summary" : "Makes a reservation.",
        "operationId" : "makeReservation",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReservationRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The reservation has been successfully made.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Reservation"
                }
              }
            }
          },
          "409" : {
            "description" : "The reservation cannot be placed. The response will contain an error message that can be displayed to the user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/reservations/{reservationId}" : {
      "get" : {
        "summary" : "Gets the detail of a reservation.",
        "operationId" : "getReservation",
        "parameters" : [ {
          "name" : "reservationId",
          "in" : "path",
          "description" : "ID of the reservation.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        } ],
        "responses" : {
          "200" : {
            "description" : "The reservation is returned on success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Reservation"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "summary" : "Cancels the reservation.",
        "operationId" : "cancelReservation",
        "parameters" : [ {
          "name" : "reservationId",
          "in" : "path",
          "description" : "ID of the reservation.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        } ],
        "responses" : {
          "200" : {
            "description" : "The cancelled reservation is returned on success.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Reservation"
                }
              }
            }
          },
          "409" : {
            "description" : "The reservation cannot be cancelled. The response will contain an error message that can be displayed to the user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/restaurants/{restaurantId}" : {
      "get" : {
        "summary" : "Get restaurant details.",
        "operationId" : "getRestaurant",
        "parameters" : [ {
          "name" : "restaurantId",
          "in" : "path",
          "description" : "ID of the restaurant.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        } ],
        "responses" : {
          "200" : {
            "description" : "Restaurant details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestaurantDetail"
                }
              }
            }
          }
        }
      }
    },
    "/restaurants/{restaurantId}/star" : {
      "get" : {
        "summary" : "Checks if the restaurant is a favourite.",
        "operationId" : "checkStarRestaurant",
        "parameters" : [ {
          "name" : "restaurantId",
          "in" : "path",
          "description" : "ID of the restaurant.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        } ],
        "responses" : {
          "204" : {
            "description" : "The restaurant is a favourite."
          },
          "404" : {
            "description" : "The restaurant is not a favourite."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "summary" : "Adds the restaurant to favourites.",
        "operationId" : "starRestaurant",
        "parameters" : [ {
          "name" : "restaurantId",
          "in" : "path",
          "description" : "ID of the restaurant.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        } ],
        "responses" : {
          "204" : {
            "description" : "Success."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "summary" : "Removes the restaurant from favourites.",
        "operationId" : "unstarRestaurant",
        "parameters" : [ {
          "name" : "restaurantId",
          "in" : "path",
          "description" : "ID of the restaurant.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        } ],
        "responses" : {
          "204" : {
            "description" : "Success."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/restaurants/{restaurantId}/reviews" : {
      "get" : {
        "summary" : "Get restaurant reviews.",
        "operationId" : "getRestaurantReviews",
        "parameters" : [ {
          "name" : "restaurantId",
          "in" : "path",
          "description" : "ID of the restaurant.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page of results to return.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "minimum" : 1
          },
          "example" : 2
        } ],
        "responses" : {
          "200" : {
            "description" : "A page of reviews.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewPage"
                }
              }
            }
          }
        }
      }
    },
    "/restaurants/{restaurantId}/availability" : {
      "get" : {
        "summary" : "Check restaurant availability.",
        "operationId" : "checkAvailability",
        "parameters" : [ {
          "name" : "restaurantId",
          "in" : "path",
          "description" : "ID of the restaurant.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The date, in YYYY-MM-DD format.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "pattern" : "^\\d{4}-\\d{2}-\\d{2}$"
          },
          "example" : "2019-03-30"
        }, {
          "name" : "covers",
          "in" : "query",
          "description" : "The number of covers.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "minimum" : 1
          },
          "example" : 2
        }, {
          "name" : "dealId",
          "in" : "query",
          "description" : "The ID of an optional deal.",
          "required" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        } ],
        "responses" : {
          "200" : {
            "description" : "Restaurant availability on this date.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Availability"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/restaurants/search" : {
      "get" : {
        "summary" : "Search restaurants available for reservation.",
        "operationId" : "searchRestaurants",
        "parameters" : [ {
          "name" : "zoneId",
          "in" : "query",
          "description" : "The ID of the Zone the customer wants to search in.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        }, {
          "name" : "test",
          "in" : "query",
          "description" : "Set to true to only return demo restaurants. This may be useful to find restaurants to which test reservations can be sent.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          },
          "example" : true
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "A date for the reservation, in `YYYY-MM-DD` format. This parameter must be used together with `time`, ignored otherwise. Only restaurants with availability around this date and time will be returned.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "pattern" : "^\\d{4}-\\d{2}-\\d{2}$"
          },
          "example" : "2019-03-30"
        }, {
          "name" : "time",
          "in" : "query",
          "description" : "A time for the reservation, in `HH:MM` format. `MM` can only be `00` or `30`. This parameter must be used together with `date`, ignored otherwise. Only restaurants with availability around this date and time will be returned.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "pattern" : "^\\d{2}:\\d{2}$"
          },
          "example" : "19:30"
        }, {
          "name" : "covers",
          "in" : "query",
          "description" : "A number of covers (people attending the reservation). This is only relevant if `date` and `time` are set, and ignored otherwise. Only restaurants with enough availability will be returned.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "minimum" : 1
          },
          "example" : 2
        }, {
          "name" : "cuisineIds[]",
          "in" : "query",
          "description" : "IDs of cuisines to restrict the search to.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "example" : 123
        }, {
          "name" : "dealsOnly",
          "in" : "query",
          "description" : "Whether the search should only return restaurants with available deals.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          },
          "example" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "List of restaurants found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reviews" : {
      "post" : {
        "summary" : "Creates a review.",
        "operationId" : "leaveReview",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReviewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The review has been successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Review"
                }
              }
            }
          },
          "409" : {
            "description" : "The review cannot be created. The response will contain an error message that can be displayed to the user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/zones" : {
      "get" : {
        "summary" : "Lists available zones",
        "description" : "Lists available zones that can be used to filter restaurants and deals.",
        "operationId" : "getZones",
        "responses" : {
          "200" : {
            "description" : "Recursive list of available zones.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ZoneWithChildren"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/zones/detect" : {
      "get" : {
        "summary" : "Detects the zone from the user position.",
        "operationId" : "detectZone",
        "parameters" : [ {
          "name" : "lat",
          "in" : "query",
          "description" : "The latitude of the user position.",
          "required" : true,
          "schema" : {
            "type" : "number",
            "maximum" : 90,
            "minimum" : -90
          },
          "example" : -20.9
        }, {
          "name" : "lng",
          "in" : "query",
          "description" : "The longitude of the user position.",
          "required" : true,
          "schema" : {
            "type" : "number",
            "maximum" : 180,
            "minimum" : -180
          },
          "example" : 55.5
        } ],
        "responses" : {
          "200" : {
            "description" : "The matching zone, or null if no zone matches the position.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "nullable" : true,
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Zone"
                  } ]
                }
              }
            }
          }
        }
      }
    },
    "/zones/{zoneId}/deals" : {
      "get" : {
        "summary" : "Get available deals in a zone.",
        "operationId" : "getDealsInZone",
        "parameters" : [ {
          "name" : "zoneId",
          "in" : "path",
          "description" : "ID of the zone to get deals in.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 123
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page of results to return.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "minimum" : 1
          },
          "example" : 2
        } ],
        "responses" : {
          "200" : {
            "description" : "List of available deals.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DealPage"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Address" : {
        "required" : [ "street", "streetExtra", "postcode", "city" ],
        "properties" : {
          "street" : {
            "description" : "The first line of the street address.",
            "type" : "string",
            "example" : "1 Avenue du Général de Gaulle"
          },
          "streetExtra" : {
            "description" : "The second line of the street address; null if the address has only one line.",
            "type" : "string",
            "example" : "Le Forum",
            "nullable" : true
          },
          "postcode" : {
            "description" : "The postcode.",
            "type" : "string",
            "example" : "97434"
          },
          "city" : {
            "description" : "The city.",
            "type" : "string",
            "example" : "Saint-Gilles les Bains"
          }
        },
        "type" : "object"
      },
      "AggregateRating" : {
        "required" : [ "reviewCount", "foodRating", "serviceRating", "valueRating", "averageRating" ],
        "properties" : {
          "reviewCount" : {
            "description" : "The number of reviews.",
            "type" : "integer",
            "minimum" : 0,
            "example" : 12
          },
          "foodRating" : {
            "description" : "The average food rating, from `0` to `5`.",
            "type" : "number",
            "format" : "float",
            "maximum" : 5,
            "minimum" : 0,
            "example" : 4.7
          },
          "serviceRating" : {
            "description" : "The average service rating, from `0` to `5`. Will always be `0` if `reviewCount` is `0`.",
            "type" : "number",
            "format" : "float",
            "maximum" : 5,
            "minimum" : 0,
            "example" : 3.7
          },
          "valueRating" : {
            "description" : "The average value for money rating, from `0` to `5`. Will always be `0` if `reviewCount` is `0`.",
            "type" : "number",
            "format" : "float",
            "maximum" : 5,
            "minimum" : 0,
            "example" : 3.9
          },
          "averageRating" : {
            "description" : "The average of the 3 ratings above, from `0` to `5`. Will always be `0` if `reviewCount` is `0`.",
            "type" : "number",
            "format" : "float",
            "maximum" : 5,
            "minimum" : 0,
            "example" : 4.1
          }
        },
        "type" : "object"
      },
      "Availability" : {
        "description" : "The result of a restaurant's availability search.",
        "required" : [ "shift", "timeslots" ],
        "properties" : {
          "shift" : {
            "$ref" : "#/components/schemas/Shift"
          },
          "timeslots" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Timeslot"
            }
          }
        },
        "type" : "object"
      },
      "ContactMessage" : {
        "description" : "A message to send to the team. Note: name, email and phone number (if available) should be prefilled in the UI with the information from `/members/me`, if authenticated.",
        "required" : [ "name", "email", "phoneNumber", "message" ],
        "properties" : {
          "name" : {
            "description" : "The customer's name.",
            "type" : "string",
            "minLength" : 2,
            "example" : "John Smith"
          },
          "email" : {
            "description" : "The customer's email address.",
            "type" : "string",
            "format" : "email",
            "example" : "john@rodeunresto.com"
          },
          "phoneNumber" : {
            "description" : "A phone number to contact the customer. Accepts a local number from Reunion as digits only, or a phone number in international format starting with `00` or `+`.",
            "type" : "string",
            "pattern" : "^\\+?\\d+$",
            "example" : "0612345678"
          },
          "message" : {
            "description" : "The message to send.",
            "type" : "string",
            "example" : "I have a problem with my reservation. Please contact me."
          }
        },
        "type" : "object"
      },
      "Cuisine" : {
        "required" : [ "id", "name" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 123
          },
          "name" : {
            "type" : "string",
            "example" : "Italian"
          }
        },
        "type" : "object"
      },
      "CuisineWithRestaurantCount" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Cuisine"
        }, {
          "required" : [ "restaurantCount" ],
          "properties" : {
            "restaurantCount" : {
              "description" : "The number of restaurants offering this cuisine.",
              "type" : "integer",
              "example" : 10
            }
          },
          "type" : "object"
        } ]
      },
      "Deal" : {
        "required" : [ "id", "title", "description" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 123
          },
          "title" : {
            "type" : "string",
            "example" : "25% Off Burgers and Beer"
          },
          "description" : {
            "type" : "string",
            "example" : "Monday & Tuesday only. Party of 4 minimum."
          }
        },
        "type" : "object"
      },
      "DealPage" : {
        "required" : [ "page", "hasNextPage", "deals" ],
        "properties" : {
          "page" : {
            "description" : "The requested page.",
            "type" : "integer",
            "example" : 1
          },
          "hasNextPage" : {
            "description" : "Whether a next page is available.",
            "type" : "boolean",
            "example" : true
          },
          "deals" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DealWithRestaurant"
            }
          }
        },
        "type" : "object"
      },
      "DealWithRestaurant" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Deal"
        }, {
          "required" : [ "restaurant" ],
          "properties" : {
            "restaurant" : {
              "$ref" : "#/components/schemas/Restaurant"
            }
          },
          "type" : "object"
        } ]
      },
      "Error" : {
        "required" : [ "message" ],
        "properties" : {
          "message" : {
            "description" : "An error message that should be displayed to the user.",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Location" : {
        "required" : [ "lat", "lng" ],
        "properties" : {
          "lat" : {
            "description" : "The latitude.",
            "type" : "number",
            "format" : "float",
            "maximum" : 90,
            "minimum" : -90,
            "example" : -20.9
          },
          "lng" : {
            "description" : "The longitude.",
            "type" : "number",
            "format" : "float",
            "maximum" : 180,
            "minimum" : -180,
            "example" : 55.5
          }
        },
        "type" : "object"
      },
      "LoginRequest" : {
        "required" : [ "email", "password" ],
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Member" : {
        "description" : "The basic info about a member, only public information.",
        "required" : [ "id", "displayName", "location", "hasProfilePicture", "profilePictureURL" ],
        "properties" : {
          "id" : {
            "description" : "The member ID.",
            "type" : "integer",
            "example" : 123
          },
          "displayName" : {
            "description" : "The display name of the member. This is the name that should be displayed in public reviews.",
            "type" : "string",
            "example" : "John S."
          },
          "location" : {
            "description" : "The place where the member lives. This is a free text field where the user typically enters their city.",
            "type" : "string",
            "example" : "Saint-Gilles-Les-Bains",
            "nullable" : true
          },
          "hasProfilePicture" : {
            "description" : "Whether the member has a profile picture. If false, `imageURL` will contain a placeholder image.",
            "type" : "boolean",
            "example" : false
          },
          "profilePictureURL" : {
            "description" : "The profile picture of the member. If the member doesn't have a profile picture, a placeholder image will be returned. Image URLs are dynamic, use query string parameters to resize to screen.",
            "type" : "string",
            "format" : "uri",
            "externalDocs" : {
              "description" : "Image URL parameters",
              "url" : "https://rodeunresto.com/api/member/v1/docs/image-url-parameters"
            },
            "example" : "https://rodeunresto.sizeapi.com/user-placeholder"
          }
        },
        "type" : "object"
      },
      "MemberDetail" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Member"
        }, {
          "description" : "The full info about a member, including private information.",
          "required" : [ "realName", "firstName", "lastName", "email", "phoneNumber" ],
          "properties" : {
            "realName" : {
              "description" : "The full, real name of the member. This is the name that should be used to prefill the customer name when placing a reservation.",
              "type" : "string",
              "example" : "John Smith"
            },
            "firstName" : {
              "description" : "The first name of the member.",
              "type" : "string",
              "example" : "John"
            },
            "lastName" : {
              "description" : "The last name of the member.",
              "type" : "string",
              "example" : "Smith"
            },
            "email" : {
              "description" : "The email address of the member.",
              "type" : "string",
              "example" : "john@foodbox.com"
            },
            "phoneNumber" : {
              "description" : "The phone number of the member, or null if not available.",
              "type" : "string",
              "pattern" : "^\\d+$",
              "example" : "0692123456",
              "nullable" : true
            }
          },
          "type" : "object"
        } ]
      },
      "Menu" : {
        "required" : [ "categories" ],
        "properties" : {
          "categories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MenuCategory"
            }
          }
        },
        "type" : "object"
      },
      "MenuCategory" : {
        "required" : [ "name", "description", "sizes", "products" ],
        "properties" : {
          "name" : {
            "description" : "The category name.",
            "type" : "string",
            "example" : "Pizza"
          },
          "description" : {
            "description" : "An optional description, or null if not available.",
            "type" : "string",
            "example" : "All our pizzas are have a base of tomato sauce and mozzarella cheese.",
            "nullable" : true
          },
          "sizes" : {
            "description" : "Available sizes for products in this category. This is typically used to display menu prices in a table: products are rows, sizes are columns.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MenuSize"
            }
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MenuProduct"
            }
          }
        },
        "type" : "object"
      },
      "MenuProduct" : {
        "required" : [ "name", "description", "prices" ],
        "properties" : {
          "name" : {
            "description" : "The product name.",
            "type" : "string",
            "example" : "Margherita"
          },
          "description" : {
            "description" : "An optional product description, or null if not available.",
            "type" : "string",
            "example" : "Tomatoes, mozzarella, basil, salt and olive oil",
            "nullable" : true
          },
          "prices" : {
            "description" : "The product price, for each size in the category. This object is a map of size ID to price. Note that the product may not be available in all sizes, so the sizes here are a subset of the category sizes.",
            "type" : "object",
            "example" : {
              "123" : {
                "price" : "12.90",
                "formattedPrice" : "12,90 €"
              }
            },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Price"
            }
          }
        },
        "type" : "object"
      },
      "MenuSize" : {
        "required" : [ "id", "name", "nameExtra" ],
        "properties" : {
          "id" : {
            "description" : "A unique ID for the size. This is used as the key for `MenuProduct.prices`.",
            "type" : "integer",
            "example" : 123
          },
          "name" : {
            "description" : "The size name. Can only be null if the category contains a single size.",
            "type" : "string",
            "example" : "Large",
            "nullable" : true
          },
          "nameExtra" : {
            "description" : "An optional, additional name for this size.",
            "type" : "string",
            "example" : "35 cm",
            "nullable" : true
          }
        },
        "type" : "object"
      },
      "OpeningHours" : {
        "required" : [ "shift", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" ],
        "properties" : {
          "shift" : {
            "$ref" : "#/components/schemas/Shift"
          },
          "monday" : {
            "$ref" : "#/components/schemas/OpeningHoursRange"
          },
          "tuesday" : {
            "$ref" : "#/components/schemas/OpeningHoursRange"
          },
          "wednesday" : {
            "$ref" : "#/components/schemas/OpeningHoursRange"
          },
          "thursday" : {
            "$ref" : "#/components/schemas/OpeningHoursRange"
          },
          "friday" : {
            "$ref" : "#/components/schemas/OpeningHoursRange"
          },
          "saturday" : {
            "$ref" : "#/components/schemas/OpeningHoursRange"
          },
          "sunday" : {
            "$ref" : "#/components/schemas/OpeningHoursRange"
          }
        },
        "type" : "object"
      },
      "OpeningHoursRange" : {
        "required" : [ "isOpen", "firstTimeslot", "lastTimeslot" ],
        "properties" : {
          "isOpen" : {
            "description" : "Whether the restaurant is open for reservations.",
            "type" : "boolean"
          },
          "firstTimeslot" : {
            "description" : "The first timeslot that can be reserved, in HH:MM format, or null if the restaurant is closed.",
            "type" : "string",
            "pattern" : "^([01][0-9]|2[0-3])\\:?(00|30)$",
            "example" : "12:00",
            "nullable" : true
          },
          "lastTimeslot" : {
            "description" : "The last timeslot that can be reserved, in HH:MM format, or null if the restaurant is closed.",
            "type" : "string",
            "pattern" : "^([01][0-9]|2[0-3])\\:?(00|30)$",
            "example" : "13:30",
            "nullable" : true
          }
        },
        "type" : "object"
      },
      "Price" : {
        "required" : [ "price", "formattedPrice" ],
        "properties" : {
          "price" : {
            "description" : "The unformatted price.",
            "type" : "string",
            "example" : "12.90"
          },
          "formattedPrice" : {
            "description" : "The formatted price.",
            "type" : "string",
            "example" : "12,90 €"
          }
        },
        "type" : "object"
      },
      "Reservation" : {
        "required" : [ "id", "date", "time", "covers", "restaurant", "deal", "name", "phoneNumber", "message", "createdOn", "isCancelled", "isCancellable", "isAvailableForReview", "review" ],
        "properties" : {
          "id" : {
            "description" : "The reservation number.",
            "type" : "integer",
            "example" : "1234"
          },
          "date" : {
            "description" : "The date, in YYYY-MM-DD format.",
            "type" : "string",
            "pattern" : "^\\d{4}\\-\\d{2}\\-\\d{2}$",
            "example" : "2019-03-30"
          },
          "time" : {
            "description" : "The time, in HH:MM format.",
            "type" : "string",
            "pattern" : "^([01][0-9]|2[0-3])\\:?(00|30)$",
            "example" : "19:30"
          },
          "covers" : {
            "description" : "The number of covers.",
            "type" : "integer",
            "minimum" : 1,
            "example" : 2
          },
          "restaurant" : {
            "$ref" : "#/components/schemas/Restaurant"
          },
          "deal" : {
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Deal"
            } ]
          },
          "name" : {
            "description" : "The name the reservation was made under.",
            "type" : "string",
            "example" : "John Smith"
          },
          "phoneNumber" : {
            "description" : "The contact phone number",
            "type" : "string",
            "pattern" : "^\\d+$",
            "example" : "0692123456"
          },
          "message" : {
            "description" : "The message to the restaurant, if any.",
            "type" : "string",
            "example" : "Could we have a non-smoking table please?",
            "nullable" : true
          },
          "createdOn" : {
            "description" : "The date/time the reservation has been made, in ISO format.",
            "type" : "string",
            "pattern" : "^\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}\\:\\d{2}(\\:\\d{2})?(Z|[\\+\\-]\\d{2}\\:\\d{2})$",
            "example" : "2019-30-30T16:24:30+04:00"
          },
          "isCancelled" : {
            "description" : "Whether the reservation is cancelled.",
            "type" : "boolean",
            "example" : false
          },
          "isCancellable" : {
            "description" : "Whether the reservation can be cancelled.",
            "type" : "boolean",
            "example" : true
          },
          "isAvailableForReview" : {
            "description" : "Whether a review can be left for this reservation.",
            "type" : "boolean",
            "example" : false
          },
          "review" : {
            "description" : "The review left by the customer, or null if not reviewed.",
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Review"
            } ]
          }
        },
        "type" : "object"
      },
      "ReservationDate" : {
        "required" : [ "isOpen", "availableDealIds" ],
        "properties" : {
          "isOpen" : {
            "description" : "Whether the restaurant is open on this date.",
            "type" : "boolean",
            "example" : true
          },
          "availableDealIds" : {
            "description" : "The IDs of the deals available on this date.",
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          }
        },
        "type" : "object"
      },
      "ReservationPage" : {
        "required" : [ "page", "hasNextPage", "reservations" ],
        "properties" : {
          "page" : {
            "description" : "The requested page.",
            "type" : "integer",
            "minimum" : 1,
            "example" : 1
          },
          "hasNextPage" : {
            "description" : "Whether a next page is available.",
            "type" : "boolean",
            "example" : true
          },
          "reservations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Reservation"
            }
          }
        },
        "type" : "object"
      },
      "ReservationRequest" : {
        "required" : [ "restaurantId", "shiftId", "date", "time", "covers", "name", "phoneNumber" ],
        "properties" : {
          "restaurantId" : {
            "description" : "The restaurant ID.",
            "type" : "integer",
            "example" : 123
          },
          "shiftId" : {
            "description" : "The shift ID.",
            "type" : "integer",
            "example" : 123
          },
          "dealId" : {
            "description" : "An optional deal ID.",
            "type" : "integer",
            "example" : 123,
            "nullable" : true
          },
          "date" : {
            "description" : "The date, in YYYY-MM-DD format.",
            "type" : "string",
            "pattern" : "^\\d{4}\\-\\d{2}\\-\\d{2}$",
            "example" : "2019-03-30"
          },
          "time" : {
            "description" : "The time, in HH:MM format. MM can only be 00 or 30.",
            "type" : "string",
            "pattern" : "^([01][0-9]|2[0-3])\\:?(00|30)$",
            "example" : "19:30"
          },
          "covers" : {
            "description" : "The number of covers.",
            "type" : "integer",
            "minimum" : 1,
            "example" : 2
          },
          "name" : {
            "description" : "The name the reservation is made under. This should default to the customer name (use `/members/me` to get the user info), but may be changed in the UI to allow the customer to make a reservation for someone else.",
            "type" : "string",
            "example" : "John Smith"
          },
          "phoneNumber" : {
            "description" : "A phone number to contact the customer. This should default to the customer's phone number (use `/members/me` to get the user info) if available, but may be changed in the UI. Accepts a local number from Reunion as digits only, or a phone number in international format starting with `00` or `+`.",
            "type" : "string",
            "pattern" : "^\\+?\\d+$",
            "example" : "0692123456"
          },
          "message" : {
            "description" : "An optional message to the restaurant.",
            "type" : "string",
            "minLength" : 10,
            "example" : "Could we have a non-smoking table please?",
            "nullable" : true
          }
        },
        "type" : "object"
      },
      "Restaurant" : {
        "required" : [ "id", "name", "address", "location", "hasImage", "imageURL", "cuisines", "aggregateRating" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 123
          },
          "name" : {
            "type" : "string",
            "example" : "Buzz Burger"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "hasImage" : {
            "description" : "Whether the restaurant has an image. If false, `imageURL` will contain a placeholder image.",
            "type" : "boolean",
            "example" : false
          },
          "imageURL" : {
            "description" : "The restaurant image. If the restaurant has no image, a placeholder image will be returned. Image URLs are dynamic, use query string parameters to resize to screen.",
            "type" : "string",
            "format" : "uri",
            "externalDocs" : {
              "description" : "Image URL parameters",
              "url" : "https://rodeunresto.com/api/member/v1/docs/image-url-parameters"
            },
            "example" : "https://rodeunresto.sizeapi.com/placeholder"
          },
          "cuisines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Cuisine"
            }
          },
          "aggregateRating" : {
            "$ref" : "#/components/schemas/AggregateRating"
          }
        },
        "type" : "object"
      },
      "RestaurantDetail" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Restaurant"
        }, {
          "required" : [ "deals", "pictures", "menu", "reservationDates", "openingHours" ],
          "properties" : {
            "deals" : {
              "description" : "The deals that can currently be booked at this restaurant.",
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Deal"
              }
            },
            "pictures" : {
              "description" : "The restaurant pictures.",
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/RestaurantPicture"
              }
            },
            "menu" : {
              "$ref" : "#/components/schemas/Menu"
            },
            "reservationDates" : {
              "description" : "The possible reservation dates. This object is a map of `YYYY-MM-DD` date to `ReservationDate`. Contains all dates, in order, between today and the last possible reservation date.",
              "type" : "object",
              "example" : {
                "2019-03-30" : {
                  "isOpen" : true,
                  "availableDealIds" : [ 123, 234 ]
                }
              },
              "additionalProperties" : {
                "$ref" : "#/components/schemas/ReservationDate"
              }
            },
            "openingHours" : {
              "description" : "The restaurant opening hours.",
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/OpeningHours"
              }
            }
          },
          "type" : "object"
        } ]
      },
      "RestaurantPicture" : {
        "required" : [ "url", "description" ],
        "properties" : {
          "url" : {
            "description" : "Image URLs are dynamic, use query string parameters to resize to screen.",
            "type" : "string",
            "format" : "uri",
            "externalDocs" : {
              "description" : "Image URL parameters",
              "url" : "https://rodeunresto.com/api/member/v1/docs/image-url-parameters"
            },
            "example" : "https://rodeunresto.sizeapi.com/placeholder"
          },
          "description" : {
            "description" : "An optional description of the picture. Empty string if no description is available.",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Review" : {
        "required" : [ "foodRating", "serviceRating", "valueRating", "content" ],
        "properties" : {
          "foodRating" : {
            "description" : "The food rating.",
            "type" : "integer",
            "maximum" : 5,
            "minimum" : 1,
            "example" : 4
          },
          "serviceRating" : {
            "description" : "The service rating.",
            "type" : "integer",
            "maximum" : 5,
            "minimum" : 1,
            "example" : 4
          },
          "valueRating" : {
            "description" : "The overall value for money rating.",
            "type" : "integer",
            "maximum" : 5,
            "minimum" : 1,
            "example" : 4
          },
          "content" : {
            "description" : "The review content, or null if the user did not leave a comment.",
            "type" : "string",
            "example" : "Excellent meal, even though the service was a bit slow.",
            "nullable" : true
          }
        },
        "type" : "object"
      },
      "ReviewPage" : {
        "required" : [ "page", "hasNextPage", "reviews" ],
        "properties" : {
          "page" : {
            "description" : "The requested page.",
            "type" : "integer",
            "minimum" : 1,
            "example" : 1
          },
          "hasNextPage" : {
            "description" : "Whether a next page is available.",
            "type" : "boolean",
            "example" : true
          },
          "reviews" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReviewWithMember"
            }
          }
        },
        "type" : "object"
      },
      "ReviewRequest" : {
        "required" : [ "reservationId", "foodRating", "serviceRating", "valueRating" ],
        "properties" : {
          "reservationId" : {
            "description" : "The reservation ID.",
            "type" : "integer",
            "example" : 123
          },
          "foodRating" : {
            "description" : "The food rating.",
            "type" : "integer",
            "maximum" : 5,
            "minimum" : 1,
            "example" : 4
          },
          "serviceRating" : {
            "description" : "The service rating.",
            "type" : "integer",
            "maximum" : 5,
            "minimum" : 1,
            "example" : 4
          },
          "valueRating" : {
            "description" : "The overall value for money rating.",
            "type" : "integer",
            "maximum" : 5,
            "minimum" : 1,
            "example" : 4
          },
          "content" : {
            "description" : "The review content, optional.",
            "type" : "string",
            "minLength" : 10,
            "example" : "Excellent meal, even though the service was a bit slow.",
            "nullable" : true
          }
        },
        "type" : "object"
      },
      "ReviewWithMember" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Review"
        }, {
          "required" : [ "member" ],
          "properties" : {
            "member" : {
              "$ref" : "#/components/schemas/Member"
            }
          },
          "type" : "object"
        } ]
      },
      "SearchResult" : {
        "required" : [ "restaurant", "inSearchArea", "deals", "timeslots", "shift" ],
        "properties" : {
          "restaurant" : {
            "$ref" : "#/components/schemas/Restaurant"
          },
          "inSearchArea" : {
            "description" : "Whether the restaurant is inside the selected zone. When too few results are returned inside of the selected zone, we may return additional results that are outside of the search area. We will always return results IN the search area first, THEN results outside. On rodeunresto.com, we use this flag to display a message right before the first result with inSearchArea=false: \"These restaurants outside of your search area might be of interest to you: ...\"",
            "type" : "boolean",
            "example" : true
          },
          "deals" : {
            "description" : "The available deals. If the search includes a date and time, only the deals that can be booked at that time will be returned.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Deal"
            }
          },
          "timeslots" : {
            "description" : "The reservation timeslots. If the search includes a date and time, this will contain 3 timeslots: `T-30 min`, `T`, `T+30 min`, and at least one of the timeslots will be available. If the search does not include a date and time, this array will be empty.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Timeslot"
            }
          },
          "shift" : {
            "description" : "The shift the timeslots are related to. This will be set if the search includes a date and time, and null otherwise.",
            "nullable" : true,
            "allOf" : [ {
              "$ref" : "#/components/schemas/Shift"
            } ]
          }
        },
        "type" : "object"
      },
      "Shift" : {
        "description" : "A shift worked by the restaurant, such as Lunch or Dinner.",
        "required" : [ "id", "name" ],
        "properties" : {
          "id" : {
            "description" : "The shift ID.",
            "type" : "integer",
            "example" : 123
          },
          "name" : {
            "description" : "The shift name.",
            "type" : "string",
            "example" : "Lunch"
          }
        },
        "type" : "object"
      },
      "SignupRequest" : {
        "required" : [ "firstname", "lastname", "email", "password" ],
        "properties" : {
          "firstname" : {
            "type" : "string",
            "minLength" : 1
          },
          "lastname" : {
            "type" : "string",
            "minLength" : 1
          },
          "email" : {
            "type" : "string",
            "format" : "email"
          },
          "password" : {
            "type" : "string",
            "minLength" : 8
          }
        },
        "type" : "object"
      },
      "Timeslot" : {
        "required" : [ "date", "time", "isAvailable" ],
        "properties" : {
          "date" : {
            "type" : "string",
            "pattern" : "^20[0-9]{2}\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[0-1])$",
            "example" : "2019-03-30"
          },
          "time" : {
            "type" : "string",
            "pattern" : "^([01][0-9]|2[0-3])\\:?(00|30)$",
            "example" : "19:30"
          },
          "isAvailable" : {
            "type" : "boolean",
            "example" : true
          }
        },
        "type" : "object"
      },
      "Token" : {
        "required" : [ "token" ],
        "properties" : {
          "token" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "UpdateMemberRequest" : {
        "description" : "A request to update the currently logged in member. All fields are optional.",
        "properties" : {
          "firstName" : {
            "description" : "A new first name for the member.",
            "type" : "string",
            "minLength" : 1,
            "example" : "John",
            "nullable" : true
          },
          "lastName" : {
            "description" : "A new last name for the member.",
            "type" : "string",
            "minLength" : 1,
            "example" : "Smith",
            "nullable" : true
          },
          "displayName" : {
            "description" : "A new display name for the member.",
            "type" : "string",
            "minLength" : 1,
            "example" : "John le Créole Gourmand",
            "nullable" : true
          },
          "location" : {
            "description" : "A new location for the member.",
            "type" : "string",
            "minLength" : 1,
            "example" : "Saint-Gilles-Les-Bains",
            "nullable" : true
          },
          "email" : {
            "description" : "A new email address for the member.",
            "type" : "string",
            "format" : "email",
            "example" : "john@example.com",
            "nullable" : true
          },
          "phoneNumber" : {
            "description" : "A new phone number for the member. Accepts a local number from Reunion as digits only, or a phone number in international format starting with `00` or `+`.",
            "type" : "string",
            "pattern" : "^\\+?\\d+$",
            "example" : "0692123456",
            "nullable" : true
          },
          "password" : {
            "description" : "A new password for the member.",
            "type" : "string",
            "minLength" : 8,
            "nullable" : true
          }
        },
        "type" : "object"
      },
      "Zone" : {
        "required" : [ "id", "name", "hasImage", "imageURL" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 123
          },
          "name" : {
            "type" : "string",
            "example" : "Saint-Denis"
          },
          "hasImage" : {
            "description" : "Whether the zone has an image. If false, `imageURL` will contain a placeholder image.",
            "type" : "boolean",
            "example" : false
          },
          "imageURL" : {
            "description" : "The zone image. If the zone has no image, a placeholder image will be returned. Image URLs are dynamic, use query string parameters to resize to screen.",
            "type" : "string",
            "format" : "uri",
            "externalDocs" : {
              "description" : "Image URL parameters",
              "url" : "https://rodeunresto.com/api/member/v1/docs/image-url-parameters"
            },
            "example" : "https://rodeunresto.sizeapi.com/placeholder"
          }
        },
        "type" : "object"
      },
      "ZoneWithChildren" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Zone"
        }, {
          "required" : [ "children" ],
          "properties" : {
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ZoneWithChildren"
              }
            }
          },
          "type" : "object"
        } ]
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer"
      }
    }
  },
  "externalDocs" : {
    "description" : "Documentation on rodeunresto.com",
    "url" : "https://rodeunresto.com/api/member/v1/docs"
  }
}