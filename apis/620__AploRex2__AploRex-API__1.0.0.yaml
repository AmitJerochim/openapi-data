openapi: 3.0.0
info:
  title: AploRex API
  description: APIs that allow application to communicate with AploRex
  version: 1.0.0
servers:
  - url: 'https://virtserver.swaggerhub.com/AutoPilotTestAPI/AploRex2/1.0.0'
    description: SwaggerHub API Auto Mocking
  - url: 'https://{path}/api/v1'
    description: URL to your live site
    variables:
      path:
        description: Path to your version of the CRM
        default: clients.claimsforce.net
security:
  - basicAuth: []
paths:
  /:
    get:
      summary: Returns h1 tag.
      responses:
        '200':
          description: OK
      tags:
        - GET
  /App/user:
    get:
      summary: Returns Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      description: This returns the values of the authenticated user.
      tags:
        - GET
  '/{entityType}':
    get:
      summary: Returns all the Entities present in the CRM table
      parameters:
        - name: entityType
          in: path
          description: Entity Type
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: offset
          in: query
          description: >-
            The number of items to skip before starting to collect the result
            set
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: maxSize
          in: query
          description: >-
            The number of items to skip before starting to collect the result
            set
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: where
          in: query
          description: >-
            The number of items to skip before starting to collect the result
            set
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: sortBy
          in: query
          description: >-
            The number of items to skip before starting to collect the result
            set
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: asc
          in: query
          description: >-
            The number of items to skip before starting to collect the result
            set
          required: false
          style: form
          explode: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      tags:
        - GET
    post:
      summary: Create an entry in CRM under the specified Entity Type
      parameters:
        - name: entityType
          in: path
          description: Entity Type
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
      tags:
        - POST
      description: When creating a new record in an entity it is recommended to verify which fields you have required and make sure they are included in your test.
  '/{entityType}/{id}':
    get:
      summary: Returns the entity information.
      parameters:
        - name: entityType
          in: path
          description: Entity Type
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: id
          in: path
          description: Entity Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      tags:
        - GET
    put:
      summary: Update an entry in CRM
      parameters:
        - name: entityType
          in: path
          description: Entity Type
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: id
          in: path
          description: Entity Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
      tags:
        - PUT
      description: |-
        When updating a given record make sure that all of your required fields are maintained. 

        You will want to do this with a test record at first to make sure your code is working as you would like.                         
    delete:
      summary: Delete an entry in CRM
      parameters:
        - name: entityType
          in: path
          description: Entity Type
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: id
          in: path
          description: Entity Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
      tags:
        - DELETE
      description: Deleting a record will just set a flag in the database as deleted. You will have a small window of time to go into the action history to undo any delete that is perfomed.
    patch:
      summary: Update an entry in CRM
      parameters:
        - name: entityType
          in: path
          description: Entity Type
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: id
          in: path
          description: Entity Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
      tags:
        - PATCH
components:
  schemas: {}
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
