{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "The web api of RideShare",
    "version" : "1.0.0-oas3",
    "title" : "REST api",
    "contact" : {
      "email" : "264237@via.dk"
    }
  },
  "tags" : [ {
    "name" : "Authentication",
    "description" : "Start here if you want to get in"
  }, {
    "name" : "Accounts",
    "description" : "Accounting for all users"
  }, {
    "name" : "Notifications",
    "description" : "Get notified here"
  }, {
    "name" : "Reservations",
    "description" : "No reservation, no ride!"
  }, {
    "name" : "Reviews",
    "description" : "Everybody is a critic..."
  }, {
    "name" : "Trips",
    "description" : "For when you don't want to travel alone"
  } ],
  "paths" : {
    "/authentication/" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "returns a token if credentials are valid",
        "operationId" : "authenticateUser",
        "description" : "By passing username and password in a Basic Authentication header, the response will contain an authentication token if the credentials were valid\n",
        "parameters" : [ {
          "in" : "header",
          "name" : "Authorization",
          "description" : "base64 encode the credentials in the format \"username:password\"",
          "required" : true,
          "example" : "Authorization:Basic dXNlcm5hbWU6cGFzc3dvcmQ=",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response with an auth token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - auth header was in the wrong format"
          },
          "401" : {
            "description" : "log in failed"
          }
        }
      }
    },
    "/accounts/create/" : {
      "post" : {
        "tags" : [ "Accounts" ],
        "summary" : "creates an account and returns it",
        "operationId" : "createAccount",
        "description" : "An account is created from the passed object",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "the created account",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - could not parse the passed object"
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountRequest"
              }
            }
          },
          "description" : "The account to create."
        }
      }
    },
    "/accounts/update/" : {
      "put" : {
        "tags" : [ "Accounts" ],
        "summary" : "updates an account and returns it",
        "operationId" : "updateAccount",
        "description" : "The account corresponding to the object id is updated",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "the updated account",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - could not parse the passed object"
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountRequest"
              }
            }
          },
          "description" : "The account to update."
        }
      }
    },
    "/accounts/delete/{email}" : {
      "delete" : {
        "tags" : [ "Accounts" ],
        "summary" : "deletes an account and returns it",
        "operationId" : "deleteAccount",
        "description" : "The account corresponding to the object id is deleted",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the deleted account",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - could not parse the passed object"
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/accounts/getAll/" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "gets a list of all accounts",
        "operationId" : "getAllAccounts",
        "description" : "All accounts are returned",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested list of accounts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountList"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/accounts/get/{email}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "gets an account by its email",
        "operationId" : "getAccountByEmail",
        "description" : "An account is retrieved by its email",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested account",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/notifications/get/{accountEmail}" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "summary" : "gets a list of all notifications for the account",
        "operationId" : "getNotificationsForUser",
        "description" : "Get all notifications for a user with the passed email",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "accountEmail",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested list of notifications",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationList"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/reservations/create/" : {
      "post" : {
        "tags" : [ "Reservations" ],
        "summary" : "creates a reservation and returns it",
        "operationId" : "createReservation",
        "description" : "An reservation is created from the passed object",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "the created reservation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - could not parse the passed object"
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReservationRequest"
              }
            }
          },
          "description" : "The reservation to create."
        }
      }
    },
    "/reservations/update/" : {
      "put" : {
        "tags" : [ "Reservations" ],
        "summary" : "updates a reservation and returns it",
        "operationId" : "updateReservation",
        "description" : "The reservation corresponding to the object id is updated",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "the updated reservation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - could not parse the passed object"
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReservationRequest"
              }
            }
          },
          "description" : "The reservation to update."
        }
      }
    },
    "/reservations/delete/{email}" : {
      "delete" : {
        "tags" : [ "Reservations" ],
        "summary" : "deletes a reservation and returns it",
        "operationId" : "deleteReservation",
        "description" : "The reservation corresponding to the object id is deleted",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the deleted reservation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - could not parse the passed object"
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/reservations/get/{id}" : {
      "get" : {
        "tags" : [ "Reservations" ],
        "summary" : "gets a reservation by its id",
        "operationId" : "getReservationById",
        "description" : "A reservation is retrieved by its id",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested reservation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/reservations/getForTrip/{id}" : {
      "get" : {
        "tags" : [ "Reservations" ],
        "summary" : "gets a reservation by its email",
        "operationId" : "getReservationForTrip",
        "description" : "A reservation is retrieved by its email",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested reservation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/reservations/getByEmail/{id}" : {
      "get" : {
        "tags" : [ "Reservations" ],
        "summary" : "gets a reservation by its email",
        "operationId" : "getReservationByEmail",
        "description" : "A reservation is retrieved by its email",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested reservation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/reviews/create/" : {
      "post" : {
        "tags" : [ "Reviews" ],
        "summary" : "creates a review and returns it",
        "operationId" : "createReview",
        "description" : "A review is created from the passed object",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "the created review",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - could not parse the passed object"
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReviewRequest"
              }
            }
          },
          "description" : "The review to create."
        }
      }
    },
    "/reviews/delete/{id}" : {
      "delete" : {
        "tags" : [ "Reviews" ],
        "summary" : "deletes a review and returns it",
        "operationId" : "deleteReview",
        "description" : "The review corresponding to the object id is deleted",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the deleted review",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - could not parse the passed object"
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/reviews/getAllByRevieweeEmail/{email}" : {
      "get" : {
        "tags" : [ "Reviews" ],
        "summary" : "gets all reviews by its reviewees email",
        "operationId" : "getAllReviewsByRevieweeEmail",
        "description" : "A list of reviews is retrieved by its reviewees email",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested list of reviews",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewList"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/reviews/getAllByReviewerEmail/{email}" : {
      "get" : {
        "tags" : [ "Reviews" ],
        "summary" : "gets all reviews by its reviewers email",
        "operationId" : "getAllReviewsByReviewerEmail",
        "description" : "A list of reviews is retrieved by its reviewers email",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested list of reviews",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewList"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/reviews/get/{id}" : {
      "get" : {
        "tags" : [ "Reviews" ],
        "summary" : "gets a review by its id",
        "operationId" : "getReviewById",
        "description" : "A review is retrieved by its id",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested review",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/trips/create/" : {
      "post" : {
        "tags" : [ "Trips" ],
        "summary" : "creates a trip and returns it",
        "operationId" : "createTrip",
        "description" : "A trip is created from the passed object",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "the created trip",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TripResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - could not parse the passed object"
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TripRequest"
              }
            }
          },
          "description" : "The trip to create."
        }
      }
    },
    "/trips/delete/{id}" : {
      "delete" : {
        "tags" : [ "Trips" ],
        "summary" : "deletes a trip and returns it",
        "operationId" : "deleteTrip",
        "description" : "The trip corresponding to the object id is deleted",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the deleted trip",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TripResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request - could not parse the passed object"
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/trips/get/" : {
      "get" : {
        "tags" : [ "Trips" ],
        "summary" : "gets a review by its id",
        "operationId" : "getTrip",
        "description" : "A review is retrieved by its id",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "query",
          "name" : "driverEmail",
          "schema" : {
            "type" : "string",
            "format" : "email",
            "example" : "driver@example.com"
          }
        }, {
          "in" : "query",
          "name" : "passengerEmail",
          "schema" : {
            "type" : "string",
            "format" : "email",
            "example" : "driver@example.com"
          }
        }, {
          "in" : "query",
          "name" : "minimumArrivalDate",
          "schema" : {
            "type" : "string",
            "format" : "datetime",
            "example" : "2022-2-22-10-15"
          }
        }, {
          "in" : "query",
          "name" : "maximumArrivalDate",
          "schema" : {
            "type" : "string",
            "format" : "datetime",
            "example" : "2022-2-22-10-15"
          }
        }, {
          "in" : "query",
          "name" : "pickupAddress",
          "schema" : {
            "type" : "string",
            "format" : "address",
            "example" : "Bankagervej 111, 8700 Horsens"
          }
        }, {
          "in" : "query",
          "name" : "dropoffAddress",
          "schema" : {
            "type" : "string",
            "format" : "address",
            "example" : "Fussingsvej 8, 8700 Horsens"
          }
        }, {
          "in" : "query",
          "name" : "arrivalDate",
          "schema" : {
            "type" : "string",
            "format" : "datetime",
            "example" : "2022-2-22-10-15"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested review",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TripResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/trips/get/{id}" : {
      "get" : {
        "tags" : [ "Trips" ],
        "summary" : "gets a trip by its id",
        "operationId" : "getTripById",
        "description" : "A trip is retrieved by its id",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested trip",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TripResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    },
    "/trips/getTripDetails/{id}" : {
      "get" : {
        "tags" : [ "Trips" ],
        "summary" : "gets a trips details by its id",
        "operationId" : "getTripDetailsById",
        "description" : "A trip is retrieved by its id",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the requested trips details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TripDetailsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "authentication or authorization failed"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "TokenResponse" : {
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "status" : {
            "type" : "string",
            "example" : "success"
          }
        }
      },
      "BaseAccount" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "person@example.com"
          },
          "password" : {
            "type" : "string",
            "example" : "hunter2"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Peter"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Petrelli"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "example" : "2022-2-22-0-0"
          },
          "phone" : {
            "type" : "string",
            "format" : "phone number",
            "example" : 11223344
          }
        }
      },
      "AccountRequest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseAccount"
        }, {
          "type" : "object",
          "required" : [ "email", "password", "firstName", "lastName", "phone", "dateOfBirth" ]
        } ]
      },
      "AccountResponse" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "number",
              "example" : 42
            },
            "accessLevel" : {
              "type" : "number"
            }
          }
        }, {
          "$ref" : "#/components/schemas/BaseAccount"
        } ]
      },
      "AccountList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AccountResponse"
        }
      },
      "NotificationResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "example" : 42
          },
          "accountEmail" : {
            "type" : "string",
            "format" : "email",
            "example" : "someone@example.com"
          },
          "type" : {
            "type" : "string",
            "example" : "reservation"
          },
          "itemId" : {
            "type" : "number",
            "example" : 70
          },
          "message" : {
            "type" : "string",
            "example" : "Your reservation has been approved"
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "example" : "2022-2-22-0-0"
          }
        }
      },
      "NotificationList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/NotificationResponse"
        }
      },
      "BaseReservation" : {
        "type" : "object",
        "properties" : {
          "tripId" : {
            "type" : "number",
            "example" : 70
          },
          "passengerEmail" : {
            "type" : "string",
            "format" : "email",
            "example" : "someone@passenger.com"
          },
          "pickupAddress" : {
            "type" : "string",
            "format" : "address",
            "example" : "Fussingsvej 8, 8700 Horsens"
          },
          "dropoffAddress" : {
            "type" : "string",
            "format" : "address",
            "example" : "Bankagervej 111, 8700 Horsens"
          },
          "pickupTime" : {
            "type" : "string",
            "format" : "datetime",
            "example" : "2022-2-22-10-15"
          },
          "bookedSeats" : {
            "type" : "number",
            "example" : 4
          }
        }
      },
      "ReservationRequest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseReservation"
        }, {
          "type" : "object",
          "required" : [ "tripId", "passengerEmail", "pickupAddress", "dropoffAddress", "pickupTime", "bookedSeats" ]
        } ]
      },
      "ReservationResponse" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "number",
              "example" : 42
            },
            "state" : {
              "type" : "string",
              "example" : "Pending"
            }
          }
        }, {
          "$ref" : "#/components/schemas/BaseReservation"
        } ]
      },
      "BaseReview" : {
        "type" : "object",
        "properties" : {
          "reviewerEmail" : {
            "type" : "string",
            "format" : "email",
            "example" : "critic@example.com"
          },
          "revieweeEmail" : {
            "type" : "string",
            "format" : "email",
            "example" : "victim@example.com"
          },
          "content" : {
            "type" : "string",
            "example" : "Super nice! I reccomend!"
          }
        }
      },
      "ReviewRequest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseReview"
        }, {
          "type" : "object",
          "required" : [ "reviewerEmail", "revieweeEmail", "content" ]
        } ]
      },
      "ReviewResponse" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "number",
              "example" : 42
            }
          }
        }, {
          "$ref" : "#/components/schemas/BaseReview"
        } ]
      },
      "ReviewList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ReviewResponse"
        }
      },
      "BaseTrip" : {
        "type" : "object",
        "properties" : {
          "driverEmail" : {
            "type" : "string",
            "format" : "email",
            "example" : "driver@example.com"
          },
          "arrival" : {
            "type" : "string",
            "format" : "datetime",
            "example" : "2022-2-22-10-15",
            "description" : "the desired arrival time"
          },
          "startAddress" : {
            "type" : "string",
            "format" : "address",
            "example" : "Bankagervej 111, 8700 Horsens"
          },
          "destinationAddress" : {
            "type" : "string",
            "format" : "address",
            "example" : "Fussingsvej 8, 8700 Horsens"
          },
          "baseprice" : {
            "type" : "number",
            "format" : "currency",
            "example" : 50
          },
          "perKmPrice" : {
            "type" : "number",
            "format" : "currency",
            "example" : 3.5
          },
          "cancellationFee" : {
            "type" : "number",
            "format" : "currency",
            "example" : 100.0
          },
          "rules" : {
            "type" : "string",
            "example" : "No pets allowed"
          },
          "totalSeats" : {
            "type" : "number",
            "example" : 4
          },
          "description" : {
            "type" : "string",
            "example" : "Luxurious ride in a Kia Picanto"
          }
        }
      },
      "TripRequest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseTrip"
        }, {
          "type" : "object",
          "required" : [ "email", "arrival", "startAddress", "destinationAddress", "basePrice", "prKmPrice", "cancellationFee", "totalSeats" ]
        } ]
      },
      "TripResponse" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "number",
              "example" : 43
            }
          }
        }, {
          "$ref" : "#/components/schemas/BaseTrip"
        } ]
      },
      "TripDetailsResponse" : {
        "type" : "object",
        "properties" : {
          "startTime" : {
            "type" : "string",
            "format" : "datetime"
          },
          "endTime" : {
            "type" : "string",
            "format" : "datetime"
          },
          "duration" : {
            "type" : "number",
            "example" : 630,
            "description" : "the trip duration in seconds"
          },
          "stopAdresses" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "address",
              "example" : "Fussingsvej 8, 8700 Horsens"
            },
            "description" : "all registered addresses for the trip"
          },
          "stopTimes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "datetime",
              "example" : "2022-2-22-10-15"
            },
            "description" : "the estimated time for each stop"
          }
        }
      }
    },
    "parameters" : {
      "authHeader" : {
        "in" : "header",
        "name" : "Authorization",
        "description" : "base64 encode the auth token in the format \"token:\"",
        "required" : true,
        "example" : "Authorization:Basic ZDI5MGYxZWUtNmM1NC00YjAxLTkwZTYtZDcwMTc0OGYwODUxOg==",
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
        }
      }
    }
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/sep3-project/SEP3-tier2/1.0.0"
  } ]
}