openapi: 3.0.2
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/rezlam/prepaid/1.0.0
info:
  version: "0.1.0"
  title: Prepaid
  description: Prepaid
  contact:
    email: you@your-company.com
tags:
  - name: Card
  - name: Password
paths:
  /cards:
    get:
      tags:
        - Card
      description: Search for cards. If no parameters are specified, returns all cards.
      operationId: findCardsList
      parameters:
        - in: header
          name: x-account-id
          schema:
            $ref: "#/components/headers/X-Account-ID"
          required: true
        - in: header
          name: x-customer-id
          schema:
            $ref: "#/components/headers/X-Customer-ID"
          required: true
        - in: query
          name: types
          schema:
            $ref: "#/components/schemas/CardType"
          required: false
        - in: query
          name: status
          schema:
            $ref: "#/components/schemas/CardStatus"
          required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Card"
                minItems: 0
                uniqueItems: true
                additionalProperties: false
              example:
                - id: 4919192
                  printed_name: TESTE K
                  number: 9999990053033771
                  cvv: 077
                  expiration: 12/2025
                  issued_at: "2019-12-11T19:12:56.110Z"
                  status: NORMAL
                  type: RECURRING
                - id: 4919191
                  printed_name: TESTE K
                  number: 9999990052925373
                  cvv: 140
                  expiration: 12/2025
                  issued_at: "2019-12-11T19:12:52.254Z"
                  status: NORMAL
                  type: RECURRING
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
    post:
      tags:
        - Card
      description: Adds a new card
      operationId: createCard
      parameters:
        - in: header
          name: x-account-id
          schema:
            $ref: "#/components/headers/X-Account-ID"
          required: true
        - in: header
          name: x-customer-id
          schema:
            $ref: "#/components/headers/X-Customer-ID"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardRequisition"
            example:
              type: RECURRING
              password: "1234"
      responses:
        "201":
          description: Created
          headers:
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardCreated"
              example:
                id: 4919192
                type: RECURRING
                status: NORMAL
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
  /cards/{id}:
    get:
      tags:
        - Card
      description: Gets the specified card.
      operationId: getCard
      parameters:
        - in: header
          name: x-account-id
          schema:
            $ref: "#/components/headers/X-Account-ID"
          required: true
        - in: header
          name: x-customer-id
          schema:
            $ref: "#/components/headers/X-Customer-ID"
          required: true
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
              example:
                id: 4919192
                printed_name: TESTE K
                number: 9999990053033771
                cvv: 077
                expiration: 12/2025
                issued_at: "2019-12-11T19:12:56.110Z"
                status: NORMAL
                type: RECURRING
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
  /cards/{id}/password:
    get:
      tags:
        - Card
      description: Retrieves the card password.
      operationId: getCardPassword
      parameters:
        - in: header
          name: x-account-id
          schema:
            $ref: "#/components/headers/X-Account-ID"
          required: true
        - in: header
          name: x-customer-id
          schema:
            $ref: "#/components/headers/X-Customer-ID"
          required: true
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardPassword"
              example:
                password: "1234"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
    #post:
    #  tags:
    #    - Card
    #  description: Creates the card password.
    #  operationId: createCardPassword
    #  parameters:
    #    - in: header
    #      name: X-Account-ID
    #      schema:
    #        $ref: "#/components/headers/X-Account-ID"
    #      required: true
    #    - in: header
    #      name: X-Customer-ID
    #      schema:
    #        $ref: "#/components/headers/X-Customer-ID"
    #      required: true
    #    - in: path
    #      name: id
    #      schema:
    #        type: integer
    #        format: int64
    #      required: true
    #  requestBody:
    #    required: true
    #    content:
    #      application/json:
    #        schema:
    #          $ref: "#/components/schemas/Password"
    #        example:
    #          password: "1234"
    #  responses:
    #    "204":
    #      $ref: "#/components/responses/204"
    #    "401":
    #      $ref: "#/components/responses/401"
    #    "403":
    #      $ref: "#/components/responses/403"
    #    "404":
    #      $ref: "#/components/responses/404"
    #    "422":
    #      $ref: "#/components/responses/422"
    #    "500":
    #      $ref: "#/components/responses/500"
  /passwords/validation:
    post:
      tags:
        - Password
      description: Checks if the given password is valid.
      operationId: validatePassword
      parameters:
        - in: header
          name: x-account-id
          schema:
            $ref: "#/components/headers/X-Account-ID"
          required: true
        - in: header
          name: x-customer-id
          schema:
            $ref: "#/components/headers/X-Customer-ID"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Password"
            example:
              password: "1234"
      responses:
        "204":
          $ref: "#/components/responses/204"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/500"
components:
  headers:
    ETag:
      description: Current version of the resource
      schema:
        type: string
        example: "ETag: YWVlYTgyNmE4ZTRmLjUyNDg3MDEyMzU2NjEzNTc5MDQ="
    Last-Modified:
      description: Last time the resource has been modified
      schema:
        type: string
        format: date-time
        example: "Last-Modified: Fri, 26 Dec 2019 16:15:22 GMT"
    Location:
      description: URL of the created resource
      schema:
        type: string
        format: uri
        example: "Location: http://api.acme.com/prepaid/v1/cards/4919192"
    X-Customer-ID:
      description: ID of a customer
      schema:
        type: integer
        format: int64
        example: "X-Customer-ID: 23898694"
    X-Account-ID:
      description: ID of a customer account
      schema:
        type: integer
        format: int64
        example: "X-Account-ID: 24128482"
  responses:
    "200":
      description: OK
    "201":
      description: Created
      headers:
        Location:
          $ref: "#/components/headers/Location"
    "204":
      description: No Content
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
          example:
            status: 400
            message: Missing request header 'x-customer-id' for method parameter of type long
    "401":
      description: Unauthorized
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
          example:
            status: 404
            message: 'Not found the resource [https://api-sandbox.pismolabs.io/wallet/v1/cards/494156] with value [{"message":"Card not found for these parameters sent in the request."}]'
    "403":
      description: Forbidden
    "422":
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
          example:
            status: 422
            code: PREPAID_PASSWORD_NUMERIC_SEQUENCE_ERROR
            message: quer escolher outra senha?
            title: a senha não pode conter sequências
            type: PASSWORD_VALIDATION
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
          example:
            status: 500
            message: 'api-sandbox.pismolabs.io executing POST https://api-sandbox.pismolabs.io/passport/v1/s2s/access-token'
  schemas:
    CardType:
      title: Card type
      type: string
      enum:
        - RECURRING
        #- PLASTIC
        #- CARD_ON_FILE
        - TEMPORARY
    CardStatus:
      title: Card status
      type: string
      enum:
        - NORMAL
        #- BLOCKED
        #- PENDING
        #- LOST
        #- ROBBED
        #- EXPIRED
        #- DAMAGED
        #- FRAUD
        #- WARNING
        #- CANCELED
        #- CREATED
        #- DELETED
    CardRequisition:
      title: Card Requisition [input]
      description: Card requisition object
      type: object
      properties:
        type:
          $ref: "#/components/schemas/CardType"
        password:
          $ref: "#/components/schemas/FourDigitPassword"
      additionalProperties: false
      required:
        - type
        - password
    CardCreated:
      title: Card Created
      description: Card created response object
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          $ref: "#/components/schemas/CardType"
        status:
          $ref: "#/components/schemas/CardStatus"
      additionalProperties: false
    FourDigitPassword:
      title: Card password
      description: A four digit password
      type: string
      pattern: ^\d{4}$
    Password:
      title: Card Password [input]
      description: A four digit password
      type: object
      properties:
        password:
          $ref: "#/components/schemas/FourDigitPassword"
      additionalProperties: false
      required:
        - password
    CardPassword:
      title: Card Password [output]
      description: Card's four digit password
      type: object
      properties:
        password:
          $ref: "#/components/schemas/FourDigitPassword"
      additionalProperties: false
      required:
        - password
    Card:
      title: Card info [output]
      description: A representation of a card resource
      type: object
      properties:
        id:
          type: integer
          format: int64
        printed_name:
          type: string
        number:
          type: string
          pattern: ^\d{16}$
        cvv:
          type: string
          pattern: ^\d{3}$
        expiration:
          type: string
          pattern: ^\d{2}/\d{4}$
        issued_at:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/CardStatus"
        type:
          $ref: "#/components/schemas/CardType"
      additionalProperties: false
      required:
        - id
        - printed_name
        - number
        - cvv
        - expiration
        - issued_at
        - status
        - type
    ProblemDetail:
      title: Problem detail [output]
      description: Describes a problem that has occurred (RFC 7807)
      type: object
      properties:
        status:
          type: integer
          format: int32
          enum:
            - 400
            - 401
            - 403
            - 404
            - 409
            - 410
            - 500
          readOnly: true
        type:
          type: string
          format: uri
          readOnly: true
        title:
          type: string
          readOnly: true
        code:
          type: string
        message:
          type: string
          readOnly: true
        errors:
          type: array
          items:
            type: object
          minItems: 0
          uniqueItems: true
          additionalProperties: false
      additionalProperties: false
