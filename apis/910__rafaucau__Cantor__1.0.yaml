penapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/rafaucau/Cantor/1.0.0
info:
  description: This is a simple API
  version: "1.0"
  title: Simple CantorAPI
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: currency
    description: Currency methods
  - name: user
    description: Operations about user
paths:
  /currency:
    get:
      tags:
        - currency
      summary: searches currency
      operationId: searchCurrency
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up for currency
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 10
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
        '400':
          description: bad input parameter
    post:
      tags:
        - currency
      summary: adds an currency item
      operationId: addCurrency
      description: Adds an item to the system
      responses:
        '201':
          description: Currency created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing currency already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
        description: Currency to add
    put:
      tags:
        - currency
      summary: Update an existing laprop
      operationId: updateCurrency
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Currency not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:currency'
            - 'read:currency'
      requestBody:
        $ref: ''#/components/schemas/Currency'
  /currency/findByStatus:
    get:
      tags:
        - currency
      summary: Find currency by ID
      description: Returns a currency
      operationId: getCurrencyById
      parameters:
        - name: currency_id
          in: path
          description: ID of currency to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
            application/xml:
              schema:
                $ref: '#/components/schemas/Currency'
        '400':
          description: Invalid ID supplied
        '404':
          description: Currency not found
      security:
        - api_key: []
    post:
      tags:
        - currency
      summary: Updates a currency in the store with form data
      operationId: updateCurrencyWithForm
      parameters:
        - name: currency_id
          in: path
          description: ID of currency that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:currency'
            - 'read:currency'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the currency
                  type: string
                status:
                  description: Updated status of the currency
                  type: string
    delete:
      tags:
        - currency
      summary: Deletes a currency
      operationId: deleteCurrency
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: currency_id
          in: path
          description: Currency id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Currency not found
      security:
        - petstore_auth:
            - 'write:Currency'
            - 'read:currency'
  '/currency/{currency_id}/uploadIcon':
    post:
      tags:
        - currency
      summary: uploads an icon
      operationId: uploadFile
      parameters:
        - name: currency_id
          in: path
          description: ID of currency to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - 'write:currency'
            - 'read:currency'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Currency :
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: USD
        price:
          type: number
          example: '1.23'
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies :
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true