openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  #- description: SwaggerHub API Auto Mocking
  #  url: https://virtserver.swaggerhub.com/linucleus/TPVImperium/1.0.0
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/linucleus/TPVImperium/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:8080/linucleus/TPVImperium/1.0.0
info:
  description:  |-
    Allows you to make payments on TPV, interrogate the status and READ NFC Cards.
    For security, must only be used from the **localhost** interface (127.0.0.1).
  version: "1.0.0"
  title: TPV API Control
  contact:
    email: alfredo@imperiumberri.com
    name: Alfredo Pons Menargues
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: operation
    description: 'Operations available to interact with the TPV.'
paths:
  /operation/status:
    get:
      tags:
        - operation
      summary: 'gets the status of the last operation.'
      operationId: getStatus
      description: 'gets the status of the last payment.'
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                #type: array
                #items:
                $ref: '#/components/schemas/StatusRequest'
        '400':
          description: 'Error Response.'
  /operation/printMessage:
    post:
      tags:
        - operation
      summary: 'Prints a message in screen.'
      operationId: doPrintMessage
      description: 'Prints a message in screen. The message will disappear from the display after **25 seconds** or when a new operation is performed, whichever occurs first.'
      responses:
        '200':
          description: 'ok.'
        '400':
          description: 'Error Response.'
        '401':
          description: 'This operation cannot be made in this moment.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  minLength: 0
                  maxLength: 32
                  example: 'Hello World'
                  description: 'The message to be shown on the screen.'
        required: true
  /operation/readNFC:
    post:
      tags:
        - operation
      summary: 'Read NFC card.'
      operationId: doReadNFC
      description: 'Read NFC card. If TPV is **Ingenico**, the NFC read operation will be canceled after 30 seconds. If you wish to continue reading cards, you must send another reading operation.'
      responses:
        '200':
          description: 'ok.'
        '400':
          description: 'Error Response.'
        '401':
          description: 'This operation cannot be made in this moment.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  minLength: 0
                  maxLength: 32
                  example: 'Please, swipe the card'
                  description: 'The message to be shown on the screen while waiting for the user to swipe the card.'
        required: true
  /operation/cancel:
    post:
      tags:
        - operation
      summary: 'Cancels the current operation.'
      operationId: OperationCancel
      description: 'Cancels the current operation.'
      responses:
        '200':
          description: 'Cancel ok.'
        '400':
          description: 'Error Response.'
  /operation/pay:
    post:
      tags:
        - operation
      summary: 'Make a payment.'
      operationId: doPayment
      description: 'Make a payment.'
      responses:
        '200':
          description: 'ok.'
        '400':
          description: 'Error Response.'
        '401':
          description: 'This operation cannot be made in this moment.'
        '404':
          description: 'Invalid value to pay.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Price'
        description: 'centims to pay'
        required: true
  /operation/preAuthorisation:
    post:
      tags:
        - operation
      summary: 'Make a pre-authorisation.'
      operationId: doPreauthorisation
      description: 'Make a pre-authorisation.'
      responses:
        '200':
          description: 'ok.'
        '400':
          description: 'Error Response.'
        '401':
          description: 'This operation cannot be made in this moment.'
        '404':
          description: 'Invalid value to pay.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Price'
        description: 'centims to pay'
        required: true
  /operation/confirmPreauthorisation:
    post:
      tags:
        - operation
      summary: 'Confirm a pre-authorisation.'
      operationId: doConfirmPreauthorisation
      description: 'Confirm a pre-authorisation.'
      responses:
        '200':
          description: 'ok.'
        '400':
          description: 'Error Response.'
        '401':
          description: 'This operation cannot be made in this moment.'
        '404':
          description: 'Invalid value to pay.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preauth'
        #description: 'centims to pay'
        required: true
  /operation/cancelPreauthorisation:
    post:
      tags:
        - operation
      summary: 'Cancel a pre-authorisation.'
      operationId: doCancelPreauthorisation
      description: 'Cancel a pre-authorisation.'
      responses:
        '200':
          description: 'ok.'
        '400':
          description: 'Error Response.'
        '401':
          description: 'This operation cannot be made in this moment.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - transactionNumber
              properties:
                transactionNumber:
                  type: string
                  minLength: 6
                  maxLength: 6
                  example: '54327899'
                  description: 'Transaction number approved by Redsys'
        required: true
components:
  schemas:
    Price:
      type: object
      properties:
        toPay:
          type: integer
          format: int32
          minimum: 1
          maximum: 2000
          example: 100
          description: 'Import to pay in centims'
    Preauth:
      type: object
      properties:
        toPay:
          type: integer
          format: int32
          minimum: 1
          maximum: 2000
          example: 100
          description: 'Import to pay in centims'
        transactionNumber:
          type: string
          minLength: 6
          maxLength: 6
          example: '54327899'
          description: 'Transaction number approved by Redsys'
    StatusRequest:
      type: object    
      required:
        - amount
        - epochPay
        - paymentMethods
      properties:
        amount:
          type: integer
          minimum: 1
          maximum: 1
          format: int32
          example: 100
          description: 'Total amount to pay in cents.'
        epoch:
          type: integer
          minimum: 0
          format: int64
          description: |
            If the operation has already ended, this value represents the epoch time when the last operation ended.
        status:
          type: string
          enum:
           - idle
           - bootingSystem
           - doingPay
           - waitConfirmPreauthorisation
           - payDone
           - payDenied
           - payCanceled
           - waitingRemoveCard
           - doingNFCScan
           - NFCReadDone
          description: |
            In order to perform a new operation, it is necessary to consult whether the device is in the idle state or in a completed operation. Then, you can launch a new operation if it's in status: idle, payDone, payDenied, payCanceled, waitConfirmPreauthorisation or NFCReadDone.
            
            Sort order:
             * `idle` - 'Nothing to do.'
             * `bootingSystem` - 'Booting the system. Loading system.'
             * `doingPay` - 'A payment or preauthorisation is being made now.'
             * `waitConfirmPreauthorisation` - 'A payment or preauthorisation is being made now.'
             * `payDone` - 'A payment or preauthorisation was done.'
             * `payDenied` - 'Payment or preauthorisation was denied.'
             * `payCanceled` - 'Payment or preauthorisation was canceled.'
             * `waitingRemoveCard` - 'Waiting for the card to be removed.'
             * `doingNFCScan` - 'Waiting for a user to pass the NFC card.'
             * `NFCReadDone` - 'An NFC card has been read.'
        cardPAN:
          type: string
          minLength: 12
          maxLength: 12
          example: '54327899****6969'
          description: 'The card PAN number'
        approvalCode:
          type: string
          minLength: 2
          maxLength: 2
          example: '06'
          description: 'Approval Code'
        authorisationNumber:
          type: string
          minLength: 2
          maxLength: 10
          example: '54327899'
          description: 'Authorisation number'
        transactionNumber:
          type: string
          minLength: 6
          maxLength: 6
          example: '54327899'
          description: 'Transaction number approved by Redsys'
        UID:
          type: string
          minLength: 8
          maxLength: 16
          example: 'ABFFCD69'
          description: 'The card PAN number'
