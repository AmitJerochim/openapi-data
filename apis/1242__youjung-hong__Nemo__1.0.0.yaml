openapi: 3.0.0
info:
  description: Nemo 서비스의 샘플 API 서버입니다.
  version: "1.0.0"
  title: Nemo
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/youjung-hong/Nemo/1.0.0
  - url: 'https://nemo.swagger.io/v2'
tags:
  - name: todo
    description: 할 일 목록
  - name: action
    description: 할 일에 대해 작업한 시간과 집중도를 기록

paths:
  /api/todos:
    get:
      tags:
        - todo
      summary: 모든 할 일 목록을 조회합니다.
      operationId: readAll
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
      security: 
        - todo_auth:
            - 'write:todos'
            - 'read:todos'
    post:
      tags:
        - todo
      summary: 새 할 일을 추가합니다.
      operationId: create
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: name and color are required
      security:
        - todo_auth:
            - 'write:todos'
            - 'read:todos'
      requestBody:
        $ref: '#/components/requestBodies/TodoItemForm'
  '/api/todos/{todoId}':
    get:
      tags:
        - todo
      summary: ID로 todo 아이템을 조회합니다.
      operationId: read
      parameters:
        - name: todoId
          in: path
          description: 찾고자 하는 todo 아이템의 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '204':
          description: Todo not found
      security:
        - api_key: []
    put:
      tags:
        - todo
      summary: 저장되어 있는 todo 아이템을 폼 데이터로 업데이트합니다.
      operationId: update
      parameters:
        - name: todoId
          in: path
          description: 업데이트할 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Todo'
        '204':
          description: Todo not found
        '400':
          description: name and color are required
      security:
        - petstore_auth:
            - 'write:todos'
            - 'read:todos'
      requestBody:
        $ref: '#/components/requestBodies/TodoItemForm'
    delete:
      tags:
        - todo
      summary: todo 아이템을 지웁니다.
      operationId: delete
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: todoId
          in: path
          description: 삭제할 todo 아이템의 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '204':
          description: Todo not found
      security:
        - petstore_auth:
            - 'write:todos'
            - 'read:todos'
  /api/actions:
    get:
      tags:
        - action
      summary: 모든 action 목록을 조회합니다.
      description: 날짜 또는 todo 아이템 ID를 기준으로 모두 가져옵니다
      operationId: readAllActions
      parameters:
        - name: date
          in: query
          description: action 목록을 조회할 날짜
          required: false
          schema:
            type: string
            format: date
        - name: todoId
          in: query
          description: action 목록을 조회할 todo 아이템 ID
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
        '400':
          description: Invalid query string value
      security:
        - action_auth:
            - 'write:actions'
            - 'read:actions'
    post:
      tags:
        - action
      summary: 할 일 목록에 대한 작업 기록을 생성합니다.
      operationId: createAction
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        '400':
          description: todoId and startAt are required
      security:
        - action_auth:
            - 'write:actions'
            - 'read:actions'
      requestBody:
        $ref: '#/components/requestBodies/TodoItemActionForm'
  /api/actions/{actionId}:
    get:
      tags:
        - action
      summary: action 정보를 id로 조회합니다.
      operationId: readAction
      parameters:
        - name: actionId
          in: path
          description: 찾고자 하는 action ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        '204':
          description: action not found
      security:
        - api_key: []
    put:
      tags:
        - action
      summary: 저장되어 있는 action 정보를 폼 데이터로 업데이트합니다.
      operationId: updateAction
      parameters:
        - name: actionId
          in: path
          description: 업데이트할 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        '204':
          description: action not found
        '400':
          description: todoId and startAt are required
      security:
        - action_auth:
            - 'write:actions'
            - 'read:actions'
      requestBody:
        $ref: '#/components/requestBodies/TodoItemActionForm'
    delete:
      tags:
        - action
      summary: 저장된 작업 기록을 삭제합니다.
      operationId: deleteAction
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: actionId
          in: path
          description: 삭제할 action 아이템의 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '404':
          description: action not found
      security:
        - action_auth:
            - 'write:actions'
            - 'read:actions'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    TodoItemForm:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
          default: '#48689a'
          description: 'todo 아이템의 색상코드'
      required:
        - name
        - color
    Todo:
      allOf:
        - $ref: '#/components/schemas/TodoItemForm'
        - type: object
          properties:  
            id:
              type: integer
              format: int64
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            deletedAt:
              type: string
              format: date-time
          required:
            - id
            - createdAt
            - updatedAt
            - deletedAt
    TodoItemActionForm:
      type: object
      properties:
        todoId:
          type: integer
          format: int64
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
      required:
        - todoId
        - startAt
    Action:
      allOf:
        - $ref: '#/components/schemas/TodoItemActionForm'
        - type: object
          properties:
            id:
              type: integer
              format: int64
            period:
              type: integer
              format: int64
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            deletedAt:
              type: string
              format: date-time
          required:
            - id
            - createdAt
            - updatedAt
            - deletedAt
  requestBodies:
    TodoItemForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TodoItemForm'
      description: 저장할 Todo 아이템 데이터
      required: true
    TodoItemActionForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TodoItemActionForm'
      description: 저장할 Action 데이터
      required: true
  securitySchemes:
    todo_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://api.swagger.io/oauth/dialog'
          scopes:
            'write:todos': modify todos in your account
            'read:todos': read your todos
    action_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://api.swagger.io/oauth/dialog'
          scopes:
            'write:actions': modify actions in your account
            'read:actions': read your actions
    api_key:
      type: apiKey
      name: api_key
      in: header
