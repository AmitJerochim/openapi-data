openapi: 3.0.0
info:
  version: "1.0.1"
  
  title: 'Punktual API'
  description: 'API for the Punktual Mobile Application'
  # put the contact info for your development or API team
  contact:
    email: me@anthony-dacruz.com  
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://d3cima.tech:8080

tags:
- name: Position
  description: All position related operations
- name: User Account
  description: User operations, like Login and Registering account
- name: Team
  description: Team operations, returning a list of users

paths:
  /team/all:
    get:
      tags:
        - Team
      responses:
        '200':
          description: Return all the team currently in storage
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/User'
  /position/register/{type}:
    post:
      description: | 
       Call this route when you enter a **geofence** or scan an **NFC tag**.
       > ⚠️ This will trigger notificationto the team according to t  especified  type
      tags:
        - Position
      parameters:
        - in: path
          required: true
          name: type
          schema:
            type: string
            enum: [PAPETERIE, CAMPUS]
        - in: query
          required: true
          name: userId
          schema:
            type: string
            example: UUID generated during a user registration
      requestBody:
        description: GPS Coordinate of the user at the moment of the request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
      responses:
        '202': 
          description: Notification sent to all users 
        '400':
          description: Missing data or malformed request
        '404':
          description: Specified user not found in storage, please register before to get an Id
  /login:
    post:
      summary: Try to log an already existing user by its username
      tags:
      - User Account
      requestBody:
        description: Data necessary to login a user
        required: true
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Return the full user object from the storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found on the server, register before login
        '400':
          description: Your request is malformed, or missing data
  /register:
    post:
      summary: Post a new User
      tags:
      - User Account
      requestBody:
        description: Necessary field for creating a User 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: Return the newly created User
          content: 
           application/json: 
             schema:
               $ref: '#/components/schemas/User'
        '409':
          description: User already exists, login instead
        '400':
          description: Your request is malformed, or missing data
components:
  schemas:
    PositionHistory:
      type: object
      properties:
        date:
          type: string
          format: date
          description: Stamp when this position has been declared to the server
        position:
          $ref: '#/components/schemas/Position'
        type:
          type: string
          enum: [PAPETERIE, CAMPUS]
          description: Type of location declared with this position
    Position:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          example: 46.9429801
        longitude:
          type: number
          example: -0.0438182
    UserLogin:
      type: object
      required:
        - username
        - pushToken
      properties:
        username:
          type: string
          example: 'roxorDu92'
        pushToken: 
          type: string
          description: |
           Notification Push used to trigger a notification to the user's device, this token is furnished
           by Firebase from an Android Device
    UserRegister:
      type: object
      required:
        - username
        - pushToken
      properties:
        username:
          type: string
          example: 'roxorDu92'
        pushToken: 
          type: string
          description: |
           Notification Push used to trigger a notification to the user's device, this token is furnished 
           by Firebase from an Android Device
    User:
      type: object
      required:
        - username
      properties:
        id:
         type: string
         format: uuid
         example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
        username:
          type: string
          example: 'roxorDu92'
        type:
          type: string
          enum: [STUDENT, TEACHER]
        pushToken: 
          type: string
          description: |
           Notification Push used to trigger a notification to the user's device, this token is furnished 
           by Firebase from an Android Device
        imageUrl:
          type: string
          format: url
          description: Profile Image for this user
        positionHistory:
          type: array
          items: 
            $ref: '#/components/schemas/PositionHistory'
