{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "TEXTGAIN",
    "url" : "https://api.textgain.com"
  } ],
  "info" : {
    "description" : "The TEXTGAIN API provides a set of URLs to which you can send `GET` and `POST` requests. Texts to be analyzed are sent through the `q` parameter. You also need to send your personal key with each request. The server responds with a JSON string, a standardized, compact data format.\n\n The API description lists the specifications for the `GET` requests. For alphabetic languages, this request method should suffice. For some languages, the URL might become too large to handle (resulting in a HTTP error 414 error). In these cases you can send your requests through `POST` in JSON, using the same parameters as the `GET` requests. The response will be identical.\n  \n",
    "version" : "1.1.9.1",
    "title" : "TEXTGAIN TEXT ANALYTICS API",
    "contact" : {
      "email" : "info@textgain.com",
      "url" : "https://textgain.com"
    },
    "license" : {
      "name" : "Proprietary",
      "url" : "https://textgain.com/terms"
    },
    "x-logo" : {
      "url" : "https://www.textgain.com/wp-content/uploads/2018/09/Textgain6-01.svg"
    }
  },
  "paths" : {
    "/diagnostics" : {
      "get" : {
        "tags" : [ "Administration" ],
        "summary" : "Check your available credits",
        "description" : "This endpoints shows the credits you spent in the last 24 hours (`USED`) and your total available credits, according to your subscription plan (`ALLOWANCE`). Calling this endpoint doesn't spend any credits.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns a dictionary detailing credits used in the last 24 hours and total allowance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "used" : {
                      "type" : "number"
                    },
                    "key" : {
                      "type" : "string"
                    },
                    "allowance" : {
                      "type" : "number"
                    }
                  }
                },
                "example" : {
                  "used" : 101,
                  "key" : "example-key",
                  "allowance" : 10000
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/language" : {
      "get" : {
        "tags" : [ "Identification" ],
        "summary" : "language identification",
        "description" : "Language identification detects the language a text is written in. Different languages use different characters. For example, Russian (Кирилица), Chinese (汉字) and Arabic (العربية) are easy to distinguish. Languages that use the same characters (e.g., Latin alphabet, abc) often have cues that set them apart (e.g., é ↔ ë).\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "$ref" : "#/components/parameters/Include"
        }, {
          "$ref" : "#/components/parameters/Exclude"
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns the predicted `ISO 639-1` language code in `lang`, a `confidence` measure, the `ISO 639-3` code and the canonical name for the language.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "confidence" : {
                      "$ref" : "#/components/schemas/Confidence"
                    },
                    "language" : {
                      "type" : "string"
                    },
                    "iso-693-3" : {
                      "type" : "string"
                    },
                    "name" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/adi" : {
      "get" : {
        "tags" : [ "Identification" ],
        "summary" : "Arabic Dialect Identification",
        "description" : "Arabic Dialect Identification detects the regional variant of Arabic a text is written in. This endpoint was developed in collaboration with [RedCrow.co](https://www.redcrow.co). \n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns the predicted Arabic dialect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "dialect" : {
                      "type" : "string",
                      "enum" : [ "Egypt", "Gulf", "Iraqi", "Levant", "Maghreb" ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/genre" : {
      "get" : {
        "tags" : [ "Identification" ],
        "summary" : "Genre identification",
        "description" : "Genre classification predicts the type of text, based on its length, tone of voice and content.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns the predicted `genre` and a `confidence` measure.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "confidence" : {
                      "$ref" : "#/components/schemas/Confidence"
                    },
                    "genre" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/tag" : {
      "get" : {
        "tags" : [ "Lexicon" ],
        "summary" : "Part-of-Speech Tagging",
        "description" : "Part-of-speech tagging identifies sentence breaks and word types. Words have different roles depending on how they are used. For example, the word shop can be a noun (a shop, object) or a verb (to shop, action).\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "en", "es", "cs", "da", "de", "fr", "it", false, "nl", "pt", "ru", "sv", "sw" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns a a list of sentences. Each sentence is a list of phrases (often also referred to as *chunks*. Each phrase is a list of dictionaries, with each dictionary describing the `tag` of the `word`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "text" : {
                      "type" : "array",
                      "minItems" : 1,
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "word" : {
                                "$ref" : "#/components/schemas/Token"
                              },
                              "tag" : {
                                "$ref" : "#/components/schemas/Tag"
                              }
                            }
                          },
                          "example" : [ {
                            "word" : "De",
                            "tag" : "DET"
                          }, {
                            "word" : "katjes",
                            "tag" : "NOUN"
                          }, {
                            "word" : "renden",
                            "tag" : "VERB"
                          } ]
                        }
                      }
                    },
                    "confidence" : {
                      "$ref" : "#/components/schemas/Confidence"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/lemma" : {
      "get" : {
        "tags" : [ "Lexicon" ],
        "summary" : "Lemmatization",
        "description" : "Lemmatization involves the morphological analysis of words to reduce them to their dictionary form (*lemma*). It is more powerful than stemming, which simply strips morphological prefixes, rather than taking into account a word's part-of-speech and allomorphic transformations. For example, \"bathing\" would be stemmed to \"bath\", but would be lemmatized as \"bathe\".\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "nl","en","de","es","pt","fr","pl" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns a a list of sentences. Each sentence is a list of phrases (often also referred to as *chunks*. Each phrase is a list of dictionaries, with each dictionary describing the `lemma` and the `tag` of the `word`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "text" : {
                      "type" : "array",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "word" : {
                                "$ref" : "#/components/schemas/Token"
                              },
                              "lemma" : {
                                "$ref" : "#/components/schemas/Lemma"
                              },
                              "tag" : {
                                "$ref" : "#/components/schemas/Tag"
                              }
                            }
                          },
                          "example" : [ {
                            "word" : "De",
                            "lemma" : "de",
                            "tag" : "DET"
                          }, {
                            "word" : "katjes",
                            "lemma" : "kat",
                            "tag" : "NOUN"
                          }, {
                            "word" : "renden",
                            "lemma" : "rennen",
                            "tag" : "VERB"
                          } ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/passive" : {
      "get" : {
        "tags" : [ "Readability" ],
        "summary" : "Passive Voice",
        "description" : "The use of the passive voice helps you to draw attention away from the agent of the action. Stylistically, however, it is often frowned upon, because it reduces readability. This classifier identifies the verbs involved in the passive voice of a sentence.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "de", "en", "nl" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns a list of dictionaries, indicating for each `word` whether it is part of a verbal unit in the `passive` voice.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "text" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "word" : {
                            "$ref" : "#/components/schemas/Token"
                          },
                          "passive" : {
                            "type" : "boolean"
                          }
                        }
                      },
                      "example" : [ {
                        "word" : "My",
                        "passive" : false
                      }, {
                        "word" : "beautiful",
                        "passive" : false
                      }, {
                        "word" : "car",
                        "passive" : false
                      }, {
                        "word" : "was",
                        "passive" : true
                      }, {
                        "word" : "completely",
                        "passive" : false
                      }, {
                        "word" : "totaled",
                        "passive" : true
                      }, {
                        "word" : ".",
                        "passive" : false
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/syllables" : {
      "get" : {
        "tags" : [ "Readability" ],
        "summary" : "Syllable counts / Hyphenation",
        "description" : "Readability metrics often rely on syllable counts. Hyphenation and syllabification go hand in hand. This classifier outputs hyphenation patterns and syllable counts. It is fairly robust to noisy language (see example *_awsome_).\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "af", "as", "be", "bg", "bn", "ca", "cop", "cs", "cu", "cy", "da", "de", "de-1901", "de-1996", "de-ch-1901", "el-monoton", "el-polyton", "en", "en-gb", "en-us", "eo", "es", "et", "eu", "fi", "fr", "fur", "ga", "gl", "grc", "gu", "hi", "hr", "hsb", "hu", "hy", "ia", "id", "is", "it", "ka", "kmr", "kn", "la", "la-x-classic", "la-x-liturgic", "lt", "lv", "ml", "mn-cyrl", "mr", "mul-ethi", false, "nl", "nn", "oc", "or", "pa", "pl", "pms", "pt", "rm", "ro", "ru", "sa", "sh-cyrl", "sh-latn", "sk", "sl", "sr-cyrl", "sv", "ta", "te", "th", "tk", "tr", "uk", "zh-latn-pinyin" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns a list with a dictionary for each `word`, describing the number of syllables (`n_syllables`) and the `hyphenation` pattern.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "text" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "word" : {
                            "$ref" : "#/components/schemas/Token"
                          },
                          "hyphenation" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string",
                              "format" : "utf-8"
                            }
                          },
                          "n_syllables" : {
                            "type" : "integer"
                          }
                        }
                      },
                      "example" : [ {
                        "word" : "awsome",
                        "hyphenation" : [ "aw", "some" ],
                        "n_syllables" : 2
                      }, {
                        "word" : "party",
                        "hyphenation" : [ "par", "ty" ],
                        "n_syllables" : 2
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/concepts" : {
      "get" : {
        "tags" : [ "Concept Extraction & Conversion" ],
        "summary" : "Concept Extraction",
        "description" : "Concept extraction identifies keywords, key phrases and ‘named entities’ – names of persons, products, organizations, locations, dates, and so on. Keywords are nouns that appear more often in a text, and often at the start of a text. Named entities frequently start with a capital letter (e.g., **B**arack **O**bama). Concept extraction can be used to summarize a text, or to compare if two texts discuss similar topics for example.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ar", "en", "es", "de", "fr", "it", "nl" ]
          }
        }, {
          "in" : "query",
          "name" : "top",
          "schema" : {
            "type" : "integer",
            "minimum" : 1,
            "maximum" : 50,
            "default" : 10
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns a list of the most salient `concept`s in the submitted text.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "concepts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string",
                        "format" : "utf-8"
                      },
                      "example" : [ "restheart", "database", "collection", "couple", "docker" ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/geocode" : {
      "get" : {
        "tags" : [ "Concept Extraction & Conversion" ],
        "summary" : "Geocoding",
        "description" : "Geocoding looks for place names in a text (in any language) and returns a list of possible locations, along with their longitude and latitude and country of origin. Note that the results are exhaustive! For example, Berlin, Germany as well as Berlin in Colombia (Berlín) will be returned, unless you specify `incude` or `exclude` parameters. The results are sorted according to population size (if known).\n\nIf you want to do language-specific filtering (for instance if you don't want to consider *From*, the town in Norway, you can combine this web service with the POS-tagger and only retain the NOUNs.\n\n__Try:__ `Eindhoven is pretty far from Россия.`\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "$ref" : "#/components/parameters/IncludeCountry"
        }, {
          "$ref" : "#/components/parameters/ExcludeCountry"
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns an exhaustive list of candidate locations found in the submitted data. Each location is represented as a dictionary describing `population` size (sort-parameter),  `longitude`, `latitude`, location `type` and `country.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "place_name" : {
                        "type" : "string",
                        "format" : "utf-8"
                      },
                      "country_code" : {
                        "type" : "string",
                        "format" : "utf-8"
                      },
                      "country" : {
                        "type" : "string",
                        "format" : "utf-8"
                      },
                      "population" : {
                        "type" : "integer"
                      },
                      "longitude" : {
                        "type" : "number",
                        "format" : "float"
                      },
                      "latitude" : {
                        "type" : "number",
                        "format" : "float"
                      }
                    }
                  },
                  "example" : [ {
                    "population" : 140702000,
                    "country" : "Russia",
                    "country_code" : "RU",
                    "longitude" : 105.318756,
                    "latitude" : 61.52401,
                    "type" : "country",
                    "place_name" : "Россия"
                  }, {
                    "population" : 209620,
                    "country" : "Netherlands",
                    "country_code" : "NL",
                    "longitude" : 5.47778,
                    "latitude" : 51.44083,
                    "type" : "town",
                    "place_name" : "Eindhoven"
                  }, {
                    "population" : 0,
                    "country" : "Russia",
                    "country_code" : "RU",
                    "longitude" : 54.98333,
                    "latitude" : 52.4,
                    "type" : "town",
                    "place_name" : "Россия"
                  }, {
                    "population" : 0,
                    "country" : "South Africa",
                    "country_code" : "ZA",
                    "longitude" : 18.64289,
                    "latitude" : -33.98233,
                    "type" : "town",
                    "place_name" : "Eindhoven"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/translate" : {
      "get" : {
        "tags" : [ "Concept Extraction & Conversion" ],
        "summary" : "Translation",
        "description" : "A simple translation engine that finds English translations for words in a text. This is word-based translation model and should not be considered as a machine translation solution.\n  __Try:__ `مقالة ويكيبيديا`\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ar" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns a list of `word`, `translation` dictionaries, for only those words the pipeline was able to translate.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "translation" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string",
                          "format" : "utf-8"
                        }
                      },
                      "word" : {
                        "type" : "string",
                        "format" : "utf-8"
                      }
                    }
                  },
                  "example" : [ {
                    "translation" : [ "Wikipedia" ],
                    "word" : "ويكيبيديا"
                  }, {
                    "translation" : [ "essay", "article" ],
                    "word" : "مقالة"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/sentiment" : {
      "get" : {
        "tags" : [ "Sentiment Analysis" ],
        "summary" : "Sentiment Analysis",
        "description" : "Sentiment analysis predicts whether a text is objective (fact) or subjective (opinion). Subjective text contains adverbs and adjectives with a positive or negative ‘polarity’ that capture the author’s personal opinion (e.g., *an excellent opportunity* or a *bad product*).\n\n  __Try:__ `q: Loved this book!` and `lang: en`\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "en", "es", "ar", "da", "de", "fr", "it", "ja", "nl", false, "pl", "pt", "ru", "sv", "sw", "zh" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns the predicted sentiment `polarity` (between -1 (negative) and 1 (positive)) and a `confidence` measure.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "polarity" : {
                      "type" : "number",
                      "format" : "float",
                      "minimum" : -1,
                      "maximum" : 1
                    },
                    "confidence" : {
                      "$ref" : "#/components/schemas/Confidence"
                    }
                  },
                  "example" : {
                    "polarity" : "0.88,",
                    "confidence" : 0.7
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/sentimenttag" : {
      "get" : {
        "tags" : [ "Sentiment Analysis" ],
        "summary" : "Sentiment Tagging",
        "description" : "Sentiment tagging provides for each word in a text a sentiment label (`0` (neutral), `1` (positive) or `-1` (negative). Note that these labels are assigned on a word-per-word basis and do not take into account contextual information, such as negation (\"not good\")\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "sw", "nl", "it", "fr", "en", "pt" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns a list of tokens, each token represented as a dictionary of `word`,`sentiment`-values",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "text" : {
                      "type" : "array",
                      "minItems" : 1,
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "word" : {
                            "$ref" : "#/components/schemas/Token"
                          },
                          "tag" : {
                            "type" : "string",
                            "enum" : [ -1, 0, 1 ]
                          }
                        }
                      }
                    }
                  },
                  "example" : [ {
                    "sentiment" : 1,
                    "word" : "Cool"
                  }, {
                    "sentiment" : 0,
                    "word" : "books"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "forbidden (Available to Professional Subscriptions and up)"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/age" : {
      "get" : {
        "tags" : [ "Profiling" ],
        "summary" : "Age Classification",
        "description" : "Age prediction estimates whether a text is written by an adolescent or an adult. Online, adolescents use more informal language, including abbreviated utterances (*omg*, *wow*) and mood (*awesome*, *lame*). Adolescents tend to talk about school, parents, and partying. Adults tend talk about work, children, health, and use more complex sentence structures.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "en", "es", "de", "fr", "nl" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns the predicted `age` range (`25-` or `25+`) and a `confidence` measure.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "age" : {
                      "type" : "string",
                      "enum" : [ "25-", "25+" ]
                    },
                    "confidence" : {
                      "$ref" : "#/components/schemas/Confidence"
                    }
                  },
                  "example" : {
                    "age" : "25-",
                    "confidence" : 0.75
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/gender" : {
      "get" : {
        "tags" : [ "Profiling" ],
        "summary" : "Gender Classification",
        "description" : "Gender prediction estimates whether a text is written by a man or a woman. Statistically, women tend to talk more about people and relationships (family, friends), while men are more interested in objects and things (e.g., cars, games). As a result, women will use more personal pronouns (*I, you, we*) in a social context and men will use more determiners (*a, an, the*) and more quantifiers (*one, many*).\n\n__DISCLAIMER:__ We acknowledge that gender is not a binary matter, but we currently cannot predict a more fine-grained classification.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "$ref" : "#/components/parameters/Name"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "en", "es", "da", "de", "fi", "fr", "it", "nl", false, "pl", "pt", "sv" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns the predicted `gender` (`m`ale or `f`emale) and a confidence measure.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "gender" : {
                      "type" : "string",
                      "enum" : [ "f", "m" ]
                    },
                    "confidence" : {
                      "$ref" : "#/components/schemas/Confidence"
                    }
                  },
                  "example" : {
                    "age" : "f",
                    "confidence" : 0.95
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/gendertag" : {
      "get" : {
        "tags" : [ "Profiling" ],
        "summary" : "Gender Tagging",
        "description" : "Gender tagging provides for each word in a text a `male`, `female` or `neutral` tag. These tags are estimated on observed language usage by male and female writers. Gender tagging differs from gender prediction, in that it indicates *which words* the respective genders have been observed to use more in writing, as opposed to measuring typical male vs female writing style.\n\n  __Disclaimer:__ these values are taken from large corpora and reflect the gender bias patterns present in the data.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "de", "en", "es", "fr", "it", "nl", "pl", "pt", "sv" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns a list of tokens, each token represented as a dictionary of `word`,`gender`-values",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "text" : {
                      "type" : "array",
                      "minItems" : 1,
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "word" : {
                            "$ref" : "#/components/schemas/Token"
                          },
                          "tag" : {
                            "type" : "string",
                            "enum" : [ "n", "m", "f" ]
                          }
                        }
                      }
                    }
                  },
                  "example" : [ {
                    "gender" : "f",
                    "word" : "She"
                  }, {
                    "gender" : "m",
                    "word" : "destroys"
                  }, {
                    "gender" : "f",
                    "word" : "spiders"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "forbidden (Available to Enterprise Subscriptions and up)"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/education" : {
      "get" : {
        "tags" : [ "Profiling" ],
        "summary" : "Education Prediction",
        "description" : "Education prediction estimates whether a text displays basic or advanced writing skills. Statistically, people with higher education will use more formal language and use more punctuation marks (__, ; :__), correct spelling and capitalization, longer words and sentences and less emoji (cf. idk lol just talkin ☺☺☺).\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns the predicted `education` level (low(`-`) or high(`+`)) and a `confidence` measure.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "education" : {
                      "type" : "string",
                      "enum" : [ "-", "+" ]
                    },
                    "confidence" : {
                      "$ref" : "#/components/schemas/Confidence"
                    }
                  },
                  "example" : {
                    "education" : "-",
                    "confidence" : 0.88
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/oejtstag" : {
      "get" : {
        "tags" : [ "Profiling" ],
        "summary" : "Personality Tagging -BETA-",
        "description" : "This endpoint provideds for each word a classification according to the *Open Extended Jungian Type Scale*, an open-source version of the well-known MBTI™ typology. The words are scored according to their salience with respect to the typology dimension.\n\n  The classifier will output 4 scores, 1 for each of the following dimenions:\n  \n    * Introversion vs Extraversion (I vs E)\n    * Intuition vs Sensing  (N vs S)\n    * Feeling vs Thinking (F vs T)\n    * Perception vs Judging (P vs J)\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "en" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns a a list of sentences. Each sentence is a list of phrases (often also referred to as *chunks*). Each phrase is a list of dictionaries, with each dictionary describing the `word` and the `rating` of the word according to 4 out of 8 OEJTS-dimensions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "text" : {
                      "type" : "array",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "word" : {
                                "$ref" : "#/components/schemas/Token"
                              },
                              "rating" : {
                                "type" : "object",
                                "properties" : {
                                  "I" : {
                                    "$ref" : "#/components/schemas/Confidence"
                                  },
                                  "E" : {
                                    "$ref" : "#/components/schemas/Confidence"
                                  },
                                  "N" : {
                                    "$ref" : "#/components/schemas/Confidence"
                                  },
                                  "S" : {
                                    "$ref" : "#/components/schemas/Confidence"
                                  },
                                  "F" : {
                                    "$ref" : "#/components/schemas/Confidence"
                                  },
                                  "T" : {
                                    "$ref" : "#/components/schemas/Confidence"
                                  },
                                  "P" : {
                                    "$ref" : "#/components/schemas/Confidence"
                                  },
                                  "J" : {
                                    "$ref" : "#/components/schemas/Confidence"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example" : [ [ [ {
                  "word" : "thoughtful",
                  "rating" : {
                    "I" : 0.32,
                    "P" : 0.92,
                    "N" : 0.22,
                    "F" : 0.95
                  }
                }, {
                  "word" : "introverts",
                  "rating" : {
                    "I" : 1.0,
                    "J" : 0.95,
                    "T" : 0.7,
                    "N" : 0.92
                  }
                }, {
                  "word" : "awesome",
                  "rating" : {
                    "P" : 0.95,
                    "S" : 0.17,
                    "E" : 0.69,
                    "T" : 0.13
                  }
                }, {
                  "word" : "extroverts",
                  "rating" : {
                    "P" : 0.41,
                    "S" : 0.41,
                    "E" : 1.0,
                    "F" : 0.91
                  }
                } ] ] ]
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    },
    "/personality" : {
      "get" : {
        "tags" : [ "Profiling" ],
        "summary" : "Personality Prediction",
        "description" : "Personality prediction estimates whether a text is written by an extraverted or an introverted person. Extraverts tend to be more sociable, assertive and playful, while introverts are more solitary, reserved and shy. As a result, extraverts will use *we* more often, and more positive adjectives and less formal language. Introverts will use *I* more often, and they employ a broader vocabulary.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Text"
        }, {
          "in" : "query",
          "name" : "lang",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "en", "nl" ]
          }
        }, {
          "$ref" : "#/components/parameters/Key"
        } ],
        "responses" : {
          "200" : {
            "description" : "The server returns the predicted `personality`-type (`I`ntrovert or `E`xtravrt) and a `confidence` measure.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "education" : {
                      "type" : "string",
                      "enum" : [ "-", "+" ]
                    },
                    "confidence" : {
                      "$ref" : "#/components/schemas/Confidence"
                    }
                  },
                  "example" : {
                    "personality" : "I",
                    "confidence" : 0.88
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "429" : {
            "description" : "too many requests (upgrade your license or wait till tomorrow)"
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "IncludeCountry" : {
        "name" : "include",
        "in" : "query",
        "description" : "Specify the [`alpha-2 code(s)`](https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes) of the country or countries you want to cover in the output .",
        "schema" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/components/schemas/Country"
          }
        }
      },
      "ExcludeCountry" : {
        "name" : "exclude",
        "in" : "query",
        "description" : "Specify the [`alpha-2 code(s)`](https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes) of the country or countries you want to cover in the output.",
        "schema" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/components/schemas/Country"
          }
        }
      },
      "Include" : {
        "name" : "include",
        "in" : "query",
        "description" : "Specify the languages you want to include in the results, in case you are sure about the languages a text may be in.",
        "schema" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/components/schemas/Language"
          }
        }
      },
      "Exclude" : {
        "name" : "exclude",
        "in" : "query",
        "description" : "List of languages you want to exclude from the results, in case you are sure your texts are not in that language.",
        "schema" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/components/schemas/Language"
          }
        }
      },
      "Text" : {
        "name" : "q",
        "in" : "query",
        "description" : "UTF-8 encoded text",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "utf-8",
          "maxLength" : 3000
        }
      },
      "Key" : {
        "name" : "key",
        "in" : "query",
        "description" : "Your unique API key",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "Name" : {
        "name" : "by",
        "in" : "query",
        "description" : "Name, nickname, handle",
        "schema" : {
          "type" : "string",
          "format" : "utf-8"
        }
      }
    },
    "schemas" : {
      "Country" : {
        "type" : "string",
        "enum" : [ "ac", "ad", "ae", "af", "ag", "ai", "al", "am", "ao", "aq", "ar", "as", "at", "au", "aw", "ax", "az", "ba", "bb", "bd", "be", "bf", "bg", "bh", "bi", "bj", "bl", "bm", "bn", "bo", "bq", "br", "bs", "bt", "bw", "by", "bz", "ca", "cc", "cd", "cf", "cg", "ch", "ci", "ck", "cl", "cm", "cn", "co", "cr", "cu", "cv", "cw", "cx", "cy", "cz", "de", "dg", "dj", "dk", "dm", "do", "dz", "ea", "ec", "ee", "eg", "eh", "er", "es", "et", "ez", "fi", "fj", "fk", "fm", "fo", "fr", "ga", "gb", "gd", "ge", "gf", "gg", "gh", "gi", "gl", "gm", "gn", "gp", "gq", "gr", "gs", "gt", "gu", "gw", "gy", "hk", "hn", "hr", "ht", "hu", "ic", "id", "ie", "il", "im", "in", "io", "iq", "ir", "is", "it", "je", "jm", "jo", "jp", "ke", "kg", "kh", "ki", "km", "kn", "kp", "kr", "kw", "ky", "kz", "la", "lb", "lc", "li", "lk", "lr", "ls", "lt", "lu", "lv", "ly", "ma", "mc", "md", "me", "mf", "mg", "mh", "mk", "ml", "mm", "mn", "mo", "mp", "mq", "mr", "ms", "mt", "mu", "mv", "mw", "mx", "my", "mz", "na", "nc", "ne", "nf", "ng", "ni", "nl", false, "np", "nr", "nu", "nz", "om", "pa", "pe", "pf", "pg", "ph", "pk", "pl", "pm", "pn", "pr", "ps", "pt", "pw", "py", "qa", "re", "ro", "rs", "ru", "rw", "sa", "sb", "sc", "sd", "se", "sg", "sh", "si", "sj", "sk", "sl", "sm", "sn", "so", "sr", "ss", "st", "sv", "sx", "sy", "sz", "ta", "tc", "td", "tf", "tg", "th", "tj", "tk", "tl", "tm", "tn", "to", "tr", "tt", "tv", "tw", "tz", "ua", "ug", "um", "un", "us", "uy", "uz", "va", "vc", "ve", "vg", "vi", "vn", "vu", "wf", "ws", "xk", "ye", "yt", "za", "zm", "zw" ]
      },
      "Language" : {
        "type" : "string",
        "enum" : [ "af", "am", "an", "ar", "as", "ast", "av", "az", "ba", "bar", "bcl", "be", "bg", "bn", "bo", "bpy", "br", "bs", "bxr", "ca", "cbk", "ce", "ceb", "co", "cs", "cv", "cy", "da", "de", "diq", "dv", "el", "en", "eo", "es", "et", "eu", "fa", "fi", "fr", "fy", "ga", "gd", "gl", "gn", "gom", "gu", "gv", "he", "hi", "hif", "hr", "hsb", "ht", "hu", "hy", "ia", "id", "ie", "ilo", "io", "is", "it", "ja", "jbo", "jv", "ka", "kk", "km", "kn", "ko", "krc", "ku", "kv", "kw", "ky", "la", "lb", "lez", "lmo", "lo", "lrc", "lt", "lv", "mai", "mg", "mhr", "min", "mk", "ml", "mn", "mr", "mrj", "ms", "mt", "mwl", "my", "myv", "mzn", "nap", "nds", "ne", "new", "nl", "nn", false, "oc", "or", "os", "pa", "pam", "pfl", "pl", "pms", "pnb", "ps", "pt", "qu", "rm", "ro", "ru", "rue", "sa", "sah", "sc", "scn", "sco", "sd", "sh", "si", "sk", "sl", "so", "sq", "sr", "su", "sv", "sw", "ta", "te", "tg", "th", "tk", "tl", "tr", "tt", "tyv", "ug", "uk", "ur", "uz", "vec", "vep", "vi", "vo", "war", "wuu", "xal", "xmf", "yi", "yo", "yue", "zh" ]
      },
      "Lemma" : {
        "type" : "string",
        "format" : "utf-8"
      },
      "Token" : {
        "type" : "string",
        "format" : "utf-8"
      },
      "Tag" : {
        "type" : "string",
        "enum" : [ "NOUN", "VERB", "PUNC", "PREP", "DET", "ADJ", "ADV", "NUM", "PRON", "CONJ", "X", "PRT", "INTJ" ]
      },
      "Confidence" : {
        "type" : "number",
        "format" : "float",
        "minimum" : 0,
        "maximum" : 1,
        "example" : 0.96
      }
    }
  }
}