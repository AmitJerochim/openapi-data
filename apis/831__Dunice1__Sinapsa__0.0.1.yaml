penapi: 3.0.0
info:
  version: '0.0.1'
  title: 'Sinapsa'
  description: 'Documentation'
paths: 
  /books/fetchBooks:
    get: 
      tags:
       - Books
      summary: 'Get all books'
      description: 'Returns a list of available books'
      responses:
        200:
          description: 'A list of books'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/book"
        400:
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/register:
    post:
      tags:
        - Authorization
      summary: 'Register a new user'
      description: 'Register a new user'
      requestBody:
        description: 'Information about user to register'
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
        400: 
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        403:
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/login:
    post: 
      tags:
        - Authorization
      summary: 'Log in to Sinapsa'
      description: 'Return an access token for successfully logged in user'
      requestBody:
        description: User's credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        403:
          description: Authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'        
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
  /auth/register/facebook:
    post:
      tags:
        - Authorization
      summary: 'Register through Facebook'
      description: 'Return an access token for successfully registered user'
      requestBody:
        description: 'Information about user to register'
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name: 
                  type: string
                email:
                  type: string
                picture:
                  type: object
                  properties:
                    data: 
                      type: object
                      properties:
                        url:
                          type: string
        required: true
      responses:
        201:
          description: 'Successfull operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/login/facebook:
    post: 
      tags:
        - Authorization
      summary: 'Log in through Facebook'
      description: 'Return an access token for successfully logged in user'
      requestBody:
        description: "User's email to log in"
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
        required: true
      responses:
        201:
          description: 'Successfull operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/register/vkontakte:
    post:
      tags:
        - Authorization
      summary: 'Register user through VK'
      description: 'Return an access token, name, surname and email of succesfully registered user'
      requestBody:
        description: "Information about user to register"
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
        required: true
      responses:
        200:
          description: 'Successfull operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  surname:
                    type: string
                  email:
                    type: string
                  token:
                    type: string
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/login/vkontakte:
    post:
      tags:
        - Authorization
      summary: 'Log in through VK'
      description: 'Return an access token of successfully logged in user'
      requestBody:
        description: "User email to log in"
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
        required: true
      responses:
        201:
          description: 'Successfull operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /poems/fetchPoems:
    get:
      tags:
        - Poems
      summary: 'Get all poems'
      description: 'Return a list of all poems, all competitions and all categories'
      security:
        - bearerAuth: []
      responses:
        200: 
          description: 'Successfull operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    type: array
                    items:
                      $ref: '#/components/schemas/poems'
                  competitions:
                    type: array
                    items:
                      $ref: '#/components/schemas/competitions'
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/categories'
        400:
          description: Error request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: 
                    type: string
                  message:
                    type: string
  /poems/fetchPoemOfTheDay:
    get:
      tags:
        - Poems
      summary: 'Get poem of the day'
      description: 'Return ID of poem of the day'
      security: 
        - bearerAuth: []
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'        
  /poems/fetchRandomPoem:
    get:
      tags:
        - Poems
      summary: 'Get a random poem'
      description: 'Return ID of random poem'
      security: 
        - bearerAuth: []
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error' 
  /poems/addToFavorites:
    post:
      tags:
        - Poems
      summary: Add poem to favourites
      description: "Return an object with properties user's id and poem's id"
      security: 
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                id:
                  type: integer
        required: true          
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataValues:
                    $ref: '#/components/schemas/usersPoems'
                
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error' 
  /poems/deleteFromFavorites:
    post:
      tags:
        - Poems
      summary: 'Delete poem from favorite list'
      description: 'Delete target poem from favorite list '
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                id:
                  type: integer
        required: true   
      responses:
        200:
          description: 'Successful operation'
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /poems/fetchFavoriteStatus:
    post:
      tags:
        - Poems
      summary: 'Check if poem is favorite'
      description: 'Return true if poem is favourite for this user and false if not'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                id:
                  type: integer
        required: true   
      responses:
        200: 
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: boolean
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /poems/fetchFavoritePoems:
    post:
      tags:
        - Poems
      summary: 'Get favourite poems for current user'
      description: "Return a list of poems favourite for logged in user"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
        required: true
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: 
                      type: integer
                    user_id:
                      type: integer
                    poem_id:
                      type: integer
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
                    Poem:
                      $ref: '#/components/schemas/poems'
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
  /poems/fetchCategory/{id}:
    get:
      tags:
        - Poems
      summary: 'Get all subcategories from this category'
      description: 'Return list of subcategories from selected category'
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The category ID  
      responses:
        200: 
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/subcategories"
        400:
          description: Error request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: 
                    type: string
                  message:
                    type: string
  /users:
    get:
      tags:
        - Users
      summary: 'Get all users'
      description: 'Return a list of all users'
      security:
        - bearerAuth: []
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/users"
        400:
          description: Error request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/fetchUser:
    post:
      tags:
        - Users
      summary: 'Get information about current user'
      description: 'Return full information about current user'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                loginEmail:
                  type: string
      responses:
        200:
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    type: object
                    properties:
                      id: 
                        type: integer
                      nickName:
                        type: string
                      firstName:
                        type: string
                      lastName:  
                        type: string
                      email: 
                        type: string
                      image: 
                        type: string
                      birthDate:
                        type: string
                        format: date
  /users/uploadImage:
    post:
      tags:
        - Users
      summary: 'Upload an avatar'
      description: 'Return url of new image'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string 
                base64:
                  type: string
                  format: byte
      responses:
        200:
          description: 'Successful operation'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    type: object
                    properties:
                      image:
                        type: string
  /users/update/{id}:
    put:
      tags:
        - Users
      summary: 'Edit user profile'
      description: 'Return new information about user'
      security: 
       - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user ID  
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                emailNew:
                  type: string 
                firstNameNew:
                  type: string
                lastNameNew:
                  type: string
                nickNameNew:
                  type: string
                birthDateNew:
                  type: string 
                  format: date
      responses:
        200:
          description: 'Successful operation'
          content: 
            application/json:
              schema:
                type: object
                properties:
                  emailNew:
                    type: string 
                  firstNameNew:
                    type: string
                  lastNameNew:
                    type: string
                  nickNameNew:
                    type: string
                  birthDateNew:
                    type: string 
                    format: date
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    
  schemas:
    book: 
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        image:
          type: string
        readLink:
          type: string
        buyLink:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    competitions:
      type: object
      properties:
        id: 
          type: integer
        title:
          type: string
        description: 
          type: string
        image:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    users:
      type: object
      properties:
        id: 
          type: integer
        nickName:
          type: string
        name:
          type: string
        surname:  
          type: string
        email: 
          type: string
        password:
          type: string
        image: 
          type: string
        birthDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    poems: 
      type: object  
      properties:
        id: 
          type: integer
        title:
          type: string
        image: 
          type: string
        audio:
          type: string
        video: 
          type: string
        poemText: 
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        subcategories:
          type: object
          properties:
            subcategory_id:
              type: integer
            subcategory:
              type: object
              properties:
                title:
                  type: string
    usersPoems:
      type: object
      properties:
        id: 
          type: integer
        user_id:
          type: integer
        poem_id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    categories:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time  
    subcategories:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
   
    error:
      type: object
      properties:
        message: 
          type: string
servers:
 - url: https://sinapsa.dunice-testing.com/api