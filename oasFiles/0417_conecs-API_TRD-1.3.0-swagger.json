{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "CONECS API",
    "description" : "Description technique des méthodes d'appel utilisables pour effectuer l'init du commerçant et les méthodes de paiement liées à l'acceptation du TRD en e-commerce ; valeurs d'exemple idAppelant : BBBBBBB ; idConecs : 1999000.",
    "version" : "1.3.0"
  },
  "servers" : [ {
    "url" : "https://qlf-api-trd.conecs.fr/conecs-api/",
    "description" : "Serveur de Recette"
  }, {
    "url" : "https://api-trd.conecs.fr/conecs-api/",
    "description" : "Serveur de Production"
  } ],
  "security" : [ {
    "app_id" : [ ]
  } ],
  "components" : {
    "securitySchemes" : {
      "app_id" : {
        "type" : "apiKey",
        "description" : "",
        "name" : "apiKey",
        "in" : "header"
      }
    },
    "schemas" : {
      "ModeleRequeteInit" : {
        "type" : "object",
        "properties" : {
          "idCONECS" : {
            "type" : "string",
            "description" : "Reprise de l'identifiant commerçant"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Reprise de l'identifiant Appelant"
          },
          "dateRequete" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la requête par l’appelant avec offset par rapport au temps UTC ISO 8601"
          }
        }
      },
      "ModeleReponseInit" : {
        "type" : "object",
        "properties" : {
          "statusCode" : {
            "type" : "string",
            "description" : "Un code sur 3 chiffres indiquant le résultat de l’initialisation"
          },
          "statusText" : {
            "type" : "string",
            "description" : "Un texte précisant le résultat de l’initialisation"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Reprise de l'identifiant Appelant"
          },
          "idCONECS" : {
            "type" : "string",
            "description" : "Reprise de l'identifiant commerçant"
          },
          "dateReponse" : {
            "type" : "string",
            "description" : "date et heure de la réponse ISO 8601"
          },
          "plageEmetteurs" : {
            "type" : "string",
            "description" : "Un tableau d’objets « PlageEmetteur » éventuellement vide"
          }
        }
      },
      "ModeleRequeteMultiInit" : {
        "type" : "object",
        "properties" : {
          "dateRequete" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la requête par l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Identifiant de l’appelant attribué par CONECS 7 digits"
          },
          "idCONECSList" : {
            "type" : "string",
            "description" : "Tableau contenant les identifiants commerçant (idCONECS) pour lesquels l’initialisation est demandée"
          }
        }
      },
      "ModeleReponseMultiInit" : {
        "type" : "object",
        "properties" : {
          "statusCode" : {
            "type" : "string",
            "description" : "Un code sur 3 chiffres indiquant le résultat de l’initialisation"
          },
          "statusText" : {
            "type" : "string",
            "description" : "Un texte précisant le résultat de l’initialisation"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Reprise de l'identifiant Appelant"
          },
          "idCONECS" : {
            "type" : "string",
            "description" : "Reprise de l'identifiant commerçant"
          },
          "dateReponse" : {
            "type" : "string",
            "description" : "date et heure de la réponse ISO 8601"
          },
          "plageEmetteurs" : {
            "type" : "string",
            "description" : "Un tableau d’objets « PlageEmetteur » éventuellement vide"
          }
        }
      },
      "ModeleRequeteAuto" : {
        "type" : "object",
        "properties" : {
          "dateRequete" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la requête par l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Identifiant de l’appelant attribué par CONECS 7 digits"
          },
          "idCONECS" : {
            "type" : "string",
            "description" : "Identifiant du commerçant attribué par CONECS 7 digits"
          },
          "idTransaction" : {
            "type" : "string",
            "description" : "Identifiant unique de la transaction pour le commerçant 4 à 32 caractères alphanumériques"
          },
          "pan" : {
            "type" : "string",
            "description" : "Le numéro de la carte 16 digits avec clé de Luhn OK"
          },
          "dateValidite" : {
            "type" : "string",
            "description" : "La date de validité de la carte au format MMAA"
          },
          "cvv" : {
            "type" : "string",
            "description" : "Le cryptogramme visuel de la carte"
          },
          "montantDemande" : {
            "type" : "string",
            "description" : "Montant demandé exprimé en centimes d’euro 3 à 12 digits >= 100"
          }
        }
      },
      "ModeleReponseAuto" : {
        "type" : "object",
        "properties" : {
          "dateReponse" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la réponse à l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "statusCode" : {
            "type" : "string",
            "description" : "Un code sur 3 chiffres indiquant le résultat de l’autorisation"
          },
          "statusText" : {
            "type" : "string",
            "description" : "Un texte précisant le résultat de l’autorisation"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Identifiant de l’appelant attribué par CONECS 7 digits"
          },
          "idCONECS" : {
            "type" : "string",
            "description" : "Identifiant du commerçant attribué par CONECS 7 digits"
          },
          "idTransaction" : {
            "type" : "string",
            "description" : "Identifiant unique de la transaction pour le commerçant 4 à 32 caractères alphanumériques"
          },
          "montantDemande" : {
            "type" : "string",
            "description" : "Montant demandé exprimé en centimes d’euro 3 à 12 digits >= 100"
          },
          "panMasque" : {
            "type" : "string",
            "description" : "Le pan de la demande masqué – 6 premiers et  4 derniers digits préservés"
          },
          "raisonSociale" : {
            "type" : "string",
            "description" : "Raison sociale du commerçant issu des données de téléparamétrage"
          },
          "siret" : {
            "type" : "string",
            "description" : "N° SIRET du commerçant issu des données de téléparamétrage"
          },
          "emetteur" : {
            "type" : "string",
            "description" : "Nom de l’émetteur de la carte TRD"
          },
          "reponseCb2a" : {
            "type" : "string",
            "description" : "Code réponse (champ 39) donné dans la réponse à la demande d’autorisation CB2A"
          },
          "textReponseCb2a" : {
            "type" : "string",
            "description" : "Texte explicatif correspondant au code réponse CB2A"
          },
          "montantAutorise" : {
            "type" : "string",
            "description" : "Montant effectivement autorisé exprimé en centimes d’euro. Est identique au montant demandé en cas d’autorisation totale. Est nul en cas de refus ou d’erreur."
          },
          "numeroAutorisation" : {
            "type" : "string",
            "description" : "Le numéro d’autorisation obtenu dans la réponse CB2A  (champ 38) en cas d’autorisation totale ou partielle"
          },
          "messagePorteur" : {
            "type" : "string",
            "description" : "Le contenu du champ 44 type BC s’il a été fourni dans la réponse à la demande d’autorisation CB2A"
          }
        }
      },
      "ModeleRequeteRedr" : {
        "type" : "object",
        "properties" : {
          "dateRequete" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la requête par l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Identifiant de l’appelant attribué par CONECS 7 digits"
          },
          "idCONECS" : {
            "type" : "string",
            "description" : "Identifiant du commerçant attribué par CONECS 7 digits"
          },
          "idTransaction" : {
            "type" : "string",
            "description" : "Identifiant unique de la transaction pour le commerçant 4 à 32 caractères alphanumériques"
          },
          "motifRedressement" : {
            "type" : "string",
            "description" : "Un texte précisant le motif du redressement (optionnel)"
          }
        }
      },
      "ModeleReponseRedr" : {
        "type" : "object",
        "properties" : {
          "dateReponse" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la réponse à l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "statusCode" : {
            "type" : "string",
            "description" : "Un code sur 3 chiffres indiquant le résultat de l’autorisation"
          },
          "statusText" : {
            "type" : "string",
            "description" : "Un texte précisant le résultat de l’autorisation"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Identifiant de l’appelant attribué par CONECS 7 digits"
          },
          "idCONECS" : {
            "type" : "string",
            "description" : "Identifiant du commerçant attribué par CONECS 7 digits"
          },
          "idTransaction" : {
            "type" : "string",
            "description" : "Identifiant unique de la transaction pour le commerçant 4 à 32 caractères alphanumériques"
          },
          "reponseCb2a" : {
            "type" : "string",
            "description" : "Code réponse (champ 39) donné dans la réponse à la demande d’autorisation CB2A"
          },
          "textReponseCb2a" : {
            "type" : "string",
            "description" : "Texte explicatif correspondant au code réponse CB2A"
          }
        }
      },
      "ModeleRequeteCapt" : {
        "type" : "object",
        "properties" : {
          "dateRequete" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la requête par l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Identifiant de l’appelant attribué par CONECS 7 digits"
          },
          "idCONECS" : {
            "type" : "string",
            "description" : "Identifiant du commerçant attribué par CONECS 7 digits"
          },
          "idTransaction" : {
            "type" : "string",
            "description" : "Identifiant unique de la transaction pour le commerçant 4 à 32 caractères alphanumériques"
          },
          "montantCapture" : {
            "type" : "string",
            "description" : "Montant de l’achat effectif (en centimes). Il peut être inférieur au montant autorisé, si absent, par défaut c’est le montant autorisé qui sera utilisé"
          }
        }
      },
      "ModeleReponseCapt" : {
        "type" : "object",
        "properties" : {
          "dateReponse" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la réponse à l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "statusCode" : {
            "type" : "string",
            "description" : "Un code sur 3 chiffres indiquant le résultat de l’autorisation"
          },
          "statusText" : {
            "type" : "string",
            "description" : "Un texte précisant le résultat de l’autorisation"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Identifiant de l’appelant attribué par CONECS 7 digits"
          },
          "idCONECS" : {
            "type" : "string",
            "description" : "Identifiant du commerçant attribué par CONECS 7 digits"
          },
          "idTransaction" : {
            "type" : "string",
            "description" : "Identifiant unique de la transaction pour le commerçant 4 à 32 caractères alphanumériques"
          }
        }
      },
      "ModeleRequeteStatutCarte" : {
        "type" : "object",
        "properties" : {
          "dateRequete" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la requête par l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Identifiant de l’appelant attribué par CONECS 7 digits"
          },
          "pan" : {
            "type" : "string",
            "description" : "Le numéro de la carte 16 digits avec clé de Luhn OK"
          },
          "dateValidite" : {
            "type" : "string",
            "description" : "La date de validité de la carte au format MMAA"
          }
        }
      },
      "ModeleReponseStatutCarte" : {
        "type" : "object",
        "properties" : {
          "dateReponse" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la réponse à l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "statusCode" : {
            "type" : "string",
            "description" : "Un code sur 3 chiffres indiquant le résultat de l’autorisation"
          },
          "statusText" : {
            "type" : "string",
            "description" : "Un texte précisant le résultat de l’autorisation"
          },
          "emetteurTrd" : {
            "type" : "string",
            "description" : "Nom de l’émetteur de la carte TRD"
          },
          "carteActive" : {
            "type" : "boolean",
            "description" : "Carte active ou non"
          },
          "statutCarte" : {
            "type" : "string",
            "description" : "Précisions sur le statut de la carte"
          }
        }
      },
      "ModeleRequeteDispoJour" : {
        "type" : "object",
        "properties" : {
          "dateRequete" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la requête par l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "idAppelant" : {
            "type" : "string",
            "description" : "Identifiant de l’appelant attribué par CONECS 7 digits"
          },
          "pan" : {
            "type" : "string",
            "description" : "Le numéro de la carte 16 digits avec clé de Luhn OK"
          },
          "dateValidite" : {
            "type" : "string",
            "description" : "La date de validité de la carte au format MMAA"
          }
        }
      },
      "ModeleReponseDispoJour" : {
        "type" : "object",
        "properties" : {
          "dateReponse" : {
            "type" : "string",
            "description" : "Date et heure d’envoi de la réponse à l’appelant avec offset par rapport au temps UTC ISO 8601"
          },
          "statusCode" : {
            "type" : "string",
            "description" : "Un code sur 3 chiffres indiquant le résultat de l’autorisation"
          },
          "statusText" : {
            "type" : "string",
            "description" : "Un texte précisant le résultat de l’autorisation"
          },
          "emetteurTrd" : {
            "type" : "string",
            "description" : "Nom de l’émetteur de la carte TRD"
          },
          "solde" : {
            "type" : "integer",
            "description" : "Montant disponible pour la jounée, exprimé en centimes d'euros"
          }
        }
      }
    }
  },
  "paths" : {
    "/initialisation" : {
      "post" : {
        "description" : "Méthode WS d'initialisation du contrat commerçant avant tout échange par les méthodes de paiement. La requête mentionne l'idAppelant et la référence contrat commerçant (IDCONECS). La réponse renvoie les emetteurs et plages de BIN acceptées par le commerçant.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ModeleRequeteInit"
              },
              "example" : {
                "idConecs" : "1999000",
                "dateRequete" : "2019-01-08T14:55:00+01",
                "idAppelant" : "BBBBBBB"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Réponse correcte description en retour des plages de BIN éligibles, possibilité plusieurs plages par émetteur",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseInit"
                },
                "example" : {
                  "plageEmetteurs" : [ {
                    "emetteur" : "ETR1",
                    "first" : "4836XXXXXXXXXXXXXXX",
                    "last" : "4836XXXXXXXXXXXXXXX"
                  }, {
                    "emetteur" : "ETR1",
                    "first" : "5075WWWWWWWWWWWWWWW",
                    "last" : "5075WWWWWWWWWWWWWWW"
                  }, {
                    "emetteur" : "ETR2",
                    "first" : "5075YYYYYYYYYYYYYYY",
                    "last" : "5075YYYYYYYYYYYYYYY"
                  }, {
                    "emetteur" : "ETR3",
                    "first" : "5075ZZZZZZZZZZZZZZZ",
                    "last" : "5075ZZZZZZZZZZZZZZZ"
                  } ],
                  "statusCode" : "200",
                  "statusMessage" : "OK",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "dateReponse" : "2019-01-08T14:55:00+01"
                }
              }
            }
          },
          "400" : {
            "description" : "Requête invalide (XXXXXX manquant ou invalide) - Champs XXXXX manquant ou invalide dans la requête d’initialisation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseInit"
                },
                "example" : {
                  "plageEmetteurs" : [ ],
                  "statusCode" : "400",
                  "statusMessage" : "dateRequete invalide (ecart temporel trop important): 2019-02-13T15:50:12+0100",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "dateReponse" : "2019-02-13T16:12:06+01"
                }
              }
            }
          },
          "403" : {
            "description" : "Accès interdit (idAppelant inconnu ou Erreur Certificat ou Erreur HMAC)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseInit"
                },
                "example" : {
                  "plageEmetteurs" : [ ],
                  "statusCode" : "403",
                  "statusMessage" : "Accés interdit",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "dateReponse" : "2019-02-13T16:15:47+01"
                }
              }
            }
          },
          "500" : {
            "description" : "Erreur technique serveur",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseInit"
                }
              }
            }
          },
          "503" : {
            "description" : "WEB Service Initialisation indisponible",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseInit"
                },
                "example" : {
                  "plageEmetteurs" : [ ],
                  "statusCode" : "503",
                  "statusMessage" : "WEB Service Initialisation indisponible",
                  "idAppelant" : "BBBBBBB",
                  "dateReponse" : "2018-08-28T11:00:26+02"
                }
              }
            }
          }
        }
      }
    },
    "/multiInit" : {
      "post" : {
        "description" : "Méthode WS de mise à jour des initialisations des contrats commerçant. La requête mentionne l'idAppelant et la liste des contrats commerçant (IDCONECS). La réponse renvoie les emetteurs éligibles et plages de BIN acceptées pour chaque commerçant.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ModeleRequeteMultiInit"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Réponse correcte liste de commerçant mise à jour",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseMultiInit"
                },
                "example" : {
                  "initializationDatas" : [ {
                    "idConecs" : "IDCONECS1",
                    "plageEmetteurs" : [ {
                      "emetteur" : "ETR1",
                      "first" : "5075WWWWWWWWWWWWWWW",
                      "last" : "5075WWWWWWWWWWWWWWW"
                    }, {
                      "emetteur" : "ETR2",
                      "first" : "5075YYYYYYYYYYYYYYY",
                      "last" : "5075YYYYYYYYYYYYYYY"
                    }, {
                      "emetteur" : "ETR3",
                      "first" : "5075ZZZZZZZZZZZZZZZ",
                      "last" : "5075ZZZZZZZZZZZZZZZ"
                    } ]
                  }, {
                    "idConecs" : "IDCONECS2",
                    "plageEmetteurs" : [ {
                      "emetteur" : "ETR1",
                      "first" : "5075WWWWWWWWWWWWWWW",
                      "last" : "5075WWWWWWWWWWWWWWW"
                    }, {
                      "emetteur" : "ETR2",
                      "first" : "5075YYYYYYYYYYYYYYY",
                      "last" : "5075YYYYYYYYYYYYYYY"
                    }, {
                      "emetteur" : "ETR3",
                      "first" : "5075ZZZZZZZZZZZZZZZ",
                      "last" : "5075ZZZZZZZZZZZZZZZ"
                    } ]
                  }, {
                    "idConecs" : "IDCONECS3",
                    "plageEmetteurs" : [ {
                      "emetteur" : "ETR1",
                      "first" : "5075WWWWWWWWWWWWWWW",
                      "last" : "5075WWWWWWWWWWWWWWW"
                    }, {
                      "emetteur" : "ETR2",
                      "first" : "5075YYYYYYYYYYYYYYY",
                      "last" : "5075YYYYYYYYYYYYYYY"
                    }, {
                      "emetteur" : "ETR3",
                      "first" : "5075ZZZZZZZZZZZZZZZ",
                      "last" : "5075ZZZZZZZZZZZZZZZ"
                    } ]
                  } ],
                  "statusCode" : "200",
                  "statusMessage" : "OK",
                  "idAppelant" : "",
                  "dateReponse" : "2018-10-26T16:07:26+02"
                }
              }
            }
          },
          "206" : {
            "description" : "Requête invalide au moins un idCONECS inconnu",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseMultiInit"
                },
                "example" : {
                  "initilizationDatas" : [ ],
                  "statusCode" : "206",
                  "statusMessage" : "Au moins un idConecs inconnu",
                  "idAppelant" : "BBBBBBB",
                  "dateReponse" : "2018-08-24T17:04:49+02"
                }
              }
            }
          },
          "400" : {
            "description" : "Requête invalide (XXXXXX manquant ou invalide)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseMultiInit"
                },
                "example" : {
                  "initializationDatas" : [ ],
                  "statusCode" : "400",
                  "statusMessage" : "idConecsList manquant ou vide",
                  "idAppelant" : "BBBBBBB",
                  "dateReponse" : "2018-11-06T18:10:04+01"
                }
              }
            }
          },
          "403" : {
            "description" : "Accès interdit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseMultiInit"
                },
                "example" : {
                  "initializationDatas" : [ ],
                  "statusCode" : "403",
                  "statusMessage" : "Erreur HMAC",
                  "idAppelant" : "BBBBBBB",
                  "dateReponse" : "2019-02-11T11:12:59+01"
                }
              }
            }
          },
          "500" : {
            "description" : "Erreur technique serveur",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseMultiInit"
                },
                "example" : {
                  "initializationDatas" : [ ],
                  "statusCode" : "500",
                  "statusMessage" : "Erreur technique serveur",
                  "idAppelant" : "BBBBBBB",
                  "dateReponse" : "2018-11-06T18:10:04+01"
                }
              }
            }
          },
          "503" : {
            "description" : "WEB Service Initialisation indisponible",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseMultiInit"
                },
                "example" : {
                  "initializationDatas" : [ ],
                  "statusCode" : "503",
                  "statusMessage" : "WEB Service Initialisation indisponible pour idAppelant XXXXXXX",
                  "idAppelant" : "BBBBBBB",
                  "dateReponse" : "2018-11-06T18:10:04+01"
                }
              }
            }
          }
        }
      }
    },
    "/autorisation" : {
      "post" : {
        "description" : "Méthode WS de paiement. La requête correspond à une demande d'autorisation monétique propagée à CONECS. La réponse porte les informations permettant de conclure si le paiement client est refusé ou accepté, et ce totalement ou partiellement. En réponse les valeurs montant demandé et montant autorisé permettent la gestion de l'autorisation partielle, l'Appelant doit pouvoir gérer le complément de paiement induit par une telle cinématique dans l'étape plus globale de paiement panier. Fonction avancée de paiement accéléré : dans ce cas absence obligatoire du paramètre cvv",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ModeleRequeteAuto"
              },
              "example" : {
                "pan" : "4838XX******XXXX",
                "dateValidite" : "1022",
                "cvv" : "342",
                "montantDemande" : "1000",
                "idConecs" : "1999000",
                "idTransaction" : "TEST417986110",
                "dateRequete" : "2018-10-31T10:45:16+01",
                "idAppelant" : "BBBBBBB"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Autorisation approuvée totalement ou partiellement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseAuto"
                },
                "example" : {
                  "montantDemande" : "0510",
                  "panMasque" : "5075XX******XXXX",
                  "raisonSociale" : "LIBELLE PLAQUE COMMERCANT 75 PARIS",
                  "siret" : "YYYYYYYYYYYYYY",
                  "emetteurTrd" : "Sodexo",
                  "reponseCb2a" : "10",
                  "textReponseCb2a" : "approuvée partiellement",
                  "montantAutorise" : "300",
                  "numeroAutorisation" : "470515",
                  "messagePorteur" : "4SOLDE : 120,00 E",
                  "statusCode" : "200",
                  "statusMessage" : "Autorisation approuvée partiellement",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "92986",
                  "dateReponse" : "2018-08-14T17:57:04+02"
                }
              }
            }
          },
          "201" : {
            "description" : "ATTENTION \"StatusCode 600\" Autorisation refusée",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseAuto"
                },
                "example" : {
                  "montantDemande" : "1500",
                  "panMasque" : "5075XX******XXXX",
                  "raisonSociale" : "LIBELLE PLAQUE COMMERCANT 75 PARIS",
                  "siret" : "YYYYYYYYYYYYYY",
                  "emetteurTrd" : "ETR1",
                  "reponseCb2a" : "57",
                  "textReponseCb2a" : "transaction non permise à ce porteur",
                  "messagePorteur" : "4DISPO CE JOUR  0.00",
                  "statusCode" : "600",
                  "statusMessage" : "Autorisation declinée",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "MMMMM",
                  "dateReponse" : "2018-09-24T14:54:23+02"
                }
              }
            }
          },
          "400" : {
            "description" : "Requête invalide",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseAuto"
                },
                "example" : {
                  "montantDemande" : "1280",
                  "panMasque" : "5075XX******XXXX",
                  "statusCode" : "400",
                  "statusMessage" : "Requête invalide (idConecs manquant ou invalide)",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "A199999",
                  "idTransaction" : "90668",
                  "dateReponse" : "2019-02-12T13:41:11+01"
                }
              }
            }
          },
          "403" : {
            "description" : "Accès interdit ou idAppelant inconnu",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseAuto"
                },
                "example" : {
                  "montantDemande" : "1280",
                  "panMasque" : "5075XX******XXXX",
                  "statusCode" : "403",
                  "statusMessage" : "Accés interdit",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "90668",
                  "dateReponse" : "2019-02-12T13:40:14+01"
                }
              }
            }
          },
          "404" : {
            "description" : "idCONECS inconnu",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseAuto"
                },
                "example" : {
                  "montantDemande" : "1280",
                  "panMasque" : "5075XX******XXXX",
                  "emetteurTrd" : "ETR1",
                  "statusCode" : "404",
                  "statusMessage" : "idConecs inconnu: 1999000",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "90668",
                  "dateReponse" : "2019-02-12T13:39:08+01"
                }
              }
            }
          },
          "409" : {
            "description" : "Transaction existante",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseAuto"
                },
                "example" : {
                  "montantDemande" : "1280",
                  "panMasque" : "5075XX******XXXX",
                  "statusCode" : "409",
                  "statusMessage" : "Transaction existante : idConecs: 1999000 idTransaction: 90668",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "90668",
                  "dateReponse" : "2019-02-12T13:37:37+01"
                }
              }
            }
          },
          "500" : {
            "description" : "Erreur technique serveur",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseAuto"
                }
              }
            }
          },
          "502" : {
            "description" : "Reponse erronée à autorisation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseAuto"
                }
              }
            }
          },
          "503" : {
            "description" : "Service Autorisation indisponible",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseAuto"
                },
                "example" : {
                  "montantDemande" : "0100",
                  "panMasque" : "5075XX******XXXX",
                  "statusCode" : "503",
                  "statusMessage" : "WEB Service Autorisation indisponible",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "1207",
                  "dateReponse" : "2018-08-17T18:00:23+02"
                }
              }
            }
          },
          "504" : {
            "description" : "No response from Acquirer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseAuto"
                },
                "example" : {
                  "montantDemande" : 159.0,
                  "panMasque" : "5075XX******XXXX",
                  "raisonSociale" : "LIBELLE PLAQUE COMMERCANT 75 PARIS",
                  "siret" : "YYYYYYYYYYYYYY",
                  "emetteurTrd" : "ETR1",
                  "statusCode" : "504",
                  "statusMessage" : "No response from Acquirer",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "80987",
                  "dateReponse" : "2019-02-01T16:13:22+01"
                }
              }
            }
          }
        }
      }
    },
    "/redressement" : {
      "post" : {
        "description" : "Méthode WS d'annulation online d'une demande d'autorisation. La demande de redressement s'effectue en référence à la demande d'autorisation. Elle permet au porteur de carte de ne pas être débité à tort et de retrouver un solde journalier intact. Les demandes de remboursement offline (par fichier) ne sont pas gérées. La cinématique d'annulation doit intervenir avant la demande de capture de la transaction porteur.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ModeleRequeteRedr"
              },
              "example" : {
                "dateRequete" : "2019-01-08T14:55:00+01",
                "idAppelant" : "BBBBBBB",
                "idConecs" : "1999000",
                "idTransaction" : "90668",
                "motifRedressement" : "Motif de redressement"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Réponse correcte",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseRedr"
                },
                "example" : {
                  "reponseCb2a" : "00",
                  "descriptionReponseCb2a" : "transaction approuvée",
                  "statusCode" : "200",
                  "statusMessage" : "Redressement pris en compte",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "90668",
                  "dateReponse" : "2018-08-20T11:54:08+02"
                }
              }
            }
          },
          "202" : {
            "description" : "Transaction déja redressée",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseRedr"
                },
                "example" : {
                  "statusCode" : "202",
                  "statusMessage" : "Transaction annulee - Redressement inutile",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "11600",
                  "dateReponse" : "2018-08-20T12:04:01+02"
                }
              }
            }
          },
          "400" : {
            "description" : "Requête invalide",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseRedr"
                },
                "example" : {
                  "statusCode" : "400",
                  "statusMessage" : "Requête invalide (idConecs manquant ou invalide)",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "12",
                  "idTransaction" : "20100",
                  "dateReponse" : "2019-02-12T19:18:44+01"
                }
              }
            }
          },
          "403" : {
            "description" : "Accès interdit ou idAppelant inconnu",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseRedr"
                },
                "example" : {
                  "statusCode" : "403",
                  "statusMessage" : "Accés interdit",
                  "idAppelant" : "QUALIF5",
                  "idConecs" : "1999000",
                  "dateReponse" : "2019-02-12T19:48:17+01"
                }
              }
            }
          },
          "404" : {
            "description" : "Transaction inexistante (idCONECS=\" XXXXXX\" idTransaction=\"YYYYYY\" )",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseRedr"
                },
                "example" : {
                  "statusCode" : "404",
                  "statusMessage" : "Transaction inexistante : idConecs: 1999000 idTransaction: 20101",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "20101",
                  "dateReponse" : "2019-02-13T14:22:58+01"
                }
              }
            }
          },
          "409" : {
            "description" : "Transaction remisée - Redressement interdit (La transaction est en état ABOUTIE ou ATTENTE_REMISE)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseRedr"
                },
                "example" : {
                  "statusCode" : "409",
                  "statusMessage" : "Transaction remisée - Redressement interdit",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "31121",
                  "dateReponse" : "2019-02-13T15:01:39+01"
                }
              }
            }
          },
          "500" : {
            "description" : "Erreur technique serveur",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseRedr"
                }
              }
            }
          },
          "503" : {
            "description" : "WEB Service Redressement indisponible pour idAppelant",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseRedr"
                }
              }
            }
          }
        }
      }
    },
    "/capture" : {
      "post" : {
        "description" : "La requête correspond à une demande de capture après une demande d'autorisation acceptée. La capture acceptée permettra une propagation en remise de la transaction et initiera le processus de règlement du commerçant. Fonction avancée de capture sur montant partiel : dans ce cas le montant capturé montantCapture est obligatoirement explicite et inférieur au montant autorisé de l'autorisation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ModeleRequeteCapt"
              },
              "example" : {
                "dateRequete" : "2019-01-08T14:55:00+01",
                "idAppelant" : "BBBBBBBB",
                "idConecs" : "1999000",
                "idTransaction" : "90668",
                "montantCapture" : "1500"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Réponse correcte",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseCapt"
                },
                "example" : {
                  "statusCode" : "200",
                  "statusMessage" : "Capture prise en compte (Traitement sans erreur)",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "20100",
                  "dateReponse" : "2018-09-05T18:21:44+02"
                }
              }
            }
          },
          "202" : {
            "description" : "Transaction remisée - Capture inutile (La transaction est en état ABOUTIE ou ATTENTE_REMISE)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseCapt"
                },
                "example" : {
                  "statusCode" : "202",
                  "statusMessage" : "Transaction remisee - Capture inutile",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "31121",
                  "dateReponse" : "2019-02-13T15:24:07+01"
                }
              }
            }
          },
          "400" : {
            "description" : "Requête invalide (Champs XXXXX manquant ou invalide dans la requête de capture)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseCapt"
                },
                "example" : {
                  "statusCode" : "400",
                  "statusMessage" : "Requête invalide (idConecs manquant ou invalide)",
                  "idAppelant" : "BBBBBBB",
                  "idTransaction" : "31121",
                  "dateReponse" : "2019-02-13T15:28:27+01"
                }
              }
            }
          },
          "403" : {
            "description" : "Accès interdit ou Erreur Certificat ou Erreur HMAC",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseCapt"
                },
                "example" : {
                  "statusCode" : "403",
                  "statusMessage" : "Erreur HMAC",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "61639",
                  "dateReponse" : "2019-02-13T15:32:43+01"
                }
              }
            }
          },
          "404" : {
            "description" : "Transaction inexistante (idCONECS=\" XXXXXX\" idTransaction=\"YYYYYY\" )",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseCapt"
                },
                "example" : {
                  "statusCode" : "404",
                  "statusMessage" : "Transaction inexistante : idConecs: 1999000 idTransaction: 61999",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "61999",
                  "dateReponse" : "2018-09-06T18:32:40+02"
                }
              }
            }
          },
          "409" : {
            "description" : "Transaction annulée ou non-aboutie - Capture interdite",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseCapt"
                },
                "example" : {
                  "statusCode" : "409",
                  "statusMessage" : "Transaction non aboutie - Capture interdite",
                  "idAppelant" : "BBBBBBB",
                  "idConecs" : "1999000",
                  "idTransaction" : "4333",
                  "dateReponse" : "2019-02-13T15:40:18+01"
                }
              }
            }
          },
          "500" : {
            "description" : "Erreur technique serveur",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseCapt"
                }
              }
            }
          },
          "503" : {
            "description" : "WEB Service Capture indisponible pour idAppelant",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseCapt"
                }
              }
            }
          }
        }
      }
    },
    "/statutCarte" : {
      "post" : {
        "description" : "La méthode permet de récupérer le statut d'une carte passée en paramètre. Si ce statut indique que la carte existe, l'appelant peut alors envisager d'enregistrer les données carte en vue de réaliser ensuite des demandes de paiement sans CVV",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ModeleRequeteStatutCarte"
              },
              "example" : {
                "dateRequete" : "2019-01-08T14:55:00+01",
                "idAppelant" : "BBBBBBB",
                "pan" : "5075XXXXXXXXXXXX",
                "dateValidite" : "MMAA"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Réponse correcte",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseStatutCarte"
                },
                "example" : {
                  "statusCode" : "200",
                  "statusMessage" : "OK",
                  "emetteurTrd" : "",
                  "carteActive" : true,
                  "statutCarte" : "",
                  "dateReponse" : "2018-09-05T18:21:44+02"
                }
              }
            }
          },
          "400" : {
            "description" : "Requête invalide (Champs XXXXX manquant ou invalide dans la requête de capture)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseStatutCarte"
                },
                "example" : {
                  "statusCode" : "400",
                  "statusMessage" : "Requête invalide (idConecs manquant ou invalide)",
                  "dateReponse" : "2019-02-13T15:28:27+01"
                }
              }
            }
          },
          "403" : {
            "description" : "Accès interdit ou Erreur Certificat ou Erreur HMAC",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseStatutCarte"
                },
                "example" : {
                  "statusCode" : "403",
                  "statusMessage" : "Erreur HMAC",
                  "dateReponse" : "2019-02-13T15:32:43+01"
                }
              }
            }
          },
          "500" : {
            "description" : "Erreur technique serveur",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseStatutCarte"
                },
                "example" : {
                  "statusCode" : "500",
                  "statusMessage" : "Erreur technique serveur",
                  "dateReponse" : "2019-02-13T15:32:43+01"
                }
              }
            }
          },
          "502" : {
            "description" : "Autres erreurs techniques",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseStatutCarte"
                },
                "example" : {
                  "statusCode" : "502",
                  "statusMessage" : "Autres erreurs techniques",
                  "dateReponse" : "2019-02-13T15:32:43+01"
                }
              }
            }
          },
          "503" : {
            "description" : "WEB Service StatutCarte indisponible pour idAppelant",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseStatutCarte"
                },
                "example" : {
                  "statusCode" : "503",
                  "statusMessage" : "WEB Service StatutCarte indisponible",
                  "dateReponse" : "2019-02-13T15:32:43+01"
                }
              }
            }
          }
        }
      }
    },
    "/dispoJour" : {
      "post" : {
        "description" : "La méthode permet de récupérer le montant disponible pour la journée pour une carte donnée, montant exprimé en centimes d'euros",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ModeleRequeteDispoJour"
              },
              "example" : {
                "dateRequete" : "2019-01-08T14:55:00+01",
                "idAppelant" : "BBBBBBB",
                "pan" : "5075XXXXXXXXXXXX",
                "dateValidite" : "MMAA"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Réponse correcte",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseDispoJour"
                },
                "example" : {
                  "statusCode" : "200",
                  "statusMessage" : "OK",
                  "emetteurTrd" : "",
                  "solde" : "1574",
                  "dateReponse" : "2018-09-05T18:21:44+02"
                }
              }
            }
          },
          "400" : {
            "description" : "Requête invalide (Champs XXXXX manquant ou invalide dans la requête de capture)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseDispoJour"
                },
                "example" : {
                  "statusCode" : "400",
                  "statusMessage" : "Requête invalide (idConecs manquant ou invalide)",
                  "dateReponse" : "2019-02-13T15:28:27+01"
                }
              }
            }
          },
          "403" : {
            "description" : "Accès interdit ou Erreur Certificat ou Erreur HMAC",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseDispoJour"
                },
                "example" : {
                  "statusCode" : "403",
                  "statusMessage" : "Erreur HMAC",
                  "dateReponse" : "2019-02-13T15:32:43+01"
                }
              }
            }
          },
          "500" : {
            "description" : "Erreur technique serveur",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseDispoJour"
                },
                "example" : {
                  "statusCode" : "500",
                  "statusMessage" : "Erreur technique serveur",
                  "dateReponse" : "2019-02-13T15:32:43+01"
                }
              }
            }
          },
          "502" : {
            "description" : "Autres erreurs techniques",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModeleReponseDispoJour"
                },
                "example" : {
                  "statusCode" : "502",
                  "statusMessage" : "Autres erreurs techniques",
                  "dateReponse" : "2019-02-13T15:32:43+01"
                }
              }
            }
          },
          "503" : {
            "description" : "WEB Service DispoJour indisponible pour idAppelant",
            "content" : {
              "application/json" : {
                "example" : {
                  "statusCode" : "503",
                  "statusMessage" : "WEB Service DispoJour indisponible",
                  "dateReponse" : "2019-02-13T15:32:43+01"
                }
              }
            }
          }
        }
      }
    }
  }
}