penapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Tashiqa/Mailverifier/1.0.0
info:
  description: This is MailVerifier application interfaces which enables developers to consume services defined by OAS3 standards.
  version: "1.0.0"
  title: Mailverifier API 
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  termsOfService: https://tashiqa.firebaseapp.com/en/legal/privacy-policy/
  contact:
    url: https://tashiqa.firebaseapp.com/en/contact/
    name: Tashiqa
    email: kumarvivek@tashiqa.com
tags:
  - name: verify
    description: Operations related with data verification and validations
paths:
  /verify/email:
    post:
      tags:
        - verify
      summary: verify email address
      operationId: verifyEmail
      description: |
        By passing the emailID in the body in right format, you can verify the emailId
        existance together with its additional parameters.
      requestBody:
        description: body with data to be validated
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/email'
        required: true
      responses:
        '200':
          description: 'Email verification infromation and related metadata'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emailVerificationResponse'
        '400':
          description: 'Invalid body format'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidBody'
        '401':
          description: 'Unauthorized request without JWT token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
  /verify/phone:
    post:
      tags:
        - verify
      summary: verify phone number
      operationId: verifyPhone
      description: |
        By passing the phone number together with country code in the body,
        you can verify the phone number validity for that region.
      requestBody:
        description: body with data to be validated
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/phone'
      responses:
        '200':
          description: 'Phone validation infromation and related metadata'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/phoneVerificationResponse'
        '400':
          description: 'Invalid body format'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidBody'
        '401':
          description: 'Unauthorized request without JWT token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
  /verify/address:
    post:
      tags:
        - verify
      summary: adds an inventory item
      operationId: verifyAddress
      description: Adds an item to the system
      requestBody:
        description: body with data to be validated
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/address'
      responses:
        '200':
          description: 'Address verification infromation and related metadata'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addressVerificationResponse'
        '400':
          description: 'Invalid body format'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidBody'
        '401':
          description: 'Unauthorized request without JWT token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
components:
  schemas:
    email:
      required:
        - emailId
      properties:
        emailId:
          type: string
          format: email
          example: testemail@testserver.com
      type: object
    phone:
      required:
        - phoneNumber
        - countryCode
      properties:
        countryCode:
          type: string
          example: +49
        phoneNumber:
          type: string
          example: 17687414824
      type: object
    address:
      required:
        - phoneNumber
        - countryCode
      properties:
        lookupType:
          type: string
          enum:
          - freeForm
          - component
        address:
          type: object
          properties:
            addressLine1:
              type: string
              example: 1501 Page Mill Road
            addressLine2:
              type: string
              example: 
            city:
              type: string
              example: Palo Alto
            state:
              type: string
              example: CA
            country:
              type: string
              example: United States
            zipcode:
              type: string
              example: 94304
      type: object
    emailVerificationResponse:
      properties:
        transactionId:
          type: string
          format: id
          example: "5e4d9ecc1da3a009886093af"
        email:
          type: string
          format: email
          example: testuser@testserver.com
        hostExists:
          type: boolean
          example: true
        validFormat:
          type: boolean
          example: true
        fullInbox:
          type: boolean
          example: true
        deliverable:
          type: boolean
          example: true
        disposable:
          type: boolean
          example: true
        displayName:
          type: string
          format: name
          example: Test User
        catchAll:
          type: boolean
          example: true
        roleAccount:
          type: boolean
          example: true
        spamEmail:
          type: boolean
          example: true
        gravatar:
          type: boolean
          example: true
        deliverabilityScore:
          type: number
          example: 80
        photoUrl:
          type: string
          format: url
          example: https://gravatar.com/id
      type: object
    phoneVerificationResponse:
      properties:
        transactionId:
          type: string
          format: id
          example: "5e4d9ecc1da3a009886093af"
        countryCode:
          type: string
          example: +49
        phoneNumber:
          type: string
          example: 17687414824
        valid:
          type: boolean
          example: true
        phoneNumberType:
          type: string
          enum:
          - FIXED_LINE
          - MOBILE
          - FIXED_LINE_OR_MOBILE
          - TOLL_FREE
          - PREMIUM_RATE
          - SHARED_COST
          - VOIP
          - PERSONAL_NUMBER
          - PAGER
          - UAN
          - VOICEMAIL
          - UNKNOWN
          example: FIXED_LINE
      type: object
    addressVerificationResponse:
      properties:
        transactionId:
          type: string
          format: id
          example: "5e4d9ecc1da3a009886093ag"
        address:
          type: string
          example: "1501 Page Mill Road"
        valid:
          type: boolean
          example: true
        type:
          type: string
          example: bus stop
        co-ordinates:
          type: object
          properties:
            latitude:
              type: string
              example: "37.4142218"
            longitude:
              type: string
              example: "-122.1492233"
        tags:
          type: array
          items:
              type: string
          example: ["yes (bus)", "2200380 (gtfs_id)", "56424 (gtfs_stop_code)", "Dumbarton Express (network)", "platform (public_transport)", "DB1 (route_ref)"]
      type: object
    unauthorized:
      properties:
        message:
          type: string
          example: "Unauthorized"
        detail:
          type: string
          example: "This API has not been authorized, use a valid JWT token with your API reuqest and pass it as parameter in Authorization header."
      type: object
    invalidBody:
      properties:
        message:
          type: string
          example: "Invalid Body"
        detail:
          type: string
          example: "Missing parameters in body or request url, please verify the format and resend your request."
      type: object