penapi: 3.0.0
info:
  description: |
    This is a sample social application.  
  version: "0.0.1"
  title:  Social platform
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'


tags:
  - name: User Management
    description: manage new and existing users
    
    
    
paths:
  '/users/registration':
    post:
      tags:
        - User Management
      summary: Registers a new user
      security: 
      - basicAuth: []
      description: Request to this endpoint creates a user account on social platform. If request was successful, an account is created. If required fields are missing, 400 error is returned.
      responses:
        '201':
          description: User registration successful. No Content returned.
        '400':
          description: |
            Bad Request returned -
            - if requestBody or required fields are missing, or
            - username is not alphanumeric 8-character long
          content:
            application/json:
              schema:
                title: ErrorDetail
                type: object
                properties:
                  title:
                    type: string
                    example: missing.email
                  status:
                    type: number
                    example: 400
                  details:
                    type: string
                    example: Missing email
                required:
                  - title
                  - detail
                  - status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        description: user information
        required: true
  
  '/users/{username}':
    get:
      tags:
        - User Management
      summary: Retrieve user info by username
      description: Retrieve details for an existing user  (identified by username) using this endpoint. For invalid username, 400 error is returned. If no user found, 404 error is returned.
      security: 
      - basicAuth: []
      parameters:
        - name: username
          in: path
          description: username to get details for. username should be alphanumeric 8-character long.
          required: true
          schema:
            type: string
            pattern: ^[a-z0-9]{8}$
            example: archanam
      responses:
        '200':
          description: User details (except password and username) returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponse'
        '400':
          description: Bad Request. Invalid username supplied as input.
          content:
            application/json:
              schema:
                title: ErrorDetail
                type: object
                properties:
                  title:
                    type: string
                    example: invalid.username
                  status:
                    type: number
                    example: 400
                  details:
                    type: string
                    example: Invalid {username} sent
                required:
                  - title
                  - detail
                  - status
        '404':
          description: User not found. Please check the username provided.
          content:
            application/json:
              schema:
                title: ErrorDetail
                type: object
                properties:
                  title:
                    type: string
                    example: user.notFound
                    
                  status:
                    type: number
                    example: 404
                  details:
                    type: string
                    example: User not found
                required:
                  - title
                  - detail
                  - status
    patch:
      tags: 
        - User Management
      summary: Modify details for a registered user
      security: 
      - basicAuth: []
      description: Update details for an existing user (identified by username). This endpoint can only update email, password and phone for a user, if found. For invalid username, 400 error is returned. If no user found, 404 error is returned.
      parameters: 
        - name: username
          in: path
          description: Registered username 
          example: archanam
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated given user details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated successfully
                  status:
                    type: integer
                    example: 200
        '400':
          description: Bad Request. Invalid username supplied as input.
          content:
            application/json:
              schema:
                title: ErrorDetail
                type: object
                properties:
                  title:
                    type: string
                    example: invalid.username
                  status:
                    type: number
                    example: 400
                  details:
                    type: string
                    example: Invalid {username} sent
                required:
                  - title
                  - detail
                  - status
        '404':
          description: User not found. Please check the username provided.
          content:
            application/json:
              schema:
                title: ErrorDetail
                type: object
                properties:
                  title:
                    type: string
                    example: user.notFound
                    
                  status:
                    type: number
                    example: 404
                  details:
                    type: string
                    example: User not found
                required:
                  - title
                  - detail
                  - status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRequest'
        description: User details to be updated .
        required: true
    
    delete:
      tags:
        - User Management
      summary: Delete a registered user
      description: Use this endpoint to delete an existing user (identified by username).For invalid username, 400 error is returned. If no user found, 404 error is returned.
      security: 
      - basicAuth: []
      parameters:
        - name: username
          in: path
          description: username of an existing user
          example: archanam
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted details related to given username.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
                  status:
                    type: integer
                    example: 200
        '400':
          description: Bad Request. Invalid username supplied as input.
          content:
            application/json:
              schema:
                title: ErrorDetail
                type: object
                properties:
                  title:
                    type: string
                    example: invalid.username
                  status:
                    type: number
                    example: 400
                  details:
                    type: string
                    example: Invalid {username} sent
                required:
                  - title
                  - detail
                  - status
        '404':
          description: User not found. Please check the username provided.
          content:
            application/json:
              schema:
                title: ErrorDetail
                type: object
                properties:
                  title:
                    type: string
                    example: user.notFound
                    
                  status:
                    type: number
                    example: 404
                  details:
                    type: string
                    example: User not found
                required:
                  - title
                  - detail
                  - status



components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  schemas:
    user:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: archanam
        email:
          type: string
          example: archana@gmail.com
        password:
          type: string
          example : adh123A
        phone:
          type: integer
          format: int64
          example: 9700960830
    userRequest:
      type: object
      required: 
        - email
        - phone
      properties:
        email:
          type: string
          example: archana@gmail.com
        password:
          type: string
          example : adh123A
        phone:
          type: integer
          format: int64
          example: 9700960830
    userResponse:
      type: object
      
      properties:
        email:
          type: string
          example: archana@gmail.com
        phone:
          type: integer
          format: int64
          example: 9700960830
  

# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Iton-technologie/Social/1.0.0