{
  "openapi" : "3.0.0",
  "servers" : [ {
    "url" : "https://apiad.admedia.com/v1"
  } ],
  "info" : {
    "description" : "Advertisers API\n",
    "version" : "1.0.0-oas3",
    "title" : "Admedia API",
    "contact" : {
      "email" : "developers@admedia.com"
    }
  },
  "tags" : [ {
    "name" : "Campaigns",
    "description" : "Operations with campaigns"
  }, {
    "name" : "Creatives",
    "description" : "Operations with creatives"
  }, {
    "name" : "Reports",
    "description" : "Operations with reports"
  }, {
    "name" : "Domains Lists",
    "description" : "Operations with domains lists"
  }, {
    "name" : "Keywords Lists",
    "description" : "Operations with keywords lists"
  }, {
    "name" : "Sources Lists",
    "description" : "Operations with sources lists"
  }, {
    "name" : "Retargeting Pixel",
    "description" : "Operations with Retargeting Ppixels"
  }, {
    "name" : "Channels",
    "description" : "Channels list"
  } ],
  "paths" : {
    "/campaigns" : {
      "post" : {
        "tags" : [ "Campaigns" ],
        "summary" : "Add a new campaign",
        "description" : "",
        "operationId" : "addCampaign",
        "responses" : {
          "400" : {
            "description" : "The request cannot be fulfilled due to some errors"
          },
          "422" : {
            "description" : "Unprocessable entity"
          },
          "201" : {
            "description" : "Campaign has been created successfully"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Campaign"
              }
            }
          },
          "description" : "Required properties:\n  - **name**\n  - **type**\n  - **bid**\n  - **budget**\n\nTargeting properties based on company type:\n  - **browsers** - display, native\n  - **categories** - display\n  - **channel** - text-search\n  - **connection_types** - display\n  - **countries** - display, native, text-search, text-pop\n  - **devices** - display, native, text-search, text-pop\n  - **domain_lists** - display, native\n  - **frequency** - display, text-search, text-pop\n    - for CPM campaigns: number of impressions per IP per day (min 100)\n    - for CPC campaigns: number of clicks per user per day\n  - **keyword_lists** - text-search\n  - **makers** - display, native\n  - **models** - display, native\n  - **os** - display, native, text-search, text-pop\n  - **pacing** - display, native, text-search, text-pop\n  - **retargeting** - display\n  - **ron** - text-search\n  - **schedule** - display, native, text-search, text-pop\n  - **source_lists** - text-search, text-pop\n  - **states** - display, native, text-search, text-pop\n  - **supplies** - display, native\n",
          "required" : true
        }
      },
      "get" : {
        "tags" : [ "Campaigns" ],
        "summary" : "List of campaigns",
        "description" : "Returns list of campaigns",
        "operationId" : "listCampaigns",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by campaign type",
          "schema" : {
            "type" : "string",
            "enum" : [ "display", "native", "text-pop", "text-search", "smedia" ]
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Filter by campaign status\n  - A - active;\n  - S - Paused;\n  - C - Capped;\n",
          "schema" : {
            "type" : "string",
            "enum" : [ "A", "S", "C" ]
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Search by keyword\n",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "Order by fields in format:\n\n```{field_name}:asc|desc,{field_name}:asc|desc```\n\nExample: name:asc,bid:desc\n",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset.\n\nDefault: 0\n",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Campaigns per page.\n\nDefault: 20\n",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "$ref" : "#/components/schemas/Campaign/properties/id"
                      },
                      "name" : {
                        "$ref" : "#/components/schemas/Campaign/properties/name"
                      },
                      "budget" : {
                        "$ref" : "#/components/schemas/Campaign/properties/budget"
                      },
                      "bid" : {
                        "$ref" : "#/components/schemas/Campaign/properties/bid"
                      },
                      "type" : {
                        "$ref" : "#/components/schemas/Campaign/properties/type"
                      },
                      "mode" : {
                        "$ref" : "#/components/schemas/Campaign/properties/mode"
                      },
                      "status" : {
                        "$ref" : "#/components/schemas/Campaign/properties/status"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No campaigns were found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/campaigns/{campaignId}/creatives" : {
      "get" : {
        "tags" : [ "Campaigns" ],
        "summary" : "Find creatives by Iampaign D",
        "description" : "Returns campaign's creatives",
        "operationId" : "getCampaignCreativesById",
        "parameters" : [ {
          "$ref" : "#/components/parameters/campaignIdParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "$ref" : "#/components/schemas/Creative/properties/id"
                      },
                      "name" : {
                        "$ref" : "#/components/schemas/Creative/properties/name"
                      },
                      "type" : {
                        "$ref" : "#/components/schemas/Creative/properties/type"
                      },
                      "status" : {
                        "$ref" : "#/components/schemas/Creative/properties/status"
                      },
                      "size" : {
                        "$ref" : "#/components/schemas/Creative/properties/size"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Creatives not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/campaigns/{campaignId}" : {
      "get" : {
        "tags" : [ "Campaigns" ],
        "summary" : "Find campaign by ID",
        "description" : "Returns a single campaign",
        "operationId" : "getCampaignById",
        "parameters" : [ {
          "$ref" : "#/components/parameters/campaignIdParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign"
                }
              }
            }
          },
          "404" : {
            "description" : "Campaign not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Campaigns" ],
        "summary" : "Update an existing campaign",
        "operationId" : "updateCampaign",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "ID of campaign to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Campaign"
              }
            }
          },
          "description" : "Property **type** cannot be changed and will be ignored.\n",
          "required" : true
        }
      },
      "delete" : {
        "tags" : [ "Campaigns" ],
        "summary" : "Deletes a campaign",
        "operationId" : "deleteCampaign",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "Campaign id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "The request cannot be fulfilled due to some errors"
          },
          "404" : {
            "description" : "Campaign not found"
          },
          "204" : {
            "description" : "No content (Campaign has been deleted successfully)"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/creatives" : {
      "post" : {
        "tags" : [ "Creatives" ],
        "summary" : "Add a new creative",
        "operationId" : "addCreative",
        "responses" : {
          "400" : {
            "description" : "The request cannot be fulfilled due to some errors"
          },
          "422" : {
            "description" : "Unprocessable entity"
          },
          "201" : {
            "description" : "Creative has been created successfully"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Creative"
              }
            }
          },
          "description" : "Required properties depends on creative type:\n  - type **image**: name, type, destination, image_url, size\n  - type **script**: name, type, content, size\n  - type **native**: name, type, destination, image_url, title, description, display_url\n  - type **text**: name, type, destination, title, description, display_url\n  \nAvailable macros for \"destination\" URL:\n \nImage:\n- [CACHEBUSTER]- cachebuster\n- [PAGE_URL]   - page url\n- [DOMAIN]   - domain\n- [REF]   - referrer of the page url\n- [PARTNER_ID]   - SSP source id\n- [PUBLISHER_ID]   - publisher id of the traffic\n- [CAMPAIGN_ID]   - campaign id\n- [RTB_CAT]   - if there is category information\n\nText:\n- [KEYWORD]   - keyword\n- [PLACEMENT]   - position of the ad in the network\n- [AID]   - source id\n- [CITY]   - city\n- [STATE]   - state\n- [UID]   - unique click id that can be used for a server to server postback\n- [SUBID]   - subsource id\n- [CAMPAIGN_ID]   - campaign id\n",
          "required" : true
        }
      },
      "get" : {
        "tags" : [ "Creatives" ],
        "summary" : "List of creatives",
        "description" : "Returns list of creatives",
        "operationId" : "listCreatives",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by creatives type",
          "schema" : {
            "type" : "string",
            "enum" : [ "image", "script", "text", "native" ]
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Filter by campaign status\n  - A - active;\n  - S - Paused;\n",
          "schema" : {
            "type" : "string",
            "enum" : [ "A", "S" ]
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Search by keyword\n",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "Order by fields in format:\n\n```{field_name}:asc|desc,{field_name}:asc|desc```\n\nExample: name:asc,bid:desc\n",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset.\n\nDefault: 0\n",
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Creatives per page.\n\nDefault: 20\n",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "$ref" : "#/components/schemas/Creative/properties/id"
                      },
                      "name" : {
                        "$ref" : "#/components/schemas/Creative/properties/name"
                      },
                      "type" : {
                        "$ref" : "#/components/schemas/Creative/properties/type"
                      },
                      "status" : {
                        "$ref" : "#/components/schemas/Creative/properties/status"
                      },
                      "size" : {
                        "$ref" : "#/components/schemas/Creative/properties/size"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No Creatives were found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/creatives/{creativeId}" : {
      "get" : {
        "tags" : [ "Creatives" ],
        "summary" : "Find creative by ID",
        "description" : "Returns a single creative",
        "operationId" : "getCreativeById",
        "parameters" : [ {
          "name" : "creativeId",
          "in" : "path",
          "description" : "ID of creative to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Creative"
                }
              }
            }
          },
          "404" : {
            "description" : "Creative not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Creatives" ],
        "summary" : "Update an existing creative",
        "operationId" : "updateCreative",
        "parameters" : [ {
          "name" : "creativeId",
          "in" : "path",
          "description" : "ID of creative to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Creative not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Creative"
              }
            }
          },
          "description" : "Property **type** cannot be changed and will be ignored.\n\nProperties are processed depending on a creative type.\n\nProperties that are not relevant to this type of ad will be ignored.\n\n- type **image**: name, type, destination, image_url, size\n- type **script**: name, type, content, size\n- type **native**: name, type, destination, image_url, title, description, display_url\n- type **text**: name, type, destination, title, description, display_url\n",
          "required" : true
        }
      },
      "delete" : {
        "tags" : [ "Creatives" ],
        "summary" : "Deletes a creative",
        "operationId" : "deleteCreative",
        "parameters" : [ {
          "name" : "creativeId",
          "in" : "path",
          "description" : "Creative id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "The request cannot be fulfilled due to some errors"
          },
          "404" : {
            "description" : "Creative not found"
          },
          "204" : {
            "description" : "No content (Creative has been deleted successfully)"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/creatives/sizes" : {
      "get" : {
        "tags" : [ "Creatives" ],
        "summary" : "List of creatives' sizes",
        "description" : "Returns list of creatives' sizes",
        "operationId" : "listCreativesSizes",
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/reports/summary" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Summary report for date range",
        "operationId" : "reportsSummary",
        "parameters" : [ {
          "$ref" : "#/components/parameters/fromParam"
        }, {
          "$ref" : "#/components/parameters/toParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/reports/summary/{format}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Summary report for date range formatted",
        "operationId" : "reportsSummaryFormat",
        "parameters" : [ {
          "$ref" : "#/components/parameters/formatParam"
        }, {
          "$ref" : "#/components/parameters/fromParam"
        }, {
          "$ref" : "#/components/parameters/toParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/reports/campaigns" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Report by campaigns for date range",
        "operationId" : "reportsCampaigns",
        "parameters" : [ {
          "$ref" : "#/components/parameters/fromParam"
        }, {
          "$ref" : "#/components/parameters/toParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/reports/campaigns/{campaignId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Report by campaign ID for date range",
        "operationId" : "reportsCampaignsId",
        "parameters" : [ {
          "$ref" : "#/components/parameters/campaignIdParam"
        }, {
          "$ref" : "#/components/parameters/fromParam"
        }, {
          "$ref" : "#/components/parameters/toParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/reports/campaigns/{campaignId}/{format}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Report by campaign ID for date range",
        "operationId" : "reportsCampaignsIdformat",
        "parameters" : [ {
          "$ref" : "#/components/parameters/campaignIdParam"
        }, {
          "$ref" : "#/components/parameters/formatParam"
        }, {
          "$ref" : "#/components/parameters/fromParam"
        }, {
          "$ref" : "#/components/parameters/toParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/reports/creatives" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Report by creatives for date range",
        "operationId" : "reportsCreatives",
        "parameters" : [ {
          "$ref" : "#/components/parameters/fromParam"
        }, {
          "$ref" : "#/components/parameters/toParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/reports/creatives/{creativeId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Report by campaign ID for date range",
        "operationId" : "reportsCreativesId",
        "parameters" : [ {
          "$ref" : "#/components/parameters/creativeIdParam"
        }, {
          "$ref" : "#/components/parameters/fromParam"
        }, {
          "$ref" : "#/components/parameters/toParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/reports/creatives/{creativeId}/{format}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Report by campaign ID for date range",
        "operationId" : "reportsCreativesIdformat",
        "parameters" : [ {
          "$ref" : "#/components/parameters/creativeIdParam"
        }, {
          "$ref" : "#/components/parameters/formatParam"
        }, {
          "$ref" : "#/components/parameters/fromParam"
        }, {
          "$ref" : "#/components/parameters/toParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/lists/domains" : {
      "post" : {
        "tags" : [ "Domains Lists" ],
        "summary" : "Add a new domains list",
        "operationId" : "addListDomain",
        "responses" : {
          "400" : {
            "description" : "The request cannot be fulfilled due to some errors"
          },
          "422" : {
            "description" : "Unprocessable entity"
          },
          "201" : {
            "description" : "List has been created successfully"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListDomains"
              }
            }
          },
          "description" : "Wrong domain names are ignored.\n",
          "required" : true
        }
      },
      "get" : {
        "tags" : [ "Domains Lists" ],
        "summary" : "List of domains lists",
        "description" : "Returns list of domains lists",
        "operationId" : "listListDomain",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "$ref" : "#/components/schemas/ListDomains/properties/id"
                      },
                      "name" : {
                        "$ref" : "#/components/schemas/ListDomains/properties/name"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No lists were found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/lists/domains/{listId}" : {
      "get" : {
        "tags" : [ "Domains Lists" ],
        "summary" : "Find list by ID",
        "description" : "Returns a single list",
        "operationId" : "getListDomainsById",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/ListDomains/properties/id"
                    },
                    "name" : {
                      "$ref" : "#/components/schemas/ListDomains/properties/name"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "List not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Domains Lists" ],
        "summary" : "Update an existing list",
        "operationId" : "updateListDomain",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "List not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListDomains"
              }
            }
          },
          "required" : true
        }
      },
      "delete" : {
        "tags" : [ "Domains Lists" ],
        "summary" : "Deletes a list",
        "operationId" : "deleteListDomain",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "404" : {
            "description" : "List not found"
          },
          "204" : {
            "description" : "No content (List has been deleted successfully)"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/lists/domains/{listId}/domains" : {
      "get" : {
        "tags" : [ "Domains Lists" ],
        "summary" : "List of domains in the list",
        "description" : "Returns list of domains from the list by ID",
        "operationId" : "listDomains",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "404" : {
            "description" : "List not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/lists/keywords" : {
      "post" : {
        "tags" : [ "Keywords Lists" ],
        "summary" : "Add a new keywords list",
        "operationId" : "addListKeyword",
        "responses" : {
          "400" : {
            "description" : "The request cannot be fulfilled due to some errors"
          },
          "422" : {
            "description" : "Unprocessable entity"
          },
          "201" : {
            "description" : "List has been created successfully"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListKeywords"
              }
            }
          },
          "description" : "",
          "required" : true
        }
      },
      "get" : {
        "tags" : [ "Keywords Lists" ],
        "summary" : "List of keywords lists",
        "description" : "Returns list of keywords lists",
        "operationId" : "listListKeyword",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "$ref" : "#/components/schemas/ListKeywords/properties/id"
                      },
                      "name" : {
                        "$ref" : "#/components/schemas/ListKeywords/properties/name"
                      },
                      "type" : {
                        "$ref" : "#/components/schemas/ListKeywords/properties/type"
                      },
                      "bid" : {
                        "$ref" : "#/components/schemas/ListKeywords/properties/bid"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No lists were found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/lists/keywords/{listId}" : {
      "get" : {
        "tags" : [ "Keywords Lists" ],
        "summary" : "Find list by ID",
        "description" : "Returns a single list",
        "operationId" : "getListKeywordsById",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/ListKeywords/properties/id"
                    },
                    "name" : {
                      "$ref" : "#/components/schemas/ListKeywords/properties/name"
                    },
                    "type" : {
                      "$ref" : "#/components/schemas/ListKeywords/properties/type"
                    },
                    "bid" : {
                      "$ref" : "#/components/schemas/ListKeywords/properties/bid"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "List not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Keywords Lists" ],
        "summary" : "Update an existing list",
        "operationId" : "updateListKeyword",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "List not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListKeywords"
              }
            }
          },
          "required" : true
        }
      },
      "delete" : {
        "tags" : [ "Keywords Lists" ],
        "summary" : "Deletes a list",
        "operationId" : "deleteListKeyword",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "404" : {
            "description" : "List not found"
          },
          "204" : {
            "description" : "No content (List has been deleted successfully)"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/lists/keywords/{listId}/keywords" : {
      "get" : {
        "tags" : [ "Keywords Lists" ],
        "summary" : "List of keywords in the list",
        "description" : "Returns list of keywords from the list by ID",
        "operationId" : "listKeywords",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "404" : {
            "description" : "List not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/lists/sources" : {
      "post" : {
        "tags" : [ "Sources Lists" ],
        "summary" : "Add a new sources list",
        "operationId" : "addListSource",
        "responses" : {
          "400" : {
            "description" : "The request cannot be fulfilled due to some errors"
          },
          "422" : {
            "description" : "Unprocessable entity"
          },
          "201" : {
            "description" : "List has been created successfully"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListSources"
              }
            }
          },
          "description" : "If \"bid\" set to 0 this source is excluded\n",
          "required" : true
        }
      },
      "get" : {
        "tags" : [ "Sources Lists" ],
        "summary" : "List of sources lists",
        "description" : "Returns list of sources lists",
        "operationId" : "listListSource",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "$ref" : "#/components/schemas/ListSources/properties/id"
                      },
                      "name" : {
                        "$ref" : "#/components/schemas/ListSources/properties/name"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No lists were found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/lists/sources/{listId}" : {
      "get" : {
        "tags" : [ "Sources Lists" ],
        "summary" : "Find list by ID",
        "description" : "Returns a single list",
        "operationId" : "getListSourcesById",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/ListSources/properties/id"
                    },
                    "name" : {
                      "$ref" : "#/components/schemas/ListSources/properties/name"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "List not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Sources Lists" ],
        "summary" : "Update an existing list",
        "operationId" : "updateListSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "List not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListSources"
              }
            }
          },
          "required" : true
        }
      },
      "delete" : {
        "tags" : [ "Sources Lists" ],
        "summary" : "Deletes a list",
        "operationId" : "deleteListSource",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "404" : {
            "description" : "List not found"
          },
          "204" : {
            "description" : "No content (List has been deleted successfully)"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/lists/sources/{listId}/sources" : {
      "get" : {
        "tags" : [ "Sources Lists" ],
        "summary" : "List of sources in the list",
        "description" : "Returns list of sources from the list by ID",
        "operationId" : "listSources",
        "parameters" : [ {
          "$ref" : "#/components/parameters/listId"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "404" : {
            "description" : "List not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/pixels/retargeting" : {
      "post" : {
        "tags" : [ "Retargeting Pixel" ],
        "summary" : "Create new Retargeting Pixel",
        "operationId" : "addRetargetingPpixel",
        "responses" : {
          "400" : {
            "description" : "The request cannot be fulfilled due to some errors"
          },
          "422" : {
            "description" : "Unprocessable entity"
          },
          "201" : {
            "description" : "List has been created successfully"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/retargetingPixel"
              }
            }
          },
          "required" : true
        }
      },
      "get" : {
        "tags" : [ "Retargeting Pixel" ],
        "summary" : "List of Retargeting Pixels",
        "description" : "Returns list of Retargeting Pixels",
        "operationId" : "listRetargetingPixel",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "id" : {
                        "$ref" : "#/components/schemas/retargetingPixel/properties/id"
                      },
                      "name" : {
                        "$ref" : "#/components/schemas/retargetingPixel/properties/name"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No lists were found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/pixels/retargeting/{pixelId}" : {
      "get" : {
        "tags" : [ "Retargeting Pixel" ],
        "summary" : "Find Retargeting Pixel by ID",
        "description" : "Returns a single Retargeting Pixel",
        "operationId" : "getRetargetingPixelById",
        "parameters" : [ {
          "name" : "pixelId",
          "in" : "path",
          "description" : "ID of pixel to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/retargetingPixel"
                }
              }
            }
          },
          "404" : {
            "description" : "Pixel not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/channels" : {
      "get" : {
        "tags" : [ "Channels" ],
        "summary" : "List of Channels",
        "description" : "Returns list of Channels for Text Search campaigns",
        "operationId" : "listChannels",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/channels"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Campaign" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 1234,
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "example" : "MyCampaign"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "display", "native", "text-pop", "text-search" ]
          },
          "mode" : {
            "type" : "string",
            "example" : "CPM",
            "readOnly" : true
          },
          "bid" : {
            "type" : "number",
            "format" : "float",
            "minimum" : 0.007,
            "maximum" : 5
          },
          "budget" : {
            "type" : "number",
            "format" : "float",
            "minimum" : 10
          },
          "status" : {
            "type" : "string",
            "description" : "- A - acive\n- S - paused\n",
            "enum" : [ "A", "S" ],
            "default" : "A"
          },
          "start_date" : {
            "type" : "string",
            "format" : "date",
            "example" : "2018-01-01"
          },
          "end_date" : {
            "type" : "string",
            "format" : "date",
            "example" : "2018-01-01"
          },
          "creatives" : {
            "description" : "Array of existing creatives ID.\n",
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "targeting" : {
            "type" : "object",
            "properties" : {
              "browsers" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "chrome", "firefox", "safari", "opera", "msie", "unknown" ]
                }
              },
              "categories" : {
                "oneOf" : [ {
                  "type" : "object",
                  "properties" : {
                    "include" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "exclude" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  }
                } ],
                "example" : {
                  "include" : [ "IAB1" ]
                }
              },
              "channel" : {
                "type" : "integer",
                "description" : "Channel ID"
              },
              "connection_types" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "ethernet", "wifi", "cellular", "unknown" ]
                }
              },
              "countries" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "minLength" : 3,
                  "maxLength" : 3,
                  "default" : "USA",
                  "example" : "USA"
                }
              },
              "devices" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "desktop", "tablet", "phone", "others" ]
                }
              },
              "domain_lists" : {
                "oneOf" : [ {
                  "type" : "object",
                  "properties" : {
                    "include" : {
                      "type" : "array",
                      "description" : "IDs of existing Domain Lists",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "exclude" : {
                      "type" : "array",
                      "description" : "IDs of existing Domain Lists",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  }
                } ],
                "example" : {
                  "include" : [ 1, 2 ]
                }
              },
              "frequency" : {
                "type" : "integer"
              },
              "keyword_lists" : {
                "type" : "object",
                "properties" : {
                  "include" : {
                    "type" : "array",
                    "description" : "Search Keyword List IDs",
                    "items" : {
                      "type" : "integer"
                    }
                  },
                  "exclude" : {
                    "type" : "array",
                    "description" : "Negative Keyword List IDs",
                    "items" : {
                      "type" : "integer"
                    }
                  }
                }
              },
              "makers" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "apple", "samsung", "motorola", "lg", "sony", "htc", "google", "amazon", "others" ]
                }
              },
              "models" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "iphone", "ipad" ]
                }
              },
              "os" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "windows", "macos", "android", "ios", "linux", "blackberry", "chromeos", "others" ]
                }
              },
              "pacing" : {
                "type" : "integer",
                "enum" : [ 0, 1 ]
              },
              "retargeting" : {
                "type" : "object",
                "properties" : {
                  "logic" : {
                    "type" : "string",
                    "enum" : [ "or", "and" ]
                  },
                  "ids" : {
                    "description" : "IDs of existing Retargeting Pixels",
                    "type" : "array",
                    "items" : {
                      "type" : "integer"
                    }
                  }
                }
              },
              "ron" : {
                "type" : "integer",
                "enum" : [ 0, 1 ]
              },
              "schedule" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "day" : {
                      "type" : "string",
                      "enum" : [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ]
                    },
                    "start_time" : {
                      "type" : "string",
                      "example" : "09:00",
                      "description" : "00:00 - 24:00"
                    },
                    "end_time" : {
                      "type" : "string",
                      "example" : "19:00",
                      "description" : "00:00 - 24:00"
                    }
                  }
                }
              },
              "source_lists" : {
                "type" : "array",
                "items" : {
                  "type" : "integer"
                }
              },
              "states" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "minLength" : 2,
                  "maxLength" : 2,
                  "example" : "CA"
                },
                "description" : "array of USA sates 2-letter codes This targeting works only if \"Countries\" array includes \"USA\""
              },
              "supplies" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "web", "mobile", "app" ]
                }
              }
            }
          }
        }
      },
      "Creative" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 1234,
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100
          },
          "type" : {
            "type" : "string",
            "enum" : [ "image", "script", "text", "native" ]
          },
          "status" : {
            "type" : "string",
            "description" : "- Optional field\n- A - acive\n- S - paused\n",
            "enum" : [ "A", "S" ],
            "default" : "A"
          },
          "destination" : {
            "type" : "string",
            "format" : "uri",
            "example" : "http://mysite.com?param=1",
            "description" : "- Required for creative types: image, native, text\n"
          },
          "image_url" : {
            "type" : "string",
            "format" : "uri",
            "example" : "http://mysite.com/my-image.jpg",
            "description" : "- Required for creative types: image, native\n- Allowed image formats: JPG, PNG, GIF\n- Max size: 2 MB\n"
          },
          "content" : {
            "type" : "string",
            "example" : "<script>my script</script>",
            "description" : "- your Javascript tag\n- Required for creative types: script\n"
          },
          "size" : {
            "type" : "string",
            "example" : "300x250",
            "description" : "- Required for creative types: image, script\n- list of available sizes: /creatives/sizes\n"
          },
          "title" : {
            "type" : "string",
            "description" : "- Required for creative types: text, native\n"
          },
          "description" : {
            "type" : "string",
            "description" : "- Required for creative types: text, native\n"
          },
          "display_url" : {
            "type" : "string",
            "description" : "- Required for creative types: text, native\n"
          }
        }
      },
      "ListDomains" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 1234,
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100
          },
          "domains" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "example" : "mydomain.com"
            }
          }
        }
      },
      "ListKeywords" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 1234,
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100
          },
          "type" : {
            "type" : "string",
            "enum" : [ "exact", "broad" ]
          },
          "bid" : {
            "type" : "number",
            "format" : "float",
            "minimum" : 0.007
          },
          "keywords" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ListSources" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 1234,
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "maxLength" : 100
          },
          "sources" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "source" : {
                  "type" : "integer"
                },
                "bid" : {
                  "type" : "number",
                  "format" : "float",
                  "minimum" : 0
                }
              }
            }
          }
        }
      },
      "retargetingPixel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 1234,
            "readOnly" : true
          },
          "name" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string",
            "readOnly" : true
          }
        }
      },
      "channels" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 12,
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "readOnly" : true
          }
        }
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "boolean"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    },
    "parameters" : {
      "campaignIdParam" : {
        "name" : "campaignId",
        "in" : "path",
        "description" : "ID of campaign to return",
        "required" : true,
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "creativeIdParam" : {
        "name" : "creativeId",
        "in" : "path",
        "description" : "ID of creative to return",
        "required" : true,
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "formatParam" : {
        "name" : "format",
        "in" : "path",
        "description" : "Report format",
        "required" : true,
        "schema" : {
          "type" : "string",
          "enum" : [ "daily", "monthly", "countries", "os", "browsers", "sources", "domains", "keywords" ]
        }
      },
      "fromParam" : {
        "name" : "from",
        "in" : "query",
        "description" : "Date from",
        "schema" : {
          "type" : "string",
          "format" : "date"
        }
      },
      "toParam" : {
        "name" : "to",
        "in" : "query",
        "description" : "Date to",
        "schema" : {
          "type" : "string",
          "format" : "date"
        }
      },
      "listId" : {
        "name" : "listId",
        "in" : "path",
        "description" : "ID of list to return",
        "required" : true,
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "requestBodies" : {
      "Campaign" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Campaign"
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      }
    },
    "securitySchemes" : {
      "api_key" : {
        "type" : "apiKey",
        "name" : "X-API-KEY",
        "in" : "header"
      }
    }
  }
}