penapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/BO_integration/Contract_import/1.0.0
info:
  description: |
    Управление бланками внешней системы из КСАСК "ProfITsoft".
  version: "1.0.0"
  title: 'Бланки'
  termsOfService: 'http://swagger.io/terms/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: blanks
    description: 'Бланки'
paths:
  /api/blanks/_searchAvailable:
    post:
      tags:
        - blanks
      summary: Поиск доступных бланков
      operationId: search
      
      parameters:
        - in: header
          name: UserLogin
          description: 'Логин пользователя в КСАСК "ProfITsoft", от имени которого выполняется операция'
          schema:
            type: string
          required: true
        - in: header
          name: UserName
          description: 'Логин КСАСК "ProfITsoft", от имени которой выполняется операция'
          schema:
            type: string
          required: true
        - in: header
          name: Token
          description: 'Токен, сформированный на основании тела запроса и пароля КСАСК "ProfITsoft"'
          schema:
            type: string
          required: true
          
      requestBody:
        description: 'Фильтр с критериями поиска бланков'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlankFilterRequestDto'
              
      responses:
        200:
          description: Успешное или неуспешное выполнение запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlankFilterResponseDto'
        400:
          description: 'Некорректные параметры запроса'
        401:
          description: 'Неавторизирован'
        403:
          description: 'Доступ запрещён'
        404:
          description: 'Ресурс не найден'
        500:
          description: 'Внутрення ошибка сервера'
          
      security:
        - bearerAuth: []

  /api/blanks/_statusBySerieAndNumber:
    post:
      tags:
        - blanks
      summary: Получение статусов бланков
      operationId: getStatusesBySerieAndNumber
      
      parameters:
        - in: header
          name: UserLogin
          description: 'Логин пользователя в КСАСК "ProfITsoft", от имени которого выполняется операция'
          schema:
            type: string
          required: true
        - in: header
          name: UserName
          description: 'Логин КСАСК "ProfITsoft", от имени которой выполняется операция'
          schema:
            type: string
          required: true
        - in: header
          name: Token
          description: 'Токен, сформированный на основании тела запроса и пароля КСАСК "ProfITsoft"'
          schema:
            type: string
          required: true
          
      requestBody:
        description: 'Данные бланков'
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BlankRestDto'
              
      responses:
        200:
          description: Успешное или неуспешное выполнение запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlanksStatusResponseDto'
        400:
          description: 'Некорректные параметры запроса'
        401:
          description: 'Неавторизирован'
        403:
          description: 'Доступ запрещён'
        404:
          description: 'Ресурс не найден'
        500:
          description: 'Внутрення ошибка сервера'
          
      security:
        - bearerAuth: []
  
  /api/blanks/changeStatus:
    post:
      tags:
        - blanks
      summary: Изменение статусов бланков
      operationId: changeStatus
      
      parameters:
        - in: header
          name: UserLogin
          description: 'Логин пользователя в КСАСК "ProfITsoft", от имени которого выполняется операция'
          schema:
            type: string
          required: true
        - in: header
          name: UserName
          description: 'Логин КСАСК "ProfITsoft", от имени которой выполняется операция'
          schema:
            type: string
          required: true
        - in: header
          name: Token
          description: 'Токен, сформированный на основании тела запроса и пароля КСАСК "ProfITsoft"'
          schema:
            type: string
          required: true
          
      requestBody:
        description: 'Массив бланков со статусами для изменения'
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BlankStatusRestDto'
              
      responses:
        200:
          description: Успешное или неуспешное выполнение запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlanksStatusResponseDto'
        400:
          description: 'Некорректные параметры запроса'
        401:
          description: 'Неавторизирован'
        403:
          description: 'Доступ запрещён'
        404:
          description: 'Ресурс не найден'
        500:
          description: 'Внутрення ошибка сервера'
          
      security:
        - bearerAuth: []

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    BlankFilterRequestDto:
      type: object
      description: 'Фильтр с критериями поиска бланков'
      properties:
        serie:
          type: string
          description: 'Серия'
            
    BlankFilterResponseDto:
      type: object
      description: 'Результат поиска бланков'
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        responseMessage:
          type: string
          description: 'Текстовое сообщение о результате операции'
        ranges:
          type: array
          items:
            $ref: '#/components/schemas/BlankRangeResponseDto'
      required:
        - status
        
    BlankRangeResponseDto:
      type: object
      description: 'Диапазон бланков по серии'
      properties:
        fromNum:
          type: number
          format: int64
          description: 'Номер начального бланка диапазона'
        tillNum:
          type: number
          format: int64
          description: 'Номер конечного бланка диапазона'
      required:
        - fromNum
        - tillNum
  
    BlankRestDto:
      type: object
      description: 'Данные бланка'
      properties:
        serie:
          type: string
          description: 'Серия'
        number:
          type: string
          description: 'Номер'
    
    BlanksStatusResponseDto:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        responseMessage:
          type: string
          description: 'Текстовое сообщение о результате операции'
        blanks:
          type: array
          items:
            $ref: '#/components/schemas/BlankStatusRestDto'
          
    BlankStatusRestDto:
      type: object
      properties:
        serie:
          type: string
          description: 'Серия'
        number:
          type: string
          description: 'Номер'
        status:
          $ref: '#/components/schemas/BlankStatus'
        
    BlankStatus:
      type: string
      enum: [AVAILABLE, USED, SPOILED]
      description: >
              Статус бланка:
               * `AVAILABLE` - доступен (распределен)
               * `USED` - использован
               * `SPOILED` - испорчен
            
    ResponseStatus:
      type: string
      enum: [SUCCESS, ERROR]
      description: >
              Статус ответа:
               * `SUCCESS` - успешное выполнение
               * `ERROR` - ошибка выполнения