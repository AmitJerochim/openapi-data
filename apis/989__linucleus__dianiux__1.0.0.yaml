openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/linucleus/dianiux/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/dianiux/kiosk/1.0.0
info:
  description: |-
    This is a **API** to control payments on the frontend of a Imperiumberri  Kiosks. Allows you to make payments, interrogate the status of peripherals, print tickets, ... in a web client or other type of clients.
    Can only be used from the **localhost** interface (127.0.0.1).
  version: "1.0.0"
  title: Kiosk API - Dianiux Innova
  contact:
    email: mapons@dianiuxinnova.com
    name: Miguel Angel Pons Menargues
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: alerts
    description: Kiosk alerts
  - name: events
    description: Kiosk physical events
paths:
  /alerts:
    get:
      tags:
        - alerts
      summary: searches alerts
      operationId: getAlerts
      description: |
        By passing in the appropriate options, you can search for
        available alerts in the kiosk
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
            default: 25
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertItem'
        '400':
          description: bad input parameter
  /events:
    get:
      tags:
        - events
      summary: get events
      operationId: getEvents
      description: |
         you can get for available events in the kiosk
      responses:
        '200':
          description: events registered in kioks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertItem'
        '401':
          description: No events found
components:
  schemas:
    AlertItem:
      type: object
      required:
        - id
        - name
        - numAlert
        - manufacturer
        - releaseDate
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Widget Adapter
        numAlert:
          type: integer
          minimum: 0
          maximum: 99999
          default: 1
          description: 'Number of alert'
        releaseDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        releaseDateEpoch:
          type: integer
          format: int64
          minimum: 0
          description: 'Same as releaseDate but with epoch format'
        manufacturer:
          $ref: '#/components/schemas/Manufacturer'
    Manufacturer:
      required:
        - name
      properties:
        name:
          type: string
          example: ACME Corporation
        homePage:
          type: string
          format: url
          example: 'https://www.acme-corp.com'
        phone:
          type: string
          example: 408-867-5309
      type: object
