openapi: 3.0.0
info:
  version: "0.4-oas3"
  title: BankAPI-1920
  description: Project Code Generation 1920
paths:
  /users:
    get:
      tags:
        - employees
      summary: get list of all users
      operationId: getAllUsers
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '401':
          description: Unauthorized
    post:
      tags:
        - users
      summary: makes a user account
      operationId: createUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            minimum: 1
          description: The user ID
        - in: query
          name: Password
          required: true
          schema:
            type: string
            format: password
            minimum: 1
          description: The user password
        - in: query
          name: E-mail
          required: true
          schema:
            type: string
            minimum: 1
          description: robin.dejong@gmail.com
        - in: query
          name: isEmployee
          required: true
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Register Succesful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '401':
          description: Not authenticated
        '403':
          description: Access token does not have the required scope
  '/users/{userId}':
    get:
      tags:
        - users
      summary: get user by id
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Great success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          description: Unauthorized!
    put:
      tags:
        - users
      summary: Update a user
      operationId: updateUser
      responses:
        '200':
          description: great success!
        '405':
          description: invalid input
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: token
          in: header
          description: ID of user that needs to be deleted
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
    delete:
      tags:
        - employees
      summary: deletes a user
      operationId: deleteUser
      responses:
        '200':
          description: great success!
        '405':
          description: invalid input
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
        - name: token
          in: header
          description: ID of user that needs to be deleted
          required: true
          schema:
            type: string
  /accounts:
    post:
      summary: select type account
      tags:
        - account
      parameters:
      - in: query
        name: accounts
        required: true
        schema:
          $ref: '#/components/schemas/Accounts'
      responses:
        '200':
          description: showing selected account
      

        
        
    get:
      summary: show all accounts from user
      tags:
        - account
     
      responses:
        '200':
          description: show account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
  
  /transactions:
    get:
      security:
      - ApiKeyAuth: []
      tags:
        - Transactions
      summary: Retrieve list of all transactions with optional parameters
      operationId: getTransactions
      parameters:
        - in: query
          name: userid
          schema:
            type: integer
            minimum: 1
          required: false
          description: The user's id
        - in: query
          name: transactionid
          schema: 
            type: integer
            minimum: 1
          required: false
          description: The id of a specific transaction 
      responses:
        '200': 
          description: Retrieve Transaction data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '405':
          description: Bad Input 
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InputError"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/responses/UnauthorizedError"
          
    post:
      tags:
        - Transactions
      summary: Performs a new transaction
      operationId: newTransaction
      requestBody: 
        $ref: '#/components/requestBodies/Transaction'
      responses:
        '200':
          description: Transaction success
        '405':
          description: Bad Input 
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InputError"
          
  /transactions/deposit:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Transactions
      summary: Deposit an amount to the user's account
      operationId: postDeposit
      parameters: 
        - in: query
          name: userid
          schema:
            type: integer
            minimum: 1
          required: true
          description: The user's id
        - in: query
          name: amount
          schema: 
            type: number
            format: double
            minimum: 0.01
          required: true
          description: The amount to deposit
      responses:
        '200':
          description: Deposit success
        '405':
          description: Bad Input 
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InputError"
        '404':
          description: User ID not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/404Error"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/responses/UnauthorizedError"
    
  /transactions/withdraw:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Transactions
      summary: Withdraw an amount to the user's account
      operationId: postWithdraw
      parameters: 
        - in: query
          name: userid
          schema:
            type: integer
            minimum: 1
          required: true
          description: The user's id
        - in: query
          name: amount
          schema: 
            type: number
            format: double
            minimum: 0.01
          required: true
          description: The amount to withdraw
      responses:
        '200':
          description: Withdraw success
        '405':
          description: Bad Input 
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InputError"
        '404':
          description: User ID not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/404Error"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/responses/UnauthorizedError"
                
security:
  - ApiKeyAuth: []   
components:
  securitySchemes:
    ApiKeyAuth:        
      type: apiKey
      in: header       
      name: X-API-KEY  
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    InputError:
      description: Invalid input
      headers:
        WWW_Authenticate:
          schema:
            type: string
    404Error:
      description: Enrty not found
      headers:
        WWW_Authenticate:
          schema:
            type: string
  schemas:
    
    Users:
      type: object
      properties:
        userId:
          type: integer
          example: 35444
        name:
          type: string
          example: Robin
        lastname:
          type: string
          example: de Jong
        email:
          type: string
          example: robin.dejong@gmail.com
        isEmployee:
          type: boolean
          example: yes
    Account:
      type: object
      properties:
        showAccounts:
          type: integer
          example: $600
        showSavings:
          type: integer
          example: $2000 
    Accounts:
      enum:
        - basic account
        - savings account
        
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1234
        from:
          type: integer
          format: int64
          example: IBAN0001
        to:
          type: integer
          format: int64
          example: IBAN0002
        userPerforming:
          type: string
          example: Hans
        transactionDate:
          type: string
          format: date-time
          example: 20-20-2000
        status:
          type: string
          enum: [pending, complete, error]
          example: complete
  requestBodies:
    Transaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transaction'
      description: Transaction object 
      required: true
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/kayleighrem/Bank/0.1'
