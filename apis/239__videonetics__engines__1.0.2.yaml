openapi: 3.0.0
info:
  version: "1.0.2"
  title: 'Engine api'
  description: 'Engine APIs'

paths:
  /centralFaceDatabase:
    get:
      tags:
        - engines
      summary: Get Central Face Database address
      description: >-
        Get all or filtered Central Face Database address
      parameters:
        - in: query
          name: 'page'
          schema:
            type: integer
            format: int32
          description: >-
            The page clause takes a the page number you want to query.
            Example:
              * To find Central Face Database at page no 4, use /centralFaceDatabase?page=4
          example: page=4
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the centralFaceDatabase model.
            Example:
              * To find centralFaceDatabase with ipv4 equal 192.168.1.110, use /centralFaceDatabase?where={"ipv4":"192.168.1.110"}
          example: '{"ipv4":"192.168.1.110"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort centralFaceDatabase by ipv4 in centralFaceDatabases IN ASCEDING order, use /centralFaceDatabase?sort=ipv4
              * To sort centralFaceDatabase by age in centralFaceDatabases IN DECENDING order, use /centralFaceDatabase?sort=-ipv4
              * Please note the - (minus) sign in front of the ipv4, that indicates inverse of ASCENDING
          example: 'sort=-ipv4'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get first centralFaceDatabase among all centralFaceDatabases, use /centralFaceDatabase?maxResults=1
              * To limit centralFaceDatabase to 1, use /centralFaceDatabase?maxResults=1
          example: 'maxResults=1'
      responses:
        '200':
          description: Get centralFaceDatabase
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/centralFaceDatabaseResponse'
    post:
      tags:
        - engines
      summary: Create a centralFaceDatabase address
      description: >-
        Create a centralFaceDatabase address.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/centralFaceDatabase'
      responses:
        '201':
          description: Create centralFaceDatabase address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/centralFaceDatabase/{id}':
    get:
      tags:
        - engines
      summary: Get central face database by id
      description: >-
        Get central face database for a given id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
      responses:
        '200':
          description: Get central face database for the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/centralFaceDatabase'
    patch:
      tags:
        - engines
      summary: Patch central face database
      description: >-
        Patch a central face database . Submit an object with one or more properties of the centralFace model.
        'Ex. {"ipv4": "162.168.1.110"}'
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: header
          name: If-Match
          schema:
            type: string
            format: etag
          required: true
          example: '270f28924ab7c80e36d24eebae1a1abddaa20aea'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/centralFaceDatabase'
      responses:
        '200':
          description: Update central face database by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
    delete:
      tags:
        - engines
      summary: Delete central face database
      description: >-
        Delete central face database
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: string
          required: true
          description: Unique ID
          example: '5c20ae2c77d5330001aecf80'
        - in: header
          name: If-Match
          schema:
            type: string
            format: etag
          required: true
          example: '270f28924ab7c80e36d24eebae1a1abddaa20aea'
      responses:
        '204':
          description: No Content
                
  /registeredFaces:
    get:
      tags:
        - engines
      summary: Get Registered Faces
      description: >-
        Get all or filtered Registered Faces
      parameters:
        - in: query
          name: 'page'
          schema:
            type: integer
            format: int32
          description: >-
            The page clause takes a the page number you want to query.
            Example:
              * To find registered faces at page no 4, use /registeredFaces?page=4
          example: page=4
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the registeredFace model.
            Example:
              * To find registered faces with registeredFaceId equal kaustubh_bhattacharyya_1, use /registeredFaces?where={"registeredFaceId":"kaustubh_bhattacharyya_1"}
              * To find registered faces with registeredFaceId equal kaustubh_bhattacharyya_1 and age equal 32years, use /registeredFaces?where={"registeredFaceId":"kaustubh_bhattacharyya_1","age":32}
          example: '{"registeredFaceId":"kaustubh_bhattacharyya_1","age":32}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort registeredFaces by age in registeredFaces IN ASCEDING order, use /registeredFaces?sort=age
              * To sort registeredFaces by age in registeredFaces IN DECENDING order, use /registeredFaces?sort=-age
              * Please note the - (minus) sign in front of the age, that indicates inverse of ASCENDING
          example: 'sort=-age'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get first registeredFace among all registeredFaces, use /registeredFaces?maxResults=1
              * To limit registeredFaces to 5, use /registeredFaces?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with faceSnaps argument.
            Example:
              * 'To find registered faces with faceSnap object.'
          example: '{"faceSnaps":1}'
      responses:
        '200':
          description: Get Registered Faces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registeredFacesResponse'
    post:
      tags:
        - engines
      summary: Create a Registered Face
      description: >-
        Create a Registered Face.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registeredFace'
      responses:
        '201':
          description: Create Registered Face
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
          
  '/registeredFaces/{id}':
    get:
      tags:
        - engines
      summary: Get Registered Face
      description: >-
        Get Registered Face
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with faceSnaps argument.
            Example:
              * 'To find registered faces with faceSnap object. use /registeredFaces/{id}?embedded={"faceSnaps":1}'
          example: '{"faceSnaps":1}'
      responses:
        '200':
          description: Get Registered Face
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registeredFace'
    patch:
      tags:
        - engines
      summary: Patch a Registered Face
      description: >-
        Patch a Registered Face. Submit an object with one or more properties of the model.
        Ex. {"property1": "New Property1 Value"} or {"property1": "New Property1 Value", "property2": "New Property2 Value"}
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: header
          name: If-Match
          schema:
            type: string
            format: etag
          required: true
          example: '270f28924ab7c80e36d24eebae1a1abddaa20aea'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registeredFace'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
    delete:
      tags:
        - engines
      summary: Delete a Registered Face
      description: >-
        Delete a Registered Face.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: string
          required: true
          description: Unique ID
          example: '5c20ae2c77d5330001aecf80'
        - in: header
          name: If-Match
          schema:
            type: string
            format: etag
          required: true
          example: '270f28924ab7c80e36d24eebae1a1abddaa20aea'
      responses:
        '204':
          description: No Content

  /engines:
    get:
      tags:
        - engines
      summary: Get all engine details
      description: >-
        Get all engine details
      parameters:
        - in: query
          name: 'page'
          schema:
            type: integer
            format: int32
          description: >-
            The page clause takes a the page number you want to query.
            Example:
              * To find registered faces at page no 4, use /engines?page=4
          example: 4
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the registeredFace model.
            Example:
              * To find enginess with capabilities 206, 211 , use /engines?where={"capabilities":{"$in":[206,211]}}
          example: '{"capabilities":{"$in":[206,211]}}'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get first registeredFace among all registeredFaces, use /engines?maxResults=1
              * To limit registeredFaces to 5, use /engines?maxResults=5
          example: 5
      responses:
        '200':
          description: Get all engines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enginesResponse'
    post:
      tags:
        - engines
      summary: Create an engine
      description: >-
        Create an engine.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engine'
        
      responses:
        '201':
          description: Create an engine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
                    
  '/engines/{id}':
    get:
      tags:
        - engines
      summary: Get engine by id
      description: >-
        Get engine details for a given id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
      responses:
        '200':
          description: Get engine details for the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engine'
    delete:
      tags:
        - engines
      summary: Delete an engine
      description: >-
        Delete an engine
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: string
          required: true
          description: Unique ID
          example: '5c20ae2c77d5330001aecf80'
        - in: header
          name: If-Match
          schema:
            type: string
            format: etag
          required: true
          example: '270f28924ab7c80e36d24eebae1a1abddaa20aea'
      responses:
        '204':
          description: No Content

  /subSystems:
    get:
      tags:
        - engines
      summary: Get all Sub System details
      description: >-
        Get all Sub System details
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the subSystem model.
            Example:
              * To find Sub Systems with capabilities 206, 211 , use /subSystems?where={"capabilities":{"$in":[206,211]}}
          example: '{"capabilities":{"$in":[206,211]}}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort subSystems by lastSynced in subSystems IN ASCEDING order, use /subSystems?sort=lastSynced
              * To sort subSystems by lastSynced in subSystems IN DECENDING order, use /subSystems?sort=-lastSynced
              * Please note the - (minus) sign in front of the lastSynced, that indicates inverse of ASCENDING
          example: 'sort=-lastSynced'
        - in: query
          name: 'page'
          schema:
            type: integer
            format: int32
          description: >-
            The page clause takes the page number you want to query.
            Example:
              * To find registered faces at page no 4, use /subSystems?page=4
          example: page=4
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get first Sub System among all Sub Systems, use /subSystems?maxResults=1
              * To limit Sub System  to 5, use /subSystems?subSystems=5
          example: 'maxResults=5'
      responses:
        '200':
          description: Get all Sub Systems
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subSystemsResponse'
    post:
      tags:
        - engines
      summary: Create a Sub System
      description: >-
        Create a Sub System.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subSystem'
        
      responses:
        '201':
          description: Create a Sub System
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
                    
  '/subSystems/{id}':
    get:
      tags:
        - engines
      summary: Get Sub System by id
      description: >-
        Get Sub System details for a given Sub System id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
      responses:
        '200':
          description: Get Sub System details for the given Sub System id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subSystem'
    patch:
      tags:
        - engines
      summary: Patch a Sub System
      description: >-
        Patch a Sub System. Submit an object with one or more properties of the model.
        Ex. {"property1": "New Property1 Value"} or {"property1": "New Property1 Value", "property2": "New Property2 Value"}
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: header
          name: If-Match
          schema:
            type: string
            format: etag
          required: true
          example: '270f28924ab7c80e36d24eebae1a1abddaa20aea'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subSystem'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
    delete:
      tags:
        - engines
      summary: Delete a Sub System
      description: >-
        Delete a Sub System
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: string
          required: true
          description: Unique ID
          example: '5c20ae2c77d5330001aecf80'
        - in: header
          name: If-Match
          schema:
            type: string
            format: etag
          required: true
          example: '270f28924ab7c80e36d24eebae1a1abddaa20aea'
      responses:
        '204':
          description: No Content

  /engineTasks:
    get:
      tags:
        - engines
      summary: Get all engineTasks
      description: >-
        Get all engineTasks details
      responses:
        '200':
          description: Get all engines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineTasksResponse'
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the engineTask model.
            Example:
              * To find engineTasks with capbilitiesType equal 211 and sourceId equal "4", use /engineTasks?where={"capbilitiesType":322,"source.sourceId":"4"}
              * To find engineTasks with destination.extras.value equal "1553774721506487", use /engineTasks?where={"destination.extras.value":"1553774721506487"}
          example: '{"destination.extras.value":"1553774721506487"}'
        - in: query
          name: 'page'
          schema:
            type: integer
            format: int32
          description: >-
            The page clause takes a the page number you want to query.
            Example:
              * To find engine tasks at page no 4, use /engines?page=4
          example: page=4
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort engineTasks by created IN ASCEDING order, use /engineTasks?sort=created
              * To sort engineTasks by created IN DECENDING order, use /engineTasks?sort=-created
              * Please note the - (minus) sign in front of the created, that indicates inverse of ASCENDING
          example: 'sort=-created'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest engineTask among whole engineTasks, use /engineTasks?maxResults=1
              * To limit engineTasks to 2, use /engineTasks?maxResults=2
          example: 'maxResults=2'
    post:
      tags:
        - engines
      summary: Create an engineTask
      description: >-
        Create a engineTasks.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engineTask'
      responses:
        '201':
          description: Create engineTask
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
                    
  '/engineTasks/{id}':
    get:
      tags:
        - engines
      summary: Get engine task by id
      description: >-
        Get engine task for a given id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
      responses:
        '200':
          description: Get engine tasks for the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineTask'
    patch:
      tags:
        - engines
      summary: Patch an engine task
      description: >-
        Patch an engine task. Submit an object with one or more properties of the engineTask model.
        'Ex. {"capbilitiesType": [211, 206]} or {"capbilitiesType": [211, 206], "source": {"sourceId":"", .....}}'
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: header
          name: If-Match
          schema:
            type: string
            format: etag
          required: true
          example: '270f28924ab7c80e36d24eebae1a1abddaa20aea'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engineTask'
      responses:
        '200':
          description: Update enginetask by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
    delete:
      tags:
        - engines
      summary: Delete an engine task
      description: >-
        Delete an engine task
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: string
          required: true
          description: Unique ID
          example: '5c20ae2c77d5330001aecf80'
        - in: header
          name: If-Match
          schema:
            type: string
            format: etag
          required: true
          example: '270f28924ab7c80e36d24eebae1a1abddaa20aea'
      responses:
        '204':
          description: No Content

  /snaps:
    get:
      tags:
        - engines
      summary: Get all unprocesed snaps
      description: >-
        Get all unprocesed snaps
      responses:
        '200':
          description: Get all unprocesed snaps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snapsResponse'
    post:
      tags:
        - engines
      summary: Create a unprocesed snap
      description: >-
        Create an unprocesed snap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap'
      responses:
        '201':
          description: Create an unprocesed snap
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
                
  '/snaps/{id}':
    get:
      tags:
        - engines
      summary: Get snap by id
      description: >-
        Get snap by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
      responses:
        '200':
          description: Get snap by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap'

  /clips:
    get:
      tags:
        - engines
      summary: Get all unprocesed clips
      description: >-
        Get all unprocesed clips
      responses:
        '200':
          description: Get all unprocesed clips
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clipsResponse'
    post:
      tags:
        - engines
      summary: Create an unprocesed clip
      description: >-
        Create an unprocesed clip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clip'
      responses:
        '201':
          description: Create an unprocesed clip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
                
  '/clips/{id}':
    get:
      tags:
        - engines
      summary: Get clip by id
      description: >-
        Get clip by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
      responses:
        '200':
          description: Get clip by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clip'

  /faceSnaps:
    get:
      tags:
        - engines
      summary: Get all faceSnaps
      description: >-
        Get all faceSnaps
      responses:
        '200':
          description: Get all faceSnaps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faceSnapsResponse'
    post:
      tags:
        - engines
      summary: Create a faceSnap
      description: >-
        Create a faceSnap.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/faceSnap'
      responses:
        '201':
          description: Create a faceSnap
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
    
  /eventSnaps:
    get:
      tags:
        - engines
      summary: Get all eventSnaps
      description: >-
        Get all eventSnaps
      responses:
        '200':
          description: Get all eventSnaps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventSnapsResponse'
    post:
      tags:
        - engines
      summary: Create an eventSnap
      description: >-
        Create an eventSnap.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap'
      responses:
        '201':
          description: Create an eventSnap
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'
                
  '/eventSnaps/{id}':
    get:
      tags:
        - engines
      summary: Get eventSnap by id
      description: >-
        Get eventSnap by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'projection'
          schema:
            type: string
            format: string
          description: >-
            The projection clause takes a JSON as a string with keys 'featureVector1' and 'featureVector2'.
            Example:
              * To find featureVector1 and featureVector2 for event id 5e69c61793ebda6e3dad7405, use /eventSnaps/5e69c61793ebda6e3dad7405?projection={"featureVector1": 1, "featureVector2": 1}
          example: '{"featureVector1": 1, "featureVector2": 1}'
      responses:
        '200':
          description: Get eventSnap by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap'
                
  /capabilities:
    get:
      tags:
        - engines
      summary: Get all capabilities of engines
      description: >-
        Get all capabilities of engines
      responses:
        '200':
          description: Get all capabilities of engines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/capabilitiesResponse'
    post:
      tags:
        - engines
      summary: Create a capability
      description: >-
        Create a capability.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/capabilityType'
      responses:
        '201':
          description: Create a capability
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  /faceEvents:
    get:
      tags:
        - engines
      summary: Get all faceEvents
      description: >-
        Get all faceEvents
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the faceEvent model.
            Example:
              * To find faceEvents with registeredFaceId equal kaustubh_bhattacharyya_1, use /faceEvents?where={"metaFaceEvent.registeredFaceId":"kaustubh_bhattacharyya_1"}
              * To find faceEvents with registeredFaceId equal kaustubh_bhattacharyya_1 and confidence equal 5, use /faceEvents?where={"metaFaceEvent.registeredFaceId":"kaustubh_bhattacharyya_1","metaFaceEvent.confidence":5}
          example: '{"metaFaceEvent.registeredFaceId":"kaustubh_bhattacharyya_1","metaFaceEvent.confidence":5}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort faceEvents by startTimeStamp in eventDetails IN ASCEDING order, use /faceEvents?sort=eventDetails.startTimeStamp
              * To sort faceEvents by startTimeStamp in eventDetails IN DECENDING order, use /faceEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest faceEvent among whole faceEvents, use /faceEvents?maxResults=1
              * To limit faceEvents to 5, use /faceEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find faceEvents with eventSnap object. use /faceEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all faceEvents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faceEventsResponse'
    post:
      tags:
        - engines
      summary: Create a faceEvent
      description: >-
        Create a faceEvent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/faceEvent'
      responses:
        '201':
          description: Create a faceEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/faceEvents/{id}':
    get:
      tags:
        - engines
      summary: Get faceEvent by id
      description: >-
        Get faceEvent by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find faceEvents with eventSnap object. use /faceEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get faceEvent by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faceEvent'
            
  /peopleDetailEvents:
    get:
      tags:
        - engines
      summary: Get all peopleDetailEvents
      description: >-
        Get all peopleDetailEvents
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the peopleDetailEvents model.
            Example:
              * To find peopleDetailEvents with sex equal Male, use /peopleDetailEvents?where={"metaPeopleDetailEvent.sex":"Male"}
              * To find peopleDetailEvents with startTimeStamp greater than or eqial to 1545244200000 and startTimeStamp less than or equal to 1553020200000 and sex equal Female and attire equal Sari and upperColor equal Cyan and lowerColor equal Green, use /peopleDetailEvents?where={"$and":[{"eventDetails.startTimeStamp":{"$gte":1545244200000}},{"eventDetails.startTimeStamp":{"$lte":1553020200000}},{"metaPeopleDetailEvent.sex":"Female"},{"metaPeopleDetailEvent.attire":"Sari"},{"metaPeopleDetailEvent.colorUpper":"Cyan"},{"metaPeopleDetailEvent.colorLower":"Green"}]}
          example: '{"$and":[{"eventDetails.startTimeStamp":{"$gte":1545244200000}},{"eventDetails.startTimeStamp":{"$lte":1553020200000}},{"metaPeopleDetailEvent.sex":"Female"},{"metaPeopleDetailEvent.attire":"Sari"},{"metaPeopleDetailEvent.colorUpper":"Cyan"},{"metaPeopleDetailEvent.colorLower":"Green"}]}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort peopleDetailEvents by startTimeStamp in eventDetails IN ASCEDING order, use /peopleDetailEvents?sort=eventDetails.startTimeStamp
              * To sort peopleDetailEvents by startTimeStamp in eventDetails IN DECENDING order, use /peopleDetailEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest peopleDetailEvents among whole peopleDetailEvents, use /peopleDetailEvents?maxResults=1
              * To limit peopleDetailEvents to 5, use /peopleDetailEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'page'
          schema:
            type: integer
            format: int32
          description: >-
            The page clause takes a the page number you want to query.
            Example:
              * To find registered faces at page no 4, use /registeredFaces?page=4
          example: page=4
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find peopleDetailEvents with snap object. use /peopleDetailEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all peopleDetailEvents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/peopleDetailEventsResponse'
    post:
      tags:
        - engines
      summary: Create a peopleDetailEvent
      description: >-
        Create a peopleDetailEvent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/peopleDetailEvent'
      responses:
        '201':
          description: Create a peopleDetailEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/peopleDetailEvents/{id}':
    get:
      tags:
        - engines
      summary: Get peopleDetailEvent by id
      description: >-
        Get peopleDetailEvent by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find peopleDetailEvents with snap object. use /peopleDetailEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get peopleDetailEvents by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/peopleDetailEvent'

  /anprEvents:
    get:
      tags:
        - engines
      summary: Get all anprEvents
      description: >-
        Get all anprEvents
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the anprEvent model.
            Example:
              * To find anprEvents with engineTaskId equal 5c1956e925b6b30001103eaa, use /anprEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa"}
              * To find anprEvents with engineTaskId equal 5c1956e925b6b30001103eaa and sourceId equal 5c1956e925b6b30001103eab, use /anprEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}
          example: '{"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort anprEvents by startTimeStamp in eventDetails IN ASCEDING order, use /anprEvents?sort=eventDetails.startTimeStamp
              * To sort anprEvents by startTimeStamp in eventDetails IN DECENDING order, use /anprEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest anprEvent among whole anprEvents, use /anprEvents?maxResults=1
              * To limit anprEvents to 5, use /anprEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find anprEvents with eventSnap object. use /anprEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all anprEvents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/anprEventsResponse'
    post:
      tags:
        - engines
      summary: Create an anprEvent
      description: >-
        Create an anprEvent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/anprEvent'
      responses:
        '201':
          description: Create an anprEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/anprEvents/{id}':
    get:
      tags:
        - engines
      summary: Get anprEvent by id
      description: >-
        Get anprEvent by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find anprEvents with eventSnap object. use /anprEvents/{id}?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get anprEvent by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/anprEvent'

  /noSeatBeltEvents:
    get:
      tags:
        - engines
      summary: Get all noSeatBeltEvents
      description: >-
        Get all noSeatBeltEvents
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the noSeatBeltEvent model.
            Example:
              * To find noSeatBeltEvents with engineTaskId equal 5c1956e925b6b30001103eaa, use /noSeatBeltEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa"}
              * To find noSeatBeltEvents with engineTaskId equal 5c1956e925b6b30001103eaa and sourceId equal 5c1956e925b6b30001103eab, use /noSeatBeltEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}
          example: '{"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort noSeatBeltEvents by startTimeStamp in eventDetails IN ASCEDING order, use /noSeatBeltEvents?sort=eventDetails.startTimeStamp
              * To sort noSeatBeltEvents by startTimeStamp in eventDetails IN DECENDING order, use /noSeatBeltEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest noSeatBeltEvent among whole noSeatBeltEvents, use /noSeatBeltEvents?maxResults=1
              * To limit noSeatBeltEvents to 5, use /noSeatBeltEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find noSeatBeltEvents with eventSnap object. use /noSeatBeltEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all noSeatBeltEvents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noSeatBeltEventsResponse'
    post:
      tags:
        - engines
      summary: Create a noSeatBeltEvent
      description: >-
        Create a noSeatBeltEvent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/noSeatBeltEvent'
      responses:
        '201':
          description: Create a noSeatBeltEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/noSeatBeltEvents/{id}':
    get:
      tags:
        - engines
      summary: Get noSeatBeltEvent by id
      description: >-
        Get noSeatBeltEvent by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find noSeatBeltEvents with eventSnap object. use /noSeatBeltEvents/{id}?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get noSeatBeltEvent by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noSeatBeltEvent'
                
  /driverOnCallEvents:
    get:
      tags:
        - engines
      summary: Get all driverOnCallEvents
      description: >-
        Get all driverOnCallEvents
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the driverOnCallEvent model.
            Example:
              * To find driverOnCallEvents with engineTaskId equal 5c1956e925b6b30001103eaa, use /driverOnCallEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa"}
              * To find driverOnCallEvents with engineTaskId equal 5c1956e925b6b30001103eaa and sourceId equal 5c1956e925b6b30001103eab, use /driverOnCallEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}
          example: '{"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort driverOnCallEvents by startTimeStamp in eventDetails IN ASCEDING order, use /driverOnCallEvents?sort=eventDetails.startTimeStamp
              * To sort driverOnCallEvents by startTimeStamp in eventDetails IN DECENDING order, use /driverOnCallEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest driverOnCallEvent among whole driverOnCallEvents, use /driverOnCallEvents?maxResults=1
              * To limit driverOnCallEvents to 5, use /driverOnCallEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find driverOnCallEvents with eventSnap object. use /driverOnCallEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all driverOnCallEvents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/driverOnCallEventsResponse'
    post:
      tags:
        - engines
      summary: Create a driverOnCallEvent
      description: >-
        Create a driverOnCallEvent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/driverOnCallEvent'
      responses:
        '201':
          description: Create a driverOnCallEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/driverOnCallEvents/{id}':
    get:
      tags:
        - engines
      summary: Get driverOnCallEvent by id
      description: >-
        Get driverOnCallEvent by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find driverOnCallEvents with eventSnap object. use /driverOnCallEvents/{id}?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get driverOnCallEvent by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/driverOnCallEvent'
                
  /peopleCollapsingEvents:
    get:
      tags:
        - engines
      summary: Get all peopleCollapsingEvents
      description: >-
        Get all peopleCollapsingEvents
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the peopleCollapsingEvent model.
            Example:
              * To find peopleCollapsingEvents with engineTaskId equal 5c1956e925b6b30001103eaa, use /peopleCollapsingEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa"}
              * To find peopleCollapsingEvents with engineTaskId equal 5c1956e925b6b30001103eaa and sourceId equal 5c1956e925b6b30001103eab, use /peopleCollapsingEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}
          example: '{"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort peopleCollapsingEvents by startTimeStamp in eventDetails IN ASCEDING order, use /peopleCollapsingEvents?sort=eventDetails.startTimeStamp
              * To sort peopleCollapsingEvents by startTimeStamp in eventDetails IN DECENDING order, use /peopleCollapsingEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest peopleCollapsingEvent among whole peopleCollapsingEvents, use /peopleCollapsingEvents?maxResults=1
              * To limit peopleCollapsingEvents to 5, use /peopleCollapsingEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find peopleCollapsingEvents with eventSnap object. use /peopleCollapsingEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all peopleCollapsingEvents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/peopleCollapsingEventsResponse'
    post:
      tags:
        - engines
      summary: Create a peopleCollapsingEvent
      description: >-
        Create a peopleCollapsingEvent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/peopleCollapsingEvent'
      responses:
        '201':
          description: Create a peopleCollapsingEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/peopleCollapsingEvents/{id}':
    get:
      tags:
        - engines
      summary: Get peopleCollapsingEvent by id
      description: >-
        Get peopleCollapsingEvent by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find peopleCollapsingEvents with eventSnap object. use /peopleCollapsingEvents/{id}?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get peopleCollapsingEvent by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/peopleCollapsingEvent'
                
  /crowdFormationEvents:
    get:
      tags:
        - engines
      summary: Get all crowdFormationEvents
      description: >-
        Get all crowdFormationEvents
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the crowdFormationEvent model.
            Example:
              * To find crowdFormationEvents with engineTaskId equal 5c1956e925b6b30001103eaa, use /crowdFormationEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa"}
              * To find crowdFormationEvents with engineTaskId equal 5c1956e925b6b30001103eaa and sourceId equal 5c1956e925b6b30001103eab, use /crowdFormationEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}
          example: '{"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort crowdFormationEvents by startTimeStamp in eventDetails IN ASCEDING order, use /crowdFormationEvents?sort=eventDetails.startTimeStamp
              * To sort crowdFormationEvents by startTimeStamp in eventDetails IN DECENDING order, use /crowdFormationEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest crowdFormationEvent among whole crowdFormationEvents, use /crowdFormationEvents?maxResults=1
              * To limit crowdFormationEvents to 5, use /crowdFormationEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find crowdFormationEvents with eventSnap object. use /crowdFormationEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all crowdFormationEvents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/crowdFormationEventsResponse'
    post:
      tags:
        - engines
      summary: Create a crowdFormationEvent
      description: >-
        Create a crowdFormationEvent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/crowdFormationEvent'
      responses:
        '201':
          description: Create a crowdFormationEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/crowdFormationEvents/{id}':
    get:
      tags:
        - engines
      summary: Get crowdFormationEvent by id
      description: >-
        Get crowdFormationEvent by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find crowdFormationEvents with eventSnap object. use /crowdFormationEvents/{id}?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get crowdFormationEvent by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/crowdFormationEvent'
                
  /crowdDispersionEvents:
    get:
      tags:
        - engines
      summary: Get all crowdDispersionEvents
      description: >-
        Get all crowdDispersionEvents
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the crowdDispersionEvent model.
            Example:
              * To find crowdDispersionEvents with engineTaskId equal 5c1956e925b6b30001103eaa, use /crowdDispersionEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa"}
              * To find crowdDispersionEvents with engineTaskId equal 5c1956e925b6b30001103eaa and sourceId equal 5c1956e925b6b30001103eab, use /crowdDispersionEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}
          example: '{"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort crowdDispersionEvents by startTimeStamp in eventDetails IN ASCEDING order, use /crowdDispersionEvents?sort=eventDetails.startTimeStamp
              * To sort crowdDispersionEvents by startTimeStamp in eventDetails IN DECENDING order, use /crowdDispersionEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest crowdDispersionEvent among whole crowdDispersionEvents, use /crowdDispersionEvents?maxResults=1
              * To limit crowdDispersionEvents to 5, use /crowdDispersionEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find crowdDispersionEvents with eventSnap object. use /crowdDispersionEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all crowdDispersionEvents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/crowdDispersionEventsResponse'
    post:
      tags:
        - engines
      summary: Create a crowdDispersionEvent
      description: >-
        Create a crowdDispersionEvent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/crowdDispersionEvent'
      responses:
        '201':
          description: Create a crowdDispersionEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/crowdDispersionEvents/{id}':
    get:
      tags:
        - engines
      summary: Get crowdDispersionEvent by id
      description: >-
        Get crowdDispersionEvent by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find crowdDispersionEvents with eventSnap object. use /crowdDispersionEvents/{id}?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get crowdDispersionEvent by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/crowdDispersionEvent'
                
  /crowdAbnormalityEvents:
    get:
      tags:
        - engines
      summary: Get all crowdAbnormalityEvents
      description: >-
        Get all crowdAbnormalityEvents
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the crowdAbnormalityEvent model.
            Example:
              * To find crowdAbnormalityEvents with engineTaskId equal 5c1956e925b6b30001103eaa, use /crowdAbnormalityEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa"}
              * To find crowdAbnormalityEvents with engineTaskId equal 5c1956e925b6b30001103eaa and sourceId equal 5c1956e925b6b30001103eab, use /crowdAbnormalityEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}
          example: '{"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort crowdAbnormalityEvents by startTimeStamp in eventDetails IN ASCEDING order, use /crowdAbnormalityEvents?sort=eventDetails.startTimeStamp
              * To sort crowdAbnormalityEvents by startTimeStamp in eventDetails IN DECENDING order, use /crowdAbnormalityEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest crowdAbnormalityEvent among whole crowdAbnormalityEvents, use /crowdAbnormalityEvents?maxResults=1
              * To limit crowdAbnormalityEvents to 5, use /crowdAbnormalityEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find crowdAbnormalityEvents with eventSnap object. use /crowdAbnormalityEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all crowdAbnormalityEvents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/crowdAbnormalityEventsResponse'
    post:
      tags:
        - engines
      summary: Create a crowdAbnormalityEvent
      description: >-
        Create a crowdAbnormalityEvent.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/crowdAbnormalityEvent'
      responses:
        '201':
          description: Create a crowdAbnormalityEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/crowdAbnormalityEvents/{id}':
    get:
      tags:
        - engines
      summary: Get crowdAbnormalityEvent by id
      description: >-
        Get crowdAbnormalityEvent by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find crowdAbnormalityEvents with eventSnap object. use /crowdAbnormalityEvents/{id}?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get crowdAbnormalityEvent by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/crowdAbnormalityEvent'

  /atcsEvents:
    get:
      tags:
        - engines
      summary: Get all Autometic Traffic Count Events
      description: >-
        Get all Autometic Traffic Count Events
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the crowdAbnormalityEvent model.
            Example:
              * To find atcsEvents with engineTaskId equal 5c1956e925b6b30001103eaa, use /atcsEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa"}
              * To find atcsEvents with engineTaskId equal 5c1956e925b6b30001103eaa and sourceId equal 5c1956e925b6b30001103eab, use /atcsEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}
          example: '{"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort atcsEvents by startTimeStamp in eventDetails IN ASCEDING order, use /atcsEvents?sort=eventDetails.startTimeStamp
              * To sort atcsEvents by startTimeStamp in eventDetails IN DECENDING order, use /atcsEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest atcsEvents among whole atcsEvents, use /atcsEvents?maxResults=1
              * To limit atcsEvents to 5, use /atcsEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find atcsEvents with eventSnap object. use /atcsEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all Autometic Traffic Count Events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcsEventsResponse'
    post:
      tags:
        - engines
      summary: Create an Autometic Traffic Count Event
      description: >-
        Create an Autometic Traffic Count Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atcsEvent'
      responses:
        '201':
          description: Create an Autometic Traffic Count Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/atcsEvents/{id}':
    get:
      tags:
        - engines
      summary: Get Autometic Traffic Count Event by id
      description: >-
        Get Autometic Traffic Count Event by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find atcsEvent with eventSnap object. use /atcsEvents/{id}?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get Autometic Traffic Count Event by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atcsEvent'

  /noLPEvents:
    get:
      tags:
        - engines
      summary: Get all No License Plate Events
      description: >-
        Get all No License Plate Events
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the noLPEvent model.
            Example:
              * To find noLPEvents with engineTaskId equal 5c1956e925b6b30001103eaa, use /noLPEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa"}
              * To find noLPEvents with engineTaskId equal 5c1956e925b6b30001103eaa and sourceId equal 5c1956e925b6b30001103eab, use /noLPEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}
          example: '{"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort noLPEvents by startTimeStamp in eventDetails IN ASCEDING order, use /noLPEvents?sort=eventDetails.startTimeStamp
              * To sort noLPEvents by startTimeStamp in eventDetails IN DECENDING order, use /noLPEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest noLPEvents among whole noLPEvents, use /noLPEvents?maxResults=1
              * To limit noLPEvents to 5, use /noLPEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find noLPEvents with eventSnap object. use /noLPEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all No License Plate Events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noLPEventsResponse'
    post:
      tags:
        - engines
      summary: Create a No License Plate Event
      description: >-
        Create a No License Plate Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/noLPEvent'
      responses:
        '201':
          description: Create a No License Plate Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/noLPEvents/{id}':
    get:
      tags:
        - engines
      summary: Get No License Plate Event by id
      description: >-
        Get No License Plate Event by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find atcsEvent with eventSnap object. use /noLPEvents/{id}?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get No License Plate Event by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noLPEvent'

  /fancyLPEvents:
    get:
      tags:
        - engines
      summary: Get all Fancy License Plate Events
      description: >-
        Get all Fancy License Plate Events
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the fancyLPEvent model.
            Example:
              * To find fancyLPEvents with engineTaskId equal 5c1956e925b6b30001103eaa, use /fancyLPEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa"}
              * To find fancyLPEvents with engineTaskId equal 5c1956e925b6b30001103eaa and sourceId equal 5c1956e925b6b30001103eab, use /fancyLPEvents?where={"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}
          example: '{"eventDetails.engineTaskId":"5c1956e925b6b30001103eaa","eventDetails.sourceId":"5c1956e925b6b30001103eab"}'
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort fancyLPEvents by startTimeStamp in eventDetails IN ASCEDING order, use /fancyLPEvents?sort=eventDetails.startTimeStamp
              * To sort fancyLPEvents by startTimeStamp in eventDetails IN DECENDING order, use /fancyLPEvents?sort=-eventDetails.startTimeStamp
              * Please note the - (minus) sign in front of the eventDetails.startTimeStamp, that indicates inverse of ASCENDING
          example: 'sort=-eventDetails.startTimeStamp'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest fancyLPEvents among whole fancyLPEvents, use /fancyLPEvents?maxResults=1
              * To limit fancyLPEvents to 5, use /fancyLPEvents?maxResults=5
          example: 'maxResults=5'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find fancyLPEvents with eventSnap object. use /fancyLPEvents?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get all Fancy License Plate Events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fancyLPEventsResponse'
    post:
      tags:
        - engines
      summary: Create a Fancy License Plate Event
      description: >-
        Create a Fancy License Plate Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fancyLPEvent'
      responses:
        '201':
          description: Create a Fancy License Plate Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  '/fancyLPEvents/{id}':
    get:
      tags:
        - engines
      summary: Get Fancy License Plate Event by id
      description: >-
        Get Fancy License Plate Event by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Unique ID
          example: '5c1956e925b6b30001103eb6'
        - in: query
          name: 'embedded'
          schema:
            type: string
            format: string
          description: >-
            The embedded clause takes a JSON as a string with eventSnaps argument.
            Example:
              * 'To find atcsEvent with eventSnap object. use /fancyLPEvents/{id}?embedded={"eventSnaps":1}'
          example: '{"eventSnaps":1}'
      responses:
        '200':
          description: Get Fancy License Plate Event by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fancyLPEvent'
  
  /users:
    get:
      tags:
        - engines
      summary: Get all users
      description: >-
        Get all users
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the faceEvent model.
            Example:
              * To find users with username equal kaustubh and password equal kaustubh@123, use /users?where={"id":"kaustubh","password":"kaustubh@123"}
          example: '{"id":"kaustubh","password":"kaustubh@123"}'
      responses:
        '200':
          description: Get all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    post:
      tags:
        - engines
      summary: Create a user
      description: >-
        Create a user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '201':
          description: Create a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

  /category:
    get:
      tags:
        - engines
      summary: Get all face categories
      description: >-
        Get all face categories
      parameters:
        - in: query
          name: 'where'
          schema:
            type: string
            format: string
          description: >-
            The where clause takes a JSON as a string with one or many properties of the category model.
            example: 'To find category with caption equal VIP, use /category?where={"caption":"VIP"}'
          example: '{"caption":"VIP"}'
        - in: query
          name: 'page'
          schema:
            type: integer
            format: int32
          description: >-
            The page clause takes the page number you want to query.
            Example:
              * To find engine tasks at page no 4, use /category?page=4
          example: page=4
        - in: query
          name: 'sort'
          schema:
            type: string
            format: string
          description: >-
            The sort query parameter sorts the result set in ascending and desending order by one of the property of the result set.
            Example:
              * To sort engineTasks by created IN ASCEDING order, use /category?sort=caption
              * To sort engineTasks by created IN DECENDING order, use /category?sort=-caption
              * Please note the - (minus) sign in front of the created, that indicates inverse of ASCENDING
          example: 'sort=-caption'
        - in: query
          name: 'maxResults'
          schema:
            type: integer
            format: int32
          description: >-
            The maxResults query parameter limits results equal to # of maxResults.
            Example:
              * To get latest category among all categories, use /category?maxResults=1
              * To limit categories to 2, use /category?maxResults=2
          example: 'maxResults=2'
      responses:
        '200':
          description: Get all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faceCategoryResponse'
    post:
      tags:
        - engines
      summary: Create a face category
      description: >-
        Create a face category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/faceCategory'
      responses:
        '201':
          description: Create a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultResponse'

components:
  schemas:

    faceCategoryResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/faceCategory'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    meta:
      type: object
      readOnly: true
      properties:
        page:
          type: integer
          format: int32
          example: 1
        maxResults:
          type: integer
          format: int32
          example: 25
        total:
          type: integer
          format: int32
          example: 100
          
    centralFaceDatabase:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        ipv4:
          type: string
          format: string
          example: '192.168.1.110'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'
    
    sourceType:
      type: string
      format: string
      enum: ['none', 'rtsp', 'http', 'file', 'ftp', 'vms', 'mqtt', 'amqp', 'S3', 'VS3', 'BaseUrl', 'RelativeUrl']
      example: 'rtsp'
      description: >-
        Capability id supported are as follows:
         * `'none'` - None
         * `'rtsp'` - RTSP Stream
         * `'http'` - HTTP Stream
         * `'file'` - Video file at Engine
         * `'ftp'` - File at FTP Server
         * `'vms'` - Stream from VMS
         * `'mqtt'` - MQ over mqtt protocol
         * `'amqp'` - MQ over amqp protocol
         * `'S3'` - Send to AWS S3 bucket
         * `'VS3'` - Send to Videonetics VS3
         * `'BaseUrl'` - Use complete baseUrl
         * `'RelativeUrl'` - Use complete relativeUrl
    
    sourceTypeWithCaption:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        type:
          $ref: '#/components/schemas/sourceType'
        caption:
          type: string
          format: string
          example: 'RTSP stream'
         
    destinationType:
      type: string
      format: string
      enum: ['none', 'rtsp', 'http', 'file', 'ftp', 'vms', 'mqtt', 'amqp', 'S3', 'VS3','BaseUrl','RelativeUrl']
      example: 'S3'
      description: >-
        Capability id supported are as follows:
         * `'none'` - None
         * `'rtsp'` - RTSP Stream
         * `'http'` - HTTP Stream
         * `'file'` - Video file at Engine
         * `'ftp'` - File at FTP Server
         * `'vms'` - Stream from VMS
         * `'mqtt'` - MQ over mqtt protocol
         * `'amqp'` - MQ over amqp protocol
         * `'S3'` - Send to AWS S3 bucket
         * `'VS3'` - Send to Videonetics simple storage
         * `'BaseUrl'` - Use complete baseUrl
         * `'RelativeUrl'` - Use complete relativeUrl

    destinationTypeWithCaption:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        type:
          $ref: '#/components/schemas/destinationType'
        caption:
          type: string
          format: string
          example: 'MQTT Queue'
    
    sourceEndPoint:
      type: object
      properties:
        sourceId:
          type: string
          format: string
          example: '5c0d611b23aa7c0001a3b6ec'
        type1:
          $ref: '#/components/schemas/sourceType'
        baseUrl1:
          type: string
          format: string
          example: '192.168.1.62'
        relativeUrl1:
          type: string
          format: string
          example: '/'
        name1:
          type: string
          format: string
          example: 'live.sdp'
        user1:
          type: string
          format: string
          example: 'admin'
        pass1:
          type: string
          format: string
          example: 'admin'
        type2:
          $ref: '#/components/schemas/sourceType'
        baseUrl2:
          type: string
          format: string
          example: 'monotosh'
        relativeUrl2:
          type: string
          format: string
          example: 'snaps/faceEvents/temp_backend/'
        name2:
          type: string
          format: string
          example: ''
        user2:
          type: string
          format: string
          example: 'admin'
        pass2:
          type: string
          format: string
          example: 'admin'
        type3:
          $ref: '#/components/schemas/sourceType'
        baseUrl3:
          type: string
          format: string
          example: 'monotosh'
        relativeUrl3:
          type: string
          format: string
          example: 'snaps/faceEvents/temp_backend/'
        name3:
          type: string
          format: string
          example: ''
        user3:
          type: string
          format: string
          example: 'admin'
        pass3:
          type: string
          format: string
          example: 'admin'
        startTimeStamp:
          type: integer
          format: int64
          example: 1546041600000
          description: 'Process the source types FROM this unix timestamp'
        endTimeStamp:
          type: integer
          format: int64
          example: 1546041600000
          description: 'Process the source types TILL this unix timestamp'
        snaps:
          type: array
          example: [{"source":"type1","count": 1,"preEventSec": 10,"postEventSec": 0}, {"source":"type2","count": 6,"preEventSec": 0,"postEventSec": 60}, {"source":"type3","count": 12,"preEventSec": 50,"postEventSec": 60}]
          items:
            $ref: '#/components/schemas/evidenceConfig'
        clips:
          type: array
          example: [{"source":"type1","count": 1,"preEventSec": 20,"postEventSec": 0}, {"source":"type2","count": 1,"preEventSec": 0,"postEventSec": 20}, {"source":"type3","count": 1,"preEventSec": 60,"postEventSec": 60}]
          items:
            $ref: '#/components/schemas/evidenceConfig'
        schedule:
          type: array
          minItems: 7
          maxItems: 7
          example: [['off','type1','type2', 'off', '... 24'], ['type1','type1','type2', 'type1', '... 24'], ['off','type1','type2', 'off', '... 24'], ['off','type1','type2', 'off', '... 24'], ['off','type1','type2', 'off', '... 24'], ['off','type1','type2', 'off', '... 24'], ['off','type1','type2', 'off', '... 24']]
          items:
            type: array
            minItems: 24
            maxItems: 24
            items:
              $ref: '#/components/schemas/scheduleSource'
          
    destinationEndPoint:
      type: object
      properties:
        sourceId:
          type: string
          format: string
          example: '5c0d611b23aa7c0001a3b6ec'
        type1:
          $ref: '#/components/schemas/destinationType'
        baseUrl1:
          type: string
          format: string
          example: 'bucket'
        relativeUrl1:
          type: string
          format: string
          example: 'events/'
        name1:
          type: string
          format: string
          example: 'visage/'
        user1:
          type: string
          format: string
          example: 'admin'
        pass1:
          type: string
          format: string
          example: 'admin'
        type2:
          $ref: '#/components/schemas/destinationType'
        baseUrl2:
          type: string
          format: string
          example: 'snapbucket'
        relativeUrl2:
          type: string
          format: string
          example: 'snaps/faceEvents/temp_backend/'
        name2:
          type: string
          format: string
          example: ''
        user2:
          type: string
          format: string
          example: 'admin'
        pass2:
          type: string
          format: string
          example: 'admin'
        type3:
          $ref: '#/components/schemas/destinationType'
        baseUrl3:
          type: string
          format: string
          example: 'snapbucket'
        relativeUrl3:
          type: string
          format: string
          example: 'snaps/faceEvents/temp_backend/'
        name3:
          type: string
          format: string
          example: ''
        user3:
          type: string
          format: string
          example: 'admin'
        pass3:
          type: string
          format: string
          example: 'admin'
        extras:
          type: array
          example: [{"key": "vasjobid","value": "1553848496172609"},{"key": "message","value": "Instusion Detection"},{"key": "action","value": "Take action at high priority"},{"key": "priority","value": "1"}]
          items:
            $ref: '#/components/schemas/extra'

    evidenceConfig:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/scheduleSource'
        count:
          type: integer
          format: int32
          default: 1
          example: 1
        preEventSec:
          type: integer
          format: int32
          default: 0
          example: 10
        postEventSec:
          type: integer
          format: int32
          default: 0
          example: 10

    extra:
      type: object
      properties:
        key:
          type: string
          format: string
          example: 'message'
        value:
          type: string
          format: string
          example: 'Instusion Detection'

    scheduleSource:
      type: string
      format: string
      enum: ['off', 'type1', 'type2', 'type3']
      example: 'type1'
      default: 'off'
      description: >-
        Following schedule sources supported:
         * `'off'` - scheduled off
         * `'type1'` - scheduled from type1
         * `'type2'` - scheduled from type2
         * `'type3'` - scheduled from type3

    zone:
      type: object
      properties:
        zoneId:
          type: integer
          format: int64
          example: 1
          default: 0
        zoneType:
          $ref: '#/components/schemas/zoneType'
        numberOfVertices:
          type: integer
          format: int32
          example: 4
          default: 4
        vertices:
          type: array
          items:
            $ref: '#/components/schemas/vertex'
        config:
          type: array
          example: [{"key": "minNoOfPeopleInCrowd","value": "8"},{"key": "observationDurationInSec","value": "40"},{"key": "gapBetweenEventsInSec","value": "120"}]
          items:
            $ref: '#/components/schemas/config'

    zoneType:
      type: string
      format: string
      enum: ['interest', 'mask', 'none']
      example: 'interest'
      default: 'none'
      description: >-
        Following zone types supported:
         * `'interest'` - process this zone
         * `'mask'` - Do NOT process this zone
         * `'none'` - none

    line:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
          default: 1
        lineType:
          $ref: '#/components/schemas/lineType'
        vertices:
          type: array
          items:
            $ref: '#/components/schemas/vertex'
        config:
          type: array
          example: [{"key": "observationDurationInSec","value": "40"},{"key": "gapBetweenEventsInSec","value": "120"}]
          items:
            $ref: '#/components/schemas/config'

    lineType:
      type: string
      format: string
      enum: ['entry', 'exit', 'both', 'none']
      example: 'entry'
      default: 'none'
      description: >-
        Following line types supported:
         * `'entry'` - entry
         * `'exit'` - exit
         * `'both'` - both
         * `'none'` - none

    vertex:
      type: object
      properties:
        x:
          type: integer
          format: int32
          example: 10
          default: 0
        y:
          type: integer
          format: int32
          example: 10
          default: 0

    config:
      type: object
      properties:
        key:
          type: string
          format: string
          example: 'clusterThF'
        value:
          type: string
          format: string
          example: '0.5'

    engine:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        machineId:
          type: string
          format: string
          example: '48c8a4b13c974a19bf0a7c50fa5e47a0'
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/capability'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'

    registeredFace:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        registeredFaceId:
          type: string
          format: string
          example: 'barak_obama_1'
        fullName:
          type: string
          format: string
          example: 'Barak Obama'
        faceSnaps:
          type: array
          items:
            #$ref: '#/components/schemas/faceSnap'
            type: string
            format: string
            example: '5c1956e925b6b30001103eb5'
          description: "_id of faceSnap #$ref: '#/components/schemas/faceSnap'"
        age:
          type: integer
          format: int32
          example: 25
        sex:
          type: string
          enum: [Male, Female, Other, NA]
          example: 'Male'
        type:
          $ref: '#/components/schemas/faceCategory'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'

    engineTask:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        capbilitiesType:
          $ref: '#/components/schemas/capability'
        eventType:
          $ref: '#/components/schemas/eventType'
        engineMachineId:
          type: string
          format: string
          example: '48c8a4b13c974a19bf0a7c50fa5e47a0'
        isExpired:
          type: boolean
          default: false
          example: false
          description: >-
            Explanations:
            * true = Engines will NEVER execute this task
            * false = Engines will execute this task
        timeToLive:
          type: integer
          format: int64
          example: -1
          default: -1
          description: >-
            Time in milliseconds of expiry or the task. Engines will not execute an expired task.
            Explanations:
            * -1 = Never expires
            * -2 = Expired
            *  0 = Will expire in 0 milliseconds
            * >0 = milliseconds till expiry
        source:
          $ref: '#/components/schemas/sourceEndPoint'
        destination:
          $ref: '#/components/schemas/destinationEndPoint'
        zoneSetting:
          type: object
          properties:
            referenceWidth:
              type: integer
              format: int32
              example: 640
              description: 'Reference width on which zones are relevent'
            referenceHeight:
              type: integer
              format: int32
              example: 480
              description: 'Reference height on which zones are relevent'
            zones:
              type: array
              items:
                $ref: '#/components/schemas/zone'
        lineSetting:
          type: object
          properties:
            referenceWidth:
              type: integer
              format: int32
              example: 640
              description: 'Reference width on which zones are relevent'
            referenceHeight:
              type: integer
              format: int32
              example: 480
              description: 'Reference height on which zones are relevent'
            lines:
              type: array
              items:
                $ref: '#/components/schemas/line'
        config:
          type: array
          example: [{"key": "clusterThF","value": "0.5"},{"key": "disimilarityThF","value": "0.5"},{"key": "min_match_counterI","value": "3"},{"key": "faceAngleTh","value": "20"},{"key": "posMatchCounter","value": "30"},{"key": "motionTh","value": "10"},{"key": "minOccupency","value": "80%"},{"key": "minNoOfPeopleInCrowd","value": "8"},{"key": "observationDurationInSec","value": "40"},{"key": "gapBetweenEventsInSec","value": "120"}]
          items:
            $ref: '#/components/schemas/config'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'

    faceCategory:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        caption:
          type: string
          format: string
          nullable: false
          readOnly: false
          example: 'VIP'
        color:
          type: string
          format: string
          nullable: false
          readOnly: false
          default: 'green'
          example: 'olive'
          description: 'Highlighter color, allowed ["red", "green", "blue","silver", "gray", "black","maroon", "yellow", "olive","lime", "aqua", "teal", "navy", "fuchsia", "purple", "teal", "teal"]'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'
          
    eventDetails:
      type: object
      properties:
        sourceId:
          type: string
          format: string
          example: '5c1956e925b6b30001103eaa'
          description: "_id of camera #$ref: '#/components/schemas/camera' from project cameras"
        engineTaskId:
          type: string
          format: string
          example: '5c1956e925b6b30001103eaa'
          description: "_id of engineTasks #$ref: '#/components/schemas/engineTasks'"
        zoneId:
          type: integer
          format: int64
          example: 1
          default: 0
          description: "the zoneId of the engineTask in zoneSetting, #$ref: '#/components/schemas/zone'"
        confidence:
          type: number
          format: float
          example: 0.9
          default: 0.0
          description: 'match confidence predicted by engine during event detection'
        startTimeStamp:
          type: integer
          format: int64
          example: 1546041600000
          description: 'Event start timestamp in Unix epoch milliseconds'
        endTimeStamp:
          type: integer
          format: int64
          example: 1546041600000
          description: 'Event end timestamp in Unix epoch milliseconds'
        extras:
          type: array
          example: [{"key": "vasjobid","value": "1553848496172609"},{"key": "message","value": "Instusion Detection"},{"key": "action","value": "Take action at high priority"},{"key": "priority","value": "1"}]
          items:
            $ref: '#/components/schemas/extra'
          
    metaFaceEvent:
      type: object
      properties:
        registeredFaceId:
          type: string
          format: string
          nullable: true
          example: 'barak_obama_1'
          default: ""
          description: "registeredFaceId of '#/components/schemas/registeredFace'"
        fullName:
          type: string
          format: string
          example: 'Mike Johnson'
        age:
          type: integer
          format: int32
          example: 22
          default: 0
          description: 'Age of person from registerd face database if registered face'
        ageMin:
          type: integer
          format: int32
          example: 20
          default: 0
          description: 'Minimum age estimated by Detection Engine from the estimated age range'
        ageMax:
          type: integer
          format: int32
          example: 25
          default: 0
          description: 'Maximum age estimated by Detection Engine from the estimated age range'
        sex:
          $ref: '#/components/schemas/gender'
        type:
          $ref: '#/components/schemas/faceCategory'
        bestSnap:
          type: string
          format: uri
          example: 'https://s3.amazonaws.com/monotosh/snaps/fe6d3dd9-2820-4512-81c2-2e871db3cdaf.jpg'
        confidence:
          type: number
          format: float
          default: 0
          example: 0.04
        eventId:
          type: string
          format: string
          example: "5c1956e925b6b30001103eaa"
          default: "0"
          description: 'Source EventId'

    metaPeopleDetailEvent:
      type: object
      properties:
        sex:
          $ref: '#/components/schemas/gender'
        attire:
          $ref: '#/components/schemas/attire'
        colorUpper:
          $ref: '#/components/schemas/color'
        colorLower:
          $ref: '#/components/schemas/color'

    metaAnprEvent:
      type: object
      properties:
        vehicleNumber:
          type: string
          format: string
          example: 'WB08A12345'
          description: 'Vehicle number detected in OCR'
        vehicleClass:
          $ref: '#/components/schemas/vehicleClass'
        vehicleColor:
          $ref: '#/components/schemas/color'

    metaNoSeatBeltEvent:
      type: object
      properties:
        vehicleNumber:
          type: string
          format: string
          example: 'WB11B12345'
          description: 'Vehicle number detected in OCR'
        vehicleClass:
          $ref: '#/components/schemas/vehicleClass'
        vehicleColor:
          $ref: '#/components/schemas/color'

    metaDriverOnCallEvent:
      type: object
      properties:
        vehicleNumber:
          type: string
          format: string
          example: 'WB11B12345'
          description: 'Vehicle number detected in OCR'
        vehicleClass:
          $ref: '#/components/schemas/vehicleClass'
        vehicleColor:
          $ref: '#/components/schemas/color'

    metaCrowdFormationEvent:
      type: object
      properties:
        noOfPeopele:
          type: integer
          format: int32
          example: 54
          default: 0
          description: '# of people detected by engine in crowd'

    metaAtcsEvent:
      type: object
      properties:
        noOfTraffic:
          type: integer
          format: int32
          example: 15
          default: 0
          description: '# of traffic detected by engine'

    metaNoLPEvent:
      type: object
      properties:
        vehicleClass:
          $ref: '#/components/schemas/vehicleClass'
        vehicleColor:
          $ref: '#/components/schemas/color'

    metaFancyLPEvent:
      type: object
      properties:
        vehicleNumber:
          type: string
          format: string
          example: 'WB11B12345'
          description: 'Vehicle number detected in OCR'
        vehicleClass:
          $ref: '#/components/schemas/vehicleClass'
        vehicleColor:
          $ref: '#/components/schemas/color'

    event:
      type: object
      discriminator:
        propertyName: eventType
      required:
        - eventType # required for inheritance to work and must be the derived class name
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        capbilitiesType:
          $ref: '#/components/schemas/capability'
        eventType:
          $ref: '#/components/schemas/eventType'
        eventDetails:
          $ref: '#/components/schemas/eventDetails'
        eventSnaps:
          type: array
          example: ['5c1956e925b6b30001103eb5', '5c1956e925b6b30001103eb6', '5c1956e925b6b30001103eb9']
          items:
            type: string
            format: string
          description: "_id of snap from #$ref: '#/components/schemas/snap'"
        eventClips:
          type: array
          example: ['5c1956e925b6b30001103eb7', '5c1956e925b6b30001103eb8']
          items:
            type: string
            format: string
          description: "_id of snap from #$ref: '#/components/schemas/clip'"
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'
                
    snap:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        snap:
          type: string
          format: uri
          example: 'https://s3.amazonaws.com/monotosh/snaps/fe6d3dd9-2820-4512-81c2-2e871db3cdaf.jpg'
        snapId:
          type: string
          format: string
          example: 'fe6d3dd9-2820-4512-81c2-2e871db3cdaf'
        snapTimeStamp:
          type: integer
          format: int64
          example: 1546041600000
          description: 'Unix timestamp when snap is taken'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'

    clip:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eba'
        clip:
          type: string
          format: uri
          example: 'https://s3.amazonaws.com/bucket/clips/fe6d3dd9-2820-4512-81c2-2e871db3cdaf.mp4'
        clipId:
          type: string
          format: string
          example: 'fe6d3dd9-2820-4512-81c2-2e871db3cdaf'
        starpTimeStamp:
          type: integer
          format: int64
          example: 1546041600000
          description: 'Unix timestamp from when clip is recorded'
        endTimeStamp:
          type: integer
          format: int64
          example: 1546041600000
          description: 'Unix timestamp till when clip is recorded'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72f'
        links:
          $ref: '#/components/schemas/links'

    featureVector:
      type: array
      items:
        type: array
        items:
          type: number
          format: float
          default: 0
          example: [-0.03991749510169029, 0.10491644591093063, 0.0908227413892746, -0.008847326040267944]
      nullable: true
      default: null
          
    faceSnap:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        snap:
          type: string
          format: uri
          example: 'https://s3.amazonaws.com/monotosh/snaps/fe6d3dd9-2820-4512-81c2-2e871db3cdaf.jpg'
        snapId:
          type: string
          format: string
          example: 'fe6d3dd9-2820-4512-81c2-2e871db3cdaf'
        processCount:
          type: integer
          format: int32
          default: 0
        registeredFaceId:
          type: string
          format: string
          example: 'barak_obama_1'
        featureVector1:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
              default: 0
              example: [-0.03991749510169029, 0.10491644591093063, 0.0908227413892746, -0.008847326040267944]
          nullable: true
          default: null
        featureVector2:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
              default: 0
              example: [-0.03991749510169029, 0.10491644591093063, 0.0908227413892746, -0.008847326040267944]
          nullable: true
          default: null
        confidence:
          type: number
          format: float
          default: 0
          example: 0.04
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'
          
    uploadSnap:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        snap:
          type: string
          format: uri
          example: 'https://s3.amazonaws.com/monotosh/snaps/fe6d3dd9-2820-4512-81c2-2e871db3cdaf.jpg'
        snapId:
          type: string
          format: string
          example: 'fe6d3dd9-2820-4512-81c2-2e871db3cdaf'
        featureVector1:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
              default: 0
              example: [-0.03991749510169029, 0.10491644591093063, 0.0908227413892746, -0.008847326040267944]
          nullable: true
          default: null
        featureVector2:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
              default: 0
              example: [-0.03991749510169029, 0.10491644591093063, 0.0908227413892746, -0.008847326040267944]
          nullable: true
          default: null
        confidence:
          type: number
          format: float
          default: 0
          example: 0.04
        processCount:
          type: integer
          format: int32
          default: 0
        file:
          type: object
          format: binary
          
    snapUploadModel:
      type: object
      properties:
        portfolioId:
          type: string
          format: string
          example: 'mike_johnson_1'
        fullName:
          type: string
          format: string
          example: 'Mike Johnson'
        age:
          type: integer
          format: int32
          example: 25
        sex:
          $ref: '#/components/schemas/gender'
        type:
          $ref: '#/components/schemas/faceCategory'
        snaps:
          type: array
          items:
            $ref: '#/components/schemas/uploadSnap'
          example: '[{ "_id": "5c1956e925b6b30001103eb5", "snap":"https://s3.amazonaws.com/monotosh/snaps/fe6d3dd9-2820-4512-81c2-2e871db3cdaf.jpg", "snapId":"fe6d3dd9-2820-4512-81c2-2e871db3cdaf", "file": null },{ "_id": "5c1956e925b6b30001103eb6", "snap":"https://s3.amazonaws.com/monotosh/snaps/fe6d3dd9-2820-4512-81c2-2e871db3cdaf.jpg", "snapId":"fe6d3dd9-2820-4512-81c2-2e871db3cdaf", "file": null }]'
          description: "_id of faceSnap #$ref: '#/components/schemas/faceSnap'"
              
    gender:
      type: string
      format: string
      enum: ['Male', 'Female', 'Other', 'NA']
      example: 'Male'
      default: 'Male'
      description: 'Sex of person predicted by engine during event'
      
    attire:
      type: string
      format: string
      enum: ['PantShirt', 'Sari', 'SalwarKameez', 'ShirtLungi', 'KurtaPajama', 'Other']
      example: 'PantShirt'
      default: 'PantShirt'
      description: 'Attire of person predicted by the engine during peopleDetailEvent event'
      
    color:
      type: string
      format: string
      enum: ['Black', 'Blue', 'Cyan', 'Gray', 'Green', 'Purple', 'Red', 'Yellow', 'Silver', 'Gold', 'White', 'Undetermined']
      example: 'Black'
      default: 'Black'
      description: 'Attire of person predicted by the engine during peopleDetailEvent event'
      
    vehicleClass:
      type: string
      format: string
      enum: ['TwoWheeler', 'ThreeWheeler', 'FourWheeler', 'HeavyVehicle']
      example: 'TwoWheeler'
      default: 'TwoWheeler'
      description: >-
        Vehicle classifications are as follows:
         * `'TwoWheeler'` - Two Wheeler vehicles i.e. Motor Cycle, Bike
         * `'ThreeWheeler'` - Three Wheeler vehicles i.e. Auto Rickshaw
         * `'FourWheeler'` - Four Wheeler vehicles i.e. Car, SUV
         * `'HeavyVehicle'` - Heavy Vehicles i.e. Bus, Truck
          
    capability:
      type: integer
      format: int32
      enum: [206, 207, 210, 211, 221, 222, 322, 325, 329]
      example: 211
      description: >-
        Capability id supported are as follows:
         * `206` - Face Capture
         * `207` - ANPR
         * `210` - People Count
         * `211` - Photo Recognition
         * `221` - Crowd Formation/Crowd Detection
         * `222` - Queue Formation Detection
         * `322` - No Seat Belt
         * `325` - People Details
         * `329` - Driver on Call

    capabilityType:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        capability:
          $ref: '#/components/schemas/capability'
        caption:
          type: string
          format: string
          example: 'Face Recognition'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'
          
    subSystem:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        subSystemId:
          type: string
          format: string
          example: '48c8a4b13c974a19bf0a7c50fa5e47a0'
          description: 'unique id of the system in the central system database'
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/capability'
        isSyncing:
          type: boolean
          default: false
          example: false
          description: 'If data sync process is ongoing from central to sub system'
        lastSynced:
          type: integer
          format: int64
          nullable: true
          default: null
          example: 1546041600000
          description: 'Epoch timestamp when the sub system was last synced with central system'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'
    
    linksSelf:
      type: object
      readOnly: true
      properties:
        self:
          type: object
          readOnly: true
          properties:
            title:
              $ref: '#/components/schemas/title'
            href:
              $ref: '#/components/schemas/href'
              
    links:
      type: object
      readOnly: true
      properties:
        parent:
          type: object
          readOnly: true
          properties:
            title:
              $ref: '#/components/schemas/title'
            href:
              $ref: '#/components/schemas/href'
        self:
          type: object
          readOnly: true
          properties:
            title:
              $ref: '#/components/schemas/title'
            href:
              $ref: '#/components/schemas/href'
        next:
          type: object
          readOnly: true
          properties:
            title:
              $ref: '#/components/schemas/title'
            href:
              $ref: '#/components/schemas/href'
        last:
          type: object
          readOnly: true
          properties:
            title:
              $ref: '#/components/schemas/title'
            href:
              $ref: '#/components/schemas/href'
        prev:
          type: object
          readOnly: true
          properties:
            title:
              $ref: '#/components/schemas/title'
            href:
              $ref: '#/components/schemas/href'
        collection:
          type: object
          readOnly: true
          properties:
            title:
              $ref: '#/components/schemas/title'
            href:
              $ref: '#/components/schemas/href'
    
    title:
      type: string
      format: string
      readOnly: true
      example: 'collection'
    
    href:
      type: string
      format: string
      readOnly: true
      example: 'collection?maxResults=2&page=3'
          
    #==================== Engines Commands start ======================
          
    commands:
      type: integer
      enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18]
      minimum: 1
      maximum: 17
      example: 2
      description: >-
        Command Id:
         * `0` - Stop
         * `1` - Start
         * `2` - Restart
         * `3` - Pause
         * `4` - Resume
         * `5` - Received/Connected
         * `6` - Intermediate/Found/FaceFound/Identified
         * `7` - Completed/Done
         * `8` - Become Online/Go Alive Status
         * `9` - Become Offline/Go Dead Status
         * `10` - Unavailable/Unknown Status
         * `11` - Face Feature Request Command
         * `12` - Sync Central Face database to Sub System Request
         * `13` - Sync Central Face database to Sub System Response
         * `14` - Registered Face Added/Registered
         * `15` - Registered Face Edited/Updated/Modified
         * `16` - Registered Face Deleted
         * `17` - Investigation Request Command
         * `18` - Export Request Command
    
    command:
      type: object
      properties:
        capability:
          $ref: '#/components/schemas/capability'
        command:
          example: 2
          $ref: '#/components/schemas/commands'
          
    faceCommand:
      allOf:
        - $ref: '#/components/schemas/command'
        - properties:
            registeredFaceId:
              type: string
              format: string
              example: 'barak_obama_1'

    faceFeatureResponseCommand:
      type: object
      properties:
        capability:
          $ref: '#/components/schemas/capability'
        command:
          example: 5
          $ref: '#/components/schemas/commands'
        totalFaces:
          type: integer
          format: int32
          default: 0
          example: 1
        faceSnap:
          $ref: '#/components/schemas/faceSnap'
        snapUploadModel:
          $ref: '#/components/schemas/snapUploadModel'
            
    faceFeatureRequestCommand:
      type: object
      properties:
        destination:
          $ref: '#/components/schemas/destinationEndPoint'
        command:
          example: 10
          $ref: '#/components/schemas/commands'
        snaps:
          type: array
          items:
            #$ref: '#/components/schemas/faceSnap'
            type: string
            format: string
            example: ['5c1956e925b6b30001103eb5','5c1956e925b6b30001103eb5']
          description: "_id of faceSnap #$ref: '#/components/schemas/faceSnap'"
        snapUploadModels:
          type: array
          items:
            $ref: '#/components/schemas/snapUploadModel'
          
    engineStatusCommand:
      type: object
      properties:
        capability:
          type: array
          items:
            $ref: '#/components/schemas/capability'
        command:
          example: 8
          $ref: '#/components/schemas/commands'
        engineMachineId:
          type: string
          format: string
          example: '48c8a4b13c974a19bf0a7c50fa5e47a0'
    
    subSystemStatusCommand:
      type: object
      properties:
        capability:
          type: array
          items:
            $ref: '#/components/schemas/capability'
        command:
          example: 8
          $ref: '#/components/schemas/commands'
        subSystemId:
          type: string
          format: string
          example: '48c8a4b13c974a19bf0a7c50fa5e47a0'
          
    #==================== Engines Commands end ======================
          
    #==================== Models for internal use start =================
    
    faceSnapWithRegisteredFaceSnaps:
      type: object
      properties:
        faceSnap:
          $ref: '#/components/schemas/faceSnap'
        registeredFaceWithFaceSnaps:
          $ref: '#/components/schemas/registeredFaceWithFaceSnaps'
          
    faceEventWithRegisteredFaceSnaps:
      type: object
      properties:
        faceEvent:
          $ref: '#/components/schemas/faceEventWithEventSnaps'
        registeredFaceWithFaceSnaps:
          $ref: '#/components/schemas/registeredFaceWithFaceSnaps'
          
    registeredFaceWithFaceSnaps:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        registeredFaceId:
          type: string
          format: string
          example: 'barak_obama_1'
        fullName:
          type: string
          format: string
          example: 'Barak Obama'
        faceSnaps:
          type: array
          items:
            $ref: '#/components/schemas/faceSnap'
        age:
          type: integer
          format: int32
          example: 25
        sex:
          type: string
          enum: [Male, Female, Other, NA]
        type:
          $ref: '#/components/schemas/faceCategory'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'
        
    faceEventWithEventSnaps:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        eventDetails:
          $ref: '#/components/schemas/eventDetails'
        eventSnaps:
          type: array
          items:
            $ref: '#/components/schemas/faceSnap'
        metaFaceEvent:
          $ref: '#/components/schemas/metaFaceEvent'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'
          
    peopleDetailEventWithSnaps:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        eventDetails:
          $ref: '#/components/schemas/eventDetails'
        eventSnaps:
          type: array
          items:
            $ref: '#/components/schemas/snap'
        metaPeopleDetailEvent:
          $ref: '#/components/schemas/metaPeopleDetailEvent'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/links'
          
    faceEventsWithEventSnapsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/faceEventWithEventSnaps'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    registeredFaceWithSnapsResponse:
       properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/registeredFaceWithFaceSnaps'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    peopleDetailEventWithSnapsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/peopleDetailEventWithSnaps'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    #==================== Models for internal use end =================
              
    #==================== API responses start =======================
          
    defaultResponse:
      type: object
      properties:
        _id:
          type: string
          format: string
          readOnly: true
          example: '5c1956e925b6b30001103eb6'
        updated:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        created:
          type: string
          format: date-time
          readOnly: true
          example: '2019-01-17T11:25:04Z'
        etag:
          type: string
          format: string
          example: 'f7d6f2133d892ca3be7ee54d77c14bb15f75f72e'
        links:
          $ref: '#/components/schemas/linksSelf'
        status:
          type: string
          format: string
          readOnly: true
          example: 'OK'
          
    engineTasksResponse:
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/engineTask'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    enginesResponse:
       properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/engine'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    subSystemsResponse:
       properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/subSystem'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    eventSnapsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/snap'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    capabilitiesResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/capabilityType'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    snapsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/snap'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    clipsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/clip'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    faceSnapsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/faceSnap'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    centralFaceDatabaseResponse:
       properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/centralFaceDatabase'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    registeredFacesResponse:
       properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/registeredFace'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    faceEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/faceEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    peopleDetailEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/peopleDetailEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    anprEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/anprEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    noSeatBeltEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/noSeatBeltEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    driverOnCallEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/driverOnCallEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    peopleCollapsingEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/peopleCollapsingEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    crowdFormationEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/crowdFormationEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    crowdDispersionEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/crowdDispersionEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'
          
    crowdAbnormalityEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/crowdAbnormalityEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    atcsEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/atcsEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    noLPEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/noLPEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    fancyLPEventsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/fancyLPEvent'
        links:
          $ref: '#/components/schemas/links'
        meta:
          $ref: '#/components/schemas/meta'

    #==================== API responses end =======================
    
    faceEvent:
      allOf:
        - $ref: '#/components/schemas/event'
        - properties:
            metaFaceEvent:
              $ref: '#/components/schemas/metaFaceEvent'
    
    peopleDetailEvent:
      allOf:
        - $ref: '#/components/schemas/event'
        - properties:
            metaPeopleDetailEvent:
              $ref: '#/components/schemas/metaPeopleDetailEvent'
    
    anprEvent:
      allOf:
        - $ref: '#/components/schemas/event'
        - properties:
           metaAnprEvent:
              $ref: '#/components/schemas/metaAnprEvent'
    
    noSeatBeltEvent:
      allOf:
        - $ref: '#/components/schemas/event'
        - properties:
            metaNoSeatBeltEvent:
              $ref: '#/components/schemas/metaNoSeatBeltEvent'

    driverOnCallEvent:
      allOf:
        - $ref: '#/components/schemas/event'
        - properties:
            metaDriverOnCallEvent:
              $ref: '#/components/schemas/metaDriverOnCallEvent'

    peopleCollapsingEvent:
      allOf:
        - $ref: '#/components/schemas/event'

    crowdFormationEvent:
      allOf:
        - $ref: '#/components/schemas/event'
        - properties:
            metaCrowdFormationEvent:
              $ref: '#/components/schemas/metaCrowdFormationEvent'

    crowdDispersionEvent:
      allOf:
        - $ref: '#/components/schemas/event'

    crowdAbnormalityEvent:
      allOf:
        - $ref: '#/components/schemas/event'

    atcsEvent:
      allOf:
        - $ref: '#/components/schemas/event'
        - properties:
            metaAtcsEvent:
              $ref: '#/components/schemas/metaAtcsEvent'

    noLPEvent:
      allOf:
        - $ref: '#/components/schemas/event'
        - properties:
            metaNoLPEvent:
              $ref: '#/components/schemas/metaNoLPEvent'

    fancyLPEvent:
      allOf:
        - $ref: '#/components/schemas/event'
        - properties:
            metaFancyLPEvent:
              $ref: '#/components/schemas/metaFancyLPEvent'

    eventType:
      type: string
      format: string
      enum: ['faceEvent', 'peopleDetailEvent', 'anprEvent', 'noSeatBeltEvent', 'driverOnCallEvent', 'peopleCollapsingEvent', 'crowdFormationEvent', 'crowdDispersionEvent', 'crowdAbnormalityEvent']
      example: 'eventType'
      description: >-
        Event types can be following:
         * `'faceEvent'` - Events triggered from VISAGE
         * `'peopleDetailEvent'` - Events triggered from Taalash Engine
         * `'anprEvent'` - anprEvent
         * `'noSeatBeltEvent'` - No SeatBelt Event
         * `'driverOnCallEvent'` - driver On Call Event
         * `'peopleCollapsingEvent'` - peopleCollapsingEvent
         * `'crowdFormationEvent'` - crowdFormationEvent
         * `'crowdDispersionEvent'` - crowdDispersionEvent
         * `'crowdAbnormalityEvent'` - crowdAbnormalityEvent
    
    investigationRequestCommand:
      type: object
      properties:
        command:
          $ref: '#/components/schemas/commands'
        capability:
          $ref: '#/components/schemas/capability'
        destination:
          $ref: '#/components/schemas/destinationEndPoint'
        matchWith:
          type: array
          items:
            type: string
            format: url
            example: ["https://s3.amazonaws.com/monotosh/snaps/b1128d12-2e1e-11ea-a63d-4cedfb60e889.jpg", "https://s3.amazonaws.com/monotosh/snaps/b1128d12-2e1e-11ea-a63d-4cedfb60e880.jpg", "http://distribution.bbb3d.renderfarming.net/video/mp4/bbb_sunflower_1080p_60fps_stereo_abl.mp4"]
            description: "List of snap and/or video url to match with"
        query:
          type: object
          properties:
            type:
              type: string
              format: string
              example: 'http'
            source:
              type: string
              format: url
              example: 'https://s3.amazonaws.com/monotosh/snaps/fe6d3dd9-2820-4512-81c2-2e871db3cdaf.jpg'
            confidence:
              type: number
              format: float
              example: 90
              default: 0.0
              description: 'match confidence predicted by engine during investigation'
            matchCount:
              type: integer
              format: int32
              example: 10
              
    investigationResponseCommand:
      type: object
      properties:
        capability:
          $ref: '#/components/schemas/capability'
        command:
          $ref: '#/components/schemas/commands'
        matchCount:
          type: integer
          format: int32
          example: 3
          description: 'incremental count of processed query input images'
        confidence:
          type: number
          format: float
          example: 0.9
          default: 0.0
          description: 'match confidence predicted by engine during event detection'
        registeredFaceId:
          type: string
          format: string
          example: 'kaustubh_bhattacharyya_1'
          description: 'registered face id from face gallery if matched with else blank string'
        faceSnap:
          type: string
          format: url
          example: "https://s3.amazonaws.com/monotosh/snaps/b1128d12-2e1e-11ea-a63d-4cedfb60e889.jpg"
          description: "Matched image url"
          
    user:
      type: object
      properties:
        id:
          type: string
          format: email
          nullable: false
          example: 'kaustubh.bhattacharyya@videonetics.com'
        fullname:
          type: string
          format: string
          nullable: false
          example: 'Kaustubh Bhattacharyya'
          description: 'full name of the user'
        password:
          type: string
          format: string
          nullable: false
          example: 'kaustubh@123'
          description: "password of the user"
          
    exportRequestCommand:
      type: object
      properties:
        command:
          example: 18
          $ref: '#/components/schemas/commands'
        capability:
          $ref: '#/components/schemas/capability'
        registeredFaceId:
          type: string
          format: string
          example: 'barak_obama_1'
        
    exportResponseCommand:
      type: object
      properties:
        items:
          type: string
          format: url
          example: "https://s3.amazonaws.com/monotosh/snaps/b1128d12-2e1e-11ea-a63d-4cedfb60e889"
        command:
          example: 7
          $ref: '#/components/schemas/commands'

servers:
  - description: Production API
    url: http://v2.videonetics.com:5000
  - description: Development API
    url: http://192.168.1.210:5000