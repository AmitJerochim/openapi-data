openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin

# Added by API Auto Mocking Plugin
  - description: API Auto Mocking Server
    url: https://virtserver.swaggerhub.com/zCode-Solutions/meetMyTypes-mobile-api-doc/1.0.0
  - url: https://localhost:3000/ - Development Server
  - url: https://qj87hoxzmk.execute-api.us-east-1.amazonaws.com/Dev - Production Server
info:
  description: This is the API for the mobile app for the meetMyTypes business
  version: "1.0.0"
  title: meetMyTypes API
  contact:
    email: zach@zcodesolutions.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Users
    description: API's called by users to interact with app
  - name: Admins
    description: api called by admin dashboard (still under works)
paths:
  /user/login:
    post:
      tags:
        - Users
      summary:  login with email and password
      operationId: userLogin
      description: |
        by passing a username and password you can login and access the content
      requestBody:
        content:
          'application/json':
            schema:
              properties:
                email:
                  description: 'email address'
                  type: string
                password:
                  description: 'user password'
                  type: string
              required:
                - email
                - password
        description: user login information
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  message:
                    type: string
                
  /user/register:
    post:
      tags:
        - Users
      summary: allow user to signup
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              properties:
                fullName:
                  type: string
                nickName:
                  type: string
                dateTimeOfBirth:
                  type: string
                  format: date-time
                gender:
                  type: string
                age:
                  type: string
                stateOfBirth:
                  type: string
                occupation:
                  type: string
                specialGift:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required: 
                - fullName
                - nickName
                - dateOfBirth
                - gender
                - age
                - stateOfBirth
                - occupation
                - specialGift
                - email
                - password
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'  
        '400':
          description: incomplete fields please fill out all fields
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  message:
                    type: string
  /user/profile/all:
    get:
      tags:
        - Users
      summary: pull all users profiles
      operationId: getAllUserProfiles
      parameters:
      - name: gender
        in: path
        required: true
        example: 'male'
        schema:
          type: string
      - name: lovetype1
        in: path
        required: true
        example: 'The Chameleon'
        schema:
          type: string
      - name: lovetype2
        in: path
        example: 'The Seducer'
        required: true
        schema:
          type: string
      
      - name: lovetype3
        in: path
        example: 'The confidant'
        required: true
        schema:
          type: string
      - name: lovetype4
        in: path
        example: 'The Negotiator'
        required: true
        schema:
          type: string
      responses:
        '200':
          description: return profile with matching gender and matching loveType
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '400':
          description: error pulling records please try again
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  message:
                    type: string
  /user/profile/{id}:        
    get:
      tags:
        - Users
      summary: get user profile
      operationId: getUserProfile
      description: Adds an item to the system
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      
        '400':
          description: 'Profile not available please try again at a later time'
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  message:
                    type: string

  /admin/currentUsers:        
    get:
      tags:
        - Admins
      summary: pull all current users
      operationId: getUsers
      description: Adds an item to the system
      responses:
        '200':
          description: item created
        '400':
          description: 'invalid input, object invalid'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: number
          example: 1
        email:
          type: string
          example: 'user@gmail.com'
        token:
          type: string
          example: 'aaabbbccc222333344'
        
    Profile:
      type: object
      required:
        - uid
        - nickname
        - gender
        - age
        - loveType
        - Top4LoveTypes
        - description
        - email
      properties:
        uid:
          type: number
          format: uuid
          example: 132423
        nickname:
          type: string
          example: Zeke
        gender:
          type: string
          example: 'female, male'
          enum:
            - male
            - female
            - other
        loveType:
          $ref: '#/components/schemas/LoveType'
        top4LoveType:
          type: array
          xml:
            name: luvType1, luvType2, luvType3, luvType4
          items:
            type: string
        description:
          type: string
          example: 'this description is for the user'
        email:
          type: string
          format: email
          example: 'example@yahoo.com'
              
    LoveType:
      required:
        - typeID
        - typeName
      properties:
        typeID:
          type: number
          example: 123
        typeName:
          type: string
          example: 'The contributor'
          
    Matches:
      required:
        - matchID
        - userID
      properties:
        matchID:
          type: number
          example: 123
        userID:
          type: number
          example: 5435435
        acceptedRequests:
          type: array
          xml:
            name: email, email2, email3
        recievedRequest:
          type: array
          xml:
            name: email, email2, email3
        sentRequest:
          type: array
          xml:
            name: email, email2, email3
