openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/chaloupka.cross.cz/MISAPI/1.0.1
  - description: Development server
    url: https://mis-api-dev.rsd.cz
  - description: Testing server
    url: https://mis-api-test.rsd.cz
  - description: Production server
    url: https://mis-api.rsd.cz
info:
  description: MIS API
  version: "1.0.5"
  title: Universal API of MIS
  contact:
    email: chaloupka@cross.cz
  license:
    name: MIS
    url: 'http://mis-api.rsd.cz'
tags:
  - name: meteo
    description: Meteo Data (Measured, Forecast, Vms data)
  - name: device
    description: Device information (Station, Camera, Vms, Sim)
  - name: user
    description: Information about users and companies
  - name: logbook
    description: Logger interface
paths:
  /last-measured-data:
    get:
      tags:
        - meteo
      summary: Last measured data of all available stations or station(s) defined by parameters
      operationId: lastMeasuredData
      parameters:
        - in: query
          name: stationId
          description: Take only defined station
          required: false
          schema:
            type: integer
        - in: query
          name: userId
          description: Identificator of user to filter stations
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Last measured data list
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeteoData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /measured-data/{stationId}:
    get:
      tags:
        - meteo
      summary: Measured data of given station
      operationId: measuredData
      parameters:
        - in: path
          name: stationId
          description: Identificator of station to filter
          required: true
          schema:
            type: integer
        - in: query
          name: from
          description: Datetime of interval start (default DateTime.Now)
          required: false
          schema:
            type: string
            format: date-time
            example: '2020-08-29T09:12:33.001Z'
        - in: query
          name: limit
          description: Limit of returned records (default 500, max 2000)
          required: false
          schema:
            type: integer
        - in: query
          name: order
          description: Chronologic order of returned records (default DESC)
          required: false
          schema:
            type: string
            enum:
              - Asc
              - Desc
      responses:
        '200':
          description: Measured data list
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeteoData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - meteo
      summary: adds a new meteo data record of the station
      operationId: postMeasuredData
      parameters:
        - in: path
          name: stationId
          description: Identificator of station to insert
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: data inserted
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeteoData'
        description: Meteo data to insert
  /measured-data:
    post:
      tags:
        - meteo
      summary: adds list of meteo data records
      operationId: postMeasuredDataList
      responses:
        '201':
          description: data inserted
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataAcceptationResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MeteoData'
        description: Meteo data to insert
  /last-vms-data:
    get:
      tags:
        - meteo
      summary: Last vms data of all available vms or vms defined by parameters
      operationId: lastVmsData
      parameters:
        - in: query
          name: vmsId
          description: Take only defined vms
          required: false
          schema:
            type: integer
        - in: query
          name: userId
          description: Identificator of user to filter stations
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Last vms data list
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VmsData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /vms-data/{vmsId}:
    get:
      tags:
        - meteo
      summary: Vms data of given vms
      operationId: vmsdData
      parameters:
        - in: path
          name: vmsId
          description: Identificator of vms to filter
          required: true
          schema:
            type: integer
        - in: query
          name: from
          description: Datetime of interval start (default DateTime.Now)
          required: false
          schema:
            type: string
            format: date-time
            example: '2020-08-29T09:12:33.001Z'
        - in: query
          name: limit
          description: Limit of returned records (default 500)
          required: false
          schema:
            type: integer
        - in: query
          name: order
          description: Chronologic order of returned records (default DESC)
          required: false
          schema:
            type: string
            enum:
              - Asc
              - Desc
      responses:
        '200':
          description: Vms data list
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VmsData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - meteo
      summary: adds a new vms data record of the station
      operationId: putVmsData
      parameters:
        - in: path
          name: vmsId
          description: Identificator of vms to insert data
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: data inserted
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmsData'
        description: Vms data to insert
  /vms-data:
    post:
      tags:
        - meteo
      summary: adds list of vms data records
      operationId: postVmsDataList
      responses:
        '201':
          description: data inserted
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataAcceptationResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VmsData'
        description: Vms data to insert
  /station:
    post:
      tags:
        - device
      summary: Insert meta data of station
      operationId: postStationData
      responses:
        '201':
          description: data inserted
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StationObject'
        description: Station data to insert
  /station/list:
    get:
      tags:
        - device
      summary: Metadata of all stations
      operationId: stationList
      parameters:
        - in: query
          name: userId
          description: Identificator of user to filter stations
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Station data list
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /station/{stationId}:
    get:
      tags:
        - device
      summary: Meta data of given station
      operationId: stationData
      parameters:
        - in: path
          name: stationId
          description: Identificator of station to filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Station data information
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - device
      summary: Update meta data of given station
      operationId: putStationObject
      parameters:
        - in: path
          name: stationId
          description: Identificator of station to update
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: data updated
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StationObject'
        description: Station data to update
    delete:
      tags:
        - device
      summary: Delete meta data of given station
      operationId: deleteStationData
      parameters:
        - in: path
          name: stationId
          description: Identificator of station to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: data deleted
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /station-type/list:
    get:
      tags:
        - device
      summary: List of available station types
      operationId: stationTypeList
      responses:
        '200':
          description: Station type list
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationTypeObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /camera:
    post:
      tags:
        - device
      summary: Insert meta data of camera
      operationId: postCameraData
      responses:
        '201':
          description: data inserted
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraObject'
        description: Camera data to insert
  /camera/list:
    get:
      tags:
        - device
      summary: Metadata of all cameras
      operationId: cameraList
      responses:
        '200':
          description: Camera data list
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CameraObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /camera/{cameraId}:
    get:
      tags:
        - device
      summary: Meta data of given camera
      operationId: cameraData
      parameters:
        - in: path
          name: cameraId
          description: Identificator of camera to filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Camera data information
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - device
      summary: Update meta data of given camera
      operationId: putCameraObject
      parameters:
        - in: path
          name: cameraId
          description: Identificator of camera to update
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: data updated
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraObject'
        description: Camera data to update
    delete:
      tags:
        - device
      summary: Delete meta data of given camera
      operationId: deleteCameraData
      parameters:
        - in: path
          name: cameraId
          description: Identificator of camera to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: data deleted
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /vms:
    post:
      tags:
        - device
      summary: Insert meta data of vms
      operationId: postVmsData
      responses:
        '201':
          description: data inserted
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmsObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmsObject'
        description: Vms data to insert
  /vms/list:
    get:
      tags:
        - device
      summary: Metadata of all vms
      operationId: vmsList
      responses:
        '200':
          description: Vms data list
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VmsObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /vms/{vmsId}:
    get:
      tags:
        - device
      summary: Meta data of given vms
      operationId: vmsData
      parameters:
        - in: path
          name: vmsId
          description: Identificator of vms to filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Vms data information
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmsObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - device
      summary: Update meta data of given vms
      operationId: putVmsObject
      parameters:
        - in: path
          name: vmsId
          description: Identificator of vms to update
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: data updated
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmsObject'
        description: Vms data to update
    delete:
      tags:
        - device
      summary: Delete meta data of given vms
      operationId: deleteVmsData
      parameters:
        - in: path
          name: vmsId
          description: Identificator of vms to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: data deleted
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /sim:
    post:
      tags:
        - device
      summary: Insert meta data of sim
      operationId: postSimData
      responses:
        '201':
          description: data inserted
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimObject'
        description: Sim data to insert
  /sim/list:
    get:
      tags:
        - device
      summary: Metadata of all sim
      operationId: simList
      responses:
        '200':
          description: Sim data list
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /sim/{simId}:
    get:
      tags:
        - device
      summary: Meta data of given sim
      operationId: simData
      parameters:
        - in: path
          name: simId
          description: Identificator of sim to filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sim data information
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - device
      summary: Update meta data of given sim
      operationId: putSimData
      parameters:
        - in: path
          name: simId
          description: Identificator of sim to update
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: data updated
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimObject'
        description: Sim data to update
    delete:
      tags:
        - device
      summary: Delete meta data of given sim
      operationId: deleteSimData
      parameters:
        - in: path
          name: simId
          description: Identificator of sim to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: data deleted
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /forecast-graph:
    post:
      tags:
        - meteo
      summary: Insert new forecast graph(s)
      operationId: putForecastGraph
      responses:
        '201':
          description: data inserted
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/xml: 
            schema:
              type: object
        description: Forecast graph(s) to insert
  /weather-data/trigger:
    put:
      tags:
        - meteo
      summary: Trigger of new weather data object
      operationId: fireWeatherDataTrigger
      responses:
        '201':
          description: triggered
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInfo'
        description: Trigger object
  /logbook:
    post:
      tags:
        - logbook
      summary: Append new log
      operationId: postLogbookData
      responses:
        '201':
          description: data inserted
          headers:
            MIS-API-Version:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogbookRecord'
        description: Log data to append
  /logbook/modules:
    get:
      tags:
        - logbook
      summary: List of logbook modules
      operationId: logbookModules
      responses:
        '200':
          description: Logbook modules
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/LogbookModule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /company/list:
    get:
      tags:
        - user
      summary: Meta data of all companies
      operationId: companyData
      responses:
        '200':
          description: Companies meta data
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/CompanyObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /user/{token}:
    get:
      tags:
        - user
      summary: Meta data of given user for custom authentication purposes
      operationId: userData
      parameters:
        - in: path
          name: token
          description: Temporary identificator of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User meta data
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/list:
    get:
      tags:
        - user
      summary: Meta data of all available users
      operationId: userList
      responses:
        '200':
          description: Users meta data
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/UserObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /user/auth:
    post:
      security: []
      tags:
        - user
      summary: Global authentication endpoint
      operationId: userAuth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAuthObject'
        description: User credentials
      responses:
        '200':
          description: JWT token
          headers:
            MIS-API-Version:
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    MeteoData:
      type: object
      required:
        - stamp
        - stationId
      properties:
        stamp:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        stationId:
          type: integer
          example: 720
        airTemperature:
          type: number
          description: Air temperature [°C]
          example: 17.3
        dewPoint:
          type: number
          description: Dew point [°C]
          example: 13.6
        relativeHumidity:
          type: integer
          description: Relative humidity [%]
          example: 82
        precipationType:
          type: string
          description: Precipation Type
          example: NoPrecipation
          enum:
            - NoPrecipation
            - Precipation
            - Rain
            - RainWithSnow
            - Snow
            - FreezingRain
            - Drizzle
            - Hail
        precipationIntensity:
          type: number
          description: Precipation intensity [mm/h]
          example: 2.1
        precipationSum:
          type: number
          description: Precipation sum [mm]
          example: 3.9
        visibility:
          type: integer
          description: Visibility [m]
          example: 2000
        windSpeed:
          type: number
          description: Wind speed [m/s]
          example: 12.3
        windDirection:
          type: number
          description: Wind direction [°]
          example: 90.0
        surfaceSensors:
          type: array
          items:
            $ref: '#/components/schemas/RoadSensorData'
          description: Meteo data from surface sensors
        radiation:
          type: number
          description: Radiation [W/m2]
          example: 25.15
        signWarning:
          type: string
          description: Warning for Vms
          example: NoWarning
          enum:
            - NoWarning
            - SkiddingDanger
            - SlipperyIce
            - SideWind
            - Fog
            - Roadworks
            - Accident
            - MaxSpeed30
            - MaxSpeed50
            - MaxSpeed60
            - MaxSpeed70
            - MaxSpeed80
            - MaxSpeed90
            - MaxSpeed100
            - MaxSpeed110
        signWarningAlarm:
          type: boolean
          description: Indicates whether Vms alarm is active
          example: false
        airPressure:
          type: number
          description: Air pressure [hPa]
          example: 989.3
        sprayProgram:
          type: integer
          description: Spray program (0 - no spray, 1..n - spray active)
          example: 0
        amountBrine:
          type: integer
          description: Amount of Brine [%]
          example: 0
        snowDepth:
          type: number
          description: Snow depth outside road [cm]
          example: 0.0
        windSpeedMax:
          type: number
          description: Maximal wind speed [m/s]
          example: 23.6
        windDirectionMax:
          type: number
          description: Direction of maximal wind [°]
          example: 90.0
    RoadSensorData:
      type: object
      required:
        - sensorIndex
      properties:
        sensorIndex:
          type: integer
          description: Zero based index of sensor within station
          example: 0
        surfaceTemperature:
          type: number
          description: Surface temperature [°C]
          example: 23.6
        freezePoint:
          type: number
          description: Freezing point [°C]
          example: -0.6
        status:
          type: string
          description: Status of road condition
          example: Dry
          enum:
            - Dry
            - Moist
            - Wet
            - Frost
            - Snow
            - Ice
            - ResidualChemicals
            - FreezingWetness
            - WetAndTreated
            - SnowIce
            - Critical
            - Slush
        warning:
          type: string
          description: Warning (ignored on post)
          example: NoWarning
          enum:
            - NoWarning
            - IceWarning
            - IceAlarm
            - FrostWarning
            - RainWarning
            - SnowWarning
        waterThickness:
          type: integer
          description: Amount of water [µm]
          example: 0.0
        snowThickness:
          type: number
          description: Amount of snow [mm]
          example: 0.0
        iceThickness:
          type: number
          description: Amount of ice [mm]
          example: 0.0
        subsurfaceTemperature5:
          type: number
          description: Temperature 5 centimeters below surface [°C]
          example: 15.3
        subsurfaceTemperature30:
          type: number
          description: Temperature 30 centimeters below surface [°C]
          example: 12.7
        subSurfaceTemperatureX:
          type: number
          description: Temperature below surface in non-standard depth [°C]
          example: 10.4
        friction:
          type: number
          description: Friction of the road [-]
          minimum: 0.0
          maximum: 1.0
          example: 0.76
    VmsData:
      type: object
      required:
        - vmsId
      properties:
        id:
          type: integer
          example: 720
        vmsId:
          type: integer
          example: 335
        stamp:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        warning:
          type: string
          example: NoWarning
          enum:
            - NoWarning
            - SkiddingDanger
            - SlipperyIce
            - SideWind
            - Fog
            - Roadworks
            - Accident
            - MaxSpeed30
            - MaxSpeed50
            - MaxSpeed60
            - MaxSpeed70
            - MaxSpeed80
            - MaxSpeed90
            - MaxSpeed100
            - MaxSpeed110
        alarm:
          type: boolean
          example: false
        distance:
          type: string
          example: '2000 m'
        airTemperature:
          type: number
          example: 22.6
        surfaceTemperature:
          type: number
          example: 47.3
    DataAcceptationResult:
      type: object
      required:
        - deviceId
        - stamp
        - result
      properties:
        deviceId:
          type: integer
          example: 720
        stamp:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        result:
          type: string
          enum:
            - ok
            - skipped
            - error
        message:
          type: string
          example: 'Invalide date/time format'
    StationObject:
      type: object
      required:
        - idMis
        - name
        - type
        - updated
      properties:
        id:
          type: integer
          description: Internal identificator
          example: 720
        idMis:
          type: string
          example: 'Z012'
        idNoris:
          type: string
          example: 'no5023'
        name:
          type: string
          example: 'I/49 Malenovice'
        type:
          $ref: '#/components/schemas/StationTypeObject'
        equipment:
          $ref: '#/components/schemas/StationEquipment'
        sensors:
          type: array
          items:
            $ref: '#/components/schemas/SensorObject'
        sensorsRoad:
          type: array
          items:
            $ref: '#/components/schemas/SensorRoadObject'
        masterId:
          type: integer
          description: Id of master station if is station set as slave station
          example: 721
        active:
          type: boolean
          example: true
        public:
          type: boolean
          example: true
        site:
          $ref: '#/components/schemas/SiteObject'
        ownerCompanyId:
          type: integer
          example: 33
        supplierCompanyId:
          type: integer
          example: 34
        mastFromRoad:
          type: number
          example: 3.4
        mastHeight:
          type: number
          example: 3.0
        distanceFromRoad:
          type: number
          example: 1.4
        centralUnitType:
          type: string
          example: 'ARM'
        hasForecastGraph:
          type: boolean
          example: true
        softwareVersion:
          type: string
          example: '3.2.9'
        power230:
          type: boolean
          description: Device uses 230 V voltage.
          example: false
        powerOther:
          type: string
          description: Definition of voltage.
          example: '12 V'
        cvalisChecking:
          type: boolean
          example: false
        launch:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        note:
          type: string
        updated:
          $ref: '#/components/schemas/UserActionObject'
        related:
          $ref: '#/components/schemas/RelatedObjects' 
    CameraObject:
      type: object
      required:
        - externalId
        - name
        - updated
      properties:
        id:
          type: integer
          description: Internal identificator
          example: 720
        externalId:
          type: string
          description: External identificator (PPK for Videobrána V2)
          example: 'D01-K-KP91888-001'
        name:
          type: string
          example: 'D1 Chrlice 188,8 směr Brno'
        type:
          type: string
          description: Construction type
          enum:
            - Fixed
            - Revolving
          example: Fixed
        active:
          type: boolean
          example: true
        public:
          type: boolean
          example: true
        site:
          $ref: '#/components/schemas/SiteObject'
        ownerCompanyId:
          type: integer
          example: 33
        supplierCompanyId:
          type: integer
          example: 34
        mobile:
          type: boolean
          description: Camera is moveable.
          example: false
        hasIr:
          type: boolean
          description: Camera has infrared lighting.
          example: false
        resolution:
          type: string
          example: '800x600'
        mountHeight:
          type: number
          example: 3.0
        launch:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        note:
          type: string
        updated:
          $ref: '#/components/schemas/UserActionObject'
        related:
          $ref: '#/components/schemas/RelatedObjects' 
    VmsObject:
      type: object
      required:
        - id
        - name
        - updated
      properties:
        id:
          type: integer
          description: Internal identificator.
          example: 720
        name:
          type: string
        active:
          type: boolean
          example: true
        public:
          type: boolean
          example: true
        equipment:
          type: array
          description: Available equipment
          example: [Sign, Alarm, Distance]
          items:
            type: string
            enum:
              - Sign
              - Alarm
              - Distance
              - AirTemp
              - SurfTemp
        controlType:
          type: string
          description: Type of controlling
          example: 'Dispečink'
        brand:
          type: string
          description: Brand name of device
          example: 'LED plná matice'
        site:
          $ref: '#/components/schemas/SiteObject'
        ownerCompanyId:
          type: integer
          example: 33
        supplierCompanyId:
          type: integer
          example: 34
        power230:
          type: boolean
          description: Device uses 230 V voltage.
        powerOther:
          type: string
          description: Definition of voltage.
        launch:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        note:
          type: string
        updated:
          $ref: '#/components/schemas/UserActionObject'
        related:
          $ref: '#/components/schemas/RelatedObjects' 
    SimObject:
      type: object
      required:
        - serialNumber
        - updated
      properties:
        id:
          type: integer
          description: Internal identificator.
          example: 720
        serialNumber:
          type: integer
          format: int64
          example: 12345678910
        number:
          type: integer
          example: 123456789
        pin:
          type: integer
          example: 1234
        puk:
          type: integer
          example: 561513845
        apn:
          type: string
          example: 'internet.mnc012.mcc345.gprs'
        active:
          type: boolean
          example: true
        region:
          $ref: '#/components/schemas/RegionObject'
        ownerCompanyId:
          type: integer
          example: 33
        supplierCompanyId:
          type: integer
          example: 34
        launch:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        note:
          type: string
        updated:
          $ref: '#/components/schemas/UserActionObject'
        related:
          $ref: '#/components/schemas/RelatedObjects' 
    RelatedObjects:
      type: object
      properties:
        station:
          type: array
          example: [720, 721]
          items:
            type: integer
        camera:
          type: array
          example: [620, 621]
          items:
            type: integer
        vms:
          type: array
          example: [520, 521]
          items:
            type: integer
        sim:
          type: array
          example: [820, 821]
          items:
            type: integer
    ProductInfo:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          example: WeatherAlert
          enum:
            - WeatherAlert
        stamp:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
    LogbookRecord:
      type: object
      required:
        - module
        - importance
      properties:
        module:
          $ref: '#/components/schemas/LogbookModule'
        stampStart:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        stampEnd:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        serviceId:
          type: string
          description: Service identificator.
          example: 'MIS-01'
        importance:
          type: integer
          example: 2
          minimum: 0
          maximum: 10
        note:
          type: string
        notify:
          type: boolean
          example: false
    LogbookModule:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: 'MIS API'
    RegionObject:
      type: object
      required:
        - shortName
      properties:
        id:
          type: integer
          example: 14
        shortName:
          type: string
          description: One letter abbreviation of region name
          example: 'Z'
        name:
          type: string
          example: 'Zlínský kraj'
    SiteObject:
      type: object
      required:
        - region
      properties:
        region:
          $ref: '#/components/schemas/RegionObject'
        latitude:
          type: number
          example: 49.2179739
        longitude:
          type: number
          example: 17.6197731
        elevation:
          type: integer
          example: 212
        road:
          type: string
          example: 'I/49'
        stationing:
          type: number
          example: 25.3
        direction:
          type: string
          example: 'směr Praha'
    StationTypeObject:
      type: object
      required:
        - id
        - name
        - companyId
      properties:
        id:
          type: integer
          description: Internal id of station type
          example: 5
        name:
          type: string
          example: 'CrossMet'
        companyId:
          type: integer
          description: Company id of station owner (maintainer)
          example: 34
    StationEquipment:
      type: object
      properties:
        airTemperature:
          type: boolean
          example: true
        dewPoint:
          type: boolean
          example: true
        relativeHumidity:
          type: boolean
          example: true
        precipationType:
          type: boolean
          example: false
        precipationIntensity:
          type: boolean
          example: true
        precipationSum:
          type: boolean
          example: false
        visibility:
          type: boolean
          example: false
        windSpeed:
          type: boolean
          example: true
        windDirection:
          type: boolean
          example: true
        windSpeedMaximal:
          type: boolean
          example: false
        windDirectionMaximal:
          type: boolean
          example: false
        radiation:
          type: boolean
          example: false
        signWarning:
          type: boolean
          example: false
        signWarningAlarm:
          type: boolean
          example: false
        airPressure:
          type: boolean
          example: true
        sprayProgram:
          type: boolean
          example: false
        amountBrine:
          type: boolean
          example: false
        snowDepth:
          type: boolean
          example: false
        cvalis:
          type: boolean
          example: false
        roadSensorEquipment:
          type: array
          items:
            $ref: '#/components/schemas/RoadSensorEquipment'
    RoadSensorEquipment:
      type: object
      required:
        - sensorIndex
      properties:
        sensorIndex:
          type: integer
          description: Zero based index of sensor within station
          example: 0
        surfaceTemperature:
          type: boolean
          example: true
        freezingPoint:
          type: boolean
          example: true
        status:
          type: boolean
          example: true
        warning:
          type: boolean
          example: true
        waterThickness:
          type: boolean
          example: true
        snowThickness:
          type: boolean
          example: true
        iceThickness:
          type: boolean
          example: true
        subsurfaceTemperature5:
          type: boolean
          example: true
        subsurfaceTemperature30:
          type: boolean
          example: true
        subsurfaceTemperatureX:
          type: boolean
          example: false
        friction:
          type: boolean
          example: false
    SensorObject:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          example: 489
        active:
          type: boolean
          example: true
        type:
          type: integer
          example: 3
        typeDescription:
          type: string
          example: 'Lufft WS600'
        installationDescription:
          type: string
          example: 'common installation'
        mountHeight:
          type: number
          example: 3.0
        direction:
          type: string
          example: 'směr Praha'
        insertReplaceDate:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        note:
          type: string
        updated:
          $ref: '#/components/schemas/UserActionObject'
    SensorRoadObject:
      type: object
      required:
        - index
      properties:
        id:
          type: integer
          example: 490
        index:
          type: integer
          example: 0
        type:
          type: string
          example: 'Lufft IRS31'
        active:
          type: boolean
          example: true
        position:
          type: string
          example: 'levý pruh'
        removable:
          type: boolean
          example: false
        fixType:
          type: string
          example: '4 šrouby M10'
        roadStatus:
          type: boolean
          example: true
        surfaceTemperature:
          type: boolean
          example: true
        surfaceTemperature5:
          type: boolean
          example: true
        surfaceTemperature30:
          type: boolean
          example: false
        surfaceTemperatureX:
          type: boolean
          example: false
        freezingPoint:
          type: boolean
          example: false
        friction:
          type: boolean
          example: false
        waterThickness:
          type: boolean
          example: true
        snowThickness:
          type: boolean
          example: true
        iceThickness:
          type: boolean
          example: true
        insertReplaceDate:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
        note:
          type: string
        updated:
          $ref: '#/components/schemas/UserActionObject'
    CompanyObject:
      type: object
      required:
        - id
        - name
        - region
      properties:
        id:
          type: integer
          example: 34
        name:
          type: string
          example: 'CROSS Zlín'
        region:
          $ref: '#/components/schemas/RegionObject'
        serviceEmail:
          type: string
          example: 'support@cross.cz'
        servicePhone:
          type: string
          example: '+420 123 456 789'
        isSupplier:
          type: boolean
          example: true
    UserObject:
      type: object
      required:
        - id
        - ssoId
      properties:
        id:
          type: integer
          example: 123
        ssoId:
          type: integer
          example: 3331
        ssoMobile:
          type: string
          example: '+420 123 456 789'
        ssoEmail:
          type: string
          example: 'support@cross.cz'
        company:
          $ref: '#/components/schemas/CompanyObject'
        region:
          $ref: '#/components/schemas/RegionObject'
        active:
          type: boolean
          example: true
          description: 'False when user accound license expired'
        rightsMiscom:
          type: boolean
          example: false
        rightsJetSms:
          type: array
          example: [Read, Stations, Cameras, Vms, Sim]
          items:
            type: string
            enum:
              - Admin
              - AdminRead
              - Write
              - Read
              - Stations
              - Cameras
              - Vms
              - Sim
              - NotifySum
              - NotifyStations
              - NotifyOutages
              - NotifyMaintenance
              - NotifyCameras
              - NotifyVms
              - NotifySim
              - NotifyOnlyMyRegion
        rightsELogWare:
          type: array
          example: [AdminRead, Stations, Vms]
          items:
            type: string
            enum:
              - Admin
              - AdminRead
              - Forecasts
              - ForecastWinterMaintenance
              - ForecastGraphs
              - Stations
              - Vms 
              - SendReportStations
              - SendReportStationsRegions
              - SendReportForecasts
        related:
          $ref: '#/components/schemas/RelatedObjects' 
    UserActionObject:
      type: object
      description: Wraps user interaction (last time and origin of the change)
      required:
        - userId
        - stamp
      properties:
        userId:
          type: integer
          example: 720
        stamp:
          type: string
          format: date-time
          example: '2020-08-29T09:12:33.001Z'
    UserAuthObject:
      type: object
      description: User credentials for global authentication purposes
      required:
        - userName
        - password
      properties:
        userName:
          type: string
          example: bfu
        password:
          type: string
          example: '$uper$ecretPa$$w0rd'
    ErrorObject:
      type: object
      description: Error result wrapper
      properties:
        internalCode:
          type: integer
          example: 72
        message:
          type: string
          example: 'Invalid parameters'
  responses:
    BadRequest:
      description: Bad request or syntax error
      headers:
        MIS-API-Version:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
    NotFound:
      description: The specified resource was not found
      headers:
        MIS-API-Version:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
    Unauthorized:
      description: Unauthorized
      headers:
        MIS-API-Version:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
security:
  - bearerAuth: []