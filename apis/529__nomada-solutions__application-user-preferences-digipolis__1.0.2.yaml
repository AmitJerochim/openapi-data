openapi: 3.0.1
info:
  title: Application User Preferences API
  version: "1.0.2"
  description: >-
    Central service for the storage and retrieval of user, team or global preferences. The preferences are modeled as JSON objects, the form of which has to be described in a JSON schema. A preference can only have one schema.

      Tenants are identified by dgp-tenant-id header, registering your application is done by the administrators of the API team. Users identify themselves using their oauth credentials and preform all their actions in their user context.

      This service is meant as a repository of user preferences - think screen preferences, user stored filters, things a user does or doesn't want to see in his user interface, start in weekview not month, these kind of things, ...
  contact:
    email: info@digipolis.be
    name: Tom Sluyts
    url: 'http://www.digipolis.be'
paths:
  "/preferencetypes":
    post:
      summary: Create a new preference type for preferences together with its schema.
      description: Create a new preference type for preferences. Later, user can fill their 'personal' preference of this type with their preferences, or you can create 'global' preferences that apply to the entire application or tenant scope. Every preference type has an associated JSON schema and you can choose to validate against that schema. You can make your preference cross-tenant readable with the x-tenant flag set to "true", other tenants can never change your preferences.
      parameters:
        - in: header
          name: dgp-tenant-id
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: All these values are optional
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preferenceCreate'
      responses:
        '201':
          description: Created. Return the created preference object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preference'
      tags:
        - Preference types
    get:
      summary: Get a list of all preference types available to you
      parameters:
        - in: header
          name: dgp-tenant-id
          schema:
            type: string
            format: uuid
          required: true
        - in: query
          name: page
          description: Het nummer van de terug te geven pagina.
          required: false
          schema:
            type: integer
        - in: query
          name: pagesize
          description: Het aantal preferences per pagina.
          required: false
          schema:
            type: integer
        - in: query
          name: friendlyName
          description: Filter het resultaat op (gedeeltelijke) overeenkomst op friendlyName.
          required: false
          schema:
            type: string
        - in: query
          name: x-tenant
          description: Set this flag to 'true' to see preferences shared by other tenants, by default you will only see your own tenant preferences.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Get a paged list of preferences.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences'
      tags:
        - Preferences

  "/preferencetypes/{tid}":
    get:
      summary: Get a specific preference and its schema.
      description: Get a preference, it's details and schema if there is one.
      parameters:
        - in: header
          name: dgp-tenant-id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: tid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preference'
      tags:
        - Preferences
    patch:
      summary: Change name,validation, schema or sharing of a preference
      description: Change the schema of the preference. Please note that if you have turned on schema validation for preference content, that a changed schema can have consequences for old content that does not validate against the new schema. Versioning can only be done by creating new preferences for now. You can also change your friendlyName and x-tenant. Please note that changing x-tenant can impact other applications.
      parameters:
        - in: header
          name: dgp-tenant-id
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: tid
          required: true
          schema:
            type: string
      requestBody:
        description: Attach a valid json schema to your preference
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preferencePatch'
      responses:
        '200':
          description: OK
      tags:
        - Preferences

  "/preferencetypes/{tid}/userpreferences":
    get:
      parameters:
        - in: query
          name: userbusinesskey
          schema:
            type: string
          description: Filters the result on the immutable business key identifier of the user in the application
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Get a preference with the preferences of an authenticated user. The JWT UP policy translates the access token to a specific user preference.
      responses:
        '200':
          description: OK
      tags:
        - User preferences

  "/preferencetypes/{tid}/userpreferences/{uid}":
    get:
      parameters:
        - in: query
          name: userbusinesskey
          schema:
            type: string
          description: Filters the result on the immutable business key identifier of the user in the application
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: path
          name: uid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Get a preference with the preferences of an authenticated user. The JWT UP policy translates the access token to a specific user preference.
      responses:
        '200':
          description: OK
      tags:
        - User preferences

  "/preferencetypes/{tid}/userpreferences/me":
    get:
      parameters:
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Get a preference with the preferences of an authenticated user. The JWT UP policy translates the access token to a specific user preference.
      responses:
        '200':
          description: OK
      tags:
        - User preferences me
    post:
      parameters:
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Users can use this endpoint to store their personal preference for a certain type of preference. Either aprofiel Id or mprofiel Id is used as a unique key to store the user preference.
      responses:
        '201':
          description: OK
      tags:
        - User preferences me
    put:
      parameters:
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Users can use this endpoint to update their personal preference for a certain type of preference.
      responses:
        '201':
          description: OK
      tags:
        - User preferences me

  "/preferencetypes/{tid}/teampreferences":
    get:
      parameters:
        - in: query
          name: teambusinesskey
          schema:
            type: string
          description: Filters the result on the immutable business key identifier of the team
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Get a list of team preferences.

      responses:
        '200':
          description: OK
      tags:
        - Team preferences
    post:
      parameters:
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Create a team preference.
      responses:
        '201':
          description: OK
        '403':
          description: A teampreference for a team with this business key already exists, update the existing teampreference
      tags:
        - Team preferences
  "/preferencetypes/{tid}/teampreferences/{tmid}":
    get:
      parameters:
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: path
          name: tmid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Get a team preference by Id.
      responses:
        '201':
          description: OK
      tags:
        - Team preferences
    put:
      parameters:
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: path
          name: tmid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Update a specific team preference.
      responses:
        '201':
          description: OK
      tags:
        - Team preferences
  "/preferencetypes/{tid}/globalpreferences":
    get:
      parameters:
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Get a list of tenant-wide global (environment) preferences.

      responses:
        '200':
          description: OK
      tags:
        - Global preferences
    post:
      parameters:
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Create a tenant-wide global (environment) preference.
      responses:
        '201':
          description: OK
      tags:
        - Global preferences
  "/preferencetypes/{tid}/globalpreferences/{gid}":
    put:
      parameters:
        - in: path
          name: tid
          required: true
          schema:
            type: string
        - in: path
          name: gid
          required: true
          schema:
            type: string
        - in: header
          name: dgp-tenant-id
          required: true
          schema:
            type: string
      summary: Update a specific global (environment) preference.
      responses:
        '201':
          description: OK
      tags:
        - Global preferences

  "/status/health":
    get:
      summary: Returns the health status of this Service
      description: >-
        Returns high level information about the service according to the status
        & [monitoring spec of
        Digipolis](https://github.com/digipolisantwerpdocumentation/status-monitoring)
      tags:
        - Status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultError'
  "/status/health/components":
    get:
      summary: Returns the health status of this Service
      description: >-
        Returns information about the service and its underlying components
        according to the status & [monitoring spec of
        Digipolis](https://github.com/digipolisantwerpdocumentation/status-monitoring)
      tags:
        - Status
      responses:
        '200':
          description: OK
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/healthStatusComponents'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultError'
  "/tenants":
    get:
      summary: Paged list of tenants
      parameters:
        - in: query
          name: page
          description: Het nummer van de terug te geven pagina.
          required: false
          schema:
            type: integer
        - in: query
          name: pagesize
          description: Het aantal preferences per pagina.
          required: false
          schema:
            type: integer
      description: >-
        Returns a paged list of all the tenants on this service. Tenants are logically seperted on one database instance.
      tags:
        - Tenant Catalog
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatusComponents'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/healthStatusComponents'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultError'
    post:
      summary: Create a new tenant
      description: >-
        Create a new tenant, the dgp-tenant-id will be automatically generated by the service. Tenants are logically seperted on one database instance.
      tags:
        - Tenant Catalog
      requestBody:
        description: Only the friendlyName needs to optionally be given, the other values will be generated by the service
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/friendlyName'
      responses:
        '201':
          description: Created. The created tenant object is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenant'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultError'
  "/tenants/{tid}":
    delete:
      summary: Delete a specific tenant.
      parameters:
        - in: path
          name: tid
          required: true
          schema:
            type: string
      description: >-
        Delete a specific tenant, all associated preferences and their schemas will be removed.
      tags:
        - Tenant Catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatusComponents'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/healthStatusComponents'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultError'
tags:
  - name: Preference types
    description: "Repositories for user preference types, with their schema"
  - name: User preferences me
    description: 'Authenticated user can update and retrieve their preferences with these methods'
  - name: User preferences
    description: 'User preferences by userid or (filtered) list'
  - name: Team preferences
    description: 'Preferences that apply to the scope of a team, not specific to a user or global'
  - name: Global preferences
    description: 'Preferences that apply to the entire scope of the tenant, not specific to a user'
  - name: Tenant Catalog
    description: 'Tenant management (administrators only)'
  - name: Status
    description: 'Technical operations for health checks, monitoring & caching'
components:
  parameters:
    noticeIdParam:
      in: path
      name: id
      required: true
      description: The id of the notice in the form of a guid.
      schema:
        type: string
        minimum: 1
        format: uuid
    pageParam:
      in: query
      name: page
      required: true
      description: >-
        Starting offset for the list, this can be either a number or the literal
        'last'
      schema:
        type: string
    pagesizeParam:
      in: query
      name: pagesize
      required: true
      description: Max number of items for each page
      schema:
        type: integer
    pagingStrategyParam:
      in: query
      name: paging-strategy
      required: false
      description: >-
        Specify the paging strategy, i.e. if totalPages and totalElements should
        be included in the response output
      schema:
        type: string
        default: noCount
        enum:
          - noCount
          - withCount
  responses:
    400BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    404NotFound:
      description: Not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    500InternalServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    defaultError:
      description: Unexpected Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
  schemas:
    preferenceCreate:
      type: object
      description: >
        A friendlyName object.
      properties:
        friendlyName:
          type: string
          description: easy to understand business name for the object
        x-tenant:
          type: boolean
          description: stored preferences and preference schemas can be read by other tenants
        scope:
          type: string
          example: personal
          description: enum can be 'personal' or 'global', personal preferences can be filled and retrieved with the preferences/me methods, global preferences apply to tenant wide settings
        preferenceschema:
          $ref: '#/components/schemas/preferenceschema'
        validateSchema:
          type: boolean
          example: false
          description: data imput into the preference will be validated against the schema if set to 'true'
    preferenceschema:
      type: object
      description: >
        A valid json schema for a given preference.
    preferencePatch:
      type: object
      description: >
        Attach a valid json schema to a preference, turn schema validation on or off.
      properties:
        preferenceschema:
          $ref: '#/components/schemas/preferenceschema'
        validateSchema:
          type: boolean
          example: false
          description: data imput into the preference will be validated against the schema if set to 'true'
        friendlyName:
          type: string
          description: easy to understand business name for the object
        x-tenant:
          type: boolean
          description: stored user preferences and preference schemas can be used by other services
    preference:
      type: object
      description: >
        A preference object.
      properties:
        tid:
          type: string
          description: unique identifier of the preference
        friendlyName:
          type: string
          description: easy to understand business name for the preference
        x-tenant:
          type: boolean
          description: stored user preferences and preference schemas can be used by other
        meCount:
          type: integer
          description: number of users that have filled preferences
        preferenceschema:
          $ref: '#/components/schemas/preferenceschema'
    preferences:
      type: array
      items:
        $ref: '#/components/schemas/preferenceschema'
    tenant:
      type: object
      description: >
        A tenant object.
      properties:
        tid:
          type: string
          description: unique identifier of the tenant
        friendlyName:
          type: string
          description: easy to understand business name for the tenant
        dgp-tenant-id:
          type: string
          description: >
            Identifier used in the header of client requests towards the tenant. UUID met 36 tekens,  waarvan
            32 hexadecimale karakters en vier streepjes: 8-4-4-4-12 (cfr. https://tools.ietf.org/html/rfc4122)
          example: 198b64a5-9a48-4887-9b18-78344946dcc2
        preferences:
          type: integer
          description: number of preferences created inside this tenant
    error:
      type: object
      description: >-
        a generic model used to describe errors as a result of incorrect or
        failed HTTP requests .
      properties:
        type:
          type: string
          description: >-
            A URI identifying this error. The URI can lead to humane readable
            information about this error
        title:
          type: string
          description: a short description about the error occurred
        status:
          type: string
          description: the corresponding HTTP result code
        identifier:
          type: string
          description: a unique identifier of the given error
        code:
          type: string
          description: the code of the given error
    healthStatus:
      type: object
      description: A high level health status result
      properties:
        status:
          description: Contains a high level status of the health for this service
          type: string
          example: outage
          enum:
            - ok
            - degraded
            - outage
    healthStatusComponents:
      allOf:
        - $ref: '#/components/schemas/healthStatus'
        - type: object
          properties:
            components:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: the name of the underlying component
                    example: eventhandler
                  status:
                    type: string
                    enum:
                      - ok
                      - degraded
                      - outage
                    description: the status of the component
                    example: outage
                  errormessage:
                    type: string
                    description: Contains the actual message in case of a problem
                    example: timeout
                  details:
                    type: string
                    description: more information about the problem at hand
                    example: >-
                      Messages are not received due to the eventhandler who
                      seems to be too busy.
                  type:
                    type: string
                    description: the type of problem that occurred
                    example: event
                  code:
                    type: string
                    description: the code of the problem that occurred
                    example: TIMEOUT504
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/nomada-solutions/standaard-swagger-digipolis/1.0.0
