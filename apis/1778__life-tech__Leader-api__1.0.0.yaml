openapi: 3.0.0
info:
  title: leader-api
  version: 1.0.0
  description: API for mobile application for leaders and administrators
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/life-tech/Leader-api/1.0.0'
  - url: 'http://localhost:3000'
paths:
  /users:
    post:
      summary: Add new user to system
      responses:
        '201':
          description: Created
        '409':
          description: Conflict
      description: 'Create new user by leader, after this operation user will be created, activated and verified.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                  format: email
              required:
                - first_name
                - last_name
                - phone
                - email
            examples:
              John Doe:
                value:
                  first_name: John
                  last_name: Doe
                  phone: '+380123456789'
                  email: john@doe.com
        description: New user data
      security:
        - Auth0Token:
            - 'users:create'
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - Auth0Token:
            - 'list:users'
      description: Returns list of users assigned to authorized leader
  /question:
    get:
      summary: Questions List
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
      description: List of questions
      security:
        - Auth0Token:
            - 'question:create'
    post:
      summary: ''
      responses:
        '201':
          description: Created
        '409':
          description: Conflict
      description: Create new question
      security:
        - Auth0Token:
            - 'question:reate'
  /question/{questionId}:
    get:
      summary: Get Question
      tags: []
      parameters:
        - name: questionId
          in: path
          required: true
          description: id of question to retrieve
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '404':
          description: Not Found
    delete:
      summary: Delete question
      tags: []
      parameters:
        - name: questionId
          in: path
          required: true
          description: id of question to retrieve
          schema:
            type: string
      responses:
        '200': 
          description: Ok
        '404':
          description: Not Found
      
  /questionary:
    get:
      summary: List of questionaries
      tags: []
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Questionary'
    post:
      summary: Create new questionary
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Questionary'

      responses:
        '201':
          description: Created
        '409':
          description: Conflict
    
  /questionary/{questionaryId}/start/{userId}:
    get:
      summary: Start questionary for user
      parameters:
        - name: questionaryId
          in: path
          required: true
          description: id of questionary to Start
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: id of user
          schema:
            type: string
      
      responses:
        '200': 
          description: Ok
        '404':
          description: Not Found

      
      


components:
  schemas:
    User:
      title: User
      type: object
      x-tags:
        - users
      description: Represents base user registered in system. Can have one or more profiles.
      properties:
        user_id:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        picture:
          type: string
          format: uri
        nickname:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        email_verified:
          type: boolean
    Question:
      title: Question
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        answers:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            anyOf:
              - $ref: '#/components/schemas/AnswerRadio'
              - $ref: '#/components/schemas/AnswerMetter'
      required:
        - id
        - title
        - answers
    AnswerRadio:
      title: Answer Radio
      type: object
      description: Radio answer type
      x-examples:
        example-1: {}
      properties:
        values:
          type: array
          uniqueItems: true
          items:
            type: object
            properties:
              id:
                type: string
              text:
                type: string
            required:
              - id
              - text
        type:
          type: string
          description: 'selectable answer type, can be radio or checkbox. Radio can select only one choice while checkbox can have multiple choises selected'
          enum:
            - radio
            - checkbox
          example: radio
      required:
        - values
        - type
    AnswerMetter:
      title: Answer Metter
      type: object
      properties:
        type:
          type: string
          enum:
            - date
            - time
            - datetime
            - number
          example: date
        min:
          type: integer
        max:
          type: integer
      required:
        - type
        - min
        - max
    Questionary:
      title: Questionary
      type: object
      properties:
        id:
          type: string
        title: 
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
      required:
        - title
        - questions
    
    UserAnswer:
      title: User`s answer
      type: object
      properties:
        question: 
          type: string
          description: Question id
        value:
          type: string

    UserQuestionary:
      title: Questionary assifned to user
      type: object
      properties:
        id:
          type: string
        user:
          type: string
        questionary:
          type: string
        answers:
          type: array
          items: 
            $ref: '#/components/schemas/UserAnswer'
        
  securitySchemes:
    Auth0Token:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://lifetec.auth0.com/authorize'
          refreshUrl: ''
          scopes:
            createUser: 'users:create'
