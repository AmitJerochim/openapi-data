penapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/greggreg/BookStorage/1.0.0
info:
  description: API for the book storage application
  version: "1.0.0"
  title: Book storage API
  contact:
    email: putz.gregory@gmail.com
  license:
    name: Beerware License
    url: 'https://spdx.org/licenses/Beerware.html'
tags:
  - name: books
    description: Operations on books
paths:
  /book:
    put:
      tags:
        - books
      summary: Insert a book into the system.
      operationId: createBook
      description: |
        By providing its name, author, barcode, quantity, price per unit, you can create a book into the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: The book has been successfully created
        '400':
          description: Bad input parameter
        '409':
          description: The book already exists in the system
    post:
      tags:
        - books
      summary: Update a book's detail.
      operationId: updateBook
      description: |
        By providing the barcode and the updated field(s) information, you can search for that book's information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: The book's information have been updated
        '400':
          description: Bad input parameter
        '404':
          description: No book found with this barcode in the system
  /book/{barcode}:
    get:
      tags:
        - books
      summary: Retrieve a bookâ€™s information from the system.
      operationId: retrieveBook
      description: |
        By providing the book's barcode, you can search for that book's information
      parameters:
        - in: path
          name: barcode
          description: The barcode of the book to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book's information for this barcode
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad input parameter
        '404':
          description: No book found with this barcode in the system
  /book/{barcode}/price:
    get:
      tags:
        - books
      summary: Calculate the total price of specific books in the system.
      operationId: calculateTotalPriceBooks
      description: |
        Given the barcode, you can calculate the total price of the corresponding books (including antique books and science journals).
      parameters:
        - in: path
          name: barcode
          description: The barcode of the book to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book's information for this barcode
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/BookTotalPrice'
        '400':
          description: Bad input parameter
        '404':
          description: No book found with this barcode in the system
components:
  schemas:
    Book:
      type: object
      required:
        - barcode
        - name
        - author
        - quantity
        - pricePerUnit
      properties:
        barcode:
          type: string
          example: '9782266233200'
        name:
          type: string
          example: 'Dune'
        author:
          type: string
          example: 'Frank Herbert'
        quantity:
          type: integer
          minimum: 0
          example: 26
        pricePerUnit:
          type: number
          format: double
          minimum: 0
          example: 9.99
        releaseYear:
          type: integer
          minimum: 0
          maximum: 1900
          example: 1860
          default: null
        scienceIndex:
          type: integer
          minimum: 1
          maximum: 10
          example: 7
          default: null
    BookTotalPrice:
      type: object
      required:
        - totalPrice
      properties:
        totalPrice:
          type: number
          format: double
          minimum: 0
          example: 253.54