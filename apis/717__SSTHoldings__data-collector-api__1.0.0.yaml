penapi: "3.0.0"
info:
  description: "Provides data on Amazon Sellers"
  version: "1.0.0"
  title: "Search Rank Service"
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SSTHoldings/data-collector-api/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SSTHoldings/keyword-ranking-service/1.0.0
  - url: "/dev"
    description: ApiGateWay
paths:
  /data/definition:
    get:
      tags:
        - "Definition"
      summary: "Find definitions by query parameters"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataDdefinition"
      security:
        - api_key: []
    post:
      tags:
        - "Definition"
      summary: "Create a new definition"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
  /data/definition/{id}:
    get:
      tags:
        - "Definition"
      summary: "Get specified definition"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      security:
        - api_key: []
    put:
      tags:
        - "Definition"
      summary: "Update definition"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
    delete:
      tags:
        - "Definition"
      summary: "Delete ane exisiting definition"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Account not found"
      security:
        - api_key: []
  /schedule:
    get:
      tags:
        - "Schedule"
      summary: "Find schedule by search parameters"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
    post:
      tags:
        - "Schedule"
      summary: "Create a new schedule"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
  /schedule/{id}:
    get:
      tags:
        - "Schedule"
      summary: "Retrieve schedule by id"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
    put:
      tags:
        - "Schedule"
      summary: "Update schedule"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
    delete:
      tags:
        - "Schedule"
      summary: "Delete ane exisiting schedule"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Account not found"
      security:
        - api_key: []
  /data:
    get:
      tags:
        - "Data"
      summary: "Retrieve an array of path matching data requests"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
  /data/request:
    get:
      tags:
        - "Requests"
      summary: "Find request that match a given criteria"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
    post:
      tags:
        - "Requests"
      summary: "Create an ad=hoc data request"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
  /data/request/{id}:
    get:
      tags:
        - "Requests"
      summary: "Retrieve schedule by id"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
    put:
      tags:
        - "Requests"
      summary: "Update schedule"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
    delete:
      tags:
        - "Requests"
      summary: "Delete ane exisiting schedule"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Account not found"
      security:
        - api_key: []
  /data/request/{id}/status/start:
    post:
      tags:
        - "Requests Running"
      summary: "Set request to in progress, start timer"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
  /data/request/{id}/status/complete:
    post:
      tags:
        - "Requests Running"
      summary: "Set request to completed, data in path"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
  /data/request/{id}/status/fail:
    post:
      tags:
        - "Requests Running"
      summary: "Indicate the job has failed, supply reason"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
  /data/request/{id}/status/ping:
    post:
      tags:
        - "Requests Running"
      summary: "Send a heartbeat to the system, resetting the timeout"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
  /data/request/{id}/log:
    post:
      tags:
        - "Requests Running"
      summary: "Add a log message to the system, but do not update timer"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
  /data/request/{id}/path:
    get:
      tags:
        - "Requests Running"
      summary: "Retrieve signed URL where the data should be stored"
      parameters:
        - name: id
          in: path
          description: Account ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
      security:
        - api_key: []
  
  components:
    schemas:
      DataDefinition:
        description: "A data definition"
        type: "object"
        properties:
          type:
            type: "string"
          name:
            type: "number"
            default: 1
            format: "int32"
          period:
            type: "boolean"
            default: false
          availalbe_for_days:
            type: "boolean"
            default: false
          key_base:
            type: "string"
            format: "date-time"
            default: '[tomorrow]'
          key_pattern:
            type: "string"
            format: "date-time"
            default: '[tomorrow]'
      ApiResponse:
        type: "object"
        properties:
          code:
            type: "integer"
            format: "int32"
          type:
            type: "string"
          message:
            type: "string"