openapi: 3.0.0
info:
  description: This is mini Bank of Georgia API for Internship uses
  version: "1.0.0-oas3"
  title: Simple Mini Bank of Georgia API
  contact:
    email: levanberoshvili@bog.ge
tags:
  - name: Unauthorized
    description: Methods that can be called without authorization
  - name: Authorized
    description: Methods that can only be called if authorized
paths:
  /transfer:
    post:
      tags:
        - Authorized
      summary: Transfer Money
      description: |
        This service removes money from one and adds it on another account
      responses:
        '200':
          description: transfer was successful
        '400':
          description: bad input parameter
        '401':
          description: unauthorized
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferParams'
        required: true
  /accounts:
    delete:
      tags:
        - Authorized
      summary: Delete Account
      description: |
        This service deletes client's account.
      parameters:
        - in: query
          name: accountKey
          required: true
          schema:
            type: number
      responses:
        '200':
          description: account successfully deleted
        '400':
          description: bad input parameter
        '401':
          description: unauthorized
        '500':
          description: internal server error
    put:
      tags:
        - Authorized
      summary: Create Account
      description: |
        This service adds new account for client.
      responses:
        '200':
          description: 'account successfully created, new account model'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: bad input parameter
        '401':
          description: unauthorized
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountParams'
        required: true
    get:
      tags:
        - Authorized
      summary: Get Accounts
      description: |
        This service gets all or specific client's accounts.
      parameters:
        - in: query
          name: clientKey
          required: false
          schema:
            type: number
      responses:
        '200':
          description: accounts of given client or all accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          description: bad input parameter
        '401':
          description: unauthorized
        '500':
          description: internal server error
  /clients:
    put:
      tags:
        - Authorized
      summary: Create Client (Optional Bonus)
      description: |
        This service adds new client.
      responses:
        '200':
          description: 'client successfully created, new client model'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: bad input parameter
        '401':
          description: unauthorized
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientParams'
        required: true
    get:
      tags:
        - Authorized
      summary: Get Clients
      description: >
        This service searches for existing clients and returns list of anyone
        who matches search

        criterias. (For now it returns everything if empty values are passed.)
      parameters:
        - in: query
          name: firstName
          required: false
          schema:
            type: string
            maxLength: 30
        - in: query
          name: lastName
          required: false
          schema:
            type: string
            maxLength: 30
        - in: query
          name: clientKey
          required: false
          schema:
            type: string
            maxLength: 10
      responses:
        '200':
          description: found clients array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '400':
          description: bad input parameter
        '401':
          description: unauthorized
        '500':
          description: internal server error
  /register:
    post:
      tags:
        - Unauthorized
      summary: Register New User
      description: |
        This service takes new user data from caller, registers the user
        and sends back this user's authorized token.
      responses:
        '200':
          description: 'registration was successful, logged in user model'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
        '401':
          description: unauthorized
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterParams'
        required: true
  /login:
    post:
      tags:
        - Unauthorized
      summary: Log In
      description: |
        This service takes existing user's username and password from caller
        and sends back this user's authorized token if everything is correct.
      responses:
        '200':
          description: 'login was successful, logged in user model'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
        '401':
          description: unauthorized
        '500':
          description: internal server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginParams'
        required: true
servers:
  - url: 'https://bog-angular-course-api.herokuapp.com/'
components:
  schemas:
    RegisterParams:
      type: object
      required:
        - name
        - username
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 30
          description: user's full name
        username:
          type: string
          minLength: 2
          maxLength: 30
          pattern: mustn't include spaces
        password:
          type: string
          minLength: 2
          maxLength: 30
    LoginParams:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 2
          maxLength: 30
          pattern: mustn't include spaces
        password:
          type: string
          minLength: 2
          maxLength: 30
    CreateClientParams:
      type: object
      required:
        - firstName
        - lastName
        - plusPoints
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 30
        lastName:
          type: string
          minLength: 2
          maxLength: 30
        plusPoints:
          type: number
    CreateAccountParams:
      type: object
      required:
        - clientKey
        - accountName
        - amount
      properties:
        clientKey:
          type: number
        accountName:
          type: string
          minLength: 2
          maxLength: 30
        amount:
          type: number
    TransferParams:
      type: object
      required:
        - senderAccountKey
        - receivedAccountKey
        - amount
      properties:
        senderAccountKey:
          type: number
        receivedAccountKey:
          type: number
        amount:
          type: number
    User:
      type: object
      properties:
        token:
          type: string
          description: >-
            Provide this token as 'Authorization: Bearer ${token}' header for
            each request
        expirationDate:
          type: number
          description: Time until token will be valid in milliseconds
        name:
          type: string
        username:
          type: string
        image:
          type: string
    Client:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        image:
          type: string
        clientKey:
          type: number
        sumAmount:
          type: number
        plusPoints:
          type: number
    Account:
      type: object
      properties:
        accountKey:
          type: number
        accountName:
          type: string
        clientFirstName:
          type: string
        clientLastName:
          type: string
        amount:
          type: number
