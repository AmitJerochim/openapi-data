openapi: 3.0.0
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Guppitus4/Barracuda/1.0.0
  - description: BarracudaSSO running in AWS
    url: http://barracudda.us-east-1.elasticbeanstalk.com
info:
  description: SSO API for RunFar
  version: "1.0.0"
  title: BarracudaSSO
  contact:
    email: contact@sethlunn.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Users
    description: Operations for user management
paths:
  /api/v1/user/register:
    post:
      tags:
        - Users
      summary: registers new user
      operationId: registerUser
      description: |
        By passing in a valid register entity with a unique email, you can register a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterEntity'
        description: Register Information
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SignUpResponse'
        '409':
          description: Duplicate Username
  /api/v1/user/login:
    post:
      tags:
        - Users
      summary: logins user
      operationId: loginUser
      description: |
        By passing in a valid login entity, you can login with user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginEntity'
        description: login information
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Bad Credentials
  /api/v1/user/userdata:
    get:
      tags:
        - Users
      summary: gets user information
      operationId: getUser
      description: |
        By passing in the appropriate auth token, you can get corresponding user data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDataResponse'
        '401':
          description: Bad Credentials
components:
  schemas:
    LoginEntity:
      type: object
      required:
        - Email
        - Password
      properties:
        Email:
          type: string
          example: UserEmail@gmail.com
        Password:
          type: string
          example: ExampleP@$$w0rd123
    RegisterEntity:
      type: object
      required:
        - Email
        - Password
        - ConfirmPassword
        - UserName
        - FirstName
        - LastName
        - BirthDate
        - Country
        - State
        - City
      properties:
        Email:
          type: string
          example: UserEmail@gmail.com
        Password:
          type: string
          example: ExampleP@$$w0rd123
        ConfirmPassword:
          type: string
          example: ExampleP@$$w0rd123
        UserName:
          type: string
          example: ILikeToRun
        FirstName:
          type: string
          example: John
        LastName:
          type: string
          example: Doe
        BirthDate:
          type: integer
          format: date-time
          example: '1980-08-29T09:12:33.001Z'
        Country:
          type: string
          example: USA
        State:
          type: string
          example: Vermont
        City:
          type: string
          example: Burlington
    UserDataResponse:
      type: object
      properties:
        Email:
          type: string
        UserName:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        BirthDate:
          type: integer
          format: date-time
        Country:
          type: string
        State:
          type: string
        City:
          type: string
    SignUpResponse:
      type: object
      properties:
        Token:
          type: string
        UserName:
          type: string
        Email:
          type: string
    LoginResponse:
      type: object
      properties:
        Token:
          type: string
        UserName:
          type: string
        Email:
          type: string
