openapi: 3.0.0
info:
  version: 1.0.0
  title: User Management
  description: RFG Platform - User Management API
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/RFG/UserManagement/1.0.0
  - url: 'http://localhost:8000/v1'
    description: Local server
  - url: 'https://api.rfgplatform.com/dev/v1'
    description: Development server
  - url: 'https://api.rfgplatform.com/staging/v1'
    description: Staging server
tags:
  - name: SCIM 2.0
    description: SCIM 2.0 operations
    externalDocs:
      description: System for Cross-domain Identity Management
      url: 'http://www.simplecloud.info'
  - name: Tenants
  - name: Users
  - name: Groups
  - name: Me
    description: Operations involving my data
  - name: Bulk
    description: Bulk operations
  - name: Account Recovery
  - name: Entitlements
    description: Operations involving entitlements and policies
  - name: Security
paths:
  /tenants:
    post:
      tags:
        - Tenants
      summary: Creates a tenant.
      operationId: createTenant
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TenantPayloadWithExamples'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/TenantAlreadyExist'
        '400':
          $ref: '#/components/responses/BadRequest'
        '200':
          $ref: '#/components/responses/SuccessWithTenantDomainOnly'
  /tenants/{domain}:
    get:
      tags:
        - Tenants
      summary: Retrieves a tenant given an identifier.
      operationId: retrieveTenantByIdentifier
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantIdentifier'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/TenantNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithTenantContent'
  /tenants/domain/{name}:
    get:
      tags:
        - Tenants
      summary: Retrieves a tenant given a domain name.
      operationId: retrieveTenantByDomainName
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantDomainName'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/TenantNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithTenantContent'
    put:
      tags:
        - Tenants
      summary: Updates a tenant given a domain name. Only the tenant code can be updated.
      operationId: updateTenantByDomainName
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TenantDomainName'
      requestBody:
        description: Tenant payload
        content:
          'application/json':
            schema:
              type: object
              properties:
                code:
                  type: string
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/TenantNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithTenantContent'
  /Users:
    post:
      tags:
        - SCIM 2.0
        - Users
      summary: Creates a user given the correct information.
      operationId: createUser
      description: >-
        Creates a user. <br/>
        No need to input the **email address** since by default it takes the value of **userName**. <br/>
        Though you can override the email address value if necessary.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/UserPayloadWithExamples'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/UserAlreadyExist'
        '400':
          $ref: '#/components/responses/BadRequest'
        '201':
          $ref: '#/components/responses/SuccessWithUserContent'
    get:
      tags:
        - SCIM 2.0
        - Users
      summary: Retrieves a list of users.
      operationId: retrieveUsers
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
        - $ref: '#/components/parameters/StartIndex'
        - $ref: '#/components/parameters/Count'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Attributes'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /Users/{id}:
    get:
      tags:
        - SCIM 2.0
        - Users
      summary: Retrieves user information given an ID.
      operationId: retrieveUser
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithUserContent'
    put:
      tags:
        - SCIM 2.0
        - Users
      summary: Updates user information given an ID.
      operationId: updateUser
      description: >-
        Updates user information given an ID. <br/>
        The following information cannot be updated using this operation&#58;
          * id
          * userName
          * emails
          * EnterpriseUser.lastLogin
          * EnterpriseUser.accountLock
          * EnterpriseUser.status
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/UserPayload'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '200':
          $ref: '#/components/responses/SuccessWithUserContent'
    delete:
      tags:
        - SCIM 2.0
        - Users
      summary: Deletes user information given an ID.
      operationId: deleteUser
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '204':
          $ref: '#/components/responses/NoContent'
  /Users/{id}/deactivate:
    patch:
      tags:
        - Users
      summary: Deactivates a user.
      operationId: deactivateUser
      description: >-
        Deactivates a user. <br/>
        This will change the user account status to 'INACTIVE'.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithUserContent'
  /Users/{id}/activate:
    patch:
      tags:
        - Users
      summary: Activates a user.
      operationId: activateUser
      description: >-
        Activates a user. <br/>
        This will change the user account status to 'ACTIVE'.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithUserContent'
  /Users/{id}/password:
    patch:
      tags:
        - Users
      summary: Updates user password.
      operationId: updatePassword
      description: >-
        Updates user password. This operation should only be executed by an admin.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/PasswordFormData'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '204':
          $ref: '#/components/responses/NoContent'
  /Users/total:
    get:
      tags:
        - Users
      summary: Retrieves the total number of users.
      operationId: retrieveTotalUsers
      description: >-
        Retrieves the total number of users. <br/>
        This operation should only be executed by an admin.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '200':
          $ref: '#/components/responses/SuccessWithIntContent'
  /Users/{id}/permissions:
    get:
      tags:
        - Users
      summary: Retrieves information regarding user permissions.
      operationId: retrieveUserPermission
      description: >-
        Retrieves information regarding user permissions. This will be deprecated soon. <br/>
        These are the actions involved with permissions&#58;
          * user&#58;
            * create
            * view
            * list
            * update
            * delete
          * group&#58;
            * create
            * view
            * update
            * delete
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithUserPermission'
  /Users/admin:
    post:
      tags:
        - Users
      summary: Creates an admin user.
      operationId: createAdminUser
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/AdminUserPayloadWithExamples'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/UserAlreadyExist'
        '400':
          $ref: '#/components/responses/BadRequest'
        '201':
          $ref: '#/components/responses/SuccessWithUserContent'
  /Users/{id}/admin:
    delete:
      tags:
        - Users
      summary: Removed admin rights from an admin user.
      operationId: removeAdminRights
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithUserContent'
    patch:
      tags:
        - Users
      summary: Attach admin rights from an existing user.
      operationId: attachAdminRights
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithUserContent'
  /Groups:
    post:
      tags:
        - SCIM 2.0
        - Groups
      summary: Creates a group.
      operationId: createGroup
      description: >-
        Creates a group. Groups names are unique and case sensitive.
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/GroupPayloadWithExamples'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/GroupAlreadyExist'
        '400':
          $ref: '#/components/responses/BadRequest'
        '201':
          $ref: '#/components/responses/SuccessWithGroupContent'
    get:
      tags:
        - SCIM 2.0
        - Groups
      summary: Retrieves a list of groups.
      operationId: retrieveGroups
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Attributes'
        - $ref: '#/components/parameters/Domain'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /Groups/.search:
    post:
      tags:
        - SCIM 2.0
        - Groups
      summary: Search groups.
      description: >-
        Searches for groups that returns only the id, displayName and status.
      operationId: searchGroups
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/SearchParamsPayloadWithExamples'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '200':
          $ref: '#/components/responses/SuccessWithSearchResults'
  /Groups/{id}:
    get:
      tags:
        - SCIM 2.0
        - Groups
      summary: Retrieves group information given an ID.
      operationId: retrieveGroup
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/GroupNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithGroupContent'
    put:
      tags:
        - SCIM 2.0
        - Groups
      summary: Updates group information given an ID.
      operationId: updateGroup
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/GroupPayload'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/GroupNotFound'
        '409':
          $ref: '#/components/responses/GroupAlreadyExist'
        '400':
          $ref: '#/components/responses/BadRequest'
        '200':
          $ref: '#/components/responses/SuccessWithGroupContent'
    delete:
      tags:
        - SCIM 2.0
        - Groups
      summary: Deletes group information given an ID.
      operationId: deleteGroup
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/GroupNotFound'
        '204':
          $ref: '#/components/responses/NoContent'
  /Groups/{groupId}/add/Users/{userId}:
    patch:
      tags:
        - Groups
      summary: Adds a user to a group
      operationId: addUserToGroup
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GroupId'
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithGroupContent'
  /Groups/{groupId}/delete/Users/{userId}:
    patch:
      tags:
        - Groups
      summary: Removes a user from a group
      operationId: removeUserFromGroup
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GroupId'
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithGroupContent'
  /Groups/{id}/activate:
    patch:
      tags:
        - Groups
      summary: Activates a group.
      description: Group status will be set to ACTIVE.
      operationId: activateGroup
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/GroupNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithGroupContent'
  /Groups/{id}/deactivate:
    patch:
      tags:
        - Groups
      summary: Deactivates a group.
      description: Group status will be set to INACTIVE.
      operationId: deactivateGroup
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/GroupNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithGroupContent'
  /Groups/{id}/authorize/{permissionType}/{permissionAction}:
    patch:
      tags:
        - Groups
      summary: Authorize a group to operate on a particular resource.
      description: >-
        Authorize a group to operate on a particular resource given a permission type and action. <br/>
        This operation should only be executed by an admin.
      operationId: addGroupPermission
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/PermissionType'
        - $ref: '#/components/parameters/PermissionAction'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/GroupNotFound'
        '202':
          $ref: '#/components/responses/NoContent'
  /Groups/{id}/deny/{permissionType}/{permissionAction}:
    patch:
      tags:
        - Groups
      summary: Denies a group to operate on a particular resource.
      description: >-
        Denies a group to operate on a particular resource given a permission type and action. <br/>
        This operation should only be executed by an admin.
      operationId: deleteGroupPermission
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/PermissionType'
        - $ref: '#/components/parameters/PermissionAction'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/GroupNotFound'
        '202':
          $ref: '#/components/responses/NoContent'
  /Groups/{id}/permissions/{permissionType}/{permissionAction}:
    get:
      tags:
        - Groups
      summary: Determines if a group is permitted to operate on a resource.
      description: >-
        Determines if a group is permitted to operate on a resource given a permission type and action. <br/>
        This operation should only be executed by an admin.
      operationId: isGroupPermittedToResource
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/PermissionType'
        - $ref: '#/components/parameters/PermissionAction'
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/GroupNotFound'
        '200':
          $ref: '#/components/responses/SuccessWithBooleanContent'
  /Me:
    get:
      tags:
        - SCIM 2.0
        - Me
      summary: Retrieves my information.
      operationId: retrieveMyProfile
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '200':
          $ref: '#/components/responses/SuccessWithUserContent'
    put:
      tags:
        - SCIM 2.0
        - Me
      summary: Updates my information.
      operationId: updateMyProfile
      description: >-
        The following information cannot be updated using this operation&#58;
          * id
          * userName
          * emails
          * EnterpriseUser.lastLogin
          * EnterpriseUser.accountLock
          * EnterpriseUser.status
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/UserPayload'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '200':
          $ref: '#/components/responses/SuccessWithUserContent'
  /Me/password:
    patch:
      tags:
        - Me
      summary: Updates my password.
      operationId: updateMyPassword
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/PasswordFormData'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '204':
          $ref: '#/components/responses/NoContent'
  /Bulk:
    post:
      tags:
        - SCIM 2.0
        - Bulk
      summary: Executes a bulk operation request.
      operationId: bulkRequest
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/BulkRequestPayloadWithExamples'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '200':
          $ref: '#/components/responses/BulkOperationResponse'
  /account/recovery/password:
    post:
      tags:
        - Account Recovery
      summary: Recovery account by password reset.
      operationId: accountRecoveryByPasswordReset
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Tenant'
      requestBody:
        $ref: '#/components/requestBodies/AccountRecoveryPayloadWithExamples'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '202':
          $ref: '#/components/responses/NoContent'
  /entitlements/policies:
    post:
      tags:
        - Entitlements
      summary: Create a policy.
      operationId: createPolicy
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      requestBody:
        $ref: '#/components/requestBodies/PolicyPayloadWithExamples'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/PolicyAlreadyExist'
        '200':
          $ref: '#/components/responses/Policy'
    put:
      tags:
        - Entitlements
      summary: Update a policy.
      operationId: updatePolicy
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      requestBody:
        $ref: '#/components/requestBodies/PolicyPayload'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '200':
          $ref: '#/components/responses/Policy'
  /entitlements/policies/{id}:
    get:
      tags:
        - Entitlements
      summary: Retrieve a policy.
      operationId: retrievePolicy
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '200':
          $ref: '#/components/responses/Policy'
    delete:
      tags:
        - Entitlements
      summary: Delete a policy.
      operationId: deletePolicy
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '204':
          $ref: '#/components/responses/NoContent'
  /entitlements/policies/{id}/publish:
    post:
      tags:
        - Entitlements
      summary: Publish a policy to Policy Decision Point (PDP).
      operationId: publishPolicy
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '204':
          $ref: '#/components/responses/NoContent'
  /entitlements/subject/{name}:
    get:
      tags:
        - Entitlements
      summary: Retrieve entitlements of a suject.
      operationId: retrieveEntitlementsBySubject
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/SubjectName'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '200':
          $ref: '#/components/responses/Entitlement'
  /entitlements/me:
    get:
      tags:
        - Entitlements
      summary: Retrieve my entitlements.
      operationId: retrieveMyEntitlements
      security:
        - BearerAuth: []
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '200':
          $ref: '#/components/responses/Entitlement'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: UserManagement-API-Key
  parameters:
    Tenant:
      name: tenant
      in: query
      description: The tenant domain.
      required: false
      schema:
        type: string
    Id:
      name: id
      in: path
      description: The resource id.
      required: true
      schema:
        type: string
    UserId:
      name: userId
      in: path
      description: System generated UUID of a user.
      required: true
      schema:
        type: string
    GroupId:
      name: groupId
      in: path
      description: System generated UUID of a group.
      required: true
      schema:
        type: string
    StartIndex:
      name: startIndex
      in: query
      required: false
      description: Start index can never have a negative value. A negative value will always default to 0.
      schema:
        type: integer
        format: int32
    Count:
      name: count
      in: query
      required: false
      description: Count has a minimum value of 1 and a maximum value of 150. A count value of less than 1 will always default to 1 and a count value of greater than 150 will always default to 150.
      schema:
        type: integer
        format: int32
    Attributes:
      name: attributes
      in: query
      required: false
      description: A comma delimited list of attributes that will be part of the response.
      schema:
        type: string
    Filter:
      name: filter
      in: query
      required: false
      description: >-
        filte syntax - {filter attribute} {operation} {value} <br/>
        filter operations&#58;
          * co = contains
          * eq = equals
          * sw = starts with

        Example&#58; filter=name.givenName co Foo
      schema:
        type: string
    SortBy:
      name: sortBy
      in: query
      required: false
      schema:
        type: string
    SortOrder:
      name: sortOrder
      in: query
      required: false
      schema:
        type: string
    Domain:
      name: domain
      in: query
      required: false
      description: The user store domain. Default is PRIMARY.
      schema:
        type: string
    PermissionType:
      name: permissionType
      in: path
      description: >-
        The resource involved in a permission. <br/>
        Valid types&#58;
          * user
          * group
      required: true
      schema:
        type: string
    PermissionAction:
      name: permissionAction
      in: path
      description: >-
        The action which a group can perform on a certain resource. <br/>
        Valid actions per type&#58;
          * user
            * create
            * view
            * list
            * update
            * delete
          * group
            * create
            * view
            * update
            * delete
      required: true
      schema:
        type: string
    TenantIdentifier:
      name: domain
      in: path
      description: A tenant identifier can be a tenant code or tenant domain.
      required: true
      schema:
        type: string
    TenantDomainName:
      name: name
      in: path
      description: The tenant domain.
      required: true
      schema:
        type: string
    TenantDomain:
      name: domain
      in: path
      description: The tenant domain.
      required: true
      schema:
        type: string
    SubjectName:
      name: name
      in: path
      description: The subject name.
      required: true
      schema:
        type: string
  requestBodies:
    UserPayload:
      description: User payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/User'
    UserPayloadWithExamples:
      description: User payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/User'
          examples:
            createUserWithAskPassword:
              $ref: '#/components/examples/CreateUserWithAskPassword'
            createUserWithoutAskPassword:
              $ref: '#/components/examples/CreateUserWithoutAskPassword'
            createUserWithName:
              $ref: '#/components/examples/CreateUserWithName'
            createUserWithNameAndProfileUrl:
              $ref: '#/components/examples/CreateUserWithNameAndProfileUrl'
            createUserWithApplicationAttributes:
              $ref: '#/components/examples/CreateUserWithApplicationAttributes'
    AdminUserPayloadWithExamples:
      description: User payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/User'
          examples:
            createAdminUser:
              $ref: '#/components/examples/CreateAdminUser'
            createAdminUserWithName:
              $ref: '#/components/examples/CreateAdminUserWithName'
    PasswordFormData:
      description: Password form data
      content:
        'application/x-www-form-urlencoded':
          schema:
            properties:
              password:
                description: New password
                type: string
            required:
              - password
    GroupPayload:
      description: Group payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Group'
    GroupPayloadWithExamples:
      description: Group payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Group'
          examples:
            createGroup:
              $ref: '#/components/examples/CreateGroup'
            createGroupWithMembers:
              $ref: '#/components/examples/CreateGroupWithMembers'
    SearchParamsPayload:
      description: Search parameters payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/SearchParams'
    SearchParamsPayloadWithExamples:
      description: Search parameters payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/SearchParams'
          examples:
            default:
              $ref: '#/components/examples/SearchParamsDefaults'
    TenantPayloadWithExamples:
      description: Tenant payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Tenant'
          examples:
            createTenant:
              $ref: '#/components/examples/CreateTenant'
    BulkRequestPayloadWithExamples:
      description: Bulk request payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/BulkRequest'
          examples:
            bulkRequest:
              $ref: '#/components/examples/BulkRequest'
    AccountRecoveryPayloadWithExamples:
      description: Account recovery payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/AccountRecovery'
          examples:
            bulkRequest:
              $ref: '#/components/examples/AccountRecoveryByPasswordReset'
    PolicyPayload:
      description: Policy payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Policy'
    PolicyPayloadWithExamples:
      description: Policy payload
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Policy'
          examples:
            samplePolicy:
              $ref: '#/components/examples/Policy'
  examples:
    CreateUserWithAskPassword:
      summary: Create a user using the 'Ask Password' option.
      value: >-
        {
          "userName": "user@redflaggroup.com"
        }
    CreateUserWithoutAskPassword:
      summary: Create a user without using the 'Ask Password' option.
      value: >-
        {
          "userName": "user@redflaggroup.com",
          "password": "P455w0rd!",
          "EnterpriseUser": {
              "askPassword": false
          }
        }
    CreateUserWithName:
      summary: Create a user with supplied name.
      value: >-
        {
          "userName": "user@redflaggroup.com",
          "name": {
              "givenName": "User first name",
              "familyName": "User last name"
          }
        }
    CreateUserWithNameAndProfileUrl:
      summary: Create a user with supplied name and profile url.
      value: >-
        {
          "userName": "user@redflaggroup.com",
          "name": {
              "givenName": "User first name",
              "familyName": "User last name"
          },
          "profileUrl": "https://integracheck-stage.rfglabs.org"
        }
    CreateUserWithApplicationAttributes:
      summary: Create a user with application attributes.
      value: >-
        {
          "userName": "user@redflaggroup.com",
          "name": {
              "givenName": "User first name",
              "familyName": "User last name"
          },
          "application": {
            "IntegraCheck": {
              "subGroup": "My Sub Group"
            },
            "REDCMS": {
              "region": "US"
            }
          }
        }
    CreateAdminUser:
      summary: Create an admin user.
      value: >-
        {
          "userName": "user@redflaggroup.com",
          "profileUrl": "https://integracheck-stage.rfglabs.org"
        }
    CreateAdminUserWithName:
      summary: Create an admin user with supplied name.
      value: >-
        {
          "userName": "user@redflaggroup.com",
          "profileUrl": "https://integracheck-stage.rfglabs.org",
          "name": {
              "givenName": "User first name",
              "familyName": "User last name"
          }
        }
    CreateGroup:
      summary: Create a group.
      value: >-
        {
          "displayName": "MyGroup"
        }
    CreateGroupWithMembers:
      summary: Create a group with members.
      value: >-
        {
          "displayName": "MyGroup",
          "members": [
            {
              "value": "user-id-xxxx",
              "display": "user@email.com"
            }
          ]
        }
    SearchParamsDefaults:
      summary: Default search parameters.
      value: >-
        {}
    CreateTenant:
      summary: Create a tenant.
      value: >-
        {
          "domain": "tenant1.ph",
          "adminUserName": "user@email.com",
          "firstName": "User first name",
          "lastName": "User last name",
          "profileUrl": "https://integracheck.rfglabs.org"
        }
    BulkRequest:
      summary: Sample bulk request payload.
      value: >-
        {
          "Operations": [
              {
                  "method": "POST",
                  "path": "/Users",
                  "bulkId": "qwerty",
                  "data": {
                      "userName": "user1@email.com"
                  }
              },
              {
                  "method": "POST",
                  "path": "/Users",
                  "bulkId": "qwerty",
                  "data": {
                      "userName": "user2@email.com"
                  }
              },
              {
                  "method": "POST",
                  "path": "/Users",
                  "bulkId": "qwerty",
                  "data": {
                      "userName": "user3@email.com"
                  }
              }
          ]
        }
    AccountRecoveryByPasswordReset:
      summary: Sample account recovery by password reset.
      value: >-
        {
          "userName": "user1@email.com",
          "callback": "https://integracheck-stage.rfglabs.org"
        }
    Policy:
      summary: Sample policy.
      value: >-
        {
          "id": "UserManager",
          "version": "1.0",
          "ruleCombiningAlgorithm": "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-unless-permit",
          "target": {
            "anyOf":[
              {
                "allOf": [
                  {
                    "matches":[
                      {
                        "id": "urn:oasis:names:tc:xacml:1.0:function:string-equal",
                        "attributeValue": {
                          "value": "UserManager"
                        },
                        "attributeDesignator": {
                          "id": "urn:oasis:names:tc:xacml:1.0:subject:subject-id",
                          "category": "urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
                        }

                      }
                    ]
                  }
                ]
              }
            ]
          },
          "rules": [
            {
              "id": "permit-user-operations",
              "effect": "Permit",
              "description": "Allow execution of view users operation",
              "condition": {
                "function": {
                  "id": "urn:oasis:names:tc:xacml:1.0:function:and",
                  "functions":[
                    {
                      "id": "urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of",
                      "function": {
                        "id": "urn:oasis:names:tc:xacml:1.0:function:string-bag",
                        "attributeValues": [
                          {
                            "value": "POST"
                          },
                          {
                            "value": "GET"
                          },
                          {
                            "value": "PUT"
                          },
                          {
                            "value": "DELETE"
                          },
                          {
                            "value": "PATCH"
                          }
                        ]
                      },
                      "attributeDesignator": {
                        "id": "urn:oasis:names:tc:xacml:1.0:action:action-id",
                        "category": "urn:oasis:names:tc:xacml:3.0:attribute-category:action"
                      }
                    },
                    {
                      "id": "urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of",
                      "function": {
                        "id": "urn:oasis:names:tc:xacml:1.0:function:string-bag",
                        "attributeValues": [
                          {
                            "value": "/v1/Users"
                          }
                        ]
                      },
                      "attributeDesignator": {
                        "id": "urn:oasis:names:tc:xacml:1.0:resource:resource-id",
                        "category": "urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
                      }
                    }
                  ]
                }

              }

            },
            {
              "id": "deny-user-operations",
              "effect": "Deny"
            }
          ]
        }
  responses:
    UnexpectedError:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: >-
        Bad request. Usually when a given input is in valid or not all required fields are supplied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NoContent:
      description: Success
    SuccessWithUserContent:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    SuccessWithUserPermission:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Permission'
    UserNotFound:
      description: User does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UserAlreadyExist:
      description: User already exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    SuccessWithIntContent:
      description: Success
      content:
        application/json:
          schema:
            type: integer
            format: int32
    SuccessWithSearchResults:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchResults'
    SuccessWithGroupContent:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    GroupAlreadyExist:
      description: Group already exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    GroupNotFound:
      description: Group does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ResourceNotFound:
      description: Resource does not exist. A resource can be a user or group.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    SuccessWithBooleanContent:
      description: Success
      content:
        application/json:
          schema:
            type: boolean
    SuccessWithTenantContent:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              domain:
                type: string
                readOnly: true
              code:
                type: string
                readOnly: true
    SuccessWithTenantDomainOnly:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              domain:
                type: string
                readOnly: true
    TenantAlreadyExist:
      description: Tenant already exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TenantNotFound:
      description: Tenant does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BulkOperationResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BulkResponse'
    PolicyAlreadyExist:
      description: Policy already exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Policy:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Policy'
    Entitlement:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Entitlement'
  schemas:
    Tenant:
      type: object
      properties:
        domain:
          type: string
          description: >-
            The tenant domain. The tenant domain value must be all in lower case and must follow a domain name pattern.
          example: redflaggroup.com
        adminUserName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        profileUrl:
          type: string
        id:
          type: string
          readOnly: true
        code:
          type: string
          description: >-
            If left empty, it will get the substring of domain up to the last '.' character exluding the '.' character.
      required:
        - domain
        - adminUserName
        - firstName
        - lastName
        - profileUrl
    User:
      type: object
      required:
        - userName
      properties:
        id:
          type: string
          readOnly: true
          description: System generated UUID.
        externalId:
          type: string
        meta:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Meta'
        schemas:
          type: array
          items:
            type: string
          readOnly: true
        userName:
          type: string
          format: email
          example: user@redflaggroup.com
          description: >-
            The userName is unique per tenant, therefore this cannot be updated once created in the databse.
        password:
          type: string
          description: >-
            Password will become a required field only if a user will be created without using the 'Ask Password' option. <br/><br/>
            Passwords must confirm with the RFG standards&#58; <br/>
              * Passwords must be at least 8 characters in length and 32 characters maximum and contain at least 3 of the following 4 types of characters&#58;
                * lower case letters (a-z)
                * upper case letters (A-Z)
                * numbers (0-9)
                * special characters @ # $ % ^ & * - _ ! + = [ ] { } |  &#58; ‘ , . ? / ` ~ “ ( ) ;
                * The password should never allow 'space'.
          example: P455w0rd!
          externalDocs:
            description: 'RPD-113: [WSO2-IS] Configure default password pattern'
            url: 'https://rfg-projects.atlassian.net/browse/RPD-113'
        emails:
          type: array
          description: >-
            Emails are automatically populated base on the 'userName' value. <br/>
            Currently, this cannot be updated once it is created.
          items:
            $ref: '#/components/schemas/Email'
        name:
          $ref: '#/components/schemas/Name'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/ScimResource'
          readOnly: true
        timezone:
          type: string
          description: >-
            The timezone value must adhere to the following format&#58;
              * UTC[+ or - offset value]

            An example would be UTC+8&#58;00 which means 'Australian Western Standard Time, Beijing Time, Irkutsk Time'.
          example: UTC
          externalDocs:
            description: 'RPD-427: Timezone setting'
            url: 'https://rfg-projects.atlassian.net/browse/RPD-427'
        profileUrl:
          type: string
          description: >-
            The user profile url or landing page. A default value is supplied when this is blank or empty.<br/>
            The default value depends per environment&#58;
              * LOCAL - http&#58;//localhost&#58;3000/callback
              * DEV - https&#58;//console-dev.rfgplatform.com/callback
              * STAGING - https&#58;//console-stage.rfgplatform.com/callback
              * PRODUCTION - TBD

            The url location supplied here will be used as a redirect url to the following scenarios&#58;
              * When a user has been created with 'Ask Password' email notification.
              * When resetting a user password via email notification.
              * When resending the 'Ask Password' email notification.

            The value of 'profileUrl' must also comply with a valid url. <br/>
            Valid urls are configured in either of the following&#58;
              * WSO2 Identity server > Identity Providers > Resident > Account Management Policies > Account Recovery > Recovery callback URL regex
              * WSO2 Identity Server configuration file - deployment.toml
          default: $DEFAULT_USER_PROFILE_URL
        displayName:
          type: string
        nickName:
          type: string
        title:
          type: string
        userType:
          type: string
        preferredLanguage:
          type: string
        locale:
          type: string
        active:
          type: boolean
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        ims:
          type: array
          items:
            $ref: '#/components/schemas/InstantMessaging'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        EnterpriseUser:
          $ref: '#/components/schemas/EnterpriseUser'
    Meta:
      type: object
      properties:
        resourceType:
          type: string
          readOnly: true
        created:
          type: string
          readOnly: true
        lastModified:
          type: string
          readOnly: true
        location:
          type: string
          readOnly: true
        version:
          type: string
          readOnly: true
    Name:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        middleName:
          type: string
        honorificPrefix:
          type: string
        honorificSuffix:
          type: string
        formatted:
          type: string
          readOnly: true
    ScimResource:
      type: object
      properties:
        value:
          type: string
          description: The resource id e.g. a user id.
        display:
          type: string
    Email:
      type: object
      required:
        - value
      properties:
        value:
          type: string
        type:
          type: string
          default: work
          enum:
            - work
            - home
            - other
        display:
          type: string
        primary:
          type: boolean
          default: true
    PhoneNumber:
      type: object
      required:
        - value
      properties:
        value:
          type: string
        type:
          type: string
          default: work
          enum:
            - work
            - home
            - mobile
            - fax
            - pager
            - other
        display:
          type: string
    InstantMessaging:
      type: object
      required:
        - value
      properties:
        value:
          type: string
        type:
          type: string
          default: work
          enum:
            - aim
            - gtalk
            - icq
            - xmpp
            - msn
            - skype
            - qq
            - yahoo
            - slack
            - teams
            - messenger
            - other
    Address:
      type: object
      properties:
        streetAddress:
          type: string
        locality:
          type: string
        region:
          type: string
        postalCode:
          type: string
        country:
          type: string
        formatted:
          type: string
          readOnly: true
    EnterpriseUser:
      type: object
      properties:
        askPassword:
          type: boolean
          default: true
        status:
          type: string
          default: PENDING
          readOnly: true
          description: >-
            The status is automatically populated base on the current state of the user&#58; <br/>
              * PENDING
                * The user has been created using the 'Ask Password' option. The user will receive an email notification that requires the user to confirm his/her identity.
              * ACTIVE
                * The user confirmed his/her identity via the email notification or the user has been created by an administrator without using the 'Ask Password' option.
              * INACTIVE
                * The user account has been locked indefinitely.

            Only the following operations can update the 'status' value&#58;
              * Deactivate User
              * Activate User
          enum:
            - PENDING
            - ACTIVE
            - INACTIVE
        accountLock:
          type: boolean
          description: >-
            The value of 'accountLock' is determined by the value of 'status' wherein&#58;
              * PENDING or INACTIVE will yield a 'false' value.
              * ACTIVE will yield a 'true' value.

            Only the following operations affects the 'accountLock' value&#58;
              * Deactivate User
              * Activate User
        lastLogin:
          type: string
          description: The current UTC time in milliseconds since Epoch
          readOnly: true
        subGroup:
          type: string
        manager:
          type: string
        region:
          type: string
        department:
          type: string
        division:
          type: string
        organization:
          type: string
        costCenter:
          type: string
        employeeNumber:
          type: string
    PermissionResource:
      type: object
      properties:
        resourceId:
          type: string
        isAuthorized:
          type: boolean
    IdentityPermission:
      type: object
      properties:
        all:
          $ref: '#/components/schemas/PermissionResource'
    UserPermission:
      type: object
      properties:
        all:
          $ref: '#/components/schemas/PermissionResource'
        view:
          $ref: '#/components/schemas/PermissionResource'
        create:
          $ref: '#/components/schemas/PermissionResource'
        update:
          $ref: '#/components/schemas/PermissionResource'
        list:
          $ref: '#/components/schemas/PermissionResource'
        delete:
          $ref: '#/components/schemas/PermissionResource'
    GroupPermission:
      type: object
      properties:
        all:
          $ref: '#/components/schemas/PermissionResource'
        view:
          $ref: '#/components/schemas/PermissionResource'
        create:
          $ref: '#/components/schemas/PermissionResource'
        update:
          $ref: '#/components/schemas/PermissionResource'
        delete:
          $ref: '#/components/schemas/PermissionResource'
    Permission:
      type: object
      properties:
        identity:
          $ref: '#/components/schemas/IdentityPermission'
        user:
          $ref: '#/components/schemas/UserPermission'
        group:
          $ref: '#/components/schemas/GroupPermission'
    Group:
      type: object
      properties:
        displayName:
          type: string
          description: The group name. Group names are unique and case sensitive.
        id:
          type: string
          readOnly: true
          description: System generated UUID.
        externalId:
          type: string
        meta:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Meta'
        schemas:
          type: array
          items:
            type: string
          readOnly: true
        members:
          type: array
          description: Contains a list of user id that referenced to this group
          items:
            $ref: '#/components/schemas/ScimResource'
        status:
          type: string
          default: ACTIVE
          readOnly: true
          enum:
            - ACTIVE
            - INACTIVE
      required:
        - displayName
    SearchParams:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
          default: 0
          description: Start index can never have a negative value. A negative value will always default to 0.
        count:
          type: integer
          format: int32
          default: 50
          description: Count has a minimum value of 1 and a maximum value of 150. A count value of less than 1 will always default to 1 and a count value of greater than 150 will always default to 150.
        attributes:
          type: string
          description: A comma delimited list of attributes that will be part of the response.
        filter:
          type: string
          description: >-
            filter syntax - {filter attribute} {operation} {value} <br/>
            filter operations&#58;
              * co = contains
              * eq = equals
              * sw = starts with

            Example&#58; filter=name.givenName co Foo
        sortBy:
          type: string
        sortOrder:
          type: string
        domain:
          type: string
          default: PRIMARY
          description: The user store domain.
    SearchResults:
      type: object
      properties:
        totalResults:
          type: integer
          format: int64
          readOnly: true
        startIndex:
          type: integer
          format: int32
          readOnly: true
        itemsPerPage:
          type: integer
          format: int32
          readOnly: true
        Resources:
          type: object
          readOnly: true
          description: Can be of type User or Group resource
        schemas:
          type: array
          items:
            type: string
          readOnly: true
    BulkRequest:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
          readOnly: true
        Operations:
          type: array
          items:
            $ref: '#/components/schemas/OperationRequest'
    OperationRequest:
      type: object
      properties:
        method:
          type: string
          description: HTTP method
          example: POST
          enum:
            - POST
            - PUT
            - GET
            - PATCH
            - DELETE
        path:
          type: string
          description: SCIM endpoint
          example: /Users
        bulkId:
          type: string
          description: A given id to identify the current bulk request.
        data:
          type: object
          description: The data can be a user or group payload.
    BulkResponse:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
          readOnly: true
        Operations:
          type: array
          items:
            $ref: '#/components/schemas/OperationResponse'
    OperationResponse:
      type: object
      properties:
        bulkId:
          type: string
          description: A given id to identify the current bulk request.
          readOnly: true
        method:
          type: string
          description: HTTP method
          example: POST
          enum:
            - POST
            - PUT
            - GET
            - PATCH
            - DELETE
          readOnly: true
        response:
          type: string
          description: The operation response in JSON string format.
        status:
          type: object
          properties:
            code:
              type: string
              description: The status code.
    AccountRecovery:
      type: object
      properties:
        userName:
          type: string
        callback:
          type: string
    Policy:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        ruleCombiningAlgorithm:
          type: string
        description:
          type: string
        target:
          $ref: '#/components/schemas/Target'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
          description: Rules should have atleast 1 value.
        obligation:
          $ref: '#/components/schemas/Obligation'
        advice:
          $ref: '#/components/schemas/Advice'
    Target:
      type: object
      properties:
        anyOf:
          type: array
          items:
            $ref: '#/components/schemas/AnyOf'
    AnyOf:
      type: object
      properties:
        allOf:
          type: array
          items:
            $ref: '#/components/schemas/AllOf'
          description: AllOf should have atleast 1 value.
    AllOf:
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/Match'
          description: Matches should have atleast 1 value.
    Match:
      type: object
      properties:
        id:
          type: string
        attributeValue:
          $ref: '#/components/schemas/AttributeValue'
        attributeDesignator:
          $ref: '#/components/schemas/AttributeDesignator'
    AttributeValue:
      type: object
      properties:
        value:
          type: string
    AttributeDesignator:
      type: object
      properties:
        id:
          type: string
        category:
          type: string
        mustBePresent:
          type: boolean
          default: true
    Rule:
      type: object
      properties:
        id:
          type: string
        effect:
          type: string
          enum:
            - Permit
            - Deny
        description:
          type: string
        target:
          $ref: '#/components/schemas/Target'
        condition:
          $ref: '#/components/schemas/Condition'
        obligation:
          $ref: '#/components/schemas/Obligation'
        advice:
          $ref: '#/components/schemas/Advice'
    Condition:
      type: object
      properties:
        function:
          $ref: '#/components/schemas/Function'
    Function:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        function:
          $ref: '#/components/schemas/Function'
        functions:
          type: array
          items:
            $ref: '#/components/schemas/Function'
        attributeValues:
          type: array
          items:
            $ref: '#/components/schemas/AttributeValue'
        attributeDesignator:
          $ref: '#/components/schemas/AttributeDesignator'
    Obligation:
      type: object
      properties:
        id:
          type: string
    Advice:
      type: object
      properties:
        id:
          type: string
    Entitlement:
      type: object
      properties:
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/EntitlementSubject'
          readOnly: true
          description: This is a set so this will only contain distinct entries.
        resources:
          type: array
          items:
            $ref: '#/components/schemas/EntitlementResource'
          readOnly: true
          description: This is a set so this will only contain distinct entries.
        environment:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/EntitlementEnvironment'
    EntitlementSubject:
      type: object
      properties:
        name:
          type: string
    EntitlementResource:
      type: object
      properties:
        name:
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/EntitlementSubjectAction'
    EntitlementSubjectAction:
      type: object
      properties:
        value:
          type: string
    EntitlementEnvironment:
      type: object
      properties:
        value:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        timestamp:
          type: string
        path:
          type: string
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        requestId:
          type: string