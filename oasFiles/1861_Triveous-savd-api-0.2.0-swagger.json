{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Savd API",
    "description" : "Public API for Savd",
    "version" : "0.2.0",
    "contact" : {
      "name" : "Farmaan Elahi",
      "email" : "farmaan@triveous.com"
    }
  },
  "servers" : [ {
    "url" : "http://localhost:8080",
    "description" : "Local Server"
  }, {
    "url" : "http://3.14.10.47",
    "description" : "Temp Server"
  }, {
    "url" : "http://api.savd.dev",
    "description" : "Internal Dev Server"
  } ],
  "tags" : [ {
    "name" : "bookmarks",
    "description" : "Access to Bookmark resource"
  }, {
    "name" : "tags",
    "description" : "Access to Tag resource"
  }, {
    "name" : "annotations",
    "description" : "Access Annotation resource"
  }, {
    "name" : "import",
    "description" : "Import bookmark from other sources"
  }, {
    "name" : "bundle",
    "description" : "Bundles API"
  }, {
    "name" : "user",
    "description" : "Access to User"
  }, {
    "name" : "private",
    "description" : "API is private"
  } ],
  "paths" : {
    "/bookmarks" : {
      "get" : {
        "summary" : "Get bookmarks",
        "operationId" : "getBookmarks",
        "tags" : [ "bookmarks" ],
        "description" : "Fetch Bookmarks using pagintaion options",
        "parameters" : [ {
          "$ref" : "#/components/parameters/limitParam"
        }, {
          "$ref" : "#/components/parameters/offsetParam"
        }, {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return bookmarks matching the creteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Bookmark"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create bookmark",
        "operationId" : "createBookmark",
        "tags" : [ "bookmarks" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "description" : "Adds a new bookmark which a bookmark if same url doesnot exist",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "url" ],
                "properties" : {
                  "url" : {
                    "type" : "string",
                    "nullable" : false,
                    "description" : "URL of the bookmark"
                  },
                  "html" : {
                    "type" : "string",
                    "nullable" : true,
                    "description" : "HTML content of the bookmark"
                  },
                  "message" : {
                    "type" : "string",
                    "nullable" : true,
                    "description" : "Message given when the bookmark was added for easy recollection later"
                  },
                  "dueDate" : {
                    "type" : "string",
                    "format" : "date-time",
                    "description" : "Due date before which the bookmark should be read or user should be notified of it"
                  },
                  "like" : {
                    "type" : "boolean",
                    "nullable" : false,
                    "description" : "Denote whether the newly created bookmark should be liked"
                  },
                  "archived" : {
                    "type" : "boolean",
                    "nullable" : false,
                    "description" : "Denote whether the newly created bookmark should be archived"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/newResource"
          }
        }
      }
    },
    "/bookmarks/{id}" : {
      "get" : {
        "summary" : "Get bookmark",
        "operationId" : "getBookmark",
        "tags" : [ "bookmarks" ],
        "description" : "Get a specific bookmark",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the specific bookmark",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bookmark"
                }
              }
            }
          },
          "404" : {
            "description" : "Missing Bookmark",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string",
                      "description" : "User undestandable error message"
                    },
                    "errorCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "System specific code for easier debugging"
                    },
                    "errorTag" : {
                      "type" : "string",
                      "description" : "Denoting the type of error. Each error code will have a different errorTag"
                    },
                    "httpCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "HTTP status code"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete bookmark",
        "operationId" : "deleteBookmark",
        "tags" : [ "bookmarks" ],
        "description" : "Deletes an bookmark if exist",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes a bookmark if exist"
          }
        }
      },
      "put" : {
        "summary" : "Update bookmark",
        "operationId" : "updateBookmark",
        "tags" : [ "bookmarks" ],
        "description" : "Updates the properties of a bookmark",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "message" : {
                    "type" : "string",
                    "nullable" : true,
                    "description" : "Message for easier recollection of bookmark"
                  },
                  "dueDate" : {
                    "type" : "string",
                    "format" : "date-time",
                    "description" : "Due date before which the bookmark should be read or user should be notified of it"
                  },
                  "like" : {
                    "type" : "boolean",
                    "nullable" : false,
                    "description" : "Denote whether the newly created bookmark should be liked"
                  },
                  "archived" : {
                    "type" : "boolean",
                    "nullable" : false,
                    "description" : "Denote whether the newly created bookmark should be archived"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/bookmarks/{id}/content" : {
      "get" : {
        "summary" : "Get a bookmark's content",
        "operationId" : "fetchBookmarkContent",
        "tags" : [ "bookmarks" ],
        "description" : "Get a specific bookmark's content",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return bookmarks matching the creteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "string",
                      "format" : "html",
                      "description" : "Parsed htmlcontent for the bookmark"
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "Mime type of the data"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Missing Bookmark",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string",
                      "description" : "User undestandable error message"
                    },
                    "errorCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "System specific code for easier debugging"
                    },
                    "errorTag" : {
                      "type" : "string",
                      "description" : "Denoting the type of error. Each error code will have a different errorTag"
                    },
                    "httpCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "HTTP status code"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmarks/{id}/add-tags" : {
      "put" : {
        "summary" : "Add tags to a bookmark",
        "operationId" : "attachTagsToBookmark",
        "tags" : [ "bookmarks" ],
        "description" : "Adds specific tag to bookmark if alreay exist(Case Insensitive) else createa new tag and then add it",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "tags" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Missing Bookmark",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string",
                      "description" : "User undestandable error message"
                    },
                    "errorCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "System specific code for easier debugging"
                    },
                    "errorTag" : {
                      "type" : "string",
                      "description" : "Denoting the type of error. Each error code will have a different errorTag"
                    },
                    "httpCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "HTTP status code"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmarks/{id}/remove-tags" : {
      "put" : {
        "summary" : "Remoce tags from a bookmark",
        "operationId" : "removeTagsToBookmark",
        "tags" : [ "bookmarks" ],
        "description" : "Remoe specific tag to bookmark if it already exist in bookmark",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "tags" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Missing Bookmark",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string",
                      "description" : "User undestandable error message"
                    },
                    "errorCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "System specific code for easier debugging"
                    },
                    "errorTag" : {
                      "type" : "string",
                      "description" : "Denoting the type of error. Each error code will have a different errorTag"
                    },
                    "httpCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "HTTP status code"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmarks/{id}/annotations" : {
      "get" : {
        "summary" : "Get all the annotation in a bookmark bookmark",
        "operationId" : "fetchBookmarkAnnotation",
        "tags" : [ "bookmarks" ],
        "description" : "Get all the annotation for a bookmark",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return all the annotation for bookmark",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Annotation"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Missing Bookmark",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string",
                      "description" : "User undestandable error message"
                    },
                    "errorCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "System specific code for easier debugging"
                    },
                    "errorTag" : {
                      "type" : "string",
                      "description" : "Denoting the type of error. Each error code will have a different errorTag"
                    },
                    "httpCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "HTTP status code"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags" : {
      "post" : {
        "summary" : "Adds a new tag",
        "operationId" : "addNewTag",
        "tags" : [ "tags" ],
        "description" : "Creata a new tag when there is not existing tag with the same name(Case Insensitive)",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "name" ],
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "nullable" : false,
                    "description" : "Name of the tags"
                  },
                  "parentId" : {
                    "type" : "string",
                    "nullable" : true,
                    "description" : "Id of the parent tag"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/newResource"
          },
          "404" : {
            "description" : "Tag with the existing name already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string",
                      "description" : "User undestandable error message"
                    },
                    "errorCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "System specific code for easier debugging"
                    },
                    "errorTag" : {
                      "type" : "string",
                      "description" : "Denoting the type of error. Each error code will have a different errorTag"
                    },
                    "httpCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "HTTP status code"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get" : {
        "summary" : "Fetch all user tags",
        "operationId" : "fetchUserTag",
        "tags" : [ "tags" ],
        "description" : "Fetch all the tags saved by the user",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "Fetch all tags for the user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/{id}" : {
      "delete" : {
        "summary" : "Deletes a tag",
        "operationId" : "deleteTags",
        "tags" : [ "tags" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes the tags"
          }
        }
      },
      "put" : {
        "summary" : "Updated the tags information",
        "operationId" : "updateTag",
        "tags" : [ "tags" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "New tag for the tag",
                    "nullable" : false
                  },
                  "parentId" : {
                    "type" : "string",
                    "description" : "Id of the new parent",
                    "nullable" : true
                  }
                }
              }
            }
          }
        },
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Updates the tag"
          }
        }
      }
    },
    "/annotations" : {
      "get" : {
        "summary" : "Fetch annotations",
        "operationId" : "fetchAnnotations",
        "tags" : [ "annotations" ],
        "description" : "Fetch user annotation using pagination",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/offsetParam"
        }, {
          "$ref" : "#/components/parameters/limitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Fetch the user annotation matching the pagination creteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Annotation"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Adds a new annotation",
        "operationId" : "addAnnotation",
        "tags" : [ "annotations" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "bookmarkId" : {
                    "type" : "string",
                    "description" : "Id of the bookmark to which annotation should be added",
                    "nullable" : false
                  },
                  "data" : {
                    "type" : "string",
                    "description" : "Base64 encoded annotation data",
                    "nullable" : false
                  },
                  "text" : {
                    "type" : "string",
                    "description" : "Annotation selection text",
                    "nullable" : false
                  },
                  "color" : {
                    "type" : "string",
                    "enum" : [ "yellow", "blue", "red" ],
                    "description" : "Color of the annotation"
                  },
                  "note" : {
                    "type" : "string",
                    "description" : "Noted attached to the annotation"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/newResource"
          },
          "404" : {
            "description" : "Missing Bookmark",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string",
                      "description" : "User undestandable error message"
                    },
                    "errorCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "System specific code for easier debugging"
                    },
                    "errorTag" : {
                      "type" : "string",
                      "description" : "Denoting the type of error. Each error code will have a different errorTag"
                    },
                    "httpCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "HTTP status code"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/annotations/{id}" : {
      "put" : {
        "summary" : "Updates the annotation",
        "operationId" : "updatedAnnotation",
        "tags" : [ "annotations" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "color" : {
                    "type" : "string",
                    "enum" : [ "yellow", "blue", "red" ],
                    "description" : "New color for the annotation",
                    "nullable" : false
                  },
                  "note" : {
                    "type" : "string",
                    "description" : "New note for the annotation",
                    "nullable" : true
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated the annotation"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the annotation",
        "operationId" : "deleteAnnotation",
        "tags" : [ "annotations" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes the annotation"
          }
        }
      }
    },
    "/import/instapaper" : {
      "post" : {
        "summary" : "Import from Instapaper",
        "operationId" : "importFromInstapaper",
        "tags" : [ "import" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "requestBody" : {
          "content" : {
            "text/html" : {
              "schema" : {
                "type" : "string",
                "description" : "HTML export file from Instapaper",
                "example" : "<!DOCTYPE html> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /> <title>Instapaper: Export</title> </head> <body>\n<h1>Unread</h1> <ol>\n<li><a href=\"https://www.iflscience.com/health-and-medicine/after-missile-alert-confirmed-as-false-alarm-this-is-how-hawaii-celebrated/\">After The Hawaii Missile Alert This Is What Happened To Pornhub Traffic</a>\n</ol>\n<h1>hj</h1> <ol>\n<li><a href=\"https://www.infoq.com/articles/kubernetes-effect\">The Kubernetes Effect</a>\n</ol>\n</body> </html> "
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted request to import from Instapaper",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "required" : [ "title", "url" ],
                    "properties" : {
                      "title" : {
                        "type" : "string",
                        "description" : "Name of the bookmark"
                      },
                      "url" : {
                        "type" : "string",
                        "description" : "URL of the bookmark"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/import/pocket" : {
      "post" : {
        "summary" : "Import from Pocket",
        "operationId" : "importFromPocket",
        "tags" : [ "import" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "requestBody" : {
          "content" : {
            "text/html" : {
              "schema" : {
                "type" : "string",
                "description" : "HTML export file from Pocket",
                "example" : "<!DOCTYPE html> <html> <!--So long and thanks for all the fish--> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /> <title>Pocket Export</title> </head> <body> <h1>Unread</h1> <ul> <li><a href=\"https://www.linkedin.com/posts/amit-shekhar-iitbhu_color-palette-api-in-android-activity-6624236527285309440-2NT0/\" time_added=\"1579897121\" tags=\"test\">LinkedIn</a></li> <li><a href=\"https://medium.com/@jasper_92248/you-should-have-named-this-article-why-michael-krasnov-stopped-using-classes-in-javascript-ba1812d84811?source=ifttt--------------1\" time_added=\"1579158329\" tags=\"ifttt,medium\">You should have named this article, ‘Why Michael Krasnov stopped using Clas</a></li> </ul>\n<h1>Read Archive</h1> <ul> <li><a href=\"https://www.iflscience.com/health-and-medicine/after-missile-alert-confirmed-as-false-alarm-this-is-how-hawaii-celebrated/\" time_added=\"1575792493\" tags=\"\">https://www.iflscience.com/health-and-medicine/after-missile-alert-confirmed-as-false-alarm-this-is-how-hawaii-celebrated/</a></li> </ul> </body> </html>"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted request to import from Pocket",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "required" : [ "title", "url" ],
                    "properties" : {
                      "title" : {
                        "type" : "string",
                        "description" : "Name of the bookmark"
                      },
                      "url" : {
                        "type" : "string",
                        "description" : "URL of the bookmark"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bundle" : {
      "get" : {
        "summary" : "Fetch Bundles",
        "operationId" : "fetchBundle",
        "tags" : [ "bundle" ],
        "description" : "Fetch bunlde using the paginated option",
        "parameters" : [ {
          "$ref" : "#/components/parameters/limitParam"
        }, {
          "$ref" : "#/components/parameters/offsetParam"
        }, {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "Load Bundle Page",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "anyOf" : [ {
                      "properties" : {
                        "bundleId" : {
                          "type" : "string",
                          "description" : "Id of the bundle"
                        },
                        "bundleName" : {
                          "type" : "string",
                          "description" : "Name df the bundle"
                        },
                        "bundleKey" : {
                          "type" : "string",
                          "description" : "Key ob which the bundle is built"
                        },
                        "type" : {
                          "type" : "string",
                          "nullable" : false,
                          "enum" : [ "Bundled", "UnBundled" ],
                          "example" : "UnBundled",
                          "description" : "Type of Bundle"
                        },
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "$ref" : "#/components/schemas/Bookmark"
                          },
                          "description" : "Bookmark in teh bundle"
                        },
                        "total" : {
                          "type" : "number",
                          "description" : "Total Items in the bundle"
                        }
                      }
                    }, {
                      "properties" : {
                        "type" : {
                          "type" : "string",
                          "nullable" : false,
                          "example" : "UnBundled",
                          "description" : "Type of Bundle"
                        },
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "$ref" : "#/components/schemas/Bookmark"
                          },
                          "description" : "Bookmark in teh bundle"
                        },
                        "total" : {
                          "type" : "number",
                          "description" : "Total Items in the bundle"
                        }
                      }
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bundle/{bundleKey}/{id}" : {
      "get" : {
        "summary" : "Get Bundle Bookmark",
        "operationId" : "getBundleBookmark",
        "tags" : [ "bundle" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        }, {
          "$ref" : "#/components/parameters/limitParam"
        }, {
          "$ref" : "#/components/parameters/offsetParam"
        }, {
          "$ref" : "#/components/parameters/ByIdParam"
        }, {
          "in" : "path",
          "name" : "bundleKey",
          "description" : "Key on which bundle is built",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Load Bundle Bookmark Page",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Bookmark"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/me" : {
      "get" : {
        "summary" : "Get User Info",
        "operationId" : "whoAmIm",
        "tags" : [ "user" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/authHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user" : {
      "post" : {
        "summary" : "Create User Profile",
        "operationId" : "createUserProfile",
        "description" : "Created the user profile after the user has been created by the auth service",
        "tags" : [ "private", "user" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "string",
                    "description" : "Id of the user"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the user"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "string",
                      "description" : "Id of the newly created user"
                    }
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "User already exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string",
                      "description" : "User undestandable error message",
                      "example" : "User already exist"
                    },
                    "errorCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "System specific code for easier debugging",
                      "example" : 1007
                    },
                    "errorTag" : {
                      "type" : "string",
                      "description" : "Denoting the type of error. Each error code will have a different errorTag",
                      "example" : "DUPLICATE_RESOURCE_ERROR"
                    },
                    "httpCode" : {
                      "type" : "number",
                      "format" : "int32",
                      "description" : "HTTP status code",
                      "example" : 409
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "ByIdParam" : {
        "in" : "path",
        "name" : "id",
        "required" : true,
        "description" : "Id of the resource",
        "schema" : {
          "type" : "string"
        }
      },
      "authHeader" : {
        "name" : "x-userid",
        "in" : "header",
        "description" : "Authentication",
        "required" : true,
        "schema" : {
          "type" : "string",
          "default" : "jhoUcAXnsNYNsZFNSmxVAoHWbxa2"
        }
      },
      "limitParam" : {
        "name" : "limit",
        "in" : "query",
        "description" : "Maximum number of items to return.",
        "required" : false,
        "schema" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 1,
          "maximum" : 100,
          "default" : 20
        }
      },
      "offsetParam" : {
        "name" : "offset",
        "in" : "query",
        "description" : "Number of items to skip before returning the results.",
        "required" : false,
        "schema" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0,
          "default" : 0
        }
      }
    },
    "responses" : {
      "newResource" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "description" : "New Resource Id"
                }
              }
            }
          }
        },
        "description" : "Successfully created newly resource"
      }
    },
    "schemas" : {
      "Bookmark" : {
        "type" : "object",
        "required" : [ "id", "givenArticleUrl" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : false
          },
          "givenArticleUrl" : {
            "type" : "string",
            "readOnly" : true,
            "format" : "uri",
            "nullable" : false
          },
          "givenArticleTitle" : {
            "type" : "string",
            "readOnly" : true,
            "nullable" : true
          },
          "isLiked" : {
            "type" : "boolean",
            "nullable" : true
          },
          "likeStatusChangedOn" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "isArchived" : {
            "type" : "boolean",
            "nullable" : false
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "message" : {
            "type" : "string",
            "nullable" : true
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false,
            "readOnly" : true
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false,
            "readOnly" : true
          },
          "title" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "url" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "excerpt" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "lang" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "leadImageUrl" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          },
          "isArticle" : {
            "type" : "boolean",
            "nullable" : false,
            "readOnly" : true
          },
          "wordCount" : {
            "type" : "number",
            "readOnly" : true,
            "nullable" : false
          },
          "timeToRead" : {
            "type" : "number",
            "nullable" : false,
            "readOnly" : false
          },
          "images" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Image"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "publisher" : {
            "$ref" : "#/components/schemas/Publisher"
          },
          "authors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Author"
            }
          }
        }
      },
      "Image" : {
        "type" : "object",
        "required" : [ "src" ],
        "properties" : {
          "src" : {
            "type" : "string",
            "nullable" : false,
            "format" : "uri",
            "readOnly" : true
          },
          "height" : {
            "type" : "string",
            "format" : "int32",
            "nullable" : true,
            "readOnly" : true
          },
          "width" : {
            "type" : "string",
            "format" : "int32",
            "nullable" : true,
            "readOnly" : true
          },
          "caption" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          }
        }
      },
      "Tag" : {
        "type" : "object",
        "required" : [ "id", "name" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : false
          },
          "name" : {
            "type" : "string",
            "nullable" : false
          },
          "parentId" : {
            "type" : "string",
            "nullable" : true
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false,
            "readOnly" : true
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : false,
            "readOnly" : true
          }
        }
      },
      "Publisher" : {
        "type" : "object",
        "required" : [ "domain" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "logo" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true,
            "format" : "uri"
          },
          "domain" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true,
            "format" : "hostname"
          },
          "name" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true
          }
        }
      },
      "Author" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "nullable" : false,
            "readOnly" : true
          },
          "url" : {
            "type" : "string",
            "nullable" : true,
            "readOnly" : true,
            "format" : "uri"
          },
          "name" : {
            "type" : "string",
            "nullable" : false
          }
        }
      },
      "Annotation" : {
        "type" : "object",
        "required" : [ "id", "data", "text", "color" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of the annotation",
            "nullable" : false
          },
          "data" : {
            "type" : "string",
            "description" : "Base64 encoded annoatation data",
            "nullable" : false
          },
          "text" : {
            "type" : "string",
            "description" : "Annotation selected text",
            "nullable" : false
          },
          "note" : {
            "type" : "string",
            "description" : "Noted added to the annoatation",
            "nullable" : true
          },
          "color" : {
            "type" : "string",
            "description" : "Color of the annotation",
            "enum" : [ "yellow", "blue", "red" ],
            "nullable" : false,
            "default" : "yellow"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "User Id",
            "nullable" : false
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the user",
            "nullable" : false
          },
          "avatar" : {
            "type" : "string",
            "description" : "Avatar Url",
            "nullable" : true
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      }
    }
  }
}