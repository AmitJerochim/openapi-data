{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "This describes the API provided by MQS",
    "version" : "0.3",
    "title" : "MQS API",
    "contact" : {
      "email" : "jonas.scholl@lingumatiker.de"
    },
    "license" : {
      "name" : "BSD 3-clause \"New\" or \"Revised\" License",
      "url" : "https://github.com/ajscholl/mqs/blob/master/LICENSE"
    }
  },
  "tags" : [ {
    "name" : "queues",
    "description" : "Managing and listing available queues"
  }, {
    "name" : "messages",
    "description" : "Publishing, consuming and deleting messages"
  } ],
  "paths" : {
    "/queues/{queueName}" : {
      "parameters" : [ {
        "in" : "header",
        "name" : "X-TRACE-ID",
        "description" : "UUID used to trace a single request through various systems.",
        "required" : false,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "33526d1f-eb66-447b-872c-aae86b6774b4"
        }
      }, {
        "in" : "path",
        "name" : "queueName",
        "description" : "Name of the queue to operate on",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "tasks"
        }
      } ],
      "get" : {
        "tags" : [ "queues" ],
        "summary" : "Fetch information about the configuration as well as status of a queue.",
        "operationId" : "describeQueue",
        "description" : "Looks up the configuration of a queue as well as how many messages are currently\nstored in the queue, how old the oldest message is and how many messages are\ncurrently visible.\n",
        "responses" : {
          "200" : {
            "description" : "The server found the queue and returned some description and status about it.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueueDescription"
                }
              }
            }
          },
          "404" : {
            "description" : "A queue with the given name was not found.\nYou first have to create a queue with this name.\n"
          },
          "500" : {
            "description" : "The server failed to fetch information about the queue.\nTrying again has a high chance of still not working.\n"
          },
          "503" : {
            "description" : "The server failed to acquire required resources to describe the queue.\nTry again with exponential backoff.\n"
          }
        }
      },
      "post" : {
        "tags" : [ "queues" ],
        "summary" : "Update the configuration of an existing queue.",
        "operationId" : "updateQueue",
        "description" : "Overwrite the configuration of an existing queue.\nReturns the new configuration.\n",
        "responses" : {
          "200" : {
            "description" : "The queue was successfully updated and can now be used.\nMessages will not become visible if you reduce the visibility timeout\nand a message is already hidden, it will not be moved to dead letter\nqueues or deleted until you receive the message again.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueueConfigOutput"
                }
              }
            }
          },
          "400" : {
            "description" : "One or multiple parameters did not validate.\nBody contains an error response.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "A queue with the given name does not exist.\nUse PUT to create the queue instead.\n"
          },
          "500" : {
            "description" : "The server failed to update the queue.\nTrying again has a high chance of still not working.\n"
          },
          "503" : {
            "description" : "The server failed to acquire required resources to update the queue.\nTry again with exponential backoff.\n"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QueueConfig"
              }
            }
          },
          "description" : "New configuration of the queue."
        }
      },
      "put" : {
        "tags" : [ "queues" ],
        "summary" : "Create a new queue.",
        "operationId" : "createQueue",
        "description" : "Create the configuration for a new queue.\nDoes not overwrite existing queues.\nReturns the new configuration.\n",
        "responses" : {
          "201" : {
            "description" : "The queue was successfully created and can now be used.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueueConfigOutput"
                }
              }
            }
          },
          "400" : {
            "description" : "One or multiple parameters did not validate.\nBody contains an error response.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "409" : {
            "description" : "A queue with the given name does already exist.\nUse POST to update the queue instead.\n"
          },
          "500" : {
            "description" : "The server failed to create the queue.\nTrying again has a high chance of still not working.\n"
          },
          "503" : {
            "description" : "The server failed to acquire required resources to create the queue.\nTry again with exponential backoff.\n"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/QueueConfig"
              }
            }
          },
          "description" : "Configuration of the queue to create."
        }
      },
      "delete" : {
        "tags" : [ "queues" ],
        "summary" : "Delete an existing queue.",
        "operationId" : "deleteQueue",
        "description" : "Delete the configuration of a queue and all messages currently stored in it.\nReturns the old configuration.\n",
        "responses" : {
          "200" : {
            "description" : "The queue was successfully deleted and can no longer be used.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueueConfigOutput"
                }
              }
            }
          },
          "404" : {
            "description" : "The specified queue did not exist.\nYou might want to treat this as success if you only wanted to assert the non-existence of a queue.\n"
          },
          "500" : {
            "description" : "The server failed to delete the queue.\nTrying again has a high chance of still not working.\n"
          },
          "503" : {
            "description" : "The server failed to acquire required resources to delete the queue.\nTry again with exponential backoff.\n"
          }
        }
      }
    },
    "/queues" : {
      "parameters" : [ {
        "in" : "header",
        "name" : "X-TRACE-ID",
        "description" : "UUID used to trace a single request through various systems.",
        "required" : false,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "33526d1f-eb66-447b-872c-aae86b6774b4"
        }
      } ],
      "get" : {
        "tags" : [ "queues" ],
        "summary" : "List queues.",
        "operationId" : "listQueue",
        "description" : "List existint queues.\nUse the parameters limit and offset to consume the queues in single pages.\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "offset",
          "description" : "Number of queues to skip before returning results.",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "Maximum number of results to return.",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The server procesed your request and returned a response.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QueueList"
                }
              }
            }
          },
          "400" : {
            "description" : "You did not specify numbers for offset or limit.\n"
          },
          "500" : {
            "description" : "The server failed to list queues.\nTrying again has a high chance of still not working.\n"
          },
          "503" : {
            "description" : "The server failed to acquire required resources to list queues.\nTry again with exponential backoff.\n"
          }
        }
      }
    },
    "/messages/{queueName}" : {
      "parameters" : [ {
        "in" : "header",
        "name" : "X-TRACE-ID",
        "description" : "UUID used to trace a single request through various systems.",
        "required" : false,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "33526d1f-eb66-447b-872c-aae86b6774b4"
        }
      }, {
        "in" : "path",
        "name" : "queueName",
        "description" : "Name of the queue to operate on",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "tasks"
        }
      } ],
      "get" : {
        "tags" : [ "messages" ],
        "summary" : "Receive message.",
        "operationId" : "receiveMessages",
        "description" : "Get up to a specified amount of messages.\nReturned messages will not be visible until timeout configured in queue expires.\nIf specified, blocks until either messages may be available or a timeout expires.\n",
        "parameters" : [ {
          "in" : "header",
          "name" : "X-MQS-MAX-MESSAGES",
          "description" : "Number of messages to return. Defaults to 1.",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "in" : "header",
          "name" : "X-MQS-MAX-WAIT-TIME",
          "description" : "Maximum number of seconds to wait until messages are available. Defaults to 0.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "seconds"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A message was found and is returned in the response.\nThe response body consists of whatever was published as a message.\nIf multiple messages are returned, the response is encoded as\n\"multipart/mixed\" and each part of the multipart response contains\nthe specified response headers.\n",
            "headers" : {
              "X-MQS-MESSAGE-ID" : {
                "schema" : {
                  "type" : "string",
                  "format" : "uuid",
                  "example" : "a7d46b8e-32fe-4d35-a3af-74f9a39da2dc"
                },
                "description" : "Id of the message returned."
              },
              "X-TRACE-ID" : {
                "schema" : {
                  "type" : "string",
                  "format" : "uuid",
                  "example" : "33526d1f-eb66-447b-872c-aae86b6774b4"
                },
                "description" : "Value of X-TRACE-ID header during message publish"
              },
              "Content-Type" : {
                "schema" : {
                  "type" : "string",
                  "example" : "application/json"
                },
                "description" : "Content type set during message creation."
              },
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string",
                  "example" : "gzip"
                },
                "description" : "Content encoding set during message creation."
              }
            }
          },
          "204" : {
            "description" : "No message was found, try again after some time or publishing a message.\n"
          },
          "404" : {
            "description" : "The specified queue did not exist.\n"
          },
          "500" : {
            "description" : "The server failed to receive a message.\nTrying again has a high chance of still not working.\n"
          },
          "503" : {
            "description" : "The server failed to acquire required resources to receive a message.\nTry again with exponential backoff.\n"
          }
        }
      },
      "post" : {
        "tags" : [ "messages" ],
        "summary" : "Publish messages.",
        "operationId" : "publishMessages",
        "description" : "Write the given messages to the queue.\nEither publishes a single message or, if the content type \"multipart/mixed\" is used,\neach single multipart part will be considered as a separate message.\nAdditional headers can be set, but will be ignored.\n",
        "parameters" : [ {
          "in" : "header",
          "name" : "Content-Type",
          "description" : "Content type of the data published. Will be stored and returned upon receive. Defaults to \"application/octet-stream\".",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "header",
          "name" : "Content-Encoding",
          "description" : "Content encoding of the data published. Will be stored and returned upon received if it was specified upon publishing.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The operation suceeded, but no new message was inserted\nbecause all messages did already exist.\n"
          },
          "201" : {
            "description" : "The operation suceeded and at least one new message was published.\n"
          },
          "404" : {
            "description" : "The specified queue did not exist.\n"
          },
          "500" : {
            "description" : "The server failed to publish the message(s).\nTrying again has a high chance of still not working.\n"
          },
          "503" : {
            "description" : "The server failed to acquire required resources to publish a message.\nTry again with exponential backoff.\n"
          }
        }
      }
    },
    "/messages/{messageId}" : {
      "parameters" : [ {
        "in" : "header",
        "name" : "X-TRACE-ID",
        "description" : "UUID used to trace a single request through various systems.",
        "required" : false,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "33526d1f-eb66-447b-872c-aae86b6774b4"
        }
      } ],
      "delete" : {
        "tags" : [ "messages" ],
        "summary" : "Delete a message.",
        "operationId" : "deleteMessage",
        "description" : "Delete a single message (i.e., acknowledge it).\n",
        "parameters" : [ {
          "in" : "path",
          "name" : "messageId",
          "description" : "Identifier of the message to delete",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "a7d46b8e-32fe-4d35-a3af-74f9a39da2dc"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The message was deleted and will no longer be returned.\n"
          },
          "400" : {
            "description" : "The specified message id is not a valid uuid.\n"
          },
          "404" : {
            "description" : "The specified message does not exist.\nYou might want to treat this as success if you only wanted\nto assert the non-existence of a message.\n"
          },
          "500" : {
            "description" : "The server failed to delete the message.\nTrying again has a high chance of still not working.\n"
          },
          "503" : {
            "description" : "The server failed to acquire required resources to delete the message.\nTry again with exponential backoff.\n"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "QueueConfig" : {
        "type" : "object",
        "required" : [ "retention_timeout", "message_delay", "message_deduplication" ],
        "properties" : {
          "redrive_policy" : {
            "$ref" : "#/components/schemas/QueueRedrivePolicy"
          },
          "retention_timeout" : {
            "type" : "integer",
            "format" : "seconds",
            "example" : 3600
          },
          "message_delay" : {
            "type" : "integer",
            "format" : "seconds",
            "example" : 30
          },
          "message_deduplication" : {
            "type" : "boolean",
            "example" : false
          }
        }
      },
      "QueueRedrivePolicy" : {
        "type" : "object",
        "required" : [ "max_receives", "dead_letter_queue" ],
        "properties" : {
          "max_receives" : {
            "type" : "integer",
            "example" : 5
          },
          "dead_letter_queue" : {
            "type" : "string",
            "example" : "exampleQueue"
          }
        }
      },
      "QueueConfigOutput" : {
        "allOf" : [ {
          "type" : "object",
          "required" : [ "name" ],
          "properties" : {
            "name" : {
              "type" : "string",
              "example" : "exampleQueue"
            }
          }
        }, {
          "$ref" : "#/components/schemas/QueueConfig"
        } ]
      },
      "QueueDescription" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueueConfigOutput"
        }, {
          "type" : "object",
          "required" : [ "status" ],
          "properties" : {
            "status" : {
              "$ref" : "#/components/schemas/QueueStatus"
            }
          }
        } ]
      },
      "QueueStatus" : {
        "type" : "object",
        "required" : [ "messages", "visible_messages", "oldest_message_age" ],
        "properties" : {
          "messages" : {
            "type" : "integer",
            "example" : 10
          },
          "visible_messages" : {
            "type" : "integer",
            "example" : 5
          },
          "oldest_message_age" : {
            "type" : "integer",
            "format" : "seconds",
            "example" : 300
          }
        }
      },
      "QueueList" : {
        "type" : "object",
        "required" : [ "total", "queues" ],
        "properties" : {
          "totoal" : {
            "type" : "number",
            "example" : 3
          },
          "queues" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QueueConfigOutput"
            }
          }
        }
      },
      "Error" : {
        "type" : "object",
        "required" : [ "error" ],
        "properties" : {
          "error" : {
            "type" : "string",
            "example" : "You failed to provide the foo parameter"
          }
        }
      }
    }
  }
}