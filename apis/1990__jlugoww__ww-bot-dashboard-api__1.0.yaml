openapi: 3.0.0
info:
  version: '1.0'
  title: 'Wovenware Bot Dashboard API'
  description: 'Api definition for Wovenware chatbot dashboard.'
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jlugoww/ww-bot-dashboard-api/1.0
tags:
  - name: admin
    description: Administrative operations
  - name: authentication
    description: Operations about authentication 
  - name: user
    description: Operations about users
  - name: dashboard
    description: Operations about chatbot dashboard
paths: 
  "/audit":
    post:
      tags:
        - admin
      summary: Create audit log
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditLog"
      responses:
        "200":
          description: OK
        "204":
          description: Successfully created audit log
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/version":
    get:
      tags:
        - admin
      summary: Get version
      responses:
        "200":
          description: Successfully retrieved version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/authentication/login":
    post:
      tags:
        - authentication
      summary: Authentication
      requestBody:
        $ref: "#/components/requestBodies/Authenticate"
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authenticate"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
      security: []
  "/authentication/logout/{userId}":
    post:
      tags:
        - authentication
      summary: Logout authenticated user
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successfully logged out
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/user/{userId}":
    get:
      tags:
        - user
      summary: Get user by id
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - user
      summary: Update user
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        "200":
          description: OK
        "204":
          description: Successfully updated user
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - user
      summary: Mark user for deletion
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
          "200":
            description: OK
          "204":
            description: User successfully marked for deletion
          "401":
            $ref: "#/components/responses/Unauthorized"
          "404":
            $ref: "#/components/responses/NotFound"
  "/user":
    post:
      tags:
        - user
      summary: Create user
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        "200":
          description: OK
        "204":
          description: Successfully created user
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/users":
    get:
      tags: 
        - user
      summary: Get list of users
      parameters:
        - name: excludeMarkedForDeletion
          in: query
          description: excludeMarkedForDeletion
          required: false
          schema:
            type: string
            enum:
              - YES
              - NO
            default: YES
        - name: page
          in: query
          description: page
          required: false
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: pageSize
          required: false
          schema:
            type: integer
            format: int32
        - name: search
          in: query
          description: search
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: sortBy
          required: false
          schema:
            type: string
            enum:
              - LASTNAME
              - FIRSTNAME
              - EMAIL
            default: LASTNAME
        - name: sortDirection
          in: query
          description: sortDirection
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: ASC
      responses:
        "200":
          description: Successfully retrieved user list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/Unauthorized"
  "/user/{userId}/changePassword":
    post:
      tags:
        - user
      summary: Change password of an user
      parameters: 
        - name: userId
          in: path
          description: userId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/Authenticate"
      responses:
        "200":
          description: OK
        "204":
          description: Successfully changed password
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/dashboard/leads":
    post:
      tags: 
       - dashboard
      summary: Get Dashboard
      requestBody:
        $ref: "#/components/requestBodies/BotMetaData"
      responses:
        "200":
          description: Successfully retrieved dashboard leads
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Leads"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  "/dashboard/metrics":
    post:
      tags: 
       - dashboard
      summary: Get Dashboard
      requestBody:
        $ref: "#/components/requestBodies/BotMetaData"
      responses:
        "200":
          description: Successfully retrieved dashboard metrics
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
components:
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    Authenticate:
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authenticate"
    BotMetaData:
      content:
          application/json:
            schema:
              $ref: "#/components/schemas/BotMetaData"
  schemas:
    AuditLog:
      type: object
      properties:
        auditType:
          type: string
          enum:
            - logout
            - login
            - create_user
            - create_user_self
            - mark_for_deletion
            - update_user
            - change_password
            - add_user_to_role
            - create_group
            - mark_group_for_deletion
            - update_group
        userId:
          type: integer
          format: int64
          example: 10
        notes:
          type: string
        createBy:
          type: string
        createdDate:
          type: string
          format: date-time
          example: "2019-01-01T09:12:33.001Z"
    BotMetaData:
      type: object
      required:
        - userId
        - botId
        - fromDate
        - toDate
      properties:
        userId:
          type: integer
          format: int64
          example: 12
        botId:
          type: integer
          format: int64
          example: 4
        fromDate:
          type: string
          format: date-time
          example: "2019-01-01T09:12:33.001Z"
        toDate:
          type: string
          format: date-time
          example: "2019-01-05T09:12:33.001Z"
    LeadMetaData:
      type: object 
      properties:
        BotMetaData:
          $ref: "#/components/schemas/BotMetaData"
        PageMetaData:
          $ref: "#/components/schemas/PageMetaData"
    Authenticate:
      type: object
      required:
        - password
        - username
      properties:
        newPassword:
          type: string
          example: Passw0rld!
        password:
          type: string
          example: Passw0rld!
        username:
          type: string
          example: email@email.com
        token:
          type: string
        userId:
          type: integer
          format: int64
          example: 10
    PageMetaData:
      type: object
      properties:
        expectedSize:
          type: integer
          format: int32
          example: 6
        page:
          type: integer
          format: int32
          example: 1
        size:
          type: integer
          format: int32
          example: 6
        totalElements:
          type: integer
          format: int32
          example: 30
        totalPages:
          type: integer
          format: int32
          example: 3
    Leads:
      type: object
      properties:
        metaData:
          $ref: "#/components/schemas/PageMetaData"
        leads:
          type: array
          items:
            $ref: "#/components/schemas/Lead"
    Lead:
      type: object
      properties:
        leadId:
          type: integer
          format: int64
          example: 12
        createdDate:
          type: string
          format: date-time
          example: "2019-01-01T09:12:33.001Z"
        resolvedDate:
          type: string
          format: date-time
          example: "2019-01-05T09:12:33.001Z"
        resolvedBy:
          type: integer
          format: int64
          example: 12
        comment:
          type: string
          example: "Issue with good bye questions."
    Bots:
      type: array
      items:
        $ref: "#/components/schemas/Bot"
    Bot:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        description:
          type: string
          example: Corporation chatbot dedicated to answer operation questions. 
        name:
          type: string
          example: Operation Chatbot
        url:
          type: string
          example: http.example.com
        locked:
          type: boolean
          example: false
    Version:
      type: object
      properties:
        version: 
          type: string
          example: 1.0
    Users:
      type: object
      properties:
        metaData: 
          $ref: "#/components/schemas/PageMetaData"
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5
        firstName:
          type: string
          example: Pablo
        lastName:
          type: string
          example: Marmol
        email:
          type: string
          example: p.marmol@email.com
        password:
          type: string
        idAdmin:
          type: boolean
          example: true
        createdDate:
          type: string
          format: date-time
          example: "2019-01-01T09:12:33.001Z"
        failedAttemps:
          type: integer
          format: int32
        bots:
          $ref: "#/components/schemas/Bots"
        locked:
          type: boolean
          example: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Access toke is missing or invalid
    NotFound: 
      description: The specified resource was not found
    BadRequest:
      description: Bad request
security: 
  - bearerAuth: []
