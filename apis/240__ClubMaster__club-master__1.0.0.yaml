openapi: 3.0.0
info:
  version: 1.0.0
  title: ClubMaster
  license:
    name: MIT
  contact:
    name: Michael Holm
    url: 'https://www.clubmaster.org'
    email: mh@clubmaster.dk
  termsOfService: 'https://www.clubmaster.org/term'
  description: API description for ClubMaster
servers:
  - url: 'https://app.clubmaster.org/api/v1'
paths:
  /users:
    get:
      operationId: get-users
      parameters: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
      tags:
        - users
      description: Get users
      summary: Get users
    post:
      tags:
        - users
      description: Create user
      summary: Create user
      operationId: post-user
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
        description: Created
    parameters: []
  '/users/{id}':
    get:
      operationId: get-user-by-id
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: Update user
      summary: Update user
      tags:
        - users
      parameters: []
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ''
    post:
      operationId: post-user-by-id
      responses:
        '200':
          description: OK
      description: Update user
      summary: Update user
      tags:
        - users
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
    delete:
      operationId: delete-user-by-id
      responses:
        '200':
          description: OK
      description: Delete user
      summary: Delete user
      tags:
        - users
      parameters: []
  /memberships:
    get:
      operationId: get-memberships
      parameters: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memberships'
      tags:
        - memberships
      description: Get memberships
      summary: Get memberships
    post:
      tags:
        - memberships
      description: Create membership
      summary: Create membership
      operationId: post-membership
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipPost'
        description: Created
    parameters: []
  '/memberships/{id}':
    get:
      operationId: get-membership-by-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
      description: Update membership
      summary: Update membership
      tags:
        - memberships
      parameters: []
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ''
    post:
      operationId: update-membership-by-id
      responses:
        '200':
          description: OK
      description: Update membership
      summary: Update membership
      tags:
        - memberships
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipPost'
    delete:
      operationId: delete-membership-by-id
      responses:
        '200':
          description: OK
      description: Delete membership
      summary: Delete membership
      tags:
        - memberships
      parameters: []
  /groups:
    get:
      operationId: get-groups
      parameters: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
      tags:
        - groups
      description: Get groups
      summary: Get groups
    post:
      tags:
        - groups
      description: Create group
      summary: Create group
      operationId: post-group
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPost'
    parameters: []
  '/groups/{id}':
    get:
      operationId: get-group-by-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      description: Update group
      summary: Update group
      tags:
        - groups
      parameters: []
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: ''
    post:
      operationId: update-group-by-id
      responses:
        '200':
          description: OK
      description: Update group
      summary: Update group
      tags:
        - groups
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPost'
    delete:
      operationId: delete-group-by-id
      responses:
        '200':
          description: OK
      description: Delete group
      summary: Delete group
      tags:
        - groups
      parameters: []
  /events:
    get:
      tags:
        - events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
      operationId: get-events
      description: Get events
      summary: Get events
    post:
      operationId: post-event
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      description: Create event
      summary: Create event
      tags:
        - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPost'
            examples: {}
          application/xml:
            schema:
              type: object
              properties: {}
  '/events/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      tags:
        - events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: object
                properties: {}
      operationId: get-event-by-id
      description: Get event
      summary: Get event
    post:
      operationId: update-event-by-id
      responses:
        '200':
          description: OK
      description: Update event
      summary: Update event
      tags:
        - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPost'
    delete:
      operationId: delete-event-by-id
      responses:
        '200':
          description: OK
      description: Delete event
      summary: Delete event
      tags:
        - events
  /facilities:
    get:
      tags:
        - facilities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facilities'
      operationId: get-facilities
      description: Get facilities
      summary: Get facilities
    post:
      operationId: post-facility
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facility'
      description: Create facility
      summary: Create facility
      tags:
        - facilities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacilityPost'
  '/facilities/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      tags:
        - facilities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Facility'
      operationId: get-facility-by-id
      description: Get facilities
      summary: Get facilities
    post:
      operationId: update-facility-by-id
      responses:
        '200':
          description: OK
      description: Update facility
      summary: Update facility
      tags:
        - facilities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacilityPost'
      parameters: []
    delete:
      operationId: delete-facility-by-id
      responses:
        '200':
          description: OK
      description: Delete facility
      summary: Delete facility
      tags:
        - facilities
  /products:
    get:
      tags:
        - products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
      operationId: get-products
      description: Get products
      summary: Get products
    post:
      operationId: post-product
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      description: Create product
      summary: Create product
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPost'
  '/products/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      tags:
        - products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: get-product-by-id
      description: Get product
      summary: Get product
    post:
      operationId: update-product-by-id
      responses:
        '200':
          description: OK
      description: Update product
      summary: Update product
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPost'
        description: ''
    delete:
      operationId: delete-product-by-id
      responses:
        '200':
          description: OK
      description: Delete product
      summary: Delete product
      tags:
        - products
  /vats:
    get:
      tags:
        - vats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vats'
      operationId: get-vats
      description: Get vats
      summary: Get vats
    post:
      operationId: post-vat
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
      description: Create vat
      summary: Create vat
      tags:
        - vats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VatPost'
        description: ''
  '/vats/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      tags:
        - vats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
      operationId: get-vat-by-id
      description: Get vat
      summary: Get vat
    post:
      operationId: update-vat-by-id
      responses:
        '200':
          description: OK
      description: Update vat
      summary: Update vat
      tags:
        - vats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VatPost'
        description: ''
    delete:
      operationId: delete-vat-by-id
      responses:
        '200':
          description: OK
      description: Delete vat
      summary: Delete vat
      tags:
        - vats
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname:
          type: string
      required:
        - id
    UserPost:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
      required:
        - id
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Facility:
      title: Facility
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    FacilityPost:
      title: Facility
      type: object
      properties:
        name:
          type: string
    Facilities:
      title: Facilities
      type: array
      items:
        $ref: '#/components/schemas/Facility'
    Group:
      title: Group
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    GroupPost:
      title: Group
      type: object
      properties:
        name:
          type: string
    Groups:
      title: Groups
      type: array
      items:
        $ref: '#/components/schemas/Group'
    Membership:
      title: Membership
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    MembershipPost:
      title: Membership
      type: object
      properties:
        name:
          type: string
    Memberships:
      title: Memberships
      type: array
      items:
        $ref: '#/components/schemas/Membership'
    Vat:
      title: Vat
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    VatPost:
      title: Vat
      type: object
      properties:
        name:
          type: string
    Vats:
      title: Vats
      type: array
      items:
        $ref: '#/components/schemas/Vat'
    Event:
      title: Event
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    EventPost:
      title: Event
      type: object
      properties:
        name:
          type: string
    Events:
      title: Events
      type: array
      items:
        $ref: '#/components/schemas/Event'
    Product:
      title: Product
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ProductPost:
      title: Product
      type: object
      properties:
        name:
          type: string
    Products:
      title: Products
      type: array
      items:
        $ref: '#/components/schemas/Product'
  securitySchemes:
    ApiKey:
      type: apiKey
      in: query
      name: api
security:
  - ApiKey: []
tags:
  - name: users
    description: Everything about your Users
  - name: groups
    description: Everything about your Groups
  - name: products
    description: Everything about your Products
  - name: events
    description: Everything about your Events
  - name: memberships
    description: Everything about your Memberships
  - name: facilities
    description: Everything about your Facilities
  - name: vats
    description: Everything about your Vats
