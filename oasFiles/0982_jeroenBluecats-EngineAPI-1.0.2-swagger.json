{
  "openapi" : "3.0.2",
  "info" : {
    "title" : "BlueCats Loop Location Engine",
    "version" : "1.0.2",
    "description" : "The Location Engine computes the location of a Device.",
    "contact" : {
      "name" : "BlueCats API Support",
      "url" : "someurl.com/support",
      "email" : "jeroen@bluecats.com"
    }
  },
  "paths" : {
    "/api/configFiles" : {
      "get" : {
        "summary" : "Returns all ConfigFile objects that the user has access to.\n",
        "operationId" : "getConfigFiles",
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "Ids to filter by",
          "required" : false,
          "style" : "form",
          "schema" : {
            "type" : "array",
            "items" : {
              "description" : "(Id) Unique identifier of an object.",
              "type" : "string",
              "format" : "string",
              "example" : "myObject",
              "minLength" : 2,
              "maxLength" : 32
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to return",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns a ConfigFile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/configFile"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Creates a new ConfigFile in ConfigFiles. Duplicate Ids are not allowed.",
        "operationId" : "addConfigFile",
        "requestBody" : {
          "description" : "ConfigFile to add to ConfigFiles.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "id" ],
                "properties" : {
                  "id" : {
                    "description" : "(Id) Unique identifier of an object.",
                    "type" : "string",
                    "format" : "string",
                    "example" : "myObject",
                    "minLength" : 2,
                    "maxLength" : 32
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ConfigFile response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/configFile"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Upload a ConfigFile specification.",
        "operationId" : "setConfigFile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the target ConfigFile",
          "required" : true,
          "schema" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          }
        } ],
        "requestBody" : {
          "description" : "Requires updated ConfigFile object.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/configFile"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ConfigFile response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/configFile"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/configFiles/{id}" : {
      "get" : {
        "summary" : "Returns a ConfigFile based on a single Id.",
        "operationId" : "getConfigFile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of ConfigFile to fetch",
          "required" : true,
          "schema" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ConfigFile response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/configFile"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a single ConfigFile based on the Id supplied.",
        "operationId" : "deleteConfigFile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of ConfigFile to delete",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ConfigFile deleted"
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "error" : {
        "type" : "object",
        "required" : [ "code", "message" ],
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "configFile" : {
        "description" : "(object) Device configuration, Zones, and Engine parameters",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "notes" : {
            "description" : "(string) Some description, note, or annotation about the object.",
            "type" : "string",
            "example" : "Some description of the object"
          },
          "solutions" : {
            "description" : "(array) Defines a list of combinations of solver settings, filters, and zones.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/solution"
            }
          }
        }
      },
      "solution" : {
        "description" : "(object) Defines a combination of solver settings, filters, and zones.",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "notes" : {
            "description" : "(string) Some description, note, or annotation about the object.",
            "type" : "string",
            "example" : "Some description of the object"
          },
          "floorplans" : {
            "description" : "(array) Location background view such as a floorplan with its location and orientation.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/floorplan"
            }
          },
          "zones" : {
            "description" : "(array) Defines areas that can serve as input for the location engine.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/zone"
            }
          },
          "surveyPoints" : {
            "description" : "(array) List of Survey Points.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/surveyPoint"
            }
          },
          "readerGroups" : {
            "description" : "(array) Group-specific settings and its members.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/readerGroup"
            }
          },
          "tagGroups" : {
            "description" : "(array) Group-specific settings and its members.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/tagGroup"
            }
          },
          "calibrationTags" : {
            "description" : "(array) Device-specific settings for calibration tags.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/tag"
            }
          },
          "solvers" : {
            "description" : "(array) Algorithm and settings of the location engine solver.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/solver"
            }
          },
          "engineSettings" : {
            "$ref" : "#/components/schemas/engineSettings"
          },
          "solutionTemplate" : {
            "$ref" : "#/components/schemas/solutionTemplate"
          }
        }
      },
      "solutionTemplate" : {
        "description" : "(object) Defines a combination of default solver settings and filters.",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "version" : {
            "description" : "(string) Version code.",
            "type" : "string"
          },
          "notes" : {
            "description" : "(string) Some description, note, or annotation about the object.",
            "type" : "string",
            "example" : "Some description of the object"
          },
          "solverTemplates" : {
            "description" : "(array) Default solver configurations used for common tracking scenarios",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/solver"
            }
          },
          "positionFilters" : {
            "description" : "(array) Removes jitter in subsequent locates.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/positionFilter"
            }
          },
          "metaProcessors" : {
            "description" : "(array) Additional computation or tasks.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/metaProcessor"
            }
          }
        }
      },
      "readerGroup" : {
        "description" : "(object) Group-specific settings and its members.",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "floorplanId" : {
            "description" : "(Id) User-defined floor plan id",
            "type" : "string",
            "format" : "string",
            "minLength" : 2,
            "maxLength" : 32,
            "example" : "myFloorplan"
          },
          "readers" : {
            "description" : "(array) Device-specific settings like the position of a reader.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/reader"
            }
          }
        }
      },
      "tagGroup" : {
        "description" : "(object) Group-specific settings and its members.",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "tags" : {
            "description" : "(array) Device-specific settings for tracked tags.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/tag"
            }
          },
          "positionFilters" : {
            "description" : "(array) Removes jitter in subsequent locates.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/positionFilter"
            }
          }
        }
      },
      "floorplan" : {
        "description" : "(object) Floorplans are typically used by a GUI. Floor plan may be a background image with corresponding scaling from pixels to meters. Scale is provided or a tracking area in meters. By default the origin (0,0) is the center of the image. An origin offset may be provided that will move the background image the specified x and y distance in meters from the centre of the image.",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "fileName" : {
            "description" : "(string) File name.",
            "type" : "string"
          },
          "base64" : {
            "description" : "(string) Binary data in an ASCII string format.",
            "type" : "string"
          },
          "svgContent" : {
            "description" : "(string) SVG file content, to be used instead of fileName url.",
            "type" : "string"
          },
          "size" : {
            "$ref" : "#/components/schemas/size"
          },
          "origin" : {
            "$ref" : "#/components/schemas/origin"
          },
          "scalePoint1" : {
            "$ref" : "#/components/schemas/scalePoint1"
          },
          "scalePoint2" : {
            "$ref" : "#/components/schemas/scalePoint2"
          },
          "scaleDistance" : {
            "description" : "(float) Distance between the reference points. Units are [m]. The value(s) should be between 0 and 1000.",
            "type" : "number",
            "format" : "float",
            "minimum" : 0,
            "maximum" : 1000
          }
        }
      },
      "scalePoint1" : {
        "description" : "(object) First reference point on the bitmap image for calculating the image scale. Pixel points are relative X/Y coordinate on a image. Value 0.5 means in the middle. Value of 0 for X/Y means at the left/top corner of the image.",
        "type" : "object",
        "properties" : {
          "imgX" : {
            "description" : "(double) Relative X coordinate on a image. Value 0.5 means in the center. Value of 0 means at the left edge of the image. The value(s) should be between 0 and 1. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : 0,
            "maximum" : 1,
            "example" : 0
          },
          "imgY" : {
            "description" : "(double) Relative X coordinate on a image. Value 0.5 means in the middle. Value of 0 means at the top edge of the image. The value(s) should be between 0 and 1. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : 0,
            "maximum" : 1,
            "example" : 0
          }
        }
      },
      "scalePoint2" : {
        "description" : "(object) Second reference point on the bitmap image for calculating the image scale.",
        "type" : "object",
        "properties" : {
          "imgX" : {
            "description" : "(double) Relative X coordinate on a image. Value 0.5 means in the center. Value of 0 means at the left edge of the image. The value(s) should be between 0 and 1. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : 0,
            "maximum" : 1,
            "example" : 0
          },
          "imgY" : {
            "description" : "(double) Relative X coordinate on a image. Value 0.5 means in the middle. Value of 0 means at the top edge of the image. The value(s) should be between 0 and 1. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : 0,
            "maximum" : 1,
            "example" : 0
          }
        }
      },
      "size" : {
        "description" : "(object) Calculated width and height of the image converted to meters",
        "type" : "object",
        "properties" : {
          "x" : {
            "description" : "(double) X coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "y" : {
            "description" : "(double) Y coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "z" : {
            "description" : "(double) Z coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          }
        }
      },
      "origin" : {
        "description" : "(object) Offset of origin relative to center of the image the corner coordinates clockwise from top left will be [-5,5], [5,5], [5,-5], [-5,-5]. If the image origin offset is changed to {x= 5, y= 5}, the corner points of the image will be [0,10], [10,10], [10,0], [0,0]",
        "type" : "object",
        "properties" : {
          "x" : {
            "description" : "(double) X coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "y" : {
            "description" : "(double) Y coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "z" : {
            "description" : "(double) Z coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          }
        }
      },
      "surveyPoint" : {
        "description" : "(object) Proposed or actual location of a base device (reader/anchor/beacon).",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "notes" : {
            "description" : "(string) Some description, note, or annotation about the object.",
            "type" : "string",
            "example" : "Some description of the object"
          },
          "floorplanId" : {
            "description" : "(Id) User-defined floor plan id",
            "type" : "string",
            "format" : "string",
            "minLength" : 2,
            "maxLength" : 32,
            "example" : "myFloorplan"
          },
          "x" : {
            "description" : "(double) X coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "y" : {
            "description" : "(double) Y coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "z" : {
            "description" : "(double) Z coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          }
        }
      },
      "reader" : {
        "description" : "(object) A reader, locator, edge relay or anchor.",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "device" : {
            "description" : "(string) Unique identifier for the device",
            "type" : "string"
          },
          "x" : {
            "description" : "(double) X coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "y" : {
            "description" : "(double) Y coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "z" : {
            "description" : "(double) Z coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "rcvDelay" : {
            "description" : "(double) Calibrated relative cable delay for TDOA system",
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "tag" : {
        "description" : "(object) A tracked tag.",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "device" : {
            "description" : "(string) Unique identifier for the device",
            "type" : "string"
          },
          "primaryTagId" : {
            "description" : "(Id) Primary tag to be used for merging positions of multiple tags physically connected to the same tracked object",
            "type" : "string",
            "format" : "string",
            "minLength" : 2,
            "maxLength" : 32,
            "example" : "myTag"
          }
        }
      },
      "engineSettings" : {
        "description" : "(object) Default settings used by all solvers in the solution.",
        "type" : "object",
        "properties" : {
          "prohibitedTagGroupIds" : {
            "description" : "(array) List of Tags that should be ignored by a solver, even if AutoAddTags is enabled.",
            "type" : "array",
            "items" : {
              "description" : "(Id) Unique identifier of a Device group.",
              "type" : "string",
              "format" : "string",
              "minLength" : 2,
              "maxLength" : 32,
              "example" : "myTagGroup"
            }
          },
          "metaProcessors" : {
            "description" : "(array) Additional computation or tasks.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/metaProcessor"
            }
          }
        }
      },
      "solver" : {
        "description" : "(switch) Solver lacks a description.",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/scalarFieldSolver"
        }, {
          "$ref" : "#/components/schemas/someOtherSolver"
        } ],
        "discriminator" : {
          "propertyName" : "solverType"
        }
      },
      "solverBase" : {
        "type" : "object",
        "required" : [ "solverType" ],
        "properties" : {
          "solverType" : {
            "type" : "string",
            "enum" : [ "ScalarFieldSolver", "SomeOtherSolver" ],
            "default" : "ScalarFieldSolver"
          },
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "notes" : {
            "description" : "(string) Some description, note, or annotation about the object.",
            "type" : "string",
            "example" : "Some description of the object"
          },
          "solverTemplate" : {
            "description" : "(Id) Reference to the object Id of which settings will be copied. The referenced object must be of the same class as the referencing object.",
            "type" : "string",
            "format" : "string",
            "minLength" : 2,
            "maxLength" : 32,
            "example" : "mySolver"
          },
          "autoAddTags" : {
            "description" : "(bool) If true, then automatically create Devices as they are referenced in incoming packets. WARNING, Creating a Device adds notable latency. The default value is true.",
            "type" : "boolean",
            "format" : "bool",
            "default" : true,
            "example" : true
          },
          "readerGroupIds" : {
            "description" : "(array) List of unique identifiers of Reader groups.",
            "type" : "array",
            "items" : {
              "description" : "(Id) Unique identifier of a Device group.",
              "type" : "string",
              "format" : "string",
              "minLength" : 2,
              "maxLength" : 32,
              "example" : "myReaderGroup"
            }
          },
          "tagGroupIds" : {
            "description" : "(array) List of unique identifiers of Tag groups.",
            "type" : "array",
            "items" : {
              "description" : "(Id) Unique identifier of a Device group.",
              "type" : "string",
              "format" : "string",
              "minLength" : 2,
              "maxLength" : 32,
              "example" : "myTagGroup"
            }
          }
        },
        "discriminator" : {
          "propertyName" : "solverType"
        }
      },
      "someOtherSolver" : {
        "description" : "(object) Test solver",
        "allOf" : [ {
          "$ref" : "#/components/schemas/solverBase"
        }, {
          "type" : "object",
          "properties" : {
            "numDims" : {
              "description" : "(uint32) Number of dimensions. The value(s) should be between 1 and 3. The default value is 2.",
              "type" : "integer",
              "format" : "uint32",
              "default" : 2,
              "minimum" : 1,
              "maximum" : 3,
              "example" : 2
            }
          }
        } ]
      },
      "scalarFieldSolver" : {
        "description" : "(object) Scalar field solver using probability distribution",
        "allOf" : [ {
          "$ref" : "#/components/schemas/solverBase"
        }, {
          "type" : "object",
          "properties" : {
            "bundler" : {
              "$ref" : "#/components/schemas/bundler"
            },
            "packetFilter" : {
              "$ref" : "#/components/schemas/packetFilter"
            },
            "receiverPairs" : {
              "description" : "(array) These are the receiver exclusion pairs. By default, a bundle solver uses every pair of receivers to produce a TDOA. But if a pair has been added to receiverPairs, then the pair fuzziness multiplies the original fuzziness. Also, if the pair fuzziness is zero, then don't even draw the hyperbola. See ReceiverPair for more information.",
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/receiverPair"
              }
            },
            "exclusionZoneIds" : {
              "description" : "(array) ExclusionZones are Drawables that define enabled and prohibited voxel areas. Use the Drawables.AddPolygon method to add each polygon. Inclusion zones should be polygons with an intensity of 0, and exclusion zones should be polygons with an intensity of -10000.",
              "type" : "array",
              "items" : {
                "description" : "(Id) User-defined zone name.",
                "type" : "string",
                "format" : "string",
                "minLength" : 2,
                "maxLength" : 32,
                "example" : "myZone"
              }
            },
            "inclusionZoneIds" : {
              "description" : "(array) InclusionZones are Drawables that define enabled and prohibited voxel areas. Use the Drawables.AddPolygon method to add each polygon. Inclusion zones should be polygons with an intensity of 0, and exclusion zones should be polygons with an intensity of -10000.",
              "type" : "array",
              "items" : {
                "description" : "(Id) User-defined zone name.",
                "type" : "string",
                "format" : "string",
                "minLength" : 2,
                "maxLength" : 32,
                "example" : "myZone"
              }
            },
            "lowerBounds" : {
              "$ref" : "#/components/schemas/lowerBounds"
            },
            "upperBounds" : {
              "$ref" : "#/components/schemas/upperBounds"
            },
            "minNumReceivers" : {
              "description" : "(uint64) Solvers will not process a bundle if it has less than this many receiver packets. The value(s) should be between 1 and 100. The default value is 1.",
              "type" : "integer",
              "format" : "uint64",
              "default" : 1,
              "minimum" : 1,
              "maximum" : 100,
              "example" : 1
            },
            "maxNumReceivers" : {
              "description" : "(uint64) The solver will consider no more than this many of the highest-RSSI receiver packets in a bundle. The value(s) should be between 3 and 100. The default value is 5.",
              "type" : "integer",
              "format" : "uint64",
              "default" : 5,
              "minimum" : 3,
              "maximum" : 100,
              "example" : 5
            },
            "solverHysteresis" : {
              "description" : "(double) How much to keep using the current winning solver (typical range 0 to .3). This value is simply added to the previous winning solver solution confidence to calculate which solver wins the current solution. The default value is 0.",
              "type" : "number",
              "format" : "double",
              "default" : 0,
              "example" : 0
            },
            "fineVoxelSize" : {
              "description" : "(double) Length of one side of a cubical fine voxel, in meters. (Note, the ScalarField class always uses CoarseVoxelSize. So ScalarFieldSolver copies FineVoxelSize to CoarseVoxelSize for use in the fine scalar field instance.). The default value is 0.5.",
              "type" : "number",
              "format" : "double",
              "default" : 0.5,
              "example" : 0.5
            },
            "coarseVoxelSize" : {
              "description" : "(double) The length of one side of a cubical coarse voxel, in meters. Units are [m]. The default value is 2.",
              "type" : "number",
              "format" : "double",
              "default" : 2,
              "example" : 2
            },
            "fineSubfieldSize" : {
              "$ref" : "#/components/schemas/fineSubfieldSize"
            },
            "subfieldExtent" : {
              "$ref" : "#/components/schemas/subfieldExtent"
            },
            "scalarFieldDecayAlgorithm" : {
              "description" : "(uint8) Ideally, the energy of each scalar field shape (hyperbolas, blobs, etc.) should be decayed separately (i.e. in a separate scalar field) so that we can decay each shape according to how old it is. That is, we would decay it more the weaker it is. This is a 'positive' curvature decay algorithm. Unfortunately, keeping each shape in a separate scalar field would take more CPU and memory than is available. So we must compromise. There are two scalar field decay algorithms. ScalarFieldDecayAlgorithm specifies which algorithm to use. A value of 0 indicates a first order IIR should be used with a decay constant of CoarseScalarFieldDecay and FineScalarFieldDecay. If the value is 1, then a positive curvature decay algorithm is used on all the shapes when they are combined in the scalar fields, and the equation for voxel energy is New = Orig - Peak* CoarseScalarFieldDecay - (Peak - Orig) * CoarseScalarFieldDecayCurvature Fine voxels use the same equation, but with the fine decay parameters rather than the coarse decay parameters. The default value is 0.",
              "type" : "integer",
              "format" : "uint8",
              "default" : 0,
              "example" : 0
            },
            "coarseScalarFieldDecay" : {
              "description" : "(double) See ScalarFieldDecayAlgorithm. The default value is 0.02.",
              "type" : "number",
              "format" : "double",
              "default" : 0.02,
              "example" : 0.02
            },
            "coarseScalarFieldDecayCurvature" : {
              "description" : "(double) See ScalarFieldDecayAlgorithm. The default value is 2.55.",
              "type" : "number",
              "format" : "double",
              "default" : 2.55,
              "example" : 2.55
            },
            "fineScalarFieldDecay" : {
              "description" : "(double) See ScalarFieldDecayAlgorithm. The default value is 0.02.",
              "type" : "number",
              "format" : "double",
              "default" : 0.02,
              "example" : 0.02
            },
            "azimuthOffset" : {
              "description" : "(double) AzimuthOffset lacks a description. The value(s) should be between -3.1416 and 3.1416. The default value is 0.",
              "type" : "number",
              "format" : "double",
              "default" : 0,
              "minimum" : -3.1416,
              "maximum" : 3.1416,
              "example" : 0
            },
            "azimuthScale" : {
              "description" : "(double) AzimuthScale lacks a description. The value(s) should be between -3.1416 and 3.1416. The default value is 1.",
              "type" : "number",
              "format" : "double",
              "default" : 1,
              "minimum" : -3.1416,
              "maximum" : 3.1416,
              "example" : 1
            },
            "elevationOffset" : {
              "description" : "(double) ElevationOffset lacks a description. The value(s) should be between -3.1416 and 3.1416. The default value is 0.",
              "type" : "number",
              "format" : "double",
              "default" : 0,
              "minimum" : -3.1416,
              "maximum" : 3.1416,
              "example" : 0
            },
            "elevationScale" : {
              "description" : "(double) ElevationScale lacks a description. The default value is 1.",
              "type" : "number",
              "format" : "double",
              "default" : 1,
              "example" : 1
            },
            "rssiBlobIntensity" : {
              "description" : "(double) If non-zero, then draw rssi blobs with intensity scaled by this. The default value is 1.",
              "type" : "number",
              "format" : "double",
              "default" : 1,
              "example" : 1
            },
            "rssiBlobDepressionSharpness" : {
              "description" : "(double) RssiBlobDepressionSharpness lacks a description. The value(s) should be between 0 and 20. The default value is 0.5.",
              "type" : "number",
              "format" : "double",
              "default" : 0.5,
              "minimum" : 0,
              "maximum" : 20,
              "example" : 0.5
            },
            "rssiBlobDepressionStrength" : {
              "description" : "(double) RssiBlobDepressionStrength lacks a description. The value(s) should be between 0 and 1. The default value is 0.6.",
              "type" : "number",
              "format" : "double",
              "default" : 0.6,
              "minimum" : 0,
              "maximum" : 1,
              "example" : 0.6
            },
            "rssiBlobDiameter" : {
              "description" : "(double) Scales the diameter of a blob, in meters, along with the effect of RSSI. Must be positive. The default value is 1200000.",
              "type" : "number",
              "format" : "double",
              "default" : 1200000,
              "example" : 1200000
            },
            "rssiBlobIntensityRssiExp" : {
              "description" : "(double) Raise RSSI to this power to get blob intensity. (Note that we assume all BLE RSSI values have been converted from dBm to level before they are given to the location engine). The value(s) should be between -10 and 10. The default value is 0.",
              "type" : "number",
              "format" : "double",
              "default" : 0,
              "minimum" : -10,
              "maximum" : 10,
              "example" : 0
            },
            "rssiBlobDiameterRssiExp" : {
              "description" : "(double) Raise the signal level (RSSI) to this power before using it in the blob calculation. The default value is 1.",
              "type" : "number",
              "format" : "double",
              "default" : 1,
              "example" : 1
            },
            "rangeSphereIntensity" : {
              "description" : "(double) Scales sphere intensity. The default value is 1.",
              "type" : "number",
              "format" : "double",
              "default" : 1,
              "example" : 1
            },
            "rangeSphereDiameter" : {
              "description" : "(double) Scales the diameter of a sphere, in meters. Must be positive. The default value is 1.",
              "type" : "number",
              "format" : "double",
              "default" : 1,
              "example" : 1
            },
            "rangeSphereSharpness" : {
              "description" : "(double) Controls the sharpness of the sphere. Must be positive. The value(s) should be between 0 and 20. The default value is 0.4.",
              "type" : "number",
              "format" : "double",
              "default" : 0.4,
              "minimum" : 0,
              "maximum" : 20,
              "example" : 0.4
            },
            "rangeSphereIntensityRssiExp" : {
              "description" : "(double) Raise RSSI to this power to get sphere intensity. (Note that we assume all BLE RSSI values have been converted from dBm to level before they are given to the location engine). The value(s) should be between 0 and 8. The default value is 0.1.",
              "type" : "number",
              "format" : "double",
              "default" : 0.1,
              "minimum" : 0,
              "maximum" : 8,
              "example" : 0.1
            },
            "holeIntensity" : {
              "description" : "(double) If non-zero, then draw a hole when we know a receiver might not be hearing a Device. (See PktType.Heartbeat). A hole is an inverted blob, where voxel energy is added everywhere except near the receiver. For this to work, the scalar field's hole energy must be less than the blob and hyperbola energy. The default value is -1.",
              "type" : "number",
              "format" : "double",
              "default" : -1,
              "example" : -1
            },
            "holeDiameter" : {
              "description" : "(double) Size of the hole, in world units. (Enable Debug.saveScalarFieldImageFile flag to see the size of the hole) looks like). The default value is 6000.",
              "type" : "number",
              "format" : "double",
              "default" : 6000,
              "example" : 6000
            },
            "holeSharpness" : {
              "description" : "(double) Controls the sharpness of the Hole. Must be positive. The default value is -0.7.",
              "type" : "number",
              "format" : "double",
              "default" : -0.7,
              "example" : -0.7
            },
            "holeIntensityOffset" : {
              "description" : "(double) This is added to intensity for holes. The default value is 1.",
              "type" : "number",
              "format" : "double",
              "default" : 1,
              "example" : 1
            },
            "hyperIntensity" : {
              "description" : "(double) Intensity of strongest points in a hyperbola. The default value is 1.",
              "type" : "number",
              "format" : "double",
              "default" : 1,
              "example" : 1
            },
            "hyperFuzziness" : {
              "description" : "(double) Fuzziness of hyperboloid. This is NOT proportional to voxel size. Experiment with the value and look at the scalar field output. The default value is 15.",
              "type" : "number",
              "format" : "double",
              "default" : 15,
              "example" : 15
            },
            "minVoxelEnergyChange" : {
              "description" : "(double) Don't bother changing voxel energy if the change is less than this. The default value is 0.",
              "type" : "number",
              "format" : "double",
              "default" : 0,
              "example" : 0
            },
            "minConfidence" : {
              "description" : "(double) Tells solvers not to provide a position if the confidence is below this. The value(s) should be between 0 and 1. The default value is 0.",
              "type" : "number",
              "format" : "double",
              "default" : 0,
              "minimum" : 0,
              "maximum" : 1,
              "example" : 0
            },
            "subVoxelStrength1D" : {
              "description" : "(double) The effect of the subvoxel algorithm for 1D scalar fields can be tweaked with this. The value(s) should be between 0 and 1. The default value is 0.7.",
              "type" : "number",
              "format" : "double",
              "default" : 0.7,
              "minimum" : 0,
              "maximum" : 1,
              "example" : 0.7
            },
            "subVoxelStrength2D" : {
              "description" : "(double) The effect of the subvoxel algorithm for 2D scalar fields can be tweaked with this. The value(s) should be between 0 and 1. The default value is 0.3.",
              "type" : "number",
              "format" : "double",
              "default" : 0.3,
              "minimum" : 0,
              "maximum" : 1,
              "example" : 0.3
            },
            "subVoxelStrength3D" : {
              "description" : "(double) The effect of the subvoxel algorithm for 3D scalar fields can be tweaked with this. The value(s) should be between 0 and 1. The default value is 0.1.",
              "type" : "number",
              "format" : "double",
              "default" : 0.1,
              "minimum" : 0,
              "maximum" : 1,
              "example" : 0.1
            },
            "confRadius" : {
              "description" : "(double) SolutionConfidence is calculated by comparing hottest voxel with average voxels. This defines how far from the hottest voxel we go to find other voxels. The default value is 5.",
              "type" : "number",
              "format" : "double",
              "default" : 5,
              "example" : 5
            },
            "forceTracking" : {
              "description" : "(bool) ForceTracking is lacking a description. The default value is true.",
              "type" : "boolean",
              "format" : "bool",
              "default" : true,
              "example" : true
            }
          }
        } ]
      },
      "bundler" : {
        "description" : "(switch) Bundler lacks a description",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/standardBundler"
        }, {
          "$ref" : "#/components/schemas/groupByBundler"
        }, {
          "$ref" : "#/components/schemas/timedBundler"
        } ],
        "discriminator" : {
          "propertyName" : "bundlerType"
        }
      },
      "bundlerBase" : {
        "type" : "object",
        "required" : [ "bundlerType" ],
        "properties" : {
          "bundlerType" : {
            "type" : "string",
            "enum" : [ "StandardBundler", "GroupByBundler", "TimedBundler" ],
            "default" : "StandardBundler"
          },
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "notes" : {
            "description" : "(string) Some description, note, or annotation about the object.",
            "type" : "string",
            "example" : "Some description of the object"
          },
          "dropoutTime" : {
            "description" : "(double) If it's been longer than this many seconds since the last packet for a Device (including the start of the location engine), then consider it a dropout, and honor DropoutMuteDelay and DropoutFilterDelay variables. Units are [s]. The value(s) should be between 3600 and 0. The default value is 1000.",
            "type" : "number",
            "format" : "double",
            "default" : 1000,
            "minimum" : 3600,
            "maximum" : 0,
            "example" : 1000
          },
          "dropoutMuteDelay" : {
            "description" : "(double) If a dropout occurred (according to DropoutTime), then don't report positions for this many seconds. Units are [s]. The value(s) should be between 0 and 3600. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : 0,
            "maximum" : 3600,
            "example" : 0
          },
          "dropoutFilterDelay" : {
            "description" : "(double) If a dropout occurred (according to DropoutTime), then don't filter positions for this many seconds. Units are [s]. The value(s) should be between 0 and 3600. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : 0,
            "maximum" : 3600,
            "example" : 0
          },
          "maxBundleCompleteTime" : {
            "description" : "(double) If a packet dropout or quiet time lasts more than this many seconds, then assume the current bundle is complete and solve with it. (Otherwise a bundle solver will wait for the next sequence number to make sure all packets of the previous sequence number have arrived). Note, this is based on the packet Time value. Doesn't work when runSingleThreaded is true. Units are [s]. The value(s) should be between 0 and 3600. The default value is 2.",
            "type" : "number",
            "format" : "double",
            "default" : 2,
            "minimum" : 0,
            "maximum" : 3600,
            "example" : 2
          }
        },
        "discriminator" : {
          "propertyName" : "bundlerType"
        }
      },
      "standardBundler" : {
        "description" : "(object) The StandardBundler outputs a bundle of previously-received packets generally each time the sequence number changes in a new packet, but will also create a new bundle when the MaxBundleCompleteTime parameter merits it.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/bundlerBase"
        }, {
          "type" : "object"
        } ]
      },
      "timedBundler" : {
        "description" : "(object) The TimedBundler lacks a description.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/bundlerBase"
        }, {
          "type" : "object",
          "properties" : {
            "bundleCompletionTime" : {
              "description" : "(double) For TimedBundler and GroupByBundler, how long to wait before starting a new bundle. Units are [us]. The value(s) should be between 0 and 1e10. The default value is 20000000.",
              "type" : "number",
              "format" : "double",
              "default" : 20000000,
              "minimum" : 0,
              "maximum" : 1.0E10,
              "example" : 20000000
            }
          }
        } ]
      },
      "groupByBundler" : {
        "description" : "(object) The GroupByBundler lacks a description.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/bundlerBase"
        }, {
          "type" : "object",
          "properties" : {
            "bundleCompletionTime" : {
              "description" : "(double) For TimedBundler and GroupByBundler, how long to wait before starting a new bundle. Units are [us]. The value(s) should be between 0 and 1e10. The default value is 20000000.",
              "type" : "number",
              "format" : "double",
              "default" : 20000000,
              "minimum" : 0,
              "maximum" : 1.0E10,
              "example" : 20000000
            }
          }
        } ]
      },
      "packetFilter" : {
        "description" : "(switch) PacketFilter lacks a description.",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/standardPacketFilter"
        } ],
        "discriminator" : {
          "propertyName" : "packetFilterType"
        }
      },
      "packetFilterBase" : {
        "type" : "object",
        "required" : [ "packetFilterType" ],
        "properties" : {
          "packetFilterType" : {
            "type" : "string",
            "enum" : [ "StandardPacketFilter" ],
            "default" : "StandardPacketFilter"
          },
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "notes" : {
            "description" : "(string) Some description, note, or annotation about the object.",
            "type" : "string",
            "example" : "Some description of the object"
          }
        },
        "discriminator" : {
          "propertyName" : "packetFilterType"
        }
      },
      "standardPacketFilter" : {
        "description" : "(object) StandardPacketFilter lacks a description.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/packetFilterBase"
        }, {
          "type" : "object"
        } ]
      },
      "receiverPair" : {
        "description" : "(object) Holds information with respect to receiver pairs.",
        "type" : "object",
        "properties" : {
          "readerId" : {
            "description" : "(Id) User-defined unique device name.",
            "type" : "string",
            "format" : "string",
            "minLength" : 2,
            "maxLength" : 32,
            "example" : "myReader"
          },
          "otherReaderId" : {
            "description" : "(Id) Name of the other unique device name.",
            "type" : "string",
            "format" : "string",
            "minLength" : 2,
            "maxLength" : 32,
            "example" : "myReader"
          },
          "fuzziness" : {
            "description" : "(double) A strength of zero means no hyperbola ad a strength of 1 means a full strength hyperbola.  The value(s) should be between 0 and 1. The default value is 1.",
            "type" : "number",
            "format" : "double",
            "default" : 1,
            "minimum" : 0,
            "maximum" : 1,
            "example" : 1
          }
        }
      },
      "lowerBounds" : {
        "description" : "(object) Lowest world coordinates of the entire system (rectangular area) that we will solve for a tag. (receivers might be outside this area). The default value is {x= 0, y= 0, z= 0}.",
        "type" : "object",
        "properties" : {
          "x" : {
            "description" : "(double) X coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "y" : {
            "description" : "(double) Y coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "z" : {
            "description" : "(double) Z coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          }
        }
      },
      "upperBounds" : {
        "description" : "(object) Highest world coordinates of the entire system (rectangular area) that we will solve for a tag. (receivers might be outside this area). The default value is {x= 0, y= 0, z= 0}.",
        "type" : "object",
        "properties" : {
          "x" : {
            "description" : "(double) X coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "y" : {
            "description" : "(double) Y coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "z" : {
            "description" : "(double) Z coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          }
        }
      },
      "fineSubfieldSize" : {
        "description" : "(object) World dimensions of the sub region in the fine scalar field that will be processed around the current coarse solution position. (But will not extend beyond the scalar field edges). Default is disabled (i.e. the region is very large). Units are [m]. The default value is {x=1e100, y=1e100, z=1e100}.",
        "type" : "object",
        "properties" : {
          "x" : {
            "description" : "(double) X coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "y" : {
            "description" : "(double) Y coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "z" : {
            "description" : "(double) Z coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          }
        }
      },
      "subfieldExtent" : {
        "description" : "(object) For the coarse scalar field, the region that is processed will only be the enclosing rectangle around the current receiver positions, extended by this much in every direction, in world coordinates. Set it very large to process all coarse voxels. (But will not extend beyond the scalar field edges) Default is disabled (i.e. the region is very large). The default value is {x=1e100, y=1e100, z=1e100}.",
        "type" : "object",
        "properties" : {
          "x" : {
            "description" : "(double) X coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "y" : {
            "description" : "(double) Y coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "z" : {
            "description" : "(double) Z coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          }
        }
      },
      "positionFilter" : {
        "description" : "(switch) Smooths the positions over time.",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/alphaBetaPositionFilter"
        }, {
          "$ref" : "#/components/schemas/firPositionFilter"
        }, {
          "$ref" : "#/components/schemas/inertialPositionFilter"
        } ],
        "discriminator" : {
          "propertyName" : "positionFilterType"
        }
      },
      "positionFilterBase" : {
        "type" : "object",
        "required" : [ "positionFilterType" ],
        "properties" : {
          "positionFilterType" : {
            "type" : "string",
            "enum" : [ "AlphaBetaPositionFilter", "FirPositionFilter", "InertialPositionFilter" ],
            "default" : "InertialPositionFilter"
          },
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "notes" : {
            "description" : "(string) Some description, note, or annotation about the object.",
            "type" : "string",
            "example" : "Some description of the object"
          }
        },
        "discriminator" : {
          "propertyName" : "positionFilterType"
        }
      },
      "alphaBetaPositionFilter" : {
        "description" : "(object) A standard alpha-beta filter",
        "allOf" : [ {
          "$ref" : "#/components/schemas/positionFilterBase"
        }, {
          "type" : "object",
          "properties" : {
            "alpha" : {
              "description" : "(double) Alpha value. The value(s) should be between 0 and 10. The default value is 0.25.",
              "type" : "number",
              "format" : "double",
              "default" : 0.25,
              "minimum" : 0,
              "maximum" : 10,
              "example" : 0.25
            },
            "beta" : {
              "description" : "(double) Beta value. If zero, then this will be replaced with the near-critically damped value. The value(s) should be between 0 and 10. The default value is 0.",
              "type" : "number",
              "format" : "double",
              "default" : 0,
              "minimum" : 0,
              "maximum" : 10,
              "example" : 0
            }
          }
        } ]
      },
      "firPositionFilter" : {
        "description" : "(object) Applies an FIR filter to each solution. Time per coefficient index is the time between received samples rather than real time, so dropouts can distort the results. The value(s) should be between 0 and 10000.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/positionFilterBase"
        }, {
          "type" : "object",
          "properties" : {
            "coefs" : {
              "description" : "(array) Coefficients for FirPositionFilter. Last (highest indexed) element in the array is for the youngest (most recent) sample.  These will be normalized to unity before they are used, so there's no need to make sure their sum is unity. The value(s) should be between -10 and 10. The default value is [.2, 1, 1.3, -0.4].",
              "type" : "array",
              "default" : [ 0.2, 1, 1.3, -0.4 ],
              "minimum" : -10,
              "maximum" : 10,
              "example" : [ 0.2, 1, 1.3, -0.4 ],
              "items" : {
                "type" : "number",
                "format" : "double"
              }
            },
            "timeLimit" : {
              "description" : "(double) Time limit. Packets older than this are not included in the filtering algorithm. Units are [s]. The value(s) should be between 0 and 10000. The default value is 50.",
              "type" : "number",
              "format" : "double",
              "default" : 50,
              "minimum" : 0,
              "maximum" : 10000,
              "example" : 50
            }
          }
        } ]
      },
      "inertialPositionFilter" : {
        "description" : "(object) Performs a first-order position and first order inertial filter on each solution. Time quantum is the time between samples rather than real time, so dropouts can distort the results.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/positionFilterBase"
        }, {
          "type" : "object",
          "properties" : {
            "inertia" : {
              "description" : "(double) Velocity smoothing (per solution, not per second). The value(s) should be between 0 and 0.999. The default value is 0.6.",
              "type" : "number",
              "format" : "double",
              "default" : 0.6,
              "minimum" : 0,
              "maximum" : 0.999,
              "example" : 0.6
            },
            "sluggishness" : {
              "description" : "(double) Position smoothing (per solution, not per second). The value(s) should be between 0 and 0.999. The default value is 0.06.",
              "type" : "number",
              "format" : "double",
              "default" : 0.06,
              "minimum" : 0,
              "maximum" : 0.999,
              "example" : 0.06
            },
            "lookAhead" : {
              "description" : "(double) How much to use the velocity component in the result. The value(s) should be between 0 and 100. The default value is 1.8.",
              "type" : "number",
              "format" : "double",
              "default" : 1.8,
              "minimum" : 0,
              "maximum" : 100,
              "example" : 1.8
            }
          }
        } ]
      },
      "zone" : {
        "description" : "(object) Define areas that can serve as input for the location engine.",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "floorplanId" : {
            "description" : "(Id) User-defined floor plan id",
            "type" : "string",
            "format" : "string",
            "minLength" : 2,
            "maxLength" : 32,
            "example" : "myFloorplan"
          },
          "vertices" : {
            "description" : "(array) Define areas that can serve as input for the location engine.",
            "type" : "array",
            "minItems" : 3,
            "items" : {
              "$ref" : "#/components/schemas/point"
            }
          },
          "selected" : {
            "description" : "(bool) Indicates whether the current object is selected (by the UI). The default value is false.",
            "type" : "boolean",
            "format" : "bool",
            "default" : false,
            "example" : false
          }
        }
      },
      "point" : {
        "description" : "(object) A three-dimensional point.",
        "type" : "object",
        "properties" : {
          "x" : {
            "description" : "(double) X coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "y" : {
            "description" : "(double) Y coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          },
          "z" : {
            "description" : "(double) Z coordinate. Units are [m]. The value(s) should be between -10000 and 10000. The default value is 0.",
            "type" : "number",
            "format" : "double",
            "default" : 0,
            "minimum" : -10000,
            "maximum" : 10000,
            "example" : 0
          }
        }
      },
      "metaProcessor" : {
        "description" : "(switch) Performs additional computation or tasks.",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/etoaMetaProcessor"
        }, {
          "$ref" : "#/components/schemas/gtbMetaProcessor"
        }, {
          "$ref" : "#/components/schemas/orderPacketsMetaProcessor"
        }, {
          "$ref" : "#/components/schemas/standardMetaProcessor"
        }, {
          "$ref" : "#/components/schemas/wirelessSyncMetaProcessor"
        } ],
        "discriminator" : {
          "propertyName" : "metaProcessorType"
        }
      },
      "metaProcessorBase" : {
        "type" : "object",
        "required" : [ "metaProcessorType" ],
        "properties" : {
          "metaProcessorType" : {
            "type" : "string",
            "enum" : [ "EtoaMetaProcessor", "GtbMetaProcessor", "OrderPacketsMetaProcessor", "StandardMetaProcessor", "WirelessSyncMetaProcessor" ],
            "default" : "StandardMetaProcessor"
          },
          "id" : {
            "description" : "(Id) Unique identifier of an object.",
            "type" : "string",
            "format" : "string",
            "example" : "myObject",
            "minLength" : 2,
            "maxLength" : 32
          },
          "notes" : {
            "description" : "(string) Some description, note, or annotation about the object.",
            "type" : "string",
            "example" : "Some description of the object"
          }
        },
        "discriminator" : {
          "propertyName" : "metaProcessorType"
        }
      },
      "etoaMetaProcessor" : {
        "description" : "(object) EtoaMetaProcessor lacks a short description.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/metaProcessorBase"
        }, {
          "type" : "object",
          "properties" : {
            "maxEtoa" : {
              "description" : "(int64) Maximum ETOA value plus 1. The value(s) should be between 0 and 0x7FFFFFFFFFFFFFFF. The default value is 0x100000000.",
              "type" : "integer",
              "format" : "int64",
              "default" : "0x100000000",
              "minimum" : 0,
              "maximum" : "0x7FFFFFFFFFFFFFFF",
              "example" : "0x100000000"
            }
          }
        } ]
      },
      "gtbMetaProcessor" : {
        "description" : "(object) GtbMetaProcessor lacks a short description.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/metaProcessorBase"
        }, {
          "type" : "object",
          "properties" : {
            "syncSources" : {
              "description" : "(array) List of sync sources that reference the receivers in the group's Device list.",
              "type" : "array",
              "items" : {
                "description" : "(Id) Unique identifier of an object.",
                "type" : "string",
                "format" : "string",
                "example" : "myObject",
                "minLength" : 2,
                "maxLength" : 32
              }
            },
            "calRate" : {
              "description" : "(double) Global time base (decawave) decay (1/smoothing) rate. The default value is 0.4.",
              "type" : "number",
              "format" : "double",
              "default" : 0.4,
              "example" : 0.4
            },
            "maxClockError" : {
              "description" : "(double) Global time base (decawave) clocks rates of different Devices will never vary in rate more than this much per packet. The default value is 0.00001.",
              "type" : "number",
              "format" : "double",
              "default" : 1.0E-5,
              "example" : 1.0E-5
            },
            "maxCorrectionDifTime" : {
              "description" : "(double) When the clock correction is calcualted for a Device, the packet time is also recorded. When the clock is corrected by that correction value, the time is also known. If the difference between the time at correction calculation and the time when it is corrected is more than this, in seconds, then terminate the processing of the packet and don't create a solution. The default value is 3.",
              "type" : "number",
              "format" : "double",
              "default" : 3,
              "example" : 3
            }
          }
        } ]
      },
      "orderPacketsMetaProcessor" : {
        "description" : "(object) OrderPacketsMetaProcessor lacks a short description.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/metaProcessorBase"
        }, {
          "type" : "object",
          "properties" : {
            "bufDuration" : {
              "description" : "(double) The processor tries to keep about this many seconds worth of packets in its buffer. Units are [s]. The default value is 1.6.",
              "type" : "number",
              "format" : "double",
              "default" : 1.6,
              "example" : 1.6
            },
            "precision" : {
              "description" : "(double) The higher this is, the harder OrderPacketsMetaProcessor tries to keep OrderPacketsBufDuration seconds of packets in its buffer. Typical values can vary between .1 and 10, or so. The value(s) should be between 0 and 10000. The default value is 10.",
              "type" : "number",
              "format" : "double",
              "default" : 10,
              "minimum" : 0,
              "maximum" : 10000,
              "example" : 10
            },
            "timeReset" : {
              "description" : "(double) If an incoming packet's NetTime varies more than this many seconds from other recent packets, then reset the arithmetic in the wrap handler and start it afresh. Units are [s]. The value(s) should be between 0 and 10000. The default value is 10.",
              "type" : "number",
              "format" : "double",
              "default" : 10,
              "minimum" : 0,
              "maximum" : 10000,
              "example" : 10
            },
            "netTimeWrap" : {
              "description" : "(double) Net time wraps at this value. Default is most common. Units are [us]. The default value is 1000000.",
              "type" : "number",
              "format" : "double",
              "default" : 1000000,
              "example" : 1000000
            }
          }
        } ]
      },
      "standardMetaProcessor" : {
        "description" : "(object) StandardMetaProcessor lacks a short description.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/metaProcessorBase"
        }, {
          "type" : "object"
        } ]
      },
      "wirelessSyncMetaProcessor" : {
        "description" : "(object) WirelessSyncMetaProcessor lacks a short description.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/metaProcessorBase"
        }, {
          "type" : "object",
          "properties" : {
            "rawTimeMax" : {
              "description" : "(double) Wrap time of Packet.XmitTime and Packet.RcvTime (i.e. Decawave clock wrap time). Units are [s]. The default value is 17.2074010256.",
              "type" : "number",
              "format" : "double",
              "default" : 17.2074010256,
              "example" : 17.2074010256
            },
            "offsetSmooth" : {
              "description" : "(double) The correction offset of a Device's clock is smoothed by this. 0 = no smoothing, 1 = complete smoothing. The default value is 0.",
              "type" : "number",
              "format" : "double",
              "default" : 0,
              "example" : 0
            },
            "maxDrift" : {
              "description" : "(double) The drift correction value of a Device's clock is limited to this many seconds per second. The value(s) should be between 0 and 1. The default value is 0.000005.",
              "type" : "number",
              "format" : "double",
              "default" : 5.0E-6,
              "minimum" : 0,
              "maximum" : 1,
              "example" : 5.0E-6
            },
            "driftSmooth" : {
              "description" : "(double) The drift correction of a Device's clock is smoothed by this. 0=no smoothing, 1=total smoothing. The value(s) should be between 0 and 1. The default value is 0.99.",
              "type" : "number",
              "format" : "double",
              "default" : 0.99,
              "minimum" : 0,
              "maximum" : 1,
              "example" : 0.99
            },
            "limitSmooth" : {
              "description" : "(double) The WirelessSyncMetaProcessor contains an outlier removal algorithm that works as follows. For every incoming packet, the measured and expected TOF between the transmitter and receiver are calculated. An average magnitude of that (smoothed by OutlierLimitSmooth) is maintained. If a single measured TOF differs from that average by more than OutlierThreshold times the average value, then it that difference is replaced with OutlierFactor. Thus, outliers are reduced to a fraction of the average error. The default value is 0.95.",
              "type" : "number",
              "format" : "double",
              "default" : 0.95,
              "example" : 0.95
            },
            "outlierThreshold" : {
              "description" : "(double) See OutlierLimitSmooth. The value(s) should be between 0 and 100. The default value is 3.",
              "type" : "number",
              "format" : "double",
              "default" : 3,
              "minimum" : 0,
              "maximum" : 100,
              "example" : 3
            },
            "outlierFactor" : {
              "description" : "(double) See OutlierLimitSmooth. The value(s) should be between 0 and 1. The default value is 0.1.",
              "type" : "number",
              "format" : "double",
              "default" : 0.1,
              "minimum" : 0,
              "maximum" : 1,
              "example" : 0.1
            }
          }
        } ]
      }
    }
  }
}