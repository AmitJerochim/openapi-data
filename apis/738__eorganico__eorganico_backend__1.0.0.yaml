openapi: 3.0.0
info:
  description: |
    Documentação da API que o app  para mercado de produtos orgânicos consome.
  version: "1.0.0"
  title: ÉOrganico? API Documentation
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: mateus.silva@dcomp.ufs.br
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/eorganico/eorganico_backend/1.0.0
  - description: eorganico
    url: https://localhost:44373/eorganico/

tags:
  - name: user
    description: Operations about user
  - name: producer
    description: Operations about producer
  - name: marketplaces
    description: Operations about marketplace

paths:
  /users/create:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the user not logged in.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Object to create the user 
        required: true
  
  /users/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: phone
          in: query
          description: The user phone for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          
        '400':
          description: Invalid phone/password supplied
  /users/addAddress:
    post:
      tags:
        - user
      summary: Create address
      description: This can only be done by the logged in user or producer.
      operationId: addAddress
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        description: Object to create the user 
        required: true
        
  /producers/create:
    post:
      tags:
        - producer
      summary: Create producer
      description: This can only be done by the logged in user.
      operationId: createProducer
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Producer'
        description: Object to create the producer. 
        required: true    
  /producers/getItems:
    get:
      tags:
        - producer
      summary: Returns a list of all items that contain the substring.
      description: A list with all items that a producer can use to create a product, provided by the database.
      operationId: findItems
      parameters:
        - name: item-name
          in: query
          schema:
            type: string
          required: false
          description: a substring to search for all items that contain it.
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'

  /producers/addProperty:
    post:
      tags:
        - producer
      summary: create Property
      description: This can only be done by the logged in producer.
      operationId: addProperty
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
        description: Object to create the property 
        required: true

components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        telephone:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        photo:
          type: string
          format: base64String
    Producer:
      type: object
      properties:
        producerid:
          type: integer
        certification:
          type: string
        delivery:
          type: boolean

    Address:
      type: object
      properties:
        userid:
          type: integer
        street:
          type: string
        number:
          type: integer
        neighborhood:
          type: string
        city:
          type: string
        zip:
          type: string
        state:
          type: string
    Property:
      type: object
      properties:
        producerId:
          type: integer
        addressId:
          type: integer
          format: base64String
        photo1:
          type: string
          format: base64String
        photo2:
          type: string
          format: base64String
        photo3:
          type: string
          format: base64String
        photo4:
          type: string
          format: base64String

    Item:
      type: object
      properties:
        name:
          type: string
        type: 
          type: string
