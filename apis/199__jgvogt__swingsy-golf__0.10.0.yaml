openapi: 3.0.0
info:
  title: Swingsy Golf
  description: |
    Represents the Swingsy Golf Restful Web API
  version: "0.10.0"
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/kcrowe123/PSOapiwa/0.2.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jgvogt/swingsy-golf/1.0.0
  - description: Local
    url: http://localhost:8080
paths:
  /tournaments:
    get:
      tags:
        - Tournaments
      summary: Find tournaments
      operationId: findTournaments
      responses:
        '200':
          description: Tournaments response
          content:
            'application/json' :
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TournamentCollection'
          links:
            self:
              operationId: findTournaments
              description: >
                 `GET /tournaments'
            create:
              operationId: createTournament
              description: >
                 `POST /tournaments'
    post:
      tags:
        - Tournaments
      summary: Add tournament
      operationId: createTournament
      requestBody:
        description: Tournament request
        content:
          'application/json' :
            schema:
              $ref: '#/components/schemas/Tournament'
        required: true
      responses:
        '200':
          description: Tournament response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Tournament'
        '422':
          description: Tournament Validation Error
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/ValidationErrorCollection'
          links:
            self:
              operationId: findTournamentByid
              description: >
                 `GET /tournaments/{id}'
            update:
              operationId: updateTournamentByid
              description: >
                 `PUT /tournaments/{id}'
            days:
              operationId: findDaysByTournamentId
              description: >
                 `POST /tournaments/id/days'
            days.create:
              operationId: createDayByTournamentId
              description: >
                 `POST /tournaments/id/days'
  /tournaments/{id}:
    get:
      tags:
        - Tournaments
      summary: Find tournament
      operationId: findTournamentById
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tournament response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Tournament'
        '404':
          description: Tournament Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
          links:
            self:
              operationId: findTournamentByid
              description: >
                 `GET /tournaments/{id}'
            update:
              operationId: updateTournamentByid
              description: >
                 `PUT /tournaments/{id}'
            days:
              operationId: findDaysByTournamentId
              description: >
                 `POST /tournaments/id/days'
            days.create:
              operationId: createDayByTournamentId
              description: >
                 `POST /tournaments/id/days'
    put:
      tags:
        - Tournaments
      summary: Update tournament
      operationId: updateTournamentById
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Tournament request
        content:
          'application/json' :
            schema:
              $ref: '#/components/schemas/Tournament'
        required: true
      responses:
        '200':
          description: Tournament response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Tournament'
        '404':
          description: Tournament Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
          links:
            self:
              operationId: findTournamentByid
              description: >
                 `GET /tournaments/{id}'
            update:
              operationId: updateTournamentByid
              description: >
               `PUT /tournaments/{id}'
            days:
              operationId: findDaysByTournamentId
              description: >
                 `POST /tournaments/id/days'
            days.create:
              operationId: createDayByTournamentId
              description: >
                 `POST /tournaments/id/days'
  /tournaments/{id}/days:
    get:
      tags:
        - Tournament Days
      summary: Find days by tournament
      operationId: findDaysByTournamentId
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Days response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/TournamentDayCollection'
          links:
            self:
              operationId: findDaysByTournamentId
              description: >
                 `GET /tournaments/{id}days'
    post:
      tags:
        - Tournament Days
      summary: Add day to tournament
      operationId: createDayByTournamentId
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Day request
        content:
          'application/json' :
            schema:
              $ref: '#/components/schemas/TournamentDay'
        required: true
      responses:
        '200':
          description: Day response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/TournamentDay'
        '404':
          description: Tournament Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Day Conflict Error
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
          links:
            self:
              operationId: findDayByid
              description: >
                 `GET /tournaments/{id}/days/{id}'
            update:
              operationId: updateDayByid
              description: >
                 `PUT /tournaments/{id}/days/{id}'
        '422':
          description: Day Validation Error
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/ValidationErrorCollection'
          links:
            self:
              operationId: findDayByid
              description: >
                 `GET /tournaments/{id}/days/{id}'
            update:
              operationId: updateDayByid
              description: >
                 `PUT /tournaments/{id}/days/{id}'
  /tournaments/{id}/days/{id}:
    get:
      tags:
        - Tournament Days
      summary: Find day
      operationId: findDayByid
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Day response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/TournamentDay'
        '404':
          description: Day Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
          links:
            self:
              operationId: findDayByid
              description: >
                 `GET /tournaments/{id}/days/{id}'
            update:
              operationId: updateDayByid
              description: >
                 `PUT /tournaments/{id}/days/{id}'
            scorecards:
              operationId: findScorecardsByDayId
              description: >
                 `GET /days/{id}/scorecards'
    put:
      tags:
        - Tournament Days
      summary: Update day
      operationId: updateDayByid
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Day request
        content:
          'application/json' :
            schema:
              $ref: '#/components/schemas/TournamentDay'
        required: true
      responses:
        '200':
          description: Day response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/TournamentDay'
        '404':
          description: Day Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Day Validation Error
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/ValidationErrorCollection'
          links:
            self:
              operationId: findDayByid
              description: >
                 `GET /tournaments/{id}/days/{id}'
            update:
              operationId: updateDayByid
              description: >
                 `PUT /tournaments/{id}/days/{id}'
            scorecards:
              operationId: findScorecardsByDayId
              description: >
                 `GET /days/{id}/scorecards'
  /tournaments/{id}/players:
    get:
      tags:
        - Tournament Players
      summary: Find players by tournament
      operationId: findPlayersByTournamentId
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tournament Players response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/TournamentPlayerCollection'
          links:
            self:
              operationId: findPlayersByTournamentId
              description: >
                 `GET /tournaments/{id}/players'
            create:
              operationId: createTournamentPlayerByTournament
              description: >
                 `GET /tournaments/{id}/players'
    post:
      tags:
        - Tournament Players
      summary: Add player to tournament
      operationId: createTournamentPlayerByTournament
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Tournament Player request
        content:
          'application/json' :
            schema:
              $ref: '#/components/schemas/TournamentPlayer'
        required: true
      responses:
        '200':
          description: Tournament Player response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/TournamentPlayer'
        '422':
          description: Tournament Player Validation Error
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/ValidationErrorCollection'
          links:
            self:
              operationId: findTournamentPlayer
              description: >
                `GET /tournaments/{id}/players/{id}'
            update:
              operationId: updateTournamentPlayer
              description: >
                `PUT /ournaments/{id}/players/{id}'
  /tournaments/{id}/players/{id}:
    get:
      tags:
        - Tournament Players
      summary: Find player by tournament
      operationId: findPlayerByTournamentId
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tournament Player response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/TournamentPlayer'
        '404':
          description: Tournament Player Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Tournament Player Validation Error
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/ValidationErrorCollection'
          links:
            self:
              operationId: findTournamentPlayer
              description: >
                `GET /tournaments/{id}/players/{id}'
            update:
              operationId: updateTournamentPlayer
              description: >
                `PUT /ournaments/{id}/players/{id}'
    put:
      tags:
        - Tournament Players
      summary: Update tournament player
      operationId: updateTournamentPlayer
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tournament Player response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/TournamentPlayer'
        '404':
          description: Tournament Player Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
          links:
            self:
              operationId: findTournamentPlayer
              description: >
                `GET /tournaments/{id}/players/{id}'
            update:
              operationId: updateTournamentPlayer
              description: >
                `PUT /ournaments/{id}/players/{id}'
  /days/{id}/scorecards:
    get:
      tags: 
        - Day Scorecards
      summary: Find scorecards by day
      operationId: findScorecardsByDayId
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Day Scorecards response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/DayScorecardCollection'
          links:
            self:
              operationId: findScorecardsByDayId
              description: >
                 `GET /days/{id}/scorecards'
  /players:
    get:
      tags:
        - Players
      summary: Find players
      operationId: findPlayers
      parameters:
        - in: query
          name: active
          schema:
            type: boolean
          description: if true returns only active players, if false returns only inactive players, if not present returns all players
        - in: query
          name: senior
          schema:
            type: boolean
          description: if true returns only senior players, if false returns only non-senior players, if not present returns all players
      responses:
        '200':
          description: Players response
          content:
            'application/json' :
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerCollection'
          links:
            self:
              operationId: findPlayers
              description: >
                 `GET /players'
            create:
              operationId: createPlayer
              description: >
                 `POST /players'
    post:
      tags:
        - Players
      summary: Add player
      operationId: createPlayer
      requestBody:
        description: Player request
        content:
          'application/json' :
            schema:
              $ref: '#/components/schemas/Player'
        required: true
      responses:
        '200':
          description: Player response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Player'
        '422':
          description: Player Validation Error
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/ValidationErrorCollection'
          links:
            self:
              operationId: findPlayerByid
              description: >
                 `GET /players/{id}'
            update:
              operationId: updatePlayerByid
              description: >
                 `PUT /players/{id}'
  /players/{id}:
    get:
      tags:
        - Players
      summary: Find player
      operationId: findPlayerByid
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Player response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: Player Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
          links:
            self:
              operationId: findPlayerByid
              description: >
                 `GET /players/{id}'
            update:
              operationId: updatePlayerByid
              description: >
                 `PUT /players/{id}'
    put:
      tags:
        - Players
      summary: Update player
      operationId: updatePlayerByid
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Player request
        content:
          'application/json' :
            schema:
              $ref: '#/components/schemas/Player'
        required: true
      responses:
        '200':
          description: Player response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: Player Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Player Validation Error
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/ValidationErrorCollection'
          links:
            self:
              operationId: findPlayerByid
              description: >
                 `GET /players/{id}'
            update:
              operationId: updatePlayerByid
              description: >
               `PUT /players/{id}'
  /flights:
    get:
      tags:
        - Flights
      summary: Find flights
      operationId: findFlights
      responses:
        '200':
          description: Flights response
          content:
            'application/json' :
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlightCollection'
          links:
            self:
              operationId: findFlights
              description: >
                 `GET /flights'
            create:
              operationId: createFlight
              description: >
                 `POST /flights'
    post:
      tags:
        - Flights
      summary: Add flight
      operationId: createFlight
      requestBody:
        description: Flight request
        content:
          'application/json' :
            schema:
              $ref: '#/components/schemas/Flight'
        required: true
      responses:
        '200':
          description: Flight response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Flight'
        '422':
          description: Flight Validation Error
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/ValidationErrorCollection'
          links:
            self:
              operationId: findflightByid
              description: >
                 `GET /flights/{id}'
            update:
              operationId: updateFlightByid
              description: >
                 `PUT /flights/{id}'
  /flights/{id}:
    get:
      tags:
        - Flights
      summary: Find flight
      operationId: findFlightByid
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Flight response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Flight'
        '404':
          description: Flight Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
          links:
            self:
              operationId: findFlightByid
              description: >
                 `GET /flights/{id}'
            update:
              operationId: updateFlightByid
              description: >
                 `PUT /flights/{id}'
    put:
      tags:
        - Flights
      summary: Update flight
      operationId: updateFlightByid
      parameters:
       -  in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: Flight request
        content:
          'application/json' :
            schema:
              $ref: '#/components/schemas/Flight'
        required: true
      responses:
        '200':
          description: Flight response
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Flight'
        '404':
          description: Flight Not Found
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Flight Validation Error
          content:
            'application/json' :
              schema:
                $ref: '#/components/schemas/ValidationErrorCollection'
          links:
            self:
              operationId: findFlightByid
              description: >
                 `GET /flights/{id}'
            update:
              operationId: updateFlightByid
              description: >
               `PUT /flights/{id}'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    TournamentCollection:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Tournament'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    Tournament:
      type: object
      required:
        - name
        - days
      properties:
        name:
          type: string
          example: Spring 2020
          minItems: 1
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    PlayerCollection:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    Player:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          example: Tiger
        lastName:
          type: string
          example: Woods
        suffix:
          type: string
          example: Jr.
        phoneNumber:
          type: string
          example: 314-555-1212
        active:
          type: boolean
          example: true
        senior:
          type: boolean
          example: true
        emailAddress:
          type: string
          example: test@dogtowngolf.com
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    FlightCollection:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Flight'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    Flight:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: A
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    TournamentDayCollection:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TournamentDay'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    TournamentDay:
      type: object
      required:
        - date
        - course
      properties:
        date:
          type: string
          format: date
          example: 2020-07-21
        course:
          type: string
          example: Tamarack
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    TournamentPlayerCollection:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TournamentPlayer'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    TournamentPlayer:
      type: object
      required:
        - id
        - handicap
        - flights
      properties:
        id:
          type: number
          example: 1
        firstName:
          type: string
          example: Tiger
        lastName:
          type: string
          example: Woods
        suffix:
          type: string
          example: Jr.
        senior:
          type: boolean
          example: true
        handicap:
          type: number
          example: 0
        flights:
          type: array
          items:
            type: string
            minItems: 1
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    DayScorecardCollection:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Scorecard'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    Scorecard:
      type: object
      required:
        - id
        - player
      properties:
        id:
          type: number
          example: 1
        firstName:
          type: string
          example: Tiger
        lastName:
          type: string
          example: Woods
        suffix:
          type: string
          example: Jr.
        senior:
          type: boolean
          example: true
        handicap:
          type: number
          example: 0
        firstHole:
          type: number
          example: 0
        secondHole:
          type: number
          example: 0
        thirdHole:
          type: number
          example: 0
        fourthHole:
          type: number
          example: 0
        fifthHole:
          type: number
          example: 0
        sixthHole:
          type: number
          example: 0
        seventhHole:
          type: number
          example: 0
        eighthHole:
          type: number
          example: 0
        ninthHole:
          type: number
          example: 0
        tenthHole:
          type: number
          example: 0
        eleventhHole:
          type: number
          example: 0
        twelfthHole:
          type: number
          example: 0
        thirteenthHole:
          type: number
          example: 0
        fourteenthHole:
          type: number
          example: 0
        fifteenthHole:
          type: number
          example: 0
        sixteenthHole:
          type: number
          example: 0
        seventeenthHole:
          type: number
          example: 0
        eighteenthHole:
          type: number
        flights:
          type: array
          items:
            type: string
            minItems: 1
        skins:
          type: array
          items:
            type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    Link:
      type: object
      required:
        - name
      properties:
        rel:
          type: string
          example: self
        href:
          type: string
          example: http:localhost:8080/tournaments
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: resource not found
    ValidationErrorCollection:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      type: object
      required:
        - property
        - messages
      properties:
        property:
          type: string
          example: name
        messages:
          type: array
          items:
           type: string