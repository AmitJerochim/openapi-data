openapi: 3.0.0
info:
  description: This is a simple API of Pyxy App. CRUD Users / Categories and Activities
  version: "1.1.0"
  title: Pyxy API - Documentation
tags:
  - name: Users
    description: Users and user info of Pyxy App
  - name: Lists
    description: Lists and List info by user id
  - name: Tasks
    description: Tasks and task info by list id and user id
  - name: Activities
    description: Users activity list
  - name: Categories
    description: lists categories 
paths:
  /users:
    get:
      tags:
        - Users
      operationId: allUsers
      description: |
        List all Pyxy users and display their information
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '404':
          description: Invalid Data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
    post:
      tags:
        - Users
      operationId: CreateUsers
      description: Adds an item to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
        description: Inventory item to add
  /users/[userId]:
    get:
      tags:
        - Users
      operationId: getUserById
      description: |
        List all of user information
      parameters:
        - in: query
          required: true
          name: id
          description: User Id to show all infos of one user.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '404':
          description: Resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
    put:
      tags:
        - Users
      operationId: putUserById
      description: |
        Update user informations
      parameters:
        - in: query
          required: true
          name: id
          description: Update a specific user with ID.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '201':
          description: item updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
        description: Body 
    delete:
      tags:
        - Users
      operationId: deleteUser
      description: Delete a specific user with ID
      parameters:
        - in: query
          required: true
          name: id
          description: User Id to show all infos of one user.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '201':
          description: item deleted
        '400':
          description: 'invalid input, object invalid'
  /lists:
    get:
      tags:
        - Lists
      operationId: getAllLists
      description: |
        List all Pyxy users and display their information
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lists'
        '404':
          description: Ressource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'   
    post:
      tags:
        - Lists
      operationId: CreateLists
      description: Adds a new list by user id
      responses:
        '201':
          description: The "'+req.body.title+'" list has been successfully created with id '+id+'!
        '404':
          description: 'Ressource was not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'  
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lists'
  /lists/[listId]:
    get:
      tags:
        - Lists
      operationId: getOneListsByUser
      description: |
        Get all infos to one list by user id
      parameters:
        - in: query
          required: true
          name: listId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lists'
        '400':
          description: Ressource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
    put:
      tags:
        - Lists
      operationId: putListById
      description: |
        Update list informations
      parameters:
        - in: query
          required: true
          name: listId
          description: Update a specific user with ID.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '201':
          description: item updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lists'
        description: Body 
    delete:
      tags:
        - Lists
      operationId: deleteOneList
      description: |
        Delete a list with Id. BUT, if you delete a list with tasks inside, all tasks will be deleted with the list.
      parameters:
        - in: query
          required: true
          name: listId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '201':
          description: The category was deleted with success !
        '400':
          description: 'invalid input, object invalid'
  /tasks:
    get:
      tags:
        - Tasks
      operationId: getAllTasksByList
      description: |
        List all Tasks by List by user and display their information.
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tasks'
        '404':
          description: Ressource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'   
    post:
      tags:
        - Tasks
      operationId: CreateTask
      description: Adds a new task by list by user.
      responses:
        '201':
          description: The "'+req.body.title+'" task has been successfully created with id '+id+'!
        '404':
          description: 'Ressource was not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'  
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tasks'
  /tasks/[taskId]:
    get:
      tags:
        - Tasks
      operationId: getOneTaskByListByUser
      description: |
        Get all infos to one task by list by user.
      parameters:
        - in: query
          required: true
          name: taskId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '404':
          description: Ressource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'   
    put:
      tags:
        - Tasks
      operationId: putTaskById
      description: |
        Update list informations
      parameters:
        - in: query
          required: true
          name: taskId
          description: Update a specific user with ID.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '201':
          description: item updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tasks'
        description: Body 
    delete:
      tags:
        - Tasks
      operationId: deleteOneTask
      description: |
        Delete a task with Id.
      parameters:
        - in: query
          required: true
          name: taskId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '201':
          description: The category was deleted with success !
        '400':
          description: 'invalid input, object invalid'
  /activities:
    get:
      tags:
        - Activities
      operationId: getAllActivities
      description: |
        list all users activities of Pyxy App and display their information
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activities'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
    post:
      tags:
        - Activities
      operationId: CreateActivity
      description: Adds an item in the categories lists
      responses:
        '201':
          description: activity created
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activities'
  /activities/[activityId]:
    get:
      tags:
        - Activities
      operationId: GetOneActivity
      parameters:
        - in: query
          required: true
          name: activityId
          description: Update a specific user with ID.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      description: |
        Get one Activity of Pyxy App and display their information
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activities'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
    put:
      tags:
        - Activities
      operationId: putActivityById
      parameters:
        - in: query
          required: true
          name: activityId
          description: Update a specific user with ID.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      description: |
        Get one Activity of Pyxy App and display their information
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activities'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
    delete:
      tags:
        - Activities
      operationId: DeleteActivity
      parameters:
        - in: query
          required: true
          name: activityId
          description: Update a specific user with ID.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      description: Delete an activity with Id
      responses:
        '201':
          description: The activity was deleted with success !
        '400':
          description: 'invalid input, object invalid'
  /categories:
    get:
      tags:
        - Categories
      operationId: getAllCategories
      description: |
        List all Pyxy users and display their information
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'   
    post:
      tags:
        - Categories
      operationId: CreateCategories
      description: Adds an item in the categories lists
      responses:
        '201':
          description: categories created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categories'
  /categories/[categoriesId]:
    get:
      tags:
        - Categories
      operationId: getOneCategories
      description: |
        List all Pyxy users and display their information
      parameters:
        - in: query
          required: true
          name: categoriesId
          description: Update a specific user with ID.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
        '404':
          description: Ressource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'   
    put:
      tags:
        - Categories
      operationId: putCategoryById
      description: |
        Update list informations
      parameters:
        - in: query
          required: true
          name: categoriesId
          description: Update a specific user with ID.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '201':
          description: item updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categories'
        description: Body 
    delete:
      tags:
        - Categories
      operationId: DeleteCategory
      description: Delete a category with Id
      parameters:
        - in: query
          required: true
          name: categoriesId
          description: Update a specific user with ID.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      responses:
        '201':
          description: The category was deleted with success !
        '400':
          description: 'invalid input, object invalid'
components:
  schemas:
    Activities:
      type: object
      properties:
        id:
          type: string
          format: uuid
        list:
          type: string
          format: uuid
        userId: 
          type: string
          format: uuid
        content: 
          type: string
          example: "userId.firstname a ajouté \"Aller en Sicile retrouver mes origines\" dans sa liste $list.title"
    Categories:
      type: object
      properties:
        title: 
          type: string
        description: 
          type: string
        id:
          type: string
          format: uuid
    Lists:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        is_actived:
          type: boolean
        is_private:
          type: boolean
        description:
          type: string
          format: text
        title:
          type: string
        date: 
          $ref: '#/components/schemas/DateLists'
    DateLists:
      type: object
      properties:
        date_created:
          type: integer
          format: timestamp
          example: 1582554511524
        date_limit:
          type: integer
          format: timestamp
          example: 1893452396
    Tasks:
      type: object
      properties:
        id:
          type: string
          format: uuid
        list:
          type: string
          format: uuid
        date_done:
          type: integer
          format: timestamp
        date_created:
          type: integer
          format: timestamp
        name:
          type: string
          example: "Aller en Sicile"
        description:
          type: string
          example: "Retrouver mes origines"
        is_private:
          type: boolean
          example: false
        is_done:
          type: boolean
    ClientError:
      type: object
      properties:
        reason:
          type: string
        message:
          type: string
        type:
          type: string
        detail:
          type: object
    Users:
      type: object
      required:
        - email
        - uid
      properties:
        uid:
          type: string
          format: uuid
        admin:
          type: boolean
        email:
          type: string
          format: email
          example: exemple@pyxy.space
        is_deactivate:
          type: boolean
        gender: 
          type: string
          example: m
        nat: 
          type: string
          example: FR
        phone: 
          type: integer
          example: 061234567890
        name:
          $ref: '#/components/schemas/name'
        date:
          $ref: '#/components/schemas/date'
    name:
      required:
        - name
      properties:
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        username:
          type: string
          example: JohnDoe
      type: object
    date:
      properties:
        date_created:
          type: string
          example: Timestamp
        last_login:
          type: string
          example: Timestamp
      type: object
