openapi: 3.0.1
info:
  title: Shard
  version: '5'
paths:
  '/users/{userId}/Buildings':
    post:
      tags:
        - Buildings
      summary: Creates a building at a location.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            default: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
          text/json:
            schema:
              $ref: '#/components/schemas/Building'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Building'
      responses:
        '201':
          description: Returns the created object if the request is processed succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          description: "If the body is missing, does not contain a builder id, \r\ncontains a builder id that points to a unit that is not a builder,\r\nspecify a type other than mine, or if the unit is not over a planet"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If there is no user with such id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Buildings
      summary: Return all buildings of a user.
      parameters:
        - name: userId
          in: path
          description: Id of the user whose buildings are requested.
          required: true
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
        '404':
          description: If there is no user with such id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/users/{userId}/Buildings/{buildingId}':
    get:
      tags:
        - Buildings
      summary: Return information about one single building of a user.
      parameters:
        - name: userId
          in: path
          description: Id of the user whose units are requested.
          required: true
          schema:
            type: string
            default: ''
        - name: buildingId
          in: path
          description: Id of the building whose information are requested.
          required: true
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          description: >-
            If there is no user with such id, or if there is no unit with such
            id for that user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/users/{userId}/Buildings/{starportId}/queue':
    post:
      tags:
        - Buildings
      summary: >-
        Add a unit to the build queue of the starport. Currently immediatly
        returns the unit.
      parameters:
        - name: userId
          in: path
          description: Id of the user owning the building.
          required: true
          schema:
            type: string
            default: ''
        - name: starportId
          in: path
          description: >-
            Id of the starport that will eventually build the unit. Must be a
            starport.
          required: true
          schema:
            type: string
            default: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
          text/json:
            schema:
              $ref: '#/components/schemas/Unit'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: "If the unit type is invalid, if the building is not a starport, \r\nor if there is not enough resource to build the unit."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: >-
            If there is no user with such id, or if there is no unit with such
            id for that user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /Systems:
    get:
      tags:
        - Systems
      summary: 'Fetches all systems, and their planet'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StarSystem'
  '/Systems/{systemName}':
    get:
      tags:
        - Systems
      summary: 'Fetches a single system, and all its planets'
      parameters:
        - name: systemName
          in: path
          description: Name (identifier) of the system
          required: true
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StarSystem'
        '404':
          description: If the system does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Systems/{systemName}/planets':
    get:
      tags:
        - Systems
      summary: Fetches all planets of a single system
      parameters:
        - name: systemName
          in: path
          description: Name (identifier) of the sector
          required: true
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Planet'
        '404':
          description: If the system does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Systems/{systemName}/planets/{planetName}':
    get:
      tags:
        - Systems
      summary: Fetches a single planet of a system
      parameters:
        - name: systemName
          in: path
          description: Name (identifier) of the system
          required: true
          schema:
            type: string
            default: ''
        - name: planetName
          in: path
          description: Name (identifier) of the planet
          required: true
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Planet'
        '404':
          description: >-
            If the system does not exist, or if the planet does not exist in
            that system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/users/{userId}/Units':
    get:
      tags:
        - Units
      summary: Return all units of a user.
      parameters:
        - name: userId
          in: path
          description: Id of the user whose units are requested.
          required: true
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
        '404':
          description: If there is no user with such id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/users/{userId}/Units/{unitId}':
    get:
      tags:
        - Units
      summary: Return information about one single unit of a user.
      parameters:
        - name: userId
          in: path
          description: Id of the user whose units are requested.
          required: true
          schema:
            type: string
            default: ''
        - name: unitId
          in: path
          description: Id of the unit whose information are requested.
          required: true
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '404':
          description: >-
            If there is no user with such id, or if there is no unit with such
            id for that user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Units
      summary: "Change the status of a unit of a user.\r\nRight now, only its position (system and planet) can be changed - which is akin to moving it.\r\nIf the unit does not exist and the authenticated user is administrator, creates the unit"
      description: "Only the \"system\" and \"planet\" fields are applied. \r\nThe \"id\" must be identical to the one in the URL.\r\nOther fields can be simply ignored from the request, though the client is expected not to try to specify values different than the existing ones."
      parameters:
        - name: userId
          in: path
          description: Id of the user whose units are requested.
          required: true
          schema:
            type: string
            default: ''
        - name: unitId
          in: path
          description: Id of the id whose information are requested.
          required: true
          schema:
            type: string
            default: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
          text/json:
            schema:
              $ref: '#/components/schemas/Unit'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: >-
            If there is no body, or if the id of the unit in the body is
            different than the one in the url.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: >-
            If there is no unit with such id for that user and the request is
            not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: >-
            If there is no unit with such id for that user and the request is
            authenticated but not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: If there is no user with such id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/users/{userId}/Units/{unitId}/location':
    get:
      tags:
        - Units
      summary: >-
        Returns more detailed information about the location a unit of user
        currently is about.
      parameters:
        - name: userId
          in: path
          description: Id of the user whose units are requested.
          required: true
          schema:
            type: string
            default: ''
        - name: unitId
          in: path
          description: Id of the id whose information are requested.
          required: true
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitLocation'
        '404':
          description: >-
            If there is no user with such id, or if there is no unit with such
            id for that user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Users/{id}':
    put:
      tags:
        - Users
      summary: Create a new user or update its resources
      description: "Giving an invalid id (such as som$thing) can result either in a 404 or 400 depending on the implementation.\r\nCreating the user also initialize it to a \"new user\" state; currently, this means giving him one single unit, a scout, in a random system."
      parameters:
        - name: id
          in: path
          description: >-
            Id chosen for the user. Must be consistent with the body. Must not
            be empty. Can contain only alphanumerical characters, underscores,
            and dashes.
          required: true
          schema:
            type: string
            default: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          text/json:
            schema:
              $ref: '#/components/schemas/User'
          application/*+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: >-
            If there is no body, or if the id in the body is different than the
            one in the url.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Users
      summary: Returns details of an existing user
      parameters:
        - name: id
          in: path
          description: Id of the existing user.
          required: true
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: If there is no user with such id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    Building:
      type: object
      properties:
        id:
          type: string
          description: Id of the building. Ignored when creating a new building.
          example: e2f39404-58f9-4f0d-911a-9923969283a8
        type:
          type: string
          description: 'Type of building. Right now, only "mine" is valid'
          example: mine
        resourceCategory:
          type: string
          description: Kind of resource extracted. Valid only if the type is "mine"
          example: liquid
        builderId:
          type: string
          description: >-
            Id of the unit to use to build. Only sent to the server, never
            returned.
          example: 9cc8f0cc-5b4c-439a-b60c-398bfb7600a6
        system:
          type: string
          description: Name of the system the building is located on
          example: alpha-centauri
        planet:
          type: string
          description: Name of the planet the building is located on
          example: mars
        isBuilt:
          type: boolean
          description: True if built; False if building is in progress
          example: true
        estimatedBuildTime:
          type: string
          description: "Date at which the building is expected to be ready.\r\nNull if built"
          format: date-time
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
        instance:
          type: string
        extensions:
          type: object
          additionalProperties:
            type: object
          readOnly: true
      additionalProperties: false
    Unit:
      type: object
      properties:
        id:
          type: string
          description: Id of the unit
          example: 9cc8f0cc-5b4c-439a-b60c-398bfb7600a6
        type:
          type: string
          description: 'Type of unit. Right now, only "scout" is valid'
          example: scout
        system:
          type: string
          description: Name of the system the unit currently is
          example: alpha-centauri
        planet:
          type: string
          description: >-
            Name of the planet the unit currently is orbiting around or landed
            on
          example: mars
        destinationSystem:
          type: string
          description: Name of the system the unit is moving toward
          example: alpha-centauri
        destinationPlanet:
          type: string
          description: Name of the planet the unit is moving toward
          example: mars
        estimatedTimeOfArrival:
          type: string
          description: Date at which the unit is expected to arrive
          format: date-time
        health:
          type: integer
          description: Amount of health points the unit has.
          format: int32
          example: 20
      additionalProperties: false
      description: "Unit. \r\nCurrently, only spaceships of class \"scout\" exists, thought this may change in future versions."
    Planet:
      type: object
      properties:
        name:
          type: string
          description: Name of a planet. Serves as identifier
          readOnly: true
          example: mars
        size:
          type: integer
          description: Size of the planet
          format: int32
          readOnly: true
          example: 42
      additionalProperties: false
    StarSystem:
      type: object
      properties:
        name:
          type: string
          description: Name of the system. Serves as identifier
          readOnly: true
          example: alpha-centauri
        planets:
          type: array
          items:
            $ref: '#/components/schemas/Planet'
          description: List of planets contained within the system
          readOnly: true
      additionalProperties: false
    UnitLocation:
      type: object
      properties:
        system:
          type: string
          description: Name of the system the unit currently is
          example: alpha-centauri
        planet:
          type: string
          description: >-
            Name of the planet the unit currently is orbiting around or landed
            on
          example: mars
        resourcesQuantity:
          type: object
          additionalProperties:
            type: integer
            format: int32
          description: "List of resources present on the planet, and for each of them, quantity present.\r\nRight now, there are 5 solid resources (Carbon, Iron, Gold, Aluminium, Titanium), one liquid (Water) and one gaseous (Oxygen).\r\nThe total quantity of resources of a given type cannot exceed the size of the planet.\r\nExample : { \"Gold\" : 42, \"Iron\" : 13, \"Water\" : 78 }"
      additionalProperties: false
      description: >-
        Additional information regarding the location the unit currently is
        about
    User:
      type: object
      properties:
        id:
          type: string
          description: Id of the user
          example: john.doe
        pseudo:
          type: string
          description: Name displayed
          example: Johny
        dateOfCreation:
          type: string
          description: 'Date at which the user was created originally, with time zone.'
          format: date-time
        resourcesQuantity:
          type: object
          additionalProperties:
            type: integer
            format: int32
          description: "List of resources present on the planet, and for each of them, quantity present.\r\nRight now, there are 5 solid resources (Carbon, Iron, Gold, Aluminium, Titanium), one liquid (Water) and one gaseous (Oxygen).\r\nThe total quantity of resources of a given type cannot exceed the size of the planet.\r\nExample : { \"Gold\" : 42, \"Iron\" : 13, \"Water\" : 78 }"
      additionalProperties: false
