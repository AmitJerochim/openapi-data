openapi: 3.0.0
info:
  title: Config API
  description: Global configuration store api
  version: "3.2.0"
servers:
  - description: AWS Servers
    url: https://6ieyqq8uu7.execute-api.eu-west-1.amazonaws.com/default
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/pailkun/api-config/3.2.0
tags:
  - name: menu
    description: menu items
  - name: project
    description: third-party project info
  - name: coordinate
    description: map coordinates
  - name: document
    description: document info
paths:
  /menu:
    get:
      tags:
        - menu
      summary: all menus
      description: |
        Get all menus
      operationId: allMenus
      parameters:
        - name: group
          in: query
          description: filter by group
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: projectCode
          in: query
          description: filter by project code
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: parentId
          in: query
          description: filter by parent id
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - $ref: '#/components/parameters/PaginationSkip'
        - $ref: '#/components/parameters/PaginationLimit'
      responses:
        '200':
          description: all project menu items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuPageResult'
    post:
      tags:
        - menu
      summary: create menu
      description: |
        Create new menu
      operationId: createMenu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMenu'
        required: true
      responses:
        '201':
          description: Successfully Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/menu/{id}':
    get:
      tags:
        - menu
      summary: menu by id
      description: |
        Get menu by id
      operationId: getMenuById
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - menu
      summary: update menu by id
      description: |
        Update menu by id
      operationId: updateMenuById
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMenu'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - menu
      summary: delete menu by id
      description: |
        Delete menu by id
      operationId: deleteMenuById
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /project:
    get:
      tags:
        - project
      summary: all projects
      description: |
        Get all projects
      operationId: allProjects
      parameters:
        - $ref: '#/components/parameters/PaginationSkip'
        - $ref: '#/components/parameters/PaginationLimit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectPageResult'
    post:
      tags:
        - project
      summary: create project
      description: |
        Create new project
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        '201':
          description: Successfully Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/project/{code}':
    get:
      tags:
        - project
      summary: project by code
      description: |
        Get project by code
      operationId: getProjectByCode
      parameters:
        - name: code
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - project
      summary: update project by code
      description: |
        Update project by code
      operationId: updateProjectByCode
      parameters:
        - name: code
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProject'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - project
      summary: delete project by code
      description: |
        Delete project by code
      operationId: deleteProjectByCode
      parameters:
        - name: code
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /coordinate:
    get:
      tags:
        - coordinate
      summary: all coordinates
      description: |
        Get all coordinates
      operationId: allCoordinates
      parameters:
        - $ref: '#/components/parameters/PaginationSkip'
        - $ref: '#/components/parameters/PaginationLimit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoordinatePageResult'
    post:
      tags:
        - coordinate
      summary: create coordinate
      description: |
        Create new coordinate
      operationId: createCoordinate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coordinate'
        required: true
      responses:
        '201':
          description: Successfully Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coordinate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/coordinate/{countryCode}':
    get:
      tags:
        - coordinate
      summary: coordinate by countryCode
      description: |
        Get coordinate by countryCode
      operationId: getCoordinateByCountryCode
      parameters:
        - name: countryCode
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coordinate'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - coordinate
      summary: update coordinate by countryCode
      description: |
        Update coordinate by countryCode
      operationId: updateCoordinateByCountryCode
      parameters:
        - name: countryCode
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCoordinate'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coordinate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - coordinate
      summary: delete coordinate by countryCode
      description: |
        Delete coordinate by countryCode
      operationId: deleteCoordinateByCountryCode
      parameters:
        - name: countryCode
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coordinate'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /document:
    get:
      tags:
        - document
      summary: all documents
      description: |
        Get all documents
      operationId: allDocuments
      parameters:
        - name: group
          in: query
          description: filter by group
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: projectCode
          in: query
          description: filter by project code
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: position
          in: query
          description: filter by position
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - $ref: '#/components/parameters/PaginationSkip'
        - $ref: '#/components/parameters/PaginationLimit'
      responses:
        '200':
          description: all documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPageResult'
    post:
      tags:
        - document
      summary: create document
      description: |
        Create new document
      operationId: createDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocument'
        required: true
      responses:
        '201':
          description: Successfully Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/document/{id}':
    get:
      tags:
        - document
      summary: document by id
      description: |
        Get document by id
      operationId: getDocumentById
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - document
      summary: update document by id
      description: |
        Update document by id
      operationId: updateDocumentById
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocument'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - document
      summary: delete document by id
      description: |
        Delete document by id
      operationId: deleteDocumentById
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
components:
  schemas:
    Menu:
      required:
        - group
        - name
        - position
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Existence of Policies on Blue Economy
        parentId:
          type: integer
          example: 10
        group:
          type: string
          example: indicators
        projectCode:
          type: string
          example: P20
        position:
          type: integer
          example: 2
        iconUrl:
          type: string
          example: 'https://s3.aws.com/bucket1/p30.png'
        shareCode:
          type: string
          example: 'https://infogram.com/project/1'
    CreateMenu:
      required:
        - group
        - name
        - position
      type: object
      properties:
        name:
          type: string
          example: GDP
        group:
          type: string
          example: country
        position:
          type: integer
          example: 4
        parentId:
          type: integer
          example: 10
        projectCode:
          type: string
          example: P20
        iconUrl:
          type: string
          example: 'https://s3.aws.com/bucket1/p30.png'
    UpdateMenu:
      type: object
      properties:
        name:
          type: string
          example: GDP
        group:
          type: string
          example: country
        position:
          type: integer
          example: 4
        parentId:
          type: integer
          example: 10
        projectCode:
          type: string
          example: P20
        iconUrl:
          type: string
          example: 'https://s3.aws.com/bucket1/p30.png'
    MenuPageResult:
      type: object
      properties:
        limit:
          type: integer
          example: 100
        skip:
          type: integer
          example: 0
        results:
          type: array
          items: 
            $ref: '#/components/schemas/Menu'
    Project:
      required:
        - code
      type: object
      properties:
        code:
          type: string
          example: P21
        tags:
          type: string
          example: country
        shareCode:
          type: string
          example: 'https://infogram.com/project/hghgj'
        numberOfPages:
          type: integer
          example: 4
    UpdateProject:
      type: object
      properties:
        tags:
          type: string
          example: indicator
        shareCode:
          type: string
          example: 'https://infogram.com/project/hghgj'
        numberOfPages:
          type: integer
          example: 4
    ProjectPageResult:
      type: object
      properties:
        limit:
          type: integer
          example: 100
        skip:
          type: integer
          example: 0
        results:
          type: array
          items: 
            $ref: '#/components/schemas/Project'
    Coordinate:
      required:
        - countryCode
        - countryEnglishTitle
        - latitude
        - longitude
      type: object
      properties:
        countryCode:
          type: string
          example: ZA
        countryEnglishTitle:
          type: string
          example: South Africa
        latitude:
          type: number
          example: -29.6482
        longitude:
          type: number
          example: 23.1067
    UpdateCoordinate:
      type: object
      properties:
        countryEnglishTitle:
          type: string
          example: South Africa
        latitude:
          type: number
          example: -29.6482
        longitude:
          type: number
          example: 23.1067
    CoordinatePageResult:
      type: object
      properties:
        limit:
          type: integer
          example: 100
        skip:
          type: integer
          example: 0
        results:
          type: array
          items: 
            $ref: '#/components/schemas/Coordinate'
    Document:
      required:
        - group
        - url
        - position
      type: object
      properties:
        id:
          type: integer
          example: 1
        group:
          type: string
          example: indicators
        projectCode:
          type: string
          example: P20
        position:
          type: integer
          example: 2
        url:
          type: string
          example: 'https://s3.aws.com/bucket1/p30.pdf'
    CreateDocument:
      required:
        - group
        - url
        - position
      type: object
      properties:
        group:
          type: string
          example: country
        position:
          type: integer
          example: 4
        projectCode:
          type: string
          example: P20
        url:
          type: string
          example: 'https://s3.aws.com/bucket1/p30.pdf'
    UpdateDocument:
      type: object
      properties:
        group:
          type: string
          example: country
        position:
          type: integer
          example: 4
        projectCode:
          type: string
          example: P20
        url:
          type: string
          example: 'https://s3.aws.com/bucket1/p30.png'
    DocumentPageResult:
      type: object
      properties:
        limit:
          type: integer
          example: 100
        skip:
          type: integer
          example: 0
        results:
          type: array
          items: 
            $ref: '#/components/schemas/Document'
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          example: NotFound
        message:
          type: string
          example: project with code P21 was not found
  
  responses:
    404Error:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    400Error:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    5xxError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  parameters:
    PaginationLimit:
      name: limit
      in: query
      description: maximum number of records to return
      required: false
      style: form
      explode: true
      schema:
        minimum: 0
        default: 100
        type: integer
        format: int32
    PaginationSkip:
      name: skip
      in: query
      description: number of records to skip for pagination
      required: false
      style: form
      explode: true
      schema:
        minimum: 0
        default: 0
        type: integer
        format: int32
