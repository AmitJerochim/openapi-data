openapi: 3.0.0
info:
  version: "v1"
  title: 'Flexigroup DGCM''s APIs '
  description: 'Flexigroup DGCM''s APIs. You can see the designs here:<br/> https://www.figma.com/file/K8xgPWDWcgEiSa6cTB39He/humm-website---UI---v4?node-id=606%3A3734 <br/> https://www.figma.com/file/KmazTJM7dOu6Xyj7eUnvIx/humm---iOS---UX-UI---Current-(In-production)?node-id=518%3A5 '
tags:
- name: Tag
  description: Category management
- name: Autocomplete
  description: Autocomplete suggestion
- name: Card
  description: Browsing the cards
- name: Order
  description: Review the order
- name: Config 
  description: configuration
- name: E-Commerce
  description: Payment gateway
- name: PrezzeeExcelSheet
  description: Read cards from file and save to database
- name: PrezzeeCache
  description: Save all avaiable prezzee cards
paths:
  /Cache:
    get:
      tags:
        - PrezzeeCache
      summary: Save all avaiable prezzee cards in DB
      description: Save all avaiable prezzee cards in DB
      operationId: Products
      responses:
        '200':
          description: All available cards added to Db successfully.
        '500':
          description: Server Internal Error
  /prezzeeExcel:
    post:
      tags:
        - PrezzeeExcelSheet
      summary: Read cards from file and save to database
      description: Read cards from file and save to database.
      operationId: PrezzeeExcel
      security: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PrezzeeExcelBody'
        description: There are two parameters, one of which is ExcelFile for uploading the file, which is intended for reading available card information and the other parameter is the ExcelApiKey security key for reading the file.
        required: true
      responses:
        '200':
          description: All available cards added to Db successfully.
        '400':
          description: Bad Request - ExcelApiKey is not valid.
        '500':
          description: Server Internal Error
  /ecommerce/{ProductCode}/cancel/{OrderId}: 
    get:
      tags:
        - E-Commerce 
      summary: Cancel E-Commerce
      description:  When the transaction is failed after that it call this API.
      operationId: CancelEcommerce
      security: []
      parameters:
        - name: ProductCode
          in: path
          description: This parameter determines which product it is.
          required: true
          schema:
            type: string
            example: HUMM
        - name: OrderId
          in: path
          description: This parameter determines orderId that user bought the card.
          required: true
          schema:
            type: string
            format: uuid
            example: '00000000-0000-0000-0000-000000000000'
      responses:
        '200':
          description: Redirect to  DGCM.WEB
  /ecommerce/{ProductCode}/complete/{OrderId}: 
    get:
      tags:
        - E-Commerce 
      summary: Complete E-Commerce
      description:  When the transaction is successful after that it call this API.
      operationId: CompleteEcommerce
      security: []
      parameters:
        - name: x_account_Id
          in: query
          schema:
            type: string
        - name: x_test
          in: query
          schema:
            type: string
        - name: x_amount
          in: query
          schema:
            type: string
        - name: x_currency
          in: query
          schema:
            type: string
        - name: x_reference
          in: query
          schema:
            type: string
        - name: x_purchase_number
          in: query
          schema:
            type: string
        - name: x_gateway_reference
          in: query
          schema:
            type: string
        - name: x_result
          in: query
          schema:
            type: string
        - name: x_timestamp
          in: query
          schema:
            type: string
        - name: x_signature
          in: query
          schema:
            type: string
        - name: ProductCode
          in: path
          description: This parameter determines which product it is.
          required: true
          schema:
            type: string
            example: HUMM
        - name: OrderId
          in: path
          description: This parameter determines orderId that user bought the card.
          required: true
          schema:
            type: string
            format: uuid
            example: '00000000-0000-0000-0000-000000000000'
      responses:
        '200':
          description: Redirect to e-commerce
  /config: 
    get:
      tags:
        - Config
      summary: Gets configuration
      description: load configuration for specific theme and environment.
      operationId: get config
      security: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '500':
          description: Server Intrnal Error  
  /tags:
    #operation specific security
    get:
      tags:
        - Tag
      summary: Gets all tags
      description: Gets all tags, Tags are using to categorizing the cards and filter cards
      operationId: getTags
      parameters:
        - $ref: "#/components/parameters/productCodeParam"
        - $ref: "#/components/parameters/appTypeParam"
        - $ref: "#/components/parameters/appVerParam"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
        '500':
          description: Server Internal Error
        
  /cards:
    post:
      tags:
        - Card
      summary: Retrieve all cards
      description: Gets all cards available. This API can be used for search page too. Also when clicking on a tag, or using filters, then this API can be used.
      operationId: getCards
      parameters:
        - $ref: "#/components/parameters/productCodeParam"
        - $ref: "#/components/parameters/appTypeParam"
        - $ref: "#/components/parameters/appVerParam"
      requestBody:
        description: All request parameters are optional, if no parameter was sent, all cards will be retrieved.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchBody'
      responses:
        '200':
          description: successful
          headers:
            x-count:
              schema:
                type: integer
              description: 'count of all cards'
            x-page:
              schema:
                type: integer
              description: 'current page number'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cards'
        '400':
          description: Bad Request
        '500':
          description: Server Intrnal Error
  /cards/{cardId}:
    get:
      tags:
        - Card
      summary: Gets details of a card
      description: Gets details of a card to fill the Card Detail Page in the website
      operationId: getCardById
      parameters:
        - $ref: "#/components/parameters/cardIdParam"
        - $ref: "#/components/parameters/productCodeParam"
        - $ref: "#/components/parameters/appTypeParam"
        - $ref: "#/components/parameters/appVerParam"
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDetails'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Intrnal Error
    post:
      tags:
        - Card
      summary: When user clicks on Buy botton
      description: When user clicks on Buy for myself or buy for a friend this API is called. The response contains a code where is come frome the payment system. (In other words a transaction will be created and this is the referrer code of that transaction. When client gets this code, then redirects user to the payment pages with this code.
      operationId: buyCard
      parameters:
        - $ref: "#/components/parameters/cardIdParam"
        - $ref: "#/components/parameters/productCodeParam"
        - $ref: "#/components/parameters/appTypeParam"
        - $ref: "#/components/parameters/appVerParam"
      security:
        - oAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardBuy'
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ecommerce'
        '400':
          description: Bad Request
                  - 'The selected card is not available'
                  
        '401':
          description: validating/Authenticating user (security)
        '404':
          description: Not Found
                  - 'The selected card does not exist'
        '500':
          description: Server Intrnal Error 
  '/cards/redirect/shop':
    post:
      tags:
        - Card
      summary: Redirect
      description: Test Redirect to the E-Commerce to payment
      operationId: redirectShop
      responses:
        '307':
          description: Redirect to the E-Commerce to payment the card. 
        '500':
          description: Server Internal Error
  '/suggestions':
    post:
      tags:
        - Autocomplete
      summary: Search box autocomplete Api
      description: This API is just for search suggestions in search box and used when user is start typing. If send without any keyword,  will suggest some cards and tags. It's different from /cards
      operationId: cardSuggestion
      parameters:
        - name: query
          in: query
          description: It is Card name and Tag name to return
          schema:
            type: string
        - $ref: "#/components/parameters/productCodeParam"
        - $ref: "#/components/parameters/appTypeParam"
        - $ref: "#/components/parameters/appVerParam"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
        '400':
          description: Bad Request
        '404':
          description: No Content
        '500':
          description: Server Internal Error
  
  '/orders/{orderId}':
    get:
      tags:
        - Order
      summary: Gets details of a Card Order that has been successfully bought.
      description: This is API is used for the last page on Corporate Website when user has  confirmed and bought a Card and Just we want to show him what he had bought :)
      operationId: getOrderDetails
      security: 
        - oAuth: []
      parameters:
        - name: orderId
          in: path
          description: A unique id for an order
          required: true
          schema:
            type: string
            format: uuid
            default: '00000000-0000-0000-0000-000000000000'
        - $ref: "#/components/parameters/productCodeParam"
        - $ref: "#/components/parameters/appTypeParam"
        - $ref: "#/components/parameters/appVerParam"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrder'
        '400':
          description: Bad Request
                  - 'OrderId is not valid'
        '401':
          description: Authenticating User
                - 'User is not logged in'
        '403':
          description: Access checkup
                - 'User does not has access to this order'     
        '404':
          description: Not Found
                  - 'Could not found this order'
        '409':
          description: Conflict
                  - 'Order has been confirmed previously'
                  - 'Order has expired or deleted' 
        '500':
          description: Server Internal Error  
                  - 'Error communicating with card provider'
  '/giftCards':
    get:
      tags: 
        - Order
      summary: This API returns list of bought Gift Cards
      description: This API returns list of bought Gift Cards that can filterred by their status. i.e. User's Cards and Gifted Cards
      operationId: GetAllGiftCards
      security: 
        - oAuth: []
      parameters:
        - $ref: "#/components/parameters/productCodeParam"
        - $ref: "#/components/parameters/appTypeParam"
        - $ref: "#/components/parameters/appVerParam"
      responses:
        '200': 
          description: Successful. <br/>Status values in the response <br/> `0` Gift-Card has <b>Expired</b><br/> `1` Gift-Card is <b>Active</b><br/>`2` Gift-Card has <b>Gifted</b> to a friend.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCards'
        '400':
          description: Bad request
        '401':
          description: Validating/Authenticating User (security)
        '500':
          description: Server Internal Error
  '/giftCards/{status}':
    get:
      tags: 
        - Order
      summary: This API returns list of bought Gift Cards
      description: This API returns list of bought Gift Cards that can filterred by their status. i.e. User's Cards and Gifted Cards
      operationId: GetGiftCards
      security: 
        - oAuth: []
      parameters:
        - name: status
          in: path
          description: This status determines that API returns the bought Cards for own user or cards that has gifted to his/her friends. <br/>
            <strong>\'Active\'</strong> is used for active Gift Cards that had bought for own user.<br/>
            <strong>\'Expired\`</strong> is used for users\' own Gift Cards that their expiry has arrived.<br/>
            And <strong>\`Gifted\`</strong> is used for Gift Cards that user has bought for his/her friends. (in this case the API returns both Cards that are active or has expired)
          required: true
          schema:
            type: string
            enum: [Active, Expired, Gifted]
            example: Active 
        - $ref: "#/components/parameters/productCodeParam"
        - $ref: "#/components/parameters/appTypeParam"
        - $ref: "#/components/parameters/appVerParam"
      responses:
        '200': 
          description: Successful. <br/>Status values in the response <br/> `0` Gift-Card has <b>Expired</b><br/> `1` Gift-Card is <b>Active</b><br/>`2` Gift-Card has <b>Gifted</b> to a friend.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCards'
        '400':
          description: Bad request
        '401':
          description: Validating/Authenticating user (security)
        '500':
          description: Server internal error
components:
  parameters: 
    cardIdParam:
      name: cardId
      in: path
      description: 'ID of Card to return'
      required: true
      schema:
        type: string
        format: uuid
        default: '00000000-0000-0000-0000-000000000000'
    productCodeParam:
      name: product-code
      in: header
      description: 'A unique code that determins witch App is calling the API. e.g.: HUMM , BUNDLE , SKY , ...'
      required: true
      schema:
        type: string
        default: 'HUMM'
    appTypeParam:
      name: app-type
      in: header
      description: 'The platform that client is running. e.g.: ANDROID ,  IOS , WEB'
      required: true
      schema:
        type: string
        default: 'WEB'
    appVerParam:
      name: app-ver
      in: header
      description: 'Client''s app version'
      required: true
      schema:
        type: string
        default: '1.4.2'
  securitySchemes:
    oAuth:    # <---- arbitrary name
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        implicit:
          authorizationUrl: https://api.example.com/oauth2/authorize
          scopes: {}
  schemas:
    
    Ecommerce: 
      type: object
      properties:  
        x_account_id:
          type: string 
          default: ''  
        x_currency:
          type: string 
          default: 'AUD'  
        x_amount:
          type: number 
          default: 500.00
        x_reference:
          type: string 
          default: '1234'  
        x_customer_billing_country:
          type: string 
          default: ''  
        x_shop_name:
          type: string 
          default: 'DGCM'  
        x_invoice:
          type: string 
          default: ''  
        x_test:
          type: string 
          default: 'false'  
        x_description:
          type: string 
          default: ''  
        x_customer_email:
          type: string 
          default: ''  
        x_url_callback:
          type: string 
          default: ""  
        x_url_cancel:
          type: string 
          default:  "" 
        x_url_complete:
          type: string 
          default:   "" 
        x_signature:
          type: string 
          default:   ""
    Theme:
      type: object
      properties:
        themeId:
          type: string
          format: uuid
          default: '00000000-0000-0000-0000-000000000000'
        name:
          type: string
          default: 'COLES'
        imageUrl:
          type: string
          default: 'https://files-sb.prezzee.com.au/media/sku-theme-designs/coles-bf6e5d02-5763-4c98-b1ce-fc3e7c1219da/coles.jpg'
    Config:
      type: object
      properties:
       apiBaseUrl:
        type: string
       apiUri: 
        type: object
       buyCardUrl:
        type: string
       product:
        type: string
      example: 
          apiBaseUrl: 'http://dev.bundll.dgcm.flexigroup.bountye.com/'
          apiUri:
            category: tags
            cards: cards
            order: orders
          buyCardUrl: 'https://test3-cart.shophumm.com.au/?platform=default'
          product: SKYE
    Tag:
      type: object
      properties:
        tagId:
          type: string
          format: uuid
          default: '00000000-0000-0000-0000-000000000000'
        name:
          type: string
          default: 'Fashion'
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      example:
          - tagId: '00000000-0000-0000-0000-000000000001'
            name:  'Fashion'
          - tagId: '00000000-0000-0000-0000-000000000002'
            name:  'kid'
    Price:
      type: object
      properties:
        priceId:
          type: string
          format: uuid
          default: '00000000-0000-0000-0000-000000000000'
        name:
          type: string
          default: '10000'
        stockLevel:
          type: string
          default: 'GOOD'
        amount:
          type: number
          default: 10000.00
    CardDetails:
      type: object
      properties:
        cardId:
          type: string
          format: uuid
          default: '00000000-0000-0000-0000-000000000000'
        name:
          type: string
          default: 'Coles'
        description :
          type: string
          default: 'Description about coles'
        # currency :
        #   type: string
        #   default: 'AUD'
        themes:
          type: array
          items:
            $ref: '#/components/schemas/Theme'
        tags:
          type: array
          items:
            type: string
          example: 
             - Fashion
             - For her
             - Kid
        prices:
          type: array
          items:
            $ref: '#/components/schemas/Price'
    Card:
      type: object
      properties:
        cardId:
          type: string
          format: uuid
          default: '00000000-0000-0000-0000-000000000000'
        name:
          type: string
          default: 'Coles'
        imageUrl:
          type: string
          default: 'https://files-sb.prezzee.com.au/media/sku-theme-designs/coles-bf6e5d02-5763-4c98-b1ce-fc3e7c1219da/coles.jpg'
    CardWithTag:
      type: object
      properties:
        cardId:
          type: string
          format: uuid
          default: '00000000-0000-0000-0000-000000000000'
        name:
          type: string
          default: 'Coles'
        imageUrl:
          type: string
          default: 'https://files-sb.prezzee.com.au/media/sku-theme-designs/coles-bf6e5d02-5763-4c98-b1ce-fc3e7c1219da/coles.jpg'
        tags:
          type: array
          items:
            type: string
          example: 
             - Fashion
             - For her
             - Kid
    Search:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          example: 
             - Fashion
             - For her
             - Kid
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
          example: 
            - cardId: 00000000-0000-0000-0000-000000000000
              name: Coles
              imageUrl: https://files-sb.prezzee.com.au/media/sku-theme-designs/coles-bf6e5d02-5763-4c98-b1ce-fc3e7c1219da/coles.jpg
            - cardId: 00000000-0000-0000-0000-000000000023
              name: Kids Prezzee
              imageUrl: https://files-sb.prezzee.com.au/media/sku-theme-designs/kids-prezzee-card-dc5393b7-4192-4bbc-aa13-3b8457803bf2/kids-prezzee-card.jpg
            - cardId: 00000000-0000-0000-0000-000000000673
              name: Kathmandu
              imageUrl: https://files-sb.prezzee.com.au/media/sku-theme-designs/kathmandu-stream-9e1d12b4-27ac-42c1-a6bb-35e642d5d47c/kathmandu-stream.jpg
    Cards:
      type: array
      items:
        $ref: '#/components/schemas/CardWithTag'
      example: 
        - cardId: 00000000-0000-0000-0000-000000000000
          name: Coles
          imageUrl: https://files-sb.prezzee.com.au/media/sku-theme-designs/coles-bf6e5d02-5763-4c98-b1ce-fc3e7c1219da/coles.jpg
        - cardId: 00000000-0000-0000-0000-000000000023
          name: Kids Prezzee
          imageUrl: https://files-sb.prezzee.com.au/media/sku-theme-designs/kids-prezzee-card-dc5393b7-4192-4bbc-aa13-3b8457803bf2/kids-prezzee-card.jpg
        - cardId: 00000000-0000-0000-0000-000000000673
          name: Kathmandu
          imageUrl: https://files-sb.prezzee.com.au/media/sku-theme-designs/kathmandu-stream-9e1d12b4-27ac-42c1-a6bb-35e642d5d47c/kathmandu-stream.jpg
    SearchBody:
      type: object
      properties:
        query:
          type: string
          default: "Co"
        tags:
          type: array
          items:
            type: string
          example: 
             - Fashion
             - For her
             - Kid
    PrezzeeExcelBody:
      type: object
      properties:
        ExcelFile:
          type: string
          format: binary
        ExcelApiKey:
          type: string
    CardBuy:
      type: object
      properties:
        priceId:
          type: string
          format: uuid
          default: '00000000-0000-0000-0000-000000000000'
        themeId:
          type: string
          format: uuid
          default: '00000000-0000-0000-0000-000000000000'
        friend:
          $ref: '#/components/schemas/Friend'
    Friend:
      type: object
      properties:
        name:
          type: string
          default: "Vaness Smith"
        phone:
          type: string
          default: "0414 456 765"
        email:
          type: string
          default: "Vaness.Smith@gmail.com"
        delivery:
          type: string
          default: "Deliver now"
        message:
          type: string
          default: "Congratulation on your graduation. Enjoy your gift card"
    CardOrderWithId:
      type: object
      properties:
        cardId:
          type: string
          format: uuid
          default: '00000000-0000-0000-0000-000000000000'
        imageUrl:
          type: string
          default: 'https://files-sb.prezzee.com.au/media/sku-theme-designs/coles-bf6e5d02-5763-4c98-b1ce-fc3e7c1219da/coles.jpg'
        valueAvailable:
          type: number
          format: double
          default: '40.0'
        name:
          type: string
          default: 'Coles'
        onlineCardNumber:
          type: string
          default: '3453XXXXXXX'
        description: 
          type: string
          default: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
        terms:
          type: string
          default: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
        voucherPrintableUrl:
          type: string
          default: 'https://sandbox.prezzee.com.au/gift/3b4acdssa9/view/'
        expiry:
          type: string
          default: "04/06/2019"
        expireIn:
          type: string
          default: '28'
        amount:
          type: number
          format: double
          default: 100.00
        currency:
          type: string
          default: 'AUD'
    GetOrder:
      type: object
      properties:
        card:
            $ref: '#/components/schemas/CardOrderWithId'
        friend:
            $ref: '#/components/schemas/Friend'
            
    
    GiftCard:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
          default: '00000000-0000-0000-0000-000000000000'
        imageUrl:
          type: string
          default: 'https://prezzee.com.au/name.jpg'
        name:
          type: string
          default: 'Coles'
        voucherPrintableUrl:
          type: string
          description: 'contains Prezzee''s URL to show cards information'
        amount:
          type: number
          default: 100.00
        expired:
          type: boolean
          default: false
        gifted:
          type: boolean
          default: false
        status:
          type: number
          default: 1  
    GiftCards:
      type: array
      items:
        $ref: '#/components/schemas/GiftCard'
      example:
          - orderId: '00000000-0000-0000-0000-000000000001'
            imageUrl: 'https://prezzee.com.au/name.jpg'
            name:  'Cards name'
            voucherPrintableUrl: 'Url'
            amount: 100.00
            expired: false
            gifted: false
            status: 0
          - orderId: '00000000-0000-0000-0000-000000000001'
            imageUrl: 'https://prezzee.com.au/name.jpg'
            VoucherPrintableUrl: 'Url'
            name:  'Cards name'
            amount: 100.00
            expired: false
            gifted: true
            status: 1
            
    
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/FlexiGroup/Flexigroup.DGCM/api/v1
