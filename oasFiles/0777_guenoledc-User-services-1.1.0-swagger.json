{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "User Service API",
    "description" : "Set of services exposed for the client portal as a base of service for interacting.\nThe vocation is to split this list into sevral api documentation",
    "license" : {
      "name" : "CACIB Licencing",
      "url" : "https://ca-cib.com"
    },
    "version" : "1.1.0"
  },
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/guenoledc/User-services/1.0.0"
  }, {
    "url" : "/"
  }, {
    "url" : "https://portal.ca-cib.com/api/v1/"
  }, {
    "url" : "http://localhost:8765/api/v1"
  } ],
  "security" : [ {
    "accessCode" : [ ]
  }, {
    "accessToken" : [ ]
  } ],
  "paths" : {
    "/serviceAccounts" : {
      "get" : {
        "description" : "get all list of service accounts in the current user perimeter",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServiceAccount"
                  }
                }
              }
            }
          }
        },
        "tags" : [ "Deprecated" ]
      },
      "post" : {
        "description" : "create a new service account. \n\nIf credentials is not provided, a new key pair will be generated by the api and the private key will be returned for caller safe keeping and not stored in the server. the public key however is stored for later check private key signature.\n\nWhen authenticating, the caller should provided a base64 encoded JWT signed with the corresponding private key which body must contains {id: \"service id\", durationSec: number}. The security gateway is called on endpoint /services/login with the jwt in the Authorization: Bearer header in order to get an access token returned.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "description" : {
                    "type" : "string"
                  },
                  "adminScope" : {
                    "type" : "string"
                  },
                  "expiredIn" : {
                    "type" : "string",
                    "description" : "format like \"1M\"onth; \"2Y\"ears ..."
                  },
                  "credentials" : {
                    "$ref" : "#/components/schemas/ServiceAccountCredential"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "account" : {
                      "$ref" : "#/components/schemas/ServiceAccount"
                    },
                    "privateKey" : {
                      "type" : "string",
                      "description" : "the base64 PEM encoded private key generated by the api if credentials where not present in the call. Missing if a public key was provided. This is never stored on the server side"
                    }
                  }
                }
              }
            }
          }
        },
        "tags" : [ "Deprecated" ]
      }
    },
    "/serviceAccounts/{id}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        },
        "description" : "The user ID"
      } ],
      "get" : {
        "description" : "get the details of a service account used for API calls",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceAccount"
                }
              }
            }
          }
        },
        "tags" : [ "Deprecated" ]
      },
      "delete" : {
        "description" : "remove a service account from the referential",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "tags" : [ "Deprecated" ]
      },
      "put" : {
        "description" : "update the service account",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceAccount"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "Details of the service account to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceAccount"
              }
            }
          },
          "required" : true
        },
        "tags" : [ "Deprecated" ]
      }
    },
    "/admin/portalServices" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "get all services (may be deprecated)",
        "description" : "Get all services available for an admin to configure a contract.  \n**Access rights conditions:** user has the authorization `CONTRACT_ADMIN`",
        "operationId" : "getServicesLabels",
        "responses" : {
          "200" : {
            "description" : "List of services",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/admin/legalEntities/{search}" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "get legal entities related to user input",
        "description" : "List legal entities related to user input passed as the `search` param.  \n**Access rights conditions:** user has the authorization `CONTRACT_ADMIN`",
        "operationId" : "searchLegalEntity",
        "parameters" : [ {
          "in" : "path",
          "name" : "search",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "Search input of the user"
        } ],
        "responses" : {
          "200" : {
            "description" : "get all services",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LegalEntity"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/admin/legalEntities/" : {
      "get" : {
        "tags" : [ "Admin" ],
        "summary" : "get legal entities related to ricos ids",
        "description" : "Get legal entities related to ricos ids given as query params.  \n**Access rights conditions:** user has the authorization `CONTRACT_ADMIN`",
        "operationId" : "getLegalEntities",
        "parameters" : [ {
          "in" : "query",
          "name" : "ricosids",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "description" : "Ricos Ids to get list of legal entities"
        } ],
        "responses" : {
          "200" : {
            "description" : "get all services",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LegalEntity"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/users/me/services" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Find services a user has access to",
        "description" : "Find services for user. \n**Access rights conditions:** user is authenticated and the list is taken from the `SERVICES` authorization values.",
        "operationId" : "getServices",
        "responses" : {
          "200" : {
            "description" : "Found user"
          }
        }
      }
    },
    "/users/{id}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid"
        },
        "description" : "The user ID"
      } ],
      "get" : {
        "description" : "Get a user profile. If id parameter is 'me' then it returns the current user info.  \n**Access rights conditions:**   \nFor id=`me` user must be authenticated to have acces to his own information.  \nFor id=`uuid`, user must have one of the following cases:  \n* user has the authorization `CONTRACT_ADMIN`  \n* user `uid` is equal to the `uuid`(equivalent to calling `/me`)\n* user has the authorization `CLIENT_ADMIN` on a contract that the user requested (uuid) belongs to.",
        "x-swagger-router-controller" : "userRoute",
        "operationId" : "getCurrentUser",
        "tags" : [ "User" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "User" ],
        "summary" : "Update a user profile",
        "description" : "Update user profile.  \n**Access rights conditions:**   \nOnly the profile of the connected user can be modified by the user.",
        "operationId" : "updateUserProfile",
        "requestBody" : {
          "description" : "Details of the user to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "x-swagger-router-controller" : "userRoute",
        "tags" : [ "User" ],
        "summary" : "Get all users, this is an example of API",
        "description" : "Get all users.  \n  \n**Access rights conditions:**   \nUser must have one of the following cases:  \n* user has the authorization `CONTRACT_ADMIN` , all users can be listed.\n* user has the authorization `CLIENT_ADMIN`, all users of the contracts the user is admin for are listed.",
        "operationId" : "usersGet",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : { }
          },
          "500" : {
            "description" : "Server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      },
      "put" : {
        "x-swagger-router-controller" : "userRoute",
        "tags" : [ "User", "Authentication" ],
        "summary" : "Register a new user",
        "description" : "Register a new user using the security token or return the existing user structure if it already exisits for the given email.\n\n**Access rights conditions:**     Only a valid jwt can be allowed to register the user or retrieve the user structure\n",
        "operationId" : "usersPut",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/portalUsers/me/preferences" : {
      "get" : {
        "x-swagger-router-controller" : "userRoute",
        "tags" : [ "User" ],
        "summary" : "Find my preferences as a user",
        "description" : "**Access rights conditions:**     It must be accessible only for authenticated user via a valid jwt, and can only retrieve the preferences of the connected user.\n",
        "operationId" : "getPreferences",
        "responses" : {
          "200" : {
            "description" : "Found user's preferences",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "userId" : {
                      "type" : "string",
                      "format" : "uuid"
                    },
                    "portalLanguage" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Preferences not found"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/portalUsers/{id}/preferences" : {
      "put" : {
        "x-swagger-router-controller" : "userRoute",
        "tags" : [ "User" ],
        "summary" : "Update a user preferences",
        "description" : "Update a user preferences.   \n**Access rights conditions:**  only the preference of the connected user can be changed. Hence the id parameter must equals the uid in the received jwt.",
        "operationId" : "updatePortalUserPreferences",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          },
          "description" : "The user ID"
        } ],
        "requestBody" : {
          "description" : "Updated preferences",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserPreferences"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/authorizations" : {
      "get" : {
        "summary" : "Find a user's authorisations",
        "description" : "Find a user's authorizations by his email.  \n**Access rights conditions:**     Only a valid jwt can be allowed to query the authorization. If the email is specified it must equal the email in the received jwt.    \nNote: an evolution is required so that the query params are removed and the idp and roles are also included in the jwt.",
        "operationId" : "getAuthorizations",
        "parameters" : [ {
          "in" : "query",
          "name" : "email",
          "schema" : {
            "type" : "string",
            "format" : "email"
          },
          "required" : false,
          "description" : "Email of the portal user to find"
        }, {
          "in" : "query",
          "name" : "idp",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "Name of the Identity Provider"
        }, {
          "in" : "query",
          "name" : "role",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "required" : false,
          "description" : "List of roles"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Authorizations"
          },
          "404" : {
            "description" : "User not found"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        },
        "tags" : [ "Authentication", "User" ]
      }
    },
    "/idps" : {
      "get" : {
        "tags" : [ "IDP" ],
        "summary" : "Get all IDPs",
        "description" : "Get all IDPs. \n**Access rights conditions:**   \nUser must have one of the following cases:  \n* user has the authorization `CONTRACT_ADMIN` , all idps can be listed.\n* user has the authorization `CLIENT_ADMIN`, all idps of the contracts the user is admin for are listed.",
        "operationId" : "getIDPs",
        "responses" : {
          "200" : {
            "description" : "List of IDPs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/idp"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/idps/{domain}" : {
      "get" : {
        "tags" : [ "IDP" ],
        "summary" : "Get specific IDP related to selected domain",
        "description" : "Get specific IDP related to selected email domain.  \n**Access rights conditions:**   \nUser must have one of the following cases:  \n* user has the authorization `CONTRACT_ADMIN` , any idps can be listed.\n* user has the authorization `CLIENT_ADMIN`, all idps of the contracts the user is admin for are listed.",
        "operationId" : "getIDPForDomain",
        "parameters" : [ {
          "in" : "path",
          "name" : "domain",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "domain that will be used to get related IDP"
        } ],
        "responses" : {
          "200" : {
            "description" : "IDP",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/idp"
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/documents" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "Get all documents user is allowed to access",
        "description" : "Get all documents user is allowed to access.  \n**Access rights conditions:**   user must be authenticated and only the documents that are listed in the distributed GED index are accessible.",
        "operationId" : "getDocuments",
        "parameters" : [ {
          "in" : "query",
          "name" : "view",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "view describing filtered documents to get (by category of documents like Pitch or MTM for example)"
        }, {
          "in" : "query",
          "name" : "folder",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "folder is specified to get only files inside this folder (default is \"/\")"
        }, {
          "in" : "query",
          "name" : "page",
          "schema" : {
            "type" : "number"
          },
          "required" : false,
          "description" : "pagination specified"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Documents",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Documents"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/documents/file" : {
      "get" : {
        "tags" : [ "Document" ],
        "summary" : "Get specific document",
        "description" : "Get specific document.  \n**Access rights conditions:**   user must be authenticated and only the documents that are listed in the distributed GED index are accessible.",
        "operationId" : "getDocument",
        "parameters" : [ {
          "in" : "query",
          "name" : "urn",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "urn of the file"
        } ],
        "responses" : {
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts" : {
      "get" : {
        "tags" : [ "Contact" ],
        "summary" : "Get contacts related to current user",
        "description" : "Get contacts related to current user.  \n**Access rights conditions:**   user must be authenticated. The contacts listed are specific to the company the user belongs to.",
        "operationId" : "getContacts",
        "responses" : {
          "200" : {
            "description" : "List of contacts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Contact"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactId}/favorites" : {
      "post" : {
        "tags" : [ "Contact" ],
        "summary" : "Add current user's contact to favorites",
        "description" : "Add current user's contact to favorites  \n**Access rights conditions:**   user must be authenticated. The contacts that can be bookmarked must be in the list of the contacts endpoints and only the connected user's bookmark can be set/unset.",
        "operationId" : "addContactToFavorites",
        "parameters" : [ {
          "in" : "path",
          "name" : "contactId",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          },
          "required" : true,
          "description" : "Contact id of contact to add to favorites"
        } ],
        "responses" : {
          "200" : {
            "description" : "Contact successfully added to favorites"
          },
          "403" : {
            "description" : "Current user is not allowed to access this resource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contact" ],
        "summary" : "Remove current user's contact from favorites",
        "description" : "Remove current user's contact from favorites  \n**Access rights conditions:**   user must be authenticated. The contacts that can be bookmarked must be in the list of the contacts endpoints and only the connected user's bookmark can be set/unset.",
        "operationId" : "removeContactFromFavorites",
        "parameters" : [ {
          "in" : "path",
          "name" : "contactId",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          },
          "required" : true,
          "description" : "Contact id of contact to remove from favorites"
        } ],
        "responses" : {
          "200" : {
            "description" : "Contact successfully removed from favorites"
          },
          "403" : {
            "description" : "Current user is not allowed to access this resource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/intelligence/articles" : {
      "put" : {
        "tags" : [ "Intelligence" ],
        "summary" : "Get articles from RSS feeds related to selected category",
        "description" : "Get articles from RSS feeds related to selected category. \n**Access rights conditions:**   User must be authenticated. No restriction on content for now.",
        "operationId" : "getArticles",
        "parameters" : [ {
          "in" : "query",
          "name" : "tag",
          "schema" : {
            "type" : "string"
          },
          "description" : "tag to filter articles by category (Economic, Regulatory, etc.)"
        }, {
          "in" : "query",
          "name" : "size",
          "schema" : {
            "type" : "number"
          },
          "description" : "number of articles to get"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of articles",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Article"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contracts" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get All contracts user is allowed to access",
        "description" : "Get All contracts user is allowed to access.  \n**Access rights conditions:**   access depends on authorization:\n* if user has authorization `CONTRACT_ADMIN` all contracts are accessible\n* if user has authorization `CLIENT_ADMIN` only contracts that the user is an admin for are accessible.\n* In all other cases, no contract are accessible and the endpoint should return status 403",
        "operationId" : "getAllContracts",
        "responses" : {
          "200" : {
            "description" : "List of Contracts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GetAllContracts"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Create a new contract",
        "description" : "Create a new contract.  \n**Access rights conditions:**   only if user has authorization `CONTRACT_ADMIN`.",
        "operationId" : "createContract",
        "requestBody" : {
          "description" : "informations of contract",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "contract" : {
                    "$ref" : "#/components/schemas/ContractInputData"
                  },
                  "servicesSelected" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "legalEntitiesSelected" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Contract was successfully created"
          },
          "400" : {
            "description" : "Request is malformed"
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "Update contract",
        "description" : "Update contract.  \n**Access rights conditions:**   only if user has authorization `CONTRACT_ADMIN`.",
        "operationId" : "updateContract",
        "requestBody" : {
          "description" : "informations of contract",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "contract" : {
                    "$ref" : "#/components/schemas/ContractInputData"
                  },
                  "servicesSelected" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "legalEntitiesSelected" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Contract successfully updated"
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{id}/sendInvitationsToContractAdmins" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Send invitations to contract administrators",
        "description" : "Send invitations to contract administrators.  \n**Access rights conditions:**   only if user has authorization `CONTRACT_ADMIN`.",
        "operationId" : "sendInvitationsToContractAdmins",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "id of contract"
        } ],
        "responses" : {
          "200" : {
            "description" : "Invitation successfully sent"
          },
          "400" : {
            "description" : "No contract is related to the specified id"
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{id}/roles" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Create contract role",
        "description" : "Create contract role.  \n**Access rights conditions:**   access depends on authorization:\n* if user has authorization `CONTRACT_ADMIN` a role can be created in all contracts \n* if user has authorization `CLIENT_ADMIN` a role can be created in contracts that the user is an admin for.\n* In all other cases, no role can be created and the endpoint should return status 403",
        "operationId" : "createRole",
        "requestBody" : {
          "description" : "Role infos",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleInput"
              }
            }
          }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "id of contract"
        } ],
        "responses" : {
          "200" : {
            "description" : "Role successfully created, returns new role ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "uuid"
                }
              }
            }
          },
          "400" : {
            "description" : "No contract is related to the specified id"
          },
          "401" : {
            "description" : "Current user is not authorized to access this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "Save contract role",
        "description" : "Save contract role.  \n**Access rights conditions:**   access depends on authorization:\n* if user has authorization `CONTRACT_ADMIN` a role can be updated in all contracts \n* if user has authorization `CLIENT_ADMIN` a role can be updated in contracts that the user is an admin for.\n* In all other cases, no role can be updated and the endpoint should return status 403",
        "operationId" : "saveRole",
        "requestBody" : {
          "description" : "Role infos",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoleInput"
              }
            }
          }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "id of contract"
        } ],
        "responses" : {
          "200" : {
            "description" : "Contract successfully updated"
          },
          "400" : {
            "description" : "No contract is related to the specified id"
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get contract roles",
        "description" : "Get contract roles.  \n**Access rights conditions:**   access depends on authorization:\n* if user has authorization `CONTRACT_ADMIN` all roles of all contracts are accessible\n* if user has authorization `CLIENT_ADMIN` all roles from only contracts that the user is an admin for are accessible.\n* In all other cases, no roles are accessible and the endpoint should return status 403",
        "operationId" : "getRoles",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "id of contract"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Roles",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "No contract is related to the specified id"
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{id}/users" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get contract users",
        "description" : "Get contract users.  \n**Note:**  The endpoint returns status 400 when the contract requested has authentication delegated to the customer.  \n**Access rights conditions:**   access depends on authorization:\n* if user has authorization `CONTRACT_ADMIN` all users of all contracts are accessible\n* if user has authorization `CLIENT_ADMIN` all users from only contracts that the user is an admin for are accessible.\n* In all other cases, no roles are accessible and the endpoint should return status 403",
        "operationId" : "getContractUsers",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "id of contract"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Users",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ContractUserResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "No contract is related to the specified id"
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Set contract user roles",
        "description" : "Create a user in a contract.  \n**Note:** This endpoint should not allow setting the user id.\n**Access rights conditions:**   access depends on authorization:\n* if user has authorization `CONTRACT_ADMIN` a user can be created in all contracts \n* if user has authorization `CLIENT_ADMIN` a user can be created in contracts that the user is an admin for.\n* In all other cases, no role can be created and the endpoint should return status 403",
        "operationId" : "setContractUserRoles",
        "requestBody" : {
          "description" : "current user infos",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "userId" : {
                    "type" : "string",
                    "format" : "uuid"
                  },
                  "email" : {
                    "type" : "string",
                    "format" : "email"
                  },
                  "roles" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "id of contract"
        } ],
        "responses" : {
          "200" : {
            "description" : "User id in idp",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "uuid"
                }
              }
            }
          },
          "400" : {
            "description" : "No contract is related to the specified id"
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{id}/users/{userId}" : {
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "Set contract user roles",
        "description" : "Update user roles in a contract.  \n**Note:** This endpoint should not allow changing the user id or the user email.  \n**Access rights conditions:**   access depends on authorization:\n* if user has authorization `CONTRACT_ADMIN` a user can be updated in all contracts \n* if user has authorization `CLIENT_ADMIN` a user can be updated in contracts that the user is an admin for.\n* In all other cases, no role can be created and the endpoint should return status 403",
        "operationId" : "setContractUserRoles2",
        "requestBody" : {
          "description" : "email and roles of current user",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email" : {
                    "type" : "string",
                    "format" : "email"
                  },
                  "roles" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "id of contract"
        }, {
          "in" : "path",
          "name" : "userId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "id of current user"
        } ],
        "responses" : {
          "200" : {
            "description" : "User id in idp",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "uuid"
                }
              }
            }
          },
          "400" : {
            "description" : "No contract is related to the specified id"
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "Delete contract user",
        "description" : "Delete contract user.  \n**Note:** It should not be possible for a user to delete its own record. Status code 400 is raised in such case.  \n**Access rights conditions:**   access depends on authorization:\n* if user has authorization `CONTRACT_ADMIN` a user can be deleted in all contracts \n* if user has authorization `CLIENT_ADMIN` a user can be deleted in contracts that the user is an admin for.\n* In all other cases, no role can be created and the endpoint should return status 403",
        "operationId" : "deleteContractUser",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "id of contract"
        }, {
          "in" : "path",
          "name" : "userId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "description" : "id of current user"
        } ],
        "responses" : {
          "400" : {
            "description" : "No contract is related to the specified id"
          },
          "401" : {
            "description" : "Current user is not authorized to see this ressource"
          },
          "500" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorModel"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ServiceAccount" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "adminScope" : {
            "type" : "string",
            "description" : "the scope that the admin user must have to be able to manage this service account. to be refined"
          },
          "description" : {
            "type" : "string"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "ISO-GMT"
          },
          "credentials" : {
            "$ref" : "#/components/schemas/ServiceAccountCredential"
          }
        }
      },
      "ServiceAccountCredential" : {
        "type" : "object",
        "properties" : {
          "secret" : {
            "type" : "string",
            "description" : "the PEM base64 encoded format of the public key"
          },
          "algorithm" : {
            "type" : "string",
            "description" : "only 'RS256' supported for now"
          }
        }
      },
      "UserResponse" : {
        "required" : [ "user" ],
        "type" : "object",
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "firstName" : {
            "type" : "string",
            "nullable" : true
          },
          "lastName" : {
            "type" : "string",
            "nullable" : true
          },
          "email" : {
            "type" : "string",
            "format" : "email"
          },
          "landlinePhone" : {
            "type" : "string",
            "nullable" : true,
            "format" : "phone"
          },
          "mobilePhone" : {
            "type" : "string",
            "nullable" : true,
            "format" : "phone"
          }
        }
      },
      "UserPreferences" : {
        "required" : [ "portalLanguage" ],
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "portalLanguage" : {
            "type" : "string"
          }
        }
      },
      "GenericErrorModel" : {
        "required" : [ "errors" ],
        "type" : "object",
        "properties" : {
          "errors" : {
            "required" : [ "body" ],
            "type" : "object",
            "properties" : {
              "body" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      },
      "Documents" : {
        "type" : "object",
        "properties" : {
          "files" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/File"
            }
          },
          "folders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "File" : {
        "type" : "object",
        "properties" : {
          "filename" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date"
          },
          "size" : {
            "type" : "string"
          },
          "author" : {
            "type" : "string"
          },
          "urn" : {
            "type" : "string"
          },
          "stream" : {
            "type" : "string"
          },
          "folder" : {
            "type" : "string"
          }
        }
      },
      "Contact" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "client" : {
            "type" : "string"
          },
          "categorie" : {
            "type" : "string"
          },
          "businessLine" : {
            "type" : "string"
          },
          "function" : {
            "type" : "string"
          },
          "teamName" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "products" : {
            "type" : "string"
          },
          "perimeter" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "mainPhone" : {
            "type" : "string"
          },
          "mobilePhone" : {
            "type" : "string"
          },
          "outOfParisTime" : {
            "type" : "string"
          },
          "escalationPhoneNumber" : {
            "type" : "string"
          },
          "escalationLastName" : {
            "type" : "string"
          },
          "escalationFirstName" : {
            "type" : "string"
          },
          "escalationEmail" : {
            "type" : "string"
          },
          "backUpLastName" : {
            "type" : "string"
          },
          "backUpFirstName" : {
            "type" : "string"
          },
          "backUpPhoneNumber" : {
            "type" : "string"
          },
          "backUpEmail" : {
            "type" : "string"
          },
          "bookmark" : {
            "type" : "boolean"
          }
        }
      },
      "Article" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "link" : {
            "type" : "string"
          },
          "content" : {
            "type" : "string"
          },
          "imageUrl" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "string"
          },
          "pubDate" : {
            "type" : "string",
            "format" : "date"
          },
          "author" : {
            "type" : "string"
          },
          "source" : {
            "type" : "string"
          }
        }
      },
      "GetAllContracts" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "idpId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "hasDelegatedAuth" : {
            "type" : "boolean"
          },
          "hasDelegatedAdmin" : {
            "type" : "boolean"
          },
          "ricosCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "adminEmails" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "email"
            }
          },
          "scope" : {
            "type" : "string",
            "$ref" : "#/components/schemas/Authorization"
          }
        }
      },
      "Authorization" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ContractUserResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "email" : {
            "type" : "string",
            "format" : "email"
          },
          "roles" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "format" : "uuid"
              },
              "name" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "LegalEntity" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "ricos" : {
            "type" : "string"
          },
          "lei" : {
            "type" : "string"
          }
        }
      },
      "ContractInputData" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "idp" : {
            "$ref" : "#/components/schemas/idp"
          },
          "hasDelegatedAuth" : {
            "type" : "boolean"
          },
          "hasDelegatedAdmin" : {
            "type" : "boolean"
          },
          "ricosCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "adminEmails" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "email"
            }
          }
        }
      },
      "idp" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "domains" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ilexName" : {
            "type" : "string",
            "nullable" : true
          }
        }
      },
      "RoleInput" : {
        "type" : "object",
        "properties" : {
          "services" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "ricosCodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Role" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string"
          },
          "authorizations" : {
            "$ref" : "#/components/schemas/Authorization"
          },
          "description" : {
            "type" : "string"
          },
          "contractId" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      }
    },
    "securitySchemes" : {
      "accessCode" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "http://localhost:10001/auth/realms/master/protocol/openid-connect/auth",
            "tokenUrl" : "http://localhost:10099/token",
            "scopes" : {
              "openid" : "required for authentication"
            }
          }
        }
      },
      "accessToken" : {
        "type" : "http",
        "scheme" : "bearer"
      }
    }
  },
  "tags" : [ {
    "name" : "Deprecated",
    "description" : "Must be removed"
  } ]
}