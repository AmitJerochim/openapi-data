openapi: 3.0.0
info:
  version: '1.0'
  title: 'User Management'
  description: 'This module handles user account authentication.'
servers:
  - url: https://end-point
paths:
  /login:
    post:
      summary: creates new session for user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userCredentials"
            example:
              user:
                value:
                  email: jim@carry.uk
                  password: notfound
      security: 
        - LoginUserApiKeyAuth: []
      responses:
        '201':
          description: Session is created successfully. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                example: 
                  token: 761b69db-ace4-49cd-84cb-4550be231e8f
        '400':
          description: Username or password invalid.
        '401':
          description: Access Denied.
        '500':
          description: internal server error.
  /logout:  
    delete:
      summary: deletes current session for user.
      parameters:
        - name: token
          in: path
          required: true
          description: Session token
          schema:
            type: string
            example: 
              token: f5d0c1b9-3279-4ab4-942f-a36ace842c80
      security: 
        - LoginUserApiKeyAuth: []
      responses:
        '204':
          description: session is deleted successfully & user logged out.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message :
                    type: string
                example:
                  message: User is logged out successfully.
        '401':
          description: Access Denied.
        '403':
          description: Un-Athorized user.
        '404':
          description: user not found.
        '500':
          description: internal server error.
  /ping:
    post:
      summary: Subsequent requests from client side are first authenticated through this API & then processed.
      parameters:
        - name: token
          in: path
          required: true
          description: Session token
          schema:
            type: string
            example: 
              token: f5d0c1b9-3279-4ab4-942f-a36ace842c80
      security:
        - PingUserApiKeyAuth: []
      responses:
        '204':
          description: session is verified successfully.
        '401':
          description: Access Denied.
        '403':
          description: Un-Athorized user.
        '500':
          description: internal server error.
  /signup:
    post:
      summary: Creates new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
            example:
              firstName: jhon
              lastName: ali
              email: abc@xyz.com
              password: asdasd89da*
      security:
        - NewUserApiKeyAuth: []
      responses:
        '201':
          description: New user is added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                example: dasa-dasdad-as-dasderr4nr34-bad
        '401':
          description: Access Denied.
        '403':
          description: Un-Athorized user.
        '500':
          description: internal server error.
  /forgot-password:
    post:
      summary: recovers user account.
      parameters:
        - name: email
          in: path
          required: true
          description: Account recover email.
          schema:
            type: string
            example: 
              email: abc@sdfs.me
      security: 
      - ForgetPasswordApiKeyAuth: []
      responses:
        '200':
          description: Account recovery email sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example: 'Password reset email is sent to your email.'
        '401':
          description: Access Denied.
        '403':
          description: Un-Athorized user.
        '500':
          description: internal server error.
        
components:
  securitySchemes:
    LoginUserApiKeyAuth:
      type: apiKey
      in: header
      name: login-user-Api-Key
    LogoutUserApiKeyAuth:
      type: apiKey
      in: header
      name: logout-user-Api-Key
    PingUserApiKeyAuth:
      type: apiKey
      in: header
      name: ping-user-Api-Key
    NewUserApiKeyAuth:
      type: apiKey
      in: header
      name: new-user-Api-Key
    ForgetPasswordApiKeyAuth:
      type: apiKey
      in: header
      name: forget-password-Api-Key

  schemas:
    userCredentials:
      title: userCredentials
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    user:
      type: object
      title: User
      properties:
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        email: 
          type: string
