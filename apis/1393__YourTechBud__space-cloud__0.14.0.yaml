openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: Space Cloud REST API
    url: https://virtserver.swaggerhub.com/noorainp/space-cloud/0.14.0
info:
  description: Space Cloud REST API
  version: "0.14.0"
  title: Space Cloud REST API
  contact:
    email: noorain@spaceuptech.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Database Module
    description: CRUD operations
paths:
  /v1/api/{project}/crud/{alias}/{col}/create:
    post:
      security:
        - Bearer: []
      tags:
        - Database Module
      summary: Create db record(s)/document(s)
      description: |
        This endpoint lets you insert document(s) / record(s) into the database
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/col'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/insert'
            example:
              op: one
              doc:
                id: my-unique-id
                user_name: YourTechBud
                email: noorain@spaceuptech.com
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
  
  /v1/api/{project}/crud/{alias}/{col}/read:
    post:
      security:
        - Bearer: []
      tags:
        - Database Module
      summary: Read db record(s)/document(s)
      description: |
        This endpoint lets you read document(s) / record(s) from the database
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/col'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/read'
            example:
              op: all
              find:
                language: english
                age:
                  $gte: 18
              options:
                select:
                  userName: 1
                  age: 1
      responses:
        '200':
          $ref: '#/components/responses/read'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'

  /v1/api/{project}/crud/{alias}/{col}/update:
    post:
      security:
        - Bearer: []
      tags:
        - Database Module
      summary: Update db record(s)/document(s)
      description: |
        This endpoint lets you update document(s) / record(s) in the database
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/col'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update'
            example:
              op: all
              find:
                language: english
                age:
                  $gte: 18
              update:
                $inc:
                  age: 1
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
  
  /v1/api/{project}/crud/{alias}/{col}/delete:
    post:
      security:
        - Bearer: []
      tags:
        - Database Module
      summary: Delete db record(s)/document(s)
      description: |
        This endpoint lets you delete document(s) / record(s) from the database
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/col'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/delete'
            example:
              op: one
              find:
                userName: YourTechBud
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
        
  /v1/api/{project}/crud/{alias}/{col}/aggr:
    post:
      security:
        - Bearer: []
      tags:
        - Database Module
      summary: Aggregate db record(s)/document(s)
      description: |
        This endpoint lets you aggregate document(s) / record(s) from  the database
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/col'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/aggr'
            example:
              op: one
              pipe:
                userName: YourTechBud
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
          
  # database config
          
  /v1/config/projects/{project}/database/{alias}/connection-state:
    get:
      security:
        - Bearer: []
      tags:
        - Database Module config 
      summary: Getting database connection state
      description: |
        This endpoint lets you know about the connection state
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
      responses:
        '200':
          $ref: '#/components/responses/status'
        '401':
          $ref: '#/components/responses/failstate'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/config/projects/{project}/database/{alias}/list-collections:
    get:
      security:
        - Bearer: []
      tags:
        - Database Module config 
      summary: Getting collections list
      description: |
        This endpoint lets you know about the collection in database
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
      responses:
        '200':
          $ref: '#/components/responses/collection'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/config/projects/{project}/database/{alias}/collections/{col}/rules:
    post:
      security:
        - Bearer: []
      tags:
        - Database Module config 
      summary: Getting collections list
      description: |
        This endpoint lets you edit the rules
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/col'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule'
            example:
              isRealtimeEnabled: true
              rules:
              - rule1
              - rule2
              schema: 
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/config/projects/{project}/database/{alias}/collections/{col}:
    delete:
      security:
        - Bearer: []
      tags:
        - Database Module config
      summary: Delete collections
      description: |
        This endpoint lets you delete document(s) / record(s) from the database
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/col'
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/config/projects/{project}/database/{alias}/config:
    post:
      security:
        - Bearer: []
      tags:
        - Database Module config 
      summary: setting config 
      description: |
        This endpoint lets you set the config
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/config'
            example:
              conn:
              collections:
              - test1
              - test2
              isprimary: true
              enabled: true
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
        
  /v1/config/projects/{project}/database/{alias}:
    delete:
      security:
        - Bearer: []
      tags:
        - Database Module config
      summary: Remove database config
      description: |
        This endpoint lets you delete database config
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/config/projects/{project}/database/{alias}/modify-schema:
    post:
      security:
        - Bearer: []
      tags:
        - Database Module config 
      summary: modify all schema
      description: |
        This endpoint lets you modify schema
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/config'
            example:
              conn:
              collections:
              - test1
              - test2
              isprimary: true
              enabled: true
      responses:
        '200':
          $ref: '#/components/responses/modifySchema'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
          
  /v1/config/projects/{project}/database/{alias}/collections/{col}/modify-schema:
    post:
      security:
        - Bearer: []
      tags:
        - Database Module config 
      summary: modify schema
      description: |
        This endpoint lets you modify schema
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/col'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modifiedSchema'
            example:
              isRealtimeEnabled: true
              rules:
              - rule1
              - rule2
              schema:
                 _id: ID! @primary
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
          
  /v1/config/projects/{project}/database/{alias}/reload-schema:
    post:
      security:
        - Bearer: []
      tags:
        - Database Module config 
      summary: reload schema
      description: |
        This endpoint lets you reload schema
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/schema'
            example:
              {}
      responses:
        '200':
          $ref: '#/components/responses/reloadSchema'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/config/projects/{project}/database/{alias}/collections/{col}/inspect-schema:
    get:
      security:
        - Bearer: []
      tags:
        - Database Module config 
      summary: inspect schema
      description: |
        This endpoint inspect schema
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/col'
      responses:
        '200':
          $ref: '#/components/responses/inspect-schema'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/config/inspect/{project}/{alias}:
    get:
      security:
        - Bearer: []
      tags:
        - Database Module config
      summary: schemas for collections
      description: |
        This endpoint lets you get schemas for all collections
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
      responses:
        '200':
          $ref: '#/components/responses/collections_Schemas' # need to change
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
          
  # file management operations
  
  /v1/api/{project}/files:
    post:
      security:
        - Bearer: []
      tags:
        - File Storage Module
      summary: create files
      description: |
        This endpoint lets you Create files
      parameters: 
        - $ref: '#/components/parameters/project'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFiles'
            example:
              path: /path/components
              name: abc
              type: json
              makeall: true
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
    get:
      security:
        - Bearer: []
      tags:
        - File Storage Module
      summary: Read files
      description: |
        This endpoint lets you read files
      parameters: 
        - $ref: '#/components/parameters/project'
      responses:
        '200':
          $ref: '#/components/responses/readFiles'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'

    delete:
      security:
        - Bearer: []
      tags:
        - File Storage Module
      summary: delete files
      description: |
        This endpoint lets you delete files
      parameters: 
        - $ref: '#/components/parameters/project'
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
    
          
  # file storage config
  
  /v1/config/projects/{project}/file-storage/config:
    post:
      security:
        - Bearer: []
      tags:
        - File Storage config 
      summary: create storage config 
      description: |
        This endpoint lets you make storage config
      parameters: 
        - $ref: '#/components/parameters/project'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fileStorageConfig'
            example:
              enabled: true
              storeType: local
              conn : abc
              endpoint: /v1/helloworld
              bucket:
              rules:
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/config/projects/{project}/file-storage/connection-state:
    get:
      security:
        - Bearer: []
      tags:
        - File Storage config 
      summary: get connection state
      description: |
        This endpoint lets you know about the connection state
      parameters: 
        - $ref: '#/components/parameters/project'
      responses:
        '200':
          $ref: '#/components/responses/status'
        '401':
          $ref: '#/components/responses/failstate' # need to change
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
  
  /v1/config/projects/{project}/file-storage/rules/{ruleName}:
    post:
      security:
        - Bearer: []
      tags:
        - File Storage config 
      summary: create fileStorage Rules
      description: |
        This endpoint lets you make file storage rules
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/ruleName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fileStorageRule'
            example:
              name: name
              prefix: /
              create:
                rule: allow
              delete:
                rule: allow
              read:
                rule: allow
              update:
                rule: allow
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
    delete:
      security:
        - Bearer: []
      tags:
        - File Storage config 
      summary: allow to delete rules
      description: |
        This endpoint lets you delete file rules
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/ruleName'
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
        
  # endpoints for service
  
  /v1/config/projects/{project}/services/{service}:
    post:
      security:
        - Bearer: []
      tags:
        - Remote Service Module
      summary: Allow to add services
      description: |
        This endpoint lets you add services
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/service'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service'
            example:
              endpoints: /v1/helloworld
              url: http://localhost:3000
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
    delete:
      security:
        - Bearer: []
      tags:
        - Remote Service Module
      summary: Allow to delete services
      description: |
        This endpoint lets you delete services
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/service'
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
          
  # routes for function services
  
  /v1/api/{project}/functions/{service}/{func}:
    post:
      security:
        - Bearer: []
      tags:
        - Remote Service Config
      summary: Function services
      description: |
        This endpoint lets you create function services
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/service'
        - $ref: '#/components/parameters/func'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/func'
      responses:
        '200':
          $ref: '#/components/responses/functionCall'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'

          
  # routes for eventing services
  
  /v1/api/{project}/event-triggers/queue:
    post:
      security:
        - Bearer: []
      tags:
        - Eventing Module
      summary: queue eventing services
      description: |
        This endpoint lets you process queue realtime services
      parameters: 
        - $ref: '#/components/parameters/project'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventQueue'
            example:
              type: json
              delay: 2000
              timestamp: Sat Jul 23 02:16:57 2005.
              payload:
              options:
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/api/{project}/eventing/process:
    post:
      security:
        - Bearer: []
      tags:
        - Eventing Module
      summary: process eventing services
      description: |
        This endpoint lets you process eventing services
      parameters: 
        - $ref: '#/components/parameters/project'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventProcess'
            example:
              _id: 507f1f77bcf86cd799439011
              batchid: 2
              type: json
              token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFkbWluIiwicm9sZSI6ImFkbWluIn0.N4aa9nBNQHsvnWPUfzmKjMG3YD474ChIyOM5FEUuVm4
              timestamp: Wed 01-01-2009 6:00
              event_timestamp: Wed 01-01-2009 6:00
              payload:
              status: 200
              retries:
              url:
              remark:
              
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  # eventing config
  
  /v1/config/projects/{project}/event-triggers/rules/{ruleName}:
    post:
      security:
        - Bearer: []
      tags:
        - Eventing Config
      summary: eventing config
      description: |
        This endpoint lets you add eventing config
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/ruleName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventingTrigger'
            example:
              type: DB_INSERT
              url: https://myapp.com
              retries: 
              options:
                db: mongo
                col: india
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
    delete:
      security:
        - Bearer: []
      tags:
        - Eventing Config
      summary: Allow to delete events
      description: |
        This endpoint lets you delete events
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/ruleName'
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/config/projects/{project}/event-triggers/config:
    post:
      security:
        - Bearer: []
      tags:
        - Eventing Config
      summary: eventing config
      description: |
        This endpoint lets you make eventing config
      parameters: 
        - $ref: '#/components/parameters/project'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventingConfig'
            example:
              enabled: true
              dbType: mongo
              col:
              rules: 
              - rule1
              - rule2
              internalRules:
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  # user management 
  
  /v1/api/{project}/auth/{alias}/email/signin:
    post:
      security:
        - Bearer: []
      tags:
        - User Management Module
      summary: Email signIn
      description: |
        This endpoint lets you sign in
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailSignIn'
            example:
              email: abc@gmail.com
              pass: pass@123
      responses:
        '200':
          $ref: '#/components/responses/emailSignIn'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/api/{project}/auth/{alias}/email/signup:
    post:
      security:
        - Bearer: []
      tags:
        - User Management Module
      summary: Email signUp
      description: |
        This endpoint lets you sign up
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailSignUp'
            example:
              email: abc@gmail.com
              name: abc
              pass: 1234@bcd
              role: Admin
      responses:
        '200':
          $ref: '#/components/responses/emailSignIn'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/api/{project}/auth/{alias}/profile/{id}:
    get:
      security:
        - Bearer: []
      tags:
        - User Management Module
      summary: Get profiles
      description: |
        This endpoint lets you get profile of particular user
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/profile'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
          
  /v1/api/{project}/auth/{alias}/profile:
    get:
      security:
        - Bearer: []
      tags:
        - User Management Module
      summary: Get profiles
      description: |
        This endpoint lets you get profiles
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
      responses:
        '200':
          $ref: '#/components/responses/profile'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
          
  /v1/api/{project}/auth/{alias}/edit_profile/{id}:
    get:
      security:
        - Bearer: []
      tags:
        - User Management Module
      summary: Edit profiles
      description: |
        This endpoint lets you edit profile
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/alias'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/editProfile'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
          
  # management config
  
  /v1/config/projects/{project}/user-management/{provider}:
    post:
      security:
        - Bearer: []
      tags:
        - Management Config
      summary: Management config
      description: |
        This endpoint lets you enable management config
      parameters: 
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/provider'  # need to change
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userManagement'
            example:
              enabled: true
              id: goku
              secret: 8e660f62-c970-4312-ab06-629bb6e75d53
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  # route for graphql
  
  /v1/api/{project}/graphql:   
    post:
      security:
        - Bearer: []
      tags:
        - Graphql Module
      summary: Graphql
      description: |
        This endpoint lets you create graphql query
      parameters: 
        - $ref: '#/components/parameters/project'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/graphql'
            example:
              operationName: data
              variables: {}
              query: 
      responses:
        '200':
          $ref: '#/components/responses/graphqlResponse'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
          
  # config management
          
  /v1/config/env:
    get:
      security:
        - Bearer: []
      tags:
        - Config Management
      summary: config management
      description: |
        This endpoint lets get environment
      responses:
        '200':
          $ref: '#/components/responses/getEnv'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' # need to change
          
  /v1/config/projects:
    get:
      security:
        - Bearer: []
      tags:
        - Config Management
      summary: config management
      description: |
        This endpoint lets you get projects config
      responses:
        '200':
          $ref: '#/components/responses/projectsConfig'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' # need to change 
    post:
      security:
        - Bearer: []
      tags:
        - Config Management
      summary: Adding new project
      description: |
        This endpoint lets you create new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectConfig'
            example:
              project: 
              - secret:  8e01088d-3db5-439c-8498-c28fadc608da
                name: goku
                id: goku
                modules:
                  crud:
                  eventing:
                  auth:
                  services:
                  filSstore:
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' # need to change
          
  /v1/config/login:
    post:
      security:
        - Bearer: []
      tags:
        - Config Management
      summary: Entry point for user
      description: |
        This endpoint let user to login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
            example:
              user: admin
              pass: 123
      responses:
        '200':
          $ref: '#/components/responses/projectsConfig'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' 
          
  /v1/config/projects/{project}:
    delete:
      security:
        - Bearer: []
      tags:
        - Config Management
      summary: delete project
      description: |
        This endpoint lets you delete project
      parameters: 
        - $ref: '#/components/parameters/project'
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError'
          
    put:
      security:
        - Bearer: []
      tags:
        - Config Management
      summary: Adding new project
      description: |
        This endpoint lets you put new project
      parameters: 
        - $ref: '#/components/parameters/project'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectConfig'
            example:
              secret:  8e01088d-3db5-439c-8498-c28fadc608da
              name: goku
              id: goku
              modules:
                crud:
                eventing:
                auth:
                services:
                filSstore:
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' # need to change
    
    
  /v1/config/projects/{project}/config:         
    post:
      security:
        - Bearer: []
      tags:
        - Config Management
      summary: project config
      description: |
        This endpoint lets you post project config
      parameters: 
        - $ref: '#/components/parameters/project'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectConfig'
            example: 
              secret:  8e01088d-3db5-439c-8498-c28fadc608da
              name: goku
              id: goku
              modules:
                crud:
                eventing:
                auth:
                services:
                filSstore:
      responses:
        '200':
          $ref: '#/components/responses/empty'
        '401':
          $ref: '#/components/responses/unauthenticated'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/internalError' # need to change
  
components:
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
  parameters:
    project: 
      in: path
      name: project
      description: The unique id of the project. Available in mission-control
      required: true
      schema:
        type: string
    alias:
      in: path
      name: alias
      description: The type of the database
      required: true
      schema:
        type: string
        enum: [mongo, sql-postgres, sql-mysql]
    col:
      in: path
      name: col
      description: The name of the table / collection
      required: true
      schema:
        type: string
    ruleName:
      in: path
      name: ruleName
      description: The name of the rule
      required: true
      schema:
        type: string
    service:
      in: path
      name: service
      description: The name of the service
      required: true
      schema:
        type: string
    provider:
      in: path
      name: provider
      description: enabled
      required: true
      schema:
        type: boolean
    func:
      in: path
      name: func
      description: func
      required: true
      schema:
        type: string
    id:
      in: path
      name: id
      description: id
      required: true
      schema:
        type: string
  responses:
    empty:
      description: Operations executed successfully
      content:
        application/json:
          schema:
            type: object
    read:
      description: Operations executed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/readResponse'
          example:
            result:
              - userName: TheOldMan
              - userName: TheTeen
              - userName: TheBaby
    unauthenticated:
      description: Operation unauthenticated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    unauthorized:
      description: Operation unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    internalError:
      description: Internal server error occured
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    modifySchema:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/modifySchema'
    status:
      description: Connected
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/connectionState'
          example: 
            status: true
    failstate:
      description: Failed to connect
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/failState'
          example:
            status: false
    collection:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/list'
          example:
            collections:
              - test1
              - test2
    reloadSchema:
      description: Reloaded successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/reload'
    inspect-schema:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inspectSchema'
          example:
            schema:
              _id: ID! @primary

    getEnv:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/env'
    projectsConfig:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/projectConfig'
          example:
            token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFkbWluIiwicm9sZSI6ImFkbWluIn0.N4aa9nBNQHsvnWPUfzmKjMG3YD474ChIyOM5FEUuVm4
            projects:
            - secret: 8e660f62-c970-4312-ab06-629bb6e75d53
              id: pikachu
              name: pikachu
              modules:
                crud:
                eventing:
                auth:
                services:
                fileStore:
    collections_Schemas:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/collections_Schemas'
          example:
            collections:
            - projectName1: test1
            - projectName2: test2
    emailSignIn:
      description: signIn success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/emailResponse'
          example:
            user: 
              name: name1
            token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFkbWluIiwicm9sZSI6ImFkbWluIn0.N4aa9nBNQHsvnWPUfzmKjMG3YD474ChIyOM5FEUuVm4
    graphqlResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/graphqlResponse'
          example:
            data:
              queryName:
                status: 200
    profile:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/profile'
          example: 
            user:
              name: user1
    editProfile:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/editProfile'
          example:
            user: user1
            token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFkbWluIiwicm9sZSI6ImFkbWluIn0.N4aa9nBNQHsvnWPUfzmKjMG3YD474ChIyOM5FEUuVm4
    readFiles:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/readFiles'
          example:
            path: /type/path/
            type: json
    functionCall:
      description: ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/functionCall'
          example:
            result:
              name1
  schemas:
    insert:
      oneOf:
        - type: object
          properties:
            op:
              type: string
              enum: [one, all]
            doc:
              type: object
        - type: object
          properties:
            op:
              type: string
              enum: [one, all]
            doc:
              type: array
              items:
                type: object
    read:
      type: object
      properties:
        op:
          type: string
          enum: [one, all, count, distinct]
        find:
          type: object
          description: The mongo db find object
        options:
          type: object
          properties:
            select:
              type: object
              description: MongoDB select object
            sort:
              type: object
              description: MongoDB sort object
            skip:
              type: number
              description: Number of documents / records to skip
            limit:
              type: number
              description: Number of documents / records to be returned
            distinct:
              type: string
        doc:
          type: object
    readResponse:
      oneOf:
        - type: object
          properties:
            result:
              type: object
        - type: object
          properties:
            result:
              type: array
              items: 
                type: object
    update:
      type: object
      properties:
        op:
          type: string
          enum: [one, all, upsert]
        find:
          type: object
          description: The mongo db find object
        update:
          type: object
          description: The mongo db update object
    delete:
      type: object
      properties:
        op:
          type: string
          enum: [one, all]
        find:
          type: object
          description: The mongo db find object
    aggr:
      type: object
      properties:
        op:
          type: string
          enum: [one, all]
        pipe:
          type: object
          description: The mongo db find object
    rule:
      type: object
      properties:
        isRealtimeEnabled:
          type: boolean
        rules:
          type: array
          items:
            type: string
        schema:
          type: string
    error:
      type: object
      properties:
        error:
          type: string
    list:
      oneOf:
        - type: object
          properties:
            result:
              type: array
              items: 
                type: string
    schema:
      type: object
      properties:
        _id:
          type: string
    reload:
      type: object
      properties:
        collections:
          type: object
          properties:
            event_log:
              type: string
    fileStorageConfig:
      type: object
      properties:
        enabled:
          type: boolean
        storageType:
          type: string
        conn:
          type: string
        endpoint:
          type: string
        bucket:
          type: string
        rules:
          type: array
          items:
            type: string
    modifiedSchema:
      type: object
      properties:
        isRealtimeEnabled:
          type: boolean
        rules:
          type: array
          items:
            type: string
        schema:
          type: string
    connectionState:
      type: object
      properties:
        status:
          type: boolean
    failState:
      type: object
      properties:
        status:
          type: boolean
    fileStorageRule:
      type: object
      properties:
        name:
          type: string
        prefix:
          type: string
        create:
          type: object
          properties:
            rule:
              type: string
        delete:
          type: object
          properties:
            rule:
              type: string
        read:
          type: object
          properties:
            rule:
              type: string
        update:
          type: object
          properties:
            rule:
              type: string
    service:
      type: object
      properties:
        endpoints:
          type: object
        url:
          type: string
    userManagement:
      type: object
      properties:
        enabled: 
          type: boolean
        id:
          type: string
        secret:
          type: string
    eventingTrigger:
      type: object
      properties:
        type:
          type: string
        url:
          type: string
        retries:
          type: integer
        options:
          type: object
          properties:
            db:
              type: string
            col:
              type: string
    eventingConfig:
      type: object
      properties:
        enabled:
          type: boolean
        dbType:
          type: string
        col:
          type: string
        rules:
          type: array
          items:
            type: string
        internalRules:
          type: array
          items: 
            type: string
    env:
      type: object
      properties:
        isProd:
          type: boolean
    projectConfig:          
      type: object
      properties:
        secret: 
          type: string
        id: 
          type: string
        name:
          type: string
        modules:
          type: object
          properties:
            crud:
              type: object
            eventing:
              type: object
            auth:
              type: object
            services:
              type: object
            fileStore:
              type: object
    login:
      type: object
      properties:
        user:
          type: string
        pass:
          type: string
    collections_Schemas:
      type: object
      properties:
        collections:
          type: object
          properties:
            projectName1:
              type: object
              properties:
                schema:
                  type: string
            projectName2:
              type: object
              properties:
                schema:
                  type: string
    graphql:
      type: object
      properties:
        operationName:
          type: string
        variables:
          type: object
        query:
          type: string
    graphqlResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            queryName:
              type: object
              properties:
                status:
                  type: integer
    config:
      type: object
      properties:
        conn:
          type: string
        collections:
          type: array
          items: 
            type: string
        isPrimary:
          type: boolean
        enabled: 
          type: boolean
    func:
      type: object
      properties:
        params:
          type: object
        timeout:
          type: integer
    handleServices:
      type: object
      properties:
        specversion:
          type: string
        type:
          type: string
        source:
          type: string
        id:
          type: string
        time:
          type: string
        data:
          type: object
    eventQueue:
      type: object
      properties:
        type:
          type: string
        delay:
          type: integer
        timestamp:
          type: integer
        payload:
          type: object
        options:
          type: string
    eventProcess:
      type: object
      properties:
        _id:
          type: string
        batchid:
          type: string
        type:
          type: string
        token: 
          type: integer
        timestamp:
          type: integer
        event_timestamp:
          type: integer
        payload:
          type: object
        status:
          type: string
        retries:
          type: integer
        url:
          type: string
        remark:
          type: string
    emailSignIn:
      type: object
      properties:
        email:
          type: string
        pass:
          type: string
    emailResponse:
      type: object
      properties:
        user:
          type: object
        token: 
          type: string
    emailSignUp:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        pass:
          type: string
        role:
          type: string
    profile:
      type: object
      properties:
        user:
          type: object
    editProfile:
      type: object
      properties:
        user:
          type: object
        token:
          type: string
    createFiles:
      type: object
      properties:
        path:
          type: string
        name:
          type: string
        type:
          type: string
        makeAll:
          type: boolean
    readFiles:
      type: object
      properties:
        path: 
          type: string
        type:
          type: string
    functionCall:
      type: object
      properties:
        result:
          type: object
    inspectSchema:
      type: object
      properties:
        schema:
          type: string
    modifySchema:
      type: object
      properties:
        statue:
          type: boolean