openapi: 3.0.0
servers: 
  - url: https://dev-dl-apim.developer.azure-api.net/
    description: Development Mock API Server
info:
  description: Blackbox API
  version: "0.0.1"
  title: Blackbox APIs
  contact:
    name: Dinakar Manchiraju
    email: dinakar.manchiraju@decisionlogic.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Workflow
    description: Contains APIs to workflow APIs
  - name: Financials
    description: Contains APIs to retrieve financial information for user
  - name: Admin
    description: contains Admin and Maintenance APIs
  - name: User Management
    description: contains APIs use to manage user/user institution accounts
  - name: Institution
    description: contains APIs that add/remove/refresh institution list from the provider
paths:
  /institution/create:
    post:
      tags: 
        - Institution
      summary: create institution to provider
      operationId: createInstitution
      requestBody:
        $ref: '#/components/requestBodies/institution'
      responses:
        '200':
          description: returns institution guid
          content:
            application/json:
              schema:
                type: object
                properties:
                  institutionId:
                    type: string
  /institution/list:
    get:
      tags:
        - Institution
      summary: Get list of institutions
      operationId: getInstitutions
      responses:
        '200':
          $ref: '#/components/responses/institutionListResponse'
  /institution/{institutionId}/loginfields:
    get:
      tags:
        - Institution
      summary: gets login fields for a given institutionId
      operationId: institutionLoginFields
      parameters:
        - $ref: '#/components/parameters/institutionIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/loginFieldsResponse'
  /institution/{institutionId}:
    get:
      tags:
        - Institution
      summary: gets login fields for a given institutionId
      operationId: getInstitutionById
      parameters:
        - $ref: '#/components/parameters/institutionIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/institutionResponse'
  /institution/refresh:
    post:
      tags:
        - Institution
      summary: Triggers a refresh of institutions from provider
      operationId: refreshInstitutions
      responses:
        '202':
          description: refresh acknowledged
  /blackbox/institutionAnalytics:
    get:
      tags:
        - Analytics
      summary: Gets Analytics by institution
      operationId: analyticsByInstitution
      parameters:
        - $ref: '#/components/parameters/startDateParameter'
        - $ref: '#/components/parameters/endDateParameter'
      responses:
        '200':
          $ref: '#/components/responses/institutionAnalyticsResponse'
  /admin/providerStatus:
    get:
      tags:
        - Admin
      summary: Get Provider status
      operationId: providerStatus
      responses:
        '200':
          $ref: '#/components/responses/healthStatus'
        '500':
          $ref: '#/components/responses/healthStatus'
  /admin/status:
    get:
      tags:
        - Admin
      operationId: status
      responses:
        '200':
          $ref: '#/components/responses/statusResponse'
  /user/{userGuid}/getLoginStatus:
    get:
      tags:
        - Workflow
      summary: Get Login status
      operationId: getLoginStatus
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
        - $ref: '#/components/parameters/jobIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/loginStatus'
  /user/{userGuid}/getTokenInfo:
    post:
      tags:
        - Financials
      summary: Get Token Info
      operationId: getTokenInfo
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
      responses:
        '200':
          $ref: '#/components/responses/tokenInfo'
  /user/createUserWithInstitution:
    put:
      tags: 
        - Workflow
      summary: Create user for a given institution
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/userInstitution'
      responses:
        '201':
          $ref: '#/components/responses/userResponse'
  /user/{userGuid}/addInstitution:
    post:
      tags: 
        - Workflow
      summary: refreshes user data for a given institution
      operationId: addInstitutionToUser
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
      requestBody:
        $ref: '#/components/requestBodies/userInstitution'
      responses:
        '202':
          description: update accepted
  /user/{userGuid}/refresh:
    post:
      tags: 
        - Financials
      summary: refreshes user data for a given institution
      operationId: refresh
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
      requestBody:
        $ref: '#/components/requestBodies/institutionIds'
      responses:
        '202':
          description: update accepted
  /user/{userGuid}/account/{accountGuid}/transactions:
    post:
      tags: 
        - Financials
      summary: get transactions for a given account
      operationId: transactions
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
        - $ref: '#/components/parameters/accountGuidParameter'
      requestBody:
        $ref: '#/components/requestBodies/transactionsCriteria'
      responses:
        '200':
          $ref: '#/components/responses/transactionsResponse'
  /user/{userGuid}/accounts:
    post:
      tags: 
        - Financials
      summary: get accounts for given user
      operationId: accounts
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
      requestBody:
        $ref: '#/components/requestBodies/accountsCriteria'
      responses:
        '200':
          $ref: '#/components/responses/accountsResponse'
  /user/{userGuid}/documents:
    post:
      tags: 
        - Financials
      summary: get statements and other documents for given user
      operationId: documents
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
      responses:
        '200':
          $ref: '#/components/responses/documentsResponse'
  /user/{userGuid}/submitMfaSecurityQuestions:
    post:
      tags: 
        - Workflow
      summary: submit security questions
      operationId: submitMfaSecurityQuestions
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
      requestBody:
        $ref: '#/components/requestBodies/mfaSecurityQuestions'
      responses:
        '200':
          description: submitted
  /user/{userGuid}/submitMfaToken:
    post:
      tags: 
        - Workflow
      summary: submit token received via text/email/call
      operationId: submitMfaToken
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
      requestBody:
        $ref: '#/components/requestBodies/mfaToken'
      responses:
        '200':
          description: submitted
  /user/{userGuid}/submitMfaImageCaptcha:
    post:
      tags: 
        - Workflow
      summary: submit token received via text/email/call
      operationId: submitMfaImageCaptcha
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
      requestBody:
        $ref: '#/components/requestBodies/mfaCaptchaInput'
      responses:
        '200':
          description: submitted
  /user/{userGuid}/submitMfaTokenDeliveryMethod:
    post:
      tags: 
        - Workflow
      summary: submit token delivery method
      operationId: submitMfaTokenDeliveryMethod
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
      requestBody:
        $ref: '#/components/requestBodies/mfaTokenDeliveryMethod'
      responses:
        '200':
          description: submitted
  /user/{userGuid}/delete:
    delete:
      tags: 
        - User Management
      summary: deleteUser user for a given institution
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
      responses:
        '202':
          description: user set to be deleted
  /user/{userGuid}/deleteInstitution/{institutionId}:
    delete:
      tags: 
        - User Management
      summary: deleteUser user for a given institution
      operationId: deleteInstitution
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
        - $ref: '#/components/parameters/institutionIdParameter'
      responses:
        '202':
          description: user set to be deleted
  /user/{userGuid}/updateCredentials/{institutionId}:
    patch:
      tags: 
        - User Management
      summary: update user credentials for a given institution
      operationId: updateCredentials
      parameters:
        - $ref: '#/components/parameters/userGuidParameter'
        - $ref: '#/components/parameters/institutionIdParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCredentials'
      responses:
        '200':
          description: updated successfully
components:
  schemas:
    mfaSecurityQuestionAnswer:
        type: object
        properties:
          question:
            type: string
          answer:
            type: string
          questionFieldType:
            type: string
          answerFieldType:
            type: string
    mfa:
      type: object
      properties:
        mfaType:
          type: string
          enum: [token,securityQuestions,captcha]
        mfaQuestions:
          type: array
          items:
            $ref: '#/components/schemas/mfaSecurityQuestionAnswer'
        mfaTokenMethod:
          type: array
          items:
            type: string
        mfaToken:
          type: object
          properties:
            responseFieldType:
              type: string
            displayStringField:
              type: string
        mfaImageCaptcha:
          type: object
          properties:
            responseFieldType:
              type: string
            imageFieldType:
              type: string
            image:
              type: string
            displayField:
              type: string
    institutionAnalytics:
      type: object
      properties:
        institutionId:
          type: string
        totalRequests:
          type: integer
        failedRequests:
          type: integer
    institution:
      type: object
      properties:
        institutionId:
          type: string
        institutionName:
          type: string
        url:
          type: string
        logo:
          type: string
        routingNumber:
          type: string
        additionalRoutingNumbers:
          type: string
    user:
      type: object
      required:
        - username
        - password
        - institutionId
      properties:
        username:
          type: string
        password:
          type: string
        institutionId:
          type: integer
        pin:
          type: string
        companyId:
          type: string
    document:
      type: object
      properties:
        documentId: 
          type: string
        documentName:
          type: string
        documentType:
          type: string
        documentUrl:
          type: string
        accountId:
          type: string
        documentDate:
          type: string
    account:
      type: object
      properties:
        userGuid:
          type: string
        accountId:
          type: string
        accountName:
          type: string
        accountNumber: 
          type: string
        accountType:
          type: string
        balance:
          type: number
        availableBalance:
          type: number
        balanceCurrency:
          type: string
        lastUpdatedDate:
          type: string
        dueDate:
          type: string
        status:
          type: string
        fullAccountNumber:
          type: string
        routingNumber:
          type: string
        ownerName: 
          type: string
        address:
          type: string
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/transaction'
    transaction:
      type: object
      properties:
        checkImage:
          type: string
        accountId:
          type: string
        transactionId:  
          type: string
        status:
          type: string
        amount:
          type: number
        currency:
          type: string
        date: 
          type: string
        transactionDate:
          type: string
        postDate:
          type: string
        description:
          type: string
        balance:
          type: number
        merchant:
          type: string
        category:
          type: string
        checkNum:
          type: string
        memo: 
          type: string
    userCredentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
        pin:
          type: string
    providerToken:
      type: object
      properties:
        token:
          type: string
        name:
          type: string
        description:
          type: string
    institutionId:
      type: object
      properties:
        institutionId:
          type: string
  parameters:
    userGuidParameter:
      in: path
      name: userGuid
      schema:
        type: string
      example: 49dbb80a-5361-4c3f-9ddc-4390dfd24718
      description: GUID
      required: true
    accountGuidParameter:
      in: path
      name: accountGuid
      schema:
        type: string
      example: 696dfc28-1397-411b-ad18-71b5d95bbe06
      description: GUID
      required: true
    jobIdParameter:
      in: query
      name: jobId
      schema:
        type: string
      example: 696dfc28-1397-411b-ad18-71b5d95bbe06
      description: job id assigned when user submitted credentials to login
      required: false
    startDateParameter:
      in: query
      name: startDate
      schema:
        type: string
      example: 01/01/2020
      description: start date of date range
      required: false
    endDateParameter:
      in: query
      name: endDate
      schema:
        type: string
      example: 01/31/2020
      description: end date of date range
      required: false
    institutionIdParameter:
      in: path
      name: institutionId
      schema:
        type: string
      example: 696dfc28-1397-411b-ad18-71b5d95bbe06
      description: institution id
      required: true
  responses:
    institutionAnalyticsResponse:
      description: performance analytics for each institution
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/institutionAnalytics'
    loginFieldsResponse:
      description: login fields
      content:  
        application/json:
          schema:
            type: object
            properties:
              loginUserName: 
                type: string
              loginPassword:
                type: string
    institutionListResponse:
      description: complete list of institutions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/institution'
    institutionResponse:
      description: complete list of institutions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/institution'
    statusResponse:
      description: returns status of blackbox
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: [online]
    documentsResponse:
      description: list of documents
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/document'
    accountsResponse:
      description: list of accounts
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/account'
    transactionsResponse:
      description: list of transactions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/transaction'
    mfaResponse:
      description: mfa details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/mfa'
    healthStatus:
      description: returns health status
      content:
        application/json:
          schema:
            type: object
            properties: 
              status:
                type: string
                enum: [available, unavailable]
    loginStatus:
      description: returns login status
      content:
        application/json:
          schema:
            type: object
            required:
              - status
            properties: 
              status:
                type: string
                enum: [credentials_submitted,login_error,waiting_for_mfa,mfa_method_submitted,mfa_submitted,bank_error,login_verified]
              mfaQuestions:
                type: array
                items:
                  type: string
              mfatokenMethod:
                type: array
                items:
                  type: string
              mfaImageCaptcha:
                type: array
                items:
                  type: string
    userResponse:
      description: returns user GUID
      content:
        application/json:
          schema:
            type: object
            required:
              - userGuid
            properties:
              userGuid:
                type: string
              jobId:
                type: string
    tokenInfo:
      description: returns list of tokens from provider
      content:
        application/json:
          schema:
            type: object
            properties:
              tokens:
                type: array
                items:
                  $ref: '#/components/schemas/providerToken'
  requestBodies:
    mfaInput:
      content:
        application/json:
          schema:
            type: object
            properties:
              providerUserId:
                type: string
              mfaType:
                type: string
              mfaToken:
                type: string
              mfaImageCaptchInput:
                type: string
              mfaMethodType:
                type: string
              mfaAnswers:
                type: array
                items:
                  $ref: '#/components/schemas/mfaSecurityQuestionAnswer'
    institution:
      content:
        application/json:
          schema:
            type: object
            properties:
              institutionName:
                type: string
              institutionUrl:
                type: string
    userInstitution:
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
    institutionIds:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/institutionId'
    transactionsCriteria:
      content:
        application/json:
          schema:
            type: object
            properties:
              startDate:
                type: string
              endDate:
                type: string
    accountsCriteria:
      content:
        application/json:
          schema:
            type: object
            properties:
              enrichedData:
                type: boolean
              includeTransactions:
                type: boolean
              includeUserProfile:
                type: boolean
              fullReport:
                type: boolean
    mfaSecurityQuestions:
      content:
          application/json:
            schema:
              type: object
              properties:
                jobID:
                  type: string
                securityAnswers:
                  type: array
                  items:
                    type: string
    mfaToken:
      content:
          application/json:
            schema:
              type: object
              properties:
                jobID:
                  type: string
                token:
                  type: string
    mfaTokenDeliveryMethod:
      content:
          application/json:
            schema:
              type: object
              properties:
                jobID:
                  type: string
                tokenMethod:
                  type: string
    mfaCaptchaInput:
      content:
          application/json:
            schema:
              type: object
              properties:
                jobID:
                  type: string
                captchaInput:
                  type: string
