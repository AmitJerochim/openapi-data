openapi: 3.0.0
info:
  description: |
    General response codes:
     * `200` - OK
     * `401` - Unauthorized (missed Authorization header / token expired)
     * `403` - Forbidden
     * `404` - Not found
     * `422` - Validation error (missed or bad request parameters)
     * `429` - Too Many Requests (endpoint rate limit reached, try again later)
     * `500` - Internal Server Error (something bad happened)
     * `503` - Service Unavailable (app is under maintenance mode or external service is down)

    Required headers for each request:
     * `Accept: application/json`
     * `Content-Type: application/json`

    Authorization header:
     * `Authorization: Bearer {token}`
  version: "1.0.0-oas3"
  title: 1551 API
tags:
  - name: Auth
    description: Auth related endpoints
  - name: User
    description: User related endpoints
  - name: Dictionaries
    description: Dictionaries related endpoints
  - name: Tickets
    description: Tickets related endpoints
  - name: News
    description: News related endpoints
  - name: Content
    description: Content pages related endpoints
  - name: Addresses
    description: Addresses related endpoints
  - name: Notification
    description: Notification related endpoints
  - name: Push-token
    description: Push token related endpoints
  - name: Statistics
    description: Statistics related endpoints
security:
  - Bearer: []
paths:
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: refresh token
      responses:
        '200':
          description: New fresh token
          content:
            '*/*':
              schema:
                properties:
                  access_token:
                    type: string
                    example: >-
                      eyJ0aXAiOiJKV1QiLCJhcGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9yaGEubG9jXC9hdXRoXC9jYWxsYmFjayIsImlhdCI6MTU0ODY4NTA1MSwiZXhwIjoxNTUxMzYzNDUxLCJuYmYiOjE1NBg2ODUwNTEsImp0aSI6IjF2alJXcDRyc0RteU1SY2MiLCJzdWIiOjEsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.Kl2gdpUJmoYhgOd4rqEb6mwoLY1LtxNpmwmb34fIFgQ
                  token_type:
                    type: string
                    example: bearer
                  expires_in:
                    type: integer
                    example: 2678400
                    description: seconds
  /auth/logout:
    post:
      tags:
        - Auth
      summary: user logout
      responses:
        '200':
          description: Successfully logged out
          content:
            '*/*':
              schema:
                properties:
                  message:
                    type: string
                    example: Successfully logged out
  /auth/sync:
    post:
      tags:
        - Auth
      summary: sync user data with kyivId
      parameters:
        - in: path
          name: callback
          required: true
          description: Callback url with frontend domain.
          schema:
            type: string
      responses:
        '302':
          description: Redirect to callback url
  /user/profile:
    get:
      tags:
        - User
      summary: full user profile
      operationId: profile
      responses:
        '200':
          description: Full user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
    put:
      tags:
        - User
      summary: Updates user's profile.
      responses:
        '200':
          description: User's profile updated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: First name (cyrillic validation)
                last_name:
                  type: string
                  description: Last name (cyrillic validation)
                middle_name:
                  type: string
                  description: Patronymic (cyrillic validation)
                email:
                  type: string
                  description: Email validation
  /user/profile/fill:
    put:
      tags:
        - User
      summary: Updates user's profile with modal data.
      responses:
        '200':
          description: User's profile updated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/ProfileFillRequest'
  /user/avatar/update:
    post:
      tags:
        - User
      summary: update user's profile
      operationId: avatar
      responses:
        '200':
          description: Updates user's avatar
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  description: Image file to upload
                  type: string
                  format: binary
              required:
                - image
  /user/addresses:
    get:
      tags:
        - User
      summary: User addresses list
      responses:
        '200':
          description: User addresses list
          content:
            '*/*':
              schema:
                properties:
                  addresses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Address'
    post:
      tags:
        - User
      summary: Create manual address.
      responses:
        '200':
          description: Address entity created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Address'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/AddressRequest'
  '/user/addresses/{id}':
    get:
      tags:
        - User
      summary: User address
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the address to get.
          schema:
            type: integer
      responses:
        '200':
          description: User address
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Address'
    put:
      tags:
        - User
      summary: Update manual address.
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the address to update.
          schema:
            type: integer
      responses:
        '200':
          description: Address entity updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Address'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/AddressRequest'
    delete:
      tags:
        - User
      summary: Delete manual address.
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the address to delete.
          schema:
            type: integer
      responses:
        '204':
          description: No content
  /user/documents:
    get:
      tags:
        - User
      summary: User documents list
      responses:
        '200':
          description: User documents list
          content:
            '*/*':
              schema:
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
  '/user/documents/{id}':
    get:
      tags:
        - User
      summary: User document
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the document to get.
          schema:
            type: integer
      responses:
        '200':
          description: User document
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Document'
  /dictionaries/ticket-subjects:
    get:
      tags:
        - Dictionaries
      summary: Ticket subjects list
      responses:
        '200':
          description: Ticket subjects list
          content:
            '*/*':
              schema:
                properties:
                  ticket_subjects:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketSubject'
  /dictionaries/ticket-statuses:
    get:
      tags:
        - Dictionaries
      summary: Ticket statuses list
      responses:
        '200':
          description: Ticket statuses list
          content:
            '*/*':
              schema:
                properties:
                  ticket_statuses:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: string
                          example: Звернення виконано
                        label:
                          type: string
                          example: Виконано
                        public_status:
                          type: boolean
                          example: true
  /dictionaries/rate-reasons:
    get:
      tags:
        - Dictionaries
      summary: Ticket rate reasons
      responses:
        '200':
          description: Ticket rate reasons
          content:
            '*/*':
              schema:
                properties:
                  rate_reasons:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketRateReason'
  /dictionaries/what-can-be-reported/categories:
    get:
      tags:
        - Dictionaries
      summary: What can be reported categories list
      responses:
        '200':
          description: What can be reported categories list
          content:
            '*/*':
              schema:
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/WhatCanBeReportedCategory'
  '/dictionaries/what-can-be-reported/items/{id}':
    get:
      tags:
        - Dictionaries
      summary: What can be reported category items list
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the category to get items for.
          schema:
            type: integer
      responses:
        '200':
          description: What can be reported category items list
          content:
            '*/*':
              schema:
                properties:
                  category_items:
                    type: array
                    items:
                      $ref: '#/components/schemas/WhatCanBeReported'
  /dictionaries/news/categories:
    get:
      tags:
        - Dictionaries
      summary: News categories list
      responses:
        '200':
          description: News categories list
          content:
            '*/*':
              schema:
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/NewsCategory'
  /dictionaries/districts:
    get:
      tags:
        - Dictionaries
      summary: Districts list
      responses:
        '200':
          description: Districts list
          content:
            '*/*':
              schema:
                properties:
                  districts:
                    type: array
                    items:
                      $ref: '#/components/schemas/District'
  /tickets/map:
    get:
      tags:
        - Tickets
      summary: Get tickets for the Goolge map
      parameters:
        - in: query
          name: zoom
          required: true
          description: 'Google map zoom value'
          schema:
            type: integer
            minimum: 0
            maximum: 30
        - in: query
          name: min_lat
          required: true
          schema:
            type: number
        - in: query
          name: max_lat
          required: true
          schema:
            type: number
        - in: query
          name: min_lng
          required: true
          schema:
            type: number
        - in: query
          name: max_lng
          required: true
          schema:
            type: number
        - $ref: '#/components/parameters/searchQueryParam'
        - $ref: '#/components/parameters/withPhotoParam'
        - $ref: '#/components/parameters/numbersParam'
        - $ref: '#/components/parameters/subjectIdsParam'
        - $ref: '#/components/parameters/statusesParam'
        - $ref: '#/components/parameters/districtsIdsParam'
        - $ref: '#/components/parameters/ticketsIdsParam'
      responses:
        '200':
          description: Get tickets for the Goolge map
          content:
            '*/*':
              schema:
                properties:
                  markers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Marker'
  /tickets/search:
    get:
      tags:
        - Tickets
      summary: Search and filter tickets
      parameters:
        - in: query
          name: per_page
          required: false
          description: 'Amount of items per page limit(by default: 10)'
          schema:
            type: integer
        - in: query
          name: page
          required: false
          description: Get specified page by number
          schema:
            type: integer
        - $ref: '#/components/parameters/searchQueryParam'
        - $ref: '#/components/parameters/withPhotoParam'
        - $ref: '#/components/parameters/numbersParam'
        - $ref: '#/components/parameters/subjectIdsParam'
        - $ref: '#/components/parameters/statusesParam'
        - $ref: '#/components/parameters/districtsIdsParam'
        - $ref: '#/components/parameters/ticketsIdsParam'
      responses:
        '200':
          description: Get filtered results
          content:
            '*/*':
              schema:
                properties:
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
                  meta:
                    $ref: '#/components/schemas/Pagination'
  /tickets:
    get:
      tags:
        - Tickets
      summary: Current user's tickets list
      parameters:
        - in: query
          name: per_page
          required: false
          description: 'Amount of items per page limit(by default: 10)'
          schema:
            type: integer
        - in: query
          name: page
          required: false
          description: Get specified page by number
          schema:
            type: integer
        - in: query
          name: archived
          required: false
          description: >-
            If 1 - returns archived tickets, if 0 - returns non-archived
            tickets. If not present in query - returns all tickets that belong
            to current user.
          schema:
            type: integer
      responses:
        '200':
          description: Current user's tickets list
          content:
            '*/*':
              schema:
                properties:
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
                  meta:
                    $ref: '#/components/schemas/Pagination'
    post:
      tags:
        - Tickets
      summary: Create new ticket for the current user
      responses:
        '200':
          description: Create new ticket for the current user
          content:
            '*/*':
              schema:
                properties:
                  ticket:
                    $ref: '#/components/schemas/Ticket'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                'images[]':
                  description: Array of image files
                  type: string
                  format: binary
                subject_id:
                  type: integer
                description:
                  type: string
                  maxLength: 2500
                private:
                  type: boolean
                street:
                  type: string
                  maxLength: 255
                  description: >-
                    If ticket subject require for address this parameter required
                    without location_lat or location_lng
                building:
                  type: string
                  maxLength: 255
                  description: >-
                    If ticket subject require for address this parameter required
                    without location_lat or location_lng
                location_lat:
                  type: number
                  description: >-
                    If ticket subject require for address this parameter required
                    without street or building
                location_lng:
                  type: number
                  description: >-
                    If ticket subject require for address this parameter required
                    without street or building
                address_lat:
                  type: number
                address_lng:
                  type: number
                object_id:
                  type: integer
                district_id:
                  type: integer
              required:
                - subject_id
                - description
  '/tickets/{id}':
    get:
      tags:
        - Tickets
      summary: Get ticket by id
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the ticket to get.
          schema:
            type: integer
      responses:
        '200':
          description: Get ticket by id
          content:
            '*/*':
              schema:
                properties:
                  ticket:
                    $ref: '#/components/schemas/Ticket'
    put:
      tags:
        - Tickets
      summary: Updates ticket's description.
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the ticket
          schema:
            type: integer
      responses:
        '201':
          description: Returns updated ticket
          content:
            '*/*':
              schema:
                properties:
                  ticket:
                    $ref: '#/components/schemas/Ticket'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - description
              properties:
                description:
                  type: string
                  example: Some description
  '/ticket-progress/{id}':
    get:
      tags:
        - Tickets
      summary: Get ticket progress by id
      parameters:
        - in: path
          name: id
          required: true
          description: Id of ticket
          schema:
            type: integer
      responses:
        '200':
          description: Get ticket progress by ticket id
          content:
            '*/*':
              schema:
                properties:
                  ticket_progress:
                    type: object
                    properties:
                      placeholders:
                        type: array
                        items:
                          $ref: '#/components/schemas/TicketProgressPlaceholder'
                      Травень - 2019:
                        type: array
                        items:
                          $ref: '#/components/schemas/TicketProgress'
                      Квітень - 2019:
                        type: array
                        items:
                          $ref: '#/components/schemas/TicketProgress'
                  show_buttons:
                    type: boolean
                    example: false
  '/tickets-rate/{id}':
    get:
      tags:
        - Tickets
      summary: Get ticket rate by ticket id
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the ticket.
          schema:
            type: integer
      responses:
        '200':
          description: Get ticket rate by ticket id
          content:
            '*/*':
              schema:
                properties:
                  ticket_rate:
                    $ref: '#/components/schemas/TicketRate'
  /ticket-rate:
    post:
      tags:
        - Tickets
      summary: Creates rate for the ticket.
      responses:
        '201':
          description: Return created ticket rate
          content:
            '*/*':
              schema:
                properties:
                  ticket_rate:
                    $ref: '#/components/schemas/TicketRate'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket_id
              properties:
                ticket_id:
                  type: integer
                  example: 4
  '/ticket-rate/{id}':
    put:
      tags:
        - Tickets
      summary: Updates specified ticket rate.
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the ticket rate
          schema:
            type: integer
      responses:
        '201':
          description: Returns updated ticket rate
          content:
            '*/*':
              schema:
                properties:
                  ticket_rate:
                    $ref: '#/components/schemas/TicketRate'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - rate
              properties:
                rate:
                  type: integer
                  example: 2
                other_reason:
                  type: string
                  example: Другая причина
                rate_reason_ids:
                  type: array
                  example:
                    - 1
                    - 2
                  items:
                    type: integer
  '/tickets/not-done/{id}':
    post:
      tags:
        - Tickets
      summary: Creates job is not done for the ticket
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the ticket.
          schema:
            type: integer
      responses:
        '201':
          description: Return created job not done for the ticket
          content:
            '*/*':
              schema:
                properties:
                  job_not_done:
                    $ref: '#/components/schemas/JobNotDone'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                'images[]':
                  description: Array of image files
                  type: string
                  format: binary
                description:
                  type: string
              required:
                - description
  /news:
    get:
      tags:
        - News
      summary: News list with pagination
      parameters:
        - in: query
          name: per_page
          required: false
          description: 'Amount of items per page limit(by default: 10)'
          schema:
            type: integer
        - in: query
          name: page
          required: false
          description: Get specified page by number
          schema:
            type: integer
        - in: query
          name: search_query
          required: false
          description: Search query
          schema:
            type: string
        - in: query
          name: category_ids
          required: false
          description: Ids separated by commas of news category
          schema:
            type: string
        - in: query
          name: district_ids
          required: false
          description: district ids separated by commas
          schema:
            type: string
        - in: query
          name: with-pinned
          required: false
          description: >-
            If true, news response will be prepended with one pinned news.
            Total news count will be equal to per_page value (pinned news and 
            per_page - 1 number of plain news). If system hasn't a pinned news,
            parameter will be ignored and response will be contain per_page of
            plain news
          schema:
            type: boolean
            example: 1
      responses:
        '200':
          description: Current user's tickets list
          content:
            '*/*':
              schema:
                properties:
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/News'
                  meta:
                    $ref: '#/components/schemas/Pagination'
  /addresses/street:
    get:
      tags:
        - Addresses
      summary: Endpoint to search by street names
      parameters:
        - in: query
          name: name
          required: true
          description: Street name
          schema:
            type: string
      responses:
        '200':
          description: Streets list
          content:
            '*/*':
              schema:
                properties:
                  streets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Street'
  /addresses/building:
    get:
      tags:
        - Addresses
      summary: Endpoint to search building on certain street
      parameters:
        - in: query
          name: street_id
          required: true
          description: Street id
          schema:
            type: integer
        - in: query
          name: number
          required: true
          description: Building number on the specified street
          schema:
            type: string
      responses:
        '200':
          description: Buildings on the street list
          content:
            '*/*':
              schema:
                properties:
                  buildings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Building'
  '/news/{id}':
    get:
      tags:
        - News
      summary: News data
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the news to get.
          schema:
            type: integer
      responses:
        '200':
          description: News
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/News'
  /content/about-us:
    get:
      tags:
        - Content
      summary: About us pages list
      parameters:
        - in: query
          name: search_query
          required: false
          description: Search query
          schema:
            type: string
      responses:
        '200':
          description: About us pages list
          content:
            '*/*':
              schema:
                properties:
                  about_us:
                    type: array
                    items:
                      discriminator:
                        propertyName: type
                      anyOf:
                        - $ref: '#/components/schemas/Content'
                        - type: object
                          description: данные для страницы Керівництво
                          properties:
                            title:
                              type: string
                            type:
                              type: string
                            directors:
                              type: array
                              items:
                                type: object
                                properties:
                                  full_name:
                                    type: string
                                  position:
                                    type: string
                                  raw_description:
                                    type: string
                                    description: contents html
                                    example: '<p>Lorem ipsum</p>'
                                  img_url:
                                    type: string
                                    description: absolute url
                        - type: object
                          description: данные для страницы Контакти
                          properties:
                            title:
                              type: string
                            type:
                              type: string
                            raw_content:
                              type: string
                              description: contents html
                              example: '<p>Lorem ipsum</p>'
                            directors:
                              type: array
                              items:
                                type: object
                                properties:
                                  full_name:
                                    type: string
                                  position:
                                    type: string
                                  schedule_days:
                                    type: string
                                  schedule_time:
                                    type: string
                                  img_url:
                                    type: string
                                    description: absolute url
  /content/before-after:
    get:
      tags:
        - Content
      summary: Before after list
      responses:
        '200':
          description: Before after list
          content:
            '*/*':
              schema:
                properties:
                  before_after:
                    type: array
                    items:
                      $ref: '#/components/schemas/BeforeAfter'
  /notifications:
    get:
      tags:
        - Notifications
      summary: Get notifications list
      responses:
        '200':
          description: notifications list
          content:
            '*/*':
              schema:
                properties:
                  notifications:
                    type: object
                    properties:
                      new_count:
                        type: integer
                        example: 1
                      new:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
                      old:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
  /notifications/mark-as-read:
    post:
      tags:
        - Notifications
      summary: Mark notifications read
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                ids:
                  - 1
                  - 2
  /push-token/attach:
    post:
      tags:
        - Push-token
      summary: Attach firebase token from user
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  succsess:
                    type: boolean
                    example: true
      requestBody:
        $ref: '#/components/requestBodies/Body'
  /push-token/detach:
    post:
      tags:
        - Push-token
      summary: Detach firebase token from user
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  succsess:
                    type: boolean
                    example: true
      requestBody:
        $ref: '#/components/requestBodies/Body'
  /push-token/test:
    post:
      tags:
        - Push-token
      summary: Send test notification to all attached FCM tokens
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
  /statistics/top-questions:
    get:
      tags:
        - Statistics
      summary: Top questions list
      responses:
        '200':
          description: top questions list
          content:
            '*/*':
              schema:
                properties:
                  top_questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/TopQuestion'
  /statistics/tickets-total:
    get:
      tags:
        - Statistics
      summary: Total tickets registered info
      responses:
        '200':
          description: Total tickets registered info
          content:
            '*/*':
              schema:
                properties:
                  tickets_total:
                    type: object
                    properties:
                      amount:
                        type: number
                        example: 60
                      amount_previous:
                        type: number
                        example: 3
                      changes_percent:
                        type: string
                        example: 95.00%
  /statistics/by-direction:
    get:
      tags:
        - Statistics
      summary: Info by directions
      responses:
        '200':
          description: Info by directions
          content:
            '*/*':
              schema:
                properties:
                  by_direction:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatisticsByDirection'
  /statistics/summed-numbers:
    get:
      tags:
        - Statistics
      summary: Summed numbers info about tickets
      responses:
        '200':
          description: Summed numbers info about tickets
          content:
            '*/*':
              schema:
                properties:
                  summed_numbers:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatisticsSummedNumbers'
  /statistics/last-month:
    get:
      tags:
        - Statistics
      summary: Last month by days
      parameters:
        - in: query
          name: filled
          required: false
          description: Fill empty dates by closest previous date value
          schema:
            type: boolean
      responses:
        '200':
          description: Last month by days
          content:
            '*/*':
              schema:
                properties:
                  Липень:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatisticsLastMonth'
                  Серпень:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatisticsLastMonth'
  /minimal-application-version:
    get:
      tags:
        - Info
      summary: Get minimal version for application
      responses:
        '200':
          description: Minimal version value
          content:
           '*/*':
            schema:
              properties:
                version:
                  type: string
                  example: 1.1.1
servers:
  - url: 'https://1551-stage-back.kyivcity.gov.ua/api'
components:
  requestBodies:
    Body:
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                type: string
                example: test_token
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    Profile:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          example: 1
        open_id:
          type: integer
          example: 1
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        birthday:
          type: integer
          format: timestamp
          example: 1547123911
        gender:
          type: integer
          example: 0
          description: |
            Genders:
             * `0` - Female
             * `1` - Male
        avatar:
          type: string
          description: link to the image
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        editable:
          type: boolean
          example: true
          description: >- 
            User profile is not verified and can be updated
        profile_requires_update:
          type: boolean
          example: true
          description: >-
            User should have filled first_name, last_name, middle_name 
            (with cyrillic validation) and address (with filled street or 
            building_id) otherwise profile_requires_update is true
        social_link_pb:
          type: string
          example: '/social/pb'
          description: >-
            Present if profile_requires_update is true and user has token for
            social link generation
        social_link_nbu:
          type: string
          example: '/social/nbu'
          description: >-
            Present if profile_requires_update is true and user has token for
            social link generation
        logout:
          type: boolean
          example: true
          description: >-
            Present if profile_requires_update is true and user hasn't token 
            for social link generation (e.g. token is expired)
    Phone:
      required:
        - type
        - phone
      properties:
        type:
          type: string
          example: PRIMARY
          description: |
            Types:
             * `PRIMARY`
             * `ADDITIONAL`
        phone:
          type: string
          example: '+380501234567'
    Email:
      required:
        - type
        - email
      properties:
        type:
          type: string
          example: PRIMARY
          description: |
            Types:
             * `PRIMARY`
             * `ADDITIONAL`
        email:
          type: string
          example: user@mail.com
    Document:
      required:
        - id
        - type
        - series
        - number
        - issueDate
        - issuedBy
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: PASSPORT_INTERNAL
          description: |
            Types:
             * `PASSPORT_INTERNAL` - Паспорт громадянина України
             * `PASSPORT_EXTERNAL` - Закордонний паспорт
             * `IDENT` - Інше посвідчення особи
        series:
          type: string
        number:
          type: string
        issueDate:
          type: integer
          format: timestamp
          example: 1547123911
        issuedBy:
          type: string
        expiryDate:
          type: integer
          format: timestamp
          example: 1547123911
    Address:
      required:
        - id
        - type
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: FACTUAL
          description: |
            Types:
             * `FACTUAL` - Адреса місця проживання
             * `REGISTRATION` - Адреса місця реєстрації
             * `OTHER` - Інша адреса
        postcode:
          type: string
        country:
          type: string
        area:
          type: string
        district:
          type: string
        city:
          type: string
        street:
          type: string
        building:
          type: string
        frame:
          type: string
        flat:
          type: string
        building_id:
          type: integer
        editable:
          type: boolean
          description: Only address added by user manually can be editable
    CrmAddress:
      type: object
      required:
        - building_id
      properties:
        city:
          type: string
          example: 'Київ'
        street:
          type: string
          maxLength: 255
        building:
          type: string
          maxLength: 255
        building_id:
          type: integer
        flat:
          type: integer
          example: 3
          maximum: 100
    ComplexAddress:
      type: object
      required:
        - city
        - street
        - building
      properties:
        city:
          type: string
          example: 'Київ'
          minLength: 3
          description: |
            validation: 
              - regex: cyrillyc/spaces/special symbols set
              - at least one cyrillyc symbol
        street:
          type: string
          maxLength: 255
          minLength: 3
          description: |
            validation: 
              - regex: cyrillyc/digits/spaces/special symbols set
              - at least one cyrillyc symbol
        building:
          type: string
          maxLength: 255
          minLength: 3
          description: |
            validation: 
              - regex: cyrillyc/digits/spaces/special symbols set
              - at least one digit
        flat:
          type: integer
          example: 3
          maximum: 100
    
    AddressRequest:
      oneOf:
        - $ref: '#/components/schemas/CrmAddress'
        - $ref: '#/components/schemas/ComplexAddress'
      description: >-
        city property is a descrtiminator for Address schema. If city is null or 
        equals to 'Київ' address schema is CrmAddress otherwise schema is ComplexAddress
      

    ProfileFillRequest:
      allOf:
        - $ref: '#/components/schemas/AddressRequest'
        - properties:
            first_name:
              type: string
              description: First name (cyrillic validation)
            last_name:
              type: string
              description: Last name (cyrillic validation)
            middle_name:
              type: string
              description: Patronymic (cyrillic validation)
          required:
            - first_name
            - last_name
            - middle_name
    TicketSubject:
      required:
        - id
        - name
        - address_required
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Благоустрій та земельні ресурси
        address_required:
          type: boolean
          example: true
        allowed_for_creation:
          type: boolean
          example: true
        address_strict_geocode:
          type: boolean
          example: true
        icon_mobile:
          type: string
          example: >-
            http://1551-back.systems.media/images/icons/subjects/house_comunal.png
        icon_web:
          type: string
          example: >-
            http://1551-back.systems.media/images/icons/subjects/house_comunal.svg
    Image:
      required:
        - url
      properties:
        url:
          type: string
          example: >-
            https://1551-back.systems.media/storage/tickets/wWl87O74KwBhhokMTaB1H4TxFJnhzyDqmc4ClVhR.jpeg
    TicketRateReason:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Незадовільна якість виконання
    Ticket:
      required:
        - id
        - user_id
        - subject_id
        - description
        - status
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 3
        subject_id:
          type: integer
          example: 2
        description:
          type: string
          example: Текст опису (maxlength 2500)
        status:
          type: string
          example: На модерації
        status_color:
          type: string
          example: '#dd9797'
        private:
          type: boolean
          example: true
        address:
          type: string
          example: Вул. Грушевського 22
        work_taken_by:
          type: string
          example: КП «ГІОЦ»
        approx_done_date:
          type: string
          example: '2019-04-25T21:00:00.000000Z'
        location_lat:
          type: number
          example: 44.5
        location_lng:
          type: number
          example: 55
        created_at:
          type: string
          example: '2019-04-17T14:45:26.000000Z'
        pdf_files:
          type: array
          items:
            type: string
            example: 4/42jDfkRUwy.pdf
        images:
          type: array
          items:
            type: string
            example: 4/42jDfkRUwy.jpg
        subject:
          type: array
          description: '*Present only in responses'
          items:
            $ref: '#/components/schemas/TicketSubject'
    Marker:
      allOf: 
        - properties:
            type:
              type: string
              enum: ['cluster', 'ticket', 'unsplittable_cluster']
            latitude:
              type: number
            longitude:
              type: number
        - discriminator:
            propertyName: type 
          oneOf:
          - type: object
            properties:
              color:
                type: string
                example: '#fff'
              ticket_id:
                type: integer
          - type: object
            properties:
              cluster_count:
                type: integer
          - type: object
            properties:
              cluster_count:
                type: integer
              ticket_ids:
                type: array
                items:
                  type: integer
    TicketProgress:
      required:
        - id
        - type
        - ticket_id
        - main_text
        - date
        - sub_text
        - day
        - current
        - images
        - color
      properties:
        id:
          type: integer
          example: 1
        ticket_id:
          type: integer
          example: 1
        date:
          type: string
          example: '2019-04-22T14:42:10.000000Z'
        main_text:
          type: string
          example: Подано звернення
        sub_text:
          type: string
          example: >-
            Not so many years ago businesses used to grunt at using
            illustrations in their marketing materials.
        type:
          type: string
          example: DONE
        day:
          type: string
          example: '02'
        current:
          description: values may vary from 0 to 1
          type: integer
          example: 1
        images:
          type: array
          items:
            type: string
            example: 4/42jDfkRUwy.jpg
        color:
          $ref: '#/components/schemas/Color'
        rate:
          $ref: '#/components/schemas/TicketRate'
        not_done:
          type: boolean
          example: true
          description: >-
            Present and equals to true if TicketProgress type is DONE 
            and JobNotDone entry related to TicketProgress is present
    TicketProgressPlaceholder:
      required:
        - main_text
        - sub_text
        - color
      properties:
        id:
          type: integer
          example: null
        ticket_id:
          type: integer
          example: null
        main_text:
          type: string
          example: Звернення виконано
        sub_text:
          type: string
          example: 'Той момент, якого всі чекають!'
        type:
          type: string
          example: null
        day:
          type: string
          example: null
        current:
          description: values may vary from 0 to 1
          type: integer
          example: null
        images:
          type: array
          items:
            type: string
            example: null
        color:
          $ref: '#/components/schemas/Color'
    TicketRate:
      description: Returns null if no rate
      required:
        - rate
      properties:
        id:
          type: integer
          example: 3
        rate:
          type: integer
          example: 5
        other_reason:
          type: string
          maxLength: 200
          example: Другая причина
        rate_reasons:
          type: array
          items:
            $ref: '#/components/schemas/TicketRateReason'
    JobNotDone:
      required:
        - description
      properties:
        description:
          type: string
          maxLength: 255
          example: Some description about what is not done.
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    WhatCanBeReported:
      required:
        - name
        - link
      properties:
        name:
          type: string
          example: Трамваї
        link:
          type: string
          example: 'http://wiki.1551.gov.ua/pages/viewpage.action?pageId=8945837'
    WhatCanBeReportedCategory:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: Транспорт
    NewsCategory:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: Преса
    District:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: Деснянський
    Color:
      required:
        - color_id
        - filled
      properties:
        color_id:
          type: integer
          example: 1
          description: 'Index of the color: 1 - Orange, 2 - Violet, 3 - Grey'
        filled:
          type: integer
          example: 0
          description: Can be 0 or 1 - filled or not filled
    News:
      required:
        - id
        - title
        - date
        - time
        - main_image
        - category
      properties:
        id:
          type: integer
          example: 1
          description: id of the news
        title:
          type: string
          example: Some title
          description: Returns title
        body:
          type: string
          example: <ol><li>Hello</li><li>World</li><li>!</li></ol>
          description: Return html in string
        date:
          type: string
          example: 21.05.2019
          description: Returns date
        time:
          type: string
          example: '19:27'
          description: Returns time
        main_image:
          type: string
          example: 'https://1551-back.systems.media/storage/some_image.png'
          description: Returns main image link
        image_before:
          type: string
          example: 'https://1551-back.systems.media/storage/some_image.png'
          description: Returns image what was before link
        image_after:
          type: string
          example: 'https://1551-back.systems.media/storage/some_image.png'
          description: Returns image what's now link
        subject_icon:
          type: string
          example: 'https://1551-back.systems.media/storage/some_image.png'
          description: Returns subject icon link
        subject_title:
          type: string
          example: Some title
          description: Returns subject title
        category:
          $ref: '#/components/schemas/NewsCategory'
    BeforeAfter:
      required:
        - id
        - image_before
        - image_after
        - date
        - title
        - address
        - subject_icon
        - subject_title
      properties:
        id:
          type: integer
          example: 1
          description: id
        image_before:
          type: string
          example: 'https://1551-back.systems.media/storage/some_image.png'
          description: Returns image what was before link
        image_after:
          type: string
          example: 'https://1551-back.systems.media/storage/some_image.png'
          description: Returns image what's now link
        title:
          type: string
          example: Some title
          description: Returns title
        address:
          type: string
          example: Some address
        date:
          type: string
          example: 21.05.2019
          description: Returns date
        subject_icon:
          type: string
          example: 'https://1551-back.systems.media/storage/some_image.png'
          description: Returns subject icon link
        subject_title:
          type: string
          example: Some title
          description: Returns subject title
    Content:
      required:
        - id
        - title
        - body
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: 'goals-page'
        title:
          type: string
          example: Вакансії
          description: Title of the content page
        body:
          type: string
          example: >-
            <p><font face="Gotham Pro Regular"><b><span style="font-size:
            14px;">КБУ «Контактний центр міста Києва» – це прямий зв’язок
            громадян з Київською міською владою.</span></b></font><br></p>
    Street:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 11
        name:
          type: string
          example: Василя Симоненка вул.
    Notification:
      properties:
        id:
          type: integer
          example: 11
        ticket_id:
          type: integer
          example: 110
        text:
          type: string
          example: Ваше звернення №125467 виконано
        sub_text:
          type: string
          example: 'Знищення омели, амброзії та рослин - паразитів'
        date:
          type: string
          example: '26/06/2019 00:00'
    Test:
      properties:
        success:
          type: boolean
          example: true
        notification:
          type: array
          example:
            - title: Test notification
              body: 'Send on 10:00:00'
          items: {}
        data:
          type: array
          example:
            - id: ap1_0
          items: {}
    Building:
      required:
        - id
        - number
      properties:
        id:
          type: integer
          example: 12
        number:
          type: string
          example: 17-А
        location_lat:
          type: number
          example: 50.46
        location_lng:
          type: number
          example: 30.52
        object_id:
          type: integer
          example: 35474
        district_id:
          type: integer
          example: 7
    TopQuestion:
      properties:
        question:
          type: string
          example: Не працює пасажирський ліфт
        amount:
          type: number
          example: 5
        amount_previous:
          type: number
          example: 2
        changes_percent:
          type: string
          example: 100.00%
    StatisticsByDirection:
      properties:
        name:
          type: string
          example: Благоустрій
        amount:
          type: number
          example: 35
    StatisticsSummedNumbers:
      properties:
        name:
          type: string
          example: Всього звернень в роботі
        amount:
          type: number
          example: 123
    StatisticsLastMonth:
      properties:
        day:
          type: string
          example: '03'
        in_progress:
          type: number
          example: 4383
        done:
          type: number
          example: 1
        overdue:
          type: number
          example: 4382
    Pagination:
      required:
        - pagination
      properties:
        pagination:
          type: object
          properties:
            total:
              type: integer
              example: 222
            count:
              type: integer
              example: 2
            per_page:
              type: integer
              example: 2
            current_page:
              type: integer
              example: 2
            total_pages:
              type: integer
              example: 2
            links:
              type: object
              description: 'Returns [] if only one page in total'
              properties:
                previous:
                  type: string
                  description: Present if there is a previous page
                  example: >-
                    https://1551-back.systems.media/api/tickets?per_page=2&page=1
                next:
                  type: string
                  description: Present if there is a next page
                  example: >-
                    https://1551-back.systems.media/api/tickets?per_page=2&page=3
  parameters:
    searchQueryParam:
      in: query
      name: search_query
      required: false
      description: Text to search(currently searches in ticket title and number)
      schema:
        type: string
    withPhotoParam:
      in: query
      name: with_photo
      required: false
      description: Can be 0 or 1
      schema:
        type: string
    numbersParam:
      in: query
      name: numbers
      required: false
      schema:
        type: array
        items:
          type: string
    subjectIdsParam:
      in: query
      name: subject_ids
      required: false
      schema:
        type: array
        items:
          type: integer
    statusesParam:
      in: query
      name: statuses
      required: false
      schema:
        type: array
        items:
          type: string
          example: В роботі
    districtsIdsParam:
      in: query
      name: district_ids
      required: false
      schema:
        type: array
        items:
          type: integer
    ticketsIdsParam:
      in: query
      name: ticket_ids
      required: false
      schema:
        type: array
        items:
          type: integer