openapi: 3.0.0
info:
  description: |
    Описание спецификации для сохранения в КСАСК "ProfITsoft" договора из 1С в статусе предложения и его заключения.
  version: "1.0.2"
  title: '1С ДМС: загрузка корпоративных и индивидуальных договоров'
  termsOfService: 'http://swagger.io/terms/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: dms
    description: '1С ДМС: загрузка корпоративных и индивидуальных договоров'
paths:
  /bo/app/rest/api/contract/dmsImport:
    post:
      tags:
        - dms
      summary: Сохранение договора
      operationId: saveDmsContract
      
      requestBody:
        description: Данные договора ДМС
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsContractRequest'
              
      responses:
        200:
          description: Успешное или неуспешное сохранение договора в статусе "Предложение" или "Заключен".
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractCreationResponse'
        400:
          description: 'Некорректные параметры запроса'
        401:
          description: 'Неавторизирован'
        403:
          description: 'Доступ запрещён'
        404:
          description: 'Ресурс не найден'
        500:
          description: 'Внутрення ошибка сервера'
          
      security:
        - bearerAuth: []
        
  /bo/app/rest/api/contracts/dmsImport:
    post:
      tags:
        - dms
      summary: Сохранение массива договоров
      operationId: saveDmsContracts
      
      requestBody:
        description: Массив договоров ДМС
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DmsContractRequest'
              
      responses:
        200:
          description: Успешное или неуспешное сохранение договоров ДМС.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractsCreationResponse'
        400:
          description: 'Некорректные параметры запроса'
        401:
          description: 'Неавторизирован'
        403:
          description: 'Доступ запрещён'
        404:
          description: 'Ресурс не найден'
        500:
          description: 'Внутрення ошибка сервера'
          
      security:
        - bearerAuth: []
        
  /bo/app/rest/api/contract/conclude/dms:
    post:
      tags:
        - dms
      summary: Заключение договора
      operationId: concludeContract
      
      requestBody:
        description: Информация о договоре, который будет заключен
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractConclusionRequest'
              
      responses:
        200:
          description: Успешное или неуспешное заключение договора
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractConclusionResponse'
        400:
          description: 'Некорректные параметры запроса'
        401:
          description: 'Неавторизирован'
        403:
          description: 'Доступ запрещён'
        404:
          description: 'Ресурс не найден'
        500:
          description: 'Внутрення ошибка сервера'
          
      security:
        - bearerAuth: []
        
        
  /bo/app/rest/api/generalContract:
    post:
      tags:
        - dms
      summary: Сохранение генерального договора
      operationId: saveGeneralContract
      
      requestBody:
        description: Данные генерального договора
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralContractRequest'
              
      responses:
        200:
          description: Успешное или неуспешное сохранение генерального договора.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralContractResponse'
        400:
          description: 'Некорректные параметры запроса'
        401:
          description: 'Неавторизирован'
        403:
          description: 'Доступ запрещён'
        404:
          description: 'Ресурс не найден'
        500:
          description: 'Внутрення ошибка сервера'
          
      security:
        - bearerAuth: []
      
  /bo/app/rest/api/contract/cancellationRequest:
    post:
      tags:
        - dms
      summary: Создание запроса на расторжение договора
      operationId: contractCancellationRequestCreation
      
      requestBody:
        description: Информация о запросе на расторжение
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractCancellationRequestRequestDto'
              
      responses:
        200:
          description: Успешное или неуспешное создание запроса на расторжение
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractCancellationRequestCreationResponse'
        400:
          description: 'Некорректные параметры запроса'
        401:
          description: 'Неавторизирован'
        403:
          description: 'Доступ запрещён'
        404:
          description: 'Ресурс не найден'
        500:
          description: 'Внутрення ошибка сервера'
          
      security:
        - bearerAuth: []
  
  /bo/app/rest/payment/contractSchedulePremieListWithRepayments:
    get:
      tags:
        - dms
      summary: Получение графика платежей по договору с распределениями для этапов оплаты
      operationId: contractSchedulePremieListWithRepayments
      
      parameters:
        - in: query
          name: contractId
          schema:
            type: number
            format: int64
          description: Идентификатор договора. Должен быть заполнен идентификатор и/или номер договора
          
        - in: query
          name: contractNumber
          schema:
            type: string
          description: Номер договора. Должен быть заполнен идентификатор и/или номер договора
              
      responses:
        200:
          description: Графика платежей по договору с распределениями для этапов оплаты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractPremieListResponseDto'
        400:
          description: 'Некорректные параметры запроса'
        401:
          description: 'Неавторизирован'
        403:
          description: 'Доступ запрещён'
        404:
          description: 'Ресурс не найден'
        500:
          description: 'Внутрення ошибка сервера'
          
      security:
        - bearerAuth: []

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    DmsContractRequest:
      type: object
      properties:
        salePointId:
          type: string
          description: 'Код соответствия аквизитора (Используется для таблицы "Настройка кода соответвия Аквизитора" в API. При этом должна быть настройка поля "Аквизитор" со значением "Аквизитор по коду соответствия". Если соответствия не найдено, аквизитор берется из онлайн-продукта.)'
        tarifPlanId:
          type: integer
          format: int64
          description: 'Идентификатор тарифного плана'
        saleChannelId:
          type: integer
          format: int64
          description: 'Идентификатор канала продаж'
        contractNumber:
          type: string
          description: 'Номер договора (поле обязательно для бланкового договора)'
        sign:
          $ref: '#/components/schemas/ContractSign'
        dateSign:
          type: string
          format: date
          description: >-
            Дата подписания договора (допустимые форматы: 'dd/MM/yyyy',
            'dd.MM.yyyy'). Если дата подписания не заполнена, будет установлена текущая дата
        dateBegin:
          type: string
          format: date
          description: >-
            Дата начала действия договора (допустимые форматы: 'dd/MM/yyyy',
            'dd.MM.yyyy')
        dateEnd:
          type: string
          format: date
          description: >-
            Дата окончания действия договора (допустимые форматы: 'dd/MM/yyyy',
            'dd.MM.yyyy')
        paymentSum:
          type: object
          description: 'Страховой платеж'
          allOf:
            - $ref: '#/components/schemas/CurrencyFieldValue'
        paymentsCondition:
          $ref: '#/components/schemas/PaymentsCondition'
        premieRecords:
          type: array
          description: 'Страховые премии'
          items:
            $ref: '#/components/schemas/ContractSchedulePremieRecordResponseDto'
        objects:
          type: array
          items:
            $ref: '#/components/schemas/ContractInsObjectRequestDto'
        client:
          $ref: '#/components/schemas/CagentRequestDto'
        beneficiary:
          $ref: '#/components/schemas/CagentRequestDto'
        generalContractNumber:
          type: string
          description: 'Номер генерального договора'
        productId:
          type: number
          format: int64
          description: 'Идентификатор продукта'
        p-dms2:
          $ref: '#/components/schemas/CurrencyFieldValue'
        msi-dmsValue:
          type: integer
          format: int32
          description: 'Максимальная страховая сумма по обьекту'
        msi-dmsMeasure:
          $ref: '#/components/schemas/CurrencyType'
      required:
        - sign
        - dateBegin
        - dateEnd
        - paymentSum
        - paymentsCondition
        - premieRecords
        - objects
        - client
        - p-dms2
        - msi-dmsValue
        - msi-dmsMeasure
        
    ContractSign:
      type: string
      enum: [PRIMARY, REISSUED, DUPLICATE, PROLONGED, CROSS_SALES]
      description: >
              Признак договора:
               * `PRIMARY` - Первичный
               * `REISSUED` - Переоформленный
               * `DUPLICATE` - Дубликат
               * `PROLONGED` - Пролонгированный
               * `CROSS_SALES` - Кросс-продажи
               
              По умолчанию: `PRIMARY`
               
    PaymentsCondition:
      type: string
      enum: [PAYMENT_SINGLE, EVERY_MONTH,  TWO_PAYMENTS,  THREE_PAYMENTS, EVERY_QUARTER, EVERY_HALF_YEAR, EVERY_YEAR, PAYMENT_BY_SHEDULE, TWO_PAYMENTS_IN_ONE_MONTH, TWO_PAYMENTS_IN_TWO_MONTH, TWO_PAYMENTS_IN_THREE_MONTH, TWO_PAYMENTS_IN_SIX_MONTH, FOUR_PAYMENTS_IN_FOUR_MONTH, THREE_PAYMENTS_50_25_25_IN_THREE_MONTH, FOUR_PAYMENTS_40_30_20_10, TWO_PAYMENTS_65_35, FOUR_PAYMENTS_IN_THREE_MONTH, SIX_PAYMENTS_IN_TWO_MONTH, TWO_PAYMENTS_BY_PERCENT]
      description: >
              Условия оплаты (тип платежа):
               * `PAYMENT_SINGLE` - единоразовый платеж
               * `EVERY_MONTH` - ежемесячные платежи
               * `TWO_PAYMENTS` - двумя частями
               * `THREE_PAYMENTS` - тремя частями
               * `EVERY_QUARTER` - ежеквартальные платежи
               * `EVERY_HALF_YEAR` - полугодовые платежи
               * `EVERY_YEAR` - годовые платежи
               * `PAYMENT_BY_SHEDULE` - индивидуальный график
               * `TWO_PAYMENTS_IN_ONE_MONTH` - 50% / 50% через 1 месяц
               * `TWO_PAYMENTS_IN_TWO_MONTH` - 50% / 50% через 2 месяца
               * `TWO_PAYMENTS_IN_THREE_MONTH` - 50% / 50% через 3 месяца
               * `TWO_PAYMENTS_IN_SIX_MONTH` - 50% / 50% через 6 месяцев
               * `FOUR_PAYMENTS_IN_FOUR_MONTH` - 25% / 25% ежемесячно
               * `THREE_PAYMENTS_50_25_25_IN_THREE_MONTH` - 50% / 25% / 25% через 3 и 6 месяцев
               * `FOUR_PAYMENTS_40_30_20_10` - 40% / 30% / 20% / 10% через 3, 6 и 9 месяцев
               * `TWO_PAYMENTS_65_35` - 65% / 35% через 6 месяцев
               * `FOUR_PAYMENTS_IN_THREE_MONTH` - 25% / 25% / 25% / 25% через 3, 6 и 9 месяцев
               * `SIX_PAYMENTS_IN_TWO_MONTH` - оплата 6-ю частями через каждые 2 мес
               * `TWO_PAYMENTS_BY_PERCENT` - двумя частями в заданном процентном соотношении
               
              По умолчанию: `PAYMENT_BY_SHEDULE`
              
    ContractSchedulePremieRecordResponseDto:
      type: object
      properties:
        premie:
          type: object
          description: 'Сумма (валютой должна выступать гривна)'
          allOf:
            - $ref: '#/components/schemas/CurrencyFieldValue'
        datePremie:
          type: string
          format: date
          description: >-
            Дата, до которой необходимо произвести оплату. Допустимые форматы: 'dd.MM.yyyy', 'dd/MM/yyyy' (украинский часовой пояс). Порядковый номер премии в графике будет устанавливаться относительно этой даты (премии будут отсортированы по возрастанию дат).
      required:
        - premie
        - datePremie
        
    CagentRequestDto:
      type: object
      properties:
        personType:
          $ref: '#/components/schemas/PersonType'
        person:
          $ref: '#/components/schemas/PersonRequestDto'
        firm:
          $ref: '#/components/schemas/FirmRequestDto'
        authorizedPerson:
          $ref: '#/components/schemas/AuthorizedPersonRequestDto'
        bankDetails:
          $ref: '#/components/schemas/BankDetailsRequestDto'
        inn:
          type: string
          description: 'ИНН'
        innRefused:
          type: boolean
          description: "Отказался от ИНН"
          default: false
        contact:
          $ref: '#/components/schemas/ContactRequestDto'
        identificationCard:
          $ref: '#/components/schemas/IdentificationCardRequestDto'
        additionalDocuments:
          type: array
          items:
            $ref: '#/components/schemas/IdentificationCardRequestDto'
          description: 'Список документов, удостоверяющих личность'
        address:
          $ref: '#/components/schemas/AddressRequestDto'
        resident:
          type: boolean
          default: true
          description: 'Признак резидента. По умолчанию: true'
      required:
        - personType
        
    PersonType:
      type: string
      enum:
        - NATURAL
        - PRIVATE
        - LEGAL
      default: NATURAL
      description: |
        Тип контрагента:
         * `NATURAL` - физическое лицо
         * `PRIVATE` - СПД-ФЛ
         * `LEGAL` - юридическое лицо
         
        По умолчанию: `NATURAL`
        
    PersonRequestDto:
      description: 'Личные данные (обязательны, если контрагентом является физическое лицо)'
      type: object
      properties:
        surname:
          type: string
          description: 'Фамилия'
        name:
          type: string
          description: 'Имя'
        patronymic:
          type: string
          description: 'Отчество'
        fullNameLatin:
          type: string
          description: 'ФИО (латиницей)'
        birthDate:
          type: string
          format: date
          description: 'Дата рождения (допустимые форматы: ''dd/MM/yyyy'', ''dd.MM.yyyy'')'
        sex:
          $ref: '#/components/schemas/Sex'
      required:
        - surname
        - name
        - birthDate
        
    Sex:
      type: string
      enum:
        - MALE
        - FEMALE
      description: |
        Пол:
         * `MALE` - мужской
         * `FEMALE` - женский
         
        По умолчанию: `MALE`
        
    FirmRequestDto:
      description: 'Данные организации (обязательны, если контрагентом является юридическое лицо)'
      type: object
      properties:
        name:
          type: string
          description: 'Название'
        egrpou:
          type: string
          description: 'Код ЕГРПОУ'
        firmFullNameLatin:
          type: string
          description: 'Название (латиницей)'
      required:
        - name
        - egrpou
        
    AuthorizedPersonRequestDto:
      description: 'Уполномоченное лицо (если контрагентом является юридическое лицо)'
      type: object
      properties:
        surname:
          type: string
          description: 'Фамилия'
        name:
          type: string
          description: 'Имя'
        patronymic:
          type: string
          description: 'Отчество'
        post:
          type: string
          description: 'Должность'
        doingBasedOn:
          type: string
          description: 'Действует на основании документа'
        doingBasedOnNumber:
          type: string
          description: 'Действует на основании документа с номером'
        doingBasedOnDate:
          type: string
          format: date
          description: 'Действует на основании документа с датой выдачи (допустимые форматы: ''dd/MM/yyyy'', ''dd.MM.yyyy'')'
          
    BankDetailsRequestDto:
      description: 'Банковские реквизиты'
      type: object
      properties:
        mfo:
          type: string
          description: 'Код МФО банка'
        egrpou:
         type: string
         description: 'Код ЕГРПОУ банка'
        settlementAccount:
          type: string
          description: 'Расчетный счет (IBAN) (номер)'
        cardPersonalAccount:
          type: string
          description: 'Карточный (личный) счет (номер)'
      required:
        - mfo
        - egrpou
        - settlementAccount
        
    ContactRequestDto:
      description: 'Контактные данные'
      type: object
      properties:
        email:
          type: string
          description: 'Адрес электронной почты'
        phone:
          $ref: '#/components/schemas/PhoneRequestDto'
        contactPerson:
          type: string
          description: 'Контактное лицо (для юридического лица)'
      required:
        - email
        - phone
        
    PhoneRequestDto:
      description: 'Номер телефона'
      type: object
      properties:
        countryCode:
          type: string
          description: 'Код страны'
        number:
          type: string
          description: 'Номер телефона'
        
    IdentificationCardRequestDto:
      description: 'Данные документа, удостоверяющего личность'
      type: object
      properties:
        serie:
          type: string
          description: 'Серия документа'
        number:
          type: string
          description: 'Номер документа'
        issueDate:
          type: string
          format: date
          description: 'Дата выдачи документа (допустимые форматы: ''dd/MM/yyyy'', ''dd.MM.yyyy'')'
        issuedBy:
          type: string
          description: 'Кем выдан документ'
        docTypeCode:
          $ref: '#/components/schemas/DocTypeCode'
      required:
        - number
        
    DocTypeCode:
      type: string
      enum:
        - PASSPORT
        - ID_PASSPORT
        - DRIVING_LICENSE
        - PENSION_CERTIFICATE
        - E_PENSION_CERTIFICATE
        - DISABILITY_CERTIFICATE
        - VETERAN_CERTIFICATE
        - CHERNOBYL_CERTIFICATE
        - EXTERNAL_PASSPORT
        - FOREIGN_PASSPORT
        - RESIDENCE_PERMIT
        - REGISTRATION_CARD
        - BIRTH_CERTIFICATE
        - REFUGEE_STATUS_CERTIFICATE
        - MILITARY_IDENTITY_CARD
        - VGIRFO_DOCUMENT
        - PERMANENT_RESIDENCE_PERMIT_CERTIFICATE
        - TEMPORARY_RESIDENCE_PERMIT_CERTIFICATE
        - NEW_PASSPORT_TEMPLATE
      description: |
        Код типа документа, удостоверяющего личность:
         * `PASSPORT` - паспорт
         * `ID_PASSPORT` - ID-паспорт
         * `DRIVING_LICENSE` - водительское удостоверение
         * `PENSION_CERTIFICATE` - пенсионное удостоверение
         * `E_PENSION_CERTIFICATE` - электронное пенсионное удостоверение
         * `DISABILITY_CERTIFICATE` - удостоверение об инвалидности
         * `VETERAN_CERTIFICATE` - удостоверение участника войны
         * `CHERNOBYL_CERTIFICATE` - чернобыльское удостоверение
         * `EXTERNAL_PASSPORT` - заграничный паспорт
         * `FOREIGN_PASSPORT` - иностранный паспорт
         * `RESIDENCE_PERMIT` - вид на жительство
         * `REGISTRATION_CARD` - регистрационный талон
         * `BIRTH_CERTIFICATE` - свидетельство о рождении
         * `REFUGEE_STATUS_CERTIFICATE` - справка о статусе беженца
         * `MILITARY_IDENTITY_CARD` - военный билет
         * `VGIRFO_DOCUMENT` - документ, выданый ОГИРФЛ
         * `PERMANENT_RESIDENCE_PERMIT_CERTIFICATE` - постоянный вид на жительство в Украине
         * `TEMPORARY_RESIDENCE_PERMIT_CERTIFICATE` - временный вид на жительство в Украине
         * `NEW_PASSPORT_TEMPLATE` - паспорт (новый образец)
         
    AddressRequestDto:
      description: 'Данные адреса'
      type: object
      properties:
        country:
          type: string
          description: 'Страна (ISO-коды страны в двухбуквенной системе)'
        region:
          $ref: '#/components/schemas/Region'
        area:
          type: string
          description: 'Район'
        town:
          type: string
          description: 'Населенный пункт'
        street:
          type: string
          description: 'Улица'
        house:
          type: string
          description: 'Номер дома'
        addressLatin:
          type: string
          description: 'Адрес латиницей'
        addressImported:
          type: string
          description: 'Адрес в неструктурированном виде (обязательно для застрахованного объекта)'
        
    Region:
      type: string
      enum:
        - NONE_REGION
        - KRIM_REGION
        - VINNITSA_REGION
        - VOLIN_REGION
        - DNEPROPETROVSK_REGION
        - DONEZK_REGION
        - ZHITOMIR_REGION
        - ZAKARPATIE_REGION
        - ZAPOROZIE_REGION
        - IVANOFRANKOVSK_REGION
        - KIEV_REGION
        - KIROVOGRAD_REGION
        - LUGANSK_REGION
        - LVOV_REGION
        - NIKOLAEV_REGION
        - ODESSA_REGION
        - POLTAVA_REGION
        - ROVEN_REGION
        - SUMI_REGION
        - TERNOPOL_REGION
        - KHARKOV_REGION
        - KHERSON_REGION
        - KHMELNIZK_REGION
        - CHERKASSI_REGION
        - CHERNIGOV_REGION
        - CHERNOVZI_REGION
      description: |
        Область:
         * `NONE_REGION` - не задана
         * `KRIM_REGION` - Автономная Республика Крым
         * `VINNITSA_REGION` - Винницкая
         * `VOLIN_REGION` - Волынская
         * `DNEPROPETROVSK_REGION` - Днепропетровская
         * `DONEZK_REGION` - Донецкая
         * `ZHITOMIR_REGION` - Житомирская
         * `ZAKARPATIE_REGION` - Закарпатская
         * `ZAPOROZIE_REGION` - Запорожская
         * `IVANOFRANKOVSK_REGION` - Ивано-Франковская
         * `KIEV_REGION` - Киевская
         * `KIROVOGRAD_REGION` - Кировоградская
         * `LUGANSK_REGION` - Луганская
         * `LVOV_REGION` - Львовская
         * `NIKOLAEV_REGION` - Николаевская
         * `ODESSA_REGION` - Одесская
         * `POLTAVA_REGION` - Полтавская
         * `ROVEN_REGION` - Ровенская
         * `SUMI_REGION` - Сумская
         * `TERNOPOL_REGION` - Тернопольская
         * `KHARKOV_REGION` - Харьковская
         * `KHERSON_REGION` - Херсонская
         * `KHMELNIZK_REGION` - Хмельницкая
         * `CHERKASSI_REGION` - Черкасская
         * `CHERNIGOV_REGION` - Черниговская
         * `CHERNOVZI_REGION` - Черновицкая
         
    ContractInsObjectRequestDto:
      description: 'Застрахованный объект'
      type: object
      properties:
        objectCode:
          type: string
          description: 'Код застрахованного объекта (insuredPerson)'
        insuredPerson:
          $ref: '#/components/schemas/ContractInsuredPersonDataRequestDto'
        risks:
          type: array
          items:
            $ref: '#/components/schemas/RiskRequestDto'
        insuredSum_sum:
          $ref: '#/components/schemas/CurrencyFieldValue'
        realPremie_sum:
          $ref: '#/components/schemas/CurrencyFieldValue'
      required:
        - objectCode
        - insuredPerson
        - insuredSum_sum
        - realPremie_sum
        
    RiskRequestDto:
      description: 'Страховой риск'
      type: object
      properties:
        code:
          type: string
          description: 'Код'
        enabled:
          type: boolean
          description: 'Признак включенности риска'
          default: false
        franchisePercent:
          type: number
          format: double
          description: 'Значение франшизы в процентах'
        franchiseSum:
          $ref: '#/components/schemas/CurrencyFieldValue'
      required:
        - code
        - enabled
        
    ContractInsuredPersonDataRequestDto:
      description: 'Застрахованное лицо'
      type: object
      properties:
        personType:
          type: string
          enum:
            - NATURAL
          default: NATURAL
          description: |
            Тип контрагента:
              * `NATURAL` - физическое лицо
            По умолчанию: `NATURAL`
        person:
          $ref: '#/components/schemas/PersonRequestDto'
        inn:
          type: string
          description: 'ИНН'
        innRefused:
          type: boolean
          description: "Отказался от ИНН"
          default: false
        contact:
          $ref: '#/components/schemas/ContactRequestDto'
        identificationCard:
          $ref: '#/components/schemas/IdentificationCardRequestDto'
        additionalDocuments:
          type: array
          items:
            $ref: '#/components/schemas/IdentificationCardRequestDto'
          description: 'Список документов, удостоверяющих личность'
        address:
          $ref: '#/components/schemas/AddressRequestDto'
        resident:
          type: boolean
          default: true
          description: 'Признак резидента. По умолчанию: true'
      required:
        - personType
        - person
        - address
         
    CurrencyFieldValue:
      description: 'Класс, предназначенный для хранения значений в валюте'
      properties:
        value:
          type: number
          format: double
          description: 'Сумма'
        type:
          $ref: '#/components/schemas/CurrencyType'
         
    CurrencyType:
      type: string
      enum:
        - UAH
        - USD
        - EUR
      description: |
        Валюта:
         * `UAH` - гривна
         * `USD` - доллар США
         * `EUR` - евро
         
    ResponseStatus:
      type: string
      enum:
        - SUCCESS
        - ERROR
      description: |
        Статус ответа:
         * `SUCCESS` - успешное выполнение
         * `ERROR` - ошибка выполнения
         
    ContractCreationEntityType:
      type: string
      enum:
        - CONTRACT
        - ORDER
      description: |
        Сущность:
         * `CONTRACT` - договор
         * `ORDER` - заказ
         
    ContractCreationResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        responseMessage:
          type: string
          description: 'Текстовое сообщение о результате операции'
        entity:
          $ref: '#/components/schemas/ContractCreationEntityType'
        id:
          type: string
          description: 'Идентификатор сущности'
        requestContractNumber:
          type: string
          description: 'Номер договора из запроса'
      required:
        - status
    
    ContractsCreationResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        responseMessage:
          type: string
          description: 'Текстовое сообщение о результате операции'
        contractCreationResults:
          type: array
          items:
            $ref: '#/components/schemas/ContractCreationResponse'
      required:
        - status
        
    ContractConclusionRequest:
      type: object
      properties:
        id:
          type: string
          description: 'Идентификатор сущности'
        entity:
          $ref: '#/components/schemas/ContractCreationEntityType'
      required:
        - id
        - entity
        
    ContractConclusionResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        responseMessage:
          type: string
          description: 'Текстовое сообщение о результате операции'
        contractNumber:
          type: string
          description: 'Номер заключенного договора'
      required:
        - status
        
    GeneralContractRequest:
      type: object
      description: 'Данные генерального договора'
      properties:
        productId:
          type: number
          format: int64
          description: 'Идентификатор продукта'
        genContractNumber:
          type: string
          description: 'Номер договора'
        genContractDateSign:
          type: string
          format: date
          description: 'Дата подписания договора (допустимые форматы: "dd/MM/yyyy", "dd.MM.yyyy"). Если дата подписания не заполнена, будет установлена текущая дата'
        genContractDateBegin:
          type: string
          format: date
          description: 'Дата начала действия договора (допустимые форматы: "dd/MM/yyyy", "dd.MM.yyyy")'
        genContractDateEnd:
          type: string
          format: date
          description: 'Дата окончания действия договора (допустимые форматы: "dd/MM/yyyy", "dd.MM.yyyy")'
        genAcquisitorId:
          type: number
          format: int64
          description: 'Идентификатор аквизитора'
        genSaleChannelId:
          type: number
          format: int64
          description: 'Идентификатор канала продаж'
        genClient:
          type: object
          description: 'Данные страхователя'
          allOf:
            - $ref: '#/components/schemas/CagentRequestDto'
      required:
        - productId
        - genContractNumber
        - genContractDateSign
        - genContractDateBegin
        - genContractDateEnd
        - genAcquisitorId
        - genSaleChannelId
        - genClient
        
    GeneralContractResponse:
      type: object
      description: 'Результат сохранения генерального договора'
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        responseMessage:
          type: string
          description: 'Текстовое сообщение о результате операции'
        requestGenContractNumber:
          type: string
          description: 'Номер генерального договора'
      required:
        - status
        
    ContractCancellationRequestRequestDto:
      type: object
      properties:
        contractId:
          type: number
          format: int64
          description: 'Иденитификатор договора из базы данных КСАСК "ProfITsoft". Может передаваться идентификатор и/или номер договора. Если идентификатор и номер относятся к разным договорам, возникнет ошибка'
        contractNumber:
          type: string
          description: 'Номер договора из базы данных КСАСК "ProfITsoft". Может передаваться идентификатор и/или номер договора. Если идентификатор и номер относятся к разным договорам, возникнет ошибка'
        cancellationDate:
          type: string
          format: date
          description: 'Дата расторжения (допустимые форматы: "dd/MM/yyyy", "dd.MM.yyyy")'
        initiator:
          $ref: '#/components/schemas/ContractCancellationRequestInitiator'
        type:
          $ref: '#/components/schemas/ContractCancellationType'
        reasonId:
          type: number
          format: int64
          description: 'Идентификатор причины расторжения из базы данных КСАСК "ProfITsoft"'
        additionalContractNumber:
          type: string
          description: 'Номер доп. договора. По умолчанию нумерация начиная с 1'
        additionalContractDate:
          type: string
          format: date
          description: 'Дата подписания доп. договора (допустимые форматы: "dd/MM/yyyy", "dd.MM.yyyy"). По умолчанию равна дате расторжения минус 1 день'
        comment:
          type: string
          description: 'Комментарий по расторжению. По умочанию "-"'
        accruedContractPayments:
          type: object
          description: 'Возмещения, включенные в страховые акты. По умочанию 0'
          allOf:
            - $ref: '#/components/schemas/CurrencyFieldValue'
        settlementPeriodPayedCompensation:
          type: object
          description: 'Выплаченные страховые возмещения. По умочанию 0'
          allOf:
            - $ref: '#/components/schemas/CurrencyFieldValue'
        returnSum:
          type: object
          description: 'Сумма возврата. По умочанию 0'
          allOf:
            - $ref: '#/components/schemas/CurrencyFieldValue'
        returns:
          type: array
          description: 'Способы возврата'
          items:
            $ref: '#/components/schemas/ContractCancellationRequestReturnTypeRequestDto'
      required:
        - cancellationDate
        - initiator
        - type
        - reasonId
        - returns
          
    ContractCancellationRequestInitiator:
      type: string
      enum: [INSURED, INSURER]
      description: >
              Инициатор досрочного расторжения договора:
               * `INSURED` - Страхователь
               * `INSURER` - Cтраховщик
               
    ContractCancellationType:
      type: string
      enum: [CANCEL_WITH_RETURN, TRANSFER_TO_NEW, NON_PAYMENT, COMPOSITE]
      description: >
              Вариант расторжения:
               * `CANCEL_WITH_RETURN` - Расторжение с возвратом
               * `TRANSFER_TO_NEW` - Перенос на новый договор
               * `NON_PAYMENT` - Из-за неуплаты очередного платежа
               * `COMPOSITE` - Комбинированный
    
    ContractCancellationRequestReturnTypeRequestDto:
      type: object
      properties:
        paymentManner:
          $ref: '#/components/schemas/PaymentManner'
        returnSum:
          type: object
          description: 'Сумма возврата. По умочанию 0'
          allOf:
            - $ref: '#/components/schemas/CurrencyFieldValue'
        divisionId:
          type: number
          format: int64,
          description: 'Иденитификатор подразделения из базы данных КСАСК "ProfITsoft". Используется для способов возврата: "Через кассу подразделения (ГО, дирекции)" (THROUGH_DIVISION_CASH)'
        receiver:
          type: object
          description: 'Получатель суммы возврата. Используется для способов возврата: "Через кассу подразделения (ГО, дирекции)" (THROUGH_DIVISION_CASH), "Безналичный" (CASHLESS), "Зачисление на другого контрагента в качестве авансового платежа" (ACCEPTANCE_ON_OTHER_CAGENT), "Перечисление через систему переводов" (BY_TRANSFERS_SYSTEMS), "На карточный счет" (TO_PERSONAL_CARD)'
          allOf:
            - $ref: '#/components/schemas/CagentRequestDto'
        appropriation:
          type: string
          description: 'Назначение платежа. Используется для способов возврата: "Безналичный" (CASHLESS), "На карточный счет" (TO_PERSONAL_CARD)'
        anotherContractId:
          type: number
          format: int64
          description: 'Иденитификатор другого договора из базы данных КСАСК "ProfITsoft". Может передаваться идентификатор и/или номер договора. Если идентификатор и номер относятся к разным договорам, возникнет ошибка. Используется для способов возврата: "Зачисление на другой договор" (ACCEPTANCE_ON_OTHER_CONTRACT)'
        anotherContractNumber:
          type: string
          description: 'Номер другого договора из базы данных КСАСК "ProfITsoft". Может передаваться идентификатор и/или номер договора. Если идентификатор и номер относятся к разным договорам, возникнет ошибка. Используется для способов возврата: "Зачисление на другой договор" (ACCEPTANCE_ON_OTHER_CONTRACT)'
        transfersSystemCode:
          type: string
          description: 'Система переводов. Значение поля "Код" элемента справочника "Системы переводов". Используется для способов возврата: "Перечисление через систему переводов" (BY_TRANSFERS_SYSTEMS)'
        returnPaymentMethod:
          type: string
          description: 'Другой способ возврата. Используется для способов возврата: "Другое" (OTHER)'
        returnPaymentComment:
          type: string
          description: 'Комментарий к другому способу возврата. Используется для способов возврата: "Другое" (OTHER)'
      required:
        - paymentManner
    
    PaymentManner:
      type: string
      enum: [NONE, THROUGH_DIVISION_CASH, CASHLESS, BANK_TRANSFER, ACCEPTANCE_ON_OTHER_CONTRACT, ACCEPTANCE_ON_OTHER_CAGENT, BY_TRANSFERS_SYSTEMS, TO_PERSONAL_CARD, OTHER]
      description: >
              Способ возврата:
               * `NONE` - Расторжение с возвратом
               * `THROUGH_DIVISION_CASH` - Перенос на новый договор
               * `CASHLESS` - Из-за неуплаты очередного платежа
               * `BANK_TRANSFER` - Комбинированный
               * `ACCEPTANCE_ON_OTHER_CONTRACT` - Комбинированный
               * `ACCEPTANCE_ON_OTHER_CAGENT` - Комбинированный
               * `BY_TRANSFERS_SYSTEMS` - Комбинированный
               * `TO_PERSONAL_CARD` - Комбинированный
               * `OTHER` - Комбинированный
               
    ContractCancellationRequestCreationResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        responseMessage:
          type: string
          description: 'Текстовое сообщение о результате операции'
        contractCancellationRequestId:
          type: string
          description: 'Идентификатор запроса на расторжение в КСАСК "ProfITsoft"'
      required:
        - status
        
    ContractPremieListResponseDto:
      type: object
      properties:
        contractId:
          type: number
          format: int64
          description: 'Идентификатор договора'
        contractNumber:
          type: string
          description: 'Номер договора'
        requestDate:
          type: string
          format: date
          description: 'Дата запроса. Формат "dd.MM.yyyy HH:mm:ss"'
        premieRecords:
          $ref: '#/components/schemas/ContractSchedulePremieRecordWithRepaymentsResponseDto'
      required:
        - contractId
        - contractNumber
        - requestDate
        - premieRecords
        
    ContractSchedulePremieRecordWithRepaymentsResponseDto:
      type: object
      properties:
        premie:
          description: 'Сумма платежа'
          allOf:
            - $ref: '#/components/schemas/CurrencyFieldValue'
        datePremie:
          type: string
          format: date
          description: 'Дата, до которой необходимо произвести оплату. Формат "dd.MM.yyyy"'
        status:
          $ref: '#/components/schemas/PremieRecordStatus'
        repaymentInfoList:
          $ref: '#/components/schemas/ContractSchedulePremieRecordRepaymentResponseDto'
      required:
        - premie
        - datePremie
        - status
    
    PremieRecordStatus:
      type: string
      enum: [WAITING, EXPIRED, DISCHARGED, NONE, NOTNEED, DISCHARGED_OVERPAY, WAITING_OVERPAY, EXPIRED_OVERPAY]
      description: >
            Статус этапа оплаты:
              * `WAITING` - Ожидается
              * `EXPIRED` - Просрочен
              * `DISCHARGED` - Погашен
              * `NONE` - Не требует погашения (используется в предложении договора)
              * `NOTNEED` - Не требует погашения
              * `DISCHARGED_OVERPAY` - Погашен(-)
              * `WAITING_OVERPAY` - Ожидается(+)
              * `EXPIRED_OVERPAY` - Просрочен(+)
               
    ContractSchedulePremieRecordRepaymentResponseDto:
      type: object
      properties:
        paymentDocNumber:
          type: string
          description: 'Номер оригинального платежного документа из платежа'
        paymentDocDate:
         type: string
         format: date
         description: 'Дата оригинального платежного документа. Формат "dd.MM.yyyy"'
        assignmentSum:
          description: 'Сумма в распределении погашения на этап оплаты'
          allOf:
           - $ref: '#/components/schemas/CurrencyFieldValue'
        repaymentType:
          $ref: '#/components/schemas/RepaymentType'
      required:
        - assignmentSum
        - repaymentType
      
    RepaymentType:
        type: string
        enum: [PAYMENT, REQUEST]
        description: >
              Тип погашения для этапа оплаты. Этап оплаты по договору может погашаться платежем или требованием. Типы:
               * `PAYMENT` - Платеж
               * `REQUEST` - Требование
    
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/BO_integration/1C_DMS/1.0.0