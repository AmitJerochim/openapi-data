{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "0.1.8",
    "title" : "Planon REST API",
    "description" : "Planon API to search for rooms, view their details and availability and take an option on them or create a reservation."
  },
  "security" : [ {
    "key" : [ ]
  } ],
  "paths" : {
    "/activityTypes" : {
      "get" : {
        "summary" : "Get all activity types to cache (related to search).",
        "tags" : [ "Activity type" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Activity Types",
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/activityType"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/services" : {
      "get" : {
        "summary" : "Get all services (voorzieningen) to cache (related to search).",
        "tags" : [ "Services" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Services",
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "categories" : {
                          "type" : "array",
                          "items" : {
                            "$ref" : "#/components/schemas/category"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rooms" : {
      "get" : {
        "summary" : "Get a paged list of rooms",
        "description" : "Get an overview of all rooms with optional filters. Sorted on capacity first, then room name, both ascending.",
        "tags" : [ "Room" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/offset"
        }, {
          "$ref" : "#/components/parameters/limit"
        }, {
          "$ref" : "#/components/parameters/search"
        }, {
          "$ref" : "#/components/parameters/dateStart"
        }, {
          "$ref" : "#/components/parameters/hourStart"
        }, {
          "$ref" : "#/components/parameters/hourEnd"
        }, {
          "$ref" : "#/components/parameters/minPersons"
        }, {
          "$ref" : "#/components/parameters/maxPersons"
        }, {
          "$ref" : "#/components/parameters/activityTypes"
        }, {
          "$ref" : "#/components/parameters/services"
        }, {
          "$ref" : "#/components/parameters/accessible"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Rooms",
                  "type" : "object",
                  "properties" : {
                    "pagination" : {
                      "$ref" : "#/components/schemas/pagination"
                    },
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "rooms" : {
                          "type" : "array",
                          "items" : {
                            "$ref" : "#/components/schemas/roomWithId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/rooms/total" : {
      "get" : {
        "summary" : "Get the total number of rooms.",
        "description" : "",
        "tags" : [ "Room" ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "404" : {
            "$ref" : "#/components/responses/Standard404ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/rooms/{roomId}" : {
      "get" : {
        "summary" : "Get a single room.",
        "description" : "Get the details of a single room by its room id.",
        "tags" : [ "Room" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/roomId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/roomWithId"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "404" : {
            "$ref" : "#/components/responses/Standard404ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/rooms/{roomId}/unavailabilities" : {
      "get" : {
        "summary" : "Get the unavailability of a room.",
        "description" : "Get the unavailability of a room based on the given date time start-end range.",
        "tags" : [ "Room" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/roomId"
        }, {
          "$ref" : "#/components/parameters/dateTimeFrom"
        }, {
          "$ref" : "#/components/parameters/dateTimeTo"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Unavailabilities",
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/roomUnavailabilityInformation"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/rooms/{roomId}/checkAvailability" : {
      "get" : {
        "summary" : "Check the availability of a room in a certain period.",
        "description" : "Check the availability of a room based on the given date time start-end range.",
        "tags" : [ "Room" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/roomId"
        }, {
          "$ref" : "#/components/parameters/dateTimeFrom"
        }, {
          "$ref" : "#/components/parameters/dateTimeTo"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Availability code",
                  "type" : "string",
                  "pattern" : "unavailable|calendar|available",
                  "description" : "If the room is unavailable (because of reservations): unavailable, if the room is closed during the slot, but there are no reservations: calender, if the room is available: available."
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/rooms/{roomId}/prices" : {
      "get" : {
        "summary" : "Get the prices of a room.",
        "description" : "Get a detailed list of prices for a given room. AssociationType can e.g. be Erkende/betoelaagde verenigingen or Andere huurders. activityType can be Socio-culturele activiteit or Andere activiteit.",
        "tags" : [ "Room" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/roomId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Prices",
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/roomPrice"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/rooms/{roomId}/documents" : {
      "get" : {
        "summary" : "Get the documents of a room.",
        "description" : "Get a detailed list of documents for a given room.",
        "tags" : [ "Room", "Document" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/roomId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Documents",
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/documentInfo"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/rooms/{roomId}/photos" : {
      "get" : {
        "summary" : "Get all the photos of a room.",
        "description" : "Get a detailed list of all photos for a given room.",
        "tags" : [ "Room", "Photo" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/roomId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Photos",
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/photoInfo"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/rooms/{roomId}/questions" : {
      "post" : {
        "summary" : "Add a new question related to the room.",
        "description" : "Adds a new question.\n",
        "tags" : [ "Room", "Question" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/roomId"
        } ],
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/Standard201Response"
          },
          "202" : {
            "$ref" : "#/components/responses/Standard202Response"
          },
          "401" : {
            "$ref" : "#/components/responses/Standard401ErrorResponse"
          },
          "403" : {
            "$ref" : "#/components/responses/Standard403ErrorResponse"
          },
          "422" : {
            "$ref" : "#/components/responses/Standard422ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/question"
        }
      }
    },
    "/rooms/{roomId}/reservations" : {
      "post" : {
        "summary" : "Add a new reservation or option related to the room.",
        "description" : "Adds a new reservation/option. Which fields are required is entirely dependent on whether it's a reservation or option and can't be put in this specification properly.\n",
        "tags" : [ "Room", "Reservation" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/roomId"
        } ],
        "responses" : {
          "201" : {
            "description" : "The reservation has been added succesfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Reservation",
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/reservationWithIds"
                    }
                  }
                }
              }
            }
          },
          "202" : {
            "$ref" : "#/components/responses/Standard202Response"
          },
          "401" : {
            "$ref" : "#/components/responses/Standard401ErrorResponse"
          },
          "403" : {
            "$ref" : "#/components/responses/Standard403ErrorResponse"
          },
          "422" : {
            "$ref" : "#/components/responses/Standard422ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/reservation"
              }
            }
          },
          "description" : "Should contain all or some profile connection data.",
          "required" : true
        }
      }
    },
    "/reservations" : {
      "get" : {
        "summary" : "Get a list of all the reservations.",
        "description" : "Get an overview of all reservations with optional filters.",
        "tags" : [ "Reservation" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/offset"
        }, {
          "$ref" : "#/components/parameters/limit"
        }, {
          "name" : "gentUuid",
          "in" : "query",
          "description" : "The person UUID (Mijn Gent UUID).",
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/rooms"
        }, {
          "$ref" : "#/components/parameters/status"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Reservations",
                  "type" : "object",
                  "properties" : {
                    "pagination" : {
                      "$ref" : "#/components/schemas/pagination"
                    },
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "reservations" : {
                          "type" : "array",
                          "items" : {
                            "$ref" : "#/components/schemas/reservationWithIds"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/reservations/statuses" : {
      "get" : {
        "summary" : "Get all potential statuses for reservations to cache.",
        "tags" : [ "Statuses", "Reservation" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Statuses",
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reservations/{reservationId}" : {
      "get" : {
        "summary" : "Get a single reservation.",
        "description" : "Get the details of a single reservation by its reservation id.",
        "tags" : [ "Reservation" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/reservationId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/reservationWithIds"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "404" : {
            "$ref" : "#/components/responses/Standard404ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/reservations/{reservationId}/questions" : {
      "post" : {
        "summary" : "Add a question for a reservation.",
        "description" : "Add a question for a reservation, this constitutes updating a reservation.",
        "tags" : [ "Reservation", "Question" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/reservationId"
        } ],
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/Standard201Response"
          },
          "202" : {
            "$ref" : "#/components/responses/Standard202Response"
          },
          "401" : {
            "$ref" : "#/components/responses/Standard401ErrorResponse"
          },
          "403" : {
            "$ref" : "#/components/responses/Standard403ErrorResponse"
          },
          "422" : {
            "$ref" : "#/components/responses/Standard422ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/question"
        }
      }
    },
    "/persons" : {
      "post" : {
        "summary" : "Add a new person.",
        "tags" : [ "Person" ],
        "responses" : {
          "201" : {
            "description" : "The person has been added (or re-instated) succesfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/person"
                    }
                  }
                }
              }
            }
          },
          "202" : {
            "$ref" : "#/components/responses/Standard202Response"
          },
          "401" : {
            "$ref" : "#/components/responses/Standard401ErrorResponse"
          },
          "403" : {
            "$ref" : "#/components/responses/Standard403ErrorResponse"
          },
          "422" : {
            "$ref" : "#/components/responses/Standard422ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/person"
        }
      }
    },
    "/persons/{gentUuid}" : {
      "get" : {
        "summary" : "Get a specific person data.",
        "tags" : [ "Person" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/gentUuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/person"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "404" : {
            "$ref" : "#/components/responses/Standard404ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      },
      "patch" : {
        "summary" : "Update a person.",
        "tags" : [ "Person" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/gentUuid"
        } ],
        "responses" : {
          "201" : {
            "description" : "The person has been updated succesfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/person"
                    }
                  }
                }
              }
            }
          },
          "202" : {
            "$ref" : "#/components/responses/Standard202Response"
          },
          "204" : {
            "description" : "Reservation updated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/reservationWithIds"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Standard401ErrorResponse"
          },
          "403" : {
            "$ref" : "#/components/responses/Standard403ErrorResponse"
          },
          "422" : {
            "$ref" : "#/components/responses/Standard422ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/person"
        }
      }
    },
    "/questions" : {
      "get" : {
        "summary" : "Get a paged list of questions.",
        "description" : "Get an overview of all questions with optional filters.",
        "tags" : [ "Question" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/offset"
        }, {
          "$ref" : "#/components/parameters/limit"
        }, {
          "name" : "roomId",
          "in" : "query",
          "description" : "The room Id.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reservationId",
          "in" : "query",
          "description" : "The reservation Id.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "gentUuid",
          "in" : "query",
          "description" : "The person UUID (Mijn Gent UUID).",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Questions",
                  "type" : "object",
                  "properties" : {
                    "pagination" : {
                      "$ref" : "#/components/schemas/pagination"
                    },
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "rooms" : {
                          "type" : "array",
                          "items" : {
                            "$ref" : "#/components/schemas/questionWithAnswerWithIds"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "404" : {
            "$ref" : "#/components/responses/Standard404ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/questions/statuses" : {
      "get" : {
        "summary" : "Get all potential statuses for questions to cache.",
        "tags" : [ "Statuses", "Question" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "Statuses",
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/status"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/questions/{questionId}" : {
      "get" : {
        "summary" : "Get a single question.",
        "description" : "Get the details of a single question by its question id.",
        "tags" : [ "Question" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/questionId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/questionWithAnswerWithIds"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "404" : {
            "$ref" : "#/components/responses/Standard404ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/documents/{documentId}" : {
      "get" : {
        "summary" : "Get one specific document of a room.",
        "description" : "Get a detailed list of documents for a given room.",
        "tags" : [ "Document" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/documentId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/roomDocument"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    },
    "/photos/{photoId}" : {
      "get" : {
        "summary" : "Get one specific photo of a room.",
        "tags" : [ "Photo" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/photoId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "$ref" : "#/components/schemas/roomPhoto"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/Standard400ErrorResponse"
          },
          "500" : {
            "$ref" : "#/components/responses/Standard500ErrorResponse"
          }
        }
      }
    }
  },
  "servers" : [ {
    "url" : "https://planon.gentgrp.gent.be/api/rest/v1"
  } ],
  "components" : {
    "parameters" : {
      "offset" : {
        "name" : "offset",
        "in" : "query",
        "description" : "Offset the list of returned results by this amount. Default is zero.",
        "schema" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "limit" : {
        "name" : "limit",
        "in" : "query",
        "description" : "Number of items to retrieve. Default is 5, maximum is 100.",
        "schema" : {
          "type" : "integer",
          "format" : "int32"
        }
      },
      "roomId" : {
        "name" : "roomId",
        "in" : "path",
        "description" : "The Room UUID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "search" : {
        "name" : "search",
        "in" : "query",
        "description" : "Search string to search rooms by (name, building, district, postal code or city).",
        "schema" : {
          "type" : "string"
        }
      },
      "dateStart" : {
        "name" : "dateStart",
        "in" : "query",
        "description" : "(Start)Date activity. If the room is available on that day (even only an hour), it is available.",
        "schema" : {
          "type" : "string",
          "format" : "date"
        }
      },
      "hourStart" : {
        "name" : "hourStart",
        "in" : "query",
        "description" : "Start hour activity. If this is filled out, startDate and endHour required.",
        "schema" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "hourEnd" : {
        "name" : "hourEnd",
        "in" : "query",
        "description" : "End hour activity. If this is filled out, startHour is required.",
        "schema" : {
          "type" : "string",
          "format" : "date-time"
        }
      },
      "minPersons" : {
        "name" : "minPersons",
        "in" : "query",
        "description" : "Minimal number of persons.",
        "schema" : {
          "type" : "integer"
        }
      },
      "maxPersons" : {
        "name" : "maxPersons",
        "in" : "query",
        "description" : "Minimal number of persons.",
        "schema" : {
          "type" : "integer"
        }
      },
      "activityTypes" : {
        "name" : "activityTypes",
        "in" : "query",
        "description" : "One or more activities supported by or allowed in the room.",
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "services" : {
        "name" : "services",
        "in" : "query",
        "description" : "One or more services supported by the room.",
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "accessible" : {
        "name" : "accessible",
        "in" : "query",
        "description" : "Is the room accessible for wheelchairs.",
        "schema" : {
          "type" : "boolean"
        }
      },
      "documentId" : {
        "name" : "documentId",
        "in" : "path",
        "description" : "The Document UUID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "photoId" : {
        "name" : "photoId",
        "in" : "path",
        "description" : "The photo UUID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "reservationId" : {
        "name" : "reservationId",
        "in" : "path",
        "description" : "The reservation UUID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "rooms" : {
        "name" : "rooms",
        "in" : "query",
        "description" : "A set of room id's for which to show the reservations.",
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "status" : {
        "name" : "status",
        "in" : "query",
        "description" : "The status on which to filter.",
        "schema" : {
          "type" : "string"
        }
      },
      "questionId" : {
        "name" : "questionId",
        "in" : "path",
        "description" : "The question ID.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "gentUuid" : {
        "name" : "gentUuid",
        "in" : "path",
        "description" : "The person UUID (Mijn Gent UUID).",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "dateTimeFrom" : {
        "name" : "dateTimeFrom",
        "in" : "query",
        "description" : "Date range start date-time.",
        "required" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "dateTimeTo" : {
        "name" : "dateTimeTo",
        "in" : "query",
        "description" : "Date range end date-time.",
        "required" : false,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "responses" : {
      "Standard200Response" : {
        "description" : "Request accepted."
      },
      "Standard201Response" : {
        "description" : "Resource created."
      },
      "Standard202Response" : {
        "description" : "Request accepted but not processed."
      },
      "Standard204Response" : {
        "description" : "Request accepted, no content returned."
      },
      "Standard304Response" : {
        "description" : "Resource not modified."
      },
      "Standard400ErrorResponse" : {
        "description" : "Bad request, e.g. can't parse the filters.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Standard401ErrorResponse" : {
        "description" : "This request requires authentication.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Standard403ErrorResponse" : {
        "description" : "You're not authorized to access this resource.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Standard404ErrorResponse" : {
        "description" : "No objects found.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Standard405ErrorResponse" : {
        "description" : "Method not allowed.",
        "headers" : {
          "Allow" : {
            "description" : "A list of valid methods for the requested resource",
            "schema" : {
              "type" : "string"
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Standard410ErrorResponse" : {
        "description" : "Resource no longer available.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Standard422ErrorResponse" : {
        "description" : "Unprocessable entity.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Standard500ErrorResponse" : {
        "description" : "An unexpected error occured.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "requestBodies" : {
      "question" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/question"
            }
          }
        },
        "description" : "Should contain all question data.",
        "required" : true
      },
      "person" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/person"
            }
          }
        },
        "description" : "Should contain the person data.",
        "required" : true
      }
    },
    "securitySchemes" : {
      "key" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "key"
      }
    },
    "schemas" : {
      "roomId" : {
        "type" : "string",
        "description" : "The Room Universal Unique Identifier (UUID)."
      },
      "reservationId" : {
        "type" : "string",
        "description" : "The Reservation Universal Unique Identifier (UUID)."
      },
      "documentId" : {
        "type" : "string",
        "description" : "The Document Universal Unique Identifier (UUID)."
      },
      "questionId" : {
        "type" : "string",
        "description" : "The Question ID."
      },
      "statusId" : {
        "type" : "string",
        "description" : "The Status ID."
      },
      "gentUuid" : {
        "type" : "string",
        "description" : "The Mijn Gent Universal Unique Identifier (UUID)."
      },
      "pagination" : {
        "properties" : {
          "total" : {
            "type" : "integer",
            "description" : "The total number of objects that can be returned."
          },
          "offset" : {
            "type" : "integer",
            "description" : "The offset that was used."
          },
          "limit" : {
            "type" : "integer",
            "description" : "The number of objects that are returned for this call."
          }
        }
      },
      "activityType" : {
        "required" : [ "activityTypeId", "name" ],
        "properties" : {
          "activityTypeId" : {
            "type" : "string",
            "description" : "Universal Unique Identifier (UUID)."
          },
          "name" : {
            "type" : "string",
            "description" : "Activity name"
          }
        }
      },
      "category" : {
        "required" : [ "code", "services" ],
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Category name."
          },
          "services" : {
            "type" : "array",
            "description" : "Services in this category.",
            "items" : {
              "$ref" : "#/components/schemas/service"
            }
          }
        }
      },
      "service" : {
        "required" : [ "serviceId", "name" ],
        "properties" : {
          "serviceId" : {
            "type" : "string",
            "description" : "Universal Unique Identifier (UUID)."
          },
          "name" : {
            "type" : "string",
            "description" : "Service name"
          }
        }
      },
      "status" : {
        "required" : [ "statusId", "systemState", "name" ],
        "properties" : {
          "statusId" : {
            "type" : "string",
            "description" : "Universal Unique Identifier (UUID)."
          },
          "systemState" : {
            "type" : "string",
            "description" : "Mogelijkheden: gemeld, in optie, definitief, administratief gereed, vervallen. Hier vallen een hoop statussen onder (zie status.name)."
          },
          "name" : {
            "type" : "string",
            "description" : "Status name"
          }
        }
      },
      "room" : {
        "required" : [ "name", "buildingName", "description", "capacity", "location", "area", "goodToKnow", "services", "activityTypes", "contact" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the room"
          },
          "buildingName" : {
            "type" : "string",
            "description" : "The name of the building"
          },
          "cityRoom" : {
            "type" : "boolean",
            "description" : "Whether the room is owned by the city of Ghent."
          },
          "capacity" : {
            "type" : "integer",
            "description" : "The maximum capacity of the room (number of people)."
          },
          "mainPhoto" : {
            "$ref" : "#/components/schemas/roomPhoto"
          },
          "location" : {
            "$ref" : "#/components/schemas/roomLocation"
          },
          "area" : {
            "type" : "integer",
            "description" : "The size of the room in square meters."
          },
          "description" : {
            "type" : "string",
            "description" : "Full description of the room."
          },
          "goodToKnow" : {
            "type" : "string",
            "description" : "Good to know about the room."
          },
          "categories" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/category"
            },
            "description" : "The id's of the services the room offers."
          },
          "activityTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/activityType"
            },
            "description" : "The activity types the room offers."
          },
          "kitchen" : {
            "type" : "boolean",
            "description" : "Has the room a kitchen that can be optionally booked."
          },
          "contact" : {
            "$ref" : "#/components/schemas/roomContact"
          },
          "maxDaysBefore" : {
            "type" : "integer",
            "description" : "Maximum number of days in the future the room can be booked. Zero means no limit."
          }
        }
      },
      "roomWithId" : {
        "allOf" : [ {
          "properties" : {
            "roomId" : {
              "$ref" : "#/components/schemas/roomId"
            }
          }
        }, {
          "$ref" : "#/components/schemas/room"
        } ]
      },
      "roomLocation" : {
        "required" : [ "street", "houseNumber", "postalCode", "city", "latitude", "longitude" ],
        "properties" : {
          "street" : {
            "type" : "string",
            "description" : "The street of the building in which the room is."
          },
          "houseNumber" : {
            "type" : "string",
            "description" : "The house number of the building in which the room is."
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postalCode of the building in which the room is."
          },
          "city" : {
            "type" : "string",
            "description" : "The city of the building in which the room is."
          },
          "latitude" : {
            "type" : "string",
            "description" : "The latitude of the building in which the room is."
          },
          "longitude" : {
            "type" : "string",
            "description" : "The longitude of the building in which the room is."
          }
        }
      },
      "roomContact" : {
        "properties" : {
          "roomId" : {
            "$ref" : "#/components/schemas/roomId"
          },
          "address" : {
            "type" : "string",
            "description" : "The contact address (physical)."
          },
          "tel" : {
            "type" : "string",
            "description" : "The telephone number."
          },
          "email" : {
            "type" : "string",
            "description" : "The email address."
          },
          "website" : {
            "type" : "string",
            "description" : "The website for contact information."
          }
        }
      },
      "roomUnavailability" : {
        "required" : [ "roomId", "dateTimeStart", "dateTimeEnd" ],
        "properties" : {
          "roomId" : {
            "$ref" : "#/components/schemas/roomId"
          },
          "dateTimeStart" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The start date-time of the unavailability."
          },
          "dateTimeEnd" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The end date-time of the unavailability."
          },
          "type" : {
            "type" : "string",
            "pattern" : "calendar|reservation",
            "description" : "The type of unavailability, can be: calendar or reservation. Calendar means closing hours, reservation means there is a reservation."
          }
        }
      },
      "roomUnavailabilityInformation" : {
        "properties" : {
          "unavailabilities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/roomUnavailability"
            }
          }
        }
      },
      "roomPrice" : {
        "required" : [ "roomId", "duration", "associationType", "activityType" ],
        "properties" : {
          "roomId" : {
            "$ref" : "#/components/schemas/roomId"
          },
          "duration" : {
            "type" : "string",
            "description" : "The duration of the renting of the room (hour/day/week)."
          },
          "associationType" : {
            "type" : "string",
            "description" : "The association type (accredited/other)."
          },
          "activityType" : {
            "type" : "string",
            "description" : "The activity type (socio-cultural/other)."
          },
          "price" : {
            "type" : "integer",
            "description" : "The amount of money you have to pay."
          }
        }
      },
      "documentInfo" : {
        "required" : [ "documentId", "name", "size", "type", "updated" ],
        "properties" : {
          "documentId" : {
            "$ref" : "#/components/schemas/documentId"
          },
          "name" : {
            "type" : "string",
            "description" : "The document name."
          },
          "size" : {
            "type" : "integer",
            "description" : "The document size in kilobytes."
          },
          "type" : {
            "type" : "string",
            "description" : "The document type (pdf, docx, ...)."
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date-time on which this document was last updated."
          }
        }
      },
      "roomDocument" : {
        "required" : [ "documentId", "name", "size", "type", "base64String" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/documentInfo"
        }, {
          "properties" : {
            "base64String" : {
              "type" : "string",
              "format" : "byte",
              "description" : "The base64 encoded contents of the document."
            }
          }
        } ]
      },
      "photoInfo" : {
        "required" : [ "photoId", "name" ],
        "properties" : {
          "photoId" : {
            "type" : "string",
            "description" : "The photo identifier (UUID)"
          },
          "name" : {
            "type" : "string",
            "description" : "The photo name."
          },
          "isMain" : {
            "type" : "boolean",
            "description" : "Indicates if this is the main photo."
          }
        }
      },
      "roomPhoto" : {
        "required" : [ "photoId", "name", "base64String" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/photoInfo"
        }, {
          "properties" : {
            "base64String" : {
              "type" : "string",
              "format" : "byte",
              "description" : "The base64 encoded contents of the photo."
            }
          }
        } ]
      },
      "question" : {
        "required" : [ "firstname", "lastname", "email", "tel", "question" ],
        "properties" : {
          "gentUuid" : {
            "$ref" : "#/components/schemas/gentUuid"
          },
          "firstname" : {
            "type" : "string",
            "description" : "The first name of the persion asking the question."
          },
          "lastname" : {
            "type" : "string",
            "description" : "The last name of the persion asking the question."
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the persion asking the question."
          },
          "tel" : {
            "type" : "string",
            "description" : "The phone number of the persion asking the question."
          },
          "association" : {
            "type" : "string",
            "description" : "The association (vereniging)."
          },
          "question" : {
            "type" : "string",
            "description" : "The actual question being posed."
          }
        }
      },
      "answer" : {
        "required" : [ "answer" ],
        "properties" : {
          "gentUuid" : {
            "$ref" : "#/components/schemas/gentUuid"
          },
          "answer" : {
            "type" : "string",
            "description" : "The answer to a question posed."
          }
        }
      },
      "questionWithAnswer" : {
        "allOf" : [ {
          "properties" : {
            "questionId" : {
              "$ref" : "#/components/schemas/questionId"
            },
            "question" : {
              "$ref" : "#/components/schemas/question"
            },
            "answer" : {
              "$ref" : "#/components/schemas/answer"
            }
          }
        } ]
      },
      "questionWithAnswerWithIds" : {
        "allOf" : [ {
          "properties" : {
            "roomId" : {
              "$ref" : "#/components/schemas/roomId"
            },
            "reservationId" : {
              "$ref" : "#/components/schemas/reservationId"
            }
          }
        }, {
          "$ref" : "#/components/schemas/questionWithAnswer"
        } ]
      },
      "reservation" : {
        "description" : "A representation of a reservation",
        "properties" : {
          "activityName" : {
            "type" : "string",
            "description" : "The name of the activity."
          },
          "inOption" : {
            "type" : "boolean",
            "description" : "Whether the reservation is still in option."
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the activity being organized."
          },
          "activityTypeId" : {
            "type" : "string",
            "description" : "The type of the activity (id)."
          },
          "kitchen" : {
            "type" : "boolean",
            "description" : "Only if there is the kitchen attribute is set on the room."
          },
          "participants" : {
            "type" : "integer",
            "description" : "The expected number of participants for the activity."
          },
          "profit" : {
            "type" : "boolean",
            "description" : "Whether the activity is being organized for profit."
          },
          "associationType" : {
            "type" : "integer",
            "description" : "If the activity organized is in name of an organization and if so, which type. Options are: 1) No, not as an organization 2) Yes, as non-recognized association 3? Yes, as recognized association."
          },
          "associationName" : {
            "type" : "string",
            "description" : "If the activity organized is in name of an organization, the name of the association."
          },
          "planning" : {
            "$ref" : "#/components/schemas/reservationPlanning"
          },
          "contactInfo" : {
            "$ref" : "#/components/schemas/person"
          },
          "legalEntity" : {
            "$ref" : "#/components/schemas/legalEntity"
          },
          "postalAddress" : {
            "$ref" : "#/components/schemas/postalAddress"
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional comments or questions."
          }
        },
        "required" : [ "activityName" ]
      },
      "reservationWithIds" : {
        "required" : [ "reservationId", "roomId", "statusId" ],
        "allOf" : [ {
          "properties" : {
            "reservationId" : {
              "$ref" : "#/components/schemas/reservationId"
            },
            "roomId" : {
              "$ref" : "#/components/schemas/roomId"
            },
            "statusId" : {
              "$ref" : "#/components/schemas/statusId"
            },
            "roomName" : {
              "type" : "string",
              "description" : "The name of the room"
            },
            "buildingName" : {
              "type" : "string",
              "description" : "The name of the building"
            }
          }
        }, {
          "$ref" : "#/components/schemas/reservation"
        } ]
      },
      "reservationPlanning" : {
        "properties" : {
          "generalPlanning" : {
            "$ref" : "#/components/schemas/startEnd"
          },
          "dailyPlanning" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/startEnd"
            }
          },
          "buildingDemolitionPlanning" : {
            "properties" : {
              "buildingPlanning" : {
                "$ref" : "#/components/schemas/startEnd"
              },
              "demolitionPlanning" : {
                "$ref" : "#/components/schemas/startEnd"
              }
            }
          },
          "recurring" : {
            "type" : "string",
            "description" : "Manual text entry for a recurring activity"
          }
        }
      },
      "startEnd" : {
        "properties" : {
          "dateTimeStart" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The start date-time."
          },
          "dateTimeEnd" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The end date-time."
          }
        }
      },
      "person" : {
        "required" : [ "gentUuid", "firstname", "lastname", "email", "tel", "street", "houseNumber", "postalCode", "city", "countryCode" ],
        "properties" : {
          "gentUuid" : {
            "$ref" : "#/components/schemas/gentUuid"
          },
          "firstname" : {
            "type" : "string",
            "description" : "The first name of the person organizing."
          },
          "lastname" : {
            "type" : "string",
            "description" : "The last name of the person organizing."
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the person organizing."
          },
          "tel" : {
            "type" : "string",
            "description" : "The telephone number of the person organizing."
          },
          "ssn" : {
            "type" : "string",
            "description" : "The social security number of the person organizing.",
            "maxLength" : 11
          },
          "street" : {
            "type" : "string",
            "description" : "The street of the person's address.",
            "maxLength" : 60
          },
          "houseNumber" : {
            "type" : "string",
            "description" : "The houseNumber of the person's address.",
            "maxLength" : 10
          },
          "boxNumber" : {
            "type" : "string",
            "description" : "The box number of the person's address.",
            "maxLength" : 10
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal of code the person's address.",
            "maxLength" : 10
          },
          "city" : {
            "type" : "string",
            "description" : "The city of the person's address.",
            "maxLength" : 40
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The country code (ISO) of the person's address.",
            "maxLength" : 2
          }
        }
      },
      "legalEntity" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the legal entity.",
            "maxLength" : 40
          },
          "companyNumber" : {
            "type" : "string",
            "description" : "The company number of the legal entity."
          },
          "vatNumber" : {
            "type" : "string",
            "description" : "The VAT number of the legal entity.",
            "maxLength" : 20
          },
          "street" : {
            "type" : "string",
            "description" : "The street of the legal entity address.",
            "maxLength" : 60
          },
          "houseNumber" : {
            "type" : "string",
            "description" : "The houseNumber of the legal entity address.",
            "maxLength" : 10
          },
          "boxNumber" : {
            "type" : "string",
            "description" : "The box number of the legal entity address.",
            "maxLength" : 10
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal of code the legal entity address.",
            "maxLength" : 10
          },
          "city" : {
            "type" : "string",
            "description" : "The city of the legal entity address.",
            "maxLength" : 40
          },
          "country" : {
            "type" : "string",
            "description" : "The country name of the legal entity address.",
            "maxLength" : 40
          }
        }
      },
      "postalAddress" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The addressee of the postal address.",
            "maxLength" : 40
          },
          "street" : {
            "type" : "string",
            "description" : "The street of the postal address.",
            "maxLength" : 60
          },
          "houseNumber" : {
            "type" : "string",
            "description" : "The houseNumber of the postal address.",
            "maxLength" : 10
          },
          "boxNumber" : {
            "type" : "string",
            "description" : "The box number of the postal address.",
            "maxLength" : 10
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal of code the postal address.",
            "maxLength" : 10
          },
          "city" : {
            "type" : "string",
            "description" : "The city of the postal address.",
            "maxLength" : 40
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The country code (ISO) of the postal address.",
            "maxLength" : 2
          }
        }
      },
      "Error" : {
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    }
  }
}