openapi: 3.0.0
servers:
  - description: "iTouchVision production environment"
    url: 'https://itouch.vision/integration/805/'
  - description: "iTouchVision testing environment"
    url: 'https://itouch.vision/demo/integration/805/'
info:
  title: iTouchVision Platform Web Services
  version: "8.0.5"
  termsOfService: "https://www.itouchvision.com"
  contact:
    name: "iTouchVision Platform Team"
    email: "support@itouchvision.com"
    url: "https://www.itouchvision.com"
tags:
  - name: Service
    description: Service methods.
  - name: Task
    description: Task methods.
  - name: Community
    description: Person and organisation methods.
  - name: Contract
    description: Contract methods.
  - name: Product
    description: Product methods.
  - name: Booking
    description: Booking methods.
  - name: Waste
    description: Waste methods.
  - name: Quoting
    description: Quoting methods.
  - name: Event management
    description: Error, event and log management methods.
  - name: Assets
    description: Assets methods.
  - name: Locations
    description: Locations methods.
  - name: News
    description: News methods.    
paths:
  #deleteLocation
  /location/{locationNumber}:
    delete:
      tags:
        - Locations
      summary: Delete a location.
      operationId: deleteLocation
      description: |
        By passing in the appropriate options, you can delete a location.
      parameters:
        - in: path
          name: locationNumber
          description: The location ID that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Location deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The location cannot be found with the location ID supplied. 

  #getLocation        
    get:
      tags:
        - Locations
      summary: Get a location
      operationId: getLocations
      description: |
        Pass in the appropriate location details to get the addresses against an organisation.
      parameters:
        - in: path
          name: locationNumber
          description: The location Number for a given location.
          required: true
          schema:
            type: number
        - in: query
          name: address1
          description: The first line of the address.
          schema:
            type: string
        - in: query
          name: address2
          description: The second line of the address.
          schema:
            type: string
        - in: query
          name: address3
          description: The third line of the address.
          schema:
            type: string
        - in: query
          name: city
          description: The city or county of the address.
          schema:
            type: string
            default: "Active"
        - in: query
          name: postcode
          description: The postcode of the address.
          schema:
            type: string
            default: "Active"            
        - in: query
          name: region
          description: The region of the address. Example 'England', 'Ireland', etc.
          schema:
            type: string
            default: "Active"                
        - in: query
          name: state
          description: The state of the address. Used for countries where they have states, Examplem USA or India
          schema:
            type: string
            default: "Active"
        - in: query
          name: country
          description: The country of the address.
          schema:
            type: string
            default: "Active"
        - in: query
          name: uprn
          description: The unique property reference number of the address.
          schema:
            type: string
            default: "Active"
        - in: query
          name: enabled
          description: Whether the address is active or not.
          schema:
            type: string
            enum: ["Yes","No"]
      responses:
        '200':
          description: The location is successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locations'
        '400':
          description: bad input parameter 
        '404':
          description: A organisation's location cannot be found with the organisation number supplied.   

  #createLocation
    post:
      tags:
        - Locations
      summary: Add an new location
      operationId: createLocation
      description: |
        Pass in the appropriate location details to create a new location.
      parameters:
        - in: path
          name: locationNumber
          description: This is not required in POST request.
          required: true
          schema:
            type: number
        - in: query
          name: locationNumber
          description: The location Number.
          required: false
          schema:
            type: number
        - in: query
          name: address1
          description: The first line of the address.
          required: true
          schema:
            type: string
        - in: query
          name: address2
          description: The second line of the address.
          required: true
          schema:
            type: string
        - in: query
          name: address3
          description: The third line of the address.
          schema:
            type: string
        - in: query
          name: city
          description: The city or county of the address.
          required: true
          schema:
            type: string
            default: "Active"
        - in: query
          name: postcode
          description: The postcode of the address.
          required: true
          schema:
            type: string
            default: "Active"            
        - in: query
          name: region
          description: The region of the address. Example 'England', 'Ireland', etc.
          schema:
            type: string
            default: "Active"                
        - in: query
          name: state
          description: The state of the address. Used for countries where they have states, Examplem USA or India
          schema:
            type: string
            default: "Active"
        - in: query
          name: country
          description: The country of the address.
          required: true
          schema:
            type: string
            default: "Active"
        - in: query
          name: uprn
          description: The unique property reference number of the address.
          schema:
            type: string
            default: "Active"
        - in: query
          name: enabled
          description: Whether the address is active or not.
          schema:
            type: string
            enum: ["Yes","No"]
      responses:
        '200':
          description: The location is successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          
  #getWasteBookings
  /booking/waste/{bookingNumber}:
    get:
      tags:
        - Booking
      summary: Allows you to retrieve the full details of a given waste booking.
      operationId: getWasteBookings
      description: 
        By passing in the appropriate options, you can search for available waste bookings in the platform
      parameters:
        - in: path
          name: bookingNumber
          description: The Booking number of booking.
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: facility
          description: The Booking facility
          required: true
          schema:
            type: string
        - in: query
          name: title
          description: Title of the waste booking
          required: true
          schema:
            type: string
        - in: query
          name: group
          description: Group of the waste booking item
          required: true
          schema:
            type: string
        - in: query
          name: item
          description: Item of the waste booking.
          required: true
          schema:
            type: string
        - in: query
          name: date
          description: The Booking Date
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          description: StartTime of the waste booking
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          description: EndTime of the waste booking
          required: true
          schema:
            type: string
        - in: query
          name: status
          description: Status of the waste booking
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Waste Booking retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookings'
        '400':
          description: bad input parameter
        '404':
          description: The booking cannot be found with the booking number supplied.

  #getWasteBookings
  /booking/waste/serviceRequest/{serviceRequestNumber}:
    get:
      tags:
        - Booking
      summary: Allows you to retrieve the full details of a given waste booking.
      operationId: getWasteBookingsViaServiceRequest
      description: 
        By passing in the appropriate options, you can search for available waste bookings in the platform
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The Booking number of booking.
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Waste Booking retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookingWaste'
        '400':
          description: bad input parameter
        '404':
          description: The booking cannot be found with the booking number supplied.
          
  #makeWasteBooking
  /booking/waste:
    post:
      tags:
        - Booking
      summary: Allows you to make an waste booking.
      operationId: makeWasteBooking
      description: Create an waste Booking.
      parameters:
        - in: query
          name: bookingNumber
          description: The Booking Number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: date
          description: The Booking Date
          required: true
          schema:
            type: string
        - in: query
          name: facility
          description: The Booking facility
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          description: StartTime of the waste booking
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          description: EndTime of the waste booking
          required: true
          schema:
            type: string
        - in: query
          name: title
          description: Title of the waste
          required: true
          schema:
            type: string
        - in: query
          name: group
          description: Group of the waste booking item
          required: true
          schema:
            type: string
        - in: query
          name: item
          description: Item of the waste booking.
          required: true
          schema:
            type: string
        - in: query
          name: cost
          description: Cost of the waste booking
          required: true
          schema:
            type: string
        - in: query
          name: currency
          description: Currency of the waste booking
          required: true
          schema:
            type: string
        - in: query
          name: status
          description: Status of the waste booking
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Waste Bookings created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          
  #getAssetBookings
  /booking/asset/{bookingNumber}:
    get:
      tags:
        - Booking
      summary: Allows you to retrieve the full details of a given asset booking.
      operationId: getAssetBookings
      description: 
        By passing in the appropriate options, you can search for available asset bookings in the platform
      parameters:
        - in: path
          name: bookingNumber
          description: The Booking number of booking.
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: facility
          description: The Booking facility
          required: true
          schema:
            type: string
        - in: query
          name: title
          description: Title of the asset booking
          required: true
          schema:
            type: string
        - in: query
          name: date
          description: The Booking Date
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          description: StartTime of the asset booking
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          description: EndTime of the asset booking
          required: true
          schema:
            type: string
        - in: query
          name: status
          description: Status of the asset booking
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Asset Booking retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookings'
        '400':
          description: bad input parameter
        '404':
          description: The booking cannot be found with the booking number supplied.
          
  #makeAssetBooking
  /booking/asset:
    post:
      tags:
        - Booking
      summary: Allows you to make an asset booking.
      operationId: makeAssetBooking
      description: Create an asset Booking.
      parameters:
        - in: query
          name: bookingNumber
          description: The Booking Number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: date
          description: The Booking Date
          required: true
          schema:
            type: string
        - in: query
          name: facility
          description: The Booking facility
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          description: StartTime of the asset booking
          required: true
          schema:
            type: string
        - in: query
          name: availability
          description: Availability of the asset booking
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          description: EndTime of the asset booking
          required: true
          schema:
            type: string
        - in: query
          name: title
          description: Title of the asset
          required: true
          schema:
            type: string
        - in: query
          name: cost
          description: Cost of the asset booking
          required: true
          schema:
            type: string
        - in: query
          name: currency
          description: Currency of the asset booking
          required: true
          schema:
            type: string
        - in: query
          name: description
          description: Description of the asset booking
          required: true
          schema:
            type: string
        - in: query
          name: status
          description: Status of the asset booking
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Asset Bookings created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          
  #getEventBookings
  /booking/event/{bookingNumber}:
    get:
      tags:
        - Booking
      summary: Allows you to retrieve the full details of a given event booking.
      operationId: getEventBookings
      description: 
        By passing in the appropriate options, you can search for available event bookings in the platform
      parameters:
        - in: path
          name: bookingNumber
          description: The Booking number of booking.
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: name
          description: The Booking Name
          required: true
          schema:
            type: string
        - in: query
          name: date
          description: The Booking Date
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          description: StartTime of the event
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          description: EndTime of the event
          required: true
          schema:
            type: string
        - in: query
          name: status
          description: Status of the event
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event Booking retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookings'
        '400':
          description: bad input parameter
        '404':
          description: The booking cannot be found with the booking number supplied.
          
  #makeEventBooking
  /booking/event:
    post:
      tags:
        - Booking
      summary: Allows you to make an event booking.
      operationId: makeEventBooking
      description: Create an event Booking.
      parameters:
        - in: query
          name: bookingNumber
          description: The Booking Number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: name
          description: The Booking Name
          required: true
          schema:
            type: string
        - in: query
          name: date
          description: The Booking Date
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          description: StartTime of the event
          required: true
          schema:
            type: string
        - in: query
          name: availability
          description: Availability of the event
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          description: EndTime of the event
          required: true
          schema:
            type: string
        - in: query
          name: seatType
          description: SeatType of the event
          required: true
          schema:
            type: string
        - in: query
          name: concession
          description: Concession of the event
          required: true
          schema:
            type: string
        - in: query
          name: cost
          description: Cost of the event
          required: true
          schema:
            type: string
        - in: query
          name: currency
          description: Currency of the event
          required: true
          schema:
            type: string
        - in: query
          name: status
          description: Status of the event
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event Bookings created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        
          
  #makeBooking
  /booking:
    post:
      tags:
        - Booking
      summary: Allows you to make a booking.
      operationId: makeBooking
      description: Create a Booking.
      parameters:
        - in: query
          name: bookingNumber
          description: The Booking Number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: bookingType
          description: The Booking Type
          required: true
          schema:
            type: string
        - in: query
          name: bookingReferenceNumber
          description: The Booking Reference Number
          required: false
          schema:
            type: string
        - in: query
          name: clientID
          description: The Client ID of the client making a booking
          required: false
          schema:
            type: number
        - in: query
          name: userID
          description: The User ID of the client making a booking
          required: false
          schema:
            type: number
        - in: query
          name: quantity
          description: The Quantity
          required: false
          schema:
            type: number
        - in: query
          name: status
          description: The Status
          required: true
          schema:
            type: number
        - in: query
          name: attributeID
          description: The Attribute ID
          required: false
          schema:
            type: number
        - in: query
          name: attributeDesc
          description: The Attribute Description
          required: false
          schema:
            type: string
        - in: query
          name: startDate
          description: The Start Date
          required: false
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: endDate
          description: The End Date
          required: false
          example: '27-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: cost
          description: The Cost
          required: false
          schema:
            type: string
        - in: query
          name: currency
          description: The Currency
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Bookings created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter

  #cancelBooking
  /booking/cancel/{bookingNumber}:
    delete:
      tags:
        - Booking
      summary: Cancel a booking.
      operationId: cancelBooking
      description: |
        By passing in the appropriate options, you can cancel a booking.
      parameters:
        - in: path
          name: bookingNumber
          description: The booking number that will be canceled.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Booking canceled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The booking cannot be found with the booking number supplied.          

  #getUserBookings
  /booking/{bookingNumber}:
    get:
      tags:
        - Booking
      summary: Allows you to retrieve the full details of a given booking.
      operationId: getUserBookings
      description: 
        By passing in the appropriate options, you can search for available bookings in the platform
      parameters:
        - in: path
          name: bookingNumber
          description: The Booking number of booking.
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: userName
          description: The User name of given booking.
          required: true
          schema:
            type: string
        - in: query
          name: startDate
          description: The StartDate of given booking.
          required: true
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: endDate
          description: The EndDate of given booking.
          required: true
          example: '27-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
      responses:
        '200':
          description: Booking retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookings'
        '400':
          description: bad input parameter
        '404':
          description: The bbooking cannot be found with the booking number supplied.  
          
  #deleteAsset
  /asset/delete/{assetNumber}:
    delete:
      tags:
        - Assets
      summary: Delete an asset.
      operationId: deleteAsset
      description: |
        By passing in the appropriate options, you can delete an asset.
      parameters:
        - in: path
          name: assetNumber
          description: The asset Number that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Asset deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The asset cannot be found with the asset Number supplied. 

  #getAssets
  /asset/{assetNumber}:
    get:
      tags:
        - Assets
      summary: Allows you to retrieve the full details of a given asset.
      operationId: getAssets
      description: 
        By passing in the appropriate options, you can search for available assets in the platform
      parameters:
        - in: path
          name: assetNumber
          description: The Asset number.
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: category
          description: The Category of given asset.
          required: false
          schema:
            type: string
        - in: query
          name: subCategory
          description: The SubCategory of given asset.
          required: false
          schema:
            type: string
        - in: query
          name: name
          description: The Name of given asset.
          required: false
          schema:
            type: string
        - in: query
          name: code
          description: The Code of given asset.
          required: false
          schema:
            type: string
        - in: query
          name: erpCode
          description: The ERPCode of given asset.
          required: false
          schema:
            type: string
        - in: query
          name: status
          description: The Status of given asset.
          required: false
          schema:
            type: string
        - in: query
          name: creationDate
          description: The CreationDate of given asset.
          required: false
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: expiryDate
          description: The ExpiryDate of given asset.
          required: false
          example: '27-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: enabled
          description: The Enabled of given asset.
          required: false
          schema:
            type: string
        - in: query
          name: decsription
          description: The Decsription of given asset.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Asset retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets'
        '400':
          description: bad input parameter
        '404':
          description: The asset cannot be found with the asset ID supplied.      

  #upsertAssets
  /asset:
    post:
      tags:
        - Assets
      summary: Allows you to make an asset.
      operationId: upsertAsset
      description: Create an asset.
      parameters:
        - in: query
          name: assetNumber
          description: The Asset Number of asset
          required: false
          schema:
            type: number
            format: uuid
        - in: query
          name: category
          description: The Category of asset
          required: true
          schema:
            type: string
        - in: query
          name: subCategory
          description: The SubCategory of asset
          required: false
          schema:
            type: string
        - in: query
          name: name
          description: The Name of asset
          required: true
          schema:
            type: string
        - in: query
          name: status
          description: The Status of asset
          required: true
          schema:
            type: string
        - in: query
          name: erpCode
          description: The ERPCcode of asset
          required: false
          schema:
            type: string
        - in: query
          name: creationDate
          description: The Creation Date
          required: false
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: expiryDate
          description: The Expiry Date
          required: false
          example: '27-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: decription
          description: The Decription of asset
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Asset created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          

          
  #createWasteTask
  /waste/schedule/collectionTask/:
    post:
      tags:
        - Waste
      summary: Allows you to create a waste collection task.
      operationId: createWasteCollectionTask
      description: Create a waste collection task.
      parameters:
        - in: query
          name: wasteScheduleNumber
          description: The Waste Task Number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: subject
          description: The Subject of Waste Task
          required: true
          schema:
            type: string
        - in: query
          name: action
          description: The Action of Waste Task
          required: false
          schema:
            type: string
        - in: query
          name: type
          description: The Type Code of Waste Task
          example: TYPE_CODE
          required: true
          schema:
            type: string
        - in: query
          name: status
          description: The Status of Waste Task
          required: true
          schema:
            type: string
        - in: query
          name: startDate
          description: The Start Date of Waste Task
          required: false
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: duration 
          description: The Duration of Waste Task
          required: false
          schema:
            type: number
        - in: query
          name: unit 
          description: The Unit of Waste Task
          required: false
          schema:
            type: string
        - in: query
          name: owner 
          description: The Owner email of Waste Task
          required: true
          schema:
            type: string
        - in: query
          name: contributor 
          description: The Contributor of Waste Task
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Waste Collection Task created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          
  #createWasteSchedule
  /waste/schedule/{uprn}:
    post:
      tags:
        - Waste
      summary: Allows you to create a waste schedule.
      operationId: createWasteSchedule
      description: A schedule describes the colletion for a property, and the detail of how the collection should be completed.
      parameters:
        - in: path
          name: uprn
          description: The unique property refreence number of the Address
          required: true
          schema:
            type: string
        - in: query
          name: type
          description: The schedule type Code e.g. domestic refuse
          required: true
          example: DOM_REF
          schema:
            type: string
        - in: query
          name: start
          description: The starting date of the schedule
          required: true
          schema:
            type: string
            format: DD-MON-YYYY
        - in: query
          name: end
          description: The end date of the schedule
          required: true
          schema:
            type: string
            format: DD-MON-YYYY  
        - in: query
          name: assisted
          description: Whether the customer is entitled to an assisted collection
          required: false
          example: YES
          schema:
            type: string
            enum: ['YES','NO']            
        - in: query
          name: round
          description: The round name or number
          required: false
          example: 'DWK2TUE011'
          schema:
            type: string
        - in: query
          name: containerType
          description: The container type Code
          required: true
          example: CONT1
          schema:
            type: string
        - in: query
          name: containerQuantity
          description: The quantity of containers
          required: true
          example: 1
          schema:
            type: number
      responses:
        '200':
          description: Waste schedule created/updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
    put:
      tags:
        - Waste
      summary: Allows you to create a waste schedule.
      operationId: updateWasteSchedule
      description: A schedule discribes the colletion for a property, and the detail of how the collection should be completed.
      parameters:
        - in: path
          name: uprn
          description: The unique property refreence number of the Address
          required: true
          schema:
            type: string
        - in: query
          name: scheduleNumber
          description: The waste schechule number
          required: true
          schema:
            type: number
            format: uuid 
        - in: query
          name: type
          description: The schedule type Code e.g. domestic refuse
          required: true
          example: DOM_REF      
          schema:
            type: string            
        - in: query
          name: start
          description: The starting date of the schedule
          required: true
          schema:
            type: string
            format: DD-MON-YYYY
        - in: query
          name: end
          description: The end date of the schedule
          required: true
          schema:
            type: string
            format: DD-MON-YYYY  
        - in: query
          name: assisted
          description: Whether the customer is entitled to an assisted collection
          required: false
          example: YES
          schema:
            type: string
            enum: ['YES','NO']            
        - in: query
          name: round
          description: The round name or number
          required: true
          example: 'DWK2TUE011'
          schema:
            type: string
        - in: query
          name: containerType
          description: The container type Code
          required: true
          example: CONT1
          schema:
            type: string
        - in: query
          name: containerQuantity
          description: The quantity of containers
          required: true
          example: 1
          schema:
            type: string            
      responses:
        '200':
          description: Waste created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
    get:
      tags:
        - Waste
      summary: Allows you to retrieve all schedules (e.g. Refuse, Green) for a property.
      operationId: getWasteSchedulesUprn
      description: 
        By passing in the appropriate options, you can search for available waste in the platform
      parameters:
        - in: path
          name: uprn
          description: The unique property reference number.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Waste Schedule(s) retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wasteSchedules'
        '400':
          description: bad input parameter
        '404':
          description: The waste collection cannot be found with the UPRN supplied.   
    delete:
      tags:
        - Waste
      summary: Allows you to retrieve all schedules (e.g. Refuse, Green) for a property.
      operationId: deleteWasteSchedulesUprn
      description: 
        By passing in the appropriate options, you can search for available waste in the platform
      parameters:
        - in: path
          name: uprn
          description: The unique property reference number.
          required: true
          schema:
            type: string
        - in: query
          name: type
          description: The schedule type Code e.g. domestic refuse
          required: true
          example: DOM_REF
          schema:
            type: string    
      responses:
        '200':
          description: Waste Schedule(s) deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wasteSchedules'
        '400':
          description: bad input parameter
        '404':
          description: The waste collection cannot be found with the UPRN supplied.            


  #getExceptions
  /waste/exceptions:
    get:
      tags:
        - Waste
      summary: Allows you to retrieve the full details of a given waste.
      operationId: getExpections
      description: 
        By passing in the appropriate options, you can search for available waste in the platform
      responses:
        '200':
          description: Waste retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wasteExceptions'
        '400':
          description: bad input parameter
        '404':
          description: The waste collection cannot be found with the UPRN supplied.
  
  #getAddressesByUprn
  /waste/round/{round}:
    get:
      tags:
        - Waste
      summary: Allows you to retrieve the full details of a given waste.
      operationId: getWasteRounds
      description: 
        By passing in the appropriate options, you can check that a round has been completed for all properties.
      parameters:
        - in: path
          name: round
          description: the name of the round.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Waste Schedule(s) retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wasteSchedules'
        '400':
          description: bad input parameter
        '404':
          description: The waste collection cannot be found with the UPRN supplied. 
          
  #getAddressesByUprnCollectionDate
  /waste/collectionTasks/{uprn}:
    get:
      tags:
        - Waste
      summary: Allows you to retrieve the full details of a given waste collection for a given date.
      operationId: getCollectionTasksByUprnCollectionDate
      description: 
        By passing in the appropriate options, you can search for available waste colletion on the platform for a given date.
      parameters:
        - in: path
          name: uprn
          description: The UPRN of the location for waste collection.
          required: true
          schema:
            type: string
        - in: query
          name: date
          description: The date of the collection service for a given property.
          required: true
          schema:
            type: string
        - in: query
          name: dateTo
          description: The to date for waste information retrieve. If the parameter is blank this method will only return waste information for the given date.
          required: false
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM'
      responses:
        '200':
          description: Waste Collection Task(s) retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collectionTasks'
        '400':
          description: bad input parameter
        '404':
          description: The waste collection cannot be found with the UPRN supplied.
  #getAddressesByPostCode
  /waste/postcode/{postCode}:
    get:
      tags:
        - Waste
      summary: Allows you to retrieve the full details of a given waste.
      operationId: getWasteScheduleByPostCode
      description: 
        By passing in the appropriate options, you can search for available waste in the platform
      parameters:
        - in: path
          name: postCode
          description: The PostCode of waste.
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: Waste Schedule(s) retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wasteSchedule'
        '400':
          description: bad input parameter
        '404':
          description: The waste collection be found with the postcode supplied.
          
  #deleteProduct
  /product/delete/{productNumber}:
    delete:
      tags:
        - Product
      summary: Delete Product.
      operationId: deleteProduct
      description: |
        By passing in the appropriate options, you can delete Product.
      parameters:
        - in: path
          name: productNumber
          description: The Product ID that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The Product cannot be found with the Product ID supplied.
          
  #getProductByPrice
  /product/price/{productNumber}:
    get:
      tags:
        - Product
      summary: Allows you to retrieve the full details of a given product.
      operationId: getProductPrice
      description: 
        By passing in the appropriate options, you can search for available products in the platform
      parameters:
        - in: path
          name: productNumber
          description: The Product number of product.
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Products Price retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productPrice'
        '400':
          description: bad input parameter
        '404':
          description: The product cannot be found with the product number supplied.
    put:
      tags:
        - Product
      summary: Allows you to update a product with given price
      operationId: updateProductPrice
      description: Update a product price.
      parameters:
        - in: path
          name: productNumber
          description: The Product ID
          required: true
          schema:
            type: string
        - in: query
          name: productPriceNumber
          description: The Product Price ID
          required: true
          schema:
            type: string
        - in: query
          name: price
          description: The Price
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product price updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
    
  #getProduct
  /product/{productNumber}:
    get:
      tags:
        - Product
      summary: Allows you to retrieve the full details of a given product.
      operationId: getProducts
      description: 
        By passing in the appropriate options, you can search for available products in the platform
      parameters:
        - in: path
          name: productNumber
          description: The Product number of product.
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products'
        '400':
          description: bad input parameter
        '404':
          description: The product cannot be found with the product number supplied.  
          
  #upsertProduct
  /product:
    post:
      tags:
        - Product
      summary: Allows you to add a product.
      operationId: upsertProduct
      description: Create a product.
      parameters:
        - in: query
          name: productNumber
          description: The Product Number
          required: false
          schema:
            type: string
        - in: query
          name: productPriceNumber
          description: The Product Price ID
          required: false
          schema:
            type: string
        - in: query
          name: productType
          description: The Product Type
          required: true
          schema:
            type: string
        - in: query
          name: category
          description: The Product Category
          required: true
          schema:
            type: string
        - in: query
          name: subCategory
          description: The Product SubCategory
          required: false
          schema:
            type: string
        - in: query
          name: name
          description: The Product Name
          required: true
          schema:
            type: string
        - in: query
          name: status
          description: The Product Status
          required: true
          schema:
            type: string
        - in: query
          name: price
          description: The Product Price
          required: false
          schema:
            type: string
        - in: query
          name: currency
          description: The Product Currency
          required: false
          schema:
            type: string
        - in: query
          name: unit
          description: The Product Unit
          required: false
          schema:
            type: string
        - in: query
          name: description
          description: The Product Description
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Product added/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
  
  #deleteQuoteLine
  /quote/line/{quoteNumber}:
    delete:
      tags:
        - Quoting
      summary: Delete a quote line.
      operationId: deleteQuoteLine
      description: |
        By passing in the appropriate options, you can delete a quote line.
      parameters:
        - in: path
          name: quoteNumber
          description: The quote number that will be deleted.
          required: true
          schema:
            type: number
        - in: query
          name: quoteLine
          description: The Quote Line of given quote.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Quote Line deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The quote cannot be found with the quote number supplied.          
  #deleteQuote
  /quote/{quoteNumber}:
    delete:
      tags:
        - Quoting
      summary: Delete a quote.
      operationId: deleteQuote
      description: |
        By passing in the appropriate options, you can delete a quote.
      parameters:
        - in: path
          name: quoteNumber
          description: The quote ID that will be deleted.
          required: true
          schema:
            type: number
        - in: query
          name: quoteReference
          description: The Quote Reference of given quote.
          required: true
          schema:
            type: string
        - in: query
          name: quoteType
          description: the Quote Type of given quote.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Quote deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The quote cannot be found with the quote number supplied.
    get:
      tags:
        - Quoting
      summary: Allows you to retrieve the full details of a given quote.
      operationId: getQuotes
      description: 
        By passing in the appropriate options, you can search for available quotes in the platform
      parameters:
        - in: path
          name: quoteNumber
          description: The quote number of quote.
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: quoteReference
          description: The Quote Reference of given quote.
          required: false
          schema:
            type: string
        - in: query
          name: quoteType
          description: the Quote Type of given quote.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Quotes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/quotes'
        '400':
          description: bad input parameter
        '404':
          description: The quote cannot be found with the quote number supplied.     
          
  #CreateQuote
  /quote:
    post:
      tags:
        - Quoting
      summary: Allows you to add a quote.
      operationId: upsertQuote
      description: Create a quote.
      parameters:
        - in: query
          name: quoteNumber
          description: The Quote ID
          required: false
          schema:
            type: number
        - in: query
          name: reference
          description: The Quote Reference ID
          required: true
          schema:
            type: string
        - in: query
          name: opportunity
          description: Opportunity of the given quotes.
          schema:
            type: string
          required: true
        - in: query
          name: quoteType
          description: The Quote type of the given quote.
          schema:
            type: string
          required: true
        - in: query
          name: status
          description: Status of the given quote.
          required: true
          schema:
            type: string
        - in: query
          name: organisation
          description: OrganisationID of the gven quote.
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: Quotes created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter          

  /contract:
    #createContract
    post:
      tags:
        - Contract
      summary: Creates a new contract in the system
      operationId: createContract
      description: |
        By passing in the appropriate options, you can insert contracts in the system
      parameters:
        - in: query
          name: templateCode
          description: pass TemplateCode for the given contract.
          required: false
          schema:
            type: string
        - in: query
          name: priceCode
          description: pass PriceCode for the given contract.
          required: false
          schema:
            type: string
        - in: query
          name: quantity
          description: pass Quantity for the given contract.
          required: false
          schema:
            type: number
        - in: query
          name: email
          description: pass Email for the given contract.
          required: false
          schema:
            type: string
        - in: query
          name: uprn
          description: pass UPRN for the given contract.
          required: false
          schema:
            type: number
      responses:
        '200':
          description: Contract added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
    #getContracts
    get:
      tags:
        - Contract
      summary: Allows you to retrieve the full details of a given contract.
      operationId: getContracts
      description: 
        By passing in the appropriate options, you can search for available contracts in the platform
      parameters:
        - in: query
          name: contractType
          description: The type of contract of given contract.
          required: true
          schema:
            type: string
        - in: query
          name: contractSubType
          description: The sub contract of given contract.
          required: false
          schema:
            type: string
        - in: query
          name: statusCode
          description: the status of given contract.
          required: true
          schema:
            type: string
        - in: query
          name: statusType
          description: the status type of given contract.
          required: true
          schema:
            type: string            
        - in: query
          name: creationDateFrom
          description: The from date for the start of creation to retrieve the contracts.
          required: false
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: creationDateTo
          description: The last date of the  of the creation to retrieve the contract.
          required: false
          example: '27-NOV-2013 23:59:59'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
      responses:
        '200':
          description: Contracts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contracts'
        '400':
          description: bad input parameter
          
  #getContractByID        
  /contract/{contractNumber}:
    get:
      tags:
        - Contract
      summary: Allows you to retrieve the full details of a given organisations depending upon the type of Party type.
      operationId: getContractDetails
      description: |
        By passing in the appropriate options, you can search for
        available contracts in the system
      parameters:
        - in: path
          name: contractNumber
          description: The contract number of the contract to be returned.
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Contract retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contractDetails'
        '400':
          description: bad input parameter
        '404':
          description: The contact cannot be found with the contact number supplied.
          
  #getContractByReferenceNo        
  /contract/{referenceNumber}:
    get:
      tags:
        - Contract
      summary: Allows you to retrieve the full details of a given organisations depending upon the type of Party type.
      operationId: getContractsByReferenceNo
      description: |
        By passing in the appropriate options, you can search for
        available contracts in the system
      parameters:
        - in: path
          name: referenceNumber
          description: The contract ID of the contract to be returned
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Contract retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contractDetails'
        '400':
          description: bad input parameter 
        '404':
          description: The reference number cannot be found with the contract number supplied. 
          
  #getContractforPerson        
  /contract/person/{personNumber}:
    get:
      tags:
        - Contract
      summary: Allows you to retrieve the full details of a given organisations depending upon the type of Party type.
      operationId: getContractDetailsPerson
      description: |
        By passing in the appropriate options, you can search for
        available contracts in the system
      parameters:
        - in: path
          name: personNumber
          description: The contract number of the contract to be returned
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Contract retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contractDetails'
        '400':
          description: bad input parameter
        '404':
          description: The person against the contract cannot be found with the person number supplied.
          
          
  #createContract        
  /contract/note/{contractNumber}:
    post:
      tags:
        - Contract
      summary: Creates a new contract in the system
      operationId: createContractNote
      description: |
        By passing in the appropriate options, you can add a note to an existing contract on the platform.
      parameters:
        - in: path
          name: contractNumber
          description: pass TemplateCode for the given contract.
          required: true
          schema:
            type: number
        - in: query
          name: userNumber
          description: The user number of the person who will create the note. If no value is passed the defult SYSTEM user id will be used.
          example: '63430'
          required: false
          schema:
            type: number
            format: uuid
        - in: query
          name: otherSystemCode
          description: The external sytem code of the user who is creating the note.
          required: false
          example: 'WIL'
          schema:
            type: string
        - in: query
          name: otherSytemUserID
          description: The external sytem user ID of the user who is creating the note.
          required: false
          example: '12345677'
          schema:
            type: string
            format: uuid
            example: 123
        - in: query
          name: type
          description: The type of note you want to create.
          required: true
          example: 'callBack'
          schema:
            type: string
        - in: query
          name: title
          description: The title of note you want to create.
          required: true
          example: 'The customer called.'
          schema:
            type: string
        - in: query
          name: content
          description: The title of note you want to create.
          required: true
          example: 'Please give the customer an update'
          schema:
            type: string
        - in: query
          name: allowDuplicate
          description: The duplication of note.
          required: true
          schema:
            type: string
            enum: [Y,N]
      responses:
        '200':
          description: Contract note added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          
  #cancelContract
  /contract/cancel/{contractNumber}:
    delete:
      tags:
        - Contract
      summary: Cancel a contract.
      operationId: cancelContract
      description: |
        By passing in the appropriate options, you can cancel a contract.
      parameters:
        - in: path
          name: contractNumber
          description: The contract ID that will be cancelled.
          required: true
          schema:
            type: number
        - in: query
          name: reasonCode
          description: A reason for the cancellation of the contract.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contract cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
  
  #cancelContract
  /contract/terminate/{contractNumber}:
    post:
      tags:
        - Contract
      summary: terminate a contract.
      operationId: terminateContract
      description: |
        By passing in the appropriate options, you can cancel a contract.
      parameters:
        - in: path
          name: contractNumber
          description: The contract number that will be terminated.
          required: true
          schema:
            type: number
        - in: query
          name: reasonCode
          description: A reason for the termination of the contract.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contract terminated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The contract cannot be found with the contract number supplied.

  #updateContactStatus         
  /contract/status/{contractNumber}:
    put:
      tags:
        - Contract
      summary: Update the status of a given contract.
      operationId: updateContractStatus 
      description: |
        Update the status of the contract.
      parameters:
        - in: path
          name: contractNumber
          description: The contract number for the contract that you want to update the status.
          required: true
          schema:
            type: number
        - in: query
          name: statusCode
          description: The new status.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contract Reference Number updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The contract cannot be found with the contract number supplied.
          
  #updateContractReference
  /contract/reference/{contractNumber}:
    put:
      tags:
        - Contract
      summary: Updated contract Reference Number in the system
      operationId: updateContractReference
      description: |
        By passing in the appropriate options, you can update contract reference number in the system
      parameters:
        - in: path
          name: contractNumber
          description: The contract number that you want to update the refernece number.
          required: true
          schema:
            type: number
        - in: query
          name: referenceNumber
          description: The new reference number to assign to the contract.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contract reference number successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The contract cannot be found with the contract number supplied.
          
  #getPeople
  /person:
    get:
      tags:
        - Community
      summary: Allows you to retrieve the full details of a given users.
      operationId: getPeople
      description: |
        By passing in the appropriate options, you can search for
        available users in the system
      parameters:
        - in: query
          name: recordState
          description: The record state of the given for the person. This allows you retreive only new or updated notes, or retreive all the notes.
          schema:
            type: string
            enum: [ALL,UPDATED,NEW]
          required: true
        - in: query
          name: otherSystemCode
          description: The code  of the external system that previously created the task.
          required: false
          example: 'WIL'
          schema:
            type: string
        - in: query
          name: otherSystemUserID
          description: The user ID of the person of the external system that previously created the task.
          required: false
          schema:
            type: string
        - in: query
          name: role
          description: The role code of the given person.
          schema:
            type: string
          required: false
          example: 'SA'
        - in: query
          name: firstName
          description: The first name of the given person.
          schema:
            type: string
          required: false
          example: 'Mark'
        - in: query
          name: lastName
          description: The last name of the given person.
          schema:
            type: string
          required: false
          example: 'Mark'
        - in: query
          name: mobile
          description: The mobile of the given person.
          schema:
            type: string
          required: false
          example: '1234567890'
        - in: query
          name: userName
          description: The username of the given person.
          schema:
            type: string
          required: false
          example: 'mark.eves'
        - in: query
          name: email
          description: The email of the given person.
          schema:
            type: string
          required: false
          example: 'mark.eves@itouchvision.com'
        - in: query
          name: address1
          description: The address1 of the given person.
          schema:
            type: string
          required: false
          example: '1'
        - in: query
          name: address2
          description: The address2 of the given person.
          schema:
            type: string
          required: false
          example: 'ABC Streer'
        - in: query
          name: address3
          description: The address3e of the given person.
          schema:
            type: string
          required: false
          example: 'Mark'
        - in: query
          name: city
          description: The city or town of the address.
          required: false
          example: 'London'
          schema:
            type: string
        - in: query
          name: PostCode
          description: The postcode of the address.
          required: false
          example: 'AB1 CD2'
          schema:
            type: string
        - in: query
          name: Region
          description: The region of the address.
          required: false
          example: 'England'
          schema:
            type: string
        - in: query
          name: Country
          description: The county of the address.
          required: false
          schema:
            type: string
        - in: query
          name: status
          description: Status of the given user.
          schema:
            type: string
            enum: [ACTIVE, LOCKED, DECEASED, SUSPENDED]
          required: false
        - in: query
          name: creationDate
          description: The date the person was created.
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
          required: false
          example: '01-NOV-2013 01:10:10'
        - in: query
          name: EndDate
          description: The date the person was disabled.
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
          required: false
          example: '27-NOV-2013 01:10:10'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/people'
        '400':
          description: bad input parameter
    
    #upsertUser
    post:
      tags:
        - Community
      summary: Adds users in the system
      operationId: upsertUser
      description: |
        By passing in the appropriate options, you can insert users in the system
      requestBody:
        description: Request body for JSON input
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personPayload'
      responses:
        '200':
          description: User added/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          
  #deletePerson
  /person/delete/{personNumber}:
    delete:
      tags:
        - Community
      summary: Delete Person.
      operationId: deletePerson
      description: |
        By passing in the appropriate options, you can delete Person.
      parameters:
        - in: path
          name: personNumber
          description: The Person ID that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Person deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The Person cannot be found with the Person ID supplied.
   
  #getPerson
  /person/id/{personNumber}:
    get:
      tags:
        - Community
      summary: Allows you to retrieve the full details of a given person.
      operationId: getPersonByNumber
      description:
        By passing in the appropriate options, you can search for a person.
      parameters:
        - in: path
          name: personNumber
          description: the person number
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: User retrieved updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/people'
        '400':
          description: bad input parameter
        '404':
          description: A person cannot be found given the parameters specified.
 
   #getPersonByEmail
  /person/email/{personEmail}:
    get:
      tags:
        - Community
      summary: Allows you to retrieve the full details of a given person.
      operationId: getPersonByEmail
      description:
        By passing in the appropriate options, you can search for a person.
      parameters:
        - in: path
          name: personEmail
          description: The email address of the person. This is also used to uniqley identify the person, and for the person to access the system.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/people'
        '400':
          description: bad input parameter
        '404':
          description: A person cannot be found with the given parameters specified. 

  #createPersonPhone        
  /person/phone/{personNumber}:
    post:
      tags:
        - Community
      summary: Add an new phone number to a person
      operationId: createPersonPhone
      description: |
        Pass in the appropriate phone details to create a new phone number against an existing person
      parameters:
        - in: path
          name: personNumber
          description: The person ID for an existing person.
          required: true
          schema:
            type: number
        - in: query
          name: PhoneType
          description: The phone Type for a phone number.
          example: 'Mobile'
          required: true
          schema:
            type: string
        - in: query
          name: CountryCode
          description: The country code for a phone number.
          schema:
            type: string
        - in: query
          name: AreaCode
          description: The area code for a phone number.
          schema:
            type: string
        - in: query
          name: Number
          description: The main part of a phone number.
          required: true
          schema:
            type: string
        - in: query
          name: Purpose
          description: The usage of this phone number.
          schema:
            type: string
        - in: query
          name: Active
          description: Whether this phone number is active or not.
          required: true
          schema:
            type: string
            enum: [YES,NO]
      responses:
        '200':
          description: The phone numner is successfully added to the person.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A person's phone cannot be found with the person number supplied.
  
  #createPersonEmail        
  /person/email/{personNumber}:
    post:
      tags:
        - Community
      summary: Add an new email address to a person
      operationId: createPersonEmail
      description: |
        Pass in the appropriate email details to create a new email address against an existing person.
      parameters:
        - in: path
          name: personNumber
          description: The person number for an existing person.
          required: true
          schema:
            type: number
        - in: query
          name: Email
          description: The new email address.
          required: true
          schema:
            type: string
        - in: query
          name: Purpose
          description: The purpose of the email address.
          schema:
            type: string
        - in: query
          name: Active
          description: The whether it is active or not.
          required: true
          schema:
            type: string
            enum: [YES,NO]
        - in: query
          name: Primary
          description: Whether this is a primary email address.
          schema:
            type: boolean
            default: True
      responses:
        '200':
          description: The email address is successfully added to the person.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A person's email cannot be found with the person number supplied.
          
  #createPersonLink        
  /person/link/{personNumber}:
    post:
      tags:
        - Community
      summary: Add an new link to a person
      operationId: createPersonLink
      description: |
        Pass in the appropriate link details to create a new URL address against an existing person.
      parameters:
        - in: path
          name: personNumber
          description: The person ID for an existing person.
          required: true
          schema:
            type: number
        - in: query
          name: Title
          description: The title information for the link
          required: true
          schema:
            type: string
        - in: query
          name: URL
          description: The URL information for the link
          schema:
            type: string
        - in: query
          name: Purpose
          description: The purpose of the link.
          schema:
            type: string
        - in: query
          name: Active
          description: The whether it is active or not.
          required: true
          schema:
            type: string
            enum: [YES,NO]
      responses:
        '200':
          description: The link is successfully added to the person.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A person's links cannot be found with the person number supplied.
  
  #createPersonSocialMedia        
  /person/socialMedia/{personNumber}:
    post:
      tags:
        - Community
      summary: Add an new SocialMedia item to a person
      operationId: createPersonSocialMedia
      description: |
        Pass in the appropriate SocialMedia  details to create a new SocialMedia item against an existing person.
      parameters:
        - in: path
          name: personNumber
          description: The person ID for an existing person.
          required: true
          schema:
            type: number
        - in: query
          name: Type
          description: The type of SocialMedia.
          required: true
          schema:
            type: string
        - in: query
          name: Details
          description: The details for the SocialMedia.
          schema:
            type: string
        - in: query
          name: Purpose
          description: The purpose of the SocialMedia item.
          schema:
            type: string
        - in: query
          name: Active
          description: Whether the SocialMedia item is active or not.
          required: true
          schema:
            type: string
            enum: [YES,NO]
      responses:
        '200':
          description: The SocialMedia item is successfully added to the person.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          
  #createPersonLocation        
  /person/location/{personNumber}:
    post:
      tags:
        - Community
      summary: Add an new location for a person
      operationId: createPersonLocation
      description: |
        Pass in the appropriate location details to create a new address item against an existing person.
      parameters:
        - in: path
          name: personNumber
          description: The person ID for an existing person.
          required: true
          schema:
            type: number
        - in: query
          name: Address1
          description: The first line of the address.
          required: true
          schema:
            type: string
        - in: query
          name: Address2
          description: The second line of the address.
          schema:
            type: string
        - in: query
          name: Address3
          description: The third line of the address.
          schema:
            type: string
        - in: query
          name: City
          description: The city or county of the address.
          schema:
            type: string
            default: "London"
        - in: query
          name: Postcode
          description: The postcode of the address.
          schema:
            type: string
            default: "N21 3PY"            
        - in: query
          name: Region
          description: The region of the address. Example 'England', 'Ireland', etc.
          schema:
            type: string
            default: "England"                
        - in: query
          name: State
          description: The state of the address. Used for countries where they have states, Examplem USA or India
          schema:
            type: string
            default: "London"
        - in: query
          name: Country
          description: The country of the address.
          required: true
          schema:
            type: string
            default: "England"
        - in: query
          name: UPRN
          description: The unique property reference number of the address.
          schema:
            type: string
      responses:
        '200':
          description: The address is successfully added to the person.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A person's location cannot be found with the person number supplied.

  #createPersonLocation        
  /person/note/{personNumber}:
    post:
      tags:
        - Community
      summary: Add an new location for a person
      operationId: createPersonNote
      description: |
        Pass in the appropriate location details to create a new address item against an existing person.
      parameters:
        - in: path
          name: personNumber
          description: The person ID for an existing person.
          required: true
          schema:
            type: number
      requestBody:
        description: Request body for JSON input
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personNotePayload'
      responses:
        '200':
          description: The address is successfully added to the person.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A person's location cannot be found with the person number supplied.
          
  #deleteOrganisation
  /organisation/delete/{organisationID}:
    delete:
      tags:
        - Community
      summary: Delete Organisation.
      operationId: deleteOrganisation
      description: |
        By passing in the appropriate options, you can delete Organisation.
      parameters:
        - in: path
          name: organisationID
          description: The Organisation ID that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Organisation deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The Organisation cannot be found with the Organisation ID supplied.
          
  #getOrganisation       
  /organisation/{organisationNumber}:
    get:
      tags:
        - Community
      summary: Allows you to retrieve the full details of a given organisations.
      operationId: getOrganisation
      description: |
        By passing in the appropriate options, you can search for
        available organisations in the system
      parameters:
        - in: path
          name: organisationNumber
          description: the organisation ID
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Organisations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organisations'
        '400':
          description: bad input parameter
        '404':
          description: A organisation cannot be found with the organisation number supplied.
          
  #createOrganisation        
  /organisation:
    post:
      tags:
        - Community
      summary: Adds an organisation to the platform
      operationId: createOrganisation
      description: |
        By passing in the appropriate options, you can create an organisation.
      requestBody:
        description: Request body for JSON input
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/organisationPayload'
      responses:
        '200':
          description: organisation added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          
    #getOrganisations
    get:
      tags:
        - Community
      summary: Allows you to retrieve the full details of a range of organisations.
      operationId: getOrganisations
      description: |
        By passing in the appropriate options, you can search for organisations on the platform
      parameters:
        - in: query
          name: RecordState
          description: RecordState of the given organisation.
          schema:
            type: string
            enum: [ALL,UPDATED,NEW]
          required: true
        - in: query
          name: OrganisationName
          description: OrganisationName of the given organisation.
          schema:
            type: string
          required: false
        - in: query
          name: CompanyNumber
          description: CompanyNumber of the given organisation.
          schema:
            type: string
          required: false
        - in: query
          name: TaxNumber
          description: TaxNumber of the given organisation.
          schema:
            type: string
          required: false
        - in: query
          name: Structure
          description: Structure of the given organisation.
          schema:
            type: string
          required: false
        - in: query
          name: StartDate
          description: StartDate of the given organisation.
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
          required: false
          example: '01-NOV-2013 01:10:10'
        - in: query
          name: EndDate
          description: EndDate of the given organisation.
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
          required: false
          example: '27-NOV-2013 01:10:10'
      responses:
        '200':
          description: Organisations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organisations'
        '400':
          description: bad input parameter
  
  #createOrganisationPhone        
  /organisation/phone/{organisationNumber}:
    post:
      tags:
        - Community
      summary: Add an new phone number to an organisation
      operationId: createOrganisationPhone
      description: |
        Pass in the appropriate phone details to create a new phone number against an existing organisation
      parameters:
        - in: path
          name: organisationNumber
          description: The person ID for an existing person.
          required: true
          schema:
            type: number
        - in: query
          name: PhoneType
          description: The phone Type for a phone number.
          example: 'Mobile'
          required: true
          schema:
            type: string
        - in: query
          name: CountryCode
          description: The country code for a phone number.
          schema:
            type: string
        - in: query
          name: AreaCode
          description: The area code for a phone number.
          schema:
            type: string
        - in: query
          name: Number
          description: The main part of a phone number.
          required: true
          schema:
            type: string
        - in: query
          name: Purpose
          description: The usage of this phone number.
          schema:
            type: string
        - in: query
          name: Active
          description: Whether this phone number is active or not.
          required: true
          schema:
            type: string
            enum: [YES,NO]
      responses:
        '200':
          description: The phone numner is successfully added to the organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A organisation's phone number cannot be found with the organisation number supplied.
  
  #createOrganisationEmail        
  /organisation/email/{organisationNumber}:
    post:
      tags:
        - Community
      summary: Add an new email address to an organisation
      operationId: createOrganisationEmail
      description: |
        Pass in the appropriate email details to create a new email address against an existing organisation.
      parameters:
        - in: path
          name: organisationNumber
          description: The organisation ID for an existing organisation.
          required: true
          schema:
            type: number
        - in: query
          name: Email
          description: The new email address.
          required: true
          schema:
            type: string
        - in: query
          name: Purpose
          description: The purpose of the email address.
          schema:
            type: string
        - in: query
          name: Active
          description: The whether it is active or not.
          required: true
          schema:
            type: string
            enum: [YES,NO]
        - in: query
          name: Primary
          description: Whether this is a primary email address.
          schema:
            type: boolean
            default: True
      responses:
        '200':
          description: The email address is successfully added to the organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A organisation's email cannot be found with the organisation number supplied.
          
  #createOrganisationLink        
  /organisation/link/{organisationNumber}:
    post:
      tags:
        - Community
      summary: Add an new link to an organisation
      operationId: createOrganisationLink
      description: |
        Pass in the appropriate link details to create a new URL address against an existing organisation.
      parameters:
        - in: path
          name: organisationNumber
          description: The organisation ID for an existing rganisation.
          required: true
          schema:
            type: number
        - in: query
          name: Title
          description: The title information for the link
          required: true
          schema:
            type: string
        - in: query
          name: URL
          description: The URL information for the link
          schema:
            type: string
        - in: query
          name: Purpose
          description: The purpose of the link.
          schema:
            type: string
        - in: query
          name: Active
          description: The whether it is active or not.
          required: true
          schema:
            type: string
            enum: [YES,NO]
      responses:
        '200':
          description: The link is successfully added to the organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: An organisation's link cannot be found with the organisation number supplied.
  
  #createOrganisationSocialMedia        
  /organisation/socialMedia/{organisationNumber}:
    post:
      tags:
        - Community
      summary: Add an new SocialMedia item to a organisation
      operationId: createOrganisationSocialMedia
      description: |
        Pass in the appropriate SocialMedia details to create a new SocialMedia item against an existing organisation.
      parameters:
        - in: path
          name: organisationNumber
          description: The organisation ID for an existing organisation.
          required: true
          schema:
            type: number
        - in: query
          name: Type
          description: The type of SocialMedia.
          required: true
          schema:
            type: string
        - in: query
          name: Details
          description: The details for the SocialMedia.
          schema:
            type: string
        - in: query
          name: Purpose
          description: The purpose of the SocialMedia item.
          schema:
            type: string
        - in: query
          name: Active
          description: Whether the SocialMedia item is active or not.
          required: true
          schema:
            type: string
            enum: [YES,NO]
      responses:
        '200':
          description: The SocialMedia item is successfully added to the organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: An organisation's social media cannot be found with the organisation number supplied.          
          
  #createOrganisationLocation        
  /organisation/location/{organisationNumber}:
    post:
      tags:
        - Community
      summary: Add an new location for an organisation
      operationId: createOrganisationLocation
      description: |
        Pass in the appropriate location details to create a new address item against an existing organisation.
      parameters:
        - in: path
          name: organisationNumber
          description: The organisation ID for an existing organisation.
          required: true
          schema:
            type: number
        - in: query
          name: Address1
          description: The first line of the address.
          required: true
          schema:
            type: string
        - in: query
          name: Address2
          description: The second line of the address.
          schema:
            type: string
        - in: query
          name: Address3
          description: The third line of the address.
          schema:
            type: string
        - in: query
          name: City
          description: The city or county of the address.
          schema:
            type: string
            default: "Active"
        - in: query
          name: Postcode
          description: The postcode of the address.
          schema:
            type: string
            default: "Active"            
        - in: query
          name: Region
          description: The region of the address. Example 'England', 'Ireland', etc.
          schema:
            type: string
            default: "Active"                
        - in: query
          name: State
          description: The state of the address. Used for countries where they have states, Examplem USA or India
          schema:
            type: string
            default: "Active"
        - in: query
          name: Country
          description: The country of the address.
          required: true
          schema:
            type: string
            default: "Active"
        - in: query
          name: Uprn
          description: The unique property reference number of the address.
          schema:
            type: string
            default: "Active"
      responses:
        '200':
          description: The address is successfully added to the organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter 
        '404':
          description: An organisation's location cannot be found with the organisation number supplied.          
    get:
      tags:
        - Community
      summary: Get a locations for an organisation
      operationId: getOrganisationLocation
      description: |
        Pass in the appropriate location details to get the addresses against an organisation.
      parameters:
        - in: path
          name: organisationNumber
          description: The organisation number for an existing organisation.
          required: true
          schema:
            type: number
        - in: query
          name: Address1
          description: The first line of the address.
          schema:
            type: string
        - in: query
          name: Address2
          description: The second line of the address.
          schema:
            type: string
        - in: query
          name: Address3
          description: The third line of the address.
          schema:
            type: string
        - in: query
          name: City
          description: The city or county of the address.
          schema:
            type: string
            default: "Active"
        - in: query
          name: Postcode
          description: The postcode of the address.
          schema:
            type: string
            default: "Active"            
        - in: query
          name: Region
          description: The region of the address. Example 'England', 'Ireland', etc.
          schema:
            type: string
            default: "Active"                
        - in: query
          name: State
          description: The state of the address. Used for countries where they have states, Examplem USA or India
          schema:
            type: string
            default: "Active"
        - in: query
          name: Country
          description: The country of the address.
          schema:
            type: string
            default: "Active"
        - in: query
          name: Uprn
          description: The unique property reference number of the address.
          schema:
            type: string
            default: "Active"
      responses:
        '200':
          description: The address is successfully added to the organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locations'
        '400':
          description: bad input parameter 
        '404':
          description: A organisation's location cannot be found with the organisation number supplied.          
          
  #createOrganisationContact        
  /organisation/contact/{organisationNumber}:
    post:
      tags:
        - Community
      summary: Add an new location for an organisation
      operationId: createOrganisationContact
      description: |
        Pass in the appropriate location details to create a new address item against an existing organisation.
      parameters:
        - in: path
          name: organisationNumber
          description: The organisation number for an existing organisation.
          required: true
          schema:
            type: number
        - in: query
          name: PersonID
          description: The personID of an existing person.
          required: true
          schema:
            type: string
        - in: query
          name: Role
          description: The role the person performs for the organisation.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The contact is successfully added to the organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter 
        '404':
          description: A organisation's contact cannot be found with the organisation number supplied.
  #getUPRN
  /address/uprn/:
    get:
      tags:
        - Community
      summary: get the UPRN of an address.
      operationId: getUprn
      description: |
        By passing in the appropriate options, you retrieve the uprn of the address.
      parameters:
        - in: query
          name: postcode
          description: Postcode of a property.
          schema:
            type: string
            example: N21 3PY
          required: true
        - in: query
          name: street
          description: Street of the property.
          schema:
            type: string
            example: Woodland Way
          required: true
        - in: query
          name: houseNumber
          description: House name or number.
          schema:
            type: string
            example: 117
          required: true
      responses:
        '200':
          description: UPRN returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uprns'
        '400':
          description: bad input parameter
        '404':
          description: An address cannot be found with the parameters provided.

  #getUPRN
  /address/uprn/postcode/{postcode}:
    get:
      tags:
        - Community
      summary: get the UPRN of an address.
      operationId: getUprnFromPostcodeAndNumber
      description: |
        By passing in the appropriate options, you retrieve the uprn of the address.
      parameters:
        - in: path
          name: postcode
          description: Postcode of a property.
          schema:
            type: string
            example: N21 3PY
          required: true
        - in: query
          name: houseNumber
          description: House name or number.
          schema:
            type: string
            example: 117
          required: true
      responses:
        '200':
          description: UPRN returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uprn'
        '400':
          description: bad input parameter
        '404':
          description: An address cannot be found with the parameters provided.
 
   
  #deleteTasks
  /task/delete/{taskNumber}:
    delete:
      tags:
        - Task
      summary: Delete a task.
      operationId: deleteTasks
      description: |
        By passing in the appropriate options, you can delete Task.
      parameters:
        - in: path
          name: taskNumber
          description: The Task number that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The task cannot be found with the Task number supplied. 
  
  #getTask        
  /task/{taskNumber}:
    get:
      tags:
        - Task
      summary: Allows you to retrieve the task information.
      operationId: getTask
      description: Retreive task information by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.
          
  #getTaskNotes        
  /task/notes/{taskNumber}:
    get:
      tags:
        - Task
      summary: Allows you to retrieve the task information.
      operationId: getTaskNotes
      description: Retreive task information by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: type
          description: The notes type
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Task notes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notes'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.   
          
    post:
      tags:
        - Task
      summary: Allows you to create the note against a task.
      operationId: createTaskNote
      description: Create a task note against the task by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: type
          description: The type code of the note you want to create.
          required: true
          example: 'CALLBACK'
          schema:
            type: string
        - in: query
          name: title
          description: The title of note you want to create.
          required: true
          example: 'The customer called.'
          schema:
            type: string
        - in: query
          name: content
          description: The content of note you want to create.
          required: true
          example: 'Please give the customer an update'
          schema:
            type: string
        - in: query
          name: personNumber
          description: The person number who wants to create note.
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: notify
          description: The notification for the note.
          required: false
          schema:
            type: string
            enum: [Y,N]
        - in: query
          name: allowDuplicate
          description: The duplication of note.
          required: false
          schema:
            type: string
            enum: [Y,N]
      responses:
        '200':
          description: Task note successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.

  #getTaskProgress        
  /task/progress/{taskNumber}:
    get:
      tags:
        - Task
      summary: Allows you to retrieve the task progress information.
      operationId: getTaskProgress
      description: Retreive task progress information by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Task progress retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskProgress'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.
          
    #getTask        
  /task/status/{taskNumber}:
    get:
      tags:
        - Task
      summary: Allows you to retrieve the task status information.
      operationId: getTaskStatus
      description: Retreive task status information by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Task status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statuses'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.
    put:
      tags:
        - Task
      summary: Allows you to update the task status information.
      operationId: updateTaskStatus
      description: Update task status information by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: status
          description: The new status code. For example "HIGH"
          schema:
            type: string
            example: 'HIGH'
          required: true
      responses:
        '200':
          description: Task status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.

  #getTask        
  /task/priority/{taskNumber}:
    get:
      tags:
        - Task
      summary: Allows you to retrieve the priority infromation for a task.
      operationId: getTaskPriority
      description: Retreive task priority by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Task priority retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/priorities'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.
    put:
      tags:
        - Task
      summary: Allows you to update the priority information for a task.
      operationId: updateTaskPriority
      description: Update task priority by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: priority
          description: The priority code of the priority.
          example: 'HIGH'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Task priority retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.
  
  #updateTaskPlannedTime        
  /task/planned/{taskNumber}:
    put:
      tags:
        - Task
      summary: Allows you to update the planned start and end date information for a task.
      operationId: updateTaskPlannedTime
      description: Update task planned date and time by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: start
          description: The start date and time.
          required: true
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: end
          description: The end date and time.
          required: true
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Task planned date and time updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.

  #updateTaskScheduledTime        
  /task/scheduled/{taskNumber}:
    put:
      tags:
        - Task
      summary: Allows you to update the scheduled start and end date information for a task.
      operationId: updateTaskScheduledTime
      description: Update task scheduled date and time by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: start
          description: The start date and time.
          required: true
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: end
          description: The end date and time.
          required: true
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Task scheduled date and time updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.
          
  #updateTaskActualTime        
  /task/actual/{taskNumber}:
    put:
      tags:
        - Task
      summary: Allows you to update the actual start and end date information for a task.
      operationId: updateTaskActualTime
      description: Update task actual date and time by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: start
          description: The start date and time.
          required: true
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: end
          description: The end date and time.
          required: true
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Task actual date and time updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.
          
  #getTask        
  /task/summary/{taskNumber}:
    get:
      tags:
        - Task
      summary: Allows you to retrieve a summary of the task information.
      operationId: getTaskSummary
      description: Retreive task information by task number.
      parameters:
        - in: path
          name: taskNumber
          description: The task number
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskSummary'
        '400':
          description: bad input parameter
        '404':
          description: A task cannot be found using the task number supplied.

  /task/radius/:
    get:
      tags:
        - Task
      summary: Allows you to retrieve tasks based on a distance from a location.
      operationId: getTasksByRadius
      description: By passing in the appropriate options, you can search for
        available tasks a distance from a location.
      parameters:
        - in: query
          name: radius
          description: This is the radius in metres from the long-lat or easting-northing location.
          required: true
          example: '100'
          schema:
            type: string
            minimum: 10
            maximum: 1000
        - in: query
          name: longitude
          description: This is the longitude of the location from where to start searching the tasks. Inconjuction with the latitude, and the radius, all tasks will be returned between these two points. Just like every actual house has its address (which includes the number, the name of the street, city, etc), every single point on the surface of earth can be specified by the latitude and longitude coordinates. Therefore, by using latitude and longitude we can specify virtually any point on earth. To test you have the correct details you can test using this url (http://maps.google.com/maps?q=51.507351,-0.127758) where the first parmiter is longitude, and the second paramater is the latitude.
          required: false
          example: '51.507351'
          schema:
            type: string
        - in: query
          name: latitude
          description: This is the latitude of the location from where to start searching the tasks. Inconjuction with the lonitude, and the radius, all tasks will be returned between these two points. Just like every actual house has its address (which includes the number, the name of the street, city, etc), every single point on the surface of earth can be specified by the latitude and longitude coordinates. Therefore, by using latitude and longitude we can specify virtually any point on earth. To test you have the correct details you can test using this url (http://maps.google.com/maps?q=51.507351,-0.127758) where the first parmiter is longitude, and the second paramater is the latitude.
          required: false
          example: '-0.127758'
          schema:
            type: string
        - in: query
          name: eastings
          description: This is the eastings of the location from where to start searching the tasks. Inconjuction with the northings, and the radius, all tasks will be returned between these two points. UTM (Universal Transverse Mercator) coordinate system is basically geographical latitude longitude system that is expressed in two-dimensional projection of the surface of earth where the earth map is divided into 60 zones, with each of them separated by 6 degrees in longitude and the locations are expressed in terms of so called easting and northing, i.e. Easting 699319.36, Northing 5710158.43
          required: false
          example: '699319.36'
          schema:
            type: string
        - in: query
          name: northings
          description: This is the nothings location from where to start searching the tasks. Inconjuction with the eastings, and the radius, all tasks will be returned between these two points. UTM (Universal Transverse Mercator) coordinate system is basically geographical latitude longitude system that is expressed in two-dimensional projection of the surface of earth where the earth map is divided into 60 zones, with each of them separated by 6 degrees in longitude and the locations are expressed in terms of so called easting and northing, i.e. Easting 699319.36, Northing 5710158.43
          required: false
          example: '5710158.43'
          schema:
            type: string
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tasks'
        '400':
          description: bad input parameter
          
  /task:
    post:
      tags:
        - Task
      summary: Create a task.
      operationId:  createTask
      description: |
        By passing in the appropriate options, you can insert tasks in the system
      parameters:
        - in: query
          name: taskNumber
          description: The task number which you want to update.
          schema:
            type: number
            format: uuid
        - in: query
          name: type
          description: The type code of task.
          required: true
          example: 'WORK_ORDER'
          schema:
            type: string
        - in: query
          name: subject
          description: The subject for the task.
          required: true
          example: Collect the rubbish
          schema:
            type: string
        - in: query
          name: description
          description: The description of what needs to be achieved for the task.
          required: false
          example: There is rubbish located.
          schema:
            type: string
        - in: query
          name: action
          description: The action of what needs to be achieved for the task.
          required: false
          example: Pick up the rubbish, and dispose.
          schema:
            type: string
        - in: query
          name: status
          description: The status code of the task.
          required: false
          example: 'OPEN'
          schema:
            type: string
        - in: query
          name: priority
          description: The priority of the task.
          required: false
          example: 'HIGH'
          schema:
            type: string
        - in: query
          name: otherSystemCode
          description: The calling system's code.
          required: true
          example: 'WIL'
          schema:
            type: string
        - in: query
          name: otherSystemUserID
          description: The calling system's user ID.
          required: true
          example: '12343431'
          schema:
            type: string
        - in: query
          name: owner
          description: The local person ID who is assigned to the task.
          required: false
          schema:
            type: string
        - in: query
          name: contributor1
          description: The person number of the contributor.
          required: false
          example: '12345677'
          schema:
            type: string
        - in: query
          name: contributor2
          description: The person number of the contributor.
          required: false
          example: '12345677'
          schema:
            type: string
        - in: query
          name: contributor3
          description: The person number of the contributor.
          required: false
          example: '12345677'
          schema:
            type: string 
        - in: query
          name: percentage
          description: The percentage of how complete the task is.
          required: false
          example: '50'
          schema:
            type: string
        - in: query
          name: plannedStart
          description: The planned start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: plannedFinish
          description: The planned finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: scheduledStart
          description: The scheduled start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: scheduledFinish
          description: The scheduled finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: actualStart
          description: The actual start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: actualFinish
          description: The actual finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: address1
          description: The first line of the address.
          required: false
          example: '1'
          schema:
            type: string
        - in: query
          name: address2
          description: The second line of the address.
          required: false
          example: 'ABC Street'
          schema:
            type: string
        - in: query
          name: adress3
          description: The third line of the address.
          required: false
          schema:
            type: string
        - in: query
          name: city
          description: The city of the addres.
          required: false
          example: 'London'
          schema:
            type: string
        - in: query
          name: town
          description: The town of the address.
          required: false
          schema:
            type: string
        - in: query
          name: postcode
          description: The postcode of the address.
          required: false
          example: 'AB1 CD2'
          schema:
            type: string
        - in: query
          name: region
          description: The region of the address.
          required: false
          example: 'England'
          schema:
            type: string
        - in: query
          name: country
          description: The county of the address.
          required: false
          example: 'UK'          
          schema:
            type: string
        - in: query
          name: state
          description: The state of the address. This is used for countries where a state exists.
          required: false
          schema:
            type: string
        - in: query
          name: uprn
          description: The Unique Property Reference Number (UPRN) of the address.
          required: false
          example: '79323221322'
          schema:
            type: string
        - in: query
          name: usrn
          description: The Unique Street Reference Number (USRN) of the address.
          required: false
          schema:
            type: string
        - in: query
          name: lpiKey
          description: The LPI Key of the address.
          required: false
          schema:
            type: string
        - in: query
          name: Latitude
          description: The latitude of the location.
          required: false
          schema:
            type: string
        - in: query
          name: Longitude
          description: The longitude of the location.
          required: false
          schema:
            type: string
        - in: query
          name: Northing
          description: The northing for the task.
          required: false
          schema:
            type: string
        - in: query
          name: Easting
          description: The easting for the task.
          required: false
          schema:
            type: string            
        - in: query
          name: contactName
          description: The contact name details for the given task.
          required: false
          schema:
            type: string
        - in: query
          name: contactPhone
          description: The contact phone details for the given task.
          required: false
          schema:
            type: string
        - in: query
          name: createdBy
          description: The person ID of the person who is creating the task.
          required: false
          example: 'Mark Eves'
          schema:
            type: string
        - in: query
          name: updatedBy
          description: The person ID of the person who is updating the task.
          required: false
          example: 'Mark Eves'
          schema:
            type: string
      responses:
        '200':
          description: Tasks added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          
    get:
      tags:
        - Task
      summary: Allows you to retrieve tasks based on the parameters.
      operationId: getTasks
      description: |
        By passing in the appropriate options, you can search for
        available tasks in the system
      parameters:
        - in: query
          name: type
          description: The code name of the task type.
          schema:
            type: string
          required: false
          example: 'WO'
        - in: query
          name: contributor1
          description: The person number of the contributor.
          required: false
          example: '21013'
          schema:
            type: string
        - in: query
          name: contributor2
          description: The person number of the contributor.
          required: false
          example: '21012'
          schema:
            type: string
        - in: query
          name: contributor3
          description: The person number of the contributor.
          required: false
          example: '21011'
          schema:
            type: string            
        - in: query
          name: owner
          description: The person number of the owner of the task
          required: false
          example: '31010'
          schema:
            type: number
        - in: query
          name: otherSystemCode
          description: The code  of the external system that previously created the task.
          required: false
          example: 'WIL'
          schema:
            type: string
        - in: query
          name: otherSystemUserID
          description: The user ID of the person of the external system that previously created the task.
          required: false
          schema:
            type: string
        - in: query
          name: status
          description: The status code of the task.
          required: false
          example: 'OPEN'
          schema:
            type: string
        - in: query
          name: priority
          description: The priority code of the priority.
          required: false
          example: 'LOW'
          schema:
            type: string
        - in: query
          name: plannedStart
          description: The planned start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: plannedFinish
          description: The planned finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: scheduledStart
          description: The scheduled start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: scheduledFinish
          description: The scheduled finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: actualStart
          description: The actual start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: actualFinish
          description: The actual finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tasks'
        '400':
          description: bad input parameter
          
  /task/subtask/{taskNumber}:
    post:
      tags:
        - Task
      summary: Create a sub task for a task.
      operationId:  createSubTaskForTask
      description: |
        By passing in the appropriate options, you can insert tasks in the system
      parameters:
        - in: path
          name: taskNumber
          description: The task number which the sub task will be created under.
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: type
          description: The type code of task.
          required: true
          example: 'WORK_ORDER'
          schema:
            type: string
        - in: query
          name: subject
          description: The subject for the task.
          required: true
          example: Collect the rubbish
          schema:
            type: string
        - in: query
          name: description
          description: The description of what needs to be achieved for the task.
          required: false
          example: There is rubbish located.
          schema:
            type: string
        - in: query
          name: action
          description: The action of what needs to be achieved for the task.
          required: false
          example: Pick up the rubbish, and dispose.
          schema:
            type: string
        - in: query
          name: status
          description: The status code of the task.
          required: false
          example: 'OPEN'
          schema:
            type: string
        - in: query
          name: priority
          description: The priority of the task.
          required: false
          example: 'HIGH'
          schema:
            type: string
        - in: query
          name: otherSystemCode
          description: The calling system's code.
          required: false
          example: 'WIL'
          schema:
            type: string
        - in: query
          name: otherSystemUserID
          description: The calling system's user ID.
          required: false
          example: '12343431'
          schema:
            type: string
        - in: query
          name: owner
          description: The local person ID who is assigned to the task.
          required: false
          schema:
            type: string
        - in: query
          name: contributor1
          description: The person number of the contributor.
          required: false
          example: '12345677'
          schema:
            type: string
        - in: query
          name: contributor2
          description: The person number of the contributor.
          required: false
          example: '12345677'
          schema:
            type: string
        - in: query
          name: contributor3
          description: The person number of the contributor.
          required: false
          example: '12345677'
          schema:
            type: string 
        - in: query
          name: percentage
          description: The percentage of how complete the task is.
          required: false
          example: '50'
          schema:
            type: string
        - in: query
          name: plannedStart
          description: The planned start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: plannedFinish
          description: The planned finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: scheduledStart
          description: The scheduled start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: scheduledFinish
          description: The scheduled finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: actualStart
          description: The actual start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: actualFinish
          description: The actual finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: address1
          description: The first line of the address.
          required: false
          example: '1'
          schema:
            type: string
        - in: query
          name: address2
          description: The second line of the address.
          required: false
          example: 'ABC Street'
          schema:
            type: string
        - in: query
          name: adress3
          description: The third line of the address.
          required: false
          schema:
            type: string
        - in: query
          name: city
          description: The city of the addres.
          required: false
          example: 'London'
          schema:
            type: string
        - in: query
          name: town
          description: The town of the address.
          required: false
          schema:
            type: string
        - in: query
          name: postcode
          description: The postcode of the address.
          required: false
          example: 'AB1 CD2'
          schema:
            type: string
        - in: query
          name: region
          description: The region of the address.
          required: false
          example: 'England'
          schema:
            type: string
        - in: query
          name: country
          description: The county of the address.
          required: false
          example: 'UK'          
          schema:
            type: string
        - in: query
          name: state
          description: The state of the address. This is used for countries where a state exists.
          required: false
          schema:
            type: string
        - in: query
          name: uprn
          description: The Unique Property Reference Number (UPRN) of the address.
          required: false
          example: '79323221322'
          schema:
            type: string
        - in: query
          name: usrn
          description: The Unique Street Reference Number (USRN) of the address.
          required: false
          schema:
            type: string
        - in: query
          name: lpiKey
          description: The LPI Key of the address.
          required: false
          schema:
            type: string
        - in: query
          name: Latitude
          description: The latitude of the location.
          required: false
          schema:
            type: string
        - in: query
          name: Longitude
          description: The longitude of the location.
          required: false
          schema:
            type: string
        - in: query
          name: Northing
          description: The northing for the task.
          required: false
          schema:
            type: string
        - in: query
          name: Easting
          description: The easting for the task.
          required: false
          schema:
            type: string            
        - in: query
          name: contactName
          description: The contact name details for the given task.
          required: false
          schema:
            type: string
        - in: query
          name: contactPhone
          description: The contact phone details for the given task.
          required: false
          schema:
            type: string
        - in: query
          name: createdBy
          description: The person ID of the person who is creating the task.
          required: false
          example: 'Mark Eves'
          schema:
            type: string
      responses:
        '200':
          description: Sub task added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
          
  /serviceRequest:
  
    #insertUpdateServiceRequest
    post:
      tags:
        - Service
      summary: Allows you to create/update a service request
      operationId: insertUpdateServiceRequest
      description: Creates/Updates a service request
      requestBody:
        description: Request body for JSON input
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceRequestPayload'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
          description: Service request created/updated successfully.
    #getServiceRequests      
    get:
      tags:
        - Service
      summary: Returns information about the service request requested.
      operationId: getServiceRequests
      description: Return service request information. by passing in appropriate options, you can search for available service requests in the system.
      parameters:
        - in: query
          name: serviceRequestNumber
          description: The service request number
          required: false
          schema:
            type: number
            format: uuid
        - in: query
          name: recordState
          description: Record state for the service request. Example ALL, UPDATED and NEW.
          example: ALL
          schema:
            type: string
            enum: [ALL,UPDATED,NEW]
          required: true
        - in: query
          name: status
          description: Status code to retrieve service request.
          required: false
          example: OPEN
          schema:
            type: string
        - in: query
          name: priority
          description: Priority code to retrieve service request.
          required: false
          example: OPEN
          schema:
            type: string
        - in: query
          name: creationDateFrom
          description: The from date for the start of creation to retrieve the service request.
          required: false
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD-MON-YYYY HH24:MM:SS'
        - in: query
          name: creationDateTo
          description: The last date of the  of the creation to retrieve the service request.
          required: false
          example: '27-NOV-2013 23:59:59'
          schema:
            type: string
            format: 'DD-MON-YYYY HH24:MM:SS'
        - in: query
          name: languageCode
          description: The language code of service requests.
          required: false
          example: 'EN'
          schema:
            type: string
        - in: query
          name: integrated
          description: Retrieve service requests that have been integrated or not. Example Yes or No.
          required: false
          example: 'Yes'
          schema:
            type: string
        - in: query
          name: profileCode
          description: To retreive service requests based on the system they integrate with.
          required: false
          example: 'IDOX'
          schema:
            type: string
        - in: query
          name: otherSystemID
          description: The service resquest reference can used to retrieve the service request base on the existing integration. This is based on previous integrated service request, where the platform has created an equal ticket, request, worksheet, etc on another system, and returned a supporting reference or ID number.
          required: false
          schema:
            type: string
        - in: query
          name: catalogue
          description: The catalogue code of the service requests.
          required: false
          schema:
            type: string
        - in: query
          name: form
          description: The form code of the service requests.
          required: false
          schema:
            type: string
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: The page to return. Must be a positive number. Default is 1.
        - in: query
          name : pageSize
          schema:
            type: integer
          description: The number of results.Must be a positive number. Min 1 max 100. Default 10
      responses:
        '200':
          description: Service request successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceRequests'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.

  /serviceRequest/{serviceRequestNumber}:
    get:
      tags:
        - Service
      summary: Returns information about the service request requested.
      operationId: getServiceRequest
      description: Return service request information. by passing in appropriate options, you can search for available service requests in the system.
      security:
      - ApiKeyAuth: []
      parameters:
        - in: header
          name: iPublicKey
          description: public key
          schema:
            type: string
        - in: path
          name: serviceRequestNumber
          description: The service request number
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Service request successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceRequests'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
          
  /serviceRequest/summary/:
    get:
      tags:
        - Service
      summary: Returns summary information about service requests requested.
      operationId: getServiceRequestSummaries
      description: Return service request information. by passing in appropriate options, you can search for available service requests in the system.
      parameters:
        - in: query
          name: recordState
          description: Record state for the service request. Example ALL, UPDATED and NEW.
          example: ALL
          schema:
            type: string
            enum: [ALL,UPDATED,NEW]
          required: true
        - in: query
          name: status
          description: Status code to retrieve service request.
          required: false
          example: OPEN
          schema:
            type: string
        - in: query
          name: priority
          description: Priority code to retrieve service request.
          required: false
          example: OPEN
          schema:
            type: string
        - in: query
          name: catalogue
          description: Catalogue code to retrieve service request.
          required: false
          example: OPEN
          schema:
            type: string
        - in: query
          name: form
          description: Form code to retrieve service request.
          required: false
          example: OPEN
          schema:
            type: string            
        - in: query
          name: creationDateFrom
          description: The from date for the start of creation to retrieve the service request.
          required: false
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: creationDateTo
          description: The last date of the  of the creation to retrieve the service request.
          required: false
          example: '27-NOV-2013 23:59:59'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: languageCode
          description: The language code of service requests.
          required: false
          example: 'EN'
          schema:
            type: string
        - in: query
          name: integrated
          description: Retrieve service requests that have been integrated or not. Example Yes or No.
          required: false
          example: 'Yes'
          schema:
            type: string
        - in: query
          name: profileCode
          description: To retreive service requests based on the system they integrate with.
          required: false
          example: 'IDOX'
          schema:
            type: string
        - in: query
          name: otherSystemID
          description: The service requests other system ID can used to retrieve the service request based on the existing integration. This is based on previous integrated service request, where the platform has created an equal ticket, request, worksheet, etc on another system, and returned a supporting reference or ID number.
          required: false
          example: '30123'
          schema:
            type: string
        - in: query
          name: otherSystemCode
          description: The service requests other system code is used allong side the otherSystemID. For each system you integrate with, the system code and ID must be provided.
          required: false
          example: 'MY1'
          schema:
            type: string            
      responses:
        '200':
          description: Service request summary successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceRequestSummaries'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
          
  /serviceRequest/radius/:
    get:
      tags:
        - Service
      summary: Allows you to retrieve requests based on a distance from a location.
      operationId: getServiceRequestRadius
      description: By passing in the appropriate options, you can search for
        available service requests a distance from a location.
      parameters:
        - in: query
          name: radius
          description: This is the radius in meter from the long-lat or easting-northing location.
          required: true
          example: '100'
          schema:
            type: string
            minimum: 10
            maximum: 1000
        - in: query
          name: longitude
          description: This is the longitude of the location from where to start searching the service requests. Inconjuction with the latitude, and the radius, all service requests will be returned between these two points. Just like every actual house has its address (which includes the number, the name of the street, city, etc), every single point on the surface of earth can be specified by the latitude and longitude coordinates. Therefore, by using latitude and longitude we can specify virtually any point on earth. To test you have the correct details you can test using this url (http://maps.google.com/maps?q=51.507351,-0.127758) where the first parmiter is longitude, and the second paramater is the latitude.
          required: false
          example: '51.507351'
          schema:
            type: string
        - in: query
          name: latitude
          description: This is the latitude of the location from where to start searching the service requests. Inconjuction with the lonitude, and the radius, all service requests will be returned between these two points. Just like every actual house has its address (which includes the number, the name of the street, city, etc), every single point on the surface of earth can be specified by the latitude and longitude coordinates. Therefore, by using latitude and longitude we can specify virtually any point on earth. To test you have the correct details you can test using this url (http://maps.google.com/maps?q=51.507351,-0.127758) where the first parmiter is longitude, and the second paramater is the latitude.
          required: false
          example: '-0.127758'
          schema:
            type: number
            format: uuid
        - in: query
          name: eastings
          description: This is the eastings of the location from where to start searching the service requests. Inconjuction with the northings, and the radius, all service requests will be returned between these two points. UTM (Universal Transverse Mercator) coordinate system is basically geographical latitude longitude system that is expressed in two-dimensional projection of the surface of earth where the earth map is divided into 60 zones, with each of them separated by 6 degrees in longitude and the locations are expressed in terms of so called easting and northing, i.e. Easting 699319.36, Northing 5710158.43
          required: false
          example: '699319.36'
          schema:
            type: string
        - in: query
          name: northings
          description: This is the nothings location from where to start searching the service requests. Inconjuction with the eastings, and the radius, all service requests will be returned between these two points. UTM (Universal Transverse Mercator) coordinate system is basically geographical latitude longitude system that is expressed in two-dimensional projection of the surface of earth where the earth map is divided into 60 zones, with each of them separated by 6 degrees in longitude and the locations are expressed in terms of so called easting and northing, i.e. Easting 699319.36, Northing 5710158.43
          required: false
          example: '5710158.43'
          schema:
            type: string
      responses:
        '200':
          description: Service requests successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceRequests'
        '400':
          description: bad input parameter
          
  /serviceRequest/person/{personNumber}:
    get:
      tags:
        - Service
      summary: Returns summary information about each service requestthat has been submitted by a person.
      operationId: getServiceRequestByPerson
      description: Return service request information. by passing in appropriate options, you can search for available service requests in the system.
      parameters:
        - in: path
          name: personNumber
          description: The person number of a user or customer
          example: 220033
          schema:
            type: number
            format: uuid
          required: true
        - in: query
          name: status
          description: Status code to retrieve service request.
          required: false
          example: OPEN
          schema:
            type: string
        - in: query
          name: priority
          description: Priority code to retrieve service request.
          required: false
          example: OPEN
          schema:
            type: string
        - in: query
          name: catalogueCode
          description: Priority code to retrieve service request.
          required: false
          example: OPEN
          schema:
            type: string
        - in: query
          name: formCode
          description: Priority code to retrieve service request.
          required: false
          example: OPEN
          schema:
            type: string            
        - in: query
          name: creationDateFrom
          description: The from date for the start of creation to retrieve the service request.
          required: false
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: creationDateTo
          description: The last date of the  of the creation to retrieve the service request.
          required: false
          example: '27-NOV-2013 23:59:59'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: languageCode
          description: The language code of service requests.
          required: false
          example: 'EN'
          schema:
            type: string
        - in: query
          name: integrated
          description: Retrieve service requests that have been integrated or not. Example Yes or No.
          required: false
          example: 'Yes'
          schema:
            type: string
        - in: query
          name: profileCode
          description: To retreive service requests based on the system they integrate with.
          required: false
          example: 'IDOX'
          schema:
            type: string
        - in: query
          name: otherSystemID
          description: The service requests other system ID can used to retrieve the service request based on the existing integration. This is based on previous integrated service request, where the platform has created an equal ticket, request, worksheet, etc on another system, and returned a supporting reference or ID number.
          required: false
          example: '30123'
          schema:
            type: string
      responses:
        '200':
          description: Service request successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceRequestSummaries'
        '400':
          description: bad input parameter
          
  /serviceRequest/summary/{serviceRequestNumber}:
    get:
      tags:
        - Service
      summary: Returns summary information about the service request requested.
      operationId: getServiceRequestSummary
      description: Return service request information. by passing in appropriate options, you can search for available service requests in the system.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number
          required: true
          schema:
            type: number
            format: uuid
      responses:
        '200':
          description: Service request summary successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceRequestSummary'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified. 
  
  /serviceRequest/uprn/{uprn}:
    get:
      tags:
        - Service
      summary: Returns a summary list of information about the service requests reported against a given property.
      operationId: getServiceRequestSummaryByUPRN
      description: Returns service request information against a property. by passing in the unique property reference number, you can retrieve available service requests in the platform.
      parameters:
        - in: path
          name: uprn
          description: The unique property reference number
          required: true
          schema:
            type: number
            format: uuid
        - in: query
          name: creationDateFrom
          description: The from date for the start of creation to retrieve the service request.
          required: false
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
        - in: query
          name: creationDateTo
          description: The last date of the  of the creation to retrieve the service request.
          required: false
          example: '27-NOV-2013 23:59:59'
          schema:
            type: string
            format: 'DD:MON:YYYY HH24:MM:SS'
      responses:
        '200':
          description: Service request summary successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceRequestSummaries'
        '400':
          description: bad input parameter
        '404':
          description: Service requests cannot be found with the supplied UPRN reference.   

  #deleteNotes
  /serviceRequest/notes/delete/{serviceRequestNumber}:
    delete:
      tags:
        - Service
      summary: Delete Notes.
      operationId: deleteNotes
      description: |
        By passing in the appropriate options, you can delete Notes.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The Service Request ID that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Notes deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The Notes cannot be found with the Service Request ID supplied. 
  
  #getServiceRequestNotes        
  /serviceRequest/notes/{serviceRequestNumber}:
    get:
      tags:
        - Service
      summary: Allows you to retrieve the full details of a given note
      operationId: getServiceRequestNotesByNumber
      description: By passing in the appropriate options, you can search and retreive available notes.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number of the notes to retreive.
          required: true
          example: '83500'
          schema:
            type: number
            format: uuid
            example: ccc
        - in: query
          name: personNumber
          description: The person number of the person who created the note.
          example: '12345'          
          schema:
            type: number
          required: false
        - in: query
          name: otherSystemCode
          description: The code of the system that created the note.
          required: false
          example: 'WIL'
          schema:
            type: string
        - in: query
          name: otherSystemUserID
          description: The other system user ID who created the note.
          required: false
          example: '12345677'
          schema:
            type: string
        - in: query
          name: startDate
          description: This allows you to retreive notes that were created after this date. 
          required: false
          example: '01-NOV-2013 01:10:10'
          schema:
            type: string
            format: 'DD-MON-YYYY HH24:MM:SS'
        - in: query
          name: finishDate
          description: This allows you to retreive notes that were created before this date.
          required: false
          example: '27-NOV-2013 23:59:59'
          schema:
            type: string
            format: 'DD-MON-YYYY HH24:MM:SS'
            
      responses:
        '200':
          description: Notes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notes'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
    post:
      tags:
        - Service
      summary: Allows you to add a note to an existing service request
      operationId: createServiceRequestNotes
      description: Create a note against an existing service request.
      requestBody:
        description: Request body for JSON input
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceRequestNotesPayload'
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number under which the new note will be created.
          required: true
          schema:
            type: number
            format: uuid
            example: 123
      responses:
        '200':
          description: Notes added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
          
  #deleteStatus
  /serviceRequest/status/delete/{serviceRequestNumber}:
    delete:
      tags:
        - Service
      summary: Delete Status.
      operationId: deleteStatus
      description: |
        By passing in the appropriate options, you can delete Status.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The Service Request ID that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Status deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The Status cannot be found with the Service Request ID supplied. 
            
  #getServiceRequestStatus        
  /serviceRequest/status/{serviceRequestNumber}:
    get:
      tags:
        - Service
      summary: Allows you to retrieve the current status of a service request.
      operationId: getServiceRequestStatus
      description: By passing in the appropriate options, you can search and retreive available notes.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The number of the service request you wish the get the status.
          required: true
          schema:
            type: number
            format: uuid
            example: 83500
      responses:
        '200':
          description: Service request status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statuses'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
  
    put:
      tags:
        - Service
      summary: update the status of an existing service request
      operationId: updateServiceRequestStatus
      description: Update the status of the service request.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number
          required: true
          schema:
            type: number
            format: uuid
            example: ccc
        - in: query
          name: status
          description: The new status code. For example "HIGH"
          schema:
            type: string
            example: 'HIGH'
          required: true
      responses:
        '200':
          description: Status successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
          
  #deleteQuestions
  /serviceRequest/questions/delete/{serviceRequestNumber}:
    delete:
      tags:
        - Service
      summary: Delete Question.
      operationId: deleteQuestions
      description: |
        By passing in the appropriate options, you can delete Question.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The Service Request ID that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Question deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The Questions cannot be found with the Service Request ID supplied. 
  
  /serviceRequest/questions/{serviceRequestNumber}:
    post:
      tags:
        - Service
      summary: Adds questions and answers for the given report
      operationId: upsertQuestion
      description: |
        By passing in the appropriate options, you can insert for
        available questions in the system
      parameters:
        - in: path
          name: serviceRequestNumber
          description: pass service request ID for the given report.
          required: true
          schema:
            type: number
        - in: query
          name: questionCode
          description: Allows to store service request questionnaires by providing question Key.
          required: true
          example: 'ANTI_SOC_Q'
          schema:
            type: string
        - in: query
          name: question
          description: Allows to store Report Questionnaires by providing Question.
          required: false
          example: 'Test Que'
          schema:
            type: string
        - in: query
          name: answerCode
          description: Allows to store Report Questionnaires by providing Answer Key.
          required: false
          example: '432432423DEDE'
          schema:
            type: string
        - in: query
          name: answer
          description: Allows to store Report Questionnaires by providing Answer Value.
          required: false
          example: 'Test Answer'
          schema:
            type: string
      responses:
        '200':
          description: Question and answer added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
    get:
      tags:
        - Service
      summary: Gets questions and answers for the given service request
      operationId: getQuestions
      description: |
        By passing in the appropriate options, you can insert for
        available questions in the system
      parameters:
        - in: path
          name: serviceRequestNumber
          description: pass service request ID for the given report.
          required: true
          schema:
            type: number
        - in: query
          name: questionKey
          description: Allows to store Report Questionnaires by providing Question Key.
          required: false
          example: 'ANTI_SOC_Q'
          schema:
            type: string
        - in: query
          name: answerKey
          description: Allows to store Report Questionnaires by providing Answer Key.
          required: false
          example: 'ANTI_SOC_A'
          schema:
            type: string
      responses:
        '200':
          description: Questionnaires retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionnaire'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
          
  #deleteAttachement
  /serviceRequest/attachment/delete/{serviceRequestNumber}:
    delete:
      tags:
        - Service
      summary: Delete Attachement.
      operationId: deleteAttachement
      description: |
        By passing in the appropriate options, you can delete attachement.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The Service Request ID that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: attachement deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The Attachment cannot be found with the Service Request ID supplied.  
   
  #upsertAttachment  
  /serviceRequest/attachment:
    post:
      tags:
        - Service
      summary: Adds attachment for the given service request
      operationId: upsertAttachment
      description: |
        By passing in the appropriate options, you can insert for
        reports' evidences in the system
      requestBody:
        description: Request body for JSON input
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attachmentPayload'
      responses:
        '200':
          description: Evidences added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
          
  /serviceRequest/attachment/{serviceRequestNumber}:
    get:
      tags:
        - Service
      summary: Gets attachments for the given service request
      operationId: getAttachments
      description: |
        By passing in the appropriate options, you can insert for
        reports' evidences in the system
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The number for the given service report.
          required: true
          schema:
            type: number
        - in: query
          name: fileName
          description: Allows to retreieve attachments by providing File Name.
          required: false
          example: 'F17CE69F13B883_sample.png'
          schema:
            type: string
        - in: query
          name: mimeType
          description: Allows to store Report Evidence by providing Mime type.
          required: false
          example: 'images/jpg'
          schema:
            type: string
        - in: query
          name: documentTypeName
          description: Once the attachement is uploaded, the retention policy will be defined by the document type name.
          required: false
          example: 'Passport renewal'
          schema:
            type: string    
        - in: query
          name: documentTypeCode
          description: Once the attachement is uploaded, the retention policy will be defined by the document type code.
          required: false
          example: 'Passport_Renewal'
          schema:
            type: string
      responses:
        '200':
          description: Evidences retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attachments'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.

  /serviceRequest/integrationReference/{serviceRequestNumber}:    
    put:
      tags:
        - Service
      summary: The reference is the number or text value that is provided by the integrated system. this is not normally the ID of the integrated object, but a reference value that may be changeable by the user of the system.
      operationId: updateServiceRequestReference
      description: Update the status of the service request.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number
          required: true
          example: '8766423'
          schema:
            type: number
            format: uuid
            example: ccc
        - in: query
          name: reference
          description: The reference number.
          example: '2019/EN/002'
          schema:
            type: string
          required: true
        - in: query
          name: systemCode
          description: The system code name.
          required: true
          example: 'ECHO'
          schema:
            type: string
      responses:
        '200':
          description: Reference successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.

  /serviceRequest/integrationID/{serviceRequestNumber}:    
    put:
      tags:
        - Service
      summary: The integration ID is the number value that is provided by the integrated system. This is the ID of the integrated object. This value is not be changeable by the user of the system.
      operationId: updateServiceRequestIntegration
      description: Update the status of the service request.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number
          required: true
          example: '8766423'
          schema:
            type: number
            format: uuid
            example: ccc
        - in: query
          name: systemID
          description: The Integration ID of the integrated system.
          example: '2019/EN/002'
          schema:
            type: string
          required: true
        - in: query
          name: systemCode
          description: The system code name.
          required: true
          example: 'ECHO'
          schema:
            type: string
      responses:
        '200':
          description: Integration ID successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
          
  /serviceRequest/priority/{serviceRequestNumber}:    
    put:
      tags:
        - Service
      summary: This allows you to update the priority of the service request.
      operationId: updateServiceRequestPriority
      description: Update the priority of the service request. This is used for escalation, or where external factors have impacted the delivery of this serivce. 
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number
          required: true
          schema:
            type: number
            format: uuid
            example: '300455'
        - in: query
          name: priority
          description: The priority code of the priority.
          example: 'HIGH'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Priority successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.

    get:
      tags:
        - Service
      summary: This allows you to rievee priority of the service request.
      operationId: getServiceRequestPriority
      description: Retrieve the priority of the service request. This is used for escalation, or where external factors 
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number
          required: true
          schema:
            type: number
            format: uuid
            example: '300455'
      responses:
        '200':
          description:   Service request priority retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/priorities'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
  
  
  /serviceRequest/outcomes/{serviceRequestNumber}:    
    post:
      tags:
        - Service
      summary: This allows you to create an outcome for the service request.
      operationId: createServiceRequestOutcome
      description: Create an outcome for a service request. This is used to add multiple outcomes with an activity, outcome for that activity, and the result for that activity. The area is optional.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number
          required: true
          schema:
            type: number
            format: uuid
            example: '300455'
        - in: query
          name: activity
          description: The activity of the outcome.
          example: 'Call customer'
          schema:
            type: string
          required: true
        - in: query
          name: outcome
          description: The outcome of the outcome.
          example: 'Customer called'
          schema:
            type: string
          required: true
        - in: query
          name: result
          description: The result of the outcome.
          example: 'Customer happy'
          schema:
            type: string
          required: true
        - in: query
          name: area
          description: The area for the outcome.
          example: 'Customer services'
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Outcome successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: Bad input parameters. check the values passed are correct, and the relationship between activity-outcome-result are valid
        '404':
          description: A service request cannot be found given the parameters specified.

    get:
      tags:
        - Service
      summary: This allows you to retrieve all outcomes for the service request.
      operationId: getServiceRequestOutcomes
      description: Retrieves outcomes for a service request. This will return multiple outcomes with an activity, outcome for that activity, and the result for that activity. The area is also returned.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number
          required: true
          schema:
            type: number
            format: uuid
            example: '300455'
      responses:
        '200':
          description: Outcomes successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/outcomes'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified. 
          
  /serviceRequest/task/{serviceRequestNumber}:
    post:
      tags:
        - Service
      summary: Creates a task against the service request
      operationId: createTaskServiceRequest
      description: |
        By passing in the appropriate options, you can insert tasks in the system
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The service request number for whoch you want the task created under.
          required: true
          schema:
            type: number
        - in: query
          name: typeCode
          description: The task type.
          required: true
          schema:
            type: string
        - in: query
          name: subject
          description: The subject of the tas.
          required: true
          schema:
            type: string
        - in: query
          name: description
          description: The description for the task.
          required: false
          schema:
            type: string
        - in: query
          name: action
          description: The action for the task.
          required: false
          schema:
            type: string
        - in: query
          name: status
          description: The status code for the task.
          required: false
          schema:
            type: string
        - in: query
          name: priority
          description: The priority code for the given task.
          required: false
          schema:
            type: string
        - in: query
          name: otherSystemCode
          description: The calling system's code.
          required: true
          example: 'WIL'
          schema:
            type: string
        - in: query
          name: otherSystemUserID
          description: The calling system's user ID.
          required: true
          example: '12343431'
          schema:
            type: string
        - in: query
          name: contributor1
          description: The person number of the contributor.
          required: false
          schema:
            type: string
        - in: query
          name: contributor2
          description: The person number of the contributor.
          required: false
          schema:
            type: string
        - in: query
          name: contributor3
          description: The person number of the contributor.
          required: false
          schema:
            type: string            
        - in: query
          name: percent
          description: The percentage complete of the task.
          required: false
          schema:
            type: string
        - in: query
          name: plannedStart
          description: The planned start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: plannedFinish
          description: The planned finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: scheduledStart
          description: The scheduled start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: scheduledFinish
          description: The scheduled finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: actualStart
          description: The actual start date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: actualFinish
          description: The actual finish date and time.
          required: false
          example: '27-NOV-2013 10:15:51'
          schema:
            type: string
            format: date-time
        - in: query
          name: address1
          description: The first line of the address for the incident or request location.
          required: false
          example: '1'
          schema:
            type: string
        - in: query
          name: address2
          description: The second line of the address for the incident or request location.
          required: false
          example: 'ABC Street'
          schema:
            type: string
        - in: query
          name: address3
          description: The third line of the address for the incident or request location.
          required: false
          schema:
            type: string
        - in: query
          name: city
          description: The city of the address for the incident or request location.
          required: false
          example: 'London'
          schema:
            type: string
        - in: query
          name: town
          description: The town of the address for the incident or request location.
          required: false
          schema:
            type: string
        - in: query
          name: postcode
          description: The postcode of the address for the incident or request location.
          required: false
          example: 'AB1 CD2'
          schema:
            type: string
        - in: query
          name: region
          description: The region of the address for the incident or request location.
          required: false
          example: 'England'
          schema:
            type: string
        - in: query
          name: country
          description: The county of the address for the incident or request location.
          required: false
          schema:
            type: string
        - in: query
          name: state
          description: The state of the address for the incident or request location. This is used for countries where a state exists.
          required: false
          example: 'GB'
          schema:
            type: string
        - in: query
          name: uprn
          description: The Unique Property Reference Number (UPRN) of the address.
          required: false
          example: '79323221322'
          schema:
            type: string
        - in: query
          name: usrn
          description: The Unique Street Reference Number (USRN) of the address.
          required: false
          schema:
            type: string
        - in: query
          name: lpiKey
          description: The LPI Key of the address.
          required: false
          schema:
            type: string
        - in: query
          name: Latitude
          description: The latitude of the location.
          required: false
          schema:
            type: string
        - in: query
          name: Longitude
          description: The longitude of the location.
          required: false
          schema:
            type: string
        - in: query
          name: Northing
          description: The northing for the task.
          required: false
          schema:
            type: string
        - in: query
          name: Easting
          description: The easting for the task.
          required: false
          schema:
            type: string            
        - in: query
          name: contactName
          description: The contact name details for the given task.
          required: false
          schema:
            type: string
        - in: query
          name: contactPhone
          description: The contact phone details for the given task.
          required: false
          schema:
            type: string
        - in: query
          name: createdBy
          description: The person ID of the person who is creating the task.
          required: false
          example: 'Mark Eves'
          schema:
            type: string
        - in: query
          name: updatedBy
          description: The person ID of the person who is updating the task.
          required: false
          example: 'Mark Eves'
          schema:
            type: string
      responses:
        '200':
          description: Tasks added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: A service request cannot be found given the parameters specified.
          
  #deleteServiceRequest
  /serviceRequest/delete/{serviceRequestNumber}:
    delete:
      tags:
        - Service
      summary: Delete a Service Request.
      operationId: deleteServiceRequest
      description: |
        By passing in the appropriate options, you can delete service request.
      parameters:
        - in: path
          name: serviceRequestNumber
          description: The Service Request ID that will be deleted.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Service Request deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The Service Request cannot be found with the Service Request ID supplied. 

    

  /event/debug/:
    post:
      tags:
        - Event management
      summary: Allows you to raise a debug event.
      operationId: createDebugEvent
      description: Designates fine-grained informational events that are most useful to debuging an event.
      parameters:
        - in: query
          name: system
          description: This is the system that is raising the event.
          required: true
          example: My Council services
          schema:
            type: string
        - in: query
          name: flow
          description: This is used to group all events based on a given flow. For example, If you are processing a service request integration, all event calls should follow the same flow number. We sugest you use the current date followed by the object ID. The format should follow DDMMRRRRHH24MIN-OBJECTID.
          required: true
          example: 010220192330-123456
          schema:
            type: string
            format: 'DDMMRRRRHH24MIN-OBJECTID'
        - in: query
          name: impact
          description:
            Critical - This event indicates complete shut-down of the process, nothing can proceed further.
            
            Major - It is a highly severe event and collapses the system. However, certain parts of the system remain functional.
            
            Medium - the event causes some undesirable behavior, but the system is still functional.
            
            Low - The event won't cause any major break-down of the system.
            
          required: false
          schema:
            type: string
            enum: [Critical, Major, Medium, Low]
        - in: query
          name: description
          description: Further infomrtion used to define where the event was raise from.
          required: true
          schema:
            type: string
        - in: query
          name: clientID
          description: The is the ID of the client instanance that is raising the event.
          required: true
          schema:
            type: number    
        - in: query
          name: date
          description: This is the date and time the event was raised
          required: true
          schema:
            type: string
        - in: query
          name: message
          description: This the detailed message that fully defines what the event was and any supporting infortmaion.
          required: true
          schema:
            type: string
        - in: query
          name: request
          description: The input information provided before the event.
          required: false
          schema:
            type: string
        - in: query
          name: response
          description: The returned information provided after the event.
          required: false
          schema:
            type: string
        - in: query
          name: objectID
          description: The ID of the object of the event.
          required: false
          example: 123456         
          schema:
            type: string
        - in: query
          name: objectName
          description: The description of the ID of the event.
          required: false
          example: Service request
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
          description: Event created successfully.

  /event/warning/:
    post:
      tags:
        - Event management
      summary: Allows you to raise a warning event.
      operationId: createWarningEvent
      description: Designates potentially harmful situations.
      parameters:
        - in: query
          name: system
          description: This is the system that is raising the event.
          required: true
          example: My Council services
          schema:
            type: string
        - in: query
          name: flow
          description: This is used to group all events based on a given flow. For example, If you are processing a service request integration, all event calls should follow the same flow number. We sugest you use the current date followed by the object ID. The format should follow DDMMRRRRHH24MIN-OBJECTID.
          required: true
          example: 010220192330-123456
          schema:
            type: string
            format: 'DDMMRRRRHH24MIN-OBJECTID'
        - in: query
          name: impact
          description:
            Critical - This event indicates complete shut-down of the process, nothing can proceed further.
            
            Major - It is a highly severe event and collapses the system. However, certain parts of the system remain functional.
            
            Medium - the event causes some undesirable behavior, but the system is still functional.
            
            Low - The event won't cause any major break-down of the system.
            
          required: false
          schema:
            type: string
            enum: [Critical, Major, Medium, Low]
        - in: query
          name: description
          description: Further infomrtion used to define where the event was raise from.
          required: true
          schema:
            type: string
        - in: query
          name: clientID
          description: The is the ID of the client instanance that is raising the event.
          required: true
          schema:
            type: number
        - in: query
          name: date
          description: This is the date and time the event was raised
          required: true
          schema:
            type: string
        - in: query
          name: message
          description: This the detailed message that fully defines what the event was and any supporting infortmaion.
          required: true
          schema:
            type: string
        - in: query
          name: request
          description: The input information provided before the event.
          required: false
          schema:
            type: string
        - in: query
          name: response
          description: The returned information provided after the event.
          required: false
          schema:
            type: string
        - in: query
          name: objectID
          description: The ID of the object of the event.
          required: false
          example: 123456         
          schema:
            type: string
        - in: query
          name: objectName
          description: The description of the ID of the event.
          required: false
          example: Service request number
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
          description: Event created successfully.
          
  /event/information/:
    post:
      tags:
        - Event management
      summary: Allows you to raise an information event.
      operationId: createInformationEvent
      description: Designates informational messages that highlight the progress of the event at coarse-grained level.
      parameters:
        - in: query
          name: system
          description: This is the system that is raising the event.
          required: true
          example: My Council services
          schema:
            type: string
        - in: query
          name: flow
          description: This is used to group all events based on a given flow. For example, If you are processing a service request integration, all event calls should follow the same flow number. We sugest you use the current date followed by the object ID. The format should follow DDMMRRRRHH24MIN-OBJECTID.
          required: true
          example: 010220192330-123456
          schema:
            type: string  
            format: 'DDMMRRRRHH24MIN-OBJECTID'
        - in: query
          name: impact
          description:
            Critical - This event indicates complete shut-down of the process, nothing can proceed further.
            
            Major - It is a highly severe event and collapses the system. However, certain parts of the system remain functional.
            
            Medium - the event causes some undesirable behavior, but the system is still functional.
            
            Low - The event won't cause any major break-down of the system.
            
          required: false
          schema:
            type: string
            enum: [Critical, Major, Medium, Low]
        - in: query
          name: description
          description: Further infomrtion used to define where the event was raise from.
          required: true
          schema:
            type: string
        - in: query
          name: clientID
          description: The is the ID of the client instanance that is raising the event.
          required: true
          schema:
            type: number
        - in: query
          name: date
          description: This is the date and time the event was raised
          required: true
          schema:
            type: string
        - in: query
          name: message
          description: This the detailed message that fully defines what the event was and any supporting infortmaion.
          required: true
          schema:
            type: string
        - in: query
          name: request
          description: The input information provided before the event.
          required: false
          schema:
            type: string
        - in: query
          name: response
          description: The returned information provided after the event.
          required: false
          schema:
            type: string
        - in: query
          name: objectID
          description: The ID of the object of the event.
          required: false
          example: 123456         
          schema:
            type: string
        - in: query
          name: objectName
          description: The description of the ID of the event.
          required: false
          example: Service request number
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
          description: Event created successfully.

  /event/trace/:
    post:
      tags:
        - Event management
      summary: Allows you to raise a trace event.
      operationId: creatTraceEvent
      description: Designates finer-grained informational events than the debug event.
      parameters:
        - in: query
          name: system
          description: This is the system that is raising the event.
          required: true
          example: My Council services
          schema:
            type: string
        - in: query
          name: flow
          description: This is used to group all events based on a given flow. For example, If you are processing a service request integration, all event calls should follow the same flow number. We sugest you use the current date followed by the object ID. The format should follow DDMMRRRRHH24MIN-OBJECTID.
          required: true
          example: 010220192330-123456
          schema:
            type: string
            format: 'DDMMRRRRHH24MIN-OBJECTID'
        - in: query
          name: impact
          description:
            Critical - This event indicates complete shut-down of the process, nothing can proceed further.
            
            Major - It is a highly severe event and collapses the system. However, certain parts of the system remain functional.
            
            Medium - the event causes some undesirable behavior, but the system is still functional.
            
            Low - The event won't cause any major break-down of the system.
            
          required: false
          schema:
            type: string
            enum: [Critical, Major, Medium, Low]
        - in: query
          name: description
          description: Further infomrtion used to define where the event was raise from.
          required: true
          schema:
            type: string
        - in: query
          name: clientID
          description: The is the ID of the client instanance that is raising the event.
          required: true
          schema:
            type: number
        - in: query
          name: date
          description: This is the date and time the event was raised
          required: true
          schema:
            type: string
        - in: query
          name: message
          description: This the detailed message that fully defines what the event was and any supporting infortmaion.
          required: true
          schema:
            type: string
        - in: query
          name: request
          description: The input information provided before the event.
          required: false
          schema:
            type: string
        - in: query
          name: response
          description: The returned information provided after the event.
          required: false
          schema:
            type: string
        - in: query
          name: objectID
          description: The ID of the object of the event.
          required: false
          example: 123456         
          schema:
            type: string
        - in: query
          name: objectName
          description: The description of the ID of the event.
          required: false
          example: Service request number
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
          description: Event created successfully.
          
  /event/error/:
    post:
      tags:
        - Event management
      summary: Allows you to raise an error event.
      operationId: createErrorEvent
      description: Designates error events that might still allow the event to continue running.
      parameters:
        - in: query
          name: system
          description: This is the system that is raising the event.
          required: true
          example: My Council services
          schema:
            type: string
        - in: query
          name: flow
          description: This is used to group all events based on a given flow. For example, If you are processing a service request integration, all event calls should follow the same flow number. We sugest you use the current date followed by the object ID. The format should follow DDMMRRRRHH24MIN-OBJECTID.
          required: true
          example: 010220192330-123456
          schema:
            type: string  
            format: 'DDMMRRRRHH24MIN-OBJECTID'
        - in: query
          name: impact
          description:
            Critical - This event indicates complete shut-down of the process, nothing can proceed further.
            
            Major - It is a highly severe event and collapses the system. However, certain parts of the system remain functional.
            
            Medium - the event causes some undesirable behavior, but the system is still functional.
            
            Low - The event won't cause any major break-down of the system.
            
          required: false
          schema:
            type: string
            enum: [Critical, Major, Medium, Low]
        - in: query
          name: description
          description: Further infomrtion used to define where the event was raise from.
          required: true
          schema:
            type: string
        - in: query
          name: clientID
          description: The is the ID of the client instanance that is raising the event.
          required: true
          schema:
            type: number
        - in: query
          name: date
          description: This is the date and time the event was raised
          required: true
          schema:
            type: string
        - in: query
          name: message
          description: This the detailed message that fully defines what the event was and any supporting infortmaion.
          required: true
          schema:
            type: string
        - in: query
          name: request
          description: The input information provided before the event.
          required: false
          schema:
            type: string
        - in: query
          name: response
          description: The returned information provided after the event.
          required: false
          schema:
            type: string
        - in: query
          name: objectID
          description: The ID of the object of the event.
          required: false
          example: 123456         
          schema:
            type: string
        - in: query
          name: objectName
          description: The description of the ID of the event.
          required: false
          example: Service request number
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
          description: Event created successfully. 
          
  /event/fatal/:
    post:
      tags:
        - Event management
      summary: Allows you to raise an fatal event.
      operationId: createFatalEvent
      description: Designates very severe error event that will presumably lead to the calling event to abort.
      parameters:
        - in: query
          name: system
          description: This is the system that is raising the event.
          required: true
          example: My Council services
          schema:
            type: string
        - in: query
          name: flow
          description: This is used to group all events based on a given flow. For example, If you are processing a service request integration, all event calls should follow the same flow number. We sugest you use the current date followed by the object ID. The format should follow DDMMRRRRHH24MIN-OBJECTID.
          required: true
          example: 010220192330-123456
          schema:
            type: string 
            format: 'DDMMRRRRHH24MIN-OBJECTID'
        - in: query
          name: impact
          description:
            Critical - This event indicates complete shut-down of the process, nothing can proceed further.
            
            Major - It is a highly severe event and collapses the system. However, certain parts of the system remain functional.
            
            Medium - the event causes some undesirable behavior, but the system is still functional.
            
            Low - The event won't cause any major break-down of the system.
            
          required: false
          schema:
            type: string
            enum: [Critical, Major, Medium, Low]
        - in: query
          name: description
          description: Further infomrtion used to define where the event was raise from.
          required: true
          schema:
            type: string
        - in: query
          name: clientID
          description: The is the ID of the client instanance that is raising the event.
          required: true
          schema:
            type: number
        - in: query
          name: date
          description: This is the date and time the event was raised
          required: true
          schema:
            type: string
        - in: query
          name: message
          description: This the detailed message that fully defines what the event was and any supporting infortmaion.
          required: true
          schema:
            type: string
        - in: query
          name: request
          description: The input information provided before the event.
          required: false
          schema:
            type: string
        - in: query
          name: response
          description: The returned information provided after the event.
          required: false
          schema:
            type: string
        - in: query
          name: objectID
          description: The ID of the object of the event.
          required: false
          example: 123456         
          schema:
            type: string
        - in: query
          name: objectName
          description: The description of the ID of the event.
          required: false
          example: Service request number
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
          description: Event created successfully.
          
  #News excerpts
  /news/excerpts:
    get:
      tags:
        - News
      summary: Get news excerpts.
      operationId: getNewsExcerpts
      description: |
        By passing in the appropriate options, you can retrieve all the excerpt information.
      parameters:
        - in: query
          name: category
          description: The category code of news
          required: true
          schema:
            type: string
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: The page to return. Must be a positive number. Default is 1.
          required: false
        - in: query
          name : pageSize
          schema:
            type: integer
          description: The number of results.Must be a positive number. Min 1 max 100. Default 10.
          required: false
      responses:
        '200':
          description: Article excerpt(s) successfully retreived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/excerpts'
        '400':
          description: bad input parameter
        '404':
          description: The excepts cannot be found.
         
  #News artical
  /news/articles:
    get:
      tags:
        - News
      summary: Get an individule article or many article.
      operationId: getArticles
      description: |
        By passing in the appropriate options, you can retrieve the full information about the article.
      parameters:
        - in: query
          name: category
          description: The category code of news
          required: true
          schema:
            type: string
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: The page to return. Must be a positive number. Default is 1.
          required: false
        - in: query
          name : pageSize
          schema:
            type: integer
          description: The number of results.Must be a positive number. Min 1 max 100. Default 10.
          required: false
      responses:
        '200':
          description: Article(s) successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles'
        '400':
          description: bad input parameter
        '404':
          description: The articles cannot be found with the article number supplied.
          
  #News excerpt
  /news/excerpt/{articleNumber}:
    get:
      tags:
        - News
      summary: Get news excerpts.
      operationId: getNewsExcerpt
      description: |
        By passing in the appropriate options, you can retrieve an individule excerpt.
      parameters:
        - in: path
          name: articleNumber
          description: The artical number of the exceprpt.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Article excerpt successfully retreived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/excerpts'
        '400':
          description: bad input parameter
        '404':
          description: The except cannot be found with the article number supplied.
          
   #News artical
  /news/article/{articleNumber}:
    get:
      tags:
        - News
      summary: Get an individule news article.
      operationId: getArticle
      description: |
        By passing in the appropriate options, you can retrieve the full information about the article.
      parameters:
        - in: path
          name: articleNumber
          description: The artical number of the article.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Article successfully retreived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles'
        '400':
          description: bad input parameter
        '404':
          description: The article cannot be found with the article number  supplied.
    put:
      tags:
        - News
      summary: Update article.
      operationId: updateArticle
      description: |
        By passing in the appropriate options, you can retrieve an individule excerpt.
      parameters:
        - in: path
          name: articleNumber
          description: The artical number of the article.
          required: true
          schema:
            type: number  
        - in: query
          name: version
          description: The version of the article.
          required: false
          schema:
            type: number
        - in: query
          name: title
          description: The title of the article.
          required: false
          schema:
            type: string
        - in: query
          name: subTitle
          description: The subTitle of the article.
          required: false
          schema:
            type: string
        - in: query
          name: introduction
          description: The introduction of the article.
          required: false
          schema:
            type: string
        - in: query
          name: language
          description: The language of the article.
          required: false
          schema:
            type: string
        - in: query
          name: layout
          description: The layout of the article.
          required: false
          schema:
            type: string
        - in: query
          name: excerpt
          description: The excerpt of the article.
          required: false
          schema:
            type: string
        - in: query
          name: thumbnail
          description: The thumbnail of the article.
          required: false
          schema:
            type: string
        - in: query
          name: style
          description: The style of the article.
          required: false
          schema:
            type: string
        - in: query
          name: author
          description: The author of the article.
          required: false
          schema:
            type: string
        - in: query
          name: personNumber
          description: The personNumber of the article.
          required: false
          schema:
            type: number
        - in: query
          name: body
          description: The body of the article.
          required: false
          schema:
            type: string
        - in: query
          name: keyWords
          description: The keyWords of the article.
          required: false
          schema:
            type: string
        - in: query
          name: categoryCode
          description: The categoryCode of the article.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: News Article created/updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameters
        '404':
          description: The article cannot be found with the article number supplied.
    delete:
      tags:
        - News
      summary: Delete article.
      operationId: deleteArticle
      description: |
        By passing in the appropriate options, you can delete an individule article.
      parameters:
        - in: path
          name: articleNumber
          description: The artical number.
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Article successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameter
        '404':
          description: The article cannot be found with the article number supplied.           
  #News Article
  /news/article:
    post:
      tags:
        - News
      summary: Create article.
      operationId: createArticle
      description: |
        By passing in the appropriate options, you can retrieve an individule excerpt.
      requestBody:
        description: Request body for JSON input.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articlePayload'    
      responses:
        '200':
          description: News Article created/updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        '400':
          description: bad input parameters
        '404':
          description: The article cannot be found with the article number supplied.  

  #News article
  /news/search:
    get:
      tags:
        - News
      summary: Search for key words, excerpts, titles and sub titles for information.
      operationId: searchArticles
      description: |
        By passing in the appropriate options, you can search and retrieve a list of artical numbers.
      parameters:
        - in: query
          name: searchCriteria
          description: The criteria to use when searching articals.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The search criteria is successfully consumed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articleNumbers'
        '400':
          description: Bad input parameter.
        '404':
          description: No articles can be found with the search criteria  supplied.    
          
          
components:
  schemas:
    #result  
    result:
      type: object
      required:
        - message
        - id
        - result
      properties:
        message:
          type: string
          description: Information about the results returned.
          example: The code is High
        id:
          type: number
          description: The ID for the object returned, this is a uuid value.
          example: 61310
        code:
          type: string
          description: The code for the object returned.
          example: 'HIGH'
        result:
          type: boolean
          description: 0 for failure, 1 for succsess.
          example: 1

    #################################################
    ## Objects                                    ###
    ## - Service requests                         ###  
    ## - Contracts                                ### 
    ## - Tasks                                    ### 
    ## - Notes                                    ###  
    #################################################

    #################################################    
    ## - Service requests                         ###
    #################################################    
    
    #articles            
    articles:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/article' 
        pages:
          type: object
          properties:
            number:
              type: integer
              description: The index of the first result included within the response, within the total results
            size:
              type: integer
              description: The number of results per page. Equivalent to the page limit
            total:
              type: integer
              description: Total number of pages for the given page limit
            previous:
              type: string
              description: URL of the previous page
            next:
              type: string
              description: URL of the next page            
    #articlePayload
    articlePayload:
      type: object
      required:
        - version
        - categoryCode
        - title
        - language
        - excerpt
        - author
        - personNumber
        - body
      properties:
        version:
          description: The version number of the artical.
          maxLength: 10
          type: number
        title: 
          description: The title of the artical. This is the headline above header image.
          maxLength: 200
          type: string
        subTitle: 
          description: The sub title of the artical. This is the sub headline above header image and below the title.
          maxLength: 200
          type: string
        introduction:
          description: The introduction is the first paragraph below the image.
          maxLength: 500
          type: string       
        language:
          description: The language of the artical.
          maxLength: 2
          type: string
        layout:
          type: string
          enum: ['1 Column','2 Columns','3 Columns']
        excerpt:
          description: A small overview or synopsys for the artical.
          maxLength: 300
          type: string
        thumbnail:
          description: a url for the except image.
          maxLength: 300
          type: string
        style:
          type: string
          enum: ['Bold','Modern','Classic']
        author:
          description: The person who wrote the artical, their first and last name.
          maxLength: 100
          type: string 
        personNumber:
          description: The person number who wrote the artical.
          maxLength: 100
          type: string          
        body:
          description: The person who wrote the artical, their first and last name.
          maxLength: 10000
          type: string  
        keyWords:
          description: A list of key words that are associated with this article.
          maxLength: 300
          type: string 
          
    #article
    article:
      type: object
      properties:
        number:
          description: The artical identifier number, if you are post a new article then this value is not required.
          maxLength: 10
          type: number
        version:
          description: The version number of the artical.
          maxLength: 10
          type: number
        title: 
          description: The title of the artical. This is the headline above header image.
          maxLength: 200
          type: string
        subTitle: 
          description: The sub title of the artical. This is the sub headline above header image and below the title.
          maxLength: 200
          type: string
        introduction:
          description: The introduction is the first paragraph below the image.
          maxLength: 500
          type: string       
        language:
          description: The language of the artical.
          maxLength: 2
          type: string
        layout:
          type: string
          enum: ['1 Column','2 Columns','3 Columns']
        excerpt:
          description: A small overview or synopsys for the artical.
          maxLength: 300
          type: string
        thumbnail:
          description: a url for the except image.
          maxLength: 300
          type: string
        style:
          type: string
          enum: ['Bold','Modern','Classic']
        author:
          description: The person who wrote the artical, their first and last name.
          maxLength: 100
          type: string 
        personNumber:
          description: The person number who wrote the artical.
          maxLength: 100
          type: string          
        body:
          description: The person who wrote the artical, their first and last name.
          maxLength: 10000
          type: string  
        keyWords:
          description: A list of key words that are associated with this article.
          maxLength: 300
          type: string 
          
    #excerpts            
    excerpts:
      type: object
      properties:
        excerpts:
          type: array
          items:
            $ref: '#/components/schemas/excerpt' 
        pages:
          type: object
          properties:
            number:
              type: integer
              description: The index of the first result included within the response, within the total results
            size:
              type: integer
              description: The number of results per page. Equivalent to the page limit
            total:
              type: integer
              description: Total number of pages for the given page limit
            previous:
              type: string
              description: URL of the previous page
            next:
              type: string
              description: URL of the next page 
              
    #excerpt
    excerpt:
      type: object
      properties:
        number:
          description: The artical identifier number.
          maxLength: 10
          type: number
        version:
          description: The version number of the artical.
          maxLength: 10
          type: number
        title: 
          description: The title of the artical. This is the headline above header image.
          maxLength: 200
          type: string
        subTitle: 
          description: The sub title of the artical. This is the sub headline above header image and below the title.
          maxLength: 200
          type: string
        language:
          description: The language of the artical.
          maxLength: 2
          type: string
        excerpt:
          description: A small overview or synopsys for the artical.
          maxLength: 300
          type: string
        thumbnail:
          description: a url for the except image.
          maxLength: 300
          type: string
        style:
          type: string
          enum: ['Bold','Modern','Classic']
          
    #articleNumbers
    articleNumbers:
      type: object
      properties:
        articleNumbers:
          type: array
          items:
            $ref: '#/components/schemas/articleNumber'
          
    #articleNumber
    articleNumber:
      type: object
      properties:
        number:
          description: The artical identifier number.
          maxLength: 15
          type: number
          
    #personNotePayload
    personNotePayload:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        content:
          type: string
        notify:
          type: string
        creationDate:
          type: string
        allowDuplicate:
          type: string
          
    #serviceRequestNotesPayload
    serviceRequestNotesPayload:
      type: object
      properties:
        userNumber:
          type: number
        otherSystemCode:
          type: string
        otherSytemUserID:
          type: string
        type:
          type: string
        title:
          type: string
        content:
          type: string
        notify:
          type: string
        creationDate:
          type: string
        allowDuplicate:
          type: string
        
    
    #serviceRequestPayload
    serviceRequestPayload:
      type: object
      properties:
        serviceRequest:
          type: object
          properties:
            number:
              type: number
            personNumber:
              type: number
            device:
              type: string              
            occuranceDate:
              type: string
              format: 'DD-MON-YYYY HH24:MM:SS' 
            submissionDate: 
              type: string
              format: 'DD-MON-YYYY HH24:MM:SS' 
            closedDate:
              type: string
              format: 'DD-MON-YYYY HH24:MM:SS'   
            languageCode:
              type: string              
            catalogue:
              type: object
              properties:
                code: 
                  type: string

            form:
              type: object
              properties:
                code: 
                  type: string
            priority:
              type: string
            location:
              $ref: '#/components/schemas/location'
            status:
              type: string
            xReferences:
              $ref: '#/components/schemas/xReference'
            
    
    #serviceRequests        
    serviceRequests:
      type: object
      properties:
        serviceRequests:
          type: array
          items:
            $ref: '#/components/schemas/serviceRequest'
        pages:
          type: object
          properties:
            number:
              type: integer
              description: The index of the first result included within the response, within the total results
            size:
              type: integer
              description: The number of results per page. Equivalent to the page limit
            total:
              type: integer
              description: Total number of pages for the given page limit
            previous:
              type: string
              description: URL of the previous page
            next:
              type: string
              description: URL of the next page
        message: 
          type: string
          example: 'Service request successfully retrieved'
        webServiceId:
          type: number
          example: '5423315'
    
    
            
    #serviceRequest             
    serviceRequest:
      type: object
      properties:
        serviceRequest:
          type: object
          properties:
            number:
              type: number
            userID:
              type: string 
            device:
              type: string              
            occuranceDate:
              type: string
              format: 'DD-MON-YYYY HH24:MM:SS' 
            submissionDate: 
              type: string
              format: 'DD-MON-YYYY HH24:MM:SS' 
            closedDate:
              type: string
              format: 'DD-MON-YYYY HH24:MM:SS'   
            languageCode:
              type: string              
            catalogue:
              type: object
              properties:
                type: 
                  type: string
                  xml: 
                    attribute: true
                name: 
                  type: string
                  xml: 
                    attribute: true
                code: 
                  type: string
                  xml: 
                    attribute: true
                definition: 
                  type: string
                  xml: 
                    attribute: true

            form:
              type: object
              properties:
                type: 
                  type: string
                  xml: 
                    attribute: true
                name: 
                  type: string
                  xml: 
                    attribute: true
                code: 
                  type: string
                  xml: 
                    attribute: true
                definition: 
                  type: string
                  xml: 
                    attribute: true
            priority:
              type: string
            attachments:
              type: array
              items:
                $ref: '#/components/schemas/attachment'
            location:
              type: array
              items:
                $ref: '#/components/schemas/location'
            status:
              type: string
            questionnaire:
              type: array
              items:
                $ref: '#/components/schemas/question'
            xReferences:
              type: array
              items:
                $ref: '#/components/schemas/xReference'
            integration:
              type: array
              items:
                $ref: '#/components/schemas/integration'

    #serviceRequestSummaries        
    serviceRequestSummaries:
      type: object
      properties:
        serviceRequests:
          type: array
          items:
            $ref: '#/components/schemas/serviceRequestSummary'
        message:
          type: string
          example: 'Service request summary successfully retrieved.'
        webServiceId:
          type: number
          example: '5423315'
            
    #serviceRequestSummary           
    serviceRequestSummary:
      type: object
      properties:
        serviceRequest:
          type: object
          properties:
            Number:
              type: number
            submissionDate:
              type: string 
            languageCode:
              type: string
            catelogueName:
              type: string  
            catelogueCode:
              type: string               
            formName:
              type: string  
            formCode:
              type: string 
            priorityName:
              type: string
            priorityCode:
              type: string              
            status:
               $ref: '#/components/schemas/statusObject'
            updatedBy:
              type: string  
            updatedDate:
              type: string
              format: 'DD:MON:YYYY HH24:MM:SS'              
            xReferences:
              type: array
              items:
                $ref: '#/components/schemas/xReference'
    
    #serviceRequestStatuses:
    statuses:
      type: object
      properties:
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/status'
        message:
          type: string
          example: 'Service request status retrieved successfully'
        webServiceId:
          type: number
          example: '5423316'
            
    status:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusObject'
                  
    #serviceRequestStatus             
    statusObject:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
        description:
          type: string
        type:
          type: string
              
    #################################################
    ## - Contracts                                ###       
    #################################################
    
    #contracts            
    contracts:
      type: object
      properties:
        Contracts:
          type: array
          items:
            $ref: '#/components/schemas/contract'
            
    #contract             
    contract:
      type: object
      properties:
        contractId:
          type: number
        reference:
          type: string
        status:
          type: string
        statusCode:
          type: string
        contractType:
          type: string
        contractSubType:
          type: string
          
    #contractDetails           
    contractDetails:
      type : object
      properties:
        contractDetails:
          type: object
          properties:
            number:
              type: number
            template:
              type: string
            startDate:
              type: string
              format: 'DD:MON:YYYY H24:MM:SS'
            endDate:
              type: string
              format: 'DD:MON:YYYY H24:MM:SS'
            period:
              type: string
            status:
              type: string
            statusCode:
              type: string
            description:
              type: string
            creationDate:
              type: string
              format: 'DD:MON:YYYY HH24:MM:SS'
            reference:
              type: string
            integrated:
              type: string
            terminationReason:
              type: string  
            terminationReasonCode:
              type: string               
            cancellationReason:
              type: string    
            cancellationReasonCode:
              type: string               
            people:
              type: array
              items:
                $ref: '#/components/schemas/person'
            organisations:
              type: array
              items:
                $ref: '#/components/schemas/organisation'
            assets:
              type: array
              items:
                $ref: '#/components/schemas/asset'
            locations:
              type: array
              items:
                $ref: '#/components/schemas/location'
            contractItems:
              type: object
              properties:
                contracts:
                  type: array
                  items:
                    $ref: '#/components/schemas/contractItem'  
            informationItems:
              type: object
              properties:
                information:
                  type: array
                  items:
                    $ref: '#/components/schemas/informationItem' 
    
    #ContractItems        
    contractItem:
      type: object
      properties:
        period:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        price:
          type: string
        quantity:
          type: number
        unit:
          type: string
        totalAmount:
          type: number

    #################################################
    ## - Tasks                                    ###
    #################################################
          
    #tasks       
    tasks:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/task'
        message:
          type: string
          example: 'Tasks retrieved successfully'
        webServiceId:
          type: number
          example: '5423316'
            
    #task     
    task:
      type: object
      properties:
        task:
          type: object
          properties:
            number:
              type: number
            serviceRequestNumber:
              type: number
            personNumber:
              type: number
            subject:
              type: string
            description:
              type: string
            action:
              type: string
            statusCode:
              type: string
            priorityCode:
              type: string
            ownerNumber:
              type: number
            contributors:
              type: array
              items:
                $ref: '#/components/schemas/contributor'
            percentageComplete:
              type: string
            plannedStart:
              type: string
              format: 'DD:MON:YYYY HH24:MM:SS'
            plannedFinish:
              type: string
              format: 'DD:MON:YYYY HH24:MM:SS'
            scheduledStart:
              type: string
              format: 'DD:MON:YYYY HH24:MM:SS'
            scheduledFinish:
              type: string
              format: 'DD:MON:YYYY HH24:MM:SS'
            actualStart:
              type: string
              format: 'DD:MON:YYYY HH24:MM:SS'
            actualFinish:
              type: string
              format: 'DD:MON:YYYY HH24:MM:SS'
            contacts:
              type: array
              items:
                $ref: '#/components/schemas/contacts'
            locations:
              type: array
              items:
                $ref: '#/components/schemas/locations'
            createdBy:
              type: string
            creationDate:
              type: string
              format: 'DD:MON:YYYY HH24:MM:SS'
            updatedBy:
              type: string
            updatedDate:
              type: string
              format: 'DD:MON:YYYY HH24:MM:SS'
     
    #taskProgress          
    taskProgress:
      type: object
      properties:
        taskProgress:
          type: object
          properties:
            progress:
              type: number
        message:
          type: string
          example: 'Service request status retrieved successfully'
        webServiceId:
          type: number
          example: '5423316'
            
    #contributor     
    contributor:
      type: object
      properties:
        contributor:
          type: object
          properties:
            personNumber:
              type: number
            personEmail:
              type: string
            
    #taskSummary     
    taskSummary:
      type: object
      properties:
        taskSummary:
          type: object
          properties:
            task:
              type: object
              properties:
                taskNumber:
                  type: number
                subject:
                  type: string
                description:
                  type: string
                action:
                  type: string
                statusCode:
                  type: string
                priorityCode:
                  type: string
                ownerNumber:
                  type: number
                scheduledStart:
                  type: string
                  format: 'DD:MON:YYYY HH24:MM:SS'
                scheduledFinish:
                  type: string
                  format: 'DD:MON:YYYY HH24:MM:SS'
                actualStart:
                  type: string
                  format: 'DD:MON:YYYY HH24:MM:SS'
                actualFinish:
                  type: string
                  format: 'DD:MON:YYYY HH24:MM:SS'
                locations:
                  type: array
                  items:
                    $ref: '#/components/schemas/location'
             
    #################################################
    ## - Notes                                    ###    
    #################################################    
    #notes               
    notes:
      type: object
      properties:
        notes:
          type: array
          items:
            $ref: '#/components/schemas/note'
        message:
          type: string
          example: 'Notes retrieved successfully'
        webServiceId:
          type: number
          example: '5423316'

    #note
    note:
      type: object
      properties:
        note:
          type: object
          properties:
            type:
              type: string
            noteID:
              type: number
            objectID:
              type: number
            object:
              type: string
            userID:
              type: number
            title:
              type: string
            content:
              type: string
            creationDate:
              type: string
              format: 'DD-MON-YYYY HH24:MM:SS'
          
    #################################################
    ## - Waste                                    ###    
    #################################################    

    #wasteSchedules               
    wasteSchedules:
      type: object
      properties:
        wasteSchedules:
          type: array
          items:
            $ref: '#/components/schemas/wasteSchedule'
            
    wasteSchedule:
      type: object
      properties:
        number:
          type: number     
        type:
          type: string
        start:
          type: string
          format: 'DD-MON-YYYY'
        end:
          type: string
          format: 'DD-MON-YYYY'
        assisted:
          type: string
          enum: ['YES','NO'] 
        enabled:
          type: string
          enum: ['YES','NO'] 
        round:
          type: string
        frequency:
          type: number
        day:
          type: string
          enum: ['SUNDAY','MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY']        
        containers:
          type: array
          items:
            $ref: '#/components/schemas/container'
        collectionTasks:
          type: array
          items:
            $ref: '#/components/schemas/collectionTask'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/note'
        location:
          type: object
          items:
            $ref: '#/components/schemas/location'    
            
    #wasteExceptions               
    wasteExceptions:
      type: object
      properties:
        wasteExceptions:
          type: array
          items:
            $ref: '#/components/schemas/wasteException'
            
    wasteException:
      type: object
      properties:
        exceptionDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        alternativeDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        description:
          type: string
        exceptionOn:
          type: string
          enum: [COLLECTION,ROUND]
        collections:
          type: array
          items: {
            "type": "string"
        }
        rounds:
          type: array
          items: {
          "type": "string"
        }              
            
    #container             
    container:
      type: object
      properties:
        container:
          type: object
          properties:
            type:
              type: string
            number:
              type: number
            capacity:
              type: string
            unit:
              type: string    
            start:
              type: string  
            end:
              type: string 
            description:
              type: string       
              
    #collectionTasks        
    collectionTasks:
      type: object
      properties:
        collectionTasks:
          type: array
          items:
            $ref: '#/components/schemas/collectionTask'
            
    #collectionTasks             
    collectionTask:
      type: object
      properties:
        collectionTask:
          type: object
          properties:
            number:
              type: number
            type:
              type: string
            subject:
              type: string
            status:
               type: string  
            start:
              type: string 
            end:
              type: string      
              
    #################################################
    ## Contact types                              ###
    ## - Phones                                   ###  
    ## - Email                                    ### 
    ## - Links                                    ###
    ## - socialMedia                              ###     
    #################################################  
    
  
    #phone
    phone:
      type: object
      properties:
        type:
          type: string
        countryCode:
          type: string
          maxLength: 4
        areaCode:
          type: string
          maxLength: 6
        number:
          type: number
        purpose:
          type: string
          maxLength: 50
        active:
          type: string
          enum: ['YES','NO']


    #email            
    email:
      type: object
      properties:
        email:
          type: string
          pattern: '^\S+\@\S+'
        purpose:
          type: string
        active:
          type: string
          enum: ['YES','NO']

            
    #link  
    link:
      type: object
      properties:
        title:
          type: string
        url:
          type: string
        purpose:
          type: string
        active:
          type: string
          enum: ['YES','NO']
            
    #socialMedias         
    socialMedias:
      type: object
      properties:
        type: 
          type: string
        details:
          type: string
        purpose:
          type: string
        active:
          type: string
          enum: ['YES','NO']
            
    #################################################
    ## Master data management                     ###   
    ## - People                                   ###
    ## - Assets                                   ###
    ## - Locations                                ###
    ## - Organisations                            ###
    ## - Products                                 ###
    #################################################    
    
    ################################################# 
    ## People                                   ###
    #################################################
    
    #personPayload
    personPayload:
      type: object
      properties:
        number:
          type: number
        userName:
          type: string
        title:
          type: string
        firstName:
          type: string
          maxLength: 100
        lastName:
          type: string
          maxLength: 100
        middleName:
          type: string
          maxLength: 100
        prefferedName:
          type: string
          maxLength: 100
        dateOfBirth:
          type: string
          format: date
          example: '14-APR-1980'
          description: Date of birth format should be DD-MON-YYYY
        customerType:
          type: string 
        taxIdentifer:
          type: string   
        gender:
          type: string
          description: 'Example MALE, FEMALE, UNSPECIFIED.'
          maxLength: 11
          example: 'MALE'
        link:
          $ref: '#/components/schemas/link'
        phone:
          $ref: '#/components/schemas/phone'
        email:
          $ref: '#/components/schemas/email'
        socialMedia:
          $ref: '#/components/schemas/socialMedias'
        roles:
          $ref: '#/components/schemas/roles'
        address:
          $ref: '#/components/schemas/location'
        xReferences:
          $ref: '#/components/schemas/xReference'
        photoUrl:
          type: string
        photoThumbUrl:
          type: string
        createdBy:
          type: string
        creationDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        updatedBy:
          type: string
        updatedDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        photo:
          type: string
    
    people:
      type: object
      properties:
        person:
          type: array
          items:
            $ref: '#/components/schemas/person'
    
    #person  
    person:
      type: object
      properties:
        number:
          type: number
        userName:
          type: string
        title:
          type: string
        firstName:
          type: string
          maxLength: 100
        lastName:
          type: string
          maxLength: 100
        middleName:
          type: string
          maxLength: 100
        prefferedName:
          type: string
          maxLength: 100
        dateOfBirth:
          type: string
          format: date
          example: '14-APR-1980'
          description: Date of birth format should be DD-MON-YYYY
        customerType:
          type: string 
        taxIdentifer:
          type: string   
        gender:
          type: string
          description: 'Example MALE, FEMALE, UNSPECIFIED.'
          maxLength: 11
          example: 'MALE'
        link:
          type: array
          items:
            $ref: '#/components/schemas/link'
        phone:
          type: array
          items:
            $ref: '#/components/schemas/phone'
        email:
          type: array
          items:
            $ref: '#/components/schemas/email'
        socialMedia:
          type: array
          items:
            $ref: '#/components/schemas/socialMedias'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/roles'
        address:
          type: array
          items:
            $ref: '#/components/schemas/location'
        xReferences:
          type: array
          items:
            $ref: '#/components/schemas/xReference'
        photoUrl:
          type: string
        photoThumbUrl:
          type: string
        createdBy:
          type: string
        creationDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        updatedBy:
          type: string
        updatedDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        photo:
          type: string
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/organisationSummary'
            
            
    #organisationSummary              
    organisationSummary:
      type: object
      properties:
        number:
          type: number
        name:
          type: string
        companyNumber:
          type: string
        taxNumber:
          type: string
        structure:
          type: string

    ################################################# 
    ## Assets                                     ###
    #################################################
    #assets  
    assets :
      type: object
      properties:
        asset:
          type: array
          items:
            $ref: '#/components/schemas/asset'
            
    #asset  
    asset:
      type: object
      properties:
        categoryCode:
          type: string
        subCategoryCode:
          type: string 
        furtherCategoryCode:
          type: string
        name:
          type: string
        status:
          type: array
          items:
            $ref: '#/components/schemas/status'
        enabled:
          type: boolean
        erp:
          type: string
        creationDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        checkedDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        expirationDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        description:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/roles'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/notes'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/locations'
        xReference:
          type: array
          items:
            $ref: '#/components/schemas/xReference'

    ################################################# 
    ## Locations                                  ###
    #################################################          
    locations:
      type: object
      properties:
        location:
          type: array
          items:
            $ref: '#/components/schemas/location'
            
    #Location  
    location:
      type: object
      description: Address1, postcode, city, country are compulsory and pass Lat/Long or East/North alternatively to location.Also location can be added based on UPRN only.
      properties:
        address1:
          type: string
          description: Address1
        address2:
          type: string 
        address3:
          type: string
        city:
          type: string
        postcode:
          type: string
        region:
          type: string
        state:
          type: string
        country:
          type: string
        latitude:
          type: string
        longitude:
          type: string
        easting:
          type: string
        northing: 
          type: string
        uprn:
          type: string
        usrn:
          type: string
        lpiKey:
          type: string
        fullAddress:
          type: string
      required:
        - address1
        - city
        - postcode
        - country

    ################################################# 
    ## organisations                              ###
    #################################################    
    
    #organisationPayload
    organisationPayload:
      type: object
      properties:
        number:
          type: number
        name:
          type: string
        companyNumber:
          type: string
        taxNumber:
          type: string
        structure:
          type: string
        createdBy:
          type: string
        creationDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        updatedBy:
          type: string
        updatedDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        contacts:
          type: object
          properties:
            relationship:
                type: string
            personNumber:
                type: string
        link:
          $ref: '#/components/schemas/link'
        phone:
          $ref: '#/components/schemas/phone'
        email:
          $ref: '#/components/schemas/email'
        socialMedia:
          $ref: '#/components/schemas/socialMedias'
        address:
          $ref: '#/components/schemas/location'
    
    organisations:
      type: object
      properties:
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/organisation'
            
    #organisation              
    organisation:
      type: object
      properties:
        number:
          type: number
        name:
          type: string
        companyNumber:
          type: string
        taxNumber:
          type: string
        structure:
          type: string
        createdBy:
          type: string
        creationDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        updatedBy:
          type: string
        updatedDate:
          type: string
          format: 'DD-MON-YYYY HH24:MM:SS'
        contacts:
          type: object
          properties:
            relationship:
                type: string
            personNumber:
                type: string
        link:
          type: array
          items:
            $ref: '#/components/schemas/link'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/phone'
        email:
          type: array
          items:
            $ref: '#/components/schemas/email'
        socialMedia:
          type: array
          items:
            $ref: '#/components/schemas/socialMedias'
        address:
          type: array
          items:
            $ref: '#/components/schemas/location'
            
    #uprns
    uprns:
      type: object
      properties:
        uprns:
          type: array
          items:
            $ref: '#/components/schemas/uprn'
            
    #uprn
    uprn:
      type: object
      properties:
        uprn:
          type: string

    ################################################# 
    ## products                                   ###
    #################################################              
    products:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/product'
     
    #product    
    product:
      type: object
      properties:
        productID:
          type: number
        productType:
          type: string
        category:
          type: string
        subCategory:
          type: string
        name:
          type: string
        code:
          type: string
        erpCode:
          type: string
        alias:
          type: string
        fullName:
          type: string
        status:
          type: string
        phase:
          type: string
        price:
          type: number
        stock:
          type: number
        description:
          type: string
        enabled:
          type: string
        xReference:
          type: array
          items:
            $ref: '#/components/schemas/xReference'
          
    #productPrice
    productPrice:
      type: object
      properties:
        product:
          type: array
          items:
            $ref: '#/components/schemas/price'
            
    #price
    price:
      type: object
      properties:
        price:
          type: string
            
    #################################################
    ## Transaction data                           ###  
    ## - contracts                                ### 
    #################################################  
    
    #contacts
    contacts:
      type: object
      properties:
        contact:
          type: array
          items:
            $ref: '#/components/schemas/contact'

    #contact
    contact:
      type: object
      properties:
        personName:
          type: number
        personID:
          type: string
        organisationName:
          type: string
        organisationID:
          type: string
        role:
          type: string
          
    #attachmentPayload
    attachmentPayload:
      type: object
      required:
        - serviceRequestNumber
        - url
      properties:
        serviceRequestNumber:
          type: number
          description: The servicerequestNumber for which the evidence is to be added.
          example: '823163'
        url:
          type: string
          description: Allows to store Evidence by providing File URL.
          example: 'http://iweb.itv.com/i/MCS/files/2014/02/03/F17c.png'
        fileName:
          type: string
          description: Allows to store Evidence by providing File Name.
          example: 'F17CE69F13B883_sample.png' 
        mimeType:
          type: string
          description: Allows to store Evidence by providing Mime type.
          example: 'images/jpg'
        documentTypeName:
          type: string
          description: Once the attachement is uploaded, the retention policy will be defined by the document type name.
          example: 'Passport Renewal'
        documentTypeCode:
          type: string
          description: Once the attachement is uploaded, the retention policy will be defined by the document type code.
          example: 'Passport_Renewal'

    #attachments
    attachments:
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/attachment'
        message:
          type: string
          example: 'Evidences retrieved successfully'
        webServiceId:
          type: number
          example: '5423316'
        
    #attachment                
    attachment:
      type: object
      properties:
        attachment:
          type: object
          properties:
            name: 
              type: string
              xml: 
                attribute: true
            mimeType: 
              type: string
              xml: 
                attribute: true
            url:
              type: string
              xml: 
                attribute: true  
            base64:
              type: string
              xml: 
                attribute: true    
            fileExtension:
              type: string
              xml: 
                attribute: true 

    #informationItem           
    informationItem:
      type: object
      properties:
        question:
          example: What would you like?
          type: string
        questionCode:
            example: QUESTION_KEY1
            type: string
            xml:
              attribute: true
        answer:
          example: Everything            
          type: string
        answerCode:
          example: ANSWER_KEY1            
          type: string
          xml:
            attribute: true
                  
    #questionnaire         
    questionnaire:
      type: object
      properties:
        questionnaire:
          type: array
          items:
            $ref: '#/components/schemas/question'
        message:
          type: string
          example: 'Questionnaires retrieved successfully'
        webServiceId:
          type: number
          example: '5423316'

    #question           
    question:
      type: object
      properties:
        questions:
          type: object
          properties:
            question:
              example: What would you like?
              type: string
            questionCode:
              example: QUESTION1
              type: string
              xml:
                attribute: true
            questionAttributes:
              type: array
              items:
                $ref: '#/components/schemas/attribute'
            answer:
              example: Everything            
              type: string
            answerCode:
              example: ANSWER1            
              type: string
              xml:
                attribute: true
            answerAttributes:
              type: array
              items:
                $ref: '#/components/schemas/attribute'

    #quotes         
    quotes:
      type: object
      properties:
        quotes:
          type: array
          items:
            $ref: '#/components/schemas/quote'
            
    #quote
    quote:
      type: object
      properties:
        quote_id:
          type: number
        quote_reference:
          type: string
        quote_type: 
          type: string
        creationDate:
          type: string
          format: 'DD:MON:YYYY'
        expiryDate:
          type: string
          format: 'DD:MON:YYYY'
        status:
          type: string
        organisation:
          type: string
        currency:
          type: string
        total:
          type: number
        description:
          type: string
          
    #outcomes
    outcomes:
      type: object
      properties:
        outcomes:
          type: array
          items:
            $ref: '#/components/schemas/outcome'
        message:
          type: string
          example: 'Outcomes successfully retrieved.'
        webServiceId:
          type: number
          example: '5423316'
            
    #outcome
    outcome:
      type: object
      properties:
        outcome:
          type: object
          properties:
            activity:
              type: string
            outcome:
              type: string
            result:
              type: string
            area:
              type: string
    
    #bookings
    bookings:
      type: object
      properties:
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/booking'
            
    #booking
    booking:
      type: object
      properties:
        reference:
          type: number
        date:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        facility:
          type: string
        slots:
          type: number
        paid:
          type: string
        bookedOn:
          type: string
        bookedBy:
          type: string
        email: 
          type: string
        name: 
          type: string
        mobile:
          type: number
        status:
          type: string
          
    #booking
    bookingWaste:
      type: object
      properties:
        name:          
          type: string
          example: Bulky waste collection day
        date:          
          type: string
          example: 18-Dec-2018 09:00 
        amount:          
          type: number
          example: 36.50          
        instruction:          
          type: string
          example: Collect via the back door.         
        items:          
          type: array
          items:
            $ref: '#/components/schemas/item'
        options:          
          type: array
          items:
            $ref: '#/components/schemas/option'

    #bookingOptions
    option:
      type: object
      properties:
        name:
          type: string
          example: Furniture
        cost:
          type: number
          example: 2.50
          
    #bookingWasteItems
    item:
      type: object
      properties:
        group:
          type: number
          example: Furniture
        name:
          type: string
          example: Arm chair
        weight:
          type: string
          example: 3
        cost:
          type: number
          example: 10.50    
        code:
          type: string
          example: EC.100.AA  
        code1:
          type: string
          example: 1001 
        code2:
          type: string
          example: ABBC123            
        code3:
          type: string
          example: 11  
        code4:
          type: string
          example: 1011.11            

    #priorities
    priorities:
      type: object
      properties:
        priorities:
          type: array
          items:
            $ref: '#/components/schemas/priority'
        message:
          type: string
          example: 'Service request priority retrieved successfully'
        webServiceId:
          type: number
          example: '5423316'
            
    #priority
    priority:
      type: object
      properties:
        priority:
          type: object
          properties:
            priorityCode:
              type: string
            priorityName:
              type: string
    
    #roles       
    roles:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/role'
            
    #role
    role:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        code:
          type: string
      required:
        - type
        - name
        - code
          
  #################################################    
  ## - Integration                              ###
  #################################################    
  
    #xReference             
    xReference:
      type: object
      properties:
        xReference:
          type: object
          properties:
            number:
              type: number
            object:
              type: string
              enum: [SERVICE,TASK,PRODUCT,CONTRACT,ASSET,PEOPLE,ORGANISATION]
            otherSystemCode:
              type: string
            otherSystemUserID:
              type: string
            otherSystemID:
              type: number
            otherSystemReference:
              type: string

    #attributes        
    attributes:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/attribute'
            
    #attribute             
    attribute:
      type: object
      properties:
        attribute:
          type: object
          properties:
            name:
              type: string
            value:
              type: string
              
    #integration        
    integration:
      type: object
      properties:
        client:
          type: array
          items:
            $ref: '#/components/schemas/attributes'
        category:
          type: array
          items:
            $ref: '#/components/schemas/attributes'