openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/clarkt/phabor/1.0.0
info:
  description: |
    When viewed in Swagger, by default, the left panel is the navigation shortcut,
    the center panel is the OpenAPI specification code (can be minimized by clicking "Hide Editor & Nav" 
    button on the left side bar), the right panel is the actual API documentation.
  version: "1.0.0"
  title: Phabor API
  termsOfService: 'http://www.phabor.com/terms/'
  contact:
    email: apiteam@phabor.com
  license:
    name: Proprietary
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Security
    description: Endpoints for security
  - name: Bid
    description: Endpoints for bids
  - name: Order
    description: Endpoints for orders
paths:
  /cmd/googlelogin:
    post:
      tags:
        - Security
      summary: Authentication using a Google account
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    description: Phabor User Id of successfully authenticated Google account
                    type: integer
                    format: int64
                    example: 1234
        '400':
          description: Error in request
          content:
            text/plain:
              example: Error in request
        '401':
          description: Token verification failed
        '500':
          $ref: '#/components/responses/500-Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  description: Token received from Google Auth window. This will be exchanged for an access token by our back-end server.
                  type: string
  /cmd/bid:
    post:
      tags:
        - Bid
      summary: Create a new bid
      parameters:
        - $ref: '#/components/parameters/TokenID'
        - $ref: '#/components/parameters/UserID'
      responses:
        '204':
          $ref: '#/components/responses/204-Created'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BidRequest'
  /qry/bids:
    get:
      tags:
        - Bid
      summary: Find bids by user ID
      parameters:
        - $ref: '#/components/parameters/TokenID'
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: Successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BidResponse'
        '403':
          $ref: '#/components/responses/403-Unauthorized'
        '500':
          $ref: '#/components/responses/500-Error'
  /qry/bidsonorder:
    get:
      tags:
        - Bid
      summary: Find bids by order ID
      parameters:
        - $ref: '#/components/parameters/OrderID'
        - $ref: '#/components/parameters/TokenID'
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: Successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BidResponse'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Unauthorized'
        '500':
          $ref: '#/components/responses/500-Error'
  /cmd/order:
    post:
      tags:
        - Order
      summary: Create a new order
      parameters:
        - $ref: '#/components/parameters/TokenID'
        - $ref: '#/components/parameters/UserID'
      responses:
        '204':
          $ref: '#/components/responses/204-Created'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Unauthorized'
        '500':
          $ref: '#/components/responses/500-Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
    delete:
      tags:
        - Order
      summary: 'Delete orders by user ID. TODO: delete by order ID.'
      parameters:
        - $ref: '#/components/parameters/TokenID'
        - $ref: '#/components/parameters/UserID'
      responses:
        '204':
          $ref: '#/components/responses/204-Deleted'
        '403':
          $ref: '#/components/responses/403-Unauthorized'
        '500':
          $ref: '#/components/responses/500-Error'
  /qry/order:
    get:
      tags:
        - Order
      summary: Find order by order ID
      parameters:
        - $ref: '#/components/parameters/OrderID'
        - $ref: '#/components/parameters/TokenID'
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: Successful query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
  /qry/orders:
    get:
      tags:
        - Order
      summary: Find orders by user ID
      parameters:
        - $ref: '#/components/parameters/TokenID'
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: Successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
  /qry/ordersbiddable:
    get:
      tags:
        - Order
      summary: Find orders that are biddable (status is open)
      parameters:
        - $ref: '#/components/parameters/TokenID'
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: Successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
components:
  parameters:
    OrderID:
      name: order_id
      in: header
      description: Order ID
      required: true
      schema:
        type: integer
        format: int64
    TokenID:
      name: token_id
      in: header
      description: Access token for authentication
      required: true
      schema:
        type: string
    UserID:
      name: user_id
      in: header
      description: User ID
      required: true
      schema:
        type: integer
        format: int64
  responses:
    200-Cors:
      description: Response with CORS information
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: "string"
        Access-Control-Allow-Methods:
          schema:
            type: "string"
        Access-Control-Allow-Headers:
          schema:
            type: "string"
    200-Ok:
      description: Successful response
    204-Created:
      description: Successfully created
    204-Deleted:
      description: Successfully deleted
    400-BadRequest:
      description: |
        Error in the request, can be due to:
        * Missing required properties, headers, body
        * Malformed properties, headers, body
    403-Unauthorized:
      description: Invalid authorization token
    500-Error:
      description: Server error
  schemas:
    BidRequest:
      type: object
      required:
        - orderId
        - bidAmount
        - deliveryMethod
        - notes
      properties:
        orderId:
          type: integer
          format: int64
          description: Order ID of the owner of this data
        bidAmount:
          type: number
          format: double
          description: Amount
        deliveryMethod:
          type: integer
          format: int32
          description: Method of delivery
        notes:
          type: string
          description: Notes
    BidResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Bid ID
        data_owner_id:
          type: integer
          format: int64
          description: User ID of the owner of this data
        created_datetime:
          type: string
          format: date
        created_by:
          type: integer
          format: int64
          description: User ID of the creator
        modified_datetime:
          type: string
          format: date
        modified_by:
          type: integer
          format: int64
          description: User ID of the modifier
        order_id:
          type: integer
          format: int64
          description: Order ID of the owner of this data
        bid_amount:
          type: number
          format: double
          description: Amount
        delivery_method:
          type: integer
          format: int32
          description: Method of delivery
        notes:
          type: string
          description: Notes
    OrderRequest:
      type: object
      required:
        - title
        - details
        - quantity
        - quantityUnitId
        - currency
        - deliveryAddressId
        - targetCountry
        - orderExpiryDate
        - preferredDeliveryDate
        - status
      properties:
        title:
          type: string
          description: Short description
        details:
          type: string
          description: Detailed description
        quantity:
          type: integer
          format: int32
        quantityUnitId:
          type: integer
          format: int32
        currency:
          type: string
          description: 'Three letter currency code, example: "PHP"'
        budgetMin:
          type: number
          format: double
        budgetMax:
          type: number
          format: double
        deliveryAddressId:
          type: integer
          format: int32
        targetCountry:
          type: string
          description: 'Two letter country code, example: "PH"'
        orderExpiryDate:
          type: string
          format: date
        preferredDeliveryDate:
          type: string
          format: date
        status:
          type: integer
          format: int32
          description: Order status, for list of values ([click here](https://phabor.atlassian.net/wiki/spaces/ORDERS/pages/7963161/Status+Codes))
    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        data_owner_id:
          type: integer
          format: int64
          description: User ID of the owner of this data
        title:
          type: string
          description: Short description
        description:
          type: string
          description: Detailed description
        quantity:
          type: integer
          format: int32
        quantity_unit_id:
          type: integer
          format: int32
        currency:
          type: string
          description: 'Three letter currency code, example: "PHP"'
        budget_min:
          type: number
          format: double
        budget_max:
          type: number
          format: double
        delivery_address_id:
          type: integer
          format: int32
        target_country:
          type: string
          description: 'Two letter country code, example: "PH"'
        created_datetime:
          type: string
          format: date
        expiry_date:
          type: string
          format: date
        preferred_delivery_date:
          type: string
          format: date
        status:
          type: integer
          format: int32
          description: Order status, for list of values ([click here](https://phabor.atlassian.net/wiki/spaces/ORDERS/pages/7963161/Status+Codes))
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
externalDocs:
  description: Find out more about Phabor
  url: 'http://www.phabor.com'
