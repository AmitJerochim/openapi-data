{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "1.0.3",
    "title" : "Samtrygg API Document",
    "description" : "<b>Samtrygg Introduction</b> <br/>Samtrygg is safest marketplace for housing rental in sweden. Samtrygg was founded in order to create better conditions in a dysfunctional market, and at the same time become a natural meeting place for people who want a safe and smooth sublease. Samtrygg provides a modern sublet market where landlords and tenants can enjoy a safe and smooth sublet period, at a price both parties can agree upon. Samtrygg’s model is effectively remedying the problems by giving landlords payment guarantee, sublet insurance and safe contracts. In addition, tenants do not have to pay the deposit or advance. We take active part in helping both parties following the rules connected to the sublease and act as financial intermediary in order to minimize the risk of fraud. <br/><br/> <b>Samtrygg API Document Introduction </b><br/> Samtrygg API Document provides information of all APIs belongs to Samtrygg Application. Samtrygg API document strictly follow open api specification. Open API Specification is an API description format for REST APIs. The ability of Samtrygg APIs to describe their own structure is the root of all awesomeness of this document. <br/><br/>Samtrygg API Document allows us to describe our each and every API detail description including <br/> - Available endpoints (/users) and operations on each endpoint (GET /users, POST /users) <br/> - Operation parameters Input and output for each operation <br/> - Authentication methods <br/> - Contact information, license, terms of use and other information. <br/><br/><b>Response Status Codes</b> <br/> Below is a table containing descriptions of the various status codes we currently support against various resources.<br/><b>Code &nbsp;  &nbsp; Description</b><br/>200 &nbsp; &nbsp; &nbsp;&nbsp; No error<br/>201 &nbsp; &nbsp; &nbsp;&nbsp; Successfully created<br/>204 &nbsp; &nbsp; &nbsp;&nbsp; Successfully deleted <br/><br/><b>Errors</b> (Handling Errors) <br/> Sometimes our API call will generate an error. Here we will find additional information about what to expect if we don’t format out request properly, or we fail to properly process our request.<br/> <b> Code &nbsp;  &nbsp; Description </b> <br/>400 &nbsp; &nbsp; &nbsp;&nbsp; Bad Request<br/>401 &nbsp; &nbsp; &nbsp;&nbsp; Requires authentication<br/>500 &nbsp; &nbsp; &nbsp;&nbsp; Internal server error<br/><br/><b>Authentication<b><br/><br/> <b> Metadata </b>",
    "termsOfService" : "https://www.samtrygg.se/s/personuppgiftspolicy",
    "contact" : {
      "name" : "Samtrygg AB",
      "url" : "https://www.samtrygg.se/",
      "email" : "kundtjanst@samtrygg.se"
    }
  },
  "tags" : [ {
    "name" : "User",
    "description" : "<div style='line-height:1.6;'><b>&nbsp;All APIs related to User.</b> APIs related to user like login, reset password, create, read, update and delete users are described here. <br/>Tenants, Owners, Customer Service Agent and Admin are differnt types of users in Samtrygg Application.</div>"
  }, {
    "name" : "Profile",
    "description" : "All APIs related to profile of user who can be tenant."
  }, {
    "name" : "RentalAd",
    "description" : "All APIs related to rental."
  }, {
    "name" : "Time Booking",
    "description" : "All APIs related to time booking."
  }, {
    "name" : "Agreement",
    "description" : "All APIs related to Agreement."
  } ],
  "paths" : {
    "/User" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Create a user in system",
        "description" : "Adds a user to the database of Samtrygg",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserInfo"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserInfo"
              }
            }
          },
          "required" : true,
          "description" : "Add user in to Database"
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            },
            "description" : "Item created successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              }
            },
            "description" : "Bad request - invalid input, object invalid"
          },
          "409" : {
            "description" : "An existing item already exists"
          }
        }
      },
      "put" : {
        "tags" : [ "User" ],
        "summary" : "Update user information",
        "description" : "Update User entity in system.",
        "operationId" : "updateUser",
        "requestBody" : {
          "description" : "User object that needs to be updated to the system",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserInfo"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserInfo"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User updated successfully."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              }
            },
            "description" : "Bad request - invalid input, object invalid"
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          },
          "405" : {
            "description" : "Validation exception",
            "content" : { }
          }
        }
      }
    },
    "/User/{Id}" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Find User by its Id which is GUID",
        "description" : "Find User entity by using user id in system",
        "operationId" : "getUserById",
        "parameters" : [ {
          "name" : "Id",
          "in" : "path",
          "description" : "GUID of user to identify and return user instance. User instance\\entity\\object contains all other properties and its data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation, user found",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserInfo"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "User" ],
        "summary" : "Delete User by GUID",
        "description" : "Delete User entity by using user guid in system",
        "operationId" : "deleteUserById",
        "parameters" : [ {
          "name" : "Id",
          "in" : "path",
          "description" : "GUID of user to identify and delete user instance from samtrygg system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "User deleted successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        }
      }
    },
    "/User/UpdateUserStatus" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Update User Status updates status of an user from delete, block or active to inactive",
        "description" : "Update status of user in the database of Samtrygg",
        "operationId" : "UpdateUserStatus",
        "parameters" : [ {
          "name" : "UserId",
          "in" : "query",
          "required" : true,
          "description" : "Add user in to Database",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Status",
          "in" : "query",
          "required" : true,
          "description" : "Different type of status which can be choose from enum like NotVerified (when user registered but not verified), Active (when user verified), Inactive (when user/admin deactivated user account ), Blocked (when admin blocked the user account), Deleted v(when user/admin deleted the user account)",
          "schema" : {
            "type" : "string",
            "enum" : [ "Not Verified", "Active", "Inactive", "Blocked", "Deleted" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated status of user Successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              }
            },
            "description" : "Bad request - invalid input, object invalid"
          },
          "409" : {
            "description" : "An existing item already exists"
          }
        }
      }
    },
    "/User/UpdateUserType" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Update User Type updates type of an user from tenant to landlord",
        "description" : "Update type of user from landlord to tenant or vice versa in the database of Samtrygg. This API used for if user is registered as a Tenant and he want to become a Landlord and vice versa. Using this API we will add/update user Type",
        "operationId" : "UpdateUserType",
        "parameters" : [ {
          "name" : "UserId",
          "in" : "query",
          "required" : true,
          "description" : "Update user in to Database",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Type",
          "in" : "query",
          "required" : true,
          "description" : "Different type of user tenant or landlord, change their user type",
          "schema" : {
            "type" : "string",
            "enum" : [ "Tenant", "Landlord" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updated status of user Successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              }
            },
            "description" : "Bad request - invalid input, object invalid"
          },
          "409" : {
            "description" : "An existing item already exists"
          }
        }
      }
    },
    "/User/Login" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Login in to Samtrygg Application",
        "description" : "Login API gives access to enter in to Samtrygg Application.",
        "operationId" : "loginUser",
        "requestBody" : {
          "description" : "Login object that keep all information to verify user exists or not in our system",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginInfo"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginInfo"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation, user found",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTokenResponse"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTokenResponse"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        },
        "security" : [ {
          "source_secret" : [ ]
        }, {
          "user_culture" : [ ]
        } ]
      }
    },
    "/User/ForgotPassword" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Forgot Password of Samtrygg Application",
        "description" : "Forgot Password API gives possibilites to get their password of  Samtrygg Application. Once user enter email id and click forgot password, we will send ResendPasswordLink to user.",
        "operationId" : "forgorPassword",
        "parameters" : [ {
          "name" : "Email",
          "in" : "query",
          "description" : "Email of user to return resend password link to user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation, sent mail to user"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        }
      }
    },
    "/User/ResetPassword" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Reset Password of Samtrygg Application",
        "description" : "Reset Password API gives possibilites to reset password for Samtrygg Application. Once user click on reset password link from email, user can reset their password.",
        "operationId" : "resetPassword",
        "parameters" : [ {
          "name" : "UserId",
          "in" : "query",
          "description" : "Encrypted user identification which will not shown in web form but in hidden field. It will be there in email reset password link which will populate in hidden field. Id of user to identify user for changing their password",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Password",
          "in" : "query",
          "description" : "User can choose password to reset their password",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ConfirmPassword",
          "in" : "query",
          "description" : "User need to write same letters in same sequence as per password to confirm they want to set it as password",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation, sent password reset mail to user"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        }
      }
    },
    "/User/ChangePassword" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Change Password of Samtrygg Application",
        "description" : "Change Password API gives possibilites to change password for Samtrygg Application. Once user click on change password, user need to enter userId & old password to identify its him/her and choose new password & confirm it to change his/her password.",
        "operationId" : "changePassword",
        "parameters" : [ {
          "name" : "UserId",
          "in" : "query",
          "description" : "Encrypted user identification which will not shown in web form but in hidden field. Id of user to identify user for changing their password",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Old Password",
          "in" : "query",
          "description" : "User need to enter old password to verify their identity. As user id can be known by others but old password is secret which only user knows.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "New Password",
          "in" : "query",
          "description" : "User can choose new password to change their password",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ConfirmPassword",
          "in" : "query",
          "description" : "User need to write same letters in same sequence as per password to confirm they want it as new password",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation, password changed successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        }
      }
    },
    "/User/Contact" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Add or Update User Contact Information of Samtrygg Application",
        "description" : "User contact information is not filled while registering or creating user. User can have multiple contacts which could be different phone numbers or emails belongs to office desk, home, office extension or personal phone. User can decide which phone number or email they want to show as default number.",
        "operationId" : "UpdateContact",
        "requestBody" : {
          "description" : "User Contact Information object that needs to be updated to the system",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactList"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactList"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation, update or add user's contact successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "User" ],
        "summary" : "Add or Update User Contact Information of Samtrygg Application",
        "description" : "User contact information is not filled while registering or creating user. User can have multiple contacts which could be different phone numbers or emails belongs to office desk, home, office extension or personal phone. User can decide which phone number or email they want to show as default number.",
        "operationId" : "DeleteContact",
        "parameters" : [ {
          "name" : "UserId",
          "in" : "query",
          "description" : "Encrypted user identification which will not shown in web form but in hidden field. Id of user to identify user for changing their password",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ContactIdsList",
          "in" : "query",
          "description" : "List of Contact Ids which contains Ids of all contact which needs to delete for specific User Id.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContactIdsList"
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation, update or add user's contact successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        }
      }
    },
    "/User/Contact/{UserId}" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Get User Contact Information of Samtrygg Application",
        "description" : "Get user contact information of samtrygg user. User can have multiple contacts which could be different phone numbers or emails belongs to office desk, home, office extension or personal phone.",
        "operationId" : "GetContact",
        "parameters" : [ {
          "name" : "UserId",
          "in" : "path",
          "description" : "Encrypted user identification which will not shown but needed to identify user",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactList"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactList"
                }
              }
            },
            "description" : "successful operation, get user contact successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        }
      }
    },
    "/User/TenantProfile/{userId}" : {
      "get" : {
        "tags" : [ "Profile" ],
        "summary" : "Get full profile of tenant",
        "description" : "Find all user detail who is a tenant and return as tenanat profile by using User Id",
        "operationId" : "getTenantProfile",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User identification (user id) to get user profile who is a tenant",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User act as Tenant found successfully",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TenantInfo"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TenantInfo"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found",
            "content" : { }
          }
        }
      }
    },
    "/User/TenantProfile" : {
      "post" : {
        "tags" : [ "Profile" ],
        "summary" : "Create a tenanat profile as user in system",
        "description" : "Adds a tenant profile as user to the database of Samtrygg",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TenantInfo"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TenantInfo"
              }
            }
          },
          "required" : true,
          "description" : "Add user in to Database"
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            },
            "description" : "Item created successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              }
            },
            "description" : "Bad request - invalid input, object invalid"
          },
          "409" : {
            "description" : "An existing item already exists"
          }
        }
      },
      "put" : {
        "tags" : [ "Profile" ],
        "summary" : "Update tenant profile",
        "description" : "Update User entity in system as a tenant",
        "operationId" : "updateTenantProfile",
        "requestBody" : {
          "description" : "Tenant user object that needs to be updated to the system",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TenantInfo"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/TenantInfo"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Tenant updated successfully."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              }
            },
            "description" : "Bad request - invalid input, object invalid"
          },
          "404" : {
            "description" : "Tenant Profile not found",
            "content" : { }
          },
          "405" : {
            "description" : "Validation exception",
            "content" : { }
          }
        }
      }
    },
    "/User/TenantBasicProfile/{tenantUserId}" : {
      "get" : {
        "tags" : [ "Profile" ],
        "summary" : "Get basic profile of tenant",
        "description" : "Find all user detail who is a tenant and return as tenanat profile by using User Id",
        "operationId" : "getTenantBasicProfile",
        "parameters" : [ {
          "name" : "tenantUserId",
          "in" : "path",
          "description" : "User identification (user id) to get user profile who is a tenant",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User act as Tenant found successfully",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TenantInfo"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TenantInfo"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found",
            "content" : { }
          }
        }
      }
    },
    "/User/FavoriteRentalAds/{userId}" : {
      "get" : {
        "tags" : [ "Profile" ],
        "summary" : "Get your favorite rental advertisement",
        "description" : "Find ad details by using user id for users who is interested in types of rental property in system",
        "operationId" : "getFavoriteRentalAds",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User Id of tenant to get their favorite Rental ad",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Favorite Advertisement of rental object found successfully as per logged in user",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalObjectInfo"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalObjectInfo"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found",
            "content" : { }
          }
        }
      }
    },
    "/User/MatchedRentalAds/{userId}" : {
      "get" : {
        "tags" : [ "Profile" ],
        "summary" : "Get matched favorite rental advertisement as per User Id",
        "description" : "Find ad details by using user id of rental property in system",
        "operationId" : "getMatchedRentalAds",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User Id of tenant to get their favorite Rental ad",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Matched Advertisement of rental object found successfully as per user id passed in path",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MatchedRentalAds"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MatchedRentalAds"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found",
            "content" : { }
          }
        }
      }
    },
    "/RentalAd" : {
      "post" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Post advertisement  of rental object with link of ad",
        "description" : "Post ad details by sending all data about advertisement of rental object in system",
        "operationId" : "createRentalAd",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdDetailsInfo"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdDetailsInfo"
              }
            }
          },
          "required" : true,
          "description" : "Add advertisement of rental property in to Database"
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            },
            "description" : "Advertisement created successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "405" : {
            "description" : "Validation Exception",
            "content" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Update advertisement details of rental object with link of ad",
        "description" : "Updated ad details by sending all updated data about advertisement of rental object in system",
        "operationId" : "UpdateRentalAd",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdDetailsInfo"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdDetailsInfo"
              }
            }
          },
          "required" : true,
          "description" : "Add advertisement of rental property in to Database"
        },
        "responses" : {
          "200" : {
            "description" : "Advertisement details updated successfully."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              }
            },
            "description" : "Bad request - invalid input, object invalid"
          },
          "404" : {
            "description" : "Advertisement details not found",
            "content" : { }
          },
          "405" : {
            "description" : "Validation exception",
            "content" : { }
          }
        }
      }
    },
    "/RentalAd/{Id}" : {
      "get" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Get advertisement  of rental object with link of ad",
        "description" : "Find ad details by using ad link of rental object in system",
        "operationId" : "getRentalAd",
        "parameters" : [ {
          "name" : "Id",
          "in" : "path",
          "description" : "Rental Advertisement identification (rental ad id) to get Rental ad",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Advertisement details of rental object found successfully",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdDetailsInfo"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdDetailsInfo"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found",
            "content" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Delete advertisement by GUID",
        "description" : "Delete User entity by using user guid in system",
        "operationId" : "deleteAdvertisementById",
        "parameters" : [ {
          "name" : "Id",
          "in" : "path",
          "description" : "GUID of user to identify and delete user instance from samtrygg system.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Advertisement deleted successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Advertisement not found",
            "content" : { }
          }
        }
      }
    },
    "/RentalAd/{AdLink}" : {
      "get" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Get rental object by using link or url provided",
        "description" : "Find rental property by using links of rental object in system",
        "operationId" : "getRentalObjects",
        "parameters" : [ {
          "name" : "AdLink",
          "in" : "path",
          "description" : "rental object link or url",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Rental object found successfully",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalObjectInfo"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalObjectInfo"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found",
            "content" : { }
          }
        }
      }
    },
    "/RentalAd/Details" : {
      "get" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Get advertisement details of rental object with link of ad",
        "description" : "Find ad details by using ad link of rental object in system. Rental Ad Link or Ad Id any one can be mandatory",
        "operationId" : "getRentalAdDetails",
        "parameters" : [ {
          "name" : "rentalAdLink",
          "in" : "path",
          "description" : "rental advertisement link or url",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "adId",
          "in" : "path",
          "description" : "Advertisement Identification (Id)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Advertisement details of rental found successfully",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdDetailsInfo"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdDetailsInfo"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found",
            "content" : { }
          }
        }
      }
    },
    "/RentalAd/GetHomePageAds" : {
      "get" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Get home page objects",
        "description" : "Find home entity by using objects in system",
        "operationId" : "getHomePageObjects",
        "responses" : {
          "200" : {
            "description" : "Rental Ad found successfully",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalPropertyListInfo"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalPropertyListInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request, this API do not have any input",
            "content" : { }
          },
          "404" : {
            "description" : "Rental Ad not found",
            "content" : { }
          }
        },
        "security" : [ {
          "source_secret" : [ ]
        }, {
          "user_culture" : [ ]
        } ]
      }
    },
    "/RentalAd/GetListOfAccommodationTypes" : {
      "get" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Get list of accomodation types of rental object advertisement",
        "description" : "Get list of all accomodation types",
        "operationId" : "getListOfAccomodationTypes",
        "responses" : {
          "200" : {
            "description" : "List of accomodation types found successfully",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccomodationTypes"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccomodationTypes"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found",
            "content" : { }
          }
        }
      }
    },
    "/RentalAd/ListBySearchCriteria" : {
      "get" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Get rental object by using link or url provided",
        "description" : "Find rental property by using search key of rental property",
        "operationId" : "searchRentalAds",
        "parameters" : [ {
          "name" : "searchKey",
          "in" : "query",
          "description" : "name of rental property or area as search key",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Rental object found successfully",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalObjectInfo"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalObjectInfo"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found",
            "content" : { }
          }
        },
        "security" : [ {
          "source_secret" : [ ]
        }, {
          "user_culture" : [ ]
        } ]
      }
    },
    "/RentalAd/TimeBlocks" : {
      "post" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Create or Update time slots for advertisement of rental object",
        "description" : "Add or update Ad time slots",
        "operationId" : "upadteAdTimeSlots",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdTimeSlots"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdTimeSlots"
              }
            }
          },
          "required" : true,
          "description" : "Add or update Advertisement time slots in to Database"
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            },
            "description" : "Advertisement time slots created or updated successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponseList"
                }
              }
            },
            "description" : "Bad request - invalid input, object invalid"
          },
          "409" : {
            "description" : "An existing item already exists"
          }
        }
      }
    },
    "/RentalAd/TimeBlocks/{adId}" : {
      "get" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Get list of time slots for Ads of rental object advertisement",
        "description" : "Get list of time slots for Ads",
        "operationId" : "getListOfAdTimeSlots",
        "parameters" : [ {
          "name" : "adId",
          "in" : "path",
          "description" : "Advertisement Identification to get time slots for it",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of time slots for ad found successfully",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdTimeSlots"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdTimeSlots"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found to show ad time slots",
            "content" : { }
          }
        }
      }
    },
    "/RentalAd/ListByUserId/{userId}" : {
      "get" : {
        "tags" : [ "RentalAd" ],
        "summary" : "Show rental ads of logged in user",
        "description" : "Get rental ads of vaccant property for user who logged in.  It can be empty which will lead to get all property. User Id here act as filter creteria",
        "operationId" : "listByUserId",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User Id of Owner who advertise for rental property.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Rental object found successfully",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalObjectInfo"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalObjectInfo"
                }
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadInputResponse"
                }
              }
            },
            "description" : "Bad Request, Invalid input supplied"
          },
          "404" : {
            "description" : "Rental object not found",
            "content" : { }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "UserInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Global Unique Identifier or GUID of user acts as unique key to identify user"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First Name of User"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last Name of User"
          },
          "contactNumber" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Phone Number or Mobile Number of User"
          },
          "email" : {
            "type" : "string",
            "description" : "Email Address of User"
          },
          "password" : {
            "type" : "string",
            "description" : "Password include minimum 8 characters, 1 upper and 1 lower character and 1 special character"
          },
          "confirmPassword" : {
            "type" : "string",
            "description" : "Confirm Password contain same characters as password"
          },
          "birthDate" : {
            "type" : "string",
            "description" : "Birth Date contain date in epoch format"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Tenant", "Landlord", "Admin", "CServiceAgent", "OrgAdmin", "OrgUser" ],
            "description" : "Type (Enum of Tenant 0 , Landlord 1 , Admin 2 , CServiceAgent 3 (Customer Service Agent) )"
          },
          "agentInfo" : {
            "type" : "object",
            "properties" : {
              "smsSignature" : {
                "type" : "string",
                "description" : "SMS signature contain signature of Agent to suffix in mail or sms."
              },
              "agentType" : {
                "type" : "string",
                "enum" : [ "Standard Agent", "Special Agent", "Mock Agent" ],
                "description" : "Type (Enum of Standard Agent 0, Special Agent 1, Mock Agent 2)"
              },
              "voiceMessageUrl" : {
                "type" : "string",
                "description" : "Voice Message URL contains URL of voice message of agent if he/she did not pick call."
              }
            },
            "description" : "Agent Info object will be available only if type is CServiceAgent else Agent Info will be null."
          },
          "imageHash" : {
            "type" : "string",
            "description" : "Image Hash contain byte code after converting image in to hash code by using base 64 or unicode conversion"
          },
          "imageUrl" : {
            "type" : "string",
            "description" : "Keep Image URL null or empty while creating user. While feeding user information we can fill image url."
          },
          "landingUrl" : {
            "type" : "string",
            "description" : "Landing URL is also named as Initial URL. It use to keep URL for different user type"
          },
          "registrationType" : {
            "type" : "string",
            "enum" : [ "Facebook", "Google", "InHouse" ],
            "description" : "User can register themselves by using Social Networking account like google and Facebook. We are keeping track of social media reference."
          },
          "preferredLanguage" : {
            "type" : "string",
            "enum" : [ "en-US", "sv-SE" ],
            "description" : "User can select their own language preference to browse website."
          },
          "userStatus" : {
            "type" : "integer",
            "description" : "User Status should be 0 or 1. 0 for deleted/inactive, 1 for active",
            "format" : "int16"
          },
          "organizationId" : {
            "type" : "integer",
            "description" : "If user is having organization admin or Organization User then user need to fill Organization Id. Organization Id is going to become interface in between user work flow and organization work flow"
          }
        },
        "xml" : {
          "name" : "User"
        }
      },
      "LoginInfo" : {
        "type" : "object",
        "properties" : {
          "loginType" : {
            "type" : "string",
            "enum" : [ "Facebook", "Google", "InHouse", "BankId" ],
            "description" : "User can login by using Social Networking account like google and Facebook. User need to select which login type they want to use."
          },
          "userName" : {
            "type" : "string",
            "description" : "User Name can be email address or phone number of user."
          },
          "password" : {
            "type" : "string",
            "description" : "Valid only for InHouse type login else it will be empty"
          },
          "accessToken" : {
            "type" : "string",
            "description" : "Valid only for Google and Facebook login else it will be empty"
          },
          "returnUrl" : {
            "type" : "string",
            "description" : "Valid only for Facebook login else empty, User will be redirected to that site as mentioned in return URL, if return URL is not empty"
          },
          "personNumber" : {
            "type" : "string",
            "description" : "Valid only for Bank Id login type"
          }
        }
      },
      "TenantInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Tenant profile id or GUID of user acts as unique key to identify user (tenant)"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First Name of Tenant"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last Name of Tenant"
          },
          "phoneNumber" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Phone Number or Mobile Number of tenant"
          },
          "profileImageUrl" : {
            "type" : "string",
            "description" : "Image Url of profile picture for tenant type user"
          },
          "description" : {
            "type" : "string",
            "description" : "descriptiom of tenant profile"
          },
          "interestedAccommodationTypes" : {
            "type" : "object",
            "properties" : {
              "rentalAdList" : {
                "type" : "array",
                "xml" : {
                  "name" : "rentalObject",
                  "wrapped" : true
                },
                "items" : {
                  "$ref" : "#/components/schemas/interestedAccommodation"
                }
              }
            }
          },
          "household" : {
            "type" : "string",
            "enum" : [ "Single", "SingleWithChildren", "Couple", "CoupleWithChildren" ],
            "description" : "there could be different household as Single, SingleWithChildren,Couple, CoupleWithChildren"
          },
          "proffession" : {
            "type" : "string",
            "description" : "profession of tenant, it indicates work profile of tenant"
          },
          "position" : {
            "type" : "string",
            "enum" : [ "Permanent Employment", "Part Time Employment", "Employed By The Hour", "Self Employed", "Student", "Unemployed", "Other" ],
            "description" : "Position of tenant at his/her work (Enum of PermanentEmployment, PartTimeEmployment, EmployedByTheHour, SelfEmployed, Student, Unemployed, Other)"
          },
          "education" : {
            "type" : "string",
            "enum" : [ "Primary School", "Upper Secondary School", "College Or University" ],
            "description" : "Education of tenant (enum of PrimarySchool, UpperSecondarySchool, CollegeOrUniversity)"
          },
          "smoker" : {
            "type" : "string",
            "enum" : [ false, true, "Occasional Smoker" ],
            "description" : "Tenant is smoker or not (Options provided No, Yes, OccasionalSmoker)"
          },
          "pets" : {
            "type" : "string",
            "enum" : [ false, "Fur Animal", "Other" ],
            "description" : "Tenant is moving in property with pet like dog, cat, parrot, fish (Options provided No, Fur Animal, Other)"
          },
          "References" : {
            "type" : "string",
            "description" : "References of Tenant"
          },
          "facebookUrl" : {
            "type" : "string",
            "description" : "facebook URL is about user profile in facebook"
          },
          "linkedinUrl" : {
            "type" : "string",
            "description" : "linked in URL is about user profile in Linkedin."
          },
          "moveInDate" : {
            "type" : "string",
            "description" : "Start Date denotes date in epoch format on which tenant is going to occupy the property."
          },
          "moveOutDate" : {
            "type" : "string",
            "description" : "End Date denotes date in epoch format on which tenant is going to leave property"
          },
          "minSizeInSqMeters" : {
            "type" : "string",
            "description" : "Area of rental property in square meters minimum or actual"
          },
          "minNumberOfRooms" : {
            "type" : "string",
            "description" : "Minimum number of room available in rental property"
          },
          "monthlyRent" : {
            "type" : "string",
            "description" : "for Sweden min val 2000, max 75000 SEK"
          },
          "interestedLocations" : {
            "type" : "object",
            "properties" : {
              "rentalAdList" : {
                "type" : "array",
                "xml" : {
                  "name" : "rentalObject",
                  "wrapped" : true
                },
                "items" : {
                  "$ref" : "#/components/schemas/interestedLocations"
                }
              }
            }
          }
        },
        "xml" : {
          "name" : "Tenant"
        }
      },
      "interestedLocations" : {
        "type" : "object",
        "properties" : {
          "interestedLocations" : {
            "description" : "To Copy from",
            "type" : "array",
            "xml" : {
              "name" : "interestedLocation",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ineterestedLocation"
            }
          }
        }
      },
      "ineterestedLocation" : {
        "type" : "object",
        "properties" : {
          "fullAddress" : {
            "type" : "string",
            "description" : "Address of rental property with aprartment number, street name, municipality, postal code and city"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "Postal Code of rental property"
          },
          "postalTown" : {
            "type" : "string",
            "description" : "Postal Town name of rental property"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality"
          },
          "sublocality" : {
            "type" : "string",
            "description" : "Sub Locality"
          },
          "adminArea1" : {
            "type" : "string",
            "description" : "Admin Area"
          },
          "adminArea2" : {
            "type" : "string",
            "description" : "Admin Area"
          },
          "countryLong" : {
            "type" : "string",
            "description" : "Contry Long"
          },
          "countryShort" : {
            "type" : "string",
            "description" : "Country Short"
          },
          "geographicPositionLat" : {
            "type" : "string",
            "description" : "Latitude of geographical position of rental property"
          },
          "geographicPositionLong" : {
            "type" : "string",
            "description" : "Longitude of geographical position of rental property"
          }
        }
      },
      "interestedAccommodation" : {
        "type" : "object",
        "properties" : {
          "AccommodationTypeId" : {
            "type" : "string",
            "description" : "interested in which types of accomodation type Apartment, Villa"
          }
        }
      },
      "TenantBasicInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Tenant profile id or GUID of user acts as unique key to identify user (tenant)"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First Name of Tenant"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last Name of Tenant"
          },
          "profileImageUrl" : {
            "type" : "string",
            "description" : "Image Url of profile picture for tenant type user"
          },
          "description" : {
            "type" : "string",
            "description" : "descriptiom of tenant profile"
          },
          "interestedAccommodationTypes" : {
            "type" : "object",
            "properties" : {
              "rentalAdList" : {
                "type" : "array",
                "xml" : {
                  "name" : "rentalObject",
                  "wrapped" : true
                },
                "items" : {
                  "$ref" : "#/components/schemas/interestedAccommodation"
                }
              }
            }
          },
          "household" : {
            "type" : "string",
            "enum" : [ "Single", "SingleWithChildren", "Couple", "CoupleWithChildren" ],
            "description" : "there could be different household as Single, SingleWithChildren,Couple, CoupleWithChildren"
          },
          "profession" : {
            "type" : "string",
            "description" : "profession of tenant, it indicates work profile of tenant"
          },
          "position" : {
            "type" : "string",
            "enum" : [ "Permanent Employment", "Part Time Employment", "Employed By The Hour", "Self Employed", "Student", "Unemployed", "Other" ],
            "description" : "Position of tenant at his/her work (Enum of PermanentEmployment, PartTimeEmployment, EmployedByTheHour, SelfEmployed, Student, Unemployed, Other)"
          },
          "education" : {
            "type" : "string",
            "enum" : [ "Primary School", "Upper Secondary School", "College Or University" ],
            "description" : "Education of tenant (enum of PrimarySchool, UpperSecondarySchool, CollegeOrUniversity)"
          },
          "smoker" : {
            "type" : "string",
            "enum" : [ false, true, "Occasional Smoker" ],
            "description" : "Tenant is smoker or not (Options provided No, Yes, OccasionalSmoker)"
          },
          "pets" : {
            "type" : "string",
            "enum" : [ false, "Fur Animal", "Other" ],
            "description" : "Tenant is moving in property with pet like dog, cat, parrot, fish (Options provided No, Fur Animal, Other)"
          },
          "References" : {
            "type" : "string",
            "description" : "References of Tenant"
          },
          "facebookUrl" : {
            "type" : "string",
            "description" : "facebook URL is about user profile in facebook"
          },
          "linkedinUrl" : {
            "type" : "string",
            "description" : "linked in URL is about user profile in Linkedin."
          }
        },
        "xml" : {
          "name" : "Tenant"
        }
      },
      "MatchedRentalAds" : {
        "type" : "object",
        "properties" : {
          "tenantProfileId" : {
            "type" : "string",
            "description" : "Tenant Profile Id"
          },
          "rentalAdList" : {
            "type" : "array",
            "xml" : {
              "name" : "rentalObject",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/RentalObjectInfo"
            }
          }
        }
      },
      "RentalPropertyListInfo" : {
        "type" : "object",
        "properties" : {
          "rentalAdList" : {
            "type" : "array",
            "xml" : {
              "name" : "rentalObject",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/RentalPropertyInfo"
            }
          }
        }
      },
      "RentalPropertyInfo" : {
        "type" : "object",
        "properties" : {
          "cityName" : {
            "type" : "string",
            "description" : "City Name where vacant rental properties are available"
          },
          "vacantAccomadationCount" : {
            "type" : "integer",
            "description" : "Vacant accomadation count denots numbers of properties available for rent in city"
          },
          "rentalAdList" : {
            "type" : "array",
            "xml" : {
              "name" : "rentalObject",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/RentalObjectInfo"
            }
          }
        }
      },
      "RentalObjectInfo" : {
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "string",
            "description" : "Price of rental property as per Landlord proposed."
          },
          "tenantPrice" : {
            "type" : "string",
            "description" : "Price of rental property agreed by tenant."
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency of price paid for rental property"
          },
          "moveInDate" : {
            "type" : "string",
            "description" : "Start Date denotes date in epoch format on which tenant is going to occupy the property."
          },
          "moveOutDate" : {
            "type" : "string",
            "description" : "End Date denotes date in epoch format on which tenant is going to leave property"
          },
          "imageUrl" : {
            "type" : "string",
            "description" : "Image url contains URL of repositoy where owner stored all images belongs to this rental property."
          },
          "fullAddress" : {
            "type" : "string",
            "description" : "Address of rental property with aprartment number, street name, municipality, postal code and city"
          },
          "streetName" : {
            "type" : "string",
            "description" : "Street Name of rental property"
          },
          "streetNumber" : {
            "type" : "string",
            "description" : "Street Number of rental property"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "Postal Code of rental property"
          },
          "postalTown" : {
            "type" : "string",
            "description" : "Postal Town name of rental property"
          },
          "sizeInSqMeters" : {
            "type" : "string",
            "description" : "Area of rental property in square meters"
          },
          "numberOfRooms" : {
            "type" : "string",
            "description" : "Number of room available in rental property"
          },
          "geographicPositionLat" : {
            "type" : "string",
            "description" : "Latitude of geographical position of rental property"
          },
          "geographicPositionLong" : {
            "type" : "string",
            "description" : "Longitude of geographical position of rental property"
          },
          "adLink" : {
            "type" : "string",
            "description" : "Advertisement link of Rental property which contain map url of rental property"
          }
        }
      },
      "ContactList" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "description" : "User Id"
          },
          "contacts" : {
            "type" : "array",
            "xml" : {
              "name" : "ContactObject",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/ContactObject"
            }
          }
        }
      },
      "ContactObject" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identification number can be stored as integer in databse but it will send & get as encrypted string in API"
          },
          "contact" : {
            "type" : "string",
            "description" : "Contact can be email address or phone number or fax number"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Email", "Phone", "Fax" ],
            "description" : "Vacant accomadation count denots numbers of properties available for rent in city"
          },
          "isDefault" : {
            "type" : "boolean",
            "description" : "isDefault contain 1 or true when user want to keep this specific contact as default from list. Only one contact can be set default in list"
          }
        }
      },
      "ContactIdsList" : {
        "type" : "object",
        "properties" : {
          "contactIds" : {
            "type" : "array",
            "description" : "Contact Ids of contacts which belongs to one user",
            "items" : {
              "$ref" : "#/components/schemas/ContactIdObject"
            }
          }
        }
      },
      "ContactIdObject" : {
        "type" : "object",
        "properties" : {
          "contactId" : {
            "type" : "string",
            "description" : "Contact Ids of contacts which belongs to one user"
          }
        }
      },
      "AdDetailsInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "(Guid or secret identification)"
          },
          "headline" : {
            "type" : "string",
            "description" : "Headline"
          },
          "address" : {
            "type" : "string",
            "description" : "(for ex.. Nygränd 10, 111 30 Stockholm, Sverige)"
          },
          "fullAddressWithoutSweden" : {
            "type" : "string",
            "description" : "Full address of property"
          },
          "streetName" : {
            "type" : "string",
            "description" : "Street Name"
          },
          "streetNumber" : {
            "type" : "string",
            "description" : "Street Number"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "Postal Code"
          },
          "postalTown" : {
            "type" : "string",
            "description" : "Postal Town"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality"
          },
          "sublocality" : {
            "type" : "string",
            "description" : "Sub Locality"
          },
          "adminArea1" : {
            "type" : "string",
            "description" : "Admin Area"
          },
          "adminArea2" : {
            "type" : "string",
            "description" : "Admin Area"
          },
          "countryLong" : {
            "type" : "string",
            "description" : "Contry Long"
          },
          "countryShort" : {
            "type" : "string",
            "description" : "Country Short"
          },
          "geographicPositionLat" : {
            "type" : "string",
            "description" : "Geographic Position Latitude"
          },
          "geographicPositionLong" : {
            "type" : "string",
            "description" : "Geographic Position Long"
          },
          "adLink" : {
            "type" : "string",
            "description" : "Advertisement Link"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of Advertisement about rental property"
          },
          "numberOfFloors" : {
            "type" : "string",
            "description" : "(ex.. ‘ ‘, 0, 1, 2, 3, 4, 5, 6, 7 )"
          },
          "moveInDate" : {
            "type" : "string",
            "description" : "Move-in should be greater than today's date - epoch format"
          },
          "moveOutDate" : {
            "type" : "string",
            "description" : "null or value and greater than moveInDate - epoch format"
          },
          "monthlyRent" : {
            "type" : "string",
            "description" : "for Sweden min val 2000, max 75000 SEK"
          },
          "numberOfRooms" : {
            "type" : "string",
            "description" : "Number of rooms missing (between 1 and 100)"
          },
          "sizeInSqMeters" : {
            "type" : "string",
            "description" : "Square meters m² missing (between 1 and 700)"
          },
          "price" : {
            "type" : "string",
            "description" : "This is landlord price"
          },
          "tenantPrice" : {
            "type" : "string",
            "description" : "This is tenant price  (i.e. landlord price +  15%)"
          },
          "currency" : {
            "type" : "string",
            "description" : "for example SEK"
          },
          "amenities" : {
            "type" : "object",
            "properties" : {
              "Amenities" : {
                "type" : "array",
                "description" : "Amenities and its availability mentioned here",
                "items" : {
                  "$ref" : "#/components/schemas/AmenitiesList"
                }
              }
            }
          },
          "furniture" : {
            "type" : "string",
            "enum" : [ "FullyFurnished", "PartiallyFurnished", "Flexible", "NotFurnished" ]
          },
          "accommodationType" : {
            "type" : "string",
            "description" : "this is a type of accommodation for example room, apartment"
          },
          "viewingType" : {
            "type" : "string",
            "enum" : [ "Manual", "3D" ],
            "description" : "Viewing Type in enum"
          },
          "imageUrls" : {
            "type" : "object",
            "properties" : {
              "Images" : {
                "type" : "array",
                "description" : "List of Images",
                "items" : {
                  "$ref" : "#/components/schemas/ImageObject"
                }
              }
            }
          },
          "videoUrl" : {
            "type" : "string",
            "description" : "Url of video inline with advertisement of property"
          },
          "adViewsCount" : {
            "type" : "string",
            "description" : "View count of advertisement"
          },
          "agentComment" : {
            "type" : "string",
            "description" : "this comment added by customer service agent about advertisement"
          }
        }
      },
      "ImageObject" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "URL of Image related to advertisement of rent"
          },
          "caption" : {
            "type" : "string",
            "description" : "Caption about image or about property which is in image"
          }
        }
      },
      "AmenitiesList" : {
        "type" : "object",
        "properties" : {
          "Amenity" : {
            "type" : "array",
            "description" : "List of amenities",
            "items" : {
              "$ref" : "#/components/schemas/AmenitiesObject"
            }
          }
        }
      },
      "AmenitiesObject" : {
        "type" : "object",
        "properties" : {
          "Amenity" : {
            "type" : "string",
            "enum" : [ "TV", "Internet", "Bathtub" ],
            "description" : "Amenitiies can choose from TV, Internet, Bathtub"
          },
          "Availability" : {
            "type" : "string",
            "enum" : [ "OnRequest", "OnRent" ],
            "description" : "Availabilities cab be OnRequest or OnRent"
          }
        }
      },
      "AccomodationTypes" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of accomodation type"
          },
          "accomodationType" : {
            "type" : "string",
            "description" : "Accomodation type will be text value as an example Apartment, Villa, Cottage"
          }
        }
      },
      "AdTimeSlots" : {
        "type" : "object",
        "properties" : {
          "AdId" : {
            "type" : "string",
            "description" : "GUID or encrypted string"
          },
          "TimeBlocks" : {
            "type" : "array",
            "description" : "one ad have one or more time blocks available",
            "items" : {
              "$ref" : "#/components/schemas/TimeBlock"
            }
          }
        }
      },
      "TimeBlock" : {
        "type" : "object",
        "properties" : {
          "StartDateTime" : {
            "type" : "string",
            "description" : "Start Date and Time for time block which we have for ad"
          },
          "EndDateTime" : {
            "type" : "string",
            "description" : "End Date and Time for time block which we have for ad"
          },
          "TimeSlots" : {
            "type" : "array",
            "description" : "one time block can have one or more time slots available",
            "items" : {
              "$ref" : "#/components/schemas/TimeBlockTimeSlot"
            }
          }
        }
      },
      "TimeBlockTimeSlot" : {
        "type" : "object",
        "properties" : {
          "StartDateTime" : {
            "type" : "string",
            "description" : "Start Date and Time of Slot for time block which we have for ad"
          },
          "EndDateTime" : {
            "type" : "string",
            "description" : "End Date and Time of Slot for time block which we have for ad"
          },
          "IsAvailable" : {
            "type" : "boolean",
            "description" : "Is Time Slot Available for time block which we have for ad?"
          }
        }
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "BadInputResponseList" : {
        "type" : "object",
        "properties" : {
          "BadInputResponseObject" : {
            "type" : "array",
            "xml" : {
              "name" : "BadInputResponse",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/BadInputResponse"
            }
          }
        }
      },
      "BadInputResponse" : {
        "type" : "object",
        "properties" : {
          "field" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "UserTokenResponse" : {
        "type" : "object",
        "properties" : {
          "UserId" : {
            "type" : "string",
            "description" : "Global Unique Identifier or GUID of user acts as unique key to identify sub"
          },
          "UserToken" : {
            "type" : "string",
            "description" : "User toke is responsible to identify subsequest request fomr authenticated user"
          }
        }
      }
    },
    "securitySchemes" : {
      "bearer_token" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      },
      "source_secret" : {
        "type" : "apiKey",
        "name" : "source_secret",
        "in" : "header"
      },
      "user_culture" : {
        "type" : "apiKey",
        "name" : "user_culture",
        "in" : "header"
      }
    }
  },
  "security" : [ {
    "source_secret" : [ ]
  }, {
    "user_culture" : [ ]
  }, {
    "bearer_token" : [ ]
  } ]
}