openapi: 3.0.0
info:
  title: LOL Application
  version: "3.0.0"
paths:
  /answers/count:
    get:
      x-controller-name: DatacontrollerController
      x-operation-name: count
      tags:
        - DatacontrollerController
      responses:
        '200':
          description: Answer model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: DatacontrollerController.count
  '/answers/{id}/question':
    get:
      x-controller-name: AnswerQuestionController
      x-operation-name: getQuestion
      tags:
        - AnswerQuestionController
      responses:
        '200':
          description: Question belonging to Answer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: AnswerQuestionController.getQuestion
  '/answers/{id}/useranswers':
    post:
      x-controller-name: AnswerUseranswerController
      x-operation-name: create
      tags:
        - AnswerUseranswerController
      responses:
        '200':
          description: Answer model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Useranswer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUseranswerInAnswer'
        x-parameter-index: 1
      operationId: AnswerUseranswerController.create
    patch:
      x-controller-name: AnswerUseranswerController
      x-operation-name: patch
      tags:
        - AnswerUseranswerController
      responses:
        '200':
          description: Answer.Useranswer PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UseranswerPartial'
        x-parameter-index: 1
      operationId: AnswerUseranswerController.patch
    get:
      x-controller-name: AnswerUseranswerController
      x-operation-name: find
      tags:
        - AnswerUseranswerController
      responses:
        '200':
          description: Array of Useranswer's belonging to Answer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Useranswer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: AnswerUseranswerController.find
    delete:
      x-controller-name: AnswerUseranswerController
      x-operation-name: delete
      tags:
        - AnswerUseranswerController
      responses:
        '200':
          description: Answer.Useranswer DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: AnswerUseranswerController.delete
  '/answers/{id}':
    put:
      x-controller-name: DatacontrollerController
      x-operation-name: replaceById
      tags:
        - DatacontrollerController
      responses:
        '204':
          description: Answer PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
        x-parameter-index: 1
      operationId: DatacontrollerController.replaceById
    patch:
      x-controller-name: DatacontrollerController
      x-operation-name: updateById
      tags:
        - DatacontrollerController
      responses:
        '204':
          description: Answer PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerPartial'
        x-parameter-index: 1
      operationId: DatacontrollerController.updateById
    get:
      x-controller-name: DatacontrollerController
      x-operation-name: findById
      tags:
        - DatacontrollerController
      responses:
        '200':
          description: Answer model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: DatacontrollerController.findById
    delete:
      x-controller-name: DatacontrollerController
      x-operation-name: deleteById
      tags:
        - DatacontrollerController
      responses:
        '204':
          description: Answer DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: DatacontrollerController.deleteById
  /answers:
    post:
      x-controller-name: DatacontrollerController
      x-operation-name: create
      tags:
        - DatacontrollerController
      responses:
        '200':
          description: Answer model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAnswer'
      operationId: DatacontrollerController.create
    patch:
      x-controller-name: DatacontrollerController
      x-operation-name: updateAll
      tags:
        - DatacontrollerController
      responses:
        '200':
          description: Answer PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerPartial'
      operationId: DatacontrollerController.updateAll
    get:
      x-controller-name: DatacontrollerController
      x-operation-name: find
      tags:
        - DatacontrollerController
      responses:
        '200':
          description: Array of Answer model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  answer:
                    type: boolean
                  question_id:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: DatacontrollerController.find
  /categories/count:
    get:
      x-controller-name: CategoryController
      x-operation-name: count
      tags:
        - CategoryController
      responses:
        '200':
          description: Category model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: CategoryController.count
  '/categories/{id}/contractorcategories':
    post:
      x-controller-name: CategoryContractorcategoryController
      x-operation-name: create
      tags:
        - CategoryContractorcategoryController
      responses:
        '200':
          description: Category model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contractorcategory'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewContractorcategoryInCategory'
        x-parameter-index: 1
      operationId: CategoryContractorcategoryController.create
    patch:
      x-controller-name: CategoryContractorcategoryController
      x-operation-name: patch
      tags:
        - CategoryContractorcategoryController
      responses:
        '200':
          description: Category.Contractorcategory PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractorcategoryPartial'
        x-parameter-index: 1
      operationId: CategoryContractorcategoryController.patch
    get:
      x-controller-name: CategoryContractorcategoryController
      x-operation-name: find
      tags:
        - CategoryContractorcategoryController
      responses:
        '200':
          description: Array of Contractorcategory's belonging to Category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contractorcategory'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: CategoryContractorcategoryController.find
    delete:
      x-controller-name: CategoryContractorcategoryController
      x-operation-name: delete
      tags:
        - CategoryContractorcategoryController
      responses:
        '200':
          description: Category.Contractorcategory DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: CategoryContractorcategoryController.delete
  '/categories/{id}/questions':
    post:
      x-controller-name: CategoryQuestionController
      x-operation-name: create
      tags:
        - CategoryQuestionController
      responses:
        '200':
          description: Category model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestionInCategory'
        x-parameter-index: 1
      operationId: CategoryQuestionController.create
    patch:
      x-controller-name: CategoryQuestionController
      x-operation-name: patch
      tags:
        - CategoryQuestionController
      responses:
        '200':
          description: Category.Question PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionPartial'
        x-parameter-index: 1
      operationId: CategoryQuestionController.patch
    get:
      x-controller-name: CategoryQuestionController
      x-operation-name: find
      tags:
        - CategoryQuestionController
      responses:
        '200':
          description: Array of Question's belonging to Category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: CategoryQuestionController.find
    delete:
      x-controller-name: CategoryQuestionController
      x-operation-name: delete
      tags:
        - CategoryQuestionController
      responses:
        '200':
          description: Category.Question DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: CategoryQuestionController.delete
  '/categories/{id}/requests':
    post:
      x-controller-name: CategoryRequestController
      x-operation-name: create
      tags:
        - CategoryRequestController
      responses:
        '200':
          description: Category model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRequestInCategory'
        x-parameter-index: 1
      operationId: CategoryRequestController.create
    patch:
      x-controller-name: CategoryRequestController
      x-operation-name: patch
      tags:
        - CategoryRequestController
      responses:
        '200':
          description: Category.Request PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPartial'
        x-parameter-index: 1
      operationId: CategoryRequestController.patch
    get:
      x-controller-name: CategoryRequestController
      x-operation-name: find
      tags:
        - CategoryRequestController
      responses:
        '200':
          description: Array of Request's belonging to Category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: CategoryRequestController.find
    delete:
      x-controller-name: CategoryRequestController
      x-operation-name: delete
      tags:
        - CategoryRequestController
      responses:
        '200':
          description: Category.Request DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: CategoryRequestController.delete
  '/categories/{id}/subcategories':
    post:
      x-controller-name: CategorySubcategoryController
      x-operation-name: create
      tags:
        - CategorySubcategoryController
      responses:
        '200':
          description: Category model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcategory'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSubcategoryInCategory'
        x-parameter-index: 1
      operationId: CategorySubcategoryController.create
    patch:
      x-controller-name: CategorySubcategoryController
      x-operation-name: patch
      tags:
        - CategorySubcategoryController
      responses:
        '200':
          description: Category.Subcategory PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategoryPartial'
        x-parameter-index: 1
      operationId: CategorySubcategoryController.patch
    get:
      x-controller-name: CategorySubcategoryController
      x-operation-name: find
      tags:
        - CategorySubcategoryController
      responses:
        '200':
          description: Array of Subcategory's belonging to Category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subcategory'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: CategorySubcategoryController.find
    delete:
      x-controller-name: CategorySubcategoryController
      x-operation-name: delete
      tags:
        - CategorySubcategoryController
      responses:
        '200':
          description: Category.Subcategory DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: CategorySubcategoryController.delete
  '/categories/{id}':
    put:
      x-controller-name: CategoryController
      x-operation-name: replaceById
      tags:
        - CategoryController
      responses:
        '204':
          description: Category PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        x-parameter-index: 1
      operationId: CategoryController.replaceById
    patch:
      x-controller-name: CategoryController
      x-operation-name: updateById
      tags:
        - CategoryController
      responses:
        '204':
          description: Category PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPartial'
        x-parameter-index: 1
      operationId: CategoryController.updateById
    get:
      x-controller-name: CategoryController
      x-operation-name: findById
      tags:
        - CategoryController
      responses:
        '200':
          description: Category model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: CategoryController.findById
    delete:
      x-controller-name: CategoryController
      x-operation-name: deleteById
      tags:
        - CategoryController
      responses:
        '204':
          description: Category DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: CategoryController.deleteById
  /categories:
    post:
      x-controller-name: CategoryController
      x-operation-name: create
      tags:
        - CategoryController
      responses:
        '200':
          description: Category model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCategory'
      operationId: CategoryController.create
    patch:
      x-controller-name: CategoryController
      x-operation-name: updateAll
      tags:
        - CategoryController
      responses:
        '200':
          description: Category PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPartial'
      operationId: CategoryController.updateAll
    get:
      x-controller-name: CategoryController
      x-operation-name: find
      tags:
        - CategoryController
      responses:
        '200':
          description: Array of Category model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  name:
                    type: boolean
                  photo:
                    type: boolean
                  precio:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: CategoryController.find
  /comments/count:
    get:
      x-controller-name: CommentController
      x-operation-name: count
      tags:
        - CommentController
      responses:
        '200':
          description: Comment model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: CommentController.count
  '/comments/{id}/usuario':
    get:
      x-controller-name: CommentUsuarioController
      x-operation-name: getUsuario
      tags:
        - CommentUsuarioController
      responses:
        '200':
          description: Usuario belonging to Comment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: CommentUsuarioController.getUsuario
  '/comments/{id}':
    put:
      x-controller-name: CommentController
      x-operation-name: replaceById
      tags:
        - CommentController
      responses:
        '204':
          description: Comment PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        x-parameter-index: 1
      operationId: CommentController.replaceById
    patch:
      x-controller-name: CommentController
      x-operation-name: updateById
      tags:
        - CommentController
      responses:
        '204':
          description: Comment PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentPartial'
        x-parameter-index: 1
      operationId: CommentController.updateById
    get:
      x-controller-name: CommentController
      x-operation-name: findById
      tags:
        - CommentController
      responses:
        '200':
          description: Comment model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: CommentController.findById
    delete:
      x-controller-name: CommentController
      x-operation-name: deleteById
      tags:
        - CommentController
      responses:
        '204':
          description: Comment DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: CommentController.deleteById
  /comments:
    post:
      x-controller-name: CommentController
      x-operation-name: create
      tags:
        - CommentController
      responses:
        '200':
          description: Comment model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      operationId: CommentController.create
    patch:
      x-controller-name: CommentController
      x-operation-name: updateAll
      tags:
        - CommentController
      responses:
        '200':
          description: Comment PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentPartial'
      operationId: CommentController.updateAll
    get:
      x-controller-name: CommentController
      x-operation-name: find
      tags:
        - CommentController
      responses:
        '200':
          description: Array of Comment model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  id_request:
                    type: boolean
                  id_contractor:
                    type: boolean
                  datecreate:
                    type: boolean
                  comment:
                    type: boolean
                  rating:
                    type: boolean
                  id_user:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: CommentController.find
  /contractorcategories/count:
    get:
      x-controller-name: ContractorcategoryController
      x-operation-name: count
      tags:
        - ContractorcategoryController
      responses:
        '200':
          description: Contractorcategory model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: ContractorcategoryController.count
  '/contractorcategories/{id}/category':
    get:
      x-controller-name: ContractorcategoryCategoryController
      x-operation-name: getCategory
      tags:
        - ContractorcategoryCategoryController
      responses:
        '200':
          description: Category belonging to Contractorcategory
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: ContractorcategoryCategoryController.getCategory
  '/contractorcategories/{id}/contractor':
    get:
      x-controller-name: ContractorcategoryContractorController
      x-operation-name: getContractor
      tags:
        - ContractorcategoryContractorController
      responses:
        '200':
          description: Contractor belonging to Contractorcategory
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contractor'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: ContractorcategoryContractorController.getContractor
  '/contractorcategories/{id}':
    put:
      x-controller-name: ContractorcategoryController
      x-operation-name: replaceById
      tags:
        - ContractorcategoryController
      responses:
        '204':
          description: Contractorcategory PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contractorcategory'
        x-parameter-index: 1
      operationId: ContractorcategoryController.replaceById
    patch:
      x-controller-name: ContractorcategoryController
      x-operation-name: updateById
      tags:
        - ContractorcategoryController
      responses:
        '204':
          description: Contractorcategory PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractorcategoryPartial'
        x-parameter-index: 1
      operationId: ContractorcategoryController.updateById
    get:
      x-controller-name: ContractorcategoryController
      x-operation-name: findById
      tags:
        - ContractorcategoryController
      responses:
        '200':
          description: Contractorcategory model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contractorcategory'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: ContractorcategoryController.findById
    delete:
      x-controller-name: ContractorcategoryController
      x-operation-name: deleteById
      tags:
        - ContractorcategoryController
      responses:
        '204':
          description: Contractorcategory DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: ContractorcategoryController.deleteById
  /contractorcategories:
    post:
      x-controller-name: ContractorcategoryController
      x-operation-name: create
      tags:
        - ContractorcategoryController
      responses:
        '200':
          description: Contractorcategory model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contractorcategory'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewContractorcategory'
      operationId: ContractorcategoryController.create
    patch:
      x-controller-name: ContractorcategoryController
      x-operation-name: updateAll
      tags:
        - ContractorcategoryController
      responses:
        '200':
          description: Contractorcategory PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractorcategoryPartial'
      operationId: ContractorcategoryController.updateAll
    get:
      x-controller-name: ContractorcategoryController
      x-operation-name: find
      tags:
        - ContractorcategoryController
      responses:
        '200':
          description: Array of Contractorcategory model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contractorcategory'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  idContr:
                    type: boolean
                  idCateg:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: ContractorcategoryController.find
  /contractors/count:
    get:
      x-controller-name: ContractorController
      x-operation-name: count
      tags:
        - ContractorController
      responses:
        '200':
          description: Contractor model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: ContractorController.count
  '/contractors/{id}/contractorcategories':
    post:
      x-controller-name: ContractorContractorcategoryController
      x-operation-name: create
      tags:
        - ContractorContractorcategoryController
      responses:
        '200':
          description: Contractor model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contractorcategory'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewContractorcategoryInContractor'
        x-parameter-index: 1
      operationId: ContractorContractorcategoryController.create
    patch:
      x-controller-name: ContractorContractorcategoryController
      x-operation-name: patch
      tags:
        - ContractorContractorcategoryController
      responses:
        '200':
          description: Contractor.Contractorcategory PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractorcategoryPartial'
        x-parameter-index: 1
      operationId: ContractorContractorcategoryController.patch
    get:
      x-controller-name: ContractorContractorcategoryController
      x-operation-name: find
      tags:
        - ContractorContractorcategoryController
      responses:
        '200':
          description: Array of Contractorcategory's belonging to Contractor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contractorcategory'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: ContractorContractorcategoryController.find
    delete:
      x-controller-name: ContractorContractorcategoryController
      x-operation-name: delete
      tags:
        - ContractorContractorcategoryController
      responses:
        '200':
          description: Contractor.Contractorcategory DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: ContractorContractorcategoryController.delete
  '/contractors/{id}/quotes':
    post:
      x-controller-name: ContractorQuoteController
      x-operation-name: create
      tags:
        - ContractorQuoteController
      responses:
        '200':
          description: Contractor model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuoteInContractor'
        x-parameter-index: 1
      operationId: ContractorQuoteController.create
    patch:
      x-controller-name: ContractorQuoteController
      x-operation-name: patch
      tags:
        - ContractorQuoteController
      responses:
        '200':
          description: Contractor.Quote PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotePartial'
        x-parameter-index: 1
      operationId: ContractorQuoteController.patch
    get:
      x-controller-name: ContractorQuoteController
      x-operation-name: find
      tags:
        - ContractorQuoteController
      responses:
        '200':
          description: Array of Quote's belonging to Contractor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quote'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: ContractorQuoteController.find
    delete:
      x-controller-name: ContractorQuoteController
      x-operation-name: delete
      tags:
        - ContractorQuoteController
      responses:
        '200':
          description: Contractor.Quote DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: ContractorQuoteController.delete
  '/contractors/{id}':
    put:
      x-controller-name: ContractorController
      x-operation-name: replaceById
      tags:
        - ContractorController
      responses:
        '204':
          description: Contractor PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contractor'
        x-parameter-index: 1
      operationId: ContractorController.replaceById
    patch:
      x-controller-name: ContractorController
      x-operation-name: updateById
      tags:
        - ContractorController
      responses:
        '204':
          description: Contractor PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractorPartial'
        x-parameter-index: 1
      operationId: ContractorController.updateById
    get:
      x-controller-name: ContractorController
      x-operation-name: findById
      tags:
        - ContractorController
      responses:
        '200':
          description: Contractor model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contractor'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: ContractorController.findById
    delete:
      x-controller-name: ContractorController
      x-operation-name: deleteById
      tags:
        - ContractorController
      responses:
        '204':
          description: Contractor DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: ContractorController.deleteById
  /contractors:
    post:
      x-controller-name: ContractorController
      x-operation-name: create
      tags:
        - ContractorController
      responses:
        '200':
          description: Contractor model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contractor'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewContractor'
      operationId: ContractorController.create
    patch:
      x-controller-name: ContractorController
      x-operation-name: updateAll
      tags:
        - ContractorController
      responses:
        '200':
          description: Contractor PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractorPartial'
      operationId: ContractorController.updateAll
    get:
      x-controller-name: ContractorController
      x-operation-name: find
      tags:
        - ContractorController
      responses:
        '200':
          description: Array of Contractor model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contractor'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  iduserauth:
                    type: boolean
                  name:
                    type: boolean
                  postal_code:
                    type: boolean
                  capacity:
                    type: boolean
                  active:
                    type: boolean
                  rating:
                    type: boolean
                  email:
                    type: boolean
                  address:
                    type: boolean
                  photo:
                    type: boolean
                  cellphone:
                    type: boolean
                  description:
                    type: boolean
                  photo1:
                    type: boolean
                  photo2:
                    type: boolean
                  photo3:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: ContractorController.find
  /extras/count:
    get:
      x-controller-name: ExtraController
      x-operation-name: count
      tags:
        - ExtraController
      responses:
        '200':
          description: Extra model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: ExtraController.count
  '/extras/{id}':
    put:
      x-controller-name: ExtraController
      x-operation-name: replaceById
      tags:
        - ExtraController
      responses:
        '204':
          description: Extra PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Extra'
        x-parameter-index: 1
      operationId: ExtraController.replaceById
    patch:
      x-controller-name: ExtraController
      x-operation-name: updateById
      tags:
        - ExtraController
      responses:
        '204':
          description: Extra PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtraPartial'
        x-parameter-index: 1
      operationId: ExtraController.updateById
    get:
      x-controller-name: ExtraController
      x-operation-name: findById
      tags:
        - ExtraController
      responses:
        '200':
          description: Extra model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extra'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: ExtraController.findById
    delete:
      x-controller-name: ExtraController
      x-operation-name: deleteById
      tags:
        - ExtraController
      responses:
        '204':
          description: Extra DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: ExtraController.deleteById
  /extras:
    post:
      x-controller-name: ExtraController
      x-operation-name: create
      tags:
        - ExtraController
      responses:
        '200':
          description: Extra model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extra'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExtra'
      operationId: ExtraController.create
    patch:
      x-controller-name: ExtraController
      x-operation-name: updateAll
      tags:
        - ExtraController
      responses:
        '200':
          description: Extra PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtraPartial'
      operationId: ExtraController.updateAll
    get:
      x-controller-name: ExtraController
      x-operation-name: find
      tags:
        - ExtraController
      responses:
        '200':
          description: Array of Extra model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Extra'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  id_quote:
                    type: boolean
                  amount:
                    type: boolean
                  description:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
      operationId: ExtraController.find
  /legals/count:
    get:
      x-controller-name: LegalController
      x-operation-name: count
      tags:
        - LegalController
      responses:
        '200':
          description: Legal model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: LegalController.count
  '/legals/{id}':
    put:
      x-controller-name: LegalController
      x-operation-name: replaceById
      tags:
        - LegalController
      responses:
        '204':
          description: Legal PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Legal'
        x-parameter-index: 1
      operationId: LegalController.replaceById
    patch:
      x-controller-name: LegalController
      x-operation-name: updateById
      tags:
        - LegalController
      responses:
        '204':
          description: Legal PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalPartial'
        x-parameter-index: 1
      operationId: LegalController.updateById
    get:
      x-controller-name: LegalController
      x-operation-name: findById
      tags:
        - LegalController
      responses:
        '200':
          description: Legal model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Legal'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: LegalController.findById
    delete:
      x-controller-name: LegalController
      x-operation-name: deleteById
      tags:
        - LegalController
      responses:
        '204':
          description: Legal DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: LegalController.deleteById
  /legals:
    post:
      x-controller-name: LegalController
      x-operation-name: create
      tags:
        - LegalController
      responses:
        '200':
          description: Legal model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Legal'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewLegal'
      operationId: LegalController.create
    patch:
      x-controller-name: LegalController
      x-operation-name: updateAll
      tags:
        - LegalController
      responses:
        '200':
          description: Legal PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalPartial'
      operationId: LegalController.updateAll
    get:
      x-controller-name: LegalController
      x-operation-name: find
      tags:
        - LegalController
      responses:
        '200':
          description: Array of Legal model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Legal'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  title:
                    type: boolean
                  text:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
      operationId: LegalController.find
  /parameters/count:
    get:
      x-controller-name: ParameterController
      x-operation-name: count
      tags:
        - ParameterController
      responses:
        '200':
          description: Parameter model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: ParameterController.count
  '/parameters/{id}':
    put:
      x-controller-name: ParameterController
      x-operation-name: replaceById
      tags:
        - ParameterController
      responses:
        '204':
          description: Parameter PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parameter'
        x-parameter-index: 1
      operationId: ParameterController.replaceById
    patch:
      x-controller-name: ParameterController
      x-operation-name: updateById
      tags:
        - ParameterController
      responses:
        '204':
          description: Parameter PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParameterPartial'
        x-parameter-index: 1
      operationId: ParameterController.updateById
    get:
      x-controller-name: ParameterController
      x-operation-name: findById
      tags:
        - ParameterController
      responses:
        '200':
          description: Parameter model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parameter'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: ParameterController.findById
    delete:
      x-controller-name: ParameterController
      x-operation-name: deleteById
      tags:
        - ParameterController
      responses:
        '204':
          description: Parameter DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: ParameterController.deleteById
  /parameters:
    post:
      x-controller-name: ParameterController
      x-operation-name: create
      tags:
        - ParameterController
      responses:
        '200':
          description: Parameter model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewParameter'
      operationId: ParameterController.create
    patch:
      x-controller-name: ParameterController
      x-operation-name: updateAll
      tags:
        - ParameterController
      responses:
        '200':
          description: Parameter PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParameterPartial'
      operationId: ParameterController.updateAll
    get:
      x-controller-name: ParameterController
      x-operation-name: find
      tags:
        - ParameterController
      responses:
        '200':
          description: Array of Parameter model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Parameter'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  name:
                    type: boolean
                  porcent:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
      operationId: ParameterController.find
  /ping:
    get:
      x-controller-name: PingController
      x-operation-name: ping
      tags:
        - PingController
      responses:
        '200':
          description: Ping Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  greeting:
                    type: string
                  date:
                    type: string
                  url:
                    type: string
                  headers:
                    type: object
                    properties:
                      Content-Type:
                        type: string
                    additionalProperties: true
      operationId: PingController.ping
  /questions/count:
    get:
      x-controller-name: QuestionController
      x-operation-name: count
      tags:
        - QuestionController
      responses:
        '200':
          description: Question model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: QuestionController.count
  '/questions/{id}/answers':
    post:
      x-controller-name: QuestionAnswerController
      x-operation-name: create
      tags:
        - QuestionAnswerController
      responses:
        '200':
          description: Question model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAnswerInQuestion'
        x-parameter-index: 1
      operationId: QuestionAnswerController.create
    patch:
      x-controller-name: QuestionAnswerController
      x-operation-name: patch
      tags:
        - QuestionAnswerController
      responses:
        '200':
          description: Question.Answer PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerPartial'
        x-parameter-index: 1
      operationId: QuestionAnswerController.patch
    get:
      x-controller-name: QuestionAnswerController
      x-operation-name: find
      tags:
        - QuestionAnswerController
      responses:
        '200':
          description: Array of Answer's belonging to Question
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: QuestionAnswerController.find
    delete:
      x-controller-name: QuestionAnswerController
      x-operation-name: delete
      tags:
        - QuestionAnswerController
      responses:
        '200':
          description: Question.Answer DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: QuestionAnswerController.delete
  '/questions/{id}/useranswers':
    post:
      x-controller-name: QuestionUseranswerController
      x-operation-name: create
      tags:
        - QuestionUseranswerController
      responses:
        '200':
          description: Question model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Useranswer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUseranswerInQuestion'
        x-parameter-index: 1
      operationId: QuestionUseranswerController.create
    patch:
      x-controller-name: QuestionUseranswerController
      x-operation-name: patch
      tags:
        - QuestionUseranswerController
      responses:
        '200':
          description: Question.Useranswer PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UseranswerPartial'
        x-parameter-index: 1
      operationId: QuestionUseranswerController.patch
    get:
      x-controller-name: QuestionUseranswerController
      x-operation-name: find
      tags:
        - QuestionUseranswerController
      responses:
        '200':
          description: Array of Useranswer's belonging to Question
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Useranswer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: QuestionUseranswerController.find
    delete:
      x-controller-name: QuestionUseranswerController
      x-operation-name: delete
      tags:
        - QuestionUseranswerController
      responses:
        '200':
          description: Question.Useranswer DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: QuestionUseranswerController.delete
  '/questions/{id}':
    put:
      x-controller-name: QuestionController
      x-operation-name: replaceById
      tags:
        - QuestionController
      responses:
        '204':
          description: Question PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
        x-parameter-index: 1
      operationId: QuestionController.replaceById
    patch:
      x-controller-name: QuestionController
      x-operation-name: updateById
      tags:
        - QuestionController
      responses:
        '204':
          description: Question PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionPartial'
        x-parameter-index: 1
      operationId: QuestionController.updateById
    get:
      x-controller-name: QuestionController
      x-operation-name: findById
      tags:
        - QuestionController
      responses:
        '200':
          description: Question model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: QuestionController.findById
    delete:
      x-controller-name: QuestionController
      x-operation-name: deleteById
      tags:
        - QuestionController
      responses:
        '204':
          description: Question DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: QuestionController.deleteById
  /questions:
    post:
      x-controller-name: QuestionController
      x-operation-name: create
      tags:
        - QuestionController
      responses:
        '200':
          description: Question model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuestion'
      operationId: QuestionController.create
    patch:
      x-controller-name: QuestionController
      x-operation-name: updateAll
      tags:
        - QuestionController
      responses:
        '200':
          description: Question PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionPartial'
      operationId: QuestionController.updateAll
    get:
      x-controller-name: QuestionController
      x-operation-name: find
      tags:
        - QuestionController
      responses:
        '200':
          description: Array of Question model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  cat_id:
                    type: boolean
                  guide:
                    type: boolean
                  type:
                    type: boolean
                  question:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: QuestionController.find
  /quotes/count:
    get:
      x-controller-name: QuoteController
      x-operation-name: count
      tags:
        - QuoteController
      responses:
        '200':
          description: Quote model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: QuoteController.count
  '/quotes/{id}/contractor':
    get:
      x-controller-name: QuoteContractorController
      x-operation-name: getContractor
      tags:
        - QuoteContractorController
      responses:
        '200':
          description: Contractor belonging to Quote
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contractor'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: QuoteContractorController.getContractor
  '/quotes/{id}/extras':
    post:
      x-controller-name: QuoteExtraController
      x-operation-name: create
      tags:
        - QuoteExtraController
      responses:
        '200':
          description: Quote model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extra'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExtraInQuote'
        x-parameter-index: 1
      operationId: QuoteExtraController.create
    patch:
      x-controller-name: QuoteExtraController
      x-operation-name: patch
      tags:
        - QuoteExtraController
      responses:
        '200':
          description: Quote.Extra PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtraPartial'
        x-parameter-index: 1
      operationId: QuoteExtraController.patch
    get:
      x-controller-name: QuoteExtraController
      x-operation-name: find
      tags:
        - QuoteExtraController
      responses:
        '200':
          description: Array of Extra's belonging to Quote
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Extra'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: QuoteExtraController.find
    delete:
      x-controller-name: QuoteExtraController
      x-operation-name: delete
      tags:
        - QuoteExtraController
      responses:
        '200':
          description: Quote.Extra DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: QuoteExtraController.delete
  '/quotes/{id}/request':
    get:
      x-controller-name: QuoteRequestController
      x-operation-name: getRequest
      tags:
        - QuoteRequestController
      responses:
        '200':
          description: Request belonging to Quote
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: QuoteRequestController.getRequest
  '/quotes/{id}':
    put:
      x-controller-name: QuoteController
      x-operation-name: replaceById
      tags:
        - QuoteController
      responses:
        '204':
          description: Quote PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quote'
        x-parameter-index: 1
      operationId: QuoteController.replaceById
    patch:
      x-controller-name: QuoteController
      x-operation-name: updateById
      tags:
        - QuoteController
      responses:
        '204':
          description: Quote PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotePartial'
        x-parameter-index: 1
      operationId: QuoteController.updateById
    get:
      x-controller-name: QuoteController
      x-operation-name: findById
      tags:
        - QuoteController
      responses:
        '200':
          description: Quote model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: QuoteController.findById
    delete:
      x-controller-name: QuoteController
      x-operation-name: deleteById
      tags:
        - QuoteController
      responses:
        '204':
          description: Quote DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: QuoteController.deleteById
  /quotes:
    post:
      x-controller-name: QuoteController
      x-operation-name: create
      tags:
        - QuoteController
      responses:
        '200':
          description: Quote model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuote'
      operationId: QuoteController.create
    patch:
      x-controller-name: QuoteController
      x-operation-name: updateAll
      tags:
        - QuoteController
      responses:
        '200':
          description: Quote PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotePartial'
      operationId: QuoteController.updateAll
    get:
      x-controller-name: QuoteController
      x-operation-name: find
      tags:
        - QuoteController
      responses:
        '200':
          description: Array of Quote model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quote'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  createDate:
                    type: boolean
                  accepted:
                    type: boolean
                  eta:
                    type: boolean
                  comment:
                    type: boolean
                  price:
                    type: boolean
                  request_id:
                    type: boolean
                  contractor_id:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: QuoteController.find
  /requests/count:
    get:
      x-controller-name: RequestController
      x-operation-name: count
      tags:
        - RequestController
      responses:
        '200':
          description: Request model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: RequestController.count
  '/requests/{id}/category':
    get:
      x-controller-name: RequestCategoryController
      x-operation-name: getCategory
      tags:
        - RequestCategoryController
      responses:
        '200':
          description: Category belonging to Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: RequestCategoryController.getCategory
  '/requests/{id}/quotes':
    post:
      x-controller-name: RequestQuoteController
      x-operation-name: create
      tags:
        - RequestQuoteController
      responses:
        '200':
          description: Request model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewQuoteInRequest'
        x-parameter-index: 1
      operationId: RequestQuoteController.create
    patch:
      x-controller-name: RequestQuoteController
      x-operation-name: patch
      tags:
        - RequestQuoteController
      responses:
        '200':
          description: Request.Quote PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotePartial'
        x-parameter-index: 1
      operationId: RequestQuoteController.patch
    get:
      x-controller-name: RequestQuoteController
      x-operation-name: find
      tags:
        - RequestQuoteController
      responses:
        '200':
          description: Array of Quote's belonging to Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quote'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: RequestQuoteController.find
    delete:
      x-controller-name: RequestQuoteController
      x-operation-name: delete
      tags:
        - RequestQuoteController
      responses:
        '200':
          description: Request.Quote DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: RequestQuoteController.delete
  '/requests/{id}/useranswers':
    post:
      x-controller-name: RequestUseranswerController
      x-operation-name: create
      tags:
        - RequestUseranswerController
      responses:
        '200':
          description: Request model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Useranswer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUseranswerInRequest'
        x-parameter-index: 1
      operationId: RequestUseranswerController.create
    patch:
      x-controller-name: RequestUseranswerController
      x-operation-name: patch
      tags:
        - RequestUseranswerController
      responses:
        '200':
          description: Request.Useranswer PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UseranswerPartial'
        x-parameter-index: 1
      operationId: RequestUseranswerController.patch
    get:
      x-controller-name: RequestUseranswerController
      x-operation-name: find
      tags:
        - RequestUseranswerController
      responses:
        '200':
          description: Array of Useranswer's belonging to Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Useranswer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: RequestUseranswerController.find
    delete:
      x-controller-name: RequestUseranswerController
      x-operation-name: delete
      tags:
        - RequestUseranswerController
      responses:
        '200':
          description: Request.Useranswer DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: RequestUseranswerController.delete
  '/requests/{id}/usuario':
    get:
      x-controller-name: RequestUsuarioController
      x-operation-name: getUsuario
      tags:
        - RequestUsuarioController
      responses:
        '200':
          description: Usuario belonging to Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: RequestUsuarioController.getUsuario
  '/requests/{id}':
    put:
      x-controller-name: RequestController
      x-operation-name: replaceById
      tags:
        - RequestController
      responses:
        '204':
          description: Request PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        x-parameter-index: 1
      operationId: RequestController.replaceById
    patch:
      x-controller-name: RequestController
      x-operation-name: updateById
      tags:
        - RequestController
      responses:
        '204':
          description: Request PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPartial'
        x-parameter-index: 1
      operationId: RequestController.updateById
    get:
      x-controller-name: RequestController
      x-operation-name: findById
      tags:
        - RequestController
      responses:
        '200':
          description: Request model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: RequestController.findById
    delete:
      x-controller-name: RequestController
      x-operation-name: deleteById
      tags:
        - RequestController
      responses:
        '204':
          description: Request DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: RequestController.deleteById
  /requests:
    post:
      x-controller-name: RequestController
      x-operation-name: create
      tags:
        - RequestController
      responses:
        '200':
          description: Request model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRequest'
      operationId: RequestController.create
    patch:
      x-controller-name: RequestController
      x-operation-name: updateAll
      tags:
        - RequestController
      responses:
        '200':
          description: Request PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPartial'
      operationId: RequestController.updateAll
    get:
      x-controller-name: RequestController
      x-operation-name: find
      tags:
        - RequestController
      responses:
        '200':
          description: Array of Request model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  postalcode:
                    type: boolean
                  address:
                    type: boolean
                  date:
                    type: boolean
                  status:
                    type: boolean
                  comment:
                    type: boolean
                  photo1:
                    type: boolean
                  photo2:
                    type: boolean
                  photo3:
                    type: boolean
                  cat_id:
                    type: boolean
                  user_id:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: RequestController.find
  /states/count:
    get:
      x-controller-name: StateController
      x-operation-name: count
      tags:
        - StateController
      responses:
        '200':
          description: State model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: StateController.count
  '/states/{id}':
    put:
      x-controller-name: StateController
      x-operation-name: replaceById
      tags:
        - StateController
      responses:
        '204':
          description: State PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
        x-parameter-index: 1
      operationId: StateController.replaceById
    patch:
      x-controller-name: StateController
      x-operation-name: updateById
      tags:
        - StateController
      responses:
        '204':
          description: State PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatePartial'
        x-parameter-index: 1
      operationId: StateController.updateById
    get:
      x-controller-name: StateController
      x-operation-name: findById
      tags:
        - StateController
      responses:
        '200':
          description: State model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: StateController.findById
    delete:
      x-controller-name: StateController
      x-operation-name: deleteById
      tags:
        - StateController
      responses:
        '204':
          description: State DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: StateController.deleteById
  /states:
    post:
      x-controller-name: StateController
      x-operation-name: create
      tags:
        - StateController
      responses:
        '200':
          description: State model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewState'
      operationId: StateController.create
    patch:
      x-controller-name: StateController
      x-operation-name: updateAll
      tags:
        - StateController
      responses:
        '200':
          description: State PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatePartial'
      operationId: StateController.updateAll
    get:
      x-controller-name: StateController
      x-operation-name: find
      tags:
        - StateController
      responses:
        '200':
          description: Array of State model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/State'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  descripcion:
                    type: boolean
                  estado:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
      operationId: StateController.find
  /strypes/count:
    get:
      x-controller-name: StrypeController
      x-operation-name: count
      tags:
        - StrypeController
      responses:
        '200':
          description: Strype model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: StrypeController.count
  '/strypes/{id}/usuario':
    get:
      x-controller-name: StrypeUsuarioController
      x-operation-name: getUsuario
      tags:
        - StrypeUsuarioController
      responses:
        '200':
          description: Usuario belonging to Strype
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: StrypeUsuarioController.getUsuario
  '/strypes/{id}':
    put:
      x-controller-name: StrypeController
      x-operation-name: replaceById
      tags:
        - StrypeController
      responses:
        '204':
          description: Strype PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Strype'
        x-parameter-index: 1
      operationId: StrypeController.replaceById
    patch:
      x-controller-name: StrypeController
      x-operation-name: updateById
      tags:
        - StrypeController
      responses:
        '204':
          description: Strype PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StrypePartial'
        x-parameter-index: 1
      operationId: StrypeController.updateById
    get:
      x-controller-name: StrypeController
      x-operation-name: findById
      tags:
        - StrypeController
      responses:
        '200':
          description: Strype model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Strype'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: StrypeController.findById
    delete:
      x-controller-name: StrypeController
      x-operation-name: deleteById
      tags:
        - StrypeController
      responses:
        '204':
          description: Strype DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: StrypeController.deleteById
  /strypes:
    post:
      x-controller-name: StrypeController
      x-operation-name: create
      tags:
        - StrypeController
      responses:
        '200':
          description: Strype model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Strype'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewStrype'
      operationId: StrypeController.create
    patch:
      x-controller-name: StrypeController
      x-operation-name: updateAll
      tags:
        - StrypeController
      responses:
        '200':
          description: Strype PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StrypePartial'
      operationId: StrypeController.updateAll
    get:
      x-controller-name: StrypeController
      x-operation-name: find
      tags:
        - StrypeController
      responses:
        '200':
          description: Array of Strype model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Strype'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  idCharge:
                    type: boolean
                  amount:
                    type: boolean
                  description:
                    type: boolean
                  created:
                    type: boolean
                  failurecode:
                    type: boolean
                  failuremessage:
                    type: boolean
                  status:
                    type: boolean
                  brand:
                    type: boolean
                  funding:
                    type: boolean
                  id_user:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: StrypeController.find
  /subcategories/count:
    get:
      x-controller-name: SubcategoryController
      x-operation-name: count
      tags:
        - SubcategoryController
      responses:
        '200':
          description: Subcategory model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: SubcategoryController.count
  '/subcategories/{id}':
    put:
      x-controller-name: SubcategoryController
      x-operation-name: replaceById
      tags:
        - SubcategoryController
      responses:
        '204':
          description: Subcategory PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subcategory'
        x-parameter-index: 1
      operationId: SubcategoryController.replaceById
    patch:
      x-controller-name: SubcategoryController
      x-operation-name: updateById
      tags:
        - SubcategoryController
      responses:
        '204':
          description: Subcategory PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategoryPartial'
        x-parameter-index: 1
      operationId: SubcategoryController.updateById
    get:
      x-controller-name: SubcategoryController
      x-operation-name: findById
      tags:
        - SubcategoryController
      responses:
        '200':
          description: Subcategory model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcategory'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: SubcategoryController.findById
    delete:
      x-controller-name: SubcategoryController
      x-operation-name: deleteById
      tags:
        - SubcategoryController
      responses:
        '204':
          description: Subcategory DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: SubcategoryController.deleteById
  /subcategories:
    post:
      x-controller-name: SubcategoryController
      x-operation-name: create
      tags:
        - SubcategoryController
      responses:
        '200':
          description: Subcategory model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subcategory'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSubcategory'
      operationId: SubcategoryController.create
    patch:
      x-controller-name: SubcategoryController
      x-operation-name: updateAll
      tags:
        - SubcategoryController
      responses:
        '200':
          description: Subcategory PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategoryPartial'
      operationId: SubcategoryController.updateAll
    get:
      x-controller-name: SubcategoryController
      x-operation-name: find
      tags:
        - SubcategoryController
      responses:
        '200':
          description: Array of Subcategory model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subcategory'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  icon:
                    type: boolean
                  category_id:
                    type: boolean
                  name:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
      operationId: SubcategoryController.find
  /taxes/count:
    get:
      x-controller-name: TaxController
      x-operation-name: count
      tags:
        - TaxController
      responses:
        '200':
          description: Tax model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: TaxController.count
  '/taxes/{id}':
    put:
      x-controller-name: TaxController
      x-operation-name: replaceById
      tags:
        - TaxController
      responses:
        '204':
          description: Tax PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tax'
        x-parameter-index: 1
      operationId: TaxController.replaceById
    patch:
      x-controller-name: TaxController
      x-operation-name: updateById
      tags:
        - TaxController
      responses:
        '204':
          description: Tax PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxPartial'
        x-parameter-index: 1
      operationId: TaxController.updateById
    get:
      x-controller-name: TaxController
      x-operation-name: findById
      tags:
        - TaxController
      responses:
        '200':
          description: Tax model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tax'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: TaxController.findById
    delete:
      x-controller-name: TaxController
      x-operation-name: deleteById
      tags:
        - TaxController
      responses:
        '204':
          description: Tax DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: TaxController.deleteById
  /taxes:
    post:
      x-controller-name: TaxController
      x-operation-name: create
      tags:
        - TaxController
      responses:
        '200':
          description: Tax model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tax'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTax'
      operationId: TaxController.create
    patch:
      x-controller-name: TaxController
      x-operation-name: updateAll
      tags:
        - TaxController
      responses:
        '200':
          description: Tax PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxPartial'
      operationId: TaxController.updateAll
    get:
      x-controller-name: TaxController
      x-operation-name: find
      tags:
        - TaxController
      responses:
        '200':
          description: Array of Tax model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tax'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  porcent:
                    type: boolean
                  name:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
      operationId: TaxController.find
  /useranswers/count:
    get:
      x-controller-name: UseranswerController
      x-operation-name: count
      tags:
        - UseranswerController
      responses:
        '200':
          description: Useranswer model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: UseranswerController.count
  '/useranswers/{id}/answer':
    get:
      x-controller-name: UseranswerAnswerController
      x-operation-name: getAnswer
      tags:
        - UseranswerAnswerController
      responses:
        '200':
          description: Answer belonging to Useranswer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: UseranswerAnswerController.getAnswer
  '/useranswers/{id}/question':
    get:
      x-controller-name: UseranswerQuestionController
      x-operation-name: getQuestion
      tags:
        - UseranswerQuestionController
      responses:
        '200':
          description: Question belonging to Useranswer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: UseranswerQuestionController.getQuestion
  '/useranswers/{id}/request':
    get:
      x-controller-name: UseranswerRequestController
      x-operation-name: getRequest
      tags:
        - UseranswerRequestController
      responses:
        '200':
          description: Request belonging to Useranswer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: UseranswerRequestController.getRequest
  '/useranswers/{id}':
    put:
      x-controller-name: UseranswerController
      x-operation-name: replaceById
      tags:
        - UseranswerController
      responses:
        '204':
          description: Useranswer PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Useranswer'
        x-parameter-index: 1
      operationId: UseranswerController.replaceById
    patch:
      x-controller-name: UseranswerController
      x-operation-name: updateById
      tags:
        - UseranswerController
      responses:
        '204':
          description: Useranswer PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UseranswerPartial'
        x-parameter-index: 1
      operationId: UseranswerController.updateById
    get:
      x-controller-name: UseranswerController
      x-operation-name: findById
      tags:
        - UseranswerController
      responses:
        '200':
          description: Useranswer model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Useranswer'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: UseranswerController.findById
    delete:
      x-controller-name: UseranswerController
      x-operation-name: deleteById
      tags:
        - UseranswerController
      responses:
        '204':
          description: Useranswer DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: UseranswerController.deleteById
  /useranswers:
    post:
      x-controller-name: UseranswerController
      x-operation-name: create
      tags:
        - UseranswerController
      responses:
        '200':
          description: Useranswer model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Useranswer'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUseranswer'
      operationId: UseranswerController.create
    patch:
      x-controller-name: UseranswerController
      x-operation-name: updateAll
      tags:
        - UseranswerController
      responses:
        '200':
          description: Useranswer PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UseranswerPartial'
      operationId: UseranswerController.updateAll
    get:
      x-controller-name: UseranswerController
      x-operation-name: find
      tags:
        - UseranswerController
      responses:
        '200':
          description: Array of Useranswer model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Useranswer'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  other:
                    type: boolean
                  answer:
                    type: boolean
                  answer_id:
                    type: boolean
                  question_id:
                    type: boolean
                  request_id:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: UseranswerController.find
  /usuarios/count:
    get:
      x-controller-name: UsuarioController
      x-operation-name: count
      tags:
        - UsuarioController
      responses:
        '200':
          description: Usuario model count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: UsuarioController.count
  '/usuarios/{id}/requests':
    post:
      x-controller-name: UsuarioRequestController
      x-operation-name: create
      tags:
        - UsuarioRequestController
      responses:
        '200':
          description: Usuario model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRequestInUsuario'
        x-parameter-index: 1
      operationId: UsuarioRequestController.create
    patch:
      x-controller-name: UsuarioRequestController
      x-operation-name: patch
      tags:
        - UsuarioRequestController
      responses:
        '200':
          description: Usuario.Request PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPartial'
        x-parameter-index: 1
      operationId: UsuarioRequestController.patch
    get:
      x-controller-name: UsuarioRequestController
      x-operation-name: find
      tags:
        - UsuarioRequestController
      responses:
        '200':
          description: Array of Request's belonging to Usuario
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties: true
      operationId: UsuarioRequestController.find
    delete:
      x-controller-name: UsuarioRequestController
      x-operation-name: delete
      tags:
        - UsuarioRequestController
      responses:
        '200':
          description: Usuario.Request DELETE success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      operationId: UsuarioRequestController.delete
  '/usuarios/{id}':
    put:
      x-controller-name: UsuarioController
      x-operation-name: replaceById
      tags:
        - UsuarioController
      responses:
        '204':
          description: Usuario PUT success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
        x-parameter-index: 1
      operationId: UsuarioController.replaceById
    patch:
      x-controller-name: UsuarioController
      x-operation-name: updateById
      tags:
        - UsuarioController
      responses:
        '204':
          description: Usuario PATCH success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioPartial'
        x-parameter-index: 1
      operationId: UsuarioController.updateById
    get:
      x-controller-name: UsuarioController
      x-operation-name: findById
      tags:
        - UsuarioController
      responses:
        '200':
          description: Usuario model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: UsuarioController.findById
    delete:
      x-controller-name: UsuarioController
      x-operation-name: deleteById
      tags:
        - UsuarioController
      responses:
        '204':
          description: Usuario DELETE success
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      operationId: UsuarioController.deleteById
  /usuarios:
    post:
      x-controller-name: UsuarioController
      x-operation-name: create
      tags:
        - UsuarioController
      responses:
        '200':
          description: Usuario model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUsuario'
      operationId: UsuarioController.create
    patch:
      x-controller-name: UsuarioController
      x-operation-name: updateAll
      tags:
        - UsuarioController
      responses:
        '200':
          description: Usuario PATCH success count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
      parameters:
        - name: where
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioPartial'
      operationId: UsuarioController.updateAll
    get:
      x-controller-name: UsuarioController
      x-operation-name: find
      tags:
        - UsuarioController
      responses:
        '200':
          description: Array of Usuario model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
      parameters:
        - name: filter
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              where:
                type: object
              fields:
                type: object
                properties:
                  id:
                    type: boolean
                  name:
                    type: boolean
                  correo:
                    type: boolean
                  postal_code:
                    type: boolean
                  cellphone:
                    type: boolean
                  photo:
                    type: boolean
                  iduserauth:
                    type: boolean
                  connection:
                    type: boolean
              offset:
                type: integer
                minimum: 0
              limit:
                type: integer
                minimum: 0
              skip:
                type: integer
                minimum: 0
              order:
                type: array
                items:
                  type: string
              include:
                type: array
                items:
                  type: object
                  properties:
                    relation:
                      type: string
                    scope:
                      properties:
                        where:
                          type: object
                        fields:
                          type: object
                          properties: {}
                        offset:
                          type: integer
                          minimum: 0
                        limit:
                          type: integer
                          minimum: 0
                        skip:
                          type: integer
                          minimum: 0
                        order:
                          type: array
                          items:
                            type: string
      operationId: UsuarioController.find
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Aseapp/papa-loopback/1.0.0
  - url: 'https://petstore.swagger.io/v2'
components:
  schemas:
    Question:
      title: Question
      properties:
        id:
          type: number
        cat_id:
          type: number
        guide:
          type: string
        type:
          type: string
        question:
          type: string
      required:
        - id
        - cat_id
        - guide
        - type
        - question
    Useranswer:
      title: Useranswer
      properties:
        id:
          type: number
        other:
          type: string
        answer:
          type: string
        answer_id:
          type: number
        question_id:
          type: number
        request_id:
          type: number
      required:
        - id
        - other
        - answer
    NewUseranswerInAnswer:
      title: NewUseranswerInAnswer
      description: >-
        (Schema options: { title: 'NewUseranswerInAnswer', exclude: [ 'id' ],
        optional: [ 'answer_id' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        other:
          type: string
        answer:
          type: string
        answer_id:
          type: number
        question_id:
          type: number
        request_id:
          type: number
      required:
        - other
        - answer
    UseranswerPartial:
      title: UseranswerPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        other:
          type: string
        answer:
          type: string
        answer_id:
          type: number
        question_id:
          type: number
        request_id:
          type: number
    Answer:
      title: Answer
      properties:
        id:
          type: number
        answer:
          type: string
        question_id:
          type: number
      required:
        - id
    NewAnswer:
      title: NewAnswer
      description: '(Schema options: { title: ''NewAnswer'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        answer:
          type: string
        question_id:
          type: number
    AnswerPartial:
      title: AnswerPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        answer:
          type: string
        question_id:
          type: number
    Contractorcategory:
      title: Contractorcategory
      properties:
        id:
          type: number
        idContr:
          type: number
        idCateg:
          type: number
      required:
        - id
    NewContractorcategoryInCategory:
      title: NewContractorcategoryInCategory
      description: >-
        (Schema options: { title: 'NewContractorcategoryInCategory', exclude: [
        'id' ], optional: [ 'idCateg' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        idContr:
          type: number
        idCateg:
          type: number
    ContractorcategoryPartial:
      title: ContractorcategoryPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        idContr:
          type: number
        idCateg:
          type: number
    NewQuestionInCategory:
      title: NewQuestionInCategory
      description: >-
        (Schema options: { title: 'NewQuestionInCategory', exclude: [ 'id' ],
        optional: [ 'cat_id' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        cat_id:
          type: number
        guide:
          type: string
        type:
          type: string
        question:
          type: string
      required:
        - guide
        - type
        - question
    QuestionPartial:
      title: QuestionPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        cat_id:
          type: number
        guide:
          type: string
        type:
          type: string
        question:
          type: string
    Request:
      title: Request
      properties:
        id:
          type: number
        postalcode:
          type: string
        address:
          type: string
        date:
          type: string
          format: date-time
        status:
          type: number
        comment:
          type: string
        photo1:
          type: string
        photo2:
          type: string
        photo3:
          type: string
        cat_id:
          type: number
        user_id:
          type: number
      required:
        - id
        - postalcode
        - address
        - date
        - status
        - comment
        - photo1
        - photo2
        - photo3
    NewRequestInCategory:
      title: NewRequestInCategory
      description: >-
        (Schema options: { title: 'NewRequestInCategory', exclude: [ 'id' ],
        optional: [ 'cat_id' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        postalcode:
          type: string
        address:
          type: string
        date:
          type: string
          format: date-time
        status:
          type: number
        comment:
          type: string
        photo1:
          type: string
        photo2:
          type: string
        photo3:
          type: string
        cat_id:
          type: number
        user_id:
          type: number
      required:
        - postalcode
        - address
        - date
        - status
        - comment
        - photo1
        - photo2
        - photo3
    RequestPartial:
      title: RequestPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        postalcode:
          type: string
        address:
          type: string
        date:
          type: string
          format: date-time
        status:
          type: number
        comment:
          type: string
        photo1:
          type: string
        photo2:
          type: string
        photo3:
          type: string
        cat_id:
          type: number
        user_id:
          type: number
    Subcategory:
      title: Subcategory
      properties:
        id:
          type: number
        icon:
          type: string
        category_id:
          type: number
        name:
          type: string
      required:
        - id
        - icon
        - category_id
        - name
    NewSubcategoryInCategory:
      title: NewSubcategoryInCategory
      description: >-
        (Schema options: { title: 'NewSubcategoryInCategory', exclude: [ 'id' ],
        optional: [ 'category_id' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        icon:
          type: string
        category_id:
          type: number
        name:
          type: string
      required:
        - icon
        - name
    SubcategoryPartial:
      title: SubcategoryPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        icon:
          type: string
        category_id:
          type: number
        name:
          type: string
    Category:
      title: Category
      properties:
        id:
          type: number
        name:
          type: string
        photo:
          type: string
        precio:
          type: number
      required:
        - id
        - name
        - photo
        - precio
    NewCategory:
      title: NewCategory
      description: '(Schema options: { title: ''NewCategory'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        name:
          type: string
        photo:
          type: string
        precio:
          type: number
      required:
        - name
        - photo
        - precio
    CategoryPartial:
      title: CategoryPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        name:
          type: string
        photo:
          type: string
        precio:
          type: number
    Usuario:
      title: Usuario
      properties:
        id:
          type: number
        name:
          type: string
        correo:
          type: string
        postal_code:
          type: string
        cellphone:
          type: number
        photo:
          type: string
        iduserauth:
          type: string
        connection:
          type: string
      required:
        - id
        - name
        - correo
        - postal_code
        - cellphone
        - photo
        - iduserauth
        - connection
    Comment:
      title: Comment
      properties:
        id:
          type: number
        id_request:
          type: number
        id_contractor:
          type: number
        datecreate:
          type: string
          format: date-time
        comment:
          type: string
        rating:
          type: number
        id_user:
          type: number
      required:
        - id
        - id_request
        - id_contractor
        - datecreate
        - comment
        - rating
    NewComment:
      title: NewComment
      description: '(Schema options: { title: ''NewComment'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        id_request:
          type: number
        id_contractor:
          type: number
        datecreate:
          type: string
          format: date-time
        comment:
          type: string
        rating:
          type: number
        id_user:
          type: number
      required:
        - id_request
        - id_contractor
        - datecreate
        - comment
        - rating
    CommentPartial:
      title: CommentPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        id_request:
          type: number
        id_contractor:
          type: number
        datecreate:
          type: string
          format: date-time
        comment:
          type: string
        rating:
          type: number
        id_user:
          type: number
    NewContractorcategoryInContractor:
      title: NewContractorcategoryInContractor
      description: >-
        (Schema options: { title: 'NewContractorcategoryInContractor', exclude:
        [ 'id' ], optional: [ 'idContr' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        idContr:
          type: number
        idCateg:
          type: number
    Quote:
      title: Quote
      properties:
        id:
          type: number
        createDate:
          type: string
          format: date-time
        accepted:
          type: boolean
        eta:
          type: string
        comment:
          type: string
        price:
          type: number
        request_id:
          type: number
        contractor_id:
          type: number
      required:
        - id
        - createDate
        - accepted
        - eta
        - comment
        - price
    NewQuoteInContractor:
      title: NewQuoteInContractor
      description: >-
        (Schema options: { title: 'NewQuoteInContractor', exclude: [ 'id' ],
        optional: [ 'contractor_id' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        createDate:
          type: string
          format: date-time
        accepted:
          type: boolean
        eta:
          type: string
        comment:
          type: string
        price:
          type: number
        request_id:
          type: number
        contractor_id:
          type: number
      required:
        - createDate
        - accepted
        - eta
        - comment
        - price
    QuotePartial:
      title: QuotePartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        createDate:
          type: string
          format: date-time
        accepted:
          type: boolean
        eta:
          type: string
        comment:
          type: string
        price:
          type: number
        request_id:
          type: number
        contractor_id:
          type: number
    Contractor:
      title: Contractor
      properties:
        id:
          type: number
        iduserauth:
          type: string
        name:
          type: string
        postal_code:
          type: string
        capacity:
          type: number
        active:
          type: boolean
        rating:
          type: number
        email:
          type: string
        address:
          type: string
        photo:
          type: string
        cellphone:
          type: string
        description:
          type: string
        photo1:
          type: string
        photo2:
          type: string
        photo3:
          type: string
      required:
        - id
        - iduserauth
        - name
        - postal_code
        - capacity
        - active
        - rating
        - email
        - address
        - photo
        - cellphone
        - description
        - photo1
        - photo2
        - photo3
    NewContractor:
      title: NewContractor
      description: '(Schema options: { title: ''NewContractor'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        iduserauth:
          type: string
        name:
          type: string
        postal_code:
          type: string
        capacity:
          type: number
        active:
          type: boolean
        rating:
          type: number
        email:
          type: string
        address:
          type: string
        photo:
          type: string
        cellphone:
          type: string
        description:
          type: string
        photo1:
          type: string
        photo2:
          type: string
        photo3:
          type: string
      required:
        - iduserauth
        - name
        - postal_code
        - capacity
        - active
        - rating
        - email
        - address
        - photo
        - cellphone
        - description
        - photo1
        - photo2
        - photo3
    ContractorPartial:
      title: ContractorPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        iduserauth:
          type: string
        name:
          type: string
        postal_code:
          type: string
        capacity:
          type: number
        active:
          type: boolean
        rating:
          type: number
        email:
          type: string
        address:
          type: string
        photo:
          type: string
        cellphone:
          type: string
        description:
          type: string
        photo1:
          type: string
        photo2:
          type: string
        photo3:
          type: string
    NewContractorcategory:
      title: NewContractorcategory
      description: '(Schema options: { title: ''NewContractorcategory'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        idContr:
          type: number
        idCateg:
          type: number
    Extra:
      title: Extra
      properties:
        id:
          type: number
        id_quote:
          type: number
        amount:
          type: number
        description:
          type: string
      required:
        - id
        - id_quote
        - amount
        - description
    NewExtra:
      title: NewExtra
      description: '(Schema options: { title: ''NewExtra'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        id_quote:
          type: number
        amount:
          type: number
        description:
          type: string
      required:
        - id_quote
        - amount
        - description
    ExtraPartial:
      title: ExtraPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        id_quote:
          type: number
        amount:
          type: number
        description:
          type: string
    Legal:
      title: Legal
      properties:
        id:
          type: number
        title:
          type: string
        text:
          type: string
      required:
        - id
        - title
        - text
    NewLegal:
      title: NewLegal
      description: '(Schema options: { title: ''NewLegal'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        title:
          type: string
        text:
          type: string
      required:
        - title
        - text
    LegalPartial:
      title: LegalPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        title:
          type: string
        text:
          type: string
    Parameter:
      title: Parameter
      properties:
        id:
          type: number
        name:
          type: string
        porcent:
          type: number
      required:
        - id
        - name
        - porcent
    NewParameter:
      title: NewParameter
      description: '(Schema options: { title: ''NewParameter'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        name:
          type: string
        porcent:
          type: number
      required:
        - name
        - porcent
    ParameterPartial:
      title: ParameterPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        name:
          type: string
        porcent:
          type: number
    NewAnswerInQuestion:
      title: NewAnswerInQuestion
      description: >-
        (Schema options: { title: 'NewAnswerInQuestion', exclude: [ 'id' ],
        optional: [ 'question_id' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        answer:
          type: string
        question_id:
          type: number
    NewUseranswerInQuestion:
      title: NewUseranswerInQuestion
      description: >-
        (Schema options: { title: 'NewUseranswerInQuestion', exclude: [ 'id' ],
        optional: [ 'question_id' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        other:
          type: string
        answer:
          type: string
        answer_id:
          type: number
        question_id:
          type: number
        request_id:
          type: number
      required:
        - other
        - answer
    NewQuestion:
      title: NewQuestion
      description: '(Schema options: { title: ''NewQuestion'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        cat_id:
          type: number
        guide:
          type: string
        type:
          type: string
        question:
          type: string
      required:
        - cat_id
        - guide
        - type
        - question
    NewExtraInQuote:
      title: NewExtraInQuote
      description: >-
        (Schema options: { title: 'NewExtraInQuote', exclude: [ 'id' ],
        optional: [ 'id_quote' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        id_quote:
          type: number
        amount:
          type: number
        description:
          type: string
      required:
        - amount
        - description
    NewQuote:
      title: NewQuote
      description: '(Schema options: { title: ''NewQuote'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        createDate:
          type: string
          format: date-time
        accepted:
          type: boolean
        eta:
          type: string
        comment:
          type: string
        price:
          type: number
        request_id:
          type: number
        contractor_id:
          type: number
      required:
        - createDate
        - accepted
        - eta
        - comment
        - price
    NewQuoteInRequest:
      title: NewQuoteInRequest
      description: >-
        (Schema options: { title: 'NewQuoteInRequest', exclude: [ 'id' ],
        optional: [ 'request_id' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        createDate:
          type: string
          format: date-time
        accepted:
          type: boolean
        eta:
          type: string
        comment:
          type: string
        price:
          type: number
        request_id:
          type: number
        contractor_id:
          type: number
      required:
        - createDate
        - accepted
        - eta
        - comment
        - price
    NewUseranswerInRequest:
      title: NewUseranswerInRequest
      description: >-
        (Schema options: { title: 'NewUseranswerInRequest', exclude: [ 'id' ],
        optional: [ 'request_id' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        other:
          type: string
        answer:
          type: string
        answer_id:
          type: number
        question_id:
          type: number
        request_id:
          type: number
      required:
        - other
        - answer
    NewRequest:
      title: NewRequest
      description: '(Schema options: { title: ''NewRequest'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        postalcode:
          type: string
        address:
          type: string
        date:
          type: string
          format: date-time
        status:
          type: number
        comment:
          type: string
        photo1:
          type: string
        photo2:
          type: string
        photo3:
          type: string
        cat_id:
          type: number
        user_id:
          type: number
      required:
        - postalcode
        - address
        - date
        - status
        - comment
        - photo1
        - photo2
        - photo3
    State:
      title: State
      properties:
        id:
          type: number
        descripcion:
          type: string
        estado:
          type: string
      required:
        - id
        - descripcion
        - estado
    NewState:
      title: NewState
      description: '(Schema options: { title: ''NewState'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        descripcion:
          type: string
        estado:
          type: string
      required:
        - descripcion
        - estado
    StatePartial:
      title: StatePartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        descripcion:
          type: string
        estado:
          type: string
    Strype:
      title: Strype
      properties:
        id:
          type: number
        idCharge:
          type: string
        amount:
          type: number
        description:
          type: string
        created:
          type: string
          format: date-time
        failurecode:
          type: string
        failuremessage:
          type: string
        status:
          type: string
        brand:
          type: string
        funding:
          type: string
        id_user:
          type: number
      required:
        - id
        - idCharge
        - amount
        - description
        - created
        - failurecode
        - failuremessage
        - status
        - brand
        - funding
    NewStrype:
      title: NewStrype
      description: '(Schema options: { title: ''NewStrype'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        idCharge:
          type: string
        amount:
          type: number
        description:
          type: string
        created:
          type: string
          format: date-time
        failurecode:
          type: string
        failuremessage:
          type: string
        status:
          type: string
        brand:
          type: string
        funding:
          type: string
        id_user:
          type: number
      required:
        - idCharge
        - amount
        - description
        - created
        - failurecode
        - failuremessage
        - status
        - brand
        - funding
    StrypePartial:
      title: StrypePartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        idCharge:
          type: string
        amount:
          type: number
        description:
          type: string
        created:
          type: string
          format: date-time
        failurecode:
          type: string
        failuremessage:
          type: string
        status:
          type: string
        brand:
          type: string
        funding:
          type: string
        id_user:
          type: number
    NewSubcategory:
      title: NewSubcategory
      description: '(Schema options: { title: ''NewSubcategory'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        icon:
          type: string
        category_id:
          type: number
        name:
          type: string
      required:
        - icon
        - category_id
        - name
    Tax:
      title: Tax
      properties:
        id:
          type: number
        porcent:
          type: number
        name:
          type: string
      required:
        - id
        - porcent
        - name
    NewTax:
      title: NewTax
      description: '(Schema options: { title: ''NewTax'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        porcent:
          type: number
        name:
          type: string
      required:
        - porcent
        - name
    TaxPartial:
      title: TaxPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        porcent:
          type: number
        name:
          type: string
    NewUseranswer:
      title: NewUseranswer
      description: '(Schema options: { title: ''NewUseranswer'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        other:
          type: string
        answer:
          type: string
        answer_id:
          type: number
        question_id:
          type: number
        request_id:
          type: number
      required:
        - other
        - answer
    NewRequestInUsuario:
      title: NewRequestInUsuario
      description: >-
        (Schema options: { title: 'NewRequestInUsuario', exclude: [ 'id' ],
        optional: [ 'user_id' ] })
      not:
        anyOf:
          - required:
              - id
      properties:
        postalcode:
          type: string
        address:
          type: string
        date:
          type: string
          format: date-time
        status:
          type: number
        comment:
          type: string
        photo1:
          type: string
        photo2:
          type: string
        photo3:
          type: string
        cat_id:
          type: number
        user_id:
          type: number
      required:
        - postalcode
        - address
        - date
        - status
        - comment
        - photo1
        - photo2
        - photo3
    NewUsuario:
      title: NewUsuario
      description: '(Schema options: { title: ''NewUsuario'', exclude: [ ''id'' ] })'
      not:
        anyOf:
          - required:
              - id
      properties:
        name:
          type: string
        correo:
          type: string
        postal_code:
          type: string
        cellphone:
          type: number
        photo:
          type: string
        iduserauth:
          type: string
        connection:
          type: string
      required:
        - name
        - correo
        - postal_code
        - cellphone
        - photo
        - iduserauth
        - connection
    UsuarioPartial:
      title: UsuarioPartial
      description: '(Schema options: { partial: true })'
      properties:
        id:
          type: number
        name:
          type: string
        correo:
          type: string
        postal_code:
          type: string
        cellphone:
          type: number
        photo:
          type: string
        iduserauth:
          type: string
        connection:
          type: string