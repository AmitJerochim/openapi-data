openapi: 3.0.0
servers: []
info:
  description: API for the ATM project
  version: "1.1.1"
  title: ATM API
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: users
    description: Operations available to regular users
paths:
  /assets:
    post:
      tags:
        - admins
      summary: creates new asset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
        description: Asset to add
      responses:
        '201': 
          description: created
          
    get:
      tags:
        - admins
      summary: gets all assets
      responses:
        '200': 
          description: all assets
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
          
  /assets/{id}:
    put:
      tags:
        - admins
      summary: updates asset
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
        description: Asset to update
      responses:
        '200': 
          description: updated
    delete:
      tags:
        - admins
      summary: deletes asset
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: deleted
          
    get:
      tags:
        - users
      summary: gets the asset
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: Asset details
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Asset'
    
  /steps:
    post:
      tags:
        - admins
      summary: creates new step
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Step'
        description: Step to add
      responses:
        '201': 
          description: created
          
    get:
      tags:
        - admins
      summary: gets all steps
      responses:
        '200': 
          description: all steps
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Step'
          
  /steps/{id}:
    put:
      tags:
        - admins
      summary: updates step
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Step'
        description: Step to update
      responses:
        '200': 
          description: updated
    delete:
      tags:
        - admins
      summary: deletes step
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: deleted
          
    get:
      tags:
        - admins
      summary: gets the step
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: Step details
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Step'
  
  /phases:
    post:
      tags:
        - admins
      summary: creates new phase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phase'
        description: Phase to add
      responses:
        '201': 
          description: created
          
    get:
      tags:
        - admins
      summary: gets all phases
      responses:
        '200': 
          description: all phases
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Phase'
          
  /phases/{id}:
    put:
      tags:
        - admins
      summary: updates phase
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phase'
        description: Phase to update
      responses:
        '200': 
          description: updated
    delete:
      tags:
        - admins
      summary: deletes phase
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: deleted
          
    get:
      tags:
        - admins
      summary: gets the phase
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: Phase details
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Phase'
                
  /procedures:
    post:
      tags:
        - admins
      summary: creates new procedure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Procedure'
        description: Procedure to add
      responses:
        '201': 
          description: created
          
    get:
      tags:
        - admins
      summary: gets all procedures
      responses:
        '200': 
          description: all procedures
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Procedure'
          
  /procedures/{id}:
    put:
      tags:
        - admins
      summary: updates procedure
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Procedure'
        description: Procedure to update
      responses:
        '200': 
          description: updated
    delete:
      tags:
        - admins
      summary: deletes procedure
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: deleted
          
    get:
      tags:
        - admins
      summary: gets the procedure
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: Procedure details
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Procedure'
    
  /prerequisites:
    post:
      tags:
        - admins
      summary: creates new prerequisite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prerequisite'
        description: Prerequisite to add
      responses:
        '201': 
          description: created
          
    get:
      tags:
        - admins
      summary: gets all prerequisites
      responses:
        '200': 
          description: all prerequisites
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Prerequisite'
          
  /prerequisites/{id}:
    put:
      tags:
        - admins
      summary: updates prerequisite
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prerequisite'
        description: Prerequisite to update
      responses:
        '200': 
          description: updated
    delete:
      tags:
        - admins
      summary: deletes prerequisite
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: deleted
          
    get:
      tags:
        - admins
      summary: gets the prerequisite
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: Prerequisite details
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Prerequisite'
    
     
      
  /maintenanceRecords/{id}:
    get:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      tags:
        - users
      summary: gets maintenance record
      operationId: getMaintenanceRecordById
      responses:
        '200':
          description: Maintenance Record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceRecord'
        '404':
          description: Id not found
    
    put:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      tags:
        - users
      summary: updates a maintenance record
      operationId: updateMaintenanceRecord
      responses:
        '200':
          description: item updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceRecord'
        description: Maintenance record to add
    
    delete:
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      tags:
        - users
      summary: deletes a maintenance record
      operationId: deleteMaintenanceRecord
      responses:
        '200':
          description: item deleted
        '404':
          description: Invalid record id
          
  /workflows:
    post:
      tags:
        - admins
      summary: creates new workflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
        description: Workflow to add
      responses:
        '201': 
          description: created
          
    get:
      tags:
        - admins
      summary: gets all workflows
      responses:
        '200': 
          description: all workflows
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
          
  /workflows/{id}:
    put:
      tags:
        - admins
      summary: updates workflow
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
        description: Workflow to update
      responses:
        '200': 
          description: updated
    delete:
      tags:
        - admins
      summary: deletes workflow
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: deleted
          
    get:
      tags:
        - users
      summary: gets the workflow
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200': 
          description: Workflow details
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Workflow'
    
     
 
  /maintenanceRecords:
    get:
      tags:
        - users
      summary: gets the maintenance record ids
      operationId: getMaintenanceRecordIds
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  current:
                    type: string
                  last:
                    type: string
                  all:
                    type: array
                    items: {}
    
    post:
      tags:
        - users
      summary: adds a maintenance record
      operationId: addMaintenanceRecord
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceRecord'
        description: Maintenance record to add
           
  /maintenanceRecords/{maintenanceRecordId}/inspections:
    post:
      tags:
        - users
      summary: creates new inspection
      parameters:
        - in: path
          required: true
          name: maintenanceRecordId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inspection'
        description: Inspection to add
      responses:
        '201': 
          description: created
          
    get:
      tags:
        - users
      summary: gets all inspections for given maintenance records
      parameters:
        - in: path
          required: true
          name: maintenanceRecordId
          schema:
            type: string
      responses:
        '200': 
          description: all inspections
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Inspection'
          
  /maintenanceRecords/{maintenanceRecordId}/inspections/{id}:
    put:
      tags:
        - users
      summary: updates inspection
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
        - in: path
          required: true
          name: maintenanceRecordId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inspection'
        description: Inspection to update
      responses:
        '200': 
          description: updated
    delete:
      tags:
        - users
      summary: deletes inspection
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
        - in: path
          required: true
          name: maintenanceRecordId
          schema:
            type: string
      responses:
        '200': 
          description: deleted
          
    get:
      tags:
        - users
      summary: gets the inspection
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
        - in: path
          required: true
          name: maintenanceRecordId
          schema:
            type: string
      responses:
        '200': 
          description: Inspection details
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Inspection'
                
  /maintenanceRecords/{maintenanceRecordId}/allDamageReports:
    get:
      tags:
        - users
      summary: gets all the damage reports for the given maintenance record
      parameters:
        - in: path
          required: true
          name: maintenanceRecordId
          schema:
            type: string
      responses:
        '200': 
          description: All damage records for this maintenance record
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DamageReport'
                
  /maintenanceRecords/{maintenanceRecordId}/damageReport:
    post:
      tags:
        - users
      summary: Create new damage report
      parameters:
        - in: path
          required: true
          name: maintenanceRecordId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DamageReport'
        description: Damage Report object
      responses:
        '200': 
          description: Damage record
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DamageReport'
                
  /maintenanceRecords/{maintenanceRecordId}/damageReport/{damageReportId}:
    put:
      tags:
        - users
      summary: Update damage report
      parameters:
        - in: path
          required: true
          name: maintenanceRecordId
          schema:
            type: string
        - in: path
          required: true
          name: damageReportId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DamageReport'
        description: Damage Report object
      responses:
        '200': 
          description: Damage record
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DamageReport'
                
    delete:
      tags:
        - users
      summary: Update damage report
      parameters:
        - in: path
          required: true
          name: maintenanceRecordId
          schema:
            type: string
        - in: path
          required: true
          name: damageReportId
          schema:
            type: string
      responses:
        '200': 
          description: Damage record deleted
    get:
      tags:
        - users
      summary: Update damage report
      parameters:
        - in: path
          required: true
          name: maintenanceRecordId
          schema:
            type: string
        - in: path
          required: true
          name: damageReportId
          schema:
            type: string
      responses:
        '200': 
          description: Damage record
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DamageReport'      
          
                
  /workflows/verifyCurrent/{workflowId}:
    get:
      tags:
        - users
      summary: verifies whether the supplied workflow id is the latest live
      parameters:
        - in: path
          required: true
          name: workflowId
          schema:
            type: string
      responses:
        '200':
          description: Whether the workflowId is the most current or not
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/WorkflowStatus'
  
           
  /workflows/current:
    get:
      tags:
        - users
      summary: gets the currently active workflow object
      responses:
        '200': 
          description: Latest live workflow (only one is expected to be live at any point in time)
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Workflow'
                
  
           
components:
  schemas:
    MaintenanceRecord:
      type: object
      required:
        - serialNumber
        - commisioningNumber
        - totalOperationHours
        - operationHoursAsPerLastService
        - lastInterventionAt
        - currentInterventionAt
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          readOnly: true
        serialNumber:
          type: string
          example: abcde1234
        commisioningNumber:
          type: string
          example: "ABCD1234"
        totalOperationHours:
          type: number
          example: 100.5
        operationHoursAsPerLastService:
          type: number
        lastInterventionAt:
          type: string
          format: date-time
        currentInterventionAt:
          type: string
          format: date-time
        createdBy:
          type: string
          example: "username1"
          readOnly: true
        lastModifiedBy:
          type: string
          example: "username2"
          readOnly: true
        isClosed:
          type: boolean
        workorderNumber:
          type: string
        workflowId:
          type: string
          format: uuid
          description: As discussed, workflow ids will be stored along with the maintenance record (to make it easy to associate the two entities)
         
    Workflow:
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        prerequisiteIds:
          type: array
          items:
            type: string
        prerequisites:
          type: array
          items:
            $ref: '#/components/schemas/Prerequisite'
          readOnly: true
        procedureIds:
          type: array
          items:
            type: string
        procedures:
          type: array
          items:
            $ref: '#/components/schemas/Procedure'
          readOnly: true
        lastModifiedBy:
          type: string
          format: uuid
          readOnly: true
        lastModifiedAt:
          type: string
          format: date-time
          readOnly: true
        isLive:
          type: boolean
          description: Only one workflow can be live at any point of time
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
         
    Part:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        imageUrl:
          type: string
          
    Prerequisite:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sortOrder:
          type: integer
        name:
          type: string
        assetIds:
          type: array
          items:
            type: string
        assets:
          type: array
          items:
            $ref: "#/components/schemas/Asset"
          readOnly: true
        sapNumber:
          type: string
        sapDesignation:
          type: string
        quantity:
          type: integer
        dwgNumber:
          type: string
        partNumber:
          type: string
        itemCategory:
          type: string
        imageUrl:
          type: string
         
    Observation:
      type: object
      required: 
        - maintenanceId
      properties:
        text:
          type: string
        observationImageNames:
          type: array
          items:
            type: string
          example: ["image1.png","image2.png"]
          
    Step:
      type: object
      required: 
        - id
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sortOrder:
          type: integer
        procedureId:
          type: string
        stepNumber:
          type: integer
        title:
          type: string
        detailedDescription:
          type: string
        tools:
          type: array
          items: 
            $ref: '#/components/schemas/Tool'
        inspectionMandatory:
          type: boolean
        assetId:
          type: string
          format: uuid
          description: Id of the Asset object associated with this step
        asset:
          allOf:
            - $ref: '#/components/schemas/Asset'
          readOnly: true
        animations:
          type: array
          items:
            $ref: '#/components/schemas/AnimationParameter'
    
    Tool:
      type: object
      properties:
        name:
          type: string
          
    Phase:
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sortOrder:
          type: integer
        name:
          type: string
        detailedDescription:
          type: string
        stepIds:
          type: array
          items:
            type: string
        steps:
          type: array
          items:
            $ref: "#/components/schemas/Step"
          readOnly: true
    
    Procedure:
      type: object
      required: 
        - id
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sortOrder:
          type: integer
        description:
          type: string
        phaseIds:
          type: array
          items:
            type: string
        phases:
          type: array
          items:
            $ref: '#/components/schemas/Phase'
          readOnly: true
        procedureType:
          type: string
            
    Asset:
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        cncNumber:
          type: string
        filename:
          type: string
        versionNumber:
          type: integer
          readOnly: true
        thumbnailFilename:
          type: string
    
    Inspection:
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        maintenanceRecordId:
          type: string
          format: uuid
          readOnly: true
        workflowId:
          type: string
          format: uuid
        stepId:
          type: string
          format: uuid
        observation:
          $ref: "#/components/schemas/Observation"
        lastModifiedBy:
          type: string
          example: "username"
          readOnly: true
        lastModifiedAt:
          type: string
          format: date-time
          readOnly: true
          
    AnimationParameter:
      properties:
        animationId:
          type: string
        animationStart:
          type: integer
        animationEnd:
          type: integer
          
    WorkflowStatus:
      properties:
        workflowId:
          type: string
          format: uuid
        isCurrent:
          type: boolean
          
    DamageReport:
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        maintenanceRecordId:
          type: string
          format: uuid
          readOnly: true
        procedureId:
          type: string
          format: uuid
        lastModifiedBy:
          type: string
          format: uuid
          readOnly: true
        lastModifiedAt:
          type: string
          format: date-time
          readOnly: true
        damagedPart:
          allOf:
            - $ref: '#/components/schemas/Part'
          readOnly: true
        damagedPartId:
          type: string
          format: uuid
        comments:
          type: string