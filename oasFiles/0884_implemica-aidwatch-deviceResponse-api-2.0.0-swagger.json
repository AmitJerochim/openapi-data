{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "API for receiving command responses from <i>Aidwatch devices</i>.",
    "version" : "2.0.0",
    "title" : "Aidwatch Device Response API",
    "contact" : {
      "name" : "Support",
      "url" : "https://www.aidwatch.ch/API-Support",
      "email" : "jack.loonen@nestor-swiss.ch"
    },
    "license" : {
      "name" : "Nestor International Corporation Ltd.",
      "url" : "https://nestor-swiss.ch"
    }
  },
  "tags" : [ {
    "name" : "setAndroidGPSData",
    "description" : "This resource allows devices to report the GPS sensor data from their devices."
  } ],
  "paths" : {
    "/commands/{command-id}/setCommandResponse" : {
      "post" : {
        "tags" : [ "setCommandResponse" ],
        "summary" : "Set Command Response.",
        "security" : [ {
          "OAuth2" : [ "write_commandresponse" ]
        } ],
        "description" : "The command response is generated by the device after trying to perform a command (sent through) FireBase",
        "operationId" : "setCommandResponse",
        "parameters" : [ {
          "name" : "command-id",
          "in" : "path",
          "description" : "Command identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/commandResponse"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully executed Command"
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "401" : {
            "description" : "Authorization information is missing or invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "403" : {
            "description" : "Access token does not have the required scope",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "404" : {
            "description" : "A device with the specified ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "OAuth2" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://www.aidwatch.net/auth/realms/aidwatch/protocol/openid-connect/auth",
            "tokenUrl" : "https://www.aidwatch.net/auth/realms/aidwatch/protocol/openid-connect/token",
            "scopes" : {
              "write_device" : "Allows write access to device data",
              "read_device" : "Allows read access to device data",
              "write_commandresponse" : "Allows write access to command responses"
            }
          },
          "password" : {
            "tokenUrl" : "https://www.aidwatch.net/auth/realms/aidwatch/protocol/openid-connect/token",
            "scopes" : {
              "write_device" : "Allows write access to device data",
              "read_device" : "Allows read access to device data",
              "write_commandresponse" : "Allows write access to command responses"
            }
          }
        }
      }
    },
    "schemas" : {
      "error" : {
        "type" : "object",
        "description" : "Error model which contains useful info about the error occured.",
        "properties" : {
          "timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp of the error."
          },
          "status" : {
            "type" : "integer",
            "description" : "Http status code"
          },
          "errorType" : {
            "type" : "string",
            "description" : "Error type."
          },
          "message" : {
            "type" : "string",
            "description" : "Human readable error message."
          },
          "corrId" : {
            "type" : "string",
            "description" : "Correlation id of the response for problem solving and debugging use."
          }
        }
      },
      "keyValue" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "example" : "medicin-alarm1",
            "description" : "key of charactertic."
          },
          "value" : {
            "type" : "string",
            "example" : "18:00",
            "description" : "value of charactertic."
          }
        }
      },
      "commandResponse" : {
        "type" : "object",
        "properties" : {
          "timestamp" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Timestamp of the response."
          },
          "command-setting" : {
            "type" : "string",
            "example" : "GPS",
            "description" : "command sent to device",
            "enum" : [ "FALLSENSOR", "WATCHREMOVE", "GEOFENCE", "DESTINATION", "LOWBATTERY", "WATCHSWITCHOFF", "MEDICINEALERT", "PEDOMETER", "SLEEPMONITOR", "REFUSEDINCALL", "HEARTRATE", "LOCATION", "EMERGENCYNO", "TALKMODE", "GPS", "MONITORGPS", "MONITORSTEP", "MONITORACCELERO", "MONITORHEARTRATE" ]
          },
          "command-type" : {
            "type" : "string",
            "example" : "GET",
            "description" : "type of command sent to device",
            "enum" : [ true, false, "GET" ]
          },
          "response-parameter" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/keyValue"
            }
          },
          "command-syncstatus" : {
            "type" : "string",
            "example" : "OK",
            "description" : "syn-status of command sent to device",
            "enum" : [ "FAILED", "SYNCED" ]
          }
        }
      }
    }
  }
}