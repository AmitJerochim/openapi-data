{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "Sample banking API used for demoing UiPath Testing Automation.\n",
    "version" : "1.0.1",
    "title" : "UiBank",
    "contact" : {
      "email" : "andrei.barbu@uipath.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/AndreiBarbuOz/uibank/1.0.1"
  } ],
  "tags" : [ {
    "name" : "accounts",
    "description" : "Access to customer account"
  }, {
    "name" : "customers",
    "description" : "Access to customer data"
  }, {
    "name" : "transactions",
    "description" : "Info about transactions",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "https://github.com/AndreiBarbuOz/uibank-api-server"
    }
  }, {
    "name" : "cards",
    "description" : "Information about cards"
  } ],
  "paths" : {
    "/customers" : {
      "post" : {
        "tags" : [ "customers" ],
        "summary" : "Add a new customer",
        "operationId" : "addCustomer",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Customer"
        },
        "responses" : {
          "400" : {
            "description" : "Invalid input"
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}" : {
      "get" : {
        "tags" : [ "customers" ],
        "summary" : "Get customer details",
        "description" : "Retrieve the details of a customer",
        "operationId" : "getCustomerDetails",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The customerId",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "customers" ],
        "summary" : "Update an existing customer",
        "operationId" : "updateCustomer",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "The customerId",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Customer"
        },
        "responses" : {
          "201" : {
            "description" : "Updated"
          },
          "400" : {
            "description" : "Invalid customer data"
          },
          "404" : {
            "description" : "Customer not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "customers" ],
        "summary" : "Delete a single customer",
        "description" : "Delete customer, based on customerId",
        "operationId" : "deleteCustomer",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "Customer to be deleted",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/customers/search" : {
      "get" : {
        "tags" : [ "customers" ],
        "summary" : "Search for Customers",
        "description" : "Search for customers using multiple search criteria",
        "operationId" : "searchCustomer",
        "parameters" : [ {
          "name" : "first_name",
          "in" : "query",
          "description" : "First name to filter by",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "last_name",
          "in" : "query",
          "description" : "Last name to filter by",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/customer/{customerId}/accounts" : {
      "get" : {
        "tags" : [ "accounts" ],
        "summary" : "List all customer accounts",
        "description" : "Return a list of all accounts belonging to a customer",
        "operationId" : "listAccounts",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "Owner of the accounts",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "accounts" ],
        "summary" : "Creates an account",
        "operationId" : "createAccount",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "Owner of the accounts",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Account to be created",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/requestBodies/Account"
              }
            }
          }
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Account not found"
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}" : {
      "get" : {
        "tags" : [ "accounts" ],
        "summary" : "Get details for an account",
        "description" : "Returns a single account, based on accountId",
        "operationId" : "getAccount",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Id of account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "accounts" ],
        "summary" : "Deletes an account",
        "operationId" : "deleteAccount",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Id of account to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Account not found"
          },
          "201" : {
            "description" : "Updated"
          }
        }
      }
    },
    "/accounts/{accountId}/transactions" : {
      "get" : {
        "tags" : [ "transactions" ],
        "summary" : "Return all transactions for an account",
        "description" : "List all transactions belonging to an account",
        "operationId" : "listTransactions",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Id of account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "transactions" ],
        "summary" : "Returns one transaction data",
        "description" : "Returns one transaction data",
        "operationId" : "addTransaction",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Id of account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Transaction to be created",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/requestBodies/Transaction"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/accounts/{accountId}/cards" : {
      "get" : {
        "tags" : [ "cards" ],
        "summary" : "Return all bank cards for an account",
        "description" : "Return all cards for the specified account",
        "operationId" : "listBankCards",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Id of account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BankCard"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "cards" ],
        "summary" : "Return all bank cards for an account",
        "description" : "Return all cards for the specified account",
        "operationId" : "addBankCard",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Id of account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Card to be created",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/requestBodies/BankCard"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankCard"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/cards/{cardId}" : {
      "get" : {
        "tags" : [ "cards" ],
        "summary" : "Return all bank cards for an account",
        "description" : "Return all cards for the specified account",
        "operationId" : "getCard",
        "parameters" : [ {
          "name" : "cardId",
          "in" : "path",
          "description" : "Id of the card",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankCard"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/transactions/{transactionId}" : {
      "get" : {
        "tags" : [ "transactions" ],
        "summary" : "Returns one transaction data",
        "description" : "Returns one transaction data",
        "operationId" : "getTransaction",
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "Id of transaction",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      }
    }
  },
  "externalDocs" : {
    "description" : "Find out more about UiBank",
    "url" : "https://github.com/AndreiBarbuOz/uibank-api-server"
  },
  "components" : {
    "schemas" : {
      "Customer" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "first_name" : {
            "type" : "string",
            "example" : "John"
          },
          "last_name" : {
            "type" : "string",
            "example" : "Doe"
          },
          "middle_name" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of customer",
            "enum" : [ "mr", "mrs", "miss", "ms", "doc" ],
            "example" : "mr"
          },
          "gender" : {
            "type" : "string",
            "description" : "Gender of customer",
            "enum" : [ "male", "female" ]
          },
          "email_verified" : {
            "type" : "boolean",
            "default" : false
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "john.doe@uipath.com"
          },
          "date_of_birth" : {
            "type" : "string",
            "format" : "date"
          },
          "employment_status" : {
            "type" : "string",
            "enum" : [ "permanent", "unemployed", "consultant" ]
          },
          "residence_status" : {
            "type" : "string",
            "enum" : [ "resident", "foreigner" ]
          },
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "accounts_url" : {
            "type" : "string",
            "example" : "/customers/12345/accounts"
          },
          "self_url" : {
            "type" : "string",
            "example" : "/customers/12345"
          }
        }
      },
      "Account" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "account_number" : {
            "type" : "integer",
            "format" : "int64"
          },
          "date_start" : {
            "type" : "integer",
            "format" : "date"
          },
          "friendly_name" : {
            "type" : "string",
            "example" : "Debit account"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "checking", "savings" ]
          },
          "self_url" : {
            "type" : "string",
            "example" : "/accounts/12345"
          },
          "customer_url" : {
            "type" : "string",
            "example" : "/customers/654321"
          },
          "cards_url" : {
            "type" : "string",
            "example" : "/accounts/12345/cards"
          },
          "balance" : {
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "Transaction" : {
        "type" : "object",
        "required" : [ "date_time", "amount", "transaction_type", "reference", "description", "self_url", "account_url" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "date_time" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2017-07-21T17:32:28Z"
          },
          "amount" : {
            "type" : "number",
            "format" : "float"
          },
          "transaction_type" : {
            "type" : "string",
            "description" : "Transaction type",
            "enum" : [ "debit", "credit" ]
          },
          "reference" : {
            "type" : "string",
            "example" : "TRN123456"
          },
          "description" : {
            "type" : "string",
            "example" : "return loan"
          },
          "self_url" : {
            "type" : "string",
            "example" : "/transactions/12345"
          },
          "account_url" : {
            "type" : "string",
            "example" : "/accounts/654321"
          }
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "date_start" : {
            "type" : "string",
            "format" : "date"
          },
          "date_end" : {
            "type" : "string",
            "format" : "date"
          },
          "address1" : {
            "type" : "string",
            "example" : "No 120 Spencer Street"
          },
          "address2" : {
            "type" : "string",
            "example" : "Level 20"
          },
          "town" : {
            "type" : "string",
            "example" : "Melbourne"
          },
          "state" : {
            "type" : "string",
            "example" : "Victoria"
          },
          "postcode" : {
            "type" : "string",
            "example" : "3000"
          }
        }
      },
      "BankCard" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "date_start" : {
            "type" : "string",
            "format" : "date"
          },
          "date_end" : {
            "type" : "string",
            "format" : "date"
          },
          "name_on_card" : {
            "type" : "string",
            "example" : "John Doe"
          },
          "pin" : {
            "type" : "integer",
            "format" : "int64",
            "example" : "1234"
          },
          "security_code" : {
            "type" : "string",
            "example" : "test123"
          },
          "blocked" : {
            "type" : "boolean",
            "example" : "False"
          },
          "self_url" : {
            "type" : "string",
            "example" : "/cards/123456"
          },
          "account_url" : {
            "type" : "string",
            "example" : "/accounts/654321"
          }
        }
      }
    },
    "requestBodies" : {
      "Customer" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "required" : [ "first_name", "last_name", "title", "gender", "email", "date_of_birth", "employment_status" ],
              "properties" : {
                "first_name" : {
                  "type" : "string",
                  "example" : "John"
                },
                "last_name" : {
                  "type" : "string",
                  "example" : "Doe"
                },
                "middle_name" : {
                  "type" : "string"
                },
                "title" : {
                  "type" : "string",
                  "description" : "Title of customer",
                  "enum" : [ "mr", "mrs", "miss", "ms", "doc" ],
                  "example" : "mr"
                },
                "gender" : {
                  "type" : "string",
                  "description" : "Gender of customer",
                  "enum" : [ "male", "female" ]
                },
                "email" : {
                  "type" : "string",
                  "format" : "email",
                  "example" : "john.doe@uipath.com"
                },
                "date_of_birth" : {
                  "type" : "string",
                  "format" : "date"
                },
                "employment_status" : {
                  "type" : "string",
                  "enum" : [ "permanent", "unemployed", "consultant" ]
                },
                "residence_status" : {
                  "type" : "string",
                  "enum" : [ "resident", "foreigner" ]
                },
                "addresses" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Address"
                  }
                }
              }
            }
          }
        },
        "description" : "Pet object that needs to be added to the store",
        "required" : true
      },
      "Account" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "date_start" : {
                  "type" : "integer",
                  "format" : "date"
                },
                "friendly_name" : {
                  "type" : "string",
                  "example" : "Debit account"
                },
                "type" : {
                  "type" : "string",
                  "enum" : [ "checking", "savings" ]
                }
              }
            }
          }
        },
        "description" : "List of user object",
        "required" : true
      },
      "BankCard" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/BankCard"
            }
          }
        },
        "description" : "Bank card details",
        "required" : true
      },
      "Transaction" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "required" : [ "amount", "transaction_type", "description", "account" ],
              "properties" : {
                "amount" : {
                  "type" : "number",
                  "format" : "float"
                },
                "transaction_type" : {
                  "type" : "string",
                  "description" : "Transaction type",
                  "enum" : [ "debit", "credit" ]
                },
                "description" : {
                  "type" : "string",
                  "example" : "return loan"
                },
                "account" : {
                  "type" : "string",
                  "example" : "1001001234"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  },
  "security" : [ {
    "basicAuth" : [ ]
  } ]
}