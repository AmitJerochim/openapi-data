penapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: Production Server
    url: https://admin.digarson.ru/
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Digarson/Digarson-API/1.0.0
info:
  description: Digarson API for webview
  version: "1.0.0"
  title: Digarson API
  contact:
    email: info@digarson.ru
    name: Digarson
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /api/v1/order:
    get:
      tags:
        - Order
      summary: Get orders
      operationId: getOrders
      description: 'The method receives all orders with the status "new"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Orders'
        '404':
          description: Order not found
          content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Response%20Error'
        '400':
          description: Bad input parameter
          content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Response%20Error'
  /api/v1/order/{order_id}:
    post:
      tags:
        - Order
      summary: Updates order status
      operationId: orderUpdate
      description: |
        You can control the status of the order using the "status" parameter
      parameters:
        - in: path
          name: order_id
          description: ID of the order
          required: true
          schema:
            type: integer
        - in: query
          name: status_id
          description: ID of the order status
          required: true
          schema:
            type: integer
            default: 2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status_id: 
                  type: integer
                  description: "2 – Accepted <br> 3 – Cancelled" 
                  minimum: 2
                  maximum: 3
                  example: 2
              required:
                - status_id
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Response%20Success'
        '400':
          description: Bad input parameter
          content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Response%20Error'
        '404':
          description: Order not found
          content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Response%20Error'
  /api/v1/dish/{dish_id}:
    post:
      tags:
        - Dish
      summary: Update dish data
      operationId: dishUpdate
      description: |
        You can control the status, price of the dish using the "status" parameter
      parameters:
        - in: path
          name: dish_id
          description: ID of the dish
          required: true
          schema:
            type: integer
        - in: query
          name: is_stopped
          description: Dish is stopped? 
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: 1
            default: 1
        - in: query
          name: price
          description: Dish price
          required: true
          schema:
            type: integer
            default: 100
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price: 
                  type: integer
                  description: "Set dish price" 
                  example: 100
                is_stopped: 
                  type: integer
                  description: "Stop the dish" 
                  example: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Response%20Success'
        '400':
          description: Bad input parameter
          content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Response%20Error'
        '404':
          description: Dish not found
          content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Response%20Error'
components:
  schemas:
      Response Success:    # Schema name
        type: object
        properties:
          status:
            type: string
            example: 'success'
      Response Error:    # Schema name
        type: object
        properties:
          status:
            type: string
            example: 'error'
          message:
            type: string
            example: 'Error message'
      Orders:    # Schema name
        type: object
        properties:
          id:
            type: integer
            example: 2
            description: 'ID outlet'
          platform:
            type: string
            example: 'Telegram'
            description: 'Platform type'
          payment_type:
            type: object
            properties:
              id:
                type: integer
                example: 3
                description: 'ID payment type'
              name:
                type: string
                example: 'Card courier'
                description: 'Payment type'
          delivery_type:
            type: object
            properties:
              id:
                type: integer
                example: 3
                description: 'ID delivery type'
              name:
                type: string
                example: 'Delivery'
                description: 'Delivery type'
          outlet:
            type: object
            properties:
              id:
                type: integer
                example: 3
                description: 'ID outlet'
              city:
                type: string
                example: 'Barnaul'
                description: 'Outlet city'
              address:
                type: string
                example: 'Krasnoarmeysky Prospect, 61'
                description: 'Outlet address'
          profile:
            type: object
            properties:
              name:
                type: integer
                example: 'Ivan'
                description: 'Client name'
              phone:
                type: string
                example: '79999999999'
                description: 'Client phone'
          data:
            type: object
            properties:
              address:
                type: string
                example: 'Barnaul, Zmeinogorsky tract, house 104 flat 148'
                description: 'Delivery address'
              comment:
                type: string
                example: 'Pre call please'
                description: 'Comment on the order'
              deliver_to:
                type: string
                example: 'As quickly as possible'
                description: 'Deliver to ...'
              qty_devices:
                type: integer
                example: 1
                description: 'Number of appliances'
              discount:
                type: integer
                example: 30
                description: 'Order discount'
              total:
                type: integer
                example: 1250
                description: 'The total amount of the order'
              dishes:
                description: 'List of dishes'
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 5810 
                    description: 'ID dish'
                  category_id:
                    type: integer
                    format: int64
                    example: 65 
                    description: 'ID dish category'
                  name:
                    type: string
                    example: 'Shawarma "Caesar"'
                    description: 'Dish name'
                  description:
                    type: string
                    example: 'Chicken fillet, tomato ...'
                    description: 'Dish description'
                  price:
                    type: integer
                    format: int64
                    example: 125 
                    description: 'Dish price'
                  qty:
                    type: integer
                    format: int
                    example: 1 
                    description: 'Quantity'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Dish
  - name: Order