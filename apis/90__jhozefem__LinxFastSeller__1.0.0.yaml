penapi: 3.0.0
info:
    version: "1.0.0"
    title: 'Linx Fast Seller API'
servers:
    -
        url: 'http://production-fastseller.omniplat.internal/v1'
tags:
    -
        name: Clients
        description: 'Controle de clientes (marcas)'
    -
        name: Locations
        description: 'Controle de lojas dos clientes (marcas)'
    -
        name: ClientMarketplaceConfigs
        description: 'Controle de configurações de marketplace para um cliente (marca)'
    -
        name: Orders
        description: 'Controle de pedidos do marketplace'
    -
        name: Outputs
        description: 'Controle de status de outputs para o marketplace'
    -
        name: StockUploads
        description: 'Controle de uploads de estoques para uma loja'
    -
        name: UserPermissions
        description: 'Controle de permissões de usuários'
paths:
    '/clients':
        post:
            tags: [Clients]
            summary: 'Criação de um novo cliente (marca)'
            responses: {'422': {description: 'Unprocessable Entity'}}
            requestBody: {content: {application/json: {schema: {$ref: '#/components/schemas/Client'}}}}
        get:
            parameters:
                - {in: query, name: page, schema: {type: integer}, description: 'Número da página a carregar. Caso não seja passado, assume valor 1', example: 2}
                - {in: query, name: perpage, schema: {type: integer}, description: 'Número de itens por página. Caso não seja passado, assume valor 10', example: 20}
            tags: [Clients]
            summary: 'Busca de clientes'
            responses: {'200': {description: 'Resposta da busca de clientes', content: {application/json: {schema: {type: object, properties: {currentPage: {type: integer, description: 'Número da página atual', example: 1}, data: {type: array, items: {$ref: '#/components/schemas/Client'}}, from: {type: integer, description: 'Posição do primeiro item da página', example: 1}, to: {type: integer, description: 'Posição do último item da página', example: 1}, total: {type: integer, description: 'Total de itens na resposta', example: 1}, perPage: {type: integer, description: 'Número de itens por página', example: 1}, firstPage: {type: integer, description: 'Número da primeira página', example: 1}, lastPage: {type: integer, description: 'Número da última página', example: 1}, prevPageUrl: {type: string, description: 'Endereço da página anterior', example: 'http://host?page=2'}, nextPageUrl: {type: string, description: 'Endereço da próxima página', example: 'http://host?page=4'}}}}}}}
    '/clients/{clientId}':
        parameters:
            - {in: path, name: clientId, required: true, schema: {type: string}, description: 'Id do cliente (marca)', example: mundoverde}
        get:
            tags: [Clients]
            summary: 'Busca de cliente (marca) por id'
            responses: {'200': {description: 'Dado do cliente (marca)', content: {application/json: {schema: {$ref: '#/components/schemas/Client'}}}}, '404': {description: 'Cliente (marca) não encontrado'}}
        patch:
            tags: [Clients]
            summary: 'Atualização de um cliente (marca) existente'
            responses: {'404': {description: 'Cliente (marca) não encontrado'}, '422': {description: 'Unprocessable Entity'}}
            requestBody: {content: {application/json: {schema: {$ref: '#/components/schemas/Client'}}}}
    '/clients/{clientId}/locations':
        parameters:
            - {in: path, name: clientId, required: true, schema: {type: string}, description: 'Id do cliente (marca)', example: mundoverde}
        post:
            tags: [Locations]
            summary: 'Criação de uma nova loja'
            responses: {'422': {description: 'Unprocessable Entity'}}
            requestBody: {content: {application/json: {schema: {$ref: '#/components/schemas/Location'}, example: { "clientId": "mundoverde", "locationId": "L1", "name": "Loja do Centro", "email": "fulano@email.com.br", "active": true }}}}
        get:
            parameters:
                - {in: query, name: page, schema: {type: integer}, description: 'Número da página a carregar. Caso não seja passado, assume valor 1', example: 2}
                - {in: query, name: perpage, schema: {type: integer}, description: 'Número de itens por página. Caso não seja passado, assume valor 10', example: 20}
            tags: [Locations]
            summary: 'Busca de lojas'
            responses: {'200': {description: 'Resposta da busca de lojas', content: {application/json: {schema: {type: object, properties: {currentPage: {type: integer, description: 'Número da página atual', example: 1}, data: {type: array, items: {$ref: '#/components/schemas/Location'}}, from: {type: integer, description: 'Posição do primeiro item da página', example: 1}, to: {type: integer, description: 'Posição do último item da página', example: 1}, total: {type: integer, description: 'Total de itens na resposta', example: 1}, perPage: {type: integer, description: 'Número de itens por página', example: 1}, firstPage: {type: integer, description: 'Número da primeira página', example: 1}, lastPage: {type: integer, description: 'Número da última página', example: 1}, prevPageUrl: {type: string, description: 'Endereço da página anterior', example: 'http://host?page=2'}, nextPageUrl: {type: string, description: 'Endereço da próxima página', example: 'http://host?page=4'}}}}}}}
    '/clients/{clientId}/locations/{locationId}':
        parameters:
            - {in: path, name: clientId, required: true, schema: {type: string}, description: 'Id do cliente (marca)', example: mundoverde}
            - {in: path, name: locationId, required: true, schema: {type: string}, description: 'Id da loja (marca)', example: mundoverde}
        get:
            tags: [Locations]
            summary: 'Busca de loja'
            responses: {'200': {description: 'Dado da loja', content: {application/json: {schema: {$ref: '#/components/schemas/Location'}}}}, '404': {description: 'Loja não encontrada'}}
        patch:
            tags: [Locations]
            summary: 'Atualização de uma loja'
            responses: {'404': {description: 'Loja não encontrada'}, '422': {description: 'Unprocessable Entity'}}
            requestBody: {content: {application/json: {schema: {$ref: '#/components/schemas/Location'}, example: { "clientId": "mundoverde", "locationId": "L1", "name": "Loja do Centro", "active": true }}}}
    '/clients/{clientId}/marketplaces/{marketplaceId}/configs':
        parameters:
            - {in: path, name: clientId, required: true, schema: {type: string}, description: 'Id do cliente (marca)', example: mundoverde}
            - {in: path, name: marketplaceId, required: true, schema: {type: string}, description: 'Id do marketplace', example: rappi}
        get:
            tags: [ClientMarketplaceConfigs]
            summary: 'Busca de configuração por id do marketplace e por id do cliente (marca)'
            responses: {'200': {description: 'Dado da Configuração de marketplace para um cliente (marca)', content: {application/json: {schema: {$ref: '#/components/schemas/ClientMarketplaceConfig'}}}}, '404': {description: 'Configuração de marketplace para um cliente (marca) não encontrada'}}
        patch:
            tags: [ClientMarketplaceConfigs]
            summary: 'Atualização de uma configuração de marketplace para um cliente (marca) existente'
            responses: {'404': {description: 'Configuração de marketplace para um cliente (marca) não encontrada'}, '422': {description: 'Unprocessable Entity'}}
            requestBody: {content: {application/json: {schema: {$ref: '#/components/schemas/ClientMarketplaceConfig'}}}}
    '/marketplaces/{marketplaceId}/orders':
        parameters:
            - {in: path, name: marketplaceId, required: true, schema: {type: string}, description: 'Id do marketplace', example: rappi}
        post:
            tags: [Orders]
            summary: 'Criação de um novo pedido'
            responses: {'422': {description: 'Unprocessable Entity'}}
            requestBody: {content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}
    '/marketplaces/{marketplaceId}/orders/{orderId}':
        parameters:
            - {in: path, name: marketplaceId, required: true, schema: {type: string}, description: 'Id do marketplace', example: rappi}
            - {in: path, name: orderId, required: true, schema: {type: string}, description: 'Id do pedido', example: '12345678'}
        get:
            tags: [Orders]
            summary: 'Obter um pedido por id'
            responses: {'200': {description: 'Dado do pedido', content: {application/json: {schema: {$ref: '#/components/schemas/Order'}}}}, '404': {description: 'Pedido não encontrado'}}
        patch:
            tags: [Orders]
            summary: 'Atualização de um pedido existente'
            responses: {'404': {description: 'Pedido não encontrado'}, '422': {description: 'Unprocessable Entity'}}
            requestBody: {content: {application/json: {schema: {$ref: '#/components/schemas/Order'}, examples: {status: {value: {marketplaceId: rappi, clientId: mundoverde, locationId: L1, orderId: '12345678', status: PROCESSED, changedAt: '2020-03-21 13:27:36'}, summary: 'Atualização de status do pedido'}, order: {value: {marketplaceId: rappi, clientId: mundoverde, locationId: L1, orderId: '12345678', totalPrice: 100.9}, summary: 'Atualização de pedido'}}}}}
    '/orders':
        get:
            parameters:
                - {in: query, name: clientId, schema: {type: string}, description: 'Id do cliente (marca)', example: mundoverde}
                - {in: query, name: marketplaceId, schema: {type: string}, description: 'Id do marketplace', example: rappi}
                - {in: query, name: locationId, schema: {type: string}, description: 'Id da loja', example: L1}
                - {in: query, name: status, schema: {type: string, enum: [PENDING, PROCESSED, CANCELED]}, description: 'Status do pedido', example: PENDING}
                - {in: query, name: page, schema: {type: integer}, description: 'Número da página a carregar. Caso não seja passado, assume valor 1', example: 2}
                - {in: query, name: perpage, schema: {type: integer}, description: 'Número de itens por página. Caso não seja passado, assume valor 10', example: 20}
            tags: [Orders]
            summary: 'Busca de pedidos'
            responses: {'200': {description: 'Resposta da busca de pedidos', content: {application/json: {schema: {type: object, properties: {currentPage: {type: integer, description: 'Número da página atual', example: 1}, data: {type: array, items: {$ref: '#/components/schemas/Order'}}, from: {type: integer, description: 'Posição do primeiro item da página', example: 1}, to: {type: integer, description: 'Posição do último item da página', example: 1}, total: {type: integer, description: 'Total de itens na resposta', example: 1}, perPage: {type: integer, description: 'Número de itens por página', example: 1}, firstPage: {type: integer, description: 'Número da primeira página', example: 1}, lastPage: {type: integer, description: 'Número da última página', example: 1}, prevPageUrl: {type: string, description: 'Endereço da página anterior', example: 'http://host?page=2'}, nextPageUrl: {type: string, description: 'Endereço da próxima página', example: 'http://host?page=4'}}}}}}}
    '/clients/{clientId}/marketplaces/{marketplaceId}/outputs':
        parameters:
            - {in: path, name: clientId, required: true, schema: {type: string}, description: 'Id do cliente', example: mundoverde}
            - {in: path, name: marketplaceId, required: true, schema: {type: string}, description: 'Id do marketplace', example: rappi}
        post:
            tags: [Outputs]
            summary: 'Criação de um novo output para o marketplace'
            responses: {'422': {description: 'Unprocessable Entity'}}
            requestBody: {content: {application/json: {schema: {$ref: '#/components/schemas/Output'}}}}
        get:
            parameters:
                - {in: query, name: generatedStatus, schema: {type: string}, description: 'Status da geração do arquivo', enum: [SUCCESS, ERROR], example: SUCCESS}
                - {in: query, name: transferStatus, schema: {type: string}, description: 'Status da transferência do arquivo para o marketplace', enum: [PENDING, DEBUG, TRANSFERRED], example: TRANSFERRED}
                - {in: query, name: page, schema: {type: integer}, description: 'Número da página a carregar. Caso não seja passado, assume valor 1', example: 2}
                - {in: query, name: perpage, schema: {type: integer}, description: 'Número de itens por página. Caso não seja passado, assume valor 10', example: 20}
            tags: [Outputs]
            summary: 'Busca de integrações'
            responses: {'200': {description: 'Resposta da busca de integrações', content: {application/json: {schema: {type: object, properties: {currentPage: {type: integer, description: 'Número da página atual', example: 1}, data: {type: array, items: {$ref: '#/components/schemas/Output'}}, from: {type: integer, description: 'Posição do primeiro item da página', example: 1}, to: {type: integer, description: 'Posição do último item da página', example: 1}, total: {type: integer, description: 'Total de itens na resposta', example: 1}, perPage: {type: integer, description: 'Número de itens por página', example: 1}, firstPage: {type: integer, description: 'Número da primeira página', example: 1}, lastPage: {type: integer, description: 'Número da última página', example: 1}, prevPageUrl: {type: string, description: 'Endereço da página anterior', example: 'http://host?page=2'}, nextPageUrl: {type: string, description: 'Endereço da próxima página', example: 'http://host?page=4'}}}}}}}
    '/clients/{clientId}/marketplaces/{marketplaceId}/outputs/{fileName}':
        parameters:
            - {in: path, name: clientId, required: true, schema: {type: string}, description: 'Id do cliente', example: mundoverde}
            - {in: path, name: marketplaceId, required: true, schema: {type: string}, description: 'Id do marketplace', example: rappi}
            - {in: path, name: fileName, required: true, schema: {type: string}, description: 'Nome do arquivo do output para o marketplace', example: mundoverde_202003200912.csv}
        get:
            tags: [Outputs]
            summary: 'Busca de outputs para o marketplace por id'
            responses: {'200': {description: 'Dado do output para o marketplace', content: {application/json: {schema: {$ref: '#/components/schemas/Output'}}}}, '404': {description: 'Output para o marketplace não encontrado'}}
        patch:
            tags: [Outputs]
            summary: 'Atualização de um output para o marketplace existente'
            responses: {'404': {description: 'Output para o marketplace não encontrado'}, '422': {description: 'Unprocessable Entity'}}
            requestBody: {content: {application/json: {schema: {$ref: '#/components/schemas/Output'}}}}
    '/stocks-prices/upload':
        consumes:
            - multipart/form-data
        parameters:
            - {in: header, name: Authentication, required: true, schema: {type: string}, description: 'SecretKey da loja', example: mundoverde_L1_cf23df2207d99a74fbe169e3eba035e633b65d94}
            - {in: formData, name: file, required: true, schema: {type: string}, description: 'Arquivo CSV com os estoques/preços da loja'}
        post:
            tags: [StockUploads]
            summary: 'Upload de csv de estoques para um cliente (marca) e loja'
    '/clients/{clientId}/locations/{locationId}/stocks-prices/uploads':
        parameters:
            - {in: path, name: clientId, required: true, schema: {type: string}, description: 'Id do cliente', example: mundoverde}
            - {in: path, name: locationId, required: true, schema: {type: string}, description: 'Id da loja', example: L1}
        get:
            parameters:
                - {in: query, name: page, schema: {type: integer}, description: 'Número da página a carregar. Caso não seja passado, assume valor 1', example: 2}
                - {in: query, name: perpage, schema: {type: integer}, description: 'Número de itens por página. Caso não seja passado, assume valor 10', example: 20}
            tags: [StockUploads]
            summary: 'Busca de uploads de estoques para um cliente (marca) e loja'
            responses: {'200': {description: 'Resposta da busca de uploads', content: {application/json: {schema: {type: object, properties: {currentPage: {type: integer, description: 'Número da página atual', example: 1}, data: {type: array, items: {$ref: '#/components/schemas/StockUpload'}}, from: {type: integer, description: 'Posição do primeiro item da página', example: 1}, to: {type: integer, description: 'Posição do último item da página', example: 1}, total: {type: integer, description: 'Total de itens na resposta', example: 1}, perPage: {type: integer, description: 'Número de itens por página', example: 1}, firstPage: {type: integer, description: 'Número da primeira página', example: 1}, lastPage: {type: integer, description: 'Número da última página', example: 1}, prevPageUrl: {type: string, description: 'Endereço da página anterior', example: 'http://host?page=2'}, nextPageUrl: {type: string, description: 'Endereço da próxima página', example: 'http://host?page=4'}}}}}}}
    '/user-permissions/{email}':
        parameters:
            - {in: path, name: email, required: true, schema: {type: string}, description: 'Email do usuário corrente', example: 'fulano@email.com.br'}
        get:
            tags: [UserPermissions]
            summary: 'Busca de permissão de um usuário'
            responses: {'200': {description: 'Dado da permissão do usuário', content: {application/json: {schema: {$ref: '#/components/schemas/UserPermission'}}}}, '404': {description: 'Permissão do usuário'}}
components:
    schemas:
        Client:
            type: object
            properties: {clientId: {type: string, description: 'Id do cliente (marca)', example: mundoverde}, catalogApiKey: {type: string, description: 'apiKey no catálogo Linx Impulse', example: mundoverde}, catalogMatchField: {type: string, description: 'Nome do campo para dar match no catálogo Linx Impulse e PDV', example: sku}, email: {type: string, description: 'Email do usuário que controla o cliente (marca)', example: 'fulano@email.com.br'}}
            required: [marketplaceId, clientId, catalogApiKey, catalogMatchField]
        ClientMarketplaceConfig:
            type: object
            properties: {clientId: {type: string, description: 'Id do cliente', example: mundoverde}, marketplaceId: {type: string, description: 'Id do marketplace', example: rappi}, username: {type: string, description: 'Usuário do cliente (marca) no marketplace', example: mundoverde_rappi}, password: {type: string, description: 'Senha do cliente (marca) no marketplace', example: '123456'}, outputActive: {type: boolean, description: 'Indica se está ativo o envio de outputs para o marketplace', example: true}}
            required: [clientId, marketplaceId]
        Location:
            type: object
            properties: {clientId: {type: string, description: 'Id do cliente', example: mundoverde}, locationId: {type: string, description: 'Id da loja', example: L1}, name: {type: string, description: 'Nome da loja', example: 'Loja do Centro'}, active: {type: boolean, description: 'Indica se a loja está ativa para receber pedidos', example: true}, secretKey: {type: string, description: 'SecretKey da loja que deve ser usado no endpoint de upload de arquivos. É gerado automaticamente.', example: 'a0e21e960c21cb1c71ffe3f426e69e356f5799a4'}, email: {type: string, description: 'Email do usuário que controla a loja', example: 'fulano@email.com.br'}}
            required: [clientId, locationId, name]
        Order:
            type: object
            properties: {marketplaceId: {type: string, description: 'Id do marketplace', example: rappi}, clientId: {type: string, description: 'Id do cliente (marca)', example: mundoverde}, locationId: {type: string, description: 'Id da loja', example: L1}, orderId: {type: string, description: 'Id do pedido', example: '12345678'}, totalPrice: {type: number, description: 'Preço total do pedido', example: 70.15}, placedAt: {type: string, description: 'Data da compra do pedido no marketplace', example: '2020-03-21 13:27:36'}, status: {type: string, description: 'Status do pedido', enum: [PENDING, PROCESSED, CANCELED], example: PENDING}, orderPreference: {type: string, description: 'Indicação a loja sobre preferência sobre o pedido', example: 'Pedido pode ser entregue parcialmente'}, delivery: {type: object, properties: {departureTime: {type: string, description: 'Previsão de tempo de retirada', example: '00:15:00'}, deliveryTime: {type: string, description: 'Previsão de tempo de entrega', example: '00:15:00'}, address: {type: object, properties: {zip: {type: string, description: 'CEP do endereço de entrega', example: '12345678'}, city: {type: string, description: 'Cidade do endereço de entrega', example: 'São Paulo'}, state: {type: string, description: 'Estado do endereço de entrega', example: 'São Paulo'}, number: {type: string, description: 'Número do endereço de entrega', example: 1234}, address1: {type: string, description: 'Endereço do endereço de entrega', example: 'Rua X, bairro Y'}, address2: {type: string, description: 'Complemento do endereço de entrega', example: 'Apartamento Z'}, description: {type: string, description: 'Descrição do endereço de entrega', example: 'Meu apartamento'}}}}}, customer: {type: object, properties: {documentId: {type: string, description: 'Id do documento do comprador', example: '01234567890'}, firstName: {type: string, description: 'Primeiro nome do comprador', example: João}, lastName: {type: string, description: 'Último nome do comprador', example: Silva}, phone: {type: string, description: 'Telefone do comprador', example: '5511999999999'}}}, items: {type: array, items: {properties: {marketplaceSkuId: {type: string, description: 'Id do item no marketplace', example: 1234ABCD}, clientSkuId: {type: string, description: 'Id do item no cliente (marca)', example: 5678EFGH}, quantity: {type: integer, description: 'Quantidade comprada do item', example: 1}, units: {type: integer, description: 'Unidade do item', example: 5}, unitsType: {type: string, description: 'Tipo da unidade do item', example: KG}, price: {type: number, description: 'Preço unitário do item', example: 10.9}}}}, statusHistories: {type: array, items: {properties: {status: {type: string, description: 'Status do pedido', enum: [PENDING, PROCESSED, CANCELED], example: PENDING}, changedAt: {type: string, description: 'Data da mudança para o status', example: '2020-03-21 13:27:36'}}}}}
            required: [marketplaceId, clientId, locationId, orderId, totalPrice, placedAt]
        Output:
            type: object
            properties: {marketplaceId: {type: string, description: 'Id do marketplace', example: rappi}, clientId: {type: string, description: 'Id do cliente (marca)', example: mundoverde}, filePath: {type: string, description: 'Path do arquivo na base Linx', example: 'files/mundoverde'}, fileName: {type: string, description: 'Nome do arquivo na base de arquivos Linx', example: mundoverde_202003200912.csv}, generatedStatus: {type: string, description: 'Status da geração do arquivo', enum: [SUCCESS, ERROR], example: SUCCESS}, transferStatus: {type: string, description: 'Status da transferência do arquivo para o marketplace', enum: [PENDING, DEBUG, TRANSFERRED], example: TRANSFERRED}, transferredAt: {type: string, description: 'Data da transferência do arquivo para o marketplace', example: '2020-03-21 13:27:36'}}
            required: [marketplaceId, clientId, fileName, transferStatus]
        StockUpload:
            type: object
            properties: {clientId: {type: string, description: 'Id do cliente', example: mundoverde}, locationId: {type: string, description: 'Id da loja', example: L1}, filePath: {type: string, description: 'Path do arquivo na base Linx', example: 'files/mundoverde'}, fileName: {type: string, description: 'Nome do arquivo na base Linx', example: 'mundoverde_L1_202003200912.csv'}, originalFileName: {type: string, description: 'Nome original do arquivo de upload', example: 'stock.csv'}, originalFileSize: {type: integer, description: 'Tamanho em bytes do arquivo original', example: 100}, uploadedAt: {type: string, description: 'Data do upload do arquivo', example: '2020-03-21 13:27:36'}}
            required: ['clientId', 'locationId', 'filePath', 'fileName', 'uploadedAt']
        UserPermission:
            type: object
            properties: {email: {type: string, description: 'Email do usuário', example: 'fulano@email.com.br'}, type: {type: string, description: 'Tipo do usuário', enum: [LINX_ADMIN, CLIENT_ADMIN, LOCATION_ADMIN], example: LOCATION_ADMIN}, clientId: {type: string, description: 'Id do cliente', example: mundoverde}, locationId: {type: string, description: 'Id da loja', example: L1}}