---
openapi: 3.0.1
info:
  title: Socialalert API
  version: "2.0"
servers:
- url: http://3ft8uk98qmfq79pc.myfritz.net:18774
  description: Test server
- url: http://localhost:7080
  description: Dev server
tags:
- name: feed
- name: file
- name: media
- name: user
paths:
  /rest/feed/current:
    get:
      tags:
      - feed
      summary: Get the feed for the current user.
      parameters:
      - name: pageNumber
        in: query
        description: Sets the page number to return.
        required: false
        schema:
          format: int32
          default: 0
          minimum: 0
          type: integer
      - name: pageSize
        in: query
        description: Sets the size of the page to return.
        required: false
        schema:
          format: int32
          default: 20
          maximum: 100
          minimum: 1
          type: integer
      - name: pagingTimestamp
        in: query
        description: Sets the timestamp in milliseconds since the epoch when the paging
          started.
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
      responses:
        200:
          description: The feed has been retrieved successfuly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedItemInfo'
      security:
      - JWT: []
  '/rest/file/download/{mediaUri}':
    get:
      tags:
      - file
      summary: Download a file in the same format as it has been uploaded.
      parameters:
      - name: mediaUri
        in: path
        description: The relative file uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        404:
          description: No media exists with this uri.
        200:
          description: File will be streamed.
  /rest/file/list/new:
    get:
      tags:
      - file
      summary: List the new files for the current user.
      responses:
        200:
          description: List of file metadata is available in the response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileInfo'
      security:
      - JWT: []
  '/rest/file/metadata/{mediaUri}':
    get:
      tags:
      - file
      summary: Access the file metadata.
      parameters:
      - name: mediaUri
        in: path
        description: The relative file uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        404:
          description: No media exists with this uri.
        200:
          description: File metadata are available in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
      security:
      - JWT: []
  '/rest/file/preview/{mediaUri}':
    get:
      tags:
      - file
      summary: Download a file in the preview format.
      description: For video media, the preview is initialy a still picture and the
        video preview is only created after a delay.
      parameters:
      - name: mediaUri
        in: path
        description: The relative file uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        404:
          description: No media exists with this uri.
        200:
          description: File will be streamed.
          content:
            image/jpeg: {}
            video/mp4: {}
  '/rest/file/thumbnail/{mediaUri}':
    get:
      tags:
      - file
      summary: Download a jpeg thumbnail of the media.
      parameters:
      - name: mediaUri
        in: path
        description: The relative file uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        404:
          description: No media exists with this uri.
        200:
          description: File will be streamed.
  /rest/file/upload/picture:
    post:
      tags:
      - file
      summary: Upload a picture file.
      requestBody:
        description: The file content must be included in the body of the HTTP request.
        content:
          image/jpeg:
            schema:
              $ref: '#/components/schemas/File'
        required: true
      responses:
        201:
          description: The picture is ready to be claimed.
          headers:
            Location:
              description: The media url
              style: simple
              schema:
                format: uri
                type: string
        413:
          description: The file is too large.
        415:
          description: The media is not in the expected format.
      security:
      - JWT: []
  /rest/file/upload/video:
    post:
      tags:
      - file
      summary: Upload a video file.
      requestBody:
        description: The file content must be included in the body of the HTTP request.
        content:
          video/quicktime:
            schema:
              $ref: '#/components/schemas/File'
          video/mp4:
            schema:
              $ref: '#/components/schemas/File'
        required: true
      responses:
        201:
          description: The video is ready to be claimed.
          headers:
            Location:
              description: The media url
              style: simple
              schema:
                format: uri
                type: string
        413:
          description: The file is too large.
        415:
          description: The media is not in the expected format.
      security:
      - JWT: []
  '/rest/media/approval/dislike/{mediaUri}':
    post:
      tags:
      - media
      summary: Set the approval modifier of the media to 'dislike'.
      parameters:
      - name: mediaUri
        in: path
        description: The relative media uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        404:
          description: No media exists with this uri.
        200:
          description: The new status is available in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaDetail'
      security:
      - JWT: []
  '/rest/media/approval/like/{mediaUri}':
    post:
      tags:
      - media
      summary: Set the approval modifier of the media to 'like'.
      parameters:
      - name: mediaUri
        in: path
        description: The relative media uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        404:
          description: No media exists with this uri.
        200:
          description: The new status is available in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaDetail'
      security:
      - JWT: []
  '/rest/media/approval/reset/{mediaUri}':
    post:
      tags:
      - media
      summary: Set the approval modifier of the media to 'null'.
      parameters:
      - name: mediaUri
        in: path
        description: The relative media uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        404:
          description: No media exists with this uri.
        200:
          description: The new status is available in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaDetail'
      security:
      - JWT: []
  '/rest/media/claim/{mediaUri}':
    post:
      tags:
      - media
      summary: Claim a media which has been uploaded recently.
      parameters:
      - name: mediaUri
        in: path
        description: The relative file uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMediaParameter'
      responses:
        403:
          description: This media does not belong to the current user.
        404:
          description: No picture exists with this uri.
        409:
          description: This media exists has already been claimed.
        200:
          description: This media has been successfully claimed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaInfo'
      security:
      - JWT: []
  '/rest/media/comment/{mediaUri}':
    post:
      tags:
      - media
      summary: Comment the specified media.
      parameters:
      - name: mediaUri
        in: path
        description: The relative media uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        404:
          description: No media exists with this uri.
        200:
          description: The comment has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaCommentInfo'
      security:
      - JWT: []
  '/rest/media/comments/{mediaUri}':
    get:
      tags:
      - media
      summary: List the comments for the specified media.
      parameters:
      - name: mediaUri
        in: path
        description: The relative media uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      - name: pageNumber
        in: query
        description: Sets the page number to return.
        required: false
        schema:
          format: int32
          default: 0
          minimum: 0
          type: integer
      - name: pageSize
        in: query
        description: Sets the size of the page to return.
        required: false
        schema:
          format: int32
          default: 20
          maximum: 100
          minimum: 1
          type: integer
      - name: pagingTimestamp
        in: query
        description: Sets the timestamp in milliseconds since the epoch when the paging
          started.
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
      responses:
        404:
          description: No media exists with this uri.
      security:
      - JWT: []
  /rest/media/mapCount:
    get:
      tags:
      - media
      summary: Group count claimed media in the given area based on their geo hash.
      parameters:
      - name: category
        in: query
        description: Define the category for searching the media.
        required: false
        schema:
          type: string
      - name: creator
        in: query
        description: Define the user id of the creator for searching the media.
        required: false
        schema:
          type: string
      - name: keywords
        in: query
        description: Define the keywords for searching the media.
        required: false
        schema:
          type: string
      - name: kind
        in: query
        description: Restrict the type of returned media.
        required: false
        schema:
          $ref: '#/components/schemas/MediaKind'
      - name: maxAge
        in: query
        description: Define the maximum age in milliseconds of the returned media.
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
      - name: maxLatitude
        in: query
        description: Define the area for the returned media.
        required: true
        schema:
          format: double
          type: number
          nullable: false
      - name: maxLongitude
        in: query
        description: Define the area for the returned media.
        required: true
        schema:
          format: double
          type: number
          nullable: false
      - name: minLatitude
        in: query
        description: Define the area for the returned media.
        required: true
        schema:
          format: double
          type: number
          nullable: false
      - name: minLongitude
        in: query
        description: Define the area for the returned media.
        required: true
        schema:
          format: double
          type: number
          nullable: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGeoStatistic'
      security:
      - JWT: []
  /rest/media/search:
    get:
      tags:
      - media
      summary: Search claimed media based on any combination of the provided parameters.
      parameters:
      - name: category
        in: query
        description: Define the category for searching the media.
        required: false
        schema:
          type: string
      - name: creator
        in: query
        description: Define the user id of the creator for searching the media.
        required: false
        schema:
          type: string
      - name: keywords
        in: query
        description: Define the keywords for searching the media.
        required: false
        schema:
          type: string
      - name: kind
        in: query
        description: Restrict the type of returned media.
        required: false
        schema:
          $ref: '#/components/schemas/MediaKind'
      - name: maxAge
        in: query
        description: Define the maximum age in milliseconds of the returned media.
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
      - name: maxLatitude
        in: query
        description: Define the area for the returned media.
        required: false
        schema:
          format: double
          type: number
      - name: maxLongitude
        in: query
        description: Define the area for the returned media.
        required: false
        schema:
          format: double
          type: number
      - name: minLatitude
        in: query
        description: Define the area for the returned media.
        required: false
        schema:
          format: double
          type: number
      - name: minLongitude
        in: query
        description: Define the area for the returned media.
        required: false
        schema:
          format: double
          type: number
      - name: pageNumber
        in: query
        description: Sets the page number to return.
        required: false
        schema:
          format: int32
          default: 0
          minimum: 0
          type: integer
      - name: pageSize
        in: query
        description: Sets the size of the page to return.
        required: false
        schema:
          format: int32
          default: 20
          maximum: 100
          minimum: 1
          type: integer
      - name: pagingTimestamp
        in: query
        description: Sets the timestamp in milliseconds since the epoch when the paging
          started.
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResultMediaInfo'
      security:
      - JWT: []
  /rest/media/searchNearest:
    get:
      tags:
      - media
      summary: Search claimed media based on any combination of the provided parameters.
      parameters:
      - name: category
        in: query
        description: Define the category for searching the media.
        required: false
        schema:
          type: string
      - name: creator
        in: query
        description: Define the user id of the creator for searching the media.
        required: false
        schema:
          type: string
      - name: keywords
        in: query
        description: Define the keywords for searching the media.
        required: false
        schema:
          type: string
      - name: kind
        in: query
        description: Restrict the type of returned media.
        required: false
        schema:
          $ref: '#/components/schemas/MediaKind'
      - name: latitude
        in: query
        description: Define the location for the nearest media.
        required: true
        schema:
          format: double
          type: number
      - name: longitude
        in: query
        description: Define the location for the nearest media.
        required: true
        schema:
          format: double
          type: number
      - name: maxAge
        in: query
        description: Define the maximum age in milliseconds of the returned media.
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
      - name: maxDistance
        in: query
        description: Define the maximum distance in kilometer for the nearest media.
        required: true
        schema:
          format: double
          type: number
      - name: pageNumber
        in: query
        description: Sets the page number to return.
        required: false
        schema:
          format: int32
          default: 0
          minimum: 0
          type: integer
      - name: pageSize
        in: query
        description: Sets the size of the page to return.
        required: false
        schema:
          format: int32
          default: 20
          maximum: 100
          minimum: 1
          type: integer
      - name: pagingTimestamp
        in: query
        description: Sets the timestamp in milliseconds since the epoch when the paging
          started.
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResultMediaInfo'
      security:
      - JWT: []
  '/rest/media/update/{mediaUri}':
    post:
      tags:
      - media
      summary: Update the meta information about a media.
      parameters:
      - name: mediaUri
        in: path
        description: The relative media uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMediaParameter'
      responses:
        403:
          description: This media does not belong to the current user.
        404:
          description: No media exists with this uri.
        200:
          description: The metainformation have been successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaInfo'
      security:
      - JWT: []
  '/rest/media/view/{mediaUri}':
    get:
      tags:
      - media
      summary: View the media details. If it is the first call for this media in the
        user session, then the hit count will be increased by one.
      parameters:
      - name: mediaUri
        in: path
        description: The relative media uri.
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        404:
          description: No media exists with this uri.
        200:
          description: The detail is available in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaDetail'
      security:
      - JWT: []
  /rest/user/create:
    post:
      tags:
      - user
      summary: Create a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserParameter'
      responses:
        409:
          description: User already exists.
        201:
          description: User created with success.
  /rest/user/current:
    get:
      tags:
      - user
      summary: Read information about the currently logged in user.
      responses:
        404:
          description: Current user could not be found.
        200:
          description: Current user returned with success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
      security:
      - JWT: []
  '/rest/user/follow/{userId}':
    post:
      tags:
      - user
      summary: Start following the specified user.
      parameters:
      - name: userId
        in: path
        description: The user id to follow
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        201:
          description: Link has been created.
        404:
          description: Specified user could not be found.
        200:
          description: Link already exists.
      security:
      - JWT: []
  /rest/user/followed:
    get:
      tags:
      - user
      summary: List the followed users.
      responses:
        200:
          description: List of users returned with success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
      security:
      - JWT: []
  '/rest/user/info/{userId}':
    get:
      tags:
      - user
      summary: Read information about the specified user.
      parameters:
      - name: userId
        in: path
        description: The user id to return
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        404:
          description: Specified user could not be found.
        200:
          description: Specified user returned with success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
      security:
      - JWT: []
  /rest/user/login:
    post:
      tags:
      - user
      summary: Login an existing user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginParameter'
      responses:
        401:
          description: Login failed.
        200:
          description: Login successfull.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /rest/user/logout:
    post:
      tags:
      - user
      summary: Logout an existing user.
      responses:
        204:
          description: Logout successfull.
        400:
          description: Logout failed.
      security:
      - JWT: []
  /rest/user/renewLogin:
    post:
      tags:
      - user
      summary: Renew an existing login using the previous refresh token.
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        401:
          description: Login failed.
        200:
          description: Login successfull.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  '/rest/user/unfollow/{userId}':
    post:
      tags:
      - user
      summary: Stop following the specified user.
      parameters:
      - name: userId
        in: path
        description: The user id to unfollow
        required: true
        schema:
          minLength: 1
          type: string
          nullable: false
      responses:
        410:
          description: Link does not exist.
        404:
          description: Specified user could not be found.
        200:
          description: Link has been deleted.
      security:
      - JWT: []
components:
  schemas:
    FeedItemInfo:
      description: The information for a feed item.
      type: object
      properties:
        activity:
          $ref: '#/components/schemas/FeedActivity'
        comment:
          $ref: '#/components/schemas/MediaCommentInfo'
        creation:
          format: int64
          description: The activity timestamp in milliseconds since the epoch.
          type: integer
        creator:
          $ref: '#/components/schemas/UserInfo'
        creatorId:
          type: string
        media:
          $ref: '#/components/schemas/MediaInfo'
    FeedActivity:
      enum:
      - DISLIKE_COMMENT
      - DISLIKE_MEDIA
      - LIKE_COMMENT
      - LIKE_MEDIA
      - NEW_COMMENT
      - NEW_MEDIA
      - REPOST_COMMENT
      - REPOST_MEDIA
      - WATCH_MEDIA
      type: string
    MediaCommentInfo:
      description: The comment information.
      type: object
      properties:
        comment:
          type: string
        creation:
          format: int64
          description: The media timestamp in milliseconds since the epoch.
          type: integer
        creator:
          $ref: '#/components/schemas/UserInfo'
        creatorId:
          type: string
        dislikeCount:
          format: int32
          type: integer
        id:
          type: string
        likeCount:
          format: int32
          type: integer
    UserInfo:
      type: object
      properties:
        biography:
          type: string
        birthdate:
          $ref: '#/components/schemas/LocalDate'
        country:
          type: string
        createdTimestamp:
          format: int64
          description: The creation timestamp in milliseconds since the epoch.
          type: integer
        email:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        id:
          type: string
        imageUri:
          type: string
        language:
          type: string
        online:
          type: boolean
        statistic:
          $ref: '#/components/schemas/UserStatistic'
        username:
          type: string
    MediaInfo:
      description: The meta information for the media.
      type: object
      properties:
        cameraMaker:
          type: string
        cameraModel:
          type: string
        categories:
          $ref: '#/components/schemas/ListString'
        commentCount:
          format: int32
          type: integer
        country:
          type: string
        creation:
          format: int64
          description: The media timestamp in milliseconds since the epoch.
          type: integer
        creator:
          $ref: '#/components/schemas/UserInfo'
        creatorId:
          type: string
        description:
          type: string
        dislikeCount:
          format: int32
          type: integer
        duration:
          format: int64
          description: The duration of the video in milliseconds.
          type: integer
        fileFormat:
          $ref: '#/components/schemas/MediaFileFormat'
        hitCount:
          format: int32
          type: integer
        kind:
          $ref: '#/components/schemas/MediaKind'
        latitude:
          format: double
          type: number
        likeCount:
          format: int32
          type: integer
        locality:
          type: string
        longitude:
          format: double
          type: number
        mediaUri:
          type: string
        previewFormat:
          $ref: '#/components/schemas/MediaFileFormat'
        tags:
          $ref: '#/components/schemas/ListString'
        timestamp:
          format: int64
          description: The upload timestamp in milliseconds since the epoch.
          type: integer
        title:
          type: string
    ListString:
      type: array
      items:
        type: string
    MediaFileFormat:
      enum:
      - MEDIA_JPG
      - MEDIA_MOV
      - MEDIA_MP4
      - PREVIEW_JPG
      - PREVIEW_MP4
      - THUMBNAIL_JPG
      type: string
    MediaKind:
      description: The kind of media.
      enum:
      - PICTURE
      - VIDEO
      type: string
    LocalDate:
      format: date
      type: string
    Gender:
      enum:
      - FEMALE
      - MALE
      type: string
    UserStatistic:
      type: object
      properties:
        commentCount:
          format: int32
          type: integer
        dislikeCount:
          format: int32
          type: integer
        fileCount:
          format: int32
          type: integer
        followerCount:
          format: int32
          type: integer
        hitCount:
          format: int32
          type: integer
        likeCount:
          format: int32
          type: integer
        loginCount:
          format: int32
          type: integer
        pictureCount:
          format: int32
          type: integer
        videoCount:
          format: int32
          type: integer
    FileInfo:
      description: The meta information for the file.
      type: object
      properties:
        cameraMaker:
          type: string
        cameraModel:
          type: string
        contentSize:
          format: int64
          type: integer
        creation:
          format: int64
          description: The media timestamp in milliseconds since the epoch.
          type: integer
        creator:
          $ref: '#/components/schemas/UserInfo'
        creatorId:
          type: string
        duration:
          format: int64
          description: The duration of the video in milliseconds.
          type: integer
        fileFormat:
          $ref: '#/components/schemas/MediaFileFormat'
        fileUri:
          type: string
        height:
          format: int32
          type: integer
        latitude:
          format: double
          type: number
        longitude:
          format: double
          type: number
        previewFormat:
          $ref: '#/components/schemas/MediaFileFormat'
        timestamp:
          format: int64
          description: The upload timestamp in milliseconds since the epoch.
          type: integer
        width:
          format: int32
          type: integer
        picture:
          type: boolean
        video:
          type: boolean
    File:
      type: object
      properties:
        path:
          type: string
        absoluteFile:
          $ref: '#/components/schemas/File'
        absolutePath:
          type: string
        canonicalFile:
          $ref: '#/components/schemas/File'
        canonicalPath:
          type: string
        freeSpace:
          format: int64
          type: integer
        name:
          type: string
        parent:
          type: string
        parentFile:
          $ref: '#/components/schemas/File'
        totalSpace:
          format: int64
          type: integer
        usableSpace:
          format: int64
          type: integer
        absolute:
          type: boolean
        directory:
          type: boolean
        file:
          type: boolean
        hidden:
          type: boolean
        invalid:
          type: boolean
    ListString1:
      type: array
      items:
        type: string
    GeoAddress:
      type: object
      properties:
        country:
          type: string
        formattedAddress:
          type: string
        latitude:
          format: double
          type: number
        locality:
          type: string
        longitude:
          format: double
          type: number
    ListString2:
      type: array
      items:
        type: string
    UpsertMediaParameter:
      required:
      - categories
      - tags
      type: object
      properties:
        categories:
          allOf:
          - $ref: '#/components/schemas/ListString1'
          - maxItems: 8
            items:
              type: string
            nullable: false
        description:
          maxLength: 4000
          pattern: \S
          type: string
          nullable: false
        location:
          $ref: '#/components/schemas/GeoAddress'
        tags:
          allOf:
          - $ref: '#/components/schemas/ListString2'
          - maxItems: 10
            items:
              type: string
            nullable: false
        title:
          maxLength: 200
          pattern: \S
          type: string
          nullable: false
    ApprovalModifier:
      enum:
      - DISLIKE
      - LIKE
      type: string
    MediaDetail:
      type: object
      properties:
        cameraMaker:
          type: string
        cameraModel:
          type: string
        categories:
          $ref: '#/components/schemas/ListString'
        commentCount:
          format: int32
          type: integer
        country:
          type: string
        creation:
          format: int64
          description: The media timestamp in milliseconds since the epoch.
          type: integer
        creator:
          $ref: '#/components/schemas/UserInfo'
        creatorId:
          type: string
        description:
          type: string
        dislikeCount:
          format: int32
          type: integer
        duration:
          format: int64
          description: The duration of the video in milliseconds.
          type: integer
        fileFormat:
          $ref: '#/components/schemas/MediaFileFormat'
        hitCount:
          format: int32
          type: integer
        kind:
          $ref: '#/components/schemas/MediaKind'
        latitude:
          format: double
          type: number
        likeCount:
          format: int32
          type: integer
        locality:
          type: string
        longitude:
          format: double
          type: number
        mediaUri:
          type: string
        previewFormat:
          $ref: '#/components/schemas/MediaFileFormat'
        tags:
          $ref: '#/components/schemas/ListString'
        timestamp:
          format: int64
          description: The upload timestamp in milliseconds since the epoch.
          type: integer
        title:
          type: string
        userApprovalModifier:
          $ref: '#/components/schemas/ApprovalModifier'
        dislikeAllowed:
          type: boolean
        likeAllowed:
          type: boolean
    GeoStatistic:
      description: The number of matching media in the area.
      type: object
      properties:
        count:
          format: int64
          type: integer
        maxLat:
          format: double
          type: number
        maxLon:
          format: double
          type: number
        minLat:
          format: double
          type: number
        minLon:
          format: double
          type: number
        centerLatitude:
          format: double
          type: number
        centerLongitude:
          format: double
          type: number
    ListGeoStatistic:
      $ref: '#/components/schemas/ListGeoStatistic'
    QueryResult:
      description: Group the items in a page.
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ListObject'
        nextPage:
          $ref: '#/components/schemas/PagingParameter'
        pageCount:
          format: int32
          type: integer
        pageNumber:
          format: int32
          type: integer
    ListObject:
      type: array
      items:
        $ref: '#/components/schemas/MediaInfo'
    PagingParameter:
      type: object
      properties:
        pageNumber:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        timestamp:
          format: int64
          description: The paging start timestamp in milliseconds since the epoch.
          type: integer
        offset:
          format: int32
          type: integer
    QueryResultMediaInfo:
      description: Group the items in a page.
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ListObject'
        nextPage:
          $ref: '#/components/schemas/PagingParameter'
        pageCount:
          format: int32
          type: integer
        pageNumber:
          format: int32
          type: integer
    NewUserParameter:
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        username:
          type: string
    LoginParameter:
      type: object
      properties:
        password:
          minLength: 1
          type: string
          nullable: false
        username:
          minLength: 1
          type: string
          nullable: false
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        expiration:
          format: int64
          description: The access token expiration timestamp in milliseconds since
            the epoch.
          type: integer
        refreshToken:
          type: string
        biography:
          type: string
        birthdate:
          $ref: '#/components/schemas/LocalDate'
        country:
          type: string
        createdTimestamp:
          format: int64
          description: The creation timestamp in milliseconds since the epoch.
          type: integer
        email:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        id:
          type: string
        imageUri:
          type: string
        language:
          type: string
        online:
          type: boolean
        statistic:
          $ref: '#/components/schemas/UserStatistic'
        username:
          type: string
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT