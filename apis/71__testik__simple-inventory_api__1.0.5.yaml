openapi: 3.0.0
info:
  title: Simple Inventory API
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: "1.0.5"
servers:
  - url: 'https://virtserver.swaggerhub.com/ToNix/ChatCard/1.0.3'
    description: SwaggerHub API Auto Mocking
tags:
  - name: chatCard
    description: api for chatCard
paths:
  '/ems/api/v1/chatSessions/{chatSessionId}/messages':
    get:
      tags:
        - ems
      summary: get messages from chatSession
      description: get messages
      operationId: getMessages
      parameters:
        - name: chatSessionId
          in: path
          description: uuid ID of the chatSession to get
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: security
          in: header
          description: session identifier + cors + ???
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: MEGA_PROTECTION
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatSessionMessage'
        '400':
          description: bad input parameter
          
    post:
      tags:
        - ems
      summary: post message to chatSession  
      description: postMessage
      operationId: postMessage
      parameters:
      - name: chatSessionId
        in: path
        description: uuid ID of the chatSession
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/ChatSessionMessage'
      responses:
        '200':
          description: OK
        '400':
          description: bad input parameter      
  '/ems/api/v1/chatSessions':
    get:
      tags:
        - ems
      summary: get chatSessions
      description: get chatSessions
      operationId: getAllChatSessions
      parameters:
        - name: security
          in: header
          description: session identifier + cors + ???
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: MEGA_PROTECTION
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatSession'
        '400':
          description: bad input parameter
  '/ems/api/v1/users/{userId}/chatSessions':
    get:
      tags:
        - ems
      summary: get chatSessions
      description: get chatSessions
      operationId: getChatSessionsForUser
      parameters:
        - name: userId
          in: path
          description: uuid ID of current user
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: security
          in: header
          description: session identifier + cors + ???
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: MEGA_PROTECTION
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatSession'
        '400':
          description: bad input parameter
  '/ems/api/v1/users/{userId}':
    get:
      tags:
        - ems
      summary: get user by id
      description: get user by id
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: uuid ID of user
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: security
          in: header
          description: session identifier + cors + ???
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: MEGA_PROTECTION
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
    
components:
  schemas:
    ChatSession:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1290f1ee-6c54-4b01-90e6-d701777f0832
        lastMessage:
          type: string
          example: Hello!
        assignDate:
          type: string
          format: date-time
          example: '2020-03-25T09:43:21.001Z'
        closureDate:
          type: string
          format: date-time
          example: '2020-03-25T09:43:21.001Z'
        assignUserId:
          type: string
          format: uuid
          example: 1290f1ee-6c54-4b01-90e6-d701777f0832
        clientName:
          type: string
          example: Anonymous
        clientId:
          type: string
          format: uuid
          example: 1290f1ee-6c54-4b01-90e6-d701777f0832
    ChatSessionMessage:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1290f1ee-6c54-4b01-90e6-d701777f0832
        sentDate:
          type: string
          format: date-time
          example: '2020-03-25T09:43:21.001Z'
        messageText:
          type: string
          example: Hello!
        authorName:
          type: string
          example: SagaxBot
        direction:
          type: string
          example: IN
          enum:
            - IN
            - OUT
    User:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1290f1ee-6c54-4b01-90e6-d701777f0832
        name:
          type: string
          example: SagaxBot
        status:
          type: string
          example: ONLINE
          enum:
            - ONLINE
            - OFFLINE
