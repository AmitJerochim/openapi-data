openapi: 3.0.0
info:
  title: INOIB Backend Admin
  description: >-
    This is backend api-docs(Open ASv3) for inoib admin web platform built in
    nodejs + mongodb. Backend Author  [Mail, #Raman
    Shekhawat](mailto:ramanshekhawat75@gmail.com) 

    ||

    [github.com/justraman](https://github.com/justraman). Contact developer if
    api's wont work. 
     # Model 

     raman
  contact:
    name: Raman Shekhawat
    email: ramanshekhawat75@gmail.com
  x-logo:
    url: >-
      https://287428-902969-raikfcquaxqncofqfm.stackpathdns.com/wp-content/uploads/2019/05/Server-side-Development-with-NodeJS-Express-and-MongoDB-Course-on-Coursera.jpg
    backgroundColor: '#FFFFFF'
    altText: Petstore logo
  version: v1
servers:
  - url: 'http://heroku.com/api/v1/{access}'
    description: Test Server
    variables:
      access:
        default: admin
        description: the person who accessing it
        enum:
          - admin
          - organization
  - url: 'https://dev.com'
    description: Production Server
x-tagGroups:
  - name: Model
    tags:
      - organization_model
tags:
  - name: Organization
    description: >-
      Organization or Company are the first customers who directly use our
      services
  - name: Plans
    description: The different Plans for  the  Organizations
  - name: Users
    description: Users which are created by organizations.
  - name: Category
    description: Different Categories for master
  - name: Masters
    description: Masters CRUD Operations
  - name: organization_model
    x-displayName: The Organization Model
    description: >-
      <SchemaDefinition schemaRef="#/components/schemas/Organization"
      exampleRef="#/components/schemas/Organization" showReadOnly={true}
      showWriteOnly={true} />
components:
  schemas:
    Organization:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          format: ObjectId
        company_name:
          type: string
        company_email:
          type: string
          format: email
        company_number:
          type: string
          format: number
        compnay_website:
          type: string
          format: weburl
        company_admin:
          type: object
          properties:
            name:
              type: string
              title: 'full name '
            email:
              type: string
        address:
          type: object
          properties:
            line_1:
              type: string
            line_2:
              type: string
            country:
              type: string
            zip_code:
              type: number
            state:
              type: string
            city:
              type: string
        plan:
          type: string
          format: ObjectId
        category:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Category'
    Category:
      type: object
      required:
        - name
      properties:
        _id:
          type: string
          format: ObjectId
          readOnly: true
        name:
          type: string
        description:
          type: string
        masters:
          type: array
          items:
            $ref: '#/components/schemas/Masters'
    Masters:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          readOnly: true
        name:
          type: string
        description:
          type: string
        modules:
          type: array
          items:
            $ref: '#/components/schemas/Modules'
      xml:
        name: User
    Modules:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          format: ObjectId
        name:
          type: string
        steps:
          type: array
          items:
            properties:
              _id:
                type: string
                readOnly: true
                format: ObjectId
              desc:
                type: string
                description: question of step
      xml:
        name: Tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the pet
        status:
          type: string
          description: Updated status of the pet
    body_1:
      type: object
      properties:
        additionalMetadata:
          type: string
          description: Additional data to pass to server
        file:
          type: string
          description: file to upload
          format: binary
  requestBodies: {}
  securitySchemes:
    auth_token:
      type: apiKey
      name: Authorization
      in: header
paths:
  /:
    get:
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
