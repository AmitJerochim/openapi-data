penapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: Main Server Production
    url: https://simplesql.redbeardlab.com/v0/api
info:
  description: |
    **SimpleSQL API**
    
    How many time do you wanted a simple SQL database reachable via HTTP REST calls? Personally, countless time.
    Not satisfied by the alternative I create [**SimpleSQL**](https://simplesql.redbeardlab.com/).
    
    With [**SimpleSQL**](https://simplesql.redbeardlab.com/) you can create a new lightweight database with a simple POST call, with another POST call you can execute command (CREATE TABLE, INSERT, UPDATE, QUERY, DELETE, etc) against that database.
    
    Of course, it is possible to make this HTTP calls from either a server or directly from a client, opening countless opportunities.
    
    The fundamental API is extremely simple with only two endpoints:
    1. POST `/database` create a new database and returns a JSON that contains the ID of the newly created database.
    2. POST `/command/{databaseID}` accept a json with the command to execute against the database, this call can either modify the database schema (eg. `CREATE TABLE`), modify the data (eg. `INSERT` or `UPDATE` or `DELETE`) or return results (`SELECT`).
    
    Without authentication, each database created will be public, and everybody will be able to access it.
    
    Authentication is possible using tokens, a token is automatically [created as soon as a new user register](https://simplesql.redbeardlab.com/application/login).
    In order to use authentication the token must be provided as header: `Authentication: Bearer ${token}` when executing the API calls.
    
    If a new database is create using a token, the database is private, which means it can only be accessed providing a valid token.
    
    The authetication allows new endpoints:
    1. GET `/databases` list all the private databases, this endpoint never list the public databases.
    2. POST `/token` create a new tokens that can be used in lue of the first one or shared in a public context.
    3. GET `/tokens` list all the active tokens.
    
    The `Try it out` buttons below actually works and produce the expeected results, feel free to play around.
    
    
    If you are interested in the development of this project:
    1. [subscribe to the mail list of SimpleSQL](https://landing.mailerlite.com/webforms/landing/d5m9d6) 
    2. [follow me on Twitter @siscia_](https://twitter.com/siscia_)
    
    Public idle databases are destroyed after 3 days, if you wish to keep your please [get in touch](mailto:simone@redbeardlab.com).
    
    Fair used is expected, I reserve the right to terminate any database. Please use indexes.
    
    The service is hosted in Europe, France at the moment.
    
    Enjoy!
  version: "0.1.1"
  title: SimpleSQL
  contact:
    email: simone@redbeardlab.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: developers
    description: Operations available to regular developers
paths:
  /database:
    post:
      tags:
        - developers
      summary: Create a new database
      description: Create a new database and returns its ID
      security:
        - token: []
      responses:
        201:
          description: Database created
          content:
            application/json:
              schema:
                type: object
                properties:
                  database:
                    type: string
                    description: The ID of the database
                  status:
                    type: string
                    description: Always `ok` for successful operations
        500:
          description: Internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Always `err` for unsuccessful operations
                  message:
                    type: string
                    description: Error messages
  /command/{databaseID}:
    post:
      tags: 
        - developers
      summary: Execute a command against the database
      description: "This endpoint execute the command in the body against the database.
      
      
      We provide few examples for you to try. From returning a simple number to creating tables and joining them together.
      
      
      We suggest to follow the examples in order and then modify them as you wish in order to explore the capabilities of SimpleSQL.
      "
      parameters: 
        - in: path
          name: databaseID
          schema:
            type: string
          required: true
          description: The ID of the database against which execute the command
      security: 
        - token: []
      requestBody:
        description: The command to execute
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                command:
                  type: string
                  description: The SQL command (or query) to execute against the database
            examples:
              select_1:
                summary: Returns a simple number
                value:
                  command: "SELECT 1;"
              create_cats:
                summary: Create a new cats table
                value:
                  command: "CREATE TABLE cats(id INT, name STRING);"
              insert_cats:
                summary: Insert new cats in the the table
                value:
                  command: "INSERT INTO cats(id, name) VALUES(1, 'Oscar'), (2, 'Maru'), (3, 'Stubbs'), (4, 'Holps'), (5, 'Mock');"
              returns_cats:
                summary: Return the cats from the database
                value:
                  command: "SELECT * FROM cats;"
              create_dogs:
                summary: Create a new dogs table 
                value:
                  command: "CREATE TABLE IF NOT EXISTS dogs(id, name);"
              insert_dogs:
                summary: Insert dogs into the new table
                value:
                  command: "INSERT INTO dogs VALUES (1, 'Fido'), (2, 'Oscar'), (3, 'TinTin'), (4, 'Roosvelt');" 
              return_join:
                summary: Make join and return dogs and cats together
                value:
                  command: "SELECT * FROM cats JOIN dogs WHERE cats.id = dogs.id;"
                  
      responses:
        200:
          description: The command is successful executed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "`ok` for successful operations"
                  database:
                    type: string
                    description: The database against which we execute the operation, the same in the request path
                  command:
                    type: string
                    description: The command executed, the same in the request body
                  result:
                    type: object
                    description: The content of the result
                    oneOf:
                      - $ref: '#/components/schemas/OK'
                      - $ref: '#/components/schemas/DONE'
                      - $ref: '#/components/schemas/RESULT'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /databases:
    get:
      tags:
        - developers
      summary: List all the databases
      description: The endpoint return a list of all the private databases create by the user
      security:
        - token: []
      responses:
        200:
          description: The list of databases associate with the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["AB34F1", "A872CD"]
                  description: The name of the databases associated with the user
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /token:
    post:
      tags: 
        - developers
      summary: Create new token
      description: This create a new token usable to access the databases, if you need to share a token client side it is a good idea to create a new token for each client.
      security:
        - token: []
      responses:
        201:
          description: The new token is successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                    description: "Indicate if there is an error `err` or if everything worked `ok`"
                  token:
                    type: string
                    example: "JSLA832JD32LJD8"
                    description: The token just created
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /tokens:
    get:
      tags:
        - developers
      summary: The list of tokens
      security:
        - token: []
      responses:
        200:
          description: The list of all valid token 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["JCEJCJ832N4NCE", "CEO8JD3MCU34FU"]
                  description: The name of the token associated with the user
        401:
          $ref: '#/components/responses/UnauthorizedError'      
            
        
components:
  securitySchemes:
    token:
      type: http
      scheme: bearer
      description: One of the token available in your dashboard, without the token you can still use the API but only against public databases.
  responses:
    UnauthorizedError:
      description: The request could not be authenticated, either it forgot the header with the authentication token or the token is invalid
  schemas:
    OK:
      type: object
      properties:
        message:
          type: string
          pattern: "OK"
          default: "OK"
          description: "Indicate that the object is an OK response, always `OK`"
    DONE:
      type: object
      properties:
        message:
          type: string
          pattern:  "DONE"
          default: "DONE"
          description: "Indicate that the object is an DONE response, always `DONE`"
        modified_rows:
          type: integer
          description: "The number of rows modified by the command executed"
    RESULT:
      type: object
      properties:
        message:
          type: string
          pattern: "RESULT"
          default: "RESULT"
          description: "Indicate that the object is a RESULT response and it contains rows, always `RESULT`"
        columns_type:
          type: array
          description: "The type of the columns in the results"
          items:
            type: string
            enum: [INT, STRING, FLOAT, BLOB]
        columns_name:
          type: array
          description: The name of the columns in the result
          items:
            type: string
        values:
          type: array
          description: The actuals result of the query, as an array of array, the first array contains the rows, and each row contains the values
          items:
            type: array
            description: The rows of the results, each row contains the same amount of values
            items:
              type: array
              items:
                description: The actual values returned from the query