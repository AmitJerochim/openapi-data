openapi: 3.0.0
x-generator: NSwag v13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0))
info:
  title: Campaign Simulator API
  version: "1.0.1"
paths:
  /Campaign:
    get:
      security:
        - bearerAuth: []
      tags:
        - Campaign
      summary: Get the full list of Campaign
      operationId: Campaign_GetCampaignAll
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Campaign'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      security:
        - bearerAuth: []
      tags:
        - Campaign
      summary: Create a Campaign
      operationId: Campaign_PostCampaign
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: '-ERR_CAMP_EXIST : "This campaign name already exists.", -ERR_CAMP_CREATE : "An error has occured on the campaign creation."'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - CategoryId
                - Name
              properties:
                CategoryId:
                  type: integer
                  format: int32
                EmitterId:
                  type: integer
                  format: int32
                Name:
                  type: string
                  maxLength: 100
                  minLength: 1
        required: true
  '/Campaign/Search/{word}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Campaign
      summary: Get a list of Campaign that the name contains a search word
      operationId: Campaign_GetSearchAll
      parameters:
        - name: word
          in: path
          required: true
          x-nullable: false
          schema:
            type: string
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /Campaign/Search:
    get:
      security:
        - bearerAuth: []
      tags:
        - Campaign
      summary: >-
        Get a list of Campaign that the name contains a search word (when the
        search word is empty)
      operationId: Campaign_GetSearch
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/Campaign/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Campaign
      summary: Get a Campaign by ID
      operationId: Campaign_GetCampaign
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      security:
        - bearerAuth: []
      tags:
        - Campaign
      summary: Update a Campaign
      operationId: Campaign_PutCampaign
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: 'OK, No Content'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: '-ERR_CAMP_EXIST : "This campaign name already exists.", -ERR_CAMP_UPDATE : "An error occurred during the update of the campaign"'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - CampaignId
                - CategoryId
                - Name
                - ReservationExist
                - DeletionStatus
              properties:
                CampaignId:
                  type: integer
                  format: int32
                CategoryId:
                  type: integer
                  format: int32
                EmitterId:
                  type: integer
                  format: int32
                Name:
                  type: string
                  maxLength: 100
                  minLength: 1
        required: true
    delete:
      security:
        - bearerAuth: []
      tags:
        - Campaign
      summary: Delete a Campaign
      operationId: Campaign_DeleteCampaign
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: 'This campaign cannot be deleted because a past or current reservation or one with a departure less than 2 weeks away is positioned on it.'
  '/Campaign/RecapCampaign/{id}':
    post:
      security:
        - bearerAuth: []
      tags:
        - Campaign
      summary: Send a recap of te campaign by email
      operationId: Campaign_PostRecapCampaign
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: 'OK, No Content'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description : '-ERR_RECAP_CAMP : "An error as occured during the build of the recap and the email was not sent."'
  /CampaignWeek:
    get:
      security:
        - bearerAuth: []
      tags:
        - CampaignWeek
      summary: Get the full list of CampaignWeek
      operationId: CampaignWeek_GetCampaignWeekAll
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignWeek'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      security:
        - bearerAuth: []
      tags:
        - CampaignWeek
      summary: Create a CampaignWeek
      operationId: CampaignWeek_PostCampaignWeek
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignWeek'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: '- ERR_CAMPW_EXIST : "This campaign already exists on the this week", -ERR_CAMPW_DATE : "It''s impossible to put a campaign at this week"'
      requestBody:
        $ref: '#/components/requestBodies/CampaignWeek'
  '/CampaignWeek/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - CampaignWeek
      summary: Get a CampaignWeek by ID
      operationId: CampaignWeek_GetCampaignWeek
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignWeek'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      security:
        - bearerAuth: []
      tags:
        - CampaignWeek
      summary: Update a CampaignWeek
      operationId: CampaignWeek_PutCampaignWeek
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: 'OK, No Content'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: '-ERR_CAMPW_UPDATE : "An error occurred during the update of the CampaignWeek.", - ERR_CAMPW_EXIST : "This campaign already exists on the this week", -ERR_CAMPW_DATE : "It''s impossible to put a campaign at this week", -ERR_RESV_MAX : "There''s not enough availability for this week"'
      requestBody:
        $ref: '#/components/requestBodies/CampaignWeek'
    delete:
      security:
        - bearerAuth: []
      tags:
        - CampaignWeek
      summary: Delete a CampaignWeek
      operationId: CampaignWeek_DeleteCampaignWeek
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignWeek'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: '-ERR_CAMPW_DELETE : "This campaign cannot be deleted from this week because a reservation made, in progress or with a departure in less than 2 weeks is positioned on it."'
  '/CampaignWeek/Duplicate/{idCampaignWeek}/{idNewWeek}/{withReservation}':
    post:
      security:
        - bearerAuth: []
      tags:
        - CampaignWeek
      summary: Duplicate a CampaignWeek
      operationId: CampaignWeek_PostDuplicateCampaignWeek
      parameters:
        - name: idCampaignWeek
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
        - name: idNewWeek
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
        - name: withReservation
          in: path
          required: true
          x-nullable: false
          schema:
            type: boolean
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignWeek'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: '-ERR_CAMPW_CREATE : "An error occurred during the duplication of the CampaignWeek.", - ERR_CAMPW_EXIST : "This campaign already exists on the this week", -ERR_CAMPW_DATE : "It''s impossible to put a campaign at this week", -ERR_RESV_MAX : "There''s not enough availability for this week"'
  /Category:
    get:
      security:
        - bearerAuth: []
      tags:
        - Category
      summary: Get the full list of Category.
      operationId: Category_GetCategoryAll
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/Category/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Category
      summary: Get a Category by ID.
      operationId: Category_GetCategory
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /Emitter:
    get:
      security:
        - bearerAuth: []
      tags:
        - Emitter
      summary: Get the full list of Emitter.
      operationId: Emitter_GetEmitterAll
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Emitter'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/Emitter/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Emitter
      summary: Get an Emitter by ID.
      operationId: Emitter_GetEmitter
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Emitter'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /Network:
    get:
      security:
        - bearerAuth: []
      tags:
        - Network
      summary: Get the full list of Network.
      operationId: Network_GetNetWorkAll
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Network'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/Network/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Network
      summary: Get a Network by ID.
      operationId: Network_GetNetWork
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/Network/GetNbPanel/{networkId}/{weekId}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Network
      summary: Get the number of panel for a Network and a Week.
      operationId: Network_GetNbPanel
      parameters:
        - name: networkId
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
        - name: weekId
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NbPanelWeekNetworkDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /Reservation:
    get:
      security:
        - bearerAuth: []
      tags:
        - Reservation
      summary: Get the full list of Reservation.
      operationId: Reservation_GetReservationAll
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      security:
        - bearerAuth: []
      tags:
        - Reservation
      summary: Create a Reservation.
      operationId: Reservation_PostReservation
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: '-ERR_RESV_DATE : "You cannot create a reservation on this date and on this network.", -ERR_RESV_MAX : "There''s not enough availability for this week"'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - CampaignWeekId
                - NetworkId
                - StatusId
              properties:
                CampaignWeekId:
                  type: integer
                  format: int32
                NetworkId:
                  type: integer
                  format: int32
                StatusId:
                  type: integer
                  format: int32
                Comment:
                  type: string
                  maxLength: 255
                  minLength: 0
        required: true
  '/Reservation/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Reservation
      summary: Get a Reservation by ID.
      operationId: Reservation_GetReservation
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      security:
        - bearerAuth: []
      tags:
        - Reservation
      summary: Update a Reservation.
      operationId: Reservation_PutReservation
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: 'OK, No Content'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: '-ERR_RESV_UPDATE : "An error occurred during the update of the reservation."'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - ReservationId
                - CampaignWeekId
                - NetworkId
                - StatusId
              properties:
                ReservationId:
                  type: integer
                  format: int32
                CampaignWeekId:
                  type: integer
                  format: int32
                NetworkId:
                  type: integer
                  format: int32
                StatusId:
                  type: integer
                  format: int32
                Comment:
                  type: string
                  maxLength: 255
                  minLength: 0
        required: true
    delete:
      security:
        - bearerAuth: []
      tags:
        - Reservation
      summary: Delete a Reservation.
      operationId: Reservation_DeleteReservation
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: '-ERR_RESV_DELETE : "This Reservation cannot be deleted as it is a past, current or departure reservation of less than 2 weeks."'
  '/Reservation/Visual/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Reservation
      summary: Get the visuals for a reservation.
      operationId: Reservation_GetVisual
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      security:
        - bearerAuth: []
      tags:
        - Reservation
      summary: Upsert the visuals for a reservation.
      operationId: Reservation_PutVisual
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '204':
          description: 'OK, No Content'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: 'An error occurred during the update of the reservation.'
  /Status:
    get:
      security:
        - bearerAuth: []
      tags:
        - Status
      summary: Get the full list of Status.
      operationId: Status_GetStatusAll
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/Status/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Status
      summary: Get a Status by ID.
      operationId: Status_GetStatus
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /User/Login:
    post:
      tags:
        - User
      summary: Authenticate the User.
      operationId: User_PostLogin
      responses:
        '200':
          x-nullable: true
          description: 'OK'
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          description: 'Unauthorized'
      requestBody:
        $ref: '#/components/requestBodies/UserDTO'
  /Week:
    get:
      security:
        - bearerAuth: []
      tags:
        - Week
      summary: Get the full list of Week.
      operationId: Week_GetWeekAll
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Week'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/Week/Search/{date}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Week
      summary: >-
        Get a +/- 6 month list of Week around a date (= today if the date is
        ).
      operationId: Week_GetSearch
      parameters:
        - name: date
          in: path
          required: true
          x-nullable: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Week'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: '-ERR_WEEK_SEARCH: "An error occurred while retrieving the pivot week."'
  '/Week/{id}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Week
      summary: Get a Week by ID.
      operationId: Week_GetWeek
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Week'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/Week/{id}/Planning':
    get:
      security:
        - bearerAuth: []
      tags:
        - Week
      summary: Get the Planning for a Week.
      operationId: Week_GetPlaning
      parameters:
        - name: id
          in: path
          required: true
          x-nullable: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanningDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /Week/Planning:
    post:
      security:
        - bearerAuth: []
      tags:
        - Week
      summary: Get the Planning for a list of WeekId.
      operationId: Week_PostPlaning
      responses:
        '200':
          x-nullable: false
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanningDTO'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: true
servers:
  - url: 'https://campaign-simulator-dev.clearchannel.fr/'
components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    NotFoundError:
      description: Object not found because the provided ID does not exist
    BadRequestError : 
      description: This request is not properly formatted (the format of the object is not valid, the URI ID does not correspond to the object ID, ...)
  requestBodies:
    CampaignWeek:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CampaignWeek'
      required: true
    ReservationVisual:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReservationVisual'
      required: true
    UserDTO:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserDTO'
      required: true
  schemas:
    Campaign:
      type: object
      required:
        - CampaignId
        - CategoryId
        - Name
        - ReservationExist
        - DeletionStatus
      properties:
        CampaignId:
          type: integer
          format: int32
        CategoryId:
          type: integer
          format: int32
        EmitterId:
          type: integer
          format: int32
        Name:
          type: string
          maxLength: 100
          minLength: 1
        ReservationExist:
          type: boolean
        DeletionStatus:
          $ref: '#/components/schemas/DeletionStatus'
        CreatedAt:
          type: string
          format: date-time
    DeletionStatus:
      type: integer
      description: '0-Deletable, 1-InPast, 2-CurrentWeek, 3-TwoWeeksAwayFromPosting'
      x-enumNames:
        - Deletable
        - InPast
        - CurrentWeek
        - TwoWeeksAwayFromPosting
      enum:
        - 0
        - 1
        - 2
        - 3
    CampaignDTO:
      type: object
      required:
        - CampaignId
        - Name
      properties:
        CampaignId:
          type: integer
          format: int32
        Name:
          type: string
    CampaignWeek:
      type: object
      required:
        - CampaignWeekId
        - CampaignId
        - WeekId
        - DeletionStatus
      properties:
        CampaignWeekId:
          type: integer
          format: int32
        CampaignId:
          type: integer
          format: int32
        WeekId:
          type: integer
          format: int32
        DeletionStatus:
          $ref: '#/components/schemas/DeletionStatus'
    Category:
      type: object
      required:
        - Id
      properties:
        Id:
          type: integer
          format: int32
        Code:
          type: string
          maxLength: 10
          minLength: 0
        Name:
          type: string
          maxLength: 100
          minLength: 0
    Emitter:
      type: object
      required:
        - Id
      properties:
        Id:
          type: integer
          format: int32
        Code:
          type: string
          maxLength: 10
          minLength: 0
        Name:
          type: string
          maxLength: 100
          minLength: 0
    Network:
      type: object
      required:
        - Id
        - WeekDebut
      properties:
        Id:
          type: integer
          format: int32
        Code:
          type: string
          maxLength: 10
          minLength: 0
        Name:
          type: string
          maxLength: 100
          minLength: 0
        WeekDebut:
          type: integer
          format: int32
        WeekFin:
          type: integer
          format: int32
        Order:
          type: integer
          format: byte
    NbPanelWeekNetworkDTO:
      type: object
      required:
        - WeekId
        - NetworkId
      properties:
        WeekId:
          type: integer
          format: int32
        NetworkId:
          type: integer
          format: int32
        PanelNombre:
          type: integer
          format: int32
    Reservation:
      type: object
      required:
        - ReservationId
        - CampaignWeekId
        - NetworkId
        - StatusId
        - DeletionStatus
      properties:
        ReservationId:
          type: integer
          format: int32
        CampaignWeekId:
          type: integer
          format: int32
        NetworkId:
          type: integer
          format: int32
        StatusId:
          type: integer
          format: int32
        Comment:
          type: string
          maxLength: 255
          minLength: 0
        DeletionStatus:
          $ref: '#/components/schemas/DeletionStatus'
    ReservationVisual:
      type: object
      required:
        - IdReservationVisual
        - IdReservation
      properties:
        IdReservationVisual:
          type: integer
          format: int32
        IdReservation:
          type: integer
          format: int32
        VisualName:
          type: string
          maxLength: 255
          minLength: 0
        VisualFile:
          type: string
          maxLength: 255
          minLength: 0
    Status:
      type: object
      required:
        - Id
      properties:
        Id:
          type: integer
          format: int32
        Code:
          type: string
          maxLength: 50
          minLength: 0
        Name:
          type: string
          maxLength: 100
          minLength: 0
    Week:
      type: object
      required:
        - WeekId
        - Week
        - Month
        - WeekYear
      properties:
        WeekId:
          type: integer
          format: int32
        Week:
          type: integer
          format: byte
        Month:
          type: integer
          format: byte
        WeekYear:
          type: integer
        Period:
          type: string
          maxLength: 50
          minLength: 0
        CanAddReservation:
          type: boolean
    PlanningDTO:
      type: object
      required:
        - WeekId
        - Week
        - Month
        - WeekYear
      properties:
        WeekId:
          type: integer
          format: int32
        Week:
          type: integer
          format: byte
        Month:
          type: integer
          format: byte
        WeekYear:
          type: integer
        Period:
          type: string
        CanAddReservation:
          type: boolean
        CampaignWeeks:
          type: array
          items:
            $ref: '#/components/schemas/CampaignWeekDTO'
    CampaignWeekDTO:
      type: object
      properties:
        CampaignWeekId:
          type: integer
          format: int32
        DeletionStatus:
          $ref: '#/components/schemas/DeletionStatus'
        Campaign:
          $ref: '#/components/schemas/Campaign'
        Reservations:
          type: array
          items:
            $ref: '#/components/schemas/ReservationDTO'
    ReservationDTO:
      type: object
      required:
        - ReservationId
        - NetworkId
        - StatusId
        - DeletionStatus
      properties:
        ReservationId:
          type: integer
          format: int32
        NetworkId:
          type: integer
          format: int32
        StatusId:
          type: integer
          format: int32
        DeletionStatus:
          $ref: '#/components/schemas/DeletionStatus'
    UserDTO:
      type: object
      required:
        - Email
        - Password
      properties:
        Email:
          type: string
          maxLength: 100
        Password:
          type: string
          maxLength: 255