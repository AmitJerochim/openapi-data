penapi: 3.0.2
info:
  title: Partner API
  version: 0.0.1-beta
  description: |
    The InfoArmor Partner API is implemented in REST. The API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, headers and verbs.
  contact:
    name: Partner API Team
    url: https://api.infoarmor.com
    email: partnerapis@infoarmor.com
  x-api-id: 872adf8e-c240-4d05-9649-85aa820074cc
  x-audience: external-partner
security:
  - bearerAuth: []
  - apiKey: []
servers:
  - url: https://apps-dev.infoarmor.com/infoarmor-api
    description: Develop environment
  - url: https://apps-staging.infoarmor.com/infoarmor-api
    description: Staging environment
tags: []
paths:
  /enrollments:
    post:
      tags:
        - enrollments
      summary: create a profile and subscription
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                external_id:
                  type: string
                  format: uuid
                contract_id:
                  type: string
                  format: uuid
                family_name:
                  type: string
                given_name:
                  type: string
                email:
                  type: string
                  format: email
              required:
                - contract_id
                - family_name
                - given_name
                - email
      responses:
        201:
          description: person subscription created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ ACTIVE, INACTIVE ]
          headers:
            Content-Location:
              schema:
                type: string
              description: /subscriptions/<subscriptions_id>
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServer"
  /enrollments/members:
    post:
      tags:
        - enrollments
      summary: add members to an existing subscription
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                subscription_id:
                  type: string
                primary_member:
                  type: string
                members:
                  type: array
                  items:
                    $ref: '#/components/schemas/Profile'
      responses:
        201:
          description: members added to subscription
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServer"
  
  # /events/webhook:
  #   post:
  #     tags:
  #       - events
  #     summary: create a partner events webhook
  #     operationId: createWebhook
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               url:
  #                 type: string
  #                 format: uri
  #               subscribe:
  #                 type: array
  #                 items:
  #                   type: string
  #                   enum: [ENROLL, CANCEL]
  #     responses:
  #       201:
  #         description: webhook created
  #       400:
  #         $ref: "#/components/responses/BadRequest"
  #       401:
  #         $ref: "#/components/responses/Unauthorized"
  #       409:
  #         $ref: "#/components/responses/Conflict"
  #       500:
  #         $ref: "#/components/responses/InternalServer"
  # /events/webhook/{id}:
  #   parameters:
  #     - in: path
  #       name: id
  #       schema:
  #         type: string
  #       required: true
  #   put:
  #     tags:
  #       - events
  #     summary: modify existing webhook
  #     operationId: updateWebhook
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               url:
  #                 type: string
  #                 format: uri
  #     responses:
  #       200:
  #         description: modified webhook
  #       401:
  #         $ref: "#/components/responses/Unauthorized"
  #       404:
  #         $ref: "#/components/responses/NotFound"
  #       500:
  #         $ref: "#/components/responses/InternalServer"
  #   delete:
  #     tags:
  #       - events
  #     summary: remove existing webhook
  #     operationId: removeWebhook
  #     responses:
  #       200:
  #         description: Ok
  #       401:
  #         $ref: "#/components/responses/Unauthorized"
  #       404:
  #         $ref: "#/components/responses/NotFound"
  #       500:
  #         $ref: "#/components/responses/InternalServer"
  
  /profiles:
    post:
      tags:
        - profiles
      summary: create a person profile
      operationId: createProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        201:
          description: profile created
          headers:
            Content-Location:
              schema:
                type: string
                format: url
              description: GET location of profile by external_id
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServer"
    get:
      tags:
        - profiles
      summary: returns list of account's profiles
      operationId: getProfiles
      responses:
        200:
          description: paginated list of persons' profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  profiles:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Profile"
                  total:
                    type: integer
                  next:
                    type: string
                    nullable: true
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServer"
  /profiles/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    get:
      tags:
        - profiles
      summary: returns a profile by an id
      operationId: getProfileById
      responses:
        200:
          description: person's profile
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Profile"
                  - type: object
                    properties:
                      profile_id:
                        type: string
                        format: uuid
                      address:
                        type: object
                        properties:
                          postal:
                            type: string
                          street:
                            type: string
                      phone:
                        type: string
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServer"
    put:
      tags:
        - profiles
      summary: modify a person's profile
      operationId: updateProfileById
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Profile"
                - type: object
                  properties:
                    profile_id:
                      type: string
                      format: uuid
      responses:
        200:
          description: profile updated
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServer"
    delete:
      tags:
        - profiles
      summary: removes a person's profile
      operationId: removeProfileById
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServer"
  /subscriptions:
    post:
      tags:
        - subscriptions
      summary: associate a profile to a plan
      operationId: subscribeProfilePlan
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                external_id:
                  type: string
                plan_id:
                  type: string
                  format: uuid
      responses:
        201:
          description: created subscription
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServer"
  /subscriptions/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
    delete:
      tags:
        - subscriptions
      summary: disassociates a profile from a plan
      operationId: removeProfilePlan
      responses:
        200:
          description: Ok
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServer"
  /accounts/{id}:
    parameters:
      - in: path
        name: id
        description: account id
        schema:
          type: string
        required: true
    get:
      tags:
        - accounts
      summary: returns account's information, including plan details and feature names
      operationId: getAccountById
      responses:
        200:
          description: details of account
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  activation_date:
                    type: string
                    format: date-time
                  contracts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        plan_id:
                          type: string
                        price:
                          type: number
                          format: currency
                        type:
                          type: string
                        name:
                          type: string
                        billing_frequency:
                          type: string
                        features:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                              name:
                                type: string
                        state:
                          type: object
                          properties:
                            status:
                              type: string
                              enum: [pending, active, canceled, suspended, archived]
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServer"
components:
  responses:
    BadRequest:
      description: Request must contain valid parameters.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Authorization is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Entity with specified ID is not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Conflict:
      description: Request conflicts with system of record.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServer:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      required:
        - statusCode
        - error
        - message
    Profile:
      type: object
      properties:
        external_id:
          type: string
        family_name:
          type: string
        given_name:
          type: string
        email:
          type: string
          format: email
      required:
        - family_name
        - given_name
        - email
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      name: X-Api-Key
      in: header