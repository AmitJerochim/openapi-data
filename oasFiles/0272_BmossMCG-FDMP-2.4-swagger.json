{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "FDMP",
    "version" : "2.4",
    "title" : "FDMP"
  },
  "servers" : [ {
    "url" : "https://developer.firstdata.com/api",
    "description" : "Developer server for testing and development"
  } ],
  "paths" : {
    "/marketplace/v2/pricing/acquiring" : {
      "post" : {
        "tags" : [ "Acquiring" ],
        "summary" : "retrieve credit card processing fees and rates",
        "operationId" : "acquiring",
        "description" : "The POST Pricing/Acquiring API can be used to retrieve “pricing” for the credit card processing transaction fees and rates as well as any associated flat charges - each considered a “Pricing Product.”Adds an item to the system",
        "responses" : {
          "200" : {
            "description" : "OK (Success)/ OK(Exitoso)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AcquiringResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (eg: If request parameters  body does not have required or correct inputs) Solicitud incorrecta (por ejemplo: Si los parámetros de la solicitud / cuerpo no han las entradas requerido o correctas)"
          },
          "401" : {
            "description" : "Unauthorized (eg: Consumer not authorized to access API or invalid HMAC) No autorizado (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "403" : {
            "description" : "Forbidden (eg: Consumer not authorized to access API or invalid HMAC) Prohibido (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "404" : {
            "description" : "Not found (eg: Incorrect API URI) No se encuentra (por ejemplo: API URI es incorrecta)"
          },
          "409" : {
            "description" : "Conflict (eg: If duplicate record exists)  Conflicto (por ejemplo: si existe registro duplicado)"
          },
          "500" : {
            "description" : "Internal Server Error (for example, in case of server down/not responding etc)  Error interno del servidor (por ejemplo, en caso de servidor abajo / que no responde etc)"
          },
          "502" : {
            "description" : "Bad Gateway (Request not routing to services instead getting stuck on proxy or UI)  Mala puerta de enlace (La solicitud no enrutamiento a los servicios. En lugar, se quedar atrapado en proxy o interfaz de usuario)"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AcquiringRequest"
              }
            }
          },
          "description" : "The products you want to request pricing for"
        }
      }
    },
    "/marketplace/v1/merchantorders" : {
      "post" : {
        "tags" : [ "OrderCreation" ],
        "summary" : "retrieve an orderId",
        "operationId" : "merchantorders",
        "description" : "This endpoint retrieves a unique orderId once the shopping cart checkout process is completed. This numeric identifier is then used in the merchant boarding process as input to reference the order. It is used for purposes of collecting information about shipping the product(s) to the merchant after the merchant boarding process is completed and approved.",
        "responses" : {
          "200" : {
            "description" : "OK (Success)/ OK(Exitoso)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderCreationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (eg: If request parameters  body does not have required or correct inputs) Solicitud incorrecta (por ejemplo: Si los parámetros de la solicitud / cuerpo no han las entradas requerido o correctas)"
          },
          "401" : {
            "description" : "Unauthorized (eg: Consumer not authorized to access API or invalid HMAC) No autorizado (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "403" : {
            "description" : "Forbidden (eg: Consumer not authorized to access API or invalid HMAC) Prohibido (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "404" : {
            "description" : "Not found (eg: Incorrect API URI) No se encuentra (por ejemplo: API URI es incorrecta)"
          },
          "409" : {
            "description" : "Conflict (eg: If duplicate record exists)  Conflicto (por ejemplo: si existe registro duplicado)"
          },
          "500" : {
            "description" : "Internal Server Error (for example, in case of server down/not responding etc)  Error interno del servidor (por ejemplo, en caso de servidor abajo / que no responde etc)"
          },
          "502" : {
            "description" : "Bad Gateway (Request not routing to services instead getting stuck on proxy or UI)  Mala puerta de enlace (La solicitud no enrutamiento a los servicios. En lugar, se quedar atrapado en proxy o interfaz de usuario)"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderCreationRequest"
              }
            }
          },
          "description" : "Submit an order for the requested products"
        }
      }
    },
    "/marketplace/v1/merchantorders/{orderId}/businessInformation" : {
      "post" : {
        "parameters" : [ {
          "in" : "path",
          "name" : "orderId",
          "required" : true,
          "description" : "The orderId from the previous OrderCreation API call.",
          "schema" : {
            "$ref" : "#/components/schemas/OrderCreationResponse"
          }
        } ],
        "tags" : [ "businessInformation" ],
        "summary" : "Collect merchant and owner information",
        "operationId" : "businessInformation",
        "description" : "This endpoint collects merchant and owner information for merchant boarding purposes. In the request URL, use the orderId as it was returned in the response of the POST Merchantorders API. The endpoint takes a JSON object as input, which contains following information.",
        "responses" : {
          "200" : {
            "description" : "OK (Success)/ OK(Exitoso)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BusinessInformationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (eg: If request parameters  body does not have required or correct inputs) Solicitud incorrecta (por ejemplo: Si los parámetros de la solicitud / cuerpo no han las entradas requerido o correctas)"
          },
          "401" : {
            "description" : "Unauthorized (eg: Consumer not authorized to access API or invalid HMAC) No autorizado (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "403" : {
            "description" : "Forbidden (eg: Consumer not authorized to access API or invalid HMAC) Prohibido (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "404" : {
            "description" : "Not found (eg: Incorrect API URI) No se encuentra (por ejemplo: API URI es incorrecta)"
          },
          "409" : {
            "description" : "Conflict (eg: If duplicate record exists)  Conflicto (por ejemplo: si existe registro duplicado)"
          },
          "500" : {
            "description" : "Internal Server Error (for example, in case of server down/not responding etc)  Error interno del servidor (por ejemplo, en caso de servidor abajo / que no responde etc)"
          },
          "502" : {
            "description" : "Bad Gateway (Request not routing to services instead getting stuck on proxy or UI)  Mala puerta de enlace (La solicitud no enrutamiento a los servicios. En lugar, se quedar atrapado en proxy o interfaz de usuario)"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BusinessInformationRequest"
              }
            }
          },
          "description" : "Collect merchant and owner information"
        }
      }
    },
    "/marketplace/v1/merchantorders/{orderId}/locations" : {
      "get" : {
        "parameters" : [ {
          "in" : "path",
          "name" : "orderId",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/OrderCreationResponse"
          }
        } ],
        "tags" : [ "Location" ],
        "summary" : "Get merchantId",
        "operationId" : "getLocation",
        "description" : "The merchantId for individual locations can be retrieved from here.",
        "responses" : {
          "200" : {
            "description" : "OK (Success)/ OK(Exitoso)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetLocationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (eg: If request parameters  body does not have required or correct inputs) Solicitud incorrecta (por ejemplo: Si los parámetros de la solicitud / cuerpo no han las entradas requerido o correctas)"
          },
          "401" : {
            "description" : "Unauthorized (eg: Consumer not authorized to access API or invalid HMAC) No autorizado (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "403" : {
            "description" : "Forbidden (eg: Consumer not authorized to access API or invalid HMAC) Prohibido (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "404" : {
            "description" : "Not found (eg: Incorrect API URI) No se encuentra (por ejemplo: API URI es incorrecta)"
          },
          "409" : {
            "description" : "Conflict (eg: If duplicate record exists)  Conflicto (por ejemplo: si existe registro duplicado)"
          },
          "500" : {
            "description" : "Internal Server Error (for example, in case of server down/not responding etc)  Error interno del servidor (por ejemplo, en caso de servidor abajo / que no responde etc)"
          },
          "502" : {
            "description" : "Bad Gateway (Request not routing to services instead getting stuck on proxy or UI)  Mala puerta de enlace (La solicitud no enrutamiento a los servicios. En lugar, se quedar atrapado en proxy o interfaz de usuario)"
          }
        }
      },
      "post" : {
        "parameters" : [ {
          "in" : "path",
          "name" : "orderId",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/OrderCreationResponse"
          }
        } ],
        "tags" : [ "Location" ],
        "summary" : "Set location information",
        "operationId" : "postLocation",
        "description" : "The merchantId and location for individual locations can be set from here.",
        "responses" : {
          "200" : {
            "description" : "OK (Success)/ OK(Exitoso)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostLocationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (eg: If request parameters  body does not have required or correct inputs) Solicitud incorrecta (por ejemplo: Si los parámetros de la solicitud / cuerpo no han las entradas requerido o correctas)"
          },
          "401" : {
            "description" : "Unauthorized (eg: Consumer not authorized to access API or invalid HMAC) No autorizado (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "403" : {
            "description" : "Forbidden (eg: Consumer not authorized to access API or invalid HMAC) Prohibido (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "404" : {
            "description" : "Not found (eg: Incorrect API URI) No se encuentra (por ejemplo: API URI es incorrecta)"
          },
          "409" : {
            "description" : "Conflict (eg: If duplicate record exists)  Conflicto (por ejemplo: si existe registro duplicado)"
          },
          "500" : {
            "description" : "Internal Server Error (for example, in case of server down/not responding etc)  Error interno del servidor (por ejemplo, en caso de servidor abajo / que no responde etc)"
          },
          "502" : {
            "description" : "Bad Gateway (Request not routing to services instead getting stuck on proxy or UI)  Mala puerta de enlace (La solicitud no enrutamiento a los servicios. En lugar, se quedar atrapado en proxy o interfaz de usuario)"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostLocationRequest"
              }
            }
          },
          "description" : "Set merchant and owner information"
        }
      }
    },
    "/marketplace/v1/merchantorders/status" : {
      "post" : {
        "tags" : [ "orderStatus" ],
        "summary" : "Get the status of an order",
        "operationId" : "orderStatus",
        "description" : "This endpoint retrieves information about the status of the order based on its unique identifier. Depending on the status it also provides additional details, such as shipment tracking and merchant identifiers.",
        "responses" : {
          "200" : {
            "description" : "OK (Success)/ OK(Exitoso)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderStatusResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request (eg: If request parameters  body does not have required or correct inputs) Solicitud incorrecta (por ejemplo: Si los parámetros de la solicitud / cuerpo no han las entradas requerido o correctas)"
          },
          "401" : {
            "description" : "Unauthorized (eg: Consumer not authorized to access API or invalid HMAC) No autorizado (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "403" : {
            "description" : "Forbidden (eg: Consumer not authorized to access API or invalid HMAC) Prohibido (por ejemplo: el consumidor (la entidad quien enviado la solicitud) no está autorizado a acceder a la API o HMAC no válido)"
          },
          "404" : {
            "description" : "Not found (eg: Incorrect API URI) No se encuentra (por ejemplo: API URI es incorrecta)"
          },
          "409" : {
            "description" : "Conflict (eg: If duplicate record exists)  Conflicto (por ejemplo: si existe registro duplicado)"
          },
          "500" : {
            "description" : "Internal Server Error (for example, in case of server down/not responding etc)  Error interno del servidor (por ejemplo, en caso de servidor abajo / que no responde etc)"
          },
          "502" : {
            "description" : "Bad Gateway (Request not routing to services instead getting stuck on proxy or UI)  Mala puerta de enlace (La solicitud no enrutamiento a los servicios. En lugar, se quedar atrapado en proxy o interfaz de usuario)"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderStatusRequest"
              }
            }
          },
          "description" : "Get the status of an Order"
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AcquiringRequest" : {
        "type" : "object",
        "required" : [ "companyId", "settlementMethodId", "clientTariffId", "serviceId", "merchantTariffId" ],
        "properties" : {
          "companyId" : {
            "type" : "number",
            "format" : "int64",
            "maxLength" : 5,
            "enum" : [ 10222 ],
            "example" : 10222
          },
          "settlementMethodId" : {
            "$ref" : "#/components/schemas/settlementMethodId"
          },
          "clientTariffId" : {
            "$ref" : "#/components/schemas/clientTariffId"
          },
          "serviceId" : {
            "$ref" : "#/components/schemas/serviceId"
          },
          "merchantTariffId" : {
            "$ref" : "#/components/schemas/merchantTariffId"
          },
          "transactionInfo" : {
            "$ref" : "#/components/schemas/transactionInfo"
          },
          "cartDetails" : {
            "$ref" : "#/components/schemas/cartDetails"
          }
        }
      },
      "transactionInfo" : {
        "type" : "object",
        "properties" : {
          "annualcardVolume" : {
            "type" : "number",
            "format" : "double",
            "maxLength" : 18,
            "description" : "Total Credit Card Volume"
          },
          "averageTicket" : {
            "type" : "number",
            "format" : "double",
            "maxLength" : 18
          },
          "category" : {
            "type" : "string",
            "maxLength" : 10,
            "example" : "RETAIL"
          }
        }
      },
      "cartDetails" : {
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "productId" : {
              "type" : "string",
              "maxLength" : 50,
              "example" : "10013",
              "description" : "Always Use \"10013\""
            },
            "category" : {
              "type" : "string",
              "maxLength" : 10,
              "example" : "RETAIL",
              "description" : "Always use \"RETAIL\""
            },
            "productType" : {
              "type" : "string",
              "maxLength" : 20,
              "example" : "ACQUIRING",
              "description" : "Always use \"ACQUIRING\""
            }
          }
        }
      },
      "settlementMethodId" : {
        "type" : "string",
        "maxLength" : 3,
        "enum" : [ "019", "104" ],
        "description" : "Value Descriptions:\n * `\"019\"` - Neto\n * `\"104\"` - Bruto\n",
        "example" : "019"
      },
      "serviceId" : {
        "type" : "string",
        "maxLength" : 3,
        "enum" : [ "201", "203", "101", "114", "107", "406", "119" ],
        "description" : "Value Descriptions:\n * `\"201\"` - Acq Visa\n * `\"203\"` - Acq Visa Electron\n * `\"101\"` - Acquire ECMC\n * `\"114\"` - Acq Amex\n * `\"107\"` - Acq Maes\n * `\"406\"` - Acq Diners\n * `\"119\"` - Acq Davivienda\n",
        "example" : "107"
      },
      "merchantTariffId" : {
        "type" : "string",
        "maxLength" : 6,
        "enum" : [ "001011", "000314" ],
        "description" : "Value Descriptions:\n * `\"001011\"` - CP Pricing+ BIN\n * `\"000314\"` - BC Interch Plus\n",
        "example" : "001011"
      },
      "propertyFieldList" : {
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "propertyfield" : {
              "type" : "string",
              "maxLength" : 3,
              "example" : "001",
              "enum" : [ "001", "002", "003", "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "016", "017", "018", "019", "020", "021", "022", "023", "024", "025" ],
              "description" : "Value Descriptions:\n * `\"001\"` - CIIU Code\n * `\"002\"` - MCC Amex\n * `\"003\"` - MCC Mastercard\n * `\"004\"` - MCC Visa\n * `\"005\"` - Trade Name\n * `\"006\"` - ReteFuente Exempt\n * `\"007\"` - ReteIVA Exempt\n * `\"008\"` - ReteICA Exempt\n * `\"009\"` - Merchant enabled for Tip\n * `\"010\"` - Migrated Merchant\n * `\"011\"` - New Merchant\n * `\"012\"` - Amex Merchant Status\n * `\"013\"` - MasterCard Merchant Status\n * `\"014\"` - Visa Merchant Status\n * `\"015\"` - Legacy Date\n * `\"016\"` - 'Legal Representative 1st Name'\n * `\"017\"` - 'Legal Representative 2nd Name'\n * `\"018\"` - Legal Representative Last Name\n * `\"019\"` - 'Legal Representative 2nd L Name'\n * `\"020\"` - Tax Quality\n * `\"021\"` - Client's Last Name\n * `\"022\"` - Client's First Name\n * `\"023\"` - Client's Second Last Name\n * `\"024\"` - Client's Middle Name\n * `\"025\"` - Sales Agent Code\n"
            },
            "propertyValue" : {
              "type" : "string",
              "maxLength" : 240,
              "example" : "71763850"
            }
          }
        }
      },
      "pricingDetails" : {
        "type" : "array",
        "items" : {
          "type" : "object",
          "required" : [ "pricingDetailId", "pricingTypeId", "productId", "productType", "omnipayFeeBase", "omnipayFeePercent" ],
          "properties" : {
            "pricingDetailId" : {
              "type" : "number",
              "format" : "int64",
              "maxLength" : 10,
              "example" : 32385
            },
            "pricingTypeId" : {
              "type" : "number",
              "format" : "int64",
              "maxLength" : 10,
              "example" : 333769
            },
            "productId" : {
              "type" : "string",
              "maxLength" : 50,
              "example" : "1070578888888928"
            },
            "description" : {
              "type" : "string",
              "maxLength" : 240,
              "example" : "This is a product description"
            },
            "feeMinAbsolute" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "feeMin" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "feeDefault" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "feeMax" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "feeMaxAbsolute" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "minAmountAbsolute" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "minAmt" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "defaultAmt" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "maxAmt" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "maxAmountAbsolute" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "quantity" : {
              "type" : "number",
              "format" : "int32",
              "maxLength" : 10,
              "example" : 1
            },
            "rateMinAbsolute" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "rateMin" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "rateDefault" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "rateMax" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "rateMaxAbsolute" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "productName" : {
              "type" : "string",
              "maxLength" : 240,
              "description" : "default it to Merchant Purchase fee",
              "example" : "Merchant Purchase fee"
            },
            "productType" : {
              "type" : "string",
              "maxLength" : 50,
              "enum" : [ "MERCHANT_TARIFF" ],
              "example" : "MERCHANT_TARIFF"
            },
            "omnipayFeeBase" : {
              "type" : "string",
              "maxLength" : 50,
              "example" : "3",
              "description" : "If particular field is added we need to send a value for fee base based on fee min and max ranges, if nothing is required please add 0"
            },
            "omnipayFeePercent" : {
              "type" : "string",
              "maxLength" : 50,
              "example" : "1",
              "description" : "Do not add symbol '%' ONLY numeric value needs to be added, if nothing is required please add 0"
            },
            "isOverride" : {
              "type" : "boolean",
              "description" : "set to FALSE for  bank of colombia"
            },
            "override" : {
              "type" : "boolean",
              "example" : false,
              "description" : "set to FALSE for  bank of colombia"
            },
            "showoncart" : {
              "type" : "boolean",
              "example" : false,
              "description" : "set to FALSE for  bank of colombia"
            },
            "purchaseType" : {
              "type" : "string",
              "maxLength" : 1,
              "description" : "Default it to O",
              "example" : "O"
            },
            "occurrence" : {
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "maxLength" : 20,
                  "description" : "N/A for OmniPay, default is Onetime_Fee",
                  "example" : "Onetime_fee"
                }
              }
            },
            "category" : {
              "type" : "string",
              "maxLength" : 10,
              "description" : "Default it to RETAIL",
              "example" : "RETAIL"
            }
          }
        }
      },
      "eCommerceInd" : {
        "type" : "string",
        "maxLength" : 3,
        "example" : "000",
        "enum" : [ "000", "001", "002" ],
        "description" : "Value Descriptions:\n * `\"000\"` - Traditional Transactions only\n * `\"001\"` - E-commerce Transactions only\n * `\"002\"` - Both E-commerce + Traditional\n"
      },
      "postingTariffId" : {
        "type" : "string",
        "maxLength" : 3,
        "example" : "071",
        "enum" : [ "071", "052" ],
        "description" : "Value Descriptions:\n * `\"071\"` - NetworkCP\n * `\"052\"` - FranchiseCP\n"
      },
      "clientTariffId" : {
        "type" : "string",
        "maxLength" : 6,
        "enum" : [ "001051" ],
        "example" : "001051"
      },
      "serviceIdToMerchantTariffIdList" : {
        "type" : "array",
        "items" : {
          "type" : "object",
          "required" : [ "serviceId", "merchantTariffId", "assignedServices" ],
          "properties" : {
            "serviceId" : {
              "$ref" : "#/components/schemas/serviceId"
            },
            "merchantTariffId" : {
              "$ref" : "#/components/schemas/merchantTariffId"
            },
            "assignedServices" : {
              "type" : "string",
              "maxLength" : 3,
              "enum" : [ "001" ]
            }
          }
        }
      },
      "countyId" : {
        "type" : "string",
        "maxLength" : 3,
        "example" : "005",
        "enum" : [ "005", "008", "011", "013", "015", "017", "018", "019", "020", "023", "025", "027", "041", "027", "041", "044", "047", "050", "052", "054", "063", "066", "068", "070", "073", "076", "081", "085", "086", "088", "091", "094", "095", "097", "099" ],
        "description" : "Value Descriptions:\n * `\"005\"` - ANTIOQUIA\n * `\"008\"` - ATLANTICO\n * `\"011\"` - SANTAFE DE BOGOTA\n * `\"013\"` - BOLIVAR\n * `\"015\"` - BOYACA\n * `\"017\"` - CALDAS\n * `\"018\"` - CAQUETA\n * `\"019\"` - CAUCA\n * `\"020\"` - CESAR\n * `\"023\"` - CORDOBA\n * `\"025\"` - CUNDINAMARCA\n * `\"027\"` - CHOCO\n * `\"041\"` - HUILA\n * `\"044\"` - LA GUAJIRA\n * `\"047\"` - MAGDALENA\n * `\"050\"` - META\n * `\"052\"` - NARIÑO\n * `\"054\"` - NORTE DE SANTANDER\n * `\"063\"` - QUINDIO\n * `\"066\"` - RISARALDA\n * `\"068\"` - SANTANDER\n * `\"070\"` - SUCRE\n * `\"073\"` - TOLIMA\n * `\"076\"` - VALLE\n * `\"081\"` - ARAUCA\n * `\"085\"` - CASANARE\n * `\"086\"` - PUTUMAYO\n * `\"088\"` - SAN ANDRES\n * `\"091\"` - AMAZONAS\n * `\"094\"` - GUAINIA\n * `\"095\"` - GUAVIARE\n * `\"097\"` - VAUPES\n * `\"099\"` - VICHADA\n"
      },
      "municipalityId" : {
        "type" : "string",
        "maxLength" : 5,
        "example" : "05001",
        "enum" : [ "05002", "05004", "05021", "05030", "05031", "05034", "05036", "05038", "05040", "05042", "05044", "05045", "05051", "05055", "05059", "05079", "05001", "05086", "05088", "05091", "05093", "05101", "05107", "05113", "05120", "05125", "05129", "05134", "05138", "05142", "05145", "05147", "05148", "05150", "05154", "05172", "05380", "05390", "05400", "05411", "05425", "05440", "05467", "05475", "05480", "05483", "05490", "05495", "05501", "05541", "05543", "05576", "05579", "05585", "05591", "05604", "05607", "05615", "05628", "05631", "05642", "05647", "05649", "05652", "05656", "05658", "05659", "05660", "05664", "05190", "05197", "05206", "05209", "05212", "05234", "05235", "05237", "05240", "05250", "05264", "05266", "05282", "05284", "05306", "05308", "05310", "05313", "05315", "05318", "05321", "05347", "05353", "05360", "05361", "05364", "05368", "05376", "05665", "05667", "05670", "05674", "05679", "05686", "05690", "05697", "05736", "05756", "05761", "05789", "05790", "05792", "05809", "05819", "05837", "05842", "05847", "05854", "05856", "05858", "05861", "05873", "05885", "05887", "05890", "05893", "05895", "05394", "05682", "05888", "05008", "05009", "05010", "05094", "05441", "08001", "08078", "08137", "08141", "08296", "08372", "08421", "08433", "08436", "08520", "08549", "08558", "08560", "08573", "08606", "08634", "08638", "08675", "08685", "08758", "08770", "08832", "08849", "08646", "11001", "11002", "13001", "13006", "13030", "13042", "13052", "13074", "13140", "13160", "13188", "13212", "13222", "13244", "13248", "13268", "13300", "13430", "13433", "13440", "13442", "13458", "13468", "13473", "13549", "13580", "13600", "13620", "13647", "13650", "13654", "13655", "13657", "13670", "13673", "13683", "13688", "13744", "13760", "13780", "13810", "13836", "13838", "13873", "13894", "13667", "13002", "13062", "15001", "15022", "15047", "15051", "15087", "15090", "15092", "15097", "15104", "15106", "15109", "15114", "15131", "15135", "15162", "15172", "15176", "15180", "15183", "15185", "15187", "15189", "15204", "15212", "15215", "15218", "15223", "15224", "15226", "15232", "15236", "15238", "15244", "15248", "15272", "15276", "15293", "15296", "15299", "15317", "15322", "15325", "15332", "15362", "15367", "15368", "15377", "15380", "15401", "15403", "15407", "15425", "15442", "15455", "15464", "15466", "15469", "15476", "15480", "15491", "15494", "15500", "15507", "15511", "15514", "15516", "15518", "15522", "15531", "15533", "15537", "15542", "15550", "15572", "15580", "15599", "15600", "15621", "15632", "15638", "15646", "15660", "15664", "15667", "15673", "15676", "15681", "15686", "15690", "15693", "15696", "15720", "15723", "15740", "15753", "15755", "15757", "15759", "15761", "15762", "15763", "15764", "15774", "15776", "15778", "15790", "15798", "15804", "15806", "15808", "15810", "15814", "15816", "15820", "15822", "15832", "15835", "15837", "15839", "15842", "15861", "15879", "15897", "15492", "17001", "17013", "17042", "17050", "17088", "17174", "17272", "17380", "17388", "17433", "17442", "17444", "17446", "17486", "17513", "17524", "17541", "17614", "17616", "17653", "17662", "17777", "17867", "17873", "17877", "17447", "17487", "17525", "17542", "17543", "17615", "17617", "17663", "17665", "17495", "18001", "18029", "18094", "18150", "18205", "18247", "18256", "18410", "18460", "18479", "18592", "18610", "18753", "18785", "18860", "18754", "18756", "19001", "19022", "19050", "19100", "19110", "19130", "19137", "19142", "19212", "19256", "19290", "19318", "19355", "19364", "19392", "19397", "19418", "19450", "19455", "19473", "19513", "19517", "19532", "19533", "19548", "19573", "19585", "19622", "19693", "19698", "19701", "19743", "19760", "19780", "19807", "19809", "19821", "19824", "19075", "19002", "19003", "19138", "19845", "19300", "19785", "20001", "20011", "20013", "20032", "20045", "20060", "20175", "20178", "20228", "20238", "20250", "20295", "20310", "20383", "20400", "20443", "20517", "20550", "20614", "20621", "20710", "20750", "20770", "20787", "20200", "20002", "20570", "23001", "23068", "23079", "23090", "23162", "23168", "23182", "23189", "23300", "23417", "23419", "23464", "23466", "23500", "23555", "23570", "23574", "23580", "23586", "23660", "23670", "23672", "23675", "23678", "23686", "23807", "23855", "23350", "23815", "25001", "25019", "25035", "25040", "25053", "25086", "25095", "25099", "25120", "25123", "25126", "25148", "25151", "25154", "25168", "25175", "25178", "25181", "25183", "25200", "25214", "25224", "25245", "25258", "25269", "25279", "25281", "25286", "25288", "25290", "25293", "25295", "25297", "25299", "25307", "25312", "25317", "25320", "25322", "25324", "25326", "25328", "25335", "25339", "25368", "25372", "25377", "25386", "25394", "25398", "25402", "25407", "25426", "25430", "25436", "25438", "25473", "25483", "25486", "25488", "25489", "25491", "25506", "25513", "25518", "25524", "25530", "25535", "25572", "25580", "25592", "25594", "25596", "25599", "25612", "25645", "25649", "25653", "25658", "25662", "25718", "25736", "25740", "25743", "25745", "25754", "25758", "25769", "25772", "25777", "25779", "25781", "25785", "25793", "25797", "25799", "25805", "25807", "25815", "25817", "25823", "25839", "25841", "25843", "25845", "25851", "25862", "25867", "25871", "25873", "25875", "25878", "25885", "25898", "25899", "25260", "25308", "25600", "25002", "25597", "25759", "25806", "25897", "27001", "27006", "27025", "27073", "27075", "27077", "27099", "27135", "27205", "27245", "27250", "27361", "27372", "27413", "27491", "27495", "27615", "27660", "27745", "27787", "27800", "27002", "27003", "27100", "27450", "27580", "27600", "27086", "27150", "27050", "27160", "27425", "27430", "27810", "41001", "41006", "41013", "41016", "41020", "41026", "41078", "41132", "41206", "41244", "41298", "41306", "41319", "41349", "41357", "41359", "41378", "41396", "41483", "41503", "41518", "41524", "41530", "41548", "41551", "41615", "41660", "41668", "41676", "41770", "41791", "41797", "41799", "41801", "41807", "41872", "41885", "41002", "44001", "44078", "44090", "44098", "44110", "44279", "44378", "44430", "44560", "44650", "44847", "44855", "44874", "44900", "44002", "44431", "44035", "44420", "47001", "47053", "47058", "47161", "47170", "47189", "47245", "47258", "47268", "47288", "47318", "47541", "47545", "47551", "47555", "47570", "47605", "47675", "47692", "47703", "47707", "47745", "47798", "47250", "47190", "47960", "47980", "47460", "47030", "47205", "47660", "47720", "50001", "50006", "50110", "50124", "50150", "50223", "50226", "50245", "50251", "50270", "50287", "50313", "50318", "50325", "50330", "50350", "50370", "50400", "50450", "50568", "50573", "50577", "50590", "50606", "50680", "50683", "50686", "50689", "50711", "50252", "52001", "52019", "52022", "52036", "52051", "52079", "52083", "52110", "52203", "52207", "52210", "52215", "52224", "52227", "52233", "52240", "52250", "52256", "52258", "52260", "52287", "52317", "52320", "52323", "52352", "52354", "52356", "52378", "52381", "52385", "52390", "52399", "52405", "52411", "52418", "52427", "52435", "52473", "52490", "52506", "52520", "52540", "52560", "52565", "52573", "52585", "52612", "52621", "52678", "52683", "52685", "52687", "52693", "52694", "52696", "52699", "52720", "52786", "52788", "52835", "52838", "52885", "52660", "52002", "52003", "52100", "52204", "52254", "52480", "54001", "54003", "54051", "54099", "54109", "54125", "54128", "54172", "54174", "54206", "54223", "54239", "54245", "54250", "54261", "54313", "54344", "54347", "54377", "54385", "54398", "54405", "54418", "54480", "54498", "54518", "54520", "54553", "54599", "54660", "54670", "54673", "54680", "54720", "54743", "54800", "54810", "54820", "54871", "54874", "54721", "54811", "54821", "63001", "63111", "63130", "63190", "63212", "63272", "63302", "63401", "63470", "63548", "63594", "63690", "63131", "66001", "66045", "66075", "66088", "66170", "66318", "66383", "66400", "66440", "66456", "66572", "66594", "66682", "66687", "66002", "66003", "68001", "68013", "68020", "68051", "68077", "68079", "68081", "68092", "68101", "68121", "68132", "68147", "68152", "68160", "68162", "68167", "68169", "68176", "68179", "68190", "68207", "68209", "68211", "68217", "68229", "68235", "68245", "68250", "68255", "68264", "68266", "68271", "68276", "68296", "68298", "68307", "68318", "68320", "68322", "68324", "68327", "68344", "68368", "68370", "68377", "68385", "68397", "68406", "68418", "68425", "68432", "68444", "68464", "68468", "68498", "68500", "68502", "68522", "68524", "68533", "68547", "68549", "68572", "68573", "68575", "68615", "68655", "68669", "68673", "68679", "68682", "68684", "68686", "68689", "68705", "68720", "68745", "68755", "68770", "68773", "68780", "68820", "68855", "68861", "68867", "68872", "68895", "68082", "68771", "70001", "70110", "70124", "70204", "70215", "70230", "70235", "70265", "70400", "70418", "70429", "70473", "70508", "70523", "70670", "70678", "70702", "70708", "70713", "70717", "70742", "70771", "70820", "70823", "70222", "70821", "70390", "70002", "70221", "70233", "73001", "73024", "73026", "73030", "73043", "73055", "73067", "73124", "73148", "73152", "73168", "73200", "73217", "73226", "73236", "73268", "73270", "73275", "73283", "73319", "73347", "73349", "73352", "73408", "73411", "73443", "73449", "73461", "73483", "73504", "73520", "73547", "73555", "73563", "73585", "73616", "73622", "73624", "73671", "73675", "73678", "73686", "73770", "73854", "73861", "73870", "73873", "73231", "73002", "73068", "73201", "73227", "73269", "73271", "73556", "73617", "73676", "73862", "76001", "76020", "76036", "76041", "76054", "76100", "76109", "76111", "76113", "76122", "76126", "76130", "76147", "76233", "76243", "76246", "76248", "76250", "76275", "76306", "76318", "76364", "76377", "76400", "76403", "76497", "76520", "76563", "76606", "76616", "76622", "76670", "76736", "76823", "76828", "76834", "76845", "76863", "76869", "76890", "76892", "76895", "76238", "76625", "99999", "76114", "76002", "76101", "76617", "76138", "81001", "81065", "81220", "81300", "81591", "81736", "81794", "85001", "85010", "85015", "85125", "85136", "85139", "85162", "85225", "85230", "85250", "85263", "85279", "85300", "85315", "85325", "85400", "85410", "85430", "85440", "86001", "86219", "86320", "86568", "86569", "86571", "86573", "86749", "86755", "86757", "86760", "86865", "86885", "86500", "88001", "88564", "91001", "91263", "91405", "91407", "91460", "91540", "91669", "91798", "91530", "91536", "91430", "94001", "94343", "94883", "94884", "94885", "94886", "94887", "94663", "94888", "95001", "95015", "95025", "95200", "95220", "97001", "97161", "97511", "97666", "97777", "97889", "99001", "99524", "99624", "99773", "99572", "99760" ],
        "description" : "Value Descriptions:\n* `\"05002\"` - ABEJORRAL\n* `\"05004\"` - ABRIAQUI\n* `\"05021\"` - ALEJANDRIA\n* `\"05030\"` - AMAGA\n* `\"05031\"` - AMALFI\n* `\"05034\"` - ANDES\n* `\"05036\"` - ANGELOPOLIS\n* `\"05038\"` - ANGOSTURA\n* `\"05040\"` - ANORI\n* `\"05042\"` - ANTIOQUIA\n* `\"05044\"` - ANZA\n* `\"05045\"` - APARTADO\n* `\"05051\"` - ARBOLETES\n* `\"05055\"` - ARGELIA\n* `\"05059\"` - ARMENIA\n* `\"05079\"` - BARBOSA\n* `\"05001\"` - MEDELLIN\n* `\"05086\"` - BELMIRA\n* `\"05088\"` - BELLO\n* `\"05091\"` - BETANIA\n* `\"05093\"` - BETULIA\n* `\"05101\"` - BOLIVAR\n* `\"05107\"` - BRICEÐO\n* `\"05113\"` - BURITICA\n* `\"05120\"` - CACERES\n* `\"05125\"` - CAICEDO\n* `\"05129\"` - CALDAS\n* `\"05134\"` - CAMPAMENTO\n* `\"05138\"` - CAÐASGORDAS\n* `\"05142\"` - CARACOLI\n* `\"05145\"` - CARAMANTA\n* `\"05147\"` - CAREPA\n* `\"05148\"` - CARMEN DE VIBORAL\n* `\"05150\"` - CAROLINA\n* `\"05154\"` - CAUCASIA\n* `\"05172\"` - CHIGORODO\n* `\"05380\"` - LA ESTRELLA\n* `\"05390\"` - LA PINTADA\n* `\"05400\"` - LA UNION\n* `\"05411\"` - LIBORINA\n* `\"05425\"` - MACEO\n* `\"05440\"` - MARINILLA\n* `\"05467\"` - MONTEBELLO\n* `\"05475\"` - MURINDO\n* `\"05480\"` - MUTATA\n* `\"05483\"` - NARIÐO\n* `\"05490\"` - NECOCLI\n* `\"05495\"` - NECHI\n* `\"05501\"` - OLAYA\n* `\"05541\"` - PEÐOL\n* `\"05543\"` - PEQUE\n* `\"05576\"` - PUEBLORRICO\n* `\"05579\"` - PUERTO BERRIO\n* `\"05585\"` - PTO NARE(LAMAGDALENA)\n* `\"05591\"` - PUERTO TRIUNFO\n* `\"05604\"` - REMEDIOS\n* `\"05607\"` - RETIRO\n* `\"05615\"` - RIONEGRO\n* `\"05628\"` - SABANALARGA\n* `\"05631\"` - SABANETA\n* `\"05642\"` - SALGAR\n* `\"05647\"` - SAN ANDRES\n* `\"05649\"` - SAN CARLOS\n* `\"05652\"` - SAN FRANCISCO\n* `\"05656\"` - SAN JERONIMO\n* `\"05658\"` - SAN JOSE DE LA MONTAÐA\n* `\"05659\"` - SAN JUAN DE URABA\n* `\"05660\"` - SAN LUIS\n* `\"05664\"` - SAN PEDRO\n* `\"05190\"` - CISNEROS\n* `\"05197\"` - COCORNA\n* `\"05206\"` - CONCEPCION\n* `\"05209\"` - CONCORDIA\n* `\"05212\"` - COPACABANA\n* `\"05234\"` - DABEIBA\n* `\"05235\"` - DORADAL\n* `\"05237\"` - DON MATIAS\n* `\"05240\"` - EBEJICO\n* `\"05250\"` - EL BAGRE\n* `\"05264\"` - ENTRERRIOS\n* `\"05266\"` - ENVIGADO\n* `\"05282\"` - FREDONIA\n* `\"05284\"` - FRONTINO\n* `\"05306\"` - GIRALDO\n* `\"05308\"` - GIRARDOTA\n* `\"05310\"` - GOMEZ PLATA\n* `\"05313\"` - GRANADA\n* `\"05315\"` - GUADALUPE\n* `\"05318\"` - GUARNE\n* `\"05321\"` - GUATAPE\n* `\"05347\"` - HELICONIA\n* `\"05353\"` - HISPANIA\n* `\"05360\"` - ITAGUI\n* `\"05361\"` - ITUANGO\n* `\"05364\"` - JARDIN\n* `\"05368\"` - JERICO\n* `\"05376\"` - LA CEJA\n* `\"05665\"` - SAN PEDRO DE URABA\n* `\"05667\"` - SAN RAFAEL\n* `\"05670\"` - SAN ROQUE\n* `\"05674\"` - SAN VICENTE\n* `\"05679\"` - SANTA BARBARA\n* `\"05686\"` - SANTA ROSA DE OSOS\n* `\"05690\"` - SANTO DOMINGO\n* `\"05697\"` - SANTUARIO\n* `\"05736\"` - SEGOVIA\n* `\"05756\"` - SONSON\n* `\"05761\"` - SOPETRAN\n* `\"05789\"` - TAMESIS\n* `\"05790\"` - TARAZA\n* `\"05792\"` - TARSO\n* `\"05809\"` - TITIRIBI\n* `\"05819\"` - TOLEDO\n* `\"05837\"` - TURBO\n* `\"05842\"` - URAMITA\n* `\"05847\"` - URRAO\n* `\"05854\"` - VALDIVIA\n* `\"05856\"` - VALPARAISO\n* `\"05858\"` - VEGACHI\n* `\"05861\"` - VENECIA\n* `\"05873\"` - VIGIA DEL FUERTE\n* `\"05885\"` - YALI\n* `\"05887\"` - YARUMAL\n* `\"05890\"` - YOLOMBO\n* `\"05893\"` - YONDO\n* `\"05895\"` - ZARAGOZA\n* `\"05394\"` - LA PINTADA\n* `\"05682\"` - SANTA FE DE ANTIOQUIA\n* `\"05888\"` - YONDO ANTIO\n* `\"05008\"` - SANTA FE DE ANTIOQUIA (NO EXISTE EN EL DANE)\n* `\"05009\"` - SAN CRISTOBAL\n* `\"05010\"` - BUENOS AIRES (MEDELLIN)\n* `\"05094\"` - ALTAMIRA - BETULIA\n* `\"05441\"` - CURITI - LIBORINA\n* `\"08001\"` - BARRANQUILLA\n* `\"08078\"` - BARANOA\n* `\"08137\"` - CAMPO DE LA CRUZ\n* `\"08141\"` - CANDELARIA\n* `\"08296\"` - GALAPA\n* `\"08372\"` - JUAN DE ACOSTA\n* `\"08421\"` - LURUACO\n* `\"08433\"` - MALAMBO\n* `\"08436\"` - MANATI\n* `\"08520\"` - PALMAR DE VARELA\n* `\"08549\"` - PIOJO\n* `\"08558\"` - POLONUEVO\n* `\"08560\"` - PONEDERA\n* `\"08573\"` - PUERTO COLOMBIA\n* `\"08606\"` - REPELON\n* `\"08634\"` - SABANAGRANDE\n* `\"08638\"` - SABANALARGA\n* `\"08675\"` - SANTA LUCIA\n* `\"08685\"` - SANTO TOMAS\n* `\"08758\"` - SOLEDAD\n* `\"08770\"` - SUAN\n* `\"08832\"` - TUBARA\n* `\"08849\"` - USIACURI\n* `\"08646\"` - SALGAR\n* `\"11001\"` - SANTAFE DE BOGOTA D.C.\n* `\"11002\"` - PIAMONTE BOSA\n* `\"13001\"` - CARTAGENA\n* `\"13006\"` - ACHI\n* `\"13030\"` - ALTOS DEL ROSARIO\n* `\"13042\"` - ARENAL\n* `\"13052\"` - ARJONA\n* `\"13074\"` - BARRANCO DE LOBA\n* `\"13140\"` - CALAMAR\n* `\"13160\"` - CANTAGALLO\n* `\"13188\"` - CICUCO\n* `\"13212\"` - CORDOBA\n* `\"13222\"` - CLEMENCIA\n* `\"13244\"` - EL CARMEN DE BOLIVAR\n* `\"13248\"` - EL GUAMO\n* `\"13268\"` - EL PEÐON\n* `\"13300\"` - HATILLO DE LOBA\n* `\"13430\"` - MAGANGUE\n* `\"13433\"` - MAHATES\n* `\"13440\"` - MARGARITA\n* `\"13442\"` - MARIA LA BAJA\n* `\"13458\"` - MONTECRISTO\n* `\"13468\"` - MOMPOS\n* `\"13473\"` - MORALES\n* `\"13549\"` - PINILLOS\n* `\"13580\"` - REGIDOR\n* `\"13600\"` - RIO VIEJO\n* `\"13620\"` - SAN CRISTOBAL\n* `\"13647\"` - SAN ESTANISLAO\n* `\"13650\"` - SAN FERNANDO\n* `\"13654\"` - SAN JACINTO\n* `\"13655\"` - SAN JACINTO DEL CAUCA\n* `\"13657\"` - SAN JUAN NEPOMUCENO\n* `\"13670\"` - SAN PABLO\n* `\"13673\"` - SANTA CATALINA\n* `\"13683\"` - SANTA ROSA\n* `\"13688\"` - SANTA ROSA DEL SUR\n* `\"13744\"` - SIMITI\n* `\"13760\"` - SOPLAVIENTO\n* `\"13780\"` - TALAIGUA NUEVO\n* `\"13810\"` - TIQUISIO\n* `\"13836\"` - TURBACO\n* `\"13838\"` - TURBANA\n* `\"13873\"` - VILLANUEVA\n* `\"13894\"` - ZAMBRANO\n* `\"13667\"` - SAN MARTIN DE LOBA\n* `\"13002\"` - MAMONAL - BOLIVAR\n* `\"13062\"` - ARROYOHONDO - ARROYOHONDO\n* `\"15001\"` - TUNJA\n* `\"15022\"` - ALMEIDA\n* `\"15047\"` - AQUITANIA\n* `\"15051\"` - ARCABUCO\n* `\"15087\"` - BELEN\n* `\"15090\"` - BERBEO\n* `\"15092\"` - BETEITIVA\n* `\"15097\"` - BOAVITA\n* `\"15104\"` - BOYACA\n* `\"15106\"` - BRICEÐO\n* `\"15109\"` - BUENAVISTA\n* `\"15114\"` - BUSBANZA\n* `\"15131\"` - CALDAS\n* `\"15135\"` - CAMPOHERMOSO\n* `\"15162\"` - CERINZA\n* `\"15172\"` - CHINAVITA\n* `\"15176\"` - CHIQUINQUIRA\n* `\"15180\"` - CHISCAS\n* `\"15183\"` - CHITA\n* `\"15185\"` - CHITARAQUE\n* `\"15187\"` - CHIVATA\n* `\"15189\"` - CIENEGA\n* `\"15204\"` - COMBITA\n* `\"15212\"` - COPER\n* `\"15215\"` - CORRALES\n* `\"15218\"` - COVARACHIA\n* `\"15223\"` - CUBARA\n* `\"15224\"` - CUCAITA\n* `\"15226\"` - CUITIVA\n* `\"15232\"` - CHIQUIZA\n* `\"15236\"` - CHIVOR\n* `\"15238\"` - DUITAMA\n* `\"15244\"` - EL COCUY\n* `\"15248\"` - EL ESPINO\n* `\"15272\"` - FIRAVITOBA\n* `\"15276\"` - FLORESTA\n* `\"15293\"` - GACHANTIVA\n* `\"15296\"` - GAMEZA\n* `\"15299\"` - GARAGOA\n* `\"15317\"` - GUACAMAYAS\n* `\"15322\"` - GUATEQUE\n* `\"15325\"` - GUAYATA\n* `\"15332\"` - GUICAN\n* `\"15362\"` - IZA\n* `\"15367\"` - JENESANO\n* `\"15368\"` - JERICO\n* `\"15377\"` - LABRANZAGRANDE\n* `\"15380\"` - LA CAPILLA\n* `\"15401\"` - LA VICTORIA\n* `\"15403\"` - LA UVITA\n* `\"15407\"` - VILLA DE LEYVA\n* `\"15425\"` - MACANAL\n* `\"15442\"` - MARIPI\n* `\"15455\"` - MIRAFLORES\n* `\"15464\"` - MONGUA\n* `\"15466\"` - MONGUI\n* `\"15469\"` - MONIQUIRA\n* `\"15476\"` - MOTAVITA\n* `\"15480\"` - MUZO\n* `\"15491\"` - NOBSA\n* `\"15494\"` - NUEVO COLON\n* `\"15500\"` - OICATA\n* `\"15507\"` - OTANCHE\n* `\"15511\"` - PACHAVITA\n* `\"15514\"` - PAEZ\n* `\"15516\"` - PAIPA\n* `\"15518\"` - PAJARITO\n* `\"15522\"` - PANQUEBA\n* `\"15531\"` - PAUNA\n* `\"15533\"` - PAYA\n* `\"15537\"` - PAZ DE RIO\n* `\"15542\"` - PESCA\n* `\"15550\"` - PISVA\n* `\"15572\"` - PUERTO BOYACA\n* `\"15580\"` - QUIPAMA\n* `\"15599\"` - RAMIRIQUI\n* `\"15600\"` - RAQUIRA\n* `\"15621\"` - RONDON\n* `\"15632\"` - SABOYA\n* `\"15638\"` - SACHICA\n* `\"15646\"` - SAMACA\n* `\"15660\"` - SAN EDUARDO\n* `\"15664\"` - SAN JOSE DE PARE\n* `\"15667\"` - SAN LUIS DE GACENO\n* `\"15673\"` - SAN MATEO\n* `\"15676\"` - SAN MIGUEL DE SEMA\n* `\"15681\"` - SAN PABLO DE BORBUR\n* `\"15686\"` - SANTANA\n* `\"15690\"` - SANTA MARIA\n* `\"15693\"` - SANTA ROSA DE VITERBO\n* `\"15696\"` - SANTA SOFIA\n* `\"15720\"` - SATIVANORTE\n* `\"15723\"` - SATIVASUR\n* `\"15740\"` - SIACHOQUE\n* `\"15753\"` - SOATA\n* `\"15755\"` - SOCOTA\n* `\"15757\"` - SOCHA\n* `\"15759\"` - SOGAMOSO\n* `\"15761\"` - SOMONDOCO\n* `\"15762\"` - SORA\n* `\"15763\"` - SOTAQUIRA\n* `\"15764\"` - SORACA\n* `\"15774\"` - SUSACON\n* `\"15776\"` - SUTAMARCHAN\n* `\"15778\"` - SUTATENZA\n* `\"15790\"` - TASCO\n* `\"15798\"` - TENZA\n* `\"15804\"` - TIBANA\n* `\"15806\"` - TIBASOSA\n* `\"15808\"` - TINJACA\n* `\"15810\"` - TIPACOQUE\n* `\"15814\"` - TOCA\n* `\"15816\"` - TOGUI\n* `\"15820\"` - TOPAGA\n* `\"15822\"` - TOTA\n* `\"15832\"` - TUNUNGUA\n* `\"15835\"` - TURMEQUE\n* `\"15837\"` - TUTA\n* `\"15839\"` - TUTASA\n* `\"15842\"` - UMBITA\n* `\"15861\"` - VENTAQUEMADA\n* `\"15879\"` - VIRACACHA\n* `\"15897\"` - ZETAQUIRA\n* `\"15492\"` - BELENCITO BOYAC\n* `\"17001\"` - MANIZALES\n* `\"17013\"` - AGUADAS\n* `\"17042\"` - ANSERMA\n* `\"17050\"` - ARANZAZU\n* `\"17088\"` - BELALCAZAR\n* `\"17174\"` - CHINCHINA\n* `\"17272\"` - FILADELFIA\n* `\"17380\"` - LA DORADA\n* `\"17388\"` - LA MERCED\n* `\"17433\"` - MANZANARES\n* `\"17442\"` - MARMATO\n* `\"17444\"` - MARQUETALIA\n* `\"17446\"` - MARULANDA\n* `\"17486\"` - NEIRA\n* `\"17513\"` - PACORA\n* `\"17524\"` - PALESTINA\n* `\"17541\"` - PENSILVANIA\n* `\"17614\"` - RIOSUCIO\n* `\"17616\"` - RISARALDA\n* `\"17653\"` - SALAMINA\n* `\"17662\"` - SAMANA\n* `\"17777\"` - SUPIA\n* `\"17867\"` - VICTORIA\n* `\"17873\"` - VILLAMARIA\n* `\"17877\"` - VITERBO\n* `\"17447\"` - MONTEBONITO - MARULANDA\n* `\"17487\"` - PUEBLORRICO - NEIRA\n* `\"17525\"` - ARAUCA - PALESTINA\n* `\"17542\"` - BOLIVIA - PENSILVANIA\n* `\"17543\"` - ARBOLEDA - PENSILVANIA\n* `\"17615\"` - FLORENCIA - RIOSUCIO\n* `\"17617\"` - SAN JOSE - RISARALDA\n* `\"17663\"` - NORCASIA - SAMANA\n* `\"17665\"` - SAN JOSE - SAN JOSE - CALDAS\n* `\"17495\"` - NORCASIA\n* `\"18001\"` - FLORENCIA\n* `\"18029\"` - ALBANIA\n* `\"18094\"` - BELEN DE LOS ANDAQUIES\n* `\"18150\"` - CARTAGENA DEL CHAIRA\n* `\"18205\"` - CURILLO\n* `\"18247\"` - EL DONCELLO\n* `\"18256\"` - EL PAUJIL\n* `\"18410\"` - LA MONTAÐITA\n* `\"18460\"` - MILAN\n* `\"18479\"` - MORELIA\n* `\"18592\"` - PUERTO RICO\n* `\"18610\"` - SAN JOSE DE FRAGUA\n* `\"18753\"` - SAN VICENTE DEL CAGUAN\n* `\"18785\"` - SOLITA\n* `\"18860\"` - VALPARAISO\n* `\"18754\"` - GUACAMAYAS - CAQUETA\n* `\"18756\"` - SOLANO\n* `\"19001\"` - POPAYAN\n* `\"19022\"` - ALMAGUER\n* `\"19050\"` - ARGELIA\n* `\"19100\"` - BOLIVAR\n* `\"19110\"` - BUENOS AIRES\n* `\"19130\"` - CAJIBIO\n* `\"19137\"` - CALDONO\n* `\"19142\"` - CALOTO\n* `\"19212\"` - CORINTO\n* `\"19256\"` - EL TAMBO\n* `\"19290\"` - FLORENCIA\n* `\"19318\"` - GUAPI\n* `\"19355\"` - INZA\n* `\"19364\"` - JAMBALO\n* `\"19392\"` - LA SIERRA\n* `\"19397\"` - LA VEGA\n* `\"19418\"` - LOPEZ\n* `\"19450\"` - MERCADERES\n* `\"19455\"` - MIRANDA\n* `\"19473\"` - MORALES\n* `\"19513\"` - PADILLA\n* `\"19517\"` - PAEZ\n* `\"19532\"` - PATIA(EL BORDO)\n* `\"19533\"` - PIAMONTE\n* `\"19548\"` - PIENDAMO\n* `\"19573\"` - PUERTO TEJADA\n* `\"19585\"` - PURACE\n* `\"19622\"` - ROSAS\n* `\"19693\"` - SAN SEBASTIAN\n* `\"19698\"` - SANTANDER DE QUILICHAO\n* `\"19701\"` - SANTA ROSA\n* `\"19743\"` - SILVIA\n* `\"19760\"` - SOTARA\n* `\"19780\"` - SUAREZ\n* `\"19807\"` - TIMBIO\n* `\"19809\"` - TIMBIQUI\n* `\"19821\"` - TORIBIO\n* `\"19824\"` - TOTORO\n* `\"19075\"` - BALBOA\n* `\"19002\"` - LOPEZ(MICAY)\n* `\"19003\"` - PAEZ BELALCAZAR - CAUCA\n* `\"19138\"` - SIBERIA - CALDONO\n* `\"19845\"` - VILLA RICA - CAUCA\n* `\"19300\"` - GUACHEN╔\n* `\"19785\"` - SUCRE\n* `\"20001\"` - VALLEDUPAR\n* `\"20011\"` - AGUACHICA\n* `\"20013\"` - AGUSTIN CODAZZI\n* `\"20032\"` - ASTREA\n* `\"20045\"` - BECERRIL\n* `\"20060\"` - BOSCONIA\n* `\"20175\"` - CHIMICHAGUA\n* `\"20178\"` - CHIRIGUANA\n* `\"20228\"` - CURUMANI\n* `\"20238\"` - EL COPEY\n* `\"20250\"` - EL PASO\n* `\"20295\"` - GAMARRA\n* `\"20310\"` - GONZALEZ\n* `\"20383\"` - LA GLORIA\n* `\"20400\"` - LA JAGUA DE IBIRICO\n* `\"20443\"` - MANAURE BALCON DL CESAR\n* `\"20517\"` - PAILITAS\n* `\"20550\"` - PELAYA\n* `\"20614\"` - RIO DE ORO\n* `\"20621\"` - LA PAZ\n* `\"20710\"` - SAN ALBERTO\n* `\"20750\"` - SAN DIEGO\n* `\"20770\"` - SAN MARTIN\n* `\"20787\"` - TAMALAMEQUE\n* `\"20200\"` - LA PAZ\n* `\"20002\"` - PUEBLO BELLO - VALLEDUPAR\n* `\"20570\"` - PUEBLO BELLO\n* `\"23001\"` - MONTERIA\n* `\"23068\"` - AYAPEL\n* `\"23079\"` - BUENAVISTA\n* `\"23090\"` - CANALETE\n* `\"23162\"` - CERETE\n* `\"23168\"` - CHIMA\n* `\"23182\"` - CHINU\n* `\"23189\"` - CIENAGA DE ORO\n* `\"23300\"` - COTORRA\n* `\"23417\"` - LORICA\n* `\"23419\"` - LOS CORDOBAS\n* `\"23464\"` - MOMIL\n* `\"23466\"` - MONTELIBANO\n* `\"23500\"` - MOÐITOS\n* `\"23555\"` - PLANETA RICA\n* `\"23570\"` - PUEBLO NUEVO\n* `\"23574\"` - PUERTO ESCONDIDO\n* `\"23580\"` - PUERTO LIBERTADOR\n* `\"23586\"` - PURISIMA\n* `\"23660\"` - SAHAGUN\n* `\"23670\"` - SAN ANDRES DE SOTAVENTO\n* `\"23672\"` - SAN ANTERO\n* `\"23675\"` - SAN BERNARDO DEL VIENTO\n* `\"23678\"` - SAN CARLOS\n* `\"23686\"` - SAN PELAYO\n* `\"23807\"` - TIERRALTA\n* `\"23855\"` - VALENCIA\n* `\"23350\"` - LA APARTADA\n* `\"23815\"` - TUCHIN\n* `\"25001\"` - AGUA DE DIOS\n* `\"25019\"` - ALBAN\n* `\"25035\"` - ANAPOIMA\n* `\"25040\"` - ANOLAIMA\n* `\"25053\"` - ARBELAEZ\n* `\"25086\"` - BELTRAN\n* `\"25095\"` - BITUIMA\n* `\"25099\"` - BOJACA\n* `\"25120\"` - CABRERA\n* `\"25123\"` - CACHIPAY\n* `\"25126\"` - CAJICA\n* `\"25148\"` - CAPARRAPI\n* `\"25151\"` - CAQUEZA\n* `\"25154\"` - CARMEN DE CARUPA\n* `\"25168\"` - CHAGUANI\n* `\"25175\"` - CHIA\n* `\"25178\"` - CHIPAQUE\n* `\"25181\"` - CHOACHI\n* `\"25183\"` - CHOCONTA\n* `\"25200\"` - COGUA\n* `\"25214\"` - COTA\n* `\"25224\"` - CUCUNUBA\n* `\"25245\"` - EL COLEGIO\n* `\"25258\"` - EL PEÐON\n* `\"25269\"` - FACATATIVA\n* `\"25279\"` - FOMEQUE\n* `\"25281\"` - FOSCA\n* `\"25286\"` - FUNZA\n* `\"25288\"` - FUQUENE\n* `\"25290\"` - FUSAGASUGA\n* `\"25293\"` - GACHALA\n* `\"25295\"` - GACHANCIPA\n* `\"25297\"` - GACHETA\n* `\"25299\"` - GAMA\n* `\"25307\"` - GIRARDOT\n* `\"25312\"` - GRANADA\n* `\"25317\"` - GUACHETA\n* `\"25320\"` - GUADUAS\n* `\"25322\"` - GUASCA\n* `\"25324\"` - GUATAQUI\n* `\"25326\"` - GUATAVITA\n* `\"25328\"` - GUAYABAL DE SIQUIMA\n* `\"25335\"` - GUAYABETAL\n* `\"25339\"` - GUTIERREZ\n* `\"25368\"` - JERUSALEN\n* `\"25372\"` - JUNIN\n* `\"25377\"` - LA CALERA\n* `\"25386\"` - LA MESA\n* `\"25394\"` - LA PALMA\n* `\"25398\"` - LA PEÐA\n* `\"25402\"` - LA VEGA\n* `\"25407\"` - LENGUAZAQUE\n* `\"25426\"` - MACHETA\n* `\"25430\"` - MADRID\n* `\"25436\"` - MANTA\n* `\"25438\"` - MEDINA\n* `\"25473\"` - MOSQUERA\n* `\"25483\"` - NARIÐO\n* `\"25486\"` - NEMOCON\n* `\"25488\"` - NILO\n* `\"25489\"` - NIMAIMA\n* `\"25491\"` - NOCAIMA\n* `\"25506\"` - VENECIA\n* `\"25513\"` - PACHO\n* `\"25518\"` - PAIME\n* `\"25524\"` - PANDI\n* `\"25530\"` - PARATEBUENO\n* `\"25535\"` - PASCA\n* `\"25572\"` - PUERTO SALGAR\n* `\"25580\"` - PULI\n* `\"25592\"` - QUEBRADANEGRA\n* `\"25594\"` - QUETAME\n* `\"25596\"` - QUIPILE\n* `\"25599\"` - APULO\n* `\"25612\"` - RICAURTE\n* `\"25645\"` - S.ANTONIO DE TEQUENDAMA\n* `\"25649\"` - SAN BERNARDO\n* `\"25653\"` - SAN CAYETANO\n* `\"25658\"` - SAN FRANCISCO\n* `\"25662\"` - SAN JUAN DE RIO SECO\n* `\"25718\"` - SASAIMA\n* `\"25736\"` - SESQUILE\n* `\"25740\"` - SIBATE\n* `\"25743\"` - SILVANIA\n* `\"25745\"` - SIMIJACA\n* `\"25754\"` - SOACHA\n* `\"25758\"` - SOPO\n* `\"25769\"` - SUBACHOQUE\n* `\"25772\"` - SUESCA\n* `\"25777\"` - SUPATA\n* `\"25779\"` - SUSA\n* `\"25781\"` - SUTATAUSA\n* `\"25785\"` - TABIO\n* `\"25793\"` - TAUSA\n* `\"25797\"` - TENA\n* `\"25799\"` - TENJO\n* `\"25805\"` - TIBACUY\n* `\"25807\"` - TIBIRITA\n* `\"25815\"` - TOCAIMA\n* `\"25817\"` - TOCANCIPA\n* `\"25823\"` - TOPAIPI\n* `\"25839\"` - UBALA\n* `\"25841\"` - UBAQUE\n* `\"25843\"` - UBATE\n* `\"25845\"` - UNE\n* `\"25851\"` - UTICA\n* `\"25862\"` - VERGARA\n* `\"25867\"` - VIANI\n* `\"25871\"` - VILLAGOMEZ\n* `\"25873\"` - VILLAPINZON\n* `\"25875\"` - VILLETA\n* `\"25878\"` - VIOTA\n* `\"25885\"` - YACOPI\n* `\"25898\"` - ZIPACON\n* `\"25899\"` - ZIPAQUIRA\n* `\"25260\"` - EL ROSAL\n* `\"25308\"` - TOLEMAIDA TOLIMA\n* `\"25600\"` - ANAPOIMA II\n* `\"25002\"` - VENECIA-OSPINA PEREZ - VENECIA\n* `\"25597\"` - LA SIERRA - QUIPILE\n* `\"25759\"` - BRICEÐO - CUNDINAMARCA\n* `\"25806\"` - CUMACA - TIBACUY\n* `\"25897\"` - LA CAPILLA - ZIPACON\n* `\"27001\"` - QUIBDO\n* `\"27006\"` - ACANDI\n* `\"27025\"` - ALTO BAUDO\n* `\"27073\"` - BAGADO\n* `\"27075\"` - BAHIA SOLANO\n* `\"27077\"` - BAJO BAUDO\n* `\"27099\"` - BOJAYA\n* `\"27135\"` - CANTON DEL SAN PABLO\n* `\"27205\"` - CONDOTO\n* `\"27245\"` - EL CARMEN\n* `\"27250\"` - EL LITORAL DEL SAN JUAN\n* `\"27361\"` - ITSMINA\n* `\"27372\"` - JURADO\n* `\"27413\"` - LLORO\n* `\"27491\"` - NOVITA\n* `\"27495\"` - NUQUI\n* `\"27615\"` - RIOSUCIO\n* `\"27660\"` - SAN JOSE DEL PALMAR\n* `\"27745\"` - SIPI\n* `\"27787\"` - TADO\n* `\"27800\"` - UNGUIA\n* `\"27002\"` - RIONEGRO     CHOCO\n* `\"27003\"` - CARMEN DE ATRATO - CHOCO\n* `\"27100\"` - BOJAYA LA LOMA - BOJAYA\n* `\"27450\"` - BEBEDO - MEDIO SANJUAN - CHOCO\n* `\"27580\"` - SANTA RITA - RIO IRO - CHOCO\n* `\"27600\"` - RIO QUITO (CHOCO)\n* `\"27086\"` - BELEN DEBAJIRA\n* `\"27150\"` - CARMEN DEL DARIEN\n* `\"27050\"` - ATRATO\n* `\"27160\"` - CERTEGUI\n* `\"27425\"` - MEDIO ATRATO\n* `\"27430\"` - MEDIO BAUDO\n* `\"27810\"` - UNION PANAMERICANA\n* `\"41001\"` - NEIVA\n* `\"41006\"` - ACEVEDO\n* `\"41013\"` - AGRADO\n* `\"41016\"` - AIPE\n* `\"41020\"` - ALGECIRAS\n* `\"41026\"` - ALTAMIRA\n* `\"41078\"` - BARAYA\n* `\"41132\"` - CAMPOALEGRE\n* `\"41206\"` - COLOMBIA\n* `\"41244\"` - ELIAS\n* `\"41298\"` - GARZON\n* `\"41306\"` - GIGANTE\n* `\"41319\"` - GUADALUPE\n* `\"41349\"` - HOBO\n* `\"41357\"` - IQUIRA\n* `\"41359\"` - ISNOS\n* `\"41378\"` - LA ARGENTINA\n* `\"41396\"` - LA PLATA\n* `\"41483\"` - NATAGA\n* `\"41503\"` - OPORAPA\n* `\"41518\"` - PAICOL\n* `\"41524\"` - PALERMO\n* `\"41530\"` - PALESTINA\n* `\"41548\"` - PITAL\n* `\"41551\"` - PITALITO\n* `\"41615\"` - RIVERA\n* `\"41660\"` - SALADOBLANCO\n* `\"41668\"` - SAN AGUSTIN\n* `\"41676\"` - SANTA MARIA\n* `\"41770\"` - SUAZA\n* `\"41791\"` - TARQUI\n* `\"41797\"` - TESALIA\n* `\"41799\"` - TELLO\n* `\"41801\"` - TERUEL\n* `\"41807\"` - TIMANA\n* `\"41872\"` - VILLAVIEJA\n* `\"41885\"` - YAGUARA\n* `\"41002\"` - VEGALARGA - NEIVA\n* `\"44001\"` - RIOHACHA\n* `\"44078\"` - BARRANCAS\n* `\"44090\"` - DIBULLA\n* `\"44098\"` - DISTRACCION\n* `\"44110\"` - EL MOLINO\n* `\"44279\"` - FONSECA\n* `\"44378\"` - HATONUEVO\n* `\"44430\"` - MAICAO\n* `\"44560\"` - MANAURE\n* `\"44650\"` - SAN JUAN DEL CESAR\n* `\"44847\"` - URIBIA\n* `\"44855\"` - URUMITA\n* `\"44874\"` - VILLANUEVA\n* `\"44900\"` - ALBANIA\n* `\"44002\"` - PUERTO BOLIVAR - GUAJIRA\n* `\"44431\"` - ALBANIA - MAICAO\n* `\"44035\"` - ALBANIA\n* `\"44420\"` - LA GUAJIRA DEL PILAR\n* `\"47001\"` - SANTA MARTA\n* `\"47053\"` - ARACATACA\n* `\"47058\"` - ARIGUANI\n* `\"47161\"` - CERRO DE SAN ANTONIO\n* `\"47170\"` - CHIVOLO\n* `\"47189\"` - CIENAGA\n* `\"47245\"` - EL BANCO\n* `\"47258\"` - EL PIÐON\n* `\"47268\"` - EL RETEN\n* `\"47288\"` - FUNDACION\n* `\"47318\"` - GUAMAL\n* `\"47541\"` - PEDRAZA\n* `\"47545\"` - PIJIÐO DEL CARMEN\n* `\"47551\"` - PIVIJAY\n* `\"47555\"` - PLATO\n* `\"47570\"` - PUEBLOVIEJO\n* `\"47605\"` - REMOLINO\n* `\"47675\"` - SALAMINA\n* `\"47692\"` - SAN SEBASTIAN BUENAVIST\n* `\"47703\"` - SAN ZENON\n* `\"47707\"` - SANTA ANA\n* `\"47745\"` - SITIONUEVO\n* `\"47798\"` - TENERIFE\n* `\"47250\"` - FUNDACION\n* `\"47190\"` - SEVILLA - CIENAGA\n* `\"47960\"` - CAÐO DE AGUAS - ZAPAYAN - MAGDALENA\n* `\"47980\"` - ZONA BANANERA (MAGDALENA)\n* `\"47460\"` - NUEVA GRANADA\n* `\"47030\"` - ALGARROBO - MAGDALENA\n* `\"47205\"` - CONCORDIA\n* `\"47660\"` - SABANAS DE SAN ANGEL\n* `\"47720\"` - SANTA BARBARA DE PINTO\n* `\"50001\"` - VILLAVICENCIO\n* `\"50006\"` - ACACIAS\n* `\"50110\"` - BARRANCA DE UPIA\n* `\"50124\"` - CABUYARO\n* `\"50150\"` - CASTILLA LA NUEVA\n* `\"50223\"` - CUBARRAL\n* `\"50226\"` - CUMARAL\n* `\"50245\"` - EL CALVARIO\n* `\"50251\"` - EL CASTILLO\n* `\"50270\"` - EL DORADO\n* `\"50287\"` - FUENTE DE ORO\n* `\"50313\"` - GRANADA\n* `\"50318\"` - GUAMAL\n* `\"50325\"` - MAPIRIPAN\n* `\"50330\"` - MESETAS\n* `\"50350\"` - LA MACARENA\n* `\"50370\"` - LA URIBE\n* `\"50400\"` - LEJANIAS\n* `\"50450\"` - PUERTO CONCORDIA\n* `\"50568\"` - PUERTO GAITAN\n* `\"50573\"` - PUERTO LOPEZ\n* `\"50577\"` - PUERTO LLERAS\n* `\"50590\"` - PUERTO RICO\n* `\"50606\"` - RESTREPO\n* `\"50680\"` - SAN CARLOS DE GUAROA\n* `\"50683\"` - SAN JUAN DE ARAMA\n* `\"50686\"` - SAN JUANITO\n* `\"50689\"` - SAN MARTIN\n* `\"50711\"` - VISTA HERMOSA\n* `\"50252\"` - MEDELLIN DEL ARIARI - EL CASTILLO\n* `\"52001\"` - PASTO\n* `\"52019\"` - ALBAN\n* `\"52022\"` - ALDANA\n* `\"52036\"` - ANCUYA\n* `\"52051\"` - ARBOLEDA\n* `\"52079\"` - BARBACOAS\n* `\"52083\"` - BELEN\n* `\"52110\"` - BUESACO\n* `\"52203\"` - COLON\n* `\"52207\"` - CONSACA\n* `\"52210\"` - CONTADERO\n* `\"52215\"` - CORDOBA\n* `\"52224\"` - CUASPUD\n* `\"52227\"` - CUMBAL\n* `\"52233\"` - CUMBITARA\n* `\"52240\"` - CHACHAGUI\n* `\"52250\"` - EL CHARCO\n* `\"52256\"` - EL ROSARIO\n* `\"52258\"` - EL TABLON\n* `\"52260\"` - EL TAMBO\n* `\"52287\"` - FUNES\n* `\"52317\"` - GUACHUCAL\n* `\"52320\"` - GUAITARILLA\n* `\"52323\"` - GUALMATAN\n* `\"52352\"` - ILES\n* `\"52354\"` - IMUES\n* `\"52356\"` - IPIALES\n* `\"52378\"` - LA CRUZ\n* `\"52381\"` - LA FLORIDA\n* `\"52385\"` - LA LLANADA\n* `\"52390\"` - LA TOLA\n* `\"52399\"` - LA UNION\n* `\"52405\"` - LEIVA\n* `\"52411\"` - LINARES\n* `\"52418\"` - LOS ANDES\n* `\"52427\"` - MAGUI\n* `\"52435\"` - MALLAMA\n* `\"52473\"` - MOSQUERA\n* `\"52490\"` - OLAYA HERRERA\n* `\"52506\"` - OSPINA\n* `\"52520\"` - FRANCISCO PIZARRO\n* `\"52540\"` - POLICARPA\n* `\"52560\"` - POTOSI\n* `\"52565\"` - PROVIDENCIA\n* `\"52573\"` - PUERRES\n* `\"52585\"` - PUPIALES\n* `\"52612\"` - RICAURTE\n* `\"52621\"` - ROBERTO PAYAN\n* `\"52678\"` - SAMANIEGO\n* `\"52683\"` - SANDONA\n* `\"52685\"` - SAN BERNARDO\n* `\"52687\"` - SAN LORENZO\n* `\"52693\"` - SAN PABLO\n* `\"52694\"` - SAN PEDRO DE CARTAGO\n* `\"52696\"` - SANTA BARBARA\n* `\"52699\"` - SANTACRUZ\n* `\"52720\"` - SAPUYES\n* `\"52786\"` - TAMINANGO\n* `\"52788\"` - TANGUA\n* `\"52835\"` - TUMACO\n* `\"52838\"` - TUQUERRES\n* `\"52885\"` - YACUANQUER\n* `\"52660\"` - MUN PASTO\n* `\"52002\"` - SANTA BARBARA - PASTO\n* `\"52003\"` - PURACE - NARIÐO\n* `\"52100\"` - PAJAJOY - BUESACO\n* `\"52204\"` - GUAITARILLA - COLON\n* `\"52254\"` - EL PEÐOL\n* `\"52480\"` - NARIÐO\n* `\"54001\"` - CUCUTA\n* `\"54003\"` - ABREGO\n* `\"54051\"` - ARBOLEDAS\n* `\"54099\"` - BOCHALEMA\n* `\"54109\"` - BUCARASICA\n* `\"54125\"` - CACOTA\n* `\"54128\"` - CACHIRA\n* `\"54172\"` - CHINACOTA\n* `\"54174\"` - CHITAGA\n* `\"54206\"` - CONVENCION\n* `\"54223\"` - CUCUTILLA\n* `\"54239\"` - DURANIA\n* `\"54245\"` - EL CARMEN\n* `\"54250\"` - EL TARRA\n* `\"54261\"` - EL ZULIA\n* `\"54313\"` - GRAMALOTE\n* `\"54344\"` - HACARI\n* `\"54347\"` - HERRAN\n* `\"54377\"` - LABATECA\n* `\"54385\"` - LA ESPERANZA\n* `\"54398\"` - LA PLAYA\n* `\"54405\"` - LOS PATIOS\n* `\"54418\"` - LOURDES\n* `\"54480\"` - MUTISCUA\n* `\"54498\"` - OCAÐA\n* `\"54518\"` - PAMPLONA\n* `\"54520\"` - PAMPLONITA\n* `\"54553\"` - PUERTO SANTANDER\n* `\"54599\"` - RAGONVALIA\n* `\"54660\"` - SALAZAR\n* `\"54670\"` - SAN CALIXTO\n* `\"54673\"` - SAN CAYETANO\n* `\"54680\"` - SANTIAGO\n* `\"54720\"` - SARDINATA\n* `\"54743\"` - SILOS\n* `\"54800\"` - TEORAMA\n* `\"54810\"` - TIBU\n* `\"54820\"` - TOLEDO\n* `\"54871\"` - VILLA CARO\n* `\"54874\"` - VILLA DEL ROSARIO\n* `\"54721\"` - LAS MERCEDES - SARDINATA\n* `\"54811\"` - LA GABARRA - TIBU\n* `\"54821\"` - GIBRALTAR - NTE SANTANDER\n* `\"63001\"` - ARMENIA\n* `\"63111\"` - BUENAVISTA\n* `\"63130\"` - CALARCA\n* `\"63190\"` - CIRCASIA\n* `\"63212\"` - CORDOBA\n* `\"63272\"` - FILANDIA\n* `\"63302\"` - GENOVA\n* `\"63401\"` - LA TEBAIDA\n* `\"63470\"` - MONTENEGRO\n* `\"63548\"` - PIJAO\n* `\"63594\"` - QUIMBAYA\n* `\"63690\"` - SALENTO\n* `\"63131\"` - BARCELONA - CALARCA\n* `\"66001\"` - PEREIRA\n* `\"66045\"` - APIA\n* `\"66075\"` - BALBOA\n* `\"66088\"` - BELEN DE UMBRIA\n* `\"66170\"` - DOS QUEBRADAS\n* `\"66318\"` - GUATICA\n* `\"66383\"` - LA CELIA\n* `\"66400\"` - LA VIRGINIA\n* `\"66440\"` - MARSELLA\n* `\"66456\"` - MISTRATO\n* `\"66572\"` - PUEBLO RICO\n* `\"66594\"` - QUINCHIA\n* `\"66682\"` - SANTA ROSA DE CABAL\n* `\"66687\"` - SANTUARIO\n* `\"66002\"` - ARABIA - PEREIRA\n* `\"66003\"` - SAN JOSE - PEREIRA\n* `\"68001\"` - BUCARAMANGA\n* `\"68013\"` - AGUADA\n* `\"68020\"` - ALBANIA\n* `\"68051\"` - ARATOCA\n* `\"68077\"` - BARBOSA\n* `\"68079\"` - BARICHARA\n* `\"68081\"` - BARRANCABERMEJA\n* `\"68092\"` - BETULIA\n* `\"68101\"` - BOLIVAR\n* `\"68121\"` - CABRERA\n* `\"68132\"` - CALIFORNIA\n* `\"68147\"` - CAPITANEJO\n* `\"68152\"` - CARCASI\n* `\"68160\"` - CEPITA\n* `\"68162\"` - CERRITO\n* `\"68167\"` - CHARALA\n* `\"68169\"` - CHARTA\n* `\"68176\"` - CHIMA\n* `\"68179\"` - CHIPATA\n* `\"68190\"` - CIMITARRA\n* `\"68207\"` - CONCEPCION\n* `\"68209\"` - CONFINES\n* `\"68211\"` - CONTRATACION\n* `\"68217\"` - COROMORO\n* `\"68229\"` - CURITI\n* `\"68235\"` - EL CARMEN\n* `\"68245\"` - EL GUACAMAYO\n* `\"68250\"` - EL PEÐON\n* `\"68255\"` - EL PLAYON\n* `\"68264\"` - ENCINO\n* `\"68266\"` - ENCISO\n* `\"68271\"` - FLORIAN\n* `\"68276\"` - FLORIDABLANCA\n* `\"68296\"` - GALAN\n* `\"68298\"` - GAMBITA\n* `\"68307\"` - GIRON\n* `\"68318\"` - GUACA\n* `\"68320\"` - GUADALUPE\n* `\"68322\"` - GUAPOTA\n* `\"68324\"` - GUAVATA\n* `\"68327\"` - GUEPSA\n* `\"68344\"` - HATO\n* `\"68368\"` - JESUS MARIA\n* `\"68370\"` - JORDAN\n* `\"68377\"` - LA BELLEZA\n* `\"68385\"` - LANDAZURI\n* `\"68397\"` - LA PAZ\n* `\"68406\"` - LEBRIJA\n* `\"68418\"` - LOS SANTOS\n* `\"68425\"` - MACARAVITA\n* `\"68432\"` - MALAGA\n* `\"68444\"` - MATANZA\n* `\"68464\"` - MOGOTES\n* `\"68468\"` - MOLAGAVITA\n* `\"68498\"` - OCAMONTE\n* `\"68500\"` - OIBA\n* `\"68502\"` - ONZAGA\n* `\"68522\"` - PALMAR\n* `\"68524\"` - PALMAS DEL SOCORRO\n* `\"68533\"` - PARAMO\n* `\"68547\"` - PIEDECUESTA\n* `\"68549\"` - PINCHOTE\n* `\"68572\"` - PUENTE NACIONAL\n* `\"68573\"` - PUERTO PARRA\n* `\"68575\"` - PUERTO WILCHES\n* `\"68615\"` - RIONEGRO\n* `\"68655\"` - SABANA DE TORRES\n* `\"68669\"` - SAN ANDRES\n* `\"68673\"` - SAN BENITO\n* `\"68679\"` - SAN GIL\n* `\"68682\"` - SAN JOAQUIN\n* `\"68684\"` - SAN JOSE DE MIRANDA\n* `\"68686\"` - SAN MIGUEL\n* `\"68689\"` - SAN VICENTE DE CHUCURI\n* `\"68705\"` - SANTA BARBARA\n* `\"68720\"` - SANTA HELENA DEL OPON\n* `\"68745\"` - SIMACOTA\n* `\"68755\"` - SOCORRO\n* `\"68770\"` - SUAITA\n* `\"68773\"` - SUCRE\n* `\"68780\"` - SURATA\n* `\"68820\"` - TONA\n* `\"68855\"` - VALLE DE SAN JOSE\n* `\"68861\"` - VELEZ\n* `\"68867\"` - VETAS\n* `\"68872\"` - VILLANUEVA\n* `\"68895\"` - ZAPATOCA\n* `\"68082\"` - EL CENTRO - BARRANCABERMEJA\n* `\"68771\"` - SAN JOSE SUAITA - SUAITA\n* `\"70001\"` - SINCELEJO\n* `\"70110\"` - BUENAVISTA\n* `\"70124\"` - CAIMITO\n* `\"70204\"` - COLOSO\n* `\"70215\"` - COROZAL\n* `\"70230\"` - CHALAN\n* `\"70235\"` - GALERAS\n* `\"70265\"` - GUARANDA\n* `\"70400\"` - LA UNION\n* `\"70418\"` - LOS PALMITOS\n* `\"70429\"` - MAJAGUAL\n* `\"70473\"` - MORROA\n* `\"70508\"` - OVEJAS\n* `\"70523\"` - PALMITO\n* `\"70670\"` - SAMPUES\n* `\"70678\"` - SAN BENITO ABAD\n* `\"70702\"` - SAN JUAN DE BETULIA\n* `\"70708\"` - SAN MARCOS\n* `\"70713\"` - SAN ONOFRE\n* `\"70717\"` - SAN PEDRO\n* `\"70742\"` - SINCE\n* `\"70771\"` - SUCRE\n* `\"70820\"` - TOLU\n* `\"70823\"` - TOLUVIEJO\n* `\"70222\"` - COVE#AS\n* `\"70821\"` - TOLU COVENAS\n* `\"70390\"` - LA GLORIA\n* `\"70002\"` - COLOSO  RICAURTE - COLOSO\n* `\"70221\"` - COVEÐAS - COVEÐAS - SUCRE\n* `\"70233\"` - EL ROBLE\n* `\"73001\"` - IBAGUE\n* `\"73024\"` - ALPUJARRA\n* `\"73026\"` - ALVARADO\n* `\"73030\"` - AMBALEMA\n* `\"73043\"` - ANZOATEGUI\n* `\"73055\"` - ARMERO\n* `\"73067\"` - ATACO\n* `\"73124\"` - CAJAMARCA\n* `\"73148\"` - CARMEN DE APICALA\n* `\"73152\"` - CASABIANCA\n* `\"73168\"` - CHAPARRAL\n* `\"73200\"` - COELLO\n* `\"73217\"` - COYAIMA\n* `\"73226\"` - CUNDAY\n* `\"73236\"` - DOLORES\n* `\"73268\"` - ESPINAL\n* `\"73270\"` - FALAN\n* `\"73275\"` - FLANDES\n* `\"73283\"` - FRESNO\n* `\"73319\"` - GUAMO\n* `\"73347\"` - HERVEO\n* `\"73349\"` - HONDA\n* `\"73352\"` - ICONONZO\n* `\"73408\"` - LERIDA\n* `\"73411\"` - LIBANO\n* `\"73443\"` - MARIQUITA\n* `\"73449\"` - MELGAR\n* `\"73461\"` - MURILLO\n* `\"73483\"` - NATAGAIMA\n* `\"73504\"` - ORTEGA\n* `\"73520\"` - PALOCABILDO\n* `\"73547\"` - PIEDRAS\n* `\"73555\"` - PLANADAS\n* `\"73563\"` - PRADO\n* `\"73585\"` - PURIFICACION\n* `\"73616\"` - RIOBLANCO\n* `\"73622\"` - RONCESVALLES\n* `\"73624\"` - ROVIRA\n* `\"73671\"` - SALDAÐA\n* `\"73675\"` - SAN ANTONIO\n* `\"73678\"` - SAN LUIS\n* `\"73686\"` - SANTA ISABEL\n* `\"73770\"` - SUAREZ\n* `\"73854\"` - VALLE DE SAN JUAN\n* `\"73861\"` - VENADILLO\n* `\"73870\"` - VILLAHERMOSA\n* `\"73873\"` - VILLARRICA\n* `\"73231\"` - CHICORAL\n* `\"73002\"` - SANTA TERESA - IBAGUE\n* `\"73068\"` - SANTIAGO  PEREZ - ATACO\n* `\"73201\"` - GUALANDAY - COELLO\n* `\"73227\"` - TRES ESQUINAS - CUNDAY\n* `\"73269\"` - CHICORAL - ESPINAL\n* `\"73271\"` - PALOCABILDO - FALAN\n* `\"73556\"` - PLANADAS - PLANADAS - TOLIMA\n* `\"73617\"` - HERRERA - RIOBLANCO\n* `\"73676\"` - PLAYARRICA - SAN ANTONIO\n* `\"73862\"` - JUNIN - VENADILLO\n* `\"76001\"` - CALI\n* `\"76020\"` - ALCALA\n* `\"76036\"` - ANDALUCIA\n* `\"76041\"` - ANSERMANUEVO\n* `\"76054\"` - ARGELIA\n* `\"76100\"` - BOLIVAR\n* `\"76109\"` - BUENAVENTURA\n* `\"76111\"` - BUGA\n* `\"76113\"` - BUGALAGRANDE\n* `\"76122\"` - CAICEDONIA\n* `\"76126\"` - CALIMA\n* `\"76130\"` - CANDELARIA\n* `\"76147\"` - CARTAGO\n* `\"76233\"` - DAGUA\n* `\"76243\"` - EL AGUILA\n* `\"76246\"` - EL CAIRO\n* `\"76248\"` - EL CERRITO\n* `\"76250\"` - EL DOVIO\n* `\"76275\"` - FLORIDA\n* `\"76306\"` - GINEBRA\n* `\"76318\"` - GUACARI\n* `\"76364\"` - JAMUNDI\n* `\"76377\"` - LA CUMBRE\n* `\"76400\"` - LA UNION\n* `\"76403\"` - LA VICTORIA\n* `\"76497\"` - OBANDO\n* `\"76520\"` - PALMIRA\n* `\"76563\"` - PRADERA\n* `\"76606\"` - RESTREPO\n* `\"76616\"` - RIOFRIO\n* `\"76622\"` - ROLDANILLO\n* `\"76670\"` - SAN PEDRO\n* `\"76736\"` - SEVILLA\n* `\"76823\"` - TORO\n* `\"76828\"` - TRUJILLO\n* `\"76834\"` - TULUA\n* `\"76845\"` - ULLOA\n* `\"76863\"` - VERSALLES\n* `\"76869\"` - VIJES\n* `\"76890\"` - YOTOCO\n* `\"76892\"` - YUMBO\n* `\"76895\"` - ZARZAL\n* `\"76238\"` - DARIEN\n* `\"76625\"` - SANTANDER\n* `\"99999\"` - TULUA VALLE\n* `\"76114\"` - SAN ANTONIO\n* `\"76002\"` - BAHIA MALAGA - VALLE\n* `\"76101\"` - NARANJAL - BOLIVAR\n* `\"76617\"` - SALONICA - RIOFRIO\n* `\"76138\"` - VILLA GORGONA\n* `\"81001\"` - ARAUCA\n* `\"81065\"` - ARAUQUITA\n* `\"81220\"` - CRAVO NORTE\n* `\"81300\"` - FORTUL\n* `\"81591\"` - PUERTO RONDON\n* `\"81736\"` - SARAVENA\n* `\"81794\"` - TAME\n* `\"85001\"` - YOPAL\n* `\"85010\"` - AGUAZUL\n* `\"85015\"` - CHAMEZA\n* `\"85125\"` - HATO COROZAL\n* `\"85136\"` - LA SALINA\n* `\"85139\"` - MANI\n* `\"85162\"` - MONTERREY\n* `\"85225\"` - NUNCHIA\n* `\"85230\"` - OROCUE\n* `\"85250\"` - PAZ DE ARIPORO\n* `\"85263\"` - PORE\n* `\"85279\"` - RECETOR\n* `\"85300\"` - SABANALARGA\n* `\"85315\"` - SACAMA\n* `\"85325\"` - SAN LUIS DE PALENQUE\n* `\"85400\"` - TAMARA\n* `\"85410\"` - TAURAMENA\n* `\"85430\"` - TRINIDAD\n* `\"85440\"` - VILLANUEVA\n* `\"86001\"` - MOCOA\n* `\"86219\"` - COLON\n* `\"86320\"` - ORITO\n* `\"86568\"` - PUERTO ASIS\n* `\"86569\"` - PUERTO CAICEDO\n* `\"86571\"` - PUERTO GUZMAN\n* `\"86573\"` - PUERTO  LEGUIZAMO\n* `\"86749\"` - SIBUNDOY\n* `\"86755\"` - SAN FRANCISCO\n* `\"86757\"` - SAN MIGUEL\n* `\"86760\"` - SANTIAGO\n* `\"86865\"` - VALLE GUAMUEZ\n* `\"86885\"` - VILLAGARZON\n* `\"86500\"` - LA HORMIGA\n* `\"88001\"` - SAN ANDRES\n* `\"88564\"` - PROVIDENCIA\n* `\"91001\"` - LETICIA\n* `\"91263\"` - EL ENCANTO\n* `\"91405\"` - LA CHORRERA\n* `\"91407\"` - LA PEDRERA\n* `\"91460\"` - MIRITI-PARANA\n* `\"91540\"` - PUERTO NARIÐO\n* `\"91669\"` - PTO SANTANDER\n* `\"91798\"` - TARAPACA\n* `\"91530\"` - PUERTO ALEGRIA\n* `\"91536\"` - PUERTO ARICA\n* `\"91430\"` - LA VICTORIA\n* `\"94001\"` - INIRIDA\n* `\"94343\"` - GUAVIARE\n* `\"94883\"` - SAN FELIPE\n* `\"94884\"` - PUERTO COLOMBIA\n* `\"94885\"` - LA GUADALUPE\n* `\"94886\"` - CACAHUAL\n* `\"94887\"` - PANA PANA\n* `\"94663\"` - MAPIRIPANA\n* `\"94888\"` - MORICHAL\n* `\"95001\"` - SAN JOSE DEL GUAVIARE\n* `\"95015\"` - CALAMAR\n* `\"95025\"` - EL RETORNO\n* `\"95200\"` - MIRAFLORES\n* `\"95220\"` - MORICHAL VIEJO - MORICHAL\n* `\"97001\"` - MITU\n* `\"97161\"` - CARURU\n* `\"97511\"` - PACOA\n* `\"97666\"` - TARAIRA\n* `\"97777\"` - PAPUNAUA\n* `\"97889\"` - YAVARATE\n* `\"99001\"` - PUERTO CARREÐO\n* `\"99524\"` - LA PRIMAVERA\n* `\"99624\"` - SANTA ROSALIA\n* `\"99773\"` - CUMARIBO\n* `\"99572\"` - SANTA RITA (VICHADA)\n* `\"99760\"` - SAN JOSE DE OCUNE\n"
      },
      "clientReferences" : {
        "type" : "array",
        "items" : {
          "type" : "object",
          "required" : [ "domain", "index", "value" ],
          "properties" : {
            "domain" : {
              "type" : "string",
              "maxLength" : 40,
              "enum" : [ "ClientReference-Acct Level Doc Type", "ClientReference-Acct Level Doc", "ClientReference-Merchant Dane Code", "ClientReference-Merch Level Doc Type", "ClientReference-Amex", "ClientReference-Ceiling", "ClientReference-Verification Digit", "ClientReference-Amex Acc Lv Doc Type", "ClientReference-Amex Acc Lv Doc ID", "ClientReference-MC Acc Lv Doc Type", "ClientReference-MC Acc Lv Doc ID", "ClientReference-Visa Acc Lv Doc Type", "ClientReference-Visa Acc Lv Doc ID", "ClientReference-Contribute ReteFuent", "ClientReference-Contribute ReteIca", "ClientReference-ReteFuente", "ClientReference-ReteIva", "ClientReference-ReteIca", "ClientReference-ReteFuente Date", "ClientReference-ReteIva Date", "ClientReference-ReteIca Date", "ClientReference-ReteIca Agent in Mun", "ClientReference-Key MDM", "ClientReference-Original Doc Number", "ClientReference-State Entity", "ClientReference-ICA Retent Agt Mun", "ClientReference-ICA AutoRet Agt Mun", "ClientReference-Owner Acct Name", "ClientReference-Owner Acct ID No", "ClientReference-Owner Acct Id Type", "ClientReference-Income Taxpayer", "ClientReference-Bizagi Boarding Code", "ClientReference-Tax Regime-District", "ClientReference-Payment Facilitator", "ClientReference-Sub merchant ID", "ClientReference-Interchange Plus" ]
            },
            "index" : {
              "type" : "string",
              "maxLength" : 3,
              "enum" : [ "106", "107", "110", "111", "201", "429", "010", "011", "012", "013", "014", "015", "016", "024", "025", "026", "027", "028", "029", "030", "031", "043", "044", "045", "046", "047", "048", "052", "053", "055", "056", "058", "059", "992", "234", "239" ]
            },
            "value" : {
              "type" : "string",
              "maxLength" : 32,
              "description" : "'Based upon the client reference selected, provide the value; for instance, RetelVA Exempt - provide the reason the merchant is tax exempt'            "
            }
          }
        }
      },
      "AcquiringResponse" : {
        "type" : "array",
        "items" : {
          "type" : "object",
          "required" : [ "pricingDetailId", "pricingTypeId", "productId", "description", "feeMin", "feeDefault", "feeMax", "rateMin", "rateDefault", "rateMax", "clientTariffId", "merchantTariffId" ],
          "properties" : {
            "pricingDetailId" : {
              "type" : "number",
              "format" : "int64",
              "maxLength" : 10,
              "example" : 32157,
              "description" : "Internal database ID, not needed for submitting merchant"
            },
            "pricingTypeId" : {
              "type" : "number",
              "format" : "int64",
              "maxLength" : 10,
              "example" : 333766,
              "description" : "Internal database ID, not needed for submitting merchant"
            },
            "productId" : {
              "type" : "number",
              "format" : "int64",
              "maxLength" : 50,
              "example" : 2010578888888940
            },
            "description" : {
              "type" : "string",
              "maxLength" : 240,
              "example" : "This is a product description"
            },
            "feeMin" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "feeDefault" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "feeMax" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "rateMin" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "rateDefault" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "rateMax" : {
              "type" : "number",
              "format" : "double",
              "maxLength" : 20
            },
            "clientTariffId" : {
              "$ref" : "#/components/schemas/clientTariffId"
            },
            "merchantTariffId" : {
              "$ref" : "#/components/schemas/merchantTariffId"
            }
          }
        }
      },
      "OrderCreationRequest" : {
        "type" : "object",
        "required" : [ "company", "subgroupLegalName", "subgroupLegalForm", "omnipayLanguage", "subgroupMunicipalityId", "subgroupCountyId", "first_name", "last_name", "email", "phone", "address1", "city", "state", "zip", "country", "agentEmail", "eCommerceInd", "settlementMethodId", "postingTariffId", "clientTariffId", "pricingOptions", "subgroupRegionalTax", "subgroupWithholdTaxTariffId", "subgroupWithholdVATTariffId" ],
        "properties" : {
          "parentMerchantId" : {
            "type" : "string",
            "maxLength" : 8,
            "description" : "Omnipay Subgroup Mid. Use this to add a location to an existing Subgroup"
          },
          "company" : {
            "type" : "string",
            "maxLength" : 22,
            "description" : "Needed for OPY",
            "example" : "Postobon Sodas"
          },
          "subgroupLegalName" : {
            "type" : "string",
            "maxLength" : 100,
            "description" : "Needed for OPY",
            "example" : "Postonbon Conglomerate Inc."
          },
          "subgroupRegionalTax" : {
            "type" : "string",
            "maxLength" : 3,
            "description" : "Need to be sent to OPY for 010 record",
            "example" : "000"
          },
          "subgroupWithholdTaxTariffId" : {
            "type" : "string",
            "maxLength" : 3,
            "enum" : [ "000", "001", "002", "003", "004" ],
            "description" : "Value Descriptions:\n * `\"000\"` - 'N/A - 0%'\n * `\"001\"` - 'ReteFuente General - 1.5%'\n * `\"002\"` - 'ReteFuente Exemption A - 1%'\n * `\"003\"` - 'ReteFuente Exemption B - 0.5%'\n * `\"004\"` - 'ReteFuente Exemption C - 0.1%'\n",
            "example" : "000"
          },
          "subgroupWithholdVATTariffId" : {
            "type" : "string",
            "maxLength" : 3,
            "enum" : [ "005", "006" ],
            "description" : "Value Descriptions:\n * `\"005\"` - 'RetelVA - 15%'\n * `\"006\"` - 'RetelVA - 0%'\n",
            "example" : "005"
          },
          "subgroupLegalForm" : {
            "type" : "string",
            "maxLength" : 4,
            "example" : "LF2",
            "enum" : [ "LF2", "LF43", "LF1", "LF48", "LF12", "LF45", "LF47", "LF13", "LF46", "LF41", "LF16", "LF30", "LF10", "LF44", "LF17", "LF9", "LF39", "LF8" ],
            "description" : "Value Descriptions:\n * `\"LF2\"` - 'ANONIMA / STOCK CORPORATION - Sociedad mercantil con personalidad jurídica en la que el capital, dividido en acciones, está integrado por las aportaciones de los socios que no responden personalmente de las deudas sociales.''\n * `\"LF43\"` - 'SIN ANIMO DE LUCRO / NON-PROFIT COMPAN - Las Entidades Sin Ánimo de Lucro son personas jurídicas que se constituyen por la voluntad de asociación o creación de una o más personas (naturales o jurídicas) para realizar actividades en beneficio de asociados, terceras personas o comunidad en general. Las ESALES no persiguen el reparto de utilidades entre sus miembros.'\n * `\"LF1\"` - 'LIMITADA / LIMITED PARTNERSHIP -  Sociedad mercantil con personalidad jurídica cuyo capital está dividido en participaciones iguales, acumulables e indivisibles, que no pueden incorporarse a títulos negociables ni denominarse acciones y en la que los socios no responden personalmente por las deudas sociales.''\n * `\"LF48\"` - 'PERSONA NATURAL / NATURAL PERSON  - Persona Natural es una persona humana que ejerce derechos y cumple obligaciones a título personal. Al constituir una empresa como Persona Natural, la persona asume a título personal todas obligaciones de la empresa.'\n * `\"LF12\"` - 'COMANDITA SIMPLE / LIMITED PARTNERSHIP  - La Sociedad Comanditaria Simple es una sociedad de carácter personalista, en la que coexisten socios colectivos que aportan trabajo y, que pueden aportar o no, capital y socios comanditarios que sólo aportan capital, y que se dedica a la explotación del objeto social en nombre colectivo.'\n * `\"LF45\"` - 'COMANDITA POR ACCIONES / JOINT-STOCK PARTNERSHIP -  La Sociedad Comanditaria por Acciones es una sociedad capitalista cuyo capital social está dividido en acciones, que se formará por las aportaciones de los socios, uno de los cuales, al menos, se encargará de la administración de la sociedad y responderá personalmente de las deudas sociales como socio colectivo, mientras que los socios comanditarios no tendrán esa responsabilidad.'\n * `\"LF47\"` - 'COMANDITA SIMPLE / LIMITED PARTNERSHIP  - La Sociedad Comanditaria Simple es una sociedad de carácter personalista, en la que coexisten socios colectivos que aportan trabajo y, que pueden aportar o no, capital y socios comanditarios que sólo aportan capital, y que se dedica a la explotación del objeto social en nombre colectivo.'\n * `\"LF13\"` - 'COMANDITA POR ACCIONES / JOINT-STOCK PARTNERSHIP  - La Sociedad Comanditaria por Acciones es una sociedad capitalista cuyo capital social está dividido en acciones, que se formará por las aportaciones de los socios, uno de los cuales, al menos, se encargará de la administración de la sociedad y responderá personalmente de las deudas sociales como socio colectivo, mientras que los socios comanditarios no tendrán esa responsabilidad.'\n * `\"LF46\"` - 'EMPRESA UNIPERSONAL / ONE-MAN COMPANY - Es un emprendimiento empresarial que puedo ser realizado de forma individual, sin necesidad de construir una sociedad. Esta no posee personería jurídica, y el titular de la empresa responde personal e ilimitadamente por las obligaciones de la misma'\n * `\"LF41\"` - 'SOCIEDAD EXTRANJERA / FOREIGN CORPORATION  - Son extranjeras las sociedades constituidas conforme a la ley de otro país y con domicilio principal en el exterior'\n * `\"LF16\"` - 'EMPRESAS ASOCIATIVAS DE TRABAJ / ASSOCIATIVE COMPANY  - Son organizaciones económicas productivas, cuyos asociados aportan su capacidad laboral, por tiempo indefinido y algunos además entregan al servicio de la organización una tecnología o destreza, u otros activos necesarios para el cumplimiento de los objetivos de la empresa'\n * `\"LF30\"` - 'SOCIEDAD POR ACCIÓN SIMPLIFICA / JOINT-STOCK COMPANY  - La Sociedad por Acciones Simplificada (SAS) es una sociedad de capitales constituida por una o varias personas naturales o jurídicas que, luego de la inscripción en el registro mercantil, se constituye en una persona jurídica distinta de su accionista o sus accionistas, y en cual los socios sólo serán responsables hasta el monto de sus aporte'\n * `\"LF10\"` - 'SOCIEDAD ANONIMA UNIPERSONAL / ONE PERSON STOCK CORPORATION  - Aquella en que la totalidad de las acciones o participaciones sociales en que se divide el capital social pertenecen a un único socio, de manera originaria o sobrevenida, teniendo en cuenta que se consideran propiedad de dicho socio único aquellas que pertenecen a la sociedad'\n * `\"LF44\"` - 'Colectiva / Business partnership -  La sociedad colectiva es una sociedad personalista que desarrolla una actividad mercantil bajo una razón social, con la especialidad que del cumplimiento de las deudas sociales responden de forma subsidiaria todos los socios personal, ilimitada y solidariamente.'\n * `\"LF17\"` - 'Asociación Civil / Civil Association  - Una asociación civil es una organización privada que dispone de personería jurídica y que no tiene afán lucrativo. Estas asociaciones se componen de personas físicas que trabajan en conjunto con un fin social, educativo, cultural o de otro tipo'\n * `\"LF9\"` - 'Sociedades Agrarias de transformación / Agrarian Transformation society - Las Sociedades Agrarias de Transformación son Sociedades civiles de finalidad económico-social en orden a la producción, transformación y comercialización de productos agrícolas, ganaderos, forestales, la realización de mejoras en el medio rural, promoción y desarrollo agrario y la prestación de servicios comunes que sirvan a aquella finalidad'\n * `\"LF39\"` - 'Consorcio / Consortium  - Cuando dos o más personas en forma conjunta presentan una misma propuesta para la adjudicación, celebración y ejecución de un contrato, respondiendo solidariamente por todas y cada una de las obligaciones derivadas de la propuesta y del contrato. En consecuencia, las actuaciones, hechos y omisiones que se presenten en desarrollo de la propuesta y del contrato, afectarán a todos los miembros que lo conforman'\n * `\"LF8\"` - 'Unión Temporal / Temporary union  - Cuando dos o más personas en forma conjunta presentan una misma propuesta para la adjudicación, celebración y ejecución de un contrato, respondiendo solidariamente por el cumplimiento total de la propuesta y del objeto contratado, pero las sanciones por el incumplimiento de las obligaciones derivadas de la propuesta y del contrato se impondrán de acuerdo con la participación en la ejecución de cada uno de los miembros de la unión temporal.'\n"
          },
          "omnipayLanguage" : {
            "type" : "string",
            "maxLength" : 7,
            "enum" : [ "Spanish" ],
            "description" : "Needed for OPY"
          },
          "subgroupMunicipalityId" : {
            "$ref" : "#/components/schemas/municipalityId"
          },
          "subgroupCountyId" : {
            "$ref" : "#/components/schemas/countyId"
          },
          "first_name" : {
            "type" : "string",
            "maxLength" : 35,
            "example" : "Juan",
            "description" : "first_name and last_name have a combined maximum length of 35 characters."
          },
          "last_name" : {
            "type" : "string",
            "maxLength" : 35,
            "example" : "Romano",
            "description" : "first_name and last_name have a combined maximum length of 35 characters."
          },
          "email" : {
            "type" : "string",
            "maxLength" : 60,
            "example" : "merchant@merchantwebsite.com"
          },
          "phone" : {
            "type" : "string",
            "maxLength" : 15,
            "example" : "571234567890"
          },
          "address1" : {
            "type" : "string",
            "maxLength" : 35,
            "description" : "Used for Salesforce",
            "example" : "Cl. 25 #51-33"
          },
          "city" : {
            "type" : "string",
            "maxLength" : 13,
            "description" : "Used for VAPP as City_Url_Phonev(max 13 characters). Needed for OPY",
            "example" : "Medellin"
          },
          "state" : {
            "type" : "string",
            "maxLength" : 2,
            "example" : "AN"
          },
          "zip" : {
            "type" : "string",
            "maxLength" : 20,
            "example" : "00000",
            "description" : "Used for Salesforce, can be defaulted to 00000"
          },
          "country" : {
            "type" : "string",
            "maxLength" : 3,
            "example" : "COL",
            "description" : "Used for Salesforce"
          },
          "recordType" : {
            "type" : "string",
            "maxLength" : 4,
            "example" : "Lead",
            "description" : "Bancolombia to always enter Lead"
          },
          "agentEmail" : {
            "type" : "string",
            "maxLength" : 60,
            "example" : "agent@somesite.com",
            "description" : "This is needed by diligence"
          },
          "typeOfBusiness" : {
            "type" : "string",
            "maxLength" : 100,
            "example" : "Corporation"
          },
          "eCommerceInd" : {
            "$ref" : "#/components/schemas/eCommerceInd"
          },
          "settlementMethodId" : {
            "$ref" : "#/components/schemas/settlementMethodId"
          },
          "postingTariffId" : {
            "$ref" : "#/components/schemas/postingTariffId"
          },
          "clientTariffId" : {
            "$ref" : "#/components/schemas/clientTariffId"
          },
          "mastercardPayFacID" : {
            "type" : "string",
            "maxLength" : 11,
            "example" : "9812387"
          },
          "visaPayFacID" : {
            "type" : "string",
            "maxLength" : 11,
            "example" : "9812388"
          },
          "vatRegNo" : {
            "type" : "string",
            "maxLength" : 11,
            "minLength" : 4,
            "example" : "98761238439"
          },
          "uniqRefId" : {
            "type" : "string",
            "maxLength" : 10,
            "example" : "98761238439"
          },
          "salesAgentCode" : {
            "type" : "string",
            "maxLength" : 8,
            "description" : "Needed for OPY"
          },
          "businessOwner" : {
            "type" : "string",
            "maxLength" : 8,
            "description" : "Needed for OPY"
          },
          "serviceIdToMerchantTariffIdList" : {
            "$ref" : "#/components/schemas/serviceIdToMerchantTariffIdList"
          },
          "clientReferences" : {
            "$ref" : "#/components/schemas/clientReferences"
          },
          "propertyFieldList" : {
            "$ref" : "#/components/schemas/propertyFieldList"
          },
          "pricingDetails" : {
            "$ref" : "#/components/schemas/pricingDetails"
          },
          "pricingOptions" : {
            "type" : "object",
            "required" : [ "companyId", "transactionInfo" ],
            "properties" : {
              "companyId" : {
                "type" : "number",
                "format" : "int64",
                "maxLength" : 5,
                "enum" : [ 10222 ],
                "example" : 10222
              },
              "transactionInfo" : {
                "type" : "object",
                "required" : [ "mcc", "annualVolume", "creditCardVolume", "averageTicket", "highestTicket" ],
                "properties" : {
                  "mccTypes" : {
                    "type" : "string",
                    "maxLength" : 240,
                    "description" : "default it to ABCD for now.",
                    "example" : "ABCD"
                  },
                  "mcc" : {
                    "type" : "string",
                    "maxLength" : 4,
                    "description" : "Standard Merchant Category Code",
                    "example" : "4511"
                  },
                  "annualVolume" : {
                    "type" : "number",
                    "format" : "double",
                    "maxLength" : 16,
                    "minimum" : -9999999999999999,
                    "maximum" : 9999999999999999
                  },
                  "creditCardVolume" : {
                    "type" : "number",
                    "format" : "double",
                    "maxLength" : 18,
                    "minimum" : -999999999999999999,
                    "maximum" : 999999999999999999
                  },
                  "averageTicket" : {
                    "type" : "number",
                    "format" : "double",
                    "maxLength" : 18,
                    "minimum" : -999999999999999999,
                    "maximum" : 999999999999999999
                  },
                  "highestTicket" : {
                    "type" : "number",
                    "format" : "double",
                    "maxLength" : 18,
                    "minimum" : -999999999999999999,
                    "maximum" : 999999999999999999
                  },
                  "category" : {
                    "type" : "string",
                    "maxLength" : 10,
                    "description" : "Default it to RETAIL",
                    "example" : "RETAIL"
                  }
                }
              }
            }
          },
          "shippingAddress" : {
            "type" : "array",
            "items" : {
              "properties" : {
                "company_name" : {
                  "type" : "string",
                  "maxLength" : 35,
                  "description" : "DBA Name",
                  "example" : "Postobon Soda"
                },
                "firstname" : {
                  "type" : "string",
                  "maxLength" : 20,
                  "description" : "firstname and lastname have a combined max length of 20",
                  "example" : "Albert"
                },
                "lastname" : {
                  "type" : "string",
                  "maxLength" : 20,
                  "description" : "firstname and lastname have a combined max length of 20",
                  "example" : "Postobas"
                },
                "address1" : {
                  "type" : "string",
                  "maxLength" : 40,
                  "example" : "Cl. 25 #51-33"
                },
                "address2" : {
                  "type" : "string",
                  "maxLength" : 40,
                  "example" : ""
                },
                "city" : {
                  "type" : "string",
                  "maxLength" : 30,
                  "example" : "Medellin"
                },
                "zip" : {
                  "type" : "string",
                  "maxLength" : 10,
                  "example" : "00000"
                },
                "state" : {
                  "type" : "string",
                  "maxLength" : 3,
                  "example" : "AN"
                },
                "email" : {
                  "type" : "string",
                  "maxLength" : 60,
                  "example" : "receiving@postobon.com"
                },
                "email2" : {
                  "type" : "string",
                  "maxLength" : 60,
                  "example" : "receiving2@postobon.com"
                },
                "phone" : {
                  "type" : "string",
                  "maxLength" : 15,
                  "example" : "3048856711"
                },
                "productstoShip" : {
                  "type" : "array",
                  "items" : {
                    "properties" : {
                      "prodId" : {
                        "type" : "string",
                        "maxLength" : 50,
                        "example" : "012938"
                      },
                      "term" : {
                        "type" : "string",
                        "maxLength" : 10,
                        "example" : "O"
                      }
                    }
                  }
                }
              }
            }
          },
          "cardNotPresent" : {
            "type" : "number",
            "enum" : [ 0, 1 ],
            "description" : "Default value 1",
            "example" : 1
          },
          "cartDetails" : {
            "type" : "object",
            "properties" : {
              "data" : {
                "type" : "array",
                "items" : {
                  "properties" : {
                    "id" : {
                      "type" : "string",
                      "maxLength" : 50,
                      "example" : "100001"
                    },
                    "name" : {
                      "type" : "string",
                      "maxLength" : 240,
                      "example" : "Vx520 Duo"
                    },
                    "price" : {
                      "type" : "number",
                      "format" : "double",
                      "maxLength" : 14,
                      "example" : 90
                    },
                    "term" : {
                      "type" : "string",
                      "maxLength" : 10,
                      "example" : "O"
                    },
                    "qty" : {
                      "type" : "number",
                      "format" : "int32",
                      "maxLength" : 10,
                      "example" : 1
                    },
                    "productType" : {
                      "type" : "string",
                      "maxLength" : 20,
                      "example" : "Terminal"
                    },
                    "category" : {
                      "type" : "string",
                      "maxLength" : 10,
                      "example" : "RETAIL"
                    }
                  }
                },
                "example" : [ {
                  "id" : 100001,
                  "name" : "Vx520 Duo",
                  "price" : 90,
                  "term" : "O",
                  "qty" : 1,
                  "productType" : "Terminal",
                  "category" : "RETAIL"
                }, {
                  "id" : 10013,
                  "name" : "Visa/Mastercard",
                  "price" : 0,
                  "term" : "P",
                  "qty" : 1,
                  "productType" : "ACQUIRING",
                  "category" : "RETAIL"
                } ]
              },
              "amount" : {
                "type" : "number",
                "format" : "double",
                "maxLength" : 14,
                "example" : 90
              },
              "shipping_amount" : {
                "type" : "number",
                "format" : "double",
                "maxLength" : 14,
                "example" : 19.95
              },
              "tax" : {
                "type" : "number",
                "format" : "double",
                "maxLength" : 7,
                "example" : 1.8
              },
              "taxPercent" : {
                "type" : "number",
                "format" : "double",
                "maxLength" : 7,
                "example" : 0.08
              },
              "total" : {
                "type" : "number",
                "format" : "double",
                "maxLength" : 7,
                "example" : 111.75
              },
              "status" : {
                "type" : "number",
                "format" : "int32",
                "maxLength" : 1,
                "enum" : [ 0, 1 ],
                "description" : "Default to 0",
                "example" : 0
              },
              "purchaseEnabled" : {
                "type" : "boolean",
                "description" : "Default to true",
                "example" : true
              },
              "total_qty" : {
                "type" : "number",
                "format" : "int32",
                "maxLength" : 10,
                "description" : "Default to 1",
                "example" : 1
              },
              "numberofLocations" : {
                "type" : "number",
                "format" : "int32",
                "maxLength" : 1,
                "description" : "Used internally by FDMP",
                "example" : 1
              },
              "shipping_option_id" : {
                "type" : "number",
                "format" : "int32",
                "maxLength" : 1,
                "description" : "Send default 1",
                "example" : 1
              }
            }
          }
        }
      },
      "OrderCreationResponse" : {
        "type" : "object",
        "required" : [ "orderId" ],
        "properties" : {
          "orderId" : {
            "type" : "string",
            "maxLength" : 6,
            "example" : "JeB6j"
          }
        }
      },
      "BusinessInformationRequest" : {
        "type" : "object",
        "required" : [ "ownerInformation", "merchantInformation" ],
        "properties" : {
          "ownerInformation" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "sequenceNo", "contactType", "firstName", "lastName", "gender", "ssn", "nationalIdType", "nationalIdValue", "passportNumber", "passportCountryCode", "dateofBirth", "title", "percentOwned", "contactInformation" ],
              "properties" : {
                "sequenceNo" : {
                  "type" : "number",
                  "format" : "int32",
                  "maxLength" : 2,
                  "minimum" : 1,
                  "example" : 1
                },
                "contactType" : {
                  "type" : "string",
                  "maxLength" : 30,
                  "enum" : [ "OWNER" ]
                },
                "firstName" : {
                  "type" : "string",
                  "maxLength" : 30,
                  "example" : "Juan"
                },
                "lastName" : {
                  "type" : "string",
                  "maxLength" : 30,
                  "example" : "Romano"
                },
                "gender" : {
                  "type" : "string",
                  "maxLength" : 1,
                  "example" : "M",
                  "enum" : [ "M", "F" ]
                },
                "ssn" : {
                  "type" : "string",
                  "maxLength" : 11,
                  "description" : "BanColombia to pass National ID #",
                  "example" : "12345678901"
                },
                "nationalIdType" : {
                  "type" : "string",
                  "example" : "CC",
                  "maxLength" : 3,
                  "enum" : [ "CC", "CE", "NIT", "TI" ],
                  "description" : "Value Descriptions:\n * `\"CC\"` - Citizen ID\n * `\"CE\"` - Foreigner\n * `\"NIT\"` - Company\n * `\"TI\"` - Under 18 years of age\n"
                },
                "nationalIdValue" : {
                  "type" : "string",
                  "maxLength" : 20,
                  "enum" : [ "1", "2" ],
                  "description" : "Value is 2 for NIT and 1 for CC, CE, TI",
                  "example" : "1"
                },
                "passportNumber" : {
                  "type" : "string",
                  "maxLength" : 30,
                  "description" : "Default value should be \"0000000000\" ( 10 zeroes)",
                  "example" : "0000000000"
                },
                "passportCountryCode" : {
                  "type" : "string",
                  "maxLength" : 3,
                  "description" : "Default value should be \"COL\"",
                  "example" : "COL"
                },
                "dateofBirth" : {
                  "type" : "string",
                  "maxLength" : 10,
                  "description" : "YYYY-MM-DD",
                  "example" : "1985-10-07"
                },
                "title" : {
                  "type" : "string",
                  "maxLength" : 200,
                  "enum" : [ "Mr", "Mrs", "Miss" ],
                  "example" : "Mr"
                },
                "percentOwned" : {
                  "type" : "number",
                  "format" : "int32",
                  "maxLength" : 3,
                  "minimum" : 0,
                  "maximum" : 100,
                  "description" : "Must = 100% of all owners submitted",
                  "example" : 100
                },
                "contactInformation" : {
                  "type" : "object",
                  "required" : [ "contactType", "address1", "city", "state", "postalCode", "country", "phone", "email" ],
                  "description" : "For BanColombia use the primary contact info for all owners",
                  "properties" : {
                    "contactType" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "example" : "OWNER",
                      "description" : "This needs to be always OWNER for FDMP."
                    },
                    "address1" : {
                      "type" : "string",
                      "maxLength" : 35,
                      "example" : "Cl. 52 #42"
                    },
                    "city" : {
                      "type" : "string",
                      "maxLength" : 35,
                      "example" : "Medellin"
                    },
                    "state" : {
                      "type" : "string",
                      "maxLength" : 2,
                      "minLength" : 2,
                      "example" : "AN"
                    },
                    "postalCode" : {
                      "type" : "string",
                      "maxLength" : 10,
                      "example" : "00000"
                    },
                    "country" : {
                      "type" : "string",
                      "maxLength" : 3,
                      "example" : "COL"
                    },
                    "phone" : {
                      "type" : "string",
                      "maxLength" : 15,
                      "example" : "3047768293"
                    },
                    "email" : {
                      "type" : "string",
                      "maxLength" : 60,
                      "example" : "Jromano@postoboncorp.com"
                    }
                  }
                },
                "driverLicenceNo" : {
                  "type" : "string",
                  "maxLength" : 15,
                  "description" : "Default to 000000 or FM-1101",
                  "example" : "000000"
                },
                "dlStateIssued" : {
                  "type" : "string",
                  "maxLength" : 2,
                  "example" : "AN",
                  "description" : "Default to AN"
                }
              }
            }
          },
          "merchantInformation" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "sequenceNo", "legalName", "taxId", "yearsInBusiness", "taxFilingName", "vatRegNo", "legalFormForDiligence", "url", "withholdTaxTariffId", "withholdVATTariffId", "countyId", "municipalityId", "regionalTax", "contactInformation", "serviceIdToMerchantTariffIdList" ],
              "properties" : {
                "sequenceNo" : {
                  "type" : "number",
                  "format" : "int32",
                  "maxLength" : 2,
                  "minimum" : 1,
                  "example" : 1
                },
                "category" : {
                  "type" : "string",
                  "maxLength" : 10,
                  "description" : "Default it to SERVICES",
                  "example" : "Services"
                },
                "legalName" : {
                  "type" : "string",
                  "maxLength" : 35,
                  "example" : "Postonbon Subsidiary Antioquia Inc."
                },
                "taxId" : {
                  "type" : "string",
                  "maxLength" : 11,
                  "description" : "BanColombia to pass National ID # for the business",
                  "example" : "76584930192"
                },
                "yearsInBusiness" : {
                  "type" : "string",
                  "maxLength" : 10,
                  "description" : "Business since (year) Format YYYY-MM-DD",
                  "example" : "1904-10-11"
                },
                "organizationType" : {
                  "type" : "string",
                  "maxLength" : 20,
                  "description" : "Default it to Sole Propietorship",
                  "example" : "Sole Proprietorship"
                },
                "stateOfIncorporation" : {
                  "type" : "string",
                  "maxLength" : 2,
                  "example" : "AN",
                  "description" : "Sent to diligence as INC_STATE, must be of length 2"
                },
                "taxFilingName" : {
                  "type" : "string",
                  "maxLength" : 240,
                  "example" : "Postonbon Antioquia"
                },
                "foreignEntityOption" : {
                  "type" : "string",
                  "maxLength" : 1,
                  "description" : "Default it to A",
                  "example" : "A"
                },
                "tinRequestedGuid" : {
                  "type" : "string",
                  "maxLength" : 1,
                  "description" : "Default to empty string \"\"",
                  "example" : ""
                },
                "tinType" : {
                  "type" : "string",
                  "maxLength" : 1,
                  "description" : "Default it to 1",
                  "example" : "1"
                },
                "vatRegNo" : {
                  "type" : "string",
                  "maxLength" : 11,
                  "minLength" : 4,
                  "example" : "98761238439"
                },
                "paymentMethod" : {
                  "type" : "string",
                  "maxLength" : 240,
                  "enum" : [ "000" ],
                  "description" : "Payment method used for omnipay",
                  "example" : "000"
                },
                "legalFormForDiligence" : {
                  "type" : "string",
                  "maxLength" : 240,
                  "example" : "LF2",
                  "enum" : [ "LF2", "LF43", "LF1", "LF48", "LF12", "LF45", "LF47", "LF13", "LF46", "LF41", "LF16", "LF30", "LF10", "LF44", "LF17", "LF9", "LF39", "LF8" ],
                  "description" : "Value Descriptions:\n * `\"LF2\"` - 'ANONIMA / STOCK CORPORATION - Sociedad mercantil con personalidad jurídica en la que el capital, dividido en acciones, está integrado por las aportaciones de los socios que no responden personalmente de las deudas sociales.''\n * `\"LF43\"` - 'SIN ANIMO DE LUCRO / NON-PROFIT COMPAN - Las Entidades Sin Ánimo de Lucro son personas jurídicas que se constituyen por la voluntad de asociación o creación de una o más personas (naturales o jurídicas) para realizar actividades en beneficio de asociados, terceras personas o comunidad en general. Las ESALES no persiguen el reparto de utilidades entre sus miembros.'\n * `\"LF1\"` - 'LIMITADA / LIMITED PARTNERSHIP -  Sociedad mercantil con personalidad jurídica cuyo capital está dividido en participaciones iguales, acumulables e indivisibles, que no pueden incorporarse a títulos negociables ni denominarse acciones y en la que los socios no responden personalmente por las deudas sociales.''\n * `\"LF48\"` - 'PERSONA NATURAL / NATURAL PERSON  - Persona Natural es una persona humana que ejerce derechos y cumple obligaciones a título personal. Al constituir una empresa como Persona Natural, la persona asume a título personal todas obligaciones de la empresa.'\n * `\"LF12\"` - 'COMANDITA SIMPLE / LIMITED PARTNERSHIP  - La Sociedad Comanditaria Simple es una sociedad de carácter personalista, en la que coexisten socios colectivos que aportan trabajo y, que pueden aportar o no, capital y socios comanditarios que sólo aportan capital, y que se dedica a la explotación del objeto social en nombre colectivo.'\n * `\"LF45\"` - 'COMANDITA POR ACCIONES / JOINT-STOCK PARTNERSHIP -  La Sociedad Comanditaria por Acciones es una sociedad capitalista cuyo capital social está dividido en acciones, que se formará por las aportaciones de los socios, uno de los cuales, al menos, se encargará de la administración de la sociedad y responderá personalmente de las deudas sociales como socio colectivo, mientras que los socios comanditarios no tendrán esa responsabilidad.'\n * `\"LF47\"` - 'COMANDITA SIMPLE / LIMITED PARTNERSHIP  - La Sociedad Comanditaria Simple es una sociedad de carácter personalista, en la que coexisten socios colectivos que aportan trabajo y, que pueden aportar o no, capital y socios comanditarios que sólo aportan capital, y que se dedica a la explotación del objeto social en nombre colectivo.'\n * `\"LF13\"` - 'COMANDITA POR ACCIONES / JOINT-STOCK PARTNERSHIP  - La Sociedad Comanditaria por Acciones es una sociedad capitalista cuyo capital social está dividido en acciones, que se formará por las aportaciones de los socios, uno de los cuales, al menos, se encargará de la administración de la sociedad y responderá personalmente de las deudas sociales como socio colectivo, mientras que los socios comanditarios no tendrán esa responsabilidad.'\n * `\"LF46\"` - 'EMPRESA UNIPERSONAL / ONE-MAN COMPANY - Es un emprendimiento empresarial que puedo ser realizado de forma individual, sin necesidad de construir una sociedad. Esta no posee personería jurídica, y el titular de la empresa responde personal e ilimitadamente por las obligaciones de la misma'\n * `\"LF41\"` - 'SOCIEDAD EXTRANJERA / FOREIGN CORPORATION  - Son extranjeras las sociedades constituidas conforme a la ley de otro país y con domicilio principal en el exterior'\n * `\"LF16\"` - 'EMPRESAS ASOCIATIVAS DE TRABAJ / ASSOCIATIVE COMPANY  - Son organizaciones económicas productivas, cuyos asociados aportan su capacidad laboral, por tiempo indefinido y algunos además entregan al servicio de la organización una tecnología o destreza, u otros activos necesarios para el cumplimiento de los objetivos de la empresa'\n * `\"LF30\"` - 'SOCIEDAD POR ACCIÓN SIMPLIFICA / JOINT-STOCK COMPANY  - La Sociedad por Acciones Simplificada (SAS) es una sociedad de capitales constituida por una o varias personas naturales o jurídicas que, luego de la inscripción en el registro mercantil, se constituye en una persona jurídica distinta de su accionista o sus accionistas, y en cual los socios sólo serán responsables hasta el monto de sus aporte'\n * `\"LF10\"` - 'SOCIEDAD ANONIMA UNIPERSONAL / ONE PERSON STOCK CORPORATION  - Aquella en que la totalidad de las acciones o participaciones sociales en que se divide el capital social pertenecen a un único socio, de manera originaria o sobrevenida, teniendo en cuenta que se consideran propiedad de dicho socio único aquellas que pertenecen a la sociedad'\n * `\"LF44\"` - 'Colectiva / Business partnership -  La sociedad colectiva es una sociedad personalista que desarrolla una actividad mercantil bajo una razón social, con la especialidad que del cumplimiento de las deudas sociales responden de forma subsidiaria todos los socios personal, ilimitada y solidariamente.'\n * `\"LF17\"` - 'Asociación Civil / Civil Association  - Una asociación civil es una organización privada que dispone de personería jurídica y que no tiene afán lucrativo. Estas asociaciones se componen de personas físicas que trabajan en conjunto con un fin social, educativo, cultural o de otro tipo'\n * `\"LF9\"` - 'Sociedades Agrarias de transformación / Agrarian Transformation society - Las Sociedades Agrarias de Transformación son Sociedades civiles de finalidad económico-social en orden a la producción, transformación y comercialización de productos agrícolas, ganaderos, forestales, la realización de mejoras en el medio rural, promoción y desarrollo agrario y la prestación de servicios comunes que sirvan a aquella finalidad'\n * `\"LF39\"` - 'Consorcio / Consortium  - Cuando dos o más personas en forma conjunta presentan una misma propuesta para la adjudicación, celebración y ejecución de un contrato, respondiendo solidariamente por todas y cada una de las obligaciones derivadas de la propuesta y del contrato. En consecuencia, las actuaciones, hechos y omisiones que se presenten en desarrollo de la propuesta y del contrato, afectarán a todos los miembros que lo conforman'\n * `\"LF8\"` - 'Unión Temporal / Temporary union  - Cuando dos o más personas en forma conjunta presentan una misma propuesta para la adjudicación, celebración y ejecución de un contrato, respondiendo solidariamente por el cumplimiento total de la propuesta y del objeto contratado, pero las sanciones por el incumplimiento de las obligaciones derivadas de la propuesta y del contrato se impondrán de acuerdo con la participación en la ejecución de cada uno de los miembros de la unión temporal.'\n"
                },
                "url" : {
                  "type" : "string",
                  "maxLength" : 240,
                  "description" : "Required if internet is greater than 0%",
                  "example" : "https://www.postobon.com"
                },
                "withholdTaxTariffId" : {
                  "type" : "string",
                  "maxLength" : 3,
                  "enum" : [ "000", "001", "002", "003", "004" ],
                  "description" : "Value Descriptions:\n * `\"000\"` - 'N/A - 0%'\n * `\"001\"` - 'ReteFuente General - 1.5%'\n * `\"002\"` - 'ReteFuente Exemption A - 1%'\n * `\"003\"` - 'ReteFuente Exemption B - 0.5%'\n * `\"004\"` - 'ReteFuente Exemption C - 0.1%'\n",
                  "example" : "000"
                },
                "withholdVATTariffId" : {
                  "type" : "string",
                  "maxLength" : 3,
                  "enum" : [ "005", "006" ],
                  "description" : "Value Descriptions:\n * `\"005\"` - 'RetelVA - 15%'\n * `\"006\"` - 'RetelVA - 0%'\n",
                  "example" : "005"
                },
                "countyId" : {
                  "$ref" : "#/components/schemas/countyId"
                },
                "municipalityId" : {
                  "$ref" : "#/components/schemas/municipalityId"
                },
                "regionalTax" : {
                  "type" : "string",
                  "maxLength" : 3,
                  "description" : "Need to be sent to OPY for 010 record",
                  "example" : "000"
                },
                "paymentAdviceGeneration" : {
                  "type" : "string",
                  "maxLength" : 240,
                  "example" : "000"
                },
                "paymentDeliveryMethod" : {
                  "type" : "string",
                  "maxLength" : 240,
                  "example" : "000"
                },
                "propertyFieldList" : {
                  "$ref" : "#/components/schemas/propertyFieldList"
                },
                "eCommerceInd" : {
                  "$ref" : "#/components/schemas/eCommerceInd"
                },
                "postingTariffId" : {
                  "$ref" : "#/components/schemas/postingTariffId"
                },
                "clientTariffId" : {
                  "$ref" : "#/components/schemas/clientTariffId"
                },
                "settlementMethodId" : {
                  "$ref" : "#/components/schemas/settlementMethodId"
                },
                "serviceIdToMerchantTariffIdList" : {
                  "$ref" : "#/components/schemas/serviceIdToMerchantTariffIdList"
                },
                "pricingDetails" : {
                  "$ref" : "#/components/schemas/pricingDetails"
                },
                "clientReferences" : {
                  "$ref" : "#/components/schemas/clientReferences"
                },
                "uniqRefId" : {
                  "type" : "string",
                  "maxLength" : 10,
                  "description" : "This is the legacy \"OurReference\" field at the merchant level."
                },
                "contactInformation" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "required" : [ "contactType", "address1", "city", "state", "postalCode", "country", "phone", "email", "contactName" ],
                    "properties" : {
                      "contactType" : {
                        "type" : "string",
                        "enum" : [ "SUBGROUP_CORPORATE", "SUBGROUP_STANDARD", "TRADING", "BILLING", "PRINCIPAL", "STANDARD", "DISPUTE", "Corporate (Legal)" ],
                        "example" : "STANDARD"
                      },
                      "address1" : {
                        "type" : "string",
                        "maxLength" : 35,
                        "example" : "Cl. 25 #51-33"
                      },
                      "city" : {
                        "type" : "string",
                        "maxLength" : 35,
                        "example" : "Medellin"
                      },
                      "state" : {
                        "type" : "string",
                        "maxLength" : 2,
                        "example" : "AN"
                      },
                      "postalCode" : {
                        "type" : "string",
                        "maxLength" : 10,
                        "example" : "00000"
                      },
                      "country" : {
                        "type" : "string",
                        "maxLength" : 3,
                        "example" : "COL"
                      },
                      "phone" : {
                        "type" : "string",
                        "maxLength" : 15,
                        "example" : "3048826637"
                      },
                      "email" : {
                        "type" : "string",
                        "maxLength" : 60,
                        "example" : "standardCorpContact@postobon.com"
                      },
                      "contactName" : {
                        "type" : "string",
                        "maxLength" : 75,
                        "example" : "Juan Jose"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BusinessInformationResponse" : {
        "type" : "object",
        "required" : [ "orderId" ],
        "properties" : {
          "orderId" : {
            "type" : "string",
            "maxLength" : 6,
            "example" : "JeB6j"
          }
        }
      },
      "GetLocationResponse" : {
        "type" : "object",
        "required" : [ "hashOrderId", "hasThirdPartyBillableProducts", "locationInformation" ],
        "properties" : {
          "hashOrderId" : {
            "type" : "string",
            "maxLength" : 6,
            "example" : "JeB6j"
          },
          "hasThirdPartyBillableProducts" : {
            "type" : "boolean"
          },
          "locationInformation" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "subCategory", "merchantId", "dbaName", "mccDescription", "mcc", "annualVolume", "isPrimaryLocation", "averageTicket", "category", "faceToFace", "phoneOrEmail", "internet", "address1", "address2", "city", "state", "zip", "bankInformation", "equipmentLocation", "siteSurvey" ],
              "properties" : {
                "subCategory" : {
                  "type" : "string",
                  "maxLength" : 10
                },
                "merchantId" : {
                  "type" : "number",
                  "format" : "int64",
                  "maxLength" : 8,
                  "example" : 149003
                },
                "dbaName" : {
                  "type" : "string",
                  "maxLength" : 22,
                  "example" : "Postobon Sodas"
                },
                "mccDescription" : {
                  "type" : "string"
                },
                "mcc" : {
                  "type" : "string",
                  "maxLength" : 4,
                  "example" : "4511"
                },
                "annualVolume" : {
                  "type" : "number",
                  "format" : "double",
                  "maxLength" : 18,
                  "description" : "12 Integer and 6 decimals"
                },
                "isPrimaryLocation" : {
                  "type" : "boolean"
                },
                "averageTicket" : {
                  "type" : "number",
                  "format" : "double",
                  "maxLength" : 18,
                  "description" : "12 Integer and 6 decimals"
                },
                "highestTicket" : {
                  "type" : "number",
                  "format" : "double",
                  "minimum" : -999999999999999999,
                  "maximum" : 999999999999999999,
                  "maxLength" : 18,
                  "description" : "This will be removed from post location in the future, and then it will be removed from GET locations too."
                },
                "category" : {
                  "type" : "string",
                  "maxLength" : 10
                },
                "faceToFace" : {
                  "type" : "string",
                  "maxLength" : 3
                },
                "phoneOrEmail" : {
                  "type" : "string",
                  "maxLength" : 3
                },
                "internet" : {
                  "type" : "string",
                  "maxLength" : 3
                },
                "rollupIndicator" : {
                  "type" : "string",
                  "maxLength" : 240,
                  "description" : "Default to 2. This will be removed from post location in the future, and then it will be removed from GET locations too."
                },
                "address1" : {
                  "type" : "string",
                  "maxLength" : 35
                },
                "address2" : {
                  "type" : "string",
                  "maxLength" : 35
                },
                "city" : {
                  "type" : "string",
                  "maxLength" : 35
                },
                "state" : {
                  "type" : "string",
                  "maxLength" : 2,
                  "example" : "AN"
                },
                "zip" : {
                  "type" : "string",
                  "maxLength" : 20
                },
                "bankInformation" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "required" : [ "instName", "abaNumber", "accountNumber", "deposits", "nonBankAdjustments", "depositAdjustments", "chargebackReversals", "interchangeAssessments", "discountServices", "fees", "financialAdjustments", "chargebacks" ],
                    "properties" : {
                      "instName" : {
                        "type" : "string",
                        "maxLength" : 40,
                        "enum" : [ "Bancolombia" ]
                      },
                      "abaNumber" : {
                        "type" : "string",
                        "maxLength" : 30
                      },
                      "accountNumber" : {
                        "type" : "string",
                        "maxLength" : 35
                      },
                      "deposits" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1
                      },
                      "nonBankAdjustments" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1
                      },
                      "depositAdjustments" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1
                      },
                      "chargebackReversals" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1
                      },
                      "interchangeAssessments" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1
                      },
                      "discountServices" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1
                      },
                      "fees" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1
                      },
                      "financialAdjustments" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1
                      },
                      "chargebacks" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1
                      }
                    }
                  }
                },
                "equipmentLocation" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "required" : [ "lineItemId", "configurableLineItemId", "attributes" ],
                    "properties" : {
                      "lineItemId" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 10
                      },
                      "configurableLineItemId" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 10
                      },
                      "attributes" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "required" : [ "attributeName", "attributeValue", "attributeDomain" ],
                          "properties" : {
                            "attributeName" : {
                              "type" : "string",
                              "maxLength" : 50
                            },
                            "attributeValue" : {
                              "type" : "string",
                              "maxLength" : 240
                            },
                            "attributeDomain" : {
                              "type" : "string",
                              "maxLength" : 20
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "siteSurvey" : {
                  "type" : "object",
                  "required" : [ "siteVisitation", "deliveryTimeFrame_0_To_7", "deliveryTimeFrame_8_To_14", "deliveryTimeFrame_15_To_30", "deliveryTimeFrame_Over_30", "separateRefundPolicy", "createdDate", "productsServicesSold", "onSiteVisitPerformed" ],
                  "properties" : {
                    "siteVisitation" : {
                      "type" : "string",
                      "maxLength" : 1
                    },
                    "deliveryTimeFrame_0_To_7" : {
                      "type" : "string",
                      "maxLength" : 3
                    },
                    "deliveryTimeFrame_8_To_14" : {
                      "type" : "string",
                      "maxLength" : 3
                    },
                    "deliveryTimeFrame_15_To_30" : {
                      "type" : "string",
                      "maxLength" : 3
                    },
                    "deliveryTimeFrame_Over_30" : {
                      "type" : "string",
                      "maxLength" : 3
                    },
                    "returnPolicy" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "This will be removed from post location in the future, and then it will be removed from GET locations too"
                    },
                    "separateRefundPolicy" : {
                      "type" : "string",
                      "maxLength" : 3
                    },
                    "createdDate" : {
                      "type" : "string",
                      "description" : "format yyyy-MM-dd HH:mm:ss"
                    },
                    "productsServicesSold" : {
                      "type" : "string",
                      "maxLength" : 30
                    },
                    "onSiteVisitPerformed" : {
                      "type" : "string",
                      "maxLength" : 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostLocationRequest" : {
        "type" : "object",
        "properties" : {
          "locationInformation" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "dbaName", "merchantId", "mcc", "isPrimaryLocation", "faceToFace", "phoneOrEMail", "internet", "percentChipEnabled", "bankInformation", "siteSurvey", "address1", "city", "state", "zip", "country", "contactPhone" ],
              "properties" : {
                "dbaName" : {
                  "type" : "string",
                  "maxLength" : 22,
                  "example" : "Postobon Sodas"
                },
                "merchantId" : {
                  "type" : "number",
                  "format" : "int64",
                  "maxLength" : 30,
                  "example" : 149003
                },
                "averageTicket" : {
                  "type" : "number",
                  "format" : "double",
                  "maxLength" : 18
                },
                "mccDescription" : {
                  "type" : "string",
                  "maxLength" : 20,
                  "description" : "Default it to ABCD for now, since diligence do not need this field",
                  "example" : "Travel and Transportation"
                },
                "mcc" : {
                  "type" : "string",
                  "maxLength" : 4,
                  "example" : "4511"
                },
                "annualVolume" : {
                  "type" : "number",
                  "format" : "double",
                  "maxLength" : 16
                },
                "highestTicket" : {
                  "type" : "number",
                  "format" : "double",
                  "maxLength" : 18
                },
                "isPrimaryLocation" : {
                  "type" : "boolean",
                  "description" : "Should be true for primary location and false for other locations"
                },
                "stateInscription" : {
                  "type" : "string",
                  "maxLength" : 2,
                  "example" : "AN"
                },
                "cityInscription" : {
                  "type" : "string",
                  "maxLength" : 35,
                  "example" : "Medellin"
                },
                "contactTime" : {
                  "type" : "string",
                  "maxLength" : 5,
                  "description" : "Time when TMS (AvERP) can call Merchant location. time format HH:MM",
                  "example" : "12:00"
                },
                "faceToFace" : {
                  "type" : "string",
                  "maxLength" : 3,
                  "example" : "100"
                },
                "phoneOrEmail" : {
                  "type" : "string",
                  "maxLength" : 3,
                  "example" : "0"
                },
                "internet" : {
                  "type" : "string",
                  "maxLength" : 3,
                  "example" : "0"
                },
                "percentChipEnabled" : {
                  "type" : "string",
                  "maxLength" : 3,
                  "description" : "% of faceToFace transactions with cards that are chip enabled",
                  "example" : "0"
                },
                "businessCurrentlyOpenToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "Should be either Y or N",
                  "example" : "Y"
                },
                "businessClosedReasonToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "Default to N",
                  "example" : "N"
                },
                "businessOpenDaysPerWeekToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "Days of the week that the business runs",
                  "example" : "7"
                },
                "businessOpenTimeMondayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "08:00"
                },
                "businessOpenTimeTuesdayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "08:00"
                },
                "businessOpenTimeWednesdayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "08:00"
                },
                "businessOpenTimeThursdayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "08:00"
                },
                "businessOpenTimeFridayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "08:00"
                },
                "businessOpenTimeSaturdayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format"
                },
                "businessOpenTimeSundayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "08:00"
                },
                "businessCloseTimeMondayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "17:00"
                },
                "businessCloseTimeTuesdayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "17:00"
                },
                "businessCloseTimeWednesdayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "17:00"
                },
                "businessCloseTimeThursdayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "17:00"
                },
                "businessCloseTimeFridayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "17:00"
                },
                "businessCloseTimeSaturdayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "19:00"
                },
                "businessCloseTimeSundayToDiligence" : {
                  "type" : "string",
                  "maxLength" : 50,
                  "description" : "use 24 hour format",
                  "example" : "15:00"
                },
                "rollupIndicator" : {
                  "type" : "string",
                  "maxLength" : 2,
                  "description" : "Default to 2",
                  "example" : "2"
                },
                "category" : {
                  "type" : "string",
                  "maxLength" : 10,
                  "description" : "Default to SERVICES",
                  "example" : "SERVICES"
                },
                "address1" : {
                  "type" : "string",
                  "maxLength" : 35,
                  "example" : "Cl. 25 #51-33"
                },
                "address2" : {
                  "type" : "string",
                  "maxLength" : 35
                },
                "address3" : {
                  "type" : "string",
                  "maxLength" : 35
                },
                "city" : {
                  "type" : "string",
                  "maxLength" : 35,
                  "example" : "Medellin"
                },
                "state" : {
                  "type" : "string",
                  "maxLength" : 2,
                  "example" : "AN"
                },
                "zip" : {
                  "type" : "string",
                  "maxLength" : 20,
                  "example" : "00000"
                },
                "country" : {
                  "type" : "string",
                  "maxLength" : 3,
                  "example" : "COL"
                },
                "contactPhone" : {
                  "type" : "string",
                  "maxLength" : 15,
                  "example" : "571234567890"
                },
                "bankInformation" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "required" : [ "abaNumber", "accountTypeId", "accountNumber", "clearingEntity", "accountNumberDR", "clearingEntityDR" ],
                    "properties" : {
                      "instName" : {
                        "type" : "string",
                        "maxLength" : 40,
                        "example" : "BANCOLOMBIA"
                      },
                      "abaNumber" : {
                        "type" : "string",
                        "maxLength" : 30,
                        "example" : "122100024"
                      },
                      "accountTypeId" : {
                        "type" : "string",
                        "enum" : [ "011", "010", "005", "004", "003", "002" ],
                        "description" : "Value Descriptions:\n * `\"011\"` - MC Adjustments\n * `\"010\"` - AMEX Merchant Acct\n * `\"005\"` - Visa Adjustments\n * `\"004\"` - Amex Adjustments\n * `\"003\"` - MasterCard PAR\n * `\"002\"` - Visa PAR\n",
                        "maxLength" : 3,
                        "example" : "002"
                      },
                      "accountNumber" : {
                        "type" : "string",
                        "maxLength" : 35,
                        "example" : "9812736540"
                      },
                      "clearingEntity" : {
                        "type" : "string",
                        "enum" : [ "021", "022" ],
                        "description" : "Value Descriptions:\n * `\"021\"` - Savings Account\n * `\"022\"` - Current Account\n",
                        "example" : "021"
                      },
                      "accountNumberDR" : {
                        "type" : "string",
                        "maxLength" : 35,
                        "example" : "9812736540"
                      },
                      "clearingEntityDR" : {
                        "type" : "string",
                        "enum" : [ "021", "022" ],
                        "description" : "Value Descriptions:\n * `\"021\"` - Savings Account\n * `\"022\"` - Current Account\n",
                        "example" : "021"
                      },
                      "ordinal" : {
                        "type" : "number",
                        "format" : "int32",
                        "maxLength" : 1,
                        "description" : "Incremental value per entry in an array",
                        "example" : 1
                      },
                      "deposits" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1,
                        "description" : "Default to 1",
                        "example" : 1
                      },
                      "nonBankAdjustments" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1,
                        "description" : "Default to 1",
                        "example" : 1
                      },
                      "depositAdjustments" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1,
                        "description" : "Default to 1",
                        "example" : 1
                      },
                      "chargebackReversals" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1,
                        "description" : "Default to 1",
                        "example" : 1
                      },
                      "interchangeAssessments" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1,
                        "description" : "Default to 1",
                        "example" : 1
                      },
                      "discountServices" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1,
                        "description" : "Default to 1",
                        "example" : 1
                      },
                      "fees" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1,
                        "description" : "Default to 1",
                        "example" : 1
                      },
                      "financialAdjustments" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1,
                        "description" : "Default to 1",
                        "example" : 1
                      },
                      "chargebacks" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 1,
                        "description" : "Default to 1",
                        "example" : 1
                      },
                      "bankTelephone" : {
                        "type" : "string",
                        "maxLength" : 15,
                        "example" : "3049998342"
                      },
                      "bankContactName" : {
                        "type" : "string",
                        "maxLength" : 35,
                        "example" : "Santiago Camilla"
                      },
                      "bankCity" : {
                        "type" : "string",
                        "maxLength" : 35,
                        "example" : "Medellin"
                      },
                      "iban" : {
                        "type" : "string",
                        "maxLength" : 35,
                        "example" : "0000000000"
                      },
                      "swiftCode" : {
                        "type" : "string",
                        "maxLength" : 11,
                        "example" : "COLOCOBMXXX"
                      },
                      "isPrimary" : {
                        "type" : "boolean",
                        "description" : "Bank is primary",
                        "example" : true
                      },
                      "accountName" : {
                        "type" : "string",
                        "maxLength" : 35,
                        "example" : "Postobon Account 1"
                      },
                      "sortCode" : {
                        "type" : "string",
                        "maxLength" : 22,
                        "example" : "0036000"
                      },
                      "delayDays" : {
                        "type" : "number",
                        "format" : "int32",
                        "maxLength" : 3,
                        "example" : 0
                      },
                      "creditDebit" : {
                        "type" : "string",
                        "maxLength" : 6,
                        "enum" : [ "CREDIT", "DEBIT" ],
                        "example" : "CREDIT"
                      }
                    }
                  }
                },
                "siteSurvey" : {
                  "type" : "object",
                  "required" : [ "siteVisitation", "onSiteVisitPerformed", "deliveryTimeFrame_0", "deliveryTimeFrame_0_To_7", "deliveryTimeFrame_8_To_14", "deliveryTimeFrame_15_To_30", "deliveryTimeFrame_Over_30", "productsServicesSold" ],
                  "properties" : {
                    "siteVisitation" : {
                      "type" : "string",
                      "enum" : [ "Y", "N" ],
                      "maxLength" : 1,
                      "example" : "N"
                    },
                    "onSiteVisitPerformed" : {
                      "type" : "string",
                      "enum" : [ "Y", "N" ],
                      "maxLength" : 1,
                      "example" : "N"
                    },
                    "deliveryTimeFrame_0" : {
                      "type" : "string",
                      "maxLength" : 3,
                      "example" : "100"
                    },
                    "deliveryTimeFrame_0_To_7" : {
                      "type" : "string",
                      "maxLength" : 3,
                      "example" : "0"
                    },
                    "deliveryTimeFrame_8_To_14" : {
                      "type" : "string",
                      "maxLength" : 3,
                      "example" : "0"
                    },
                    "deliveryTimeFrame_15_To_30" : {
                      "type" : "string",
                      "maxLength" : 3,
                      "example" : "0"
                    },
                    "deliveryTimeFrame_Over_30" : {
                      "type" : "string",
                      "maxLength" : 3,
                      "example" : "0"
                    },
                    "returnPolicy" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "description" : "Default it to \"Exchange only\"",
                      "example" : "Exchange only"
                    },
                    "separateRefundPolicy" : {
                      "type" : "string",
                      "maxLength" : 3,
                      "enum" : [ "Yes", "No" ],
                      "example" : "No"
                    },
                    "productsServicesSold" : {
                      "type" : "string",
                      "maxLength" : 30,
                      "example" : "SERVICES"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostLocationResponse" : {
        "type" : "object",
        "properties" : {
          "hashedOrderId" : {
            "type" : "string",
            "maxLength" : 6,
            "example" : "JeB6j"
          },
          "primaryMerchantId" : {
            "type" : "string",
            "maxLength" : 8,
            "example" : 149003
          },
          "merchantIdList" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "merchantId" : {
                  "type" : "string",
                  "maxLength" : 8,
                  "example" : 149003,
                  "description" : "This merchantId numbers whose length will be same as primaryMerchantId , which is 8"
                }
              }
            }
          }
        }
      },
      "OrderStatusRequest" : {
        "type" : "object",
        "properties" : {
          "orderIds" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "maxLength" : 6,
              "example" : "JeB6j"
            }
          }
        }
      },
      "OrderStatusResponse" : {
        "type" : "object",
        "properties" : {
          "orders" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "orderId" : {
                  "type" : "string",
                  "maxLength" : 6,
                  "example" : "JeB6j"
                },
                "lastUpdatedDate" : {
                  "type" : "string",
                  "maxLength" : 19,
                  "description" : "YYYY-MM-DD HH:MM:SS",
                  "example" : "2019-03-28 14:12:45"
                },
                "merchants" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "merchantId" : {
                        "type" : "number",
                        "format" : "int64",
                        "maxLength" : 6,
                        "example" : "MXyP9"
                      },
                      "lastUpdatedDate" : {
                        "type" : "string",
                        "maxLength" : 19,
                        "description" : "YYYY-MM-DD HH:MM:SS",
                        "example" : "2019-03-28 14:12:45"
                      },
                      "status" : {
                        "type" : "string",
                        "maxLength" : 30,
                        "enum" : [ "Order Pending", "Credit Pending", "Credit Approved", "Credit Declined", "Credit Failed", "Omnipay Migration In Progress", "Omnipay Migration Completed", "Omnipay Migration Failed" ]
                      },
                      "merchantIdentifier" : {
                        "type" : "string",
                        "maxLength" : 8,
                        "description" : "MID assigned to Omnipay"
                      },
                      "parentMerchantIdentifier" : {
                        "type" : "string",
                        "maxLength" : 8,
                        "description" : "Subgroup MID assigned to Omnipay"
                      },
                      "platform" : {
                        "type" : "string",
                        "maxLength" : 5,
                        "description" : "Internal FDMP field. This will always be SOUTH for Bancolombia"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}