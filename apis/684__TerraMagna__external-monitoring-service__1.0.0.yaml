openapi: "3.0.2"

info:
  title: External TerraMagna's Monitoring Service API
  version: "1.0.0"
  description: |
    # Introduction

    The Monitoring Service API expose operations that interacts with the
    monitoring data generated by the automatic processing using Satellite Imagery.

    # Authorization

    Authorization follows the standard pattern used by other TerraMagna's APIs:
    authenticate with the IAM service and send the token in the `Authorization` header.

    # Dates and Timestamps

    All dates and timestamps used in the API interface are in [ISO 8601] format as
    [Coordinated Universal Time (UTC)] with zero offset.

    # Hyperlink URLs

    Any resource that have associated hyperlinks will have a `_links` property, that will
    contains all the said hyperlinks.

    Each hyperlink contains two properties: `href` and `type`. The first provide the full URL of
    the hyperlink, while `type` will provide the HTTP method to use in the request. The `type`
    may not be present, in which case the client should consider that the HTTP method to use is GET.

servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/TerraMagna/external-monitoring-service/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/TerraMagna/external-monitoring-service/v1.0

tags:
  - name: Monitoring Analyses
    description: Analyses produced by the monitoring system
  - name: Seasons
    description: Seasons related operations
  - name: Territories
    description: Territory related operations

paths:
  /territories/{territory}/analyses:
    get:
      tags: [Territories, Monitoring Analyses]
      operationId: territoryAnalysis
      summary: Fetches the territory analysis in a given date.
      security:
        - authorization:
            - monitoring:analyses:view
            - onboarding:territories:view
      parameters:
        - $ref: "#/components/parameters/territory_id"
        - $ref: "#/components/parameters/operation_id"
        - $ref: "#/components/parameters/analysis_date"
      responses:
        "200":
          description: Correctly returned the territory analysis.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerritoryAnalysis"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
          
  /territories/{territory}/development:
    get:
      tags: [Territories, Monitoring Analyses]
      operationId: developmentMap
      summary: Fetches the territory's development map on a given date.
      description: |
        Constructs the territory's development map.
        Will return the FeatureCollection of the territory, containing
        each of its stands, plus the reserve and other uses geometries.

        Each feature will contain at least one property `type`, with one
        of the values:

        * `STAND`: The feature represents a stands.
        * `RESERVE`: The feature represents the reserve geometry.
        * `OTHER_USES`: The feature represents the other uses geometry.
  
        There will be only one feature with `RESERVE` and `OTHER_USES`.
        Each stand will contain two more properties:

        * `id`: The identifier of the stand inside the territory.
        * `state`: The development stage of the stand.
      security:
        - authorization:
            - monitoring:analyses:view
            - onboarding:territories:view
      parameters:
        - $ref: "#/components/parameters/territory_id"
        - $ref: "#/components/parameters/operation_id"
        - $ref: "#/components/parameters/analysis_date"
      responses:
        "200":
          description: Correctly returned the territory analysis.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeatureCollection"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"

  /seasons/{year}/{crop}/analyses:
    get:
      tags: [Seasons]
      operationId: walletAnalysis
      summary: Fetches the wallet analysis in a given date.
      security:
        - authorization:
            - monitoring:analysis:view
            - onboarding:operations:view
            - onboarding:territories:view
      parameters:
        - $ref: "#/components/parameters/year"
        - $ref: "#/components/parameters/crop"
        - $ref: "#/components/parameters/analysis_date"
        - $ref: "#/components/parameters/location"
      responses:
        "200":
          description: Correctly returned the analyses
          content:
            application/json:
              schema:
                type: object
                properties:
                  analyses:
                    type: array
                    items:
                      $ref: "#/components/schemas/WalletAnalysisEntry"
                    minLength: 1
                required:
                  - analyses

        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"

  /seasons/{year}/{crop}/statistics:
    get:
      tags: [Seasons]
      operationId: statistics
      summary: Calculates statistics over a wallet analysis.
      security:
        - authorization:
            - monitoring:analysis:view
            - onboarding:territories:view
            - onboarding:operations:view
      parameters:
        - $ref: "#/components/parameters/year"
        - $ref: "#/components/parameters/crop"
        - $ref: "#/components/parameters/analysis_date"
        - $ref: "#/components/parameters/location"
      responses:
        "200":
          description: Correctly returned the statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletStatistics"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"

  /seasons:
    get:
      tags: [Seasons]
      operationId: availableSeasons
      summary: Get the available seasons.
      security:
        - authorization:
            - monitoring:analysis:view
      responses:
        "200":
          description: Correctly returned the seasons
          content:
            application/json:
              schema:
                type: object
                properties:
                  seasons:
                    description: |
                      Contains the available seasons for the client.

                      The seasons are ordered in anti-chronologic order, that is,
                      the newest available season comes first.
                    type: array
                    minLength: 1
                    uniqueItems: true
                    items:
                      $ref: "#/components/schemas/SeasonsEntry"
                required:
                  - seasons
              example:
                seasons:
                  - year: 2019
                    crop: SAFRA
                    dates:
                      - date: "2019-09-21"
                        _links:
                          analysis: "https://monitoring.terramagna.com.br/seasons/2019/SAFRA/analyses?at=2019-09-21"
                          statistics: "https://monitoring.terramagna.com.br/seasons/2019/SAFRA/statistics?at=2019-09-21"
                    _links:
                      analysis: "https://monitoring.terramagna.com.br/seasons/2019/SAFRA/analyses"
                      statistics: "https://monitoring.terramagna.com.br/seasons/2019/SAFRA/statistics"

        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"

components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    territory_id:
      name: territory
      in: path
      description: Territory's identifier associated with the resource.
      schema:
        $ref:  "#/components/schemas/Id"
      required: true

    operation_id:
      name: operation
      in: query
      description: Operation's identifier associated with a resource.
      schema:
        $ref: "#/components/schemas/Id"
      required: true

    analysis_date:
      name: at
      in: query
      description: |
        Date of analysis to use in the request.

        If no value is passed the latest available date for the season used
        in the request (see the `season` parameter documentation). If the
        route doesn't receive a `season` argument, it will receive a `operation`
        argument, and the season considered will then be the season of the operation.
      schema:
        $ref: "#/components/schemas/Date"

    amount:
      name: amount
      in: query
      description: Amount of a currency to pass to the operation.
      schema:
        $ref: "#/components/schemas/Amount"
      required: true

    year:
      name: year
      in: path
      description: Year of the season to pass to the operation.
      schema:
        $ref: "#/components/schemas/Amount"
      required: true

    crop:
      name: crop
      in: path
      description: Season crop to pass to the operation.
      schema:
        type: string
        enum:
          - SAFRA
          - SAFRINHA
      required: true

    location:
      name: location
      in: query
      description: |
        Location to use as a filter during the operation.

        This will filter the results to only those in the specified location, be
        it a state or a municipality.
      schema:
        $ref: "#/components/schemas/Location"

    operation_risk:
      name: risk
      in: query
      description: |
        Operation risk.

        This will be used to identify (in conjunction to `operation`), the alert to
        consider in the request.
      schema:
        $ref: "#/components/schemas/OperationRisk"
      required: true

    after:
      name: $after
      in: query
      description: |
        Minimum timestamp to use as a filter during the operation.

        This provides an interface for clients fetching only the resources created
        after the provided timestamp, instead of all of them.

        If no value is provided, the response will contains _all_ the resources.
      schema:
        $ref: "#/components/schemas/DateTime"

  responses:
    404NotFound:
      description: A resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    pattern: "[A-Z_]+"
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
            required:
              - error
          examples:
            operation_not_found:
              value:
                error:
                  code: OPERATION_NOT_FOUND
                  message: The operation 123 was not found
            territory_not_found:
              value:
                error:
                  code: TERRITORY_NOT_FOUND
                  message: The territory 456 was not found

    403Forbidden:
      description: The user doesn't have authorization to execute the operation.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - UNAUTHORIZED
                  message:
                    type: string
                    enum:
                      - The user doesn't have access to the operation
                required:
                  - code
                  - message
            required:
              - error

    410Gone:
      description: The resource doesn't exist anymore.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - GONE
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
            required:
              - error

  schemas:
    Id:
      description: |
        An Entity's Identifier.

        This provides an unified interface for handling all the identifiers used with int32
        in the API.
      type: integer
      format: int32
      minimum: 1
      
    Uuid:
      description: |
        An Entity's Identifier.

        This provides an unified interface for handling all the identifiers used with uuid
        in the API.
      type: string
      format: uuid
      minimum: 1

    Date:
      description: |
        ISO 8601 date in the UTC time zone. Its value should be formatted in the
        format described in [RFC 3339].

        [RFC 3339]: https://tools.ietf.org/html/rfc3339#section-5.6
      type: string
      format: date
      example: "1996-12-19"

    DateTime:
      description: |
        ISO 8601 timestamp in the UTC time zone. Its value should be formatted in the
        format described in [RFC 3339].

        [RFC 3339]: https://tools.ietf.org/html/rfc3339#section-5.6
      type: string
      format: date-time
      example: "1996-12-19T16:39:57-03:00"

    Amount:
      description: |
        A monetary amount of some currency.

        Although we use the term _monetary_ here, the currency not necessary is a
        country currency (like USD or BRL), but some unit that are relevant to the
        client. In particular we can cite sacks and hectares.
      type: number
      format: double
      minimum: 0
      example: 123.212

    Currency:
      description: |
        The currency associated with a moneraty amount.

        Although we use the term _monetary_ here, the currency not necessary is a
        country currency (like USD or BRL), but some unit that are relevant to the
        client. In particular we can cite sacks and hectares.
      type: string
      enum:
        - REAL
        - SACK
        - ARROBA
        - KILOGRAM
        - CUBICMETERS

    Value:
      description: |
        A monetary amount with its associated currency.
      type: object
      properties:
        amount:
          $ref: "#/components/schemas/Amount"
        currency:
          $ref: "#/components/schemas/Currency"

    Season:
      description: |
        A cultive season.

        The possible values of this object are defined based on the operations
        that the client has registered in the system.
      type: object
      properties:
        year:
          description: The year of the season.
          type: integer
          format: int32
          minimum: 1970
        crop:
          description: |
            The crop of the season.

            We use the portguese term here as english doesn't have proper names
            for classifing these (SAFRA would be the "first crop" and SAFRINHA "second crop").
          type: string
          enum:
            - SAFRA
            - SAFRINHA
      required:
        - year
        - crop
      example:
        year: 2019
        crop: SAFRA

    Location:
      description: A location in Brazil, it can be a state or a municipality (in a state).
      type: object
      properties:
        state:
          description: The UF of the location's state.
          type: string
          pattern: "A[CLPM]|BA|CE|DFES|GO|M[ATMSG]|P[ABREI]|R[JNSOR]|S[CPE]|TO"
        municipality:
          description: An optional municipality for the location.
          type: string
          minLength: 1
      required:
        - state
      example:
        state: SP
        municipality: São José dos Campos

    OperationRisk:
      description: |
        Risk that may happen during an operation's monitoring.

        * `LOW_AREA`: The available area may not be enough to pay the operation.
        * `LOW_PRODUCTION`: The planted area may not be enouth to pay the operation.
      type: string
      enum:
        - LOW_AREA
        - LOW_PRODUCTION


    WalletAnalysisEntry:
      description: |
        An entry in analysis of the wallet of the client.

        An entry is represented by the operation, its analysis, and the set of all the
        territories and theirs analyses.

        * `operation`: The operation of the entry.
        * `detections`: Risk detections of the operation analysis.
        * `development_stage`: The maximum development stage of the operation's territories.
        * `territories`: Analysis all each territory associated with the operation. Also
          contains the territory information.
      type: object
      properties:
        operation:
          $ref: "#/components/schemas/Operation"
        detections:
          type: array
          items:
            $ref: "#/components/schemas/OperationRisk"
          uniqueItems: true
        development_stage:
          $ref: "#/components/schemas/DevelopmentStage"
        territories:
          type: array
          items:
            $ref: "#/components/schemas/TerritoryAnalysis"
          minLength: 1
          uniqueItems: true
        reports:
          type: array
          items:
            $ref: "#/components/schemas/Reports"
          uniqueItems: true
      required:
        - operation
        - detections
        - development_stage
        - territories

    Operation:
      description: |
        A financed operation in monitoring.

        This is the same entity of the onboaring API, but contains only
        the information of intereset of the monitoring API.

        * `crop_type`: The operation's financed crop type.
        * `receivable`:  The amount that the `debtor` should delivery in the
          end of the season.
        * `due_date`: The operation's due date.
        * `debtor`: The operation's debtor.
        * `pledging_potential`: The percentage of the probability of this operation to be pawned 
        * `pledge_made`: The percentage of the operation that is already pawned
        * `harvested_percentage`: The percentage of the already harvested crop
        * `funded_area`: The total of financed area from operation
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        crop_type:
          $ref: "#/components/schemas/CropType"
        receivable:
          $ref: "#/components/schemas/Value"
        due_date:
          $ref: "#/components/schemas/Date"
        debtor:
          $ref: "#/components/schemas/Debtor"
        number:
          type: string
          minLength: 1
        pledging_potential:
          $ref: "#/components/schemas/Percentage"
        pledge_made:
          $ref: "#/components/schemas/Percentage"
        harvested_percentage:
          $ref: "#/components/schemas/Percentage"
        funded_area:
          $ref: "#/components/schemas/Percentage"
      required:
        - id
        - crop_type
        - receivable
        - due_date
        - debtor
        - number
        - pledging_potential
        - pledge_made
        - harvested_percentage
        - funded_area
        
    ReportType:
      description: The type of the report
      type: string
      enum:
        - SISBACEN

    CropType:
      description: The type of crop planted (or that should be planted) in a territory.
      type: string
      enum:
        - BEAN
        - CORN
        - COTTON
        - COFFEE
        - EUCALYPTUS
        - OAT
        - OTHERS
        - PEANUT
        - RICE
        - SORGHUM
        - SOYBEAN
        - SURGARCANE
        - UNKNOWN
        - WHEAT

    Debtor:
      description: The debtor of a financed operation.
      type: object
      properties:
        name:
          description: The name of the debtor.
          type: string
          minLength: 1
        cpf_cnpj:
          description: The CPF or CNPJ of the debtor.
          type: string
          pattern: ^(\d{3}.\d{3}.\d{3})|(\d{2}.\d{3}.\d{3}/\d{4})-\d{2}$
      required:
        - name
        - cpf_cnpj
        
    Reports:
      description: | 
        The reports of a given territory.
        
        * `report_type` type of the report (e.g SISBACEN)
        * `id` the id from the file in storage service
      type: object
      properties:
        report_type:
          $ref: "#/components/schemas/ReportType"
        id: 
          $ref: "#/components/schemas/Uuid"

    TerritoryAnalysis:
      description: |
        The result of the monitoring analysis for a given territory.

        * `territory`: Contains the relevant information (in the context of the
          monitoring API) about a territory.
        * `identified_crop_type`: The crop type that was identified in the territory.
        * `detections`: All the risk detections presents in the analysis.
        * `planting`: The planting analysis of the territory.
        * `harvest`: The harvest analysis of the territory.
        * `pledge_made`: The percentage of the territory that is already pawned

        A GeoJSON containing the development stage of each stand, plus the reserve and
        other uses geometries is available in the `development_map` link.
      type: object
      properties:
        territory:
          $ref: "#/components/schemas/Territory"
        identified_crop_type:
          $ref: "#/components/schemas/CropType"
        development_stage:
          $ref: "#/components/schemas/DevelopmentStage"
        detections:
          type: array
          items:
            $ref: "#/components/schemas/TerritoryRisk"
          uniqueItems: true
        planting:
          $ref: "#/components/schemas/Analysis"
        harvest:
          $ref: "#/components/schemas/Analysis"
        pledge_made:
          $ref: "#/components/schemas/Percentage"
        zarc_info:
          $ref: "#/components/schemas/ZarcInfo"
        _links:
          type: object
          properties:
            self:
              $ref: "#/components/schemas/Hyperlink"
            development_map:
              $ref: "#/components/schemas/Hyperlink"
          required:
            - self
            - development_map
      required:
        - territory
        - identified_crop_type
        - detections
        - development_map_url

    DevelopmentStage:
      description: |
        The possible development (or phenologic) stages.

        * `NOT_PLANTED`: The territory is still waiting to be planted.
        * `RECENTLY_PLANTED`: The territory was recently (at most 30 days) planted.
        * `FULL_FLEDGED`: The plantation is close to the maximum of biomass.
        * `SENESCENCE`: The plantation reached the peak of biomass and is starting to dry.
        * `IMMEDIATE_HARVEST`: The plantation is close to the harvest or is beeing harvested.
        * `HARVESTED`: The plantation was already harvested.
      type: string
      enum:
        - NOT_PLANTED
        - RECENTLY_PLANTED
        - FULL_FLEDGED
        - SENESCENCE
        - IMMEDIATE_HARVEST
        - HARVESTED

    TerritoryRisk:
      description: |
        The possible risks detectable in territories.

        * `ZARC`: The territory ZARC level was too high.
        * `PLANTATION`: The territory apresented a delayed plantation.
        * `NOT_PLANTED`: The system wasn't able to detect a plantation in the territory.
        * `CROP_TYPE`: The crop type identified in the territory is different that
          which was expected by the operation contract.
      type: string
      enum:
        - PLANTATION
        - ZARC
        - NOT_PLANTED
        - CROP_TYPE

    Analysis:
      description: |
        A generic area-based analysis.

        * `start_date`: The date from which the behavior analysed was deteced.
        * `percentage`: The percentage of the territory in which the behavior
        was detected.
      type: object
      properties:
        start_date:
          $ref: "#/components/schemas/Date"
        percentage:
          $ref: "#/components/schemas/Percentage"
      required:
        - start_date
        - percentage
        
    ZarcInfo:
      description: |
        A object with zarc info.
        
        * `low`: Probability percentage of low Zarc risk
        * `medium`: Probability percentage of medium Zarc risk
        * `high`: Probability percentage of high Zarc risk
      type: object
      properties:
        low:
          $ref: "#/components/schemas/Percentage"
        medium: 
          $ref: "#/components/schemas/Percentage"
        high:
          $ref: "#/components/schemas/Percentage"

    Percentage:
      description: A percentage value.
      type: number
      format: double
      minimum: 0
      maximum: 1

    Territory:
      description: |
        A territory associated with a financed operation.

        This is the same entity as in the onboarding API, but contains geometry
        dependent informations, that are not available.

        * `name`: Name of the territory.
        * `location`: Location (at municipality level) of the territory.
        * `areas`: Description of each area type in the territory.
        * `funded_area`: The total of financed area from the territory.
        * `territory`: The registry code of the territory.
        
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          minLength: 1
        location:
          $ref: "#/components/schemas/Location"
        areas:
          $ref: "#/components/schemas/AreasDesc"
        funded_area:
          $ref: "#/components/schemas/Percentage"
        registry: 
          type: string
      required:
        - id
        - name
        - location
        - areas
        - registry

    AreasDesc:
      description: |
        Contains the area (in hectares) of each type of land in the territory.
      type: object
      properties:
        available:
          $ref: "#/components/schemas/Amount"
        reserve:
          $ref: "#/components/schemas/Amount"
        other_uses:
          $ref: "#/components/schemas/Amount"
      required:
        - available
        - reserve
        - other_uses

    WalletStatistics:
      description: |
        Client's wallet statistics.

        Provides a high level summary of the analyses realized by the system.
      type: object
      properties:
        wallet:
          type: object
          properties:
            receivables:
              type: object
              properties:
                total:
                  description: The total sum of the receivables financed by the client.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Value"
                in_risk:
                  description: The sum of the receivables in risk financed by the client.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Value"
              required:
                - total
                - in_risk
            operations:
              type: object
              properties:
                total:
                  description: The total of operations finaced by the client.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Amount"
                in_risk:
                  description: The number of operations in risk.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/Amount"
              required:
                - total
                - in_risk
        development:
          type: object
          properties:
            distribution:
              description: |
                A distribution, in percentage of area, of each stage of development.

                The value of this property is a map of `DevelopmentStage` to `Percentage`.
              type: object
              additionalProperties:
                $ref: "#/components/schemas/Percentage"
            status:
              description: |
                The number of territories in each development stage.

                The value of this property is a map of `DevelopmentStage` to `Amount`.
              type: object
              additionalProperties:
                $ref: "#/components/schemas/Amount"
          required:
            - distribution
            - status
        planting:
          description: |
            * `planted_percentage`: Percentage of the total available area of all
              the territories that is already planted.
            * `planting_date_histogram`: Histogram in weeks containing the number of
              territories planted in that week.
            * `crop_distribution`: Distribution in percentage, per area, of each
              crop type in the client's wallet.
          type: object
          properties:
            planted_percentage:
              $ref: "#/components/schemas/Percentage"
            planting_date_histogram:
              type: array
              items:
                type: object
                properties:
                  week:
                    type: integer
                    format: int32
                    minimum: 0
                    maximum: 3
                    exclusiveMaximum: false
                  month:
                    type: integer
                    format: int32
                    minimum: 0
                    maximum: 11
                    exclusiveMaximum: false
                  year:
                    type: integer
                    format: int32
                    minimum: 1970
                  planted:
                    $ref: "#/components/schemas/Amount"
            crop_distribution:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/Percentage"
          required:
            - planted_percentage
            - planting_date_histogram
            - crop_distribution
      required:
        - wallet

    SeasonsEntry:
      description: |
        A season available for the client.

        Contains in the `analysis` hyperlink the latest available analysis.
        Contains in the `statistics` hyperlink the statistics of the lates available analysis.
      allOf:
        - $ref: "#/components/schemas/Season"
        - type: object
          properties:
            _links:
              type: object
              properties:
                analysis:
                  $ref: "#/components/schemas/Hyperlink"
                statistics:
                  $ref: "#/components/schemas/Hyperlink"
              required:
                - analysis
                - statistics
          required:
            - _links
        - type: object
          properties:
            dates:
              description: |
                Available analysis dates for the season.

                The dates are ordered in anti-chronologic order, that is,
                the newest available date comes first.
              type: array
              minLength: 1
              uniqueItems: true
              items:
                type: object
                properties:
                  date:
                    $ref: "#/components/schemas/Date"
                  _links:
                    type: object
                    properties:
                      analysis:
                        $ref: "#/components/schemas/Hyperlink"
                      statistics:
                        $ref: "#/components/schemas/Hyperlink"
                    required:
                      - analysis
                      - statistics
                      - self
                required:
                  - date
                  - _links
          required:
            - dates

    Hyperlink:
      type: object
      properties:
        href:
          type: string
          format: uri
        type:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
      required:
        - href
      example:
        href: "https://monitoring.terramagna.com.br/territory/123/analysis?operation=321&at=2019-02-12"

    Geometry:
      type: object
      description: GeoJSON geometry
      required:
        - type
      externalDocs:
        url: http://geojson.org/geojson-spec.html#geometry-objects
      oneOf:
        - $ref: "#/components/schemas/MultiPolygon"

    Point:
      type: array
      minItems: 2
      maxItems: 3
      items:
        type: number

    MultiPolygon:
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id6
      type: object
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/Point'

    GeometryCollection:
      type: object
      description: GeoJSon geometry collection
      required:
        - type
        - geometries
      externalDocs:
        url: http://geojson.org/geojson-spec.html#geometrycollection
      properties:
        type:
          type: string
          enum:
            - GeometryCollection
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/Geometry'

    Feature:
      type: object
      description: GeoJSon Feature
      required:
        - type
        - id
        - geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          type: integer
        geometry:
          $ref: '#/components/schemas/GeometryCollection'
        properties:
          type: object

    FeatureCollection:
      type: object
      description: GeoJSon Feature collection
      required:
        - type
        - features
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'