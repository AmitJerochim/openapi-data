openapi: 3.0.0
servers:
  - url: https://microservices.dev.rappi.com/api/restaurants-integrations-public-api
    description: Test
  - url: https://services.rappi.com.ar/api/restaurants-integrations-public-api
    description: Argentina
  - url: https://services.rappi.com.br/api/restaurants-integrations-public-api
    description: Brasil
  - url: https://services.rappi.cl/api/restaurants-integrations-public-api
    description: Chile
  - url: https://services.rappi.com/api/restaurants-integrations-public-api
    description: Colombia
  - url: https://services.rappi.co.cr/api/restaurants-integrations-public-api
    description: Costa Rica
  - url: https://services.rappi.com.ec/api/restaurants-integrations-public-api
    description: Ecuador
  - url: https://services.mxgrability.rappi.com/api/restaurants-integrations-public-api
    description: Mexico
  - url: https://services.rappi.pe/api/restaurants-integrations-public-api
    description: Peru
  - url: https://services.rappi.com.uy/api/restaurants-integrations-public-api
    description: Uruguay
info:
  description: |
    This document contains the specification of the methods that are part of the integration API that is offered by Rappi to its affiliated restaurants, the content of this document will allow the Rappi associate to know the requirements necessary to make use of the service and understand the messaging that will be exchanged between the two entities.
  version: "1.1.1"
  title: Service Specification API Restaurant Integration

tags:
  - name: Authentication
  - name: Orders request
  - name: Order Acceptance
  - name: Order Rejection
  - name: Order is ready for pickup
  - name: Availability Store
  - name: Menu

paths:
  '/login':
    post:
      tags:
        - Authentication
      summary: The authentication is done through a public access token provided by RAPPI
      responses:
        '200':
          description: Successful response
          headers:
            x-auth-int:
              schema:
                type: string
                example: Bearer asd87asd7a8sd8sa
              description: |
                    Token to access different API methods
                    
                    *Note: it's valid for 30 days, after that it's necessary to renew it*
        '401':
          description: Wrong authorization token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Token provided by rappi
                  example: as78da6sd7as6d8asd
  '/orders':
    get:
      tags:
        - Orders request
      summary: Get available orders to be processed
      parameters:
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema: 
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: List of orders. If there isn't any, an empty list will be received.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/OrderBody'
        '401':
          description: Wrong authorization token

  '/orders/take/{orderId}':
    get:
      tags:
        - Order Acceptance
      summary: Indicates to the restaurant integration service that the order has been processed successfully
      parameters:
        - in: path
          name: orderId
          required: true
          description: Any order id obtanied from /orders
          schema:
            type: integer
            example: 1234
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema: 
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: Order has been taken succeesfully by RAPPI
        '401':
          description: Wrong authorization token
        '400':
          description: Order does not exist or was already processed
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/OrderError'
              examples:
                Order does not exist:
                   $ref: '#/components/examples/OrderNotExist'
                Order was already processed:
                  $ref: '#/components/examples/OrderAlreadyProcessed'
                  
  '/orders/reject':
    post:
      tags:
        - Order Rejection
      summary: Indicates to the restaurant integration service that the order has not been processed successfully
      parameters:
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema: 
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: Successful response
        '401':
          description: Wrong authorization token
        '400':
          description: Order does not exist or was already processed
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/OrderError'
              examples:
                Order does not exist:
                   $ref: '#/components/examples/OrderNotExist'
                Order was already processed:
                  $ref: '#/components/examples/OrderAlreadyProcessed'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: integer
                  description: Rappi order id
                  example: 1234
                reason:
                  type: string
                  description: Describe the rejection reason
                  example: Error code 4 description
  
  '/orders/ready-for-pickup/{orderId}':
    post:
      tags:
        - Order is ready for pickup
      summary: Tells to RAPPI Integration Service that the order is ready for pickup. You must ensure with RAPPI team that the Store is already configured to use non-automatic ready for pickup feature (this have to be done only once per store).
      parameters:
        - in: path
          name: orderId
          required: true
          description: Any order id obtanied from /orders
          schema:
            type: integer
            example: 1234
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema: 
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: Request proceesed ok
        '401':
          description: Wrong authorization token
                    
  '/stores/enable/{storeId}':
    post:
      tags:
        - Availability Store
      summary: >-
        Enables the store in the restaurant integration service to accept new orders.
      parameters:
        - in: path
          name: storeId
          required: true
          description: The Store id
          schema:
            type: integer
            example: 1234
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema:
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: Successful response
        '404':
          description: Store does not exist
        '401':
          description: Wrong authorization token
          
  '/stores/disable/{storeId}':
    post:
      tags:
        - Availability Store
      summary: >-
        Disables the store in the restaurant integration and it cannot accept new orders.
      parameters:
        - in: path
          name: storeId
          required: true
          description: The Store id
          schema:
            type: integer
            example: 1234
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema:
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: Successful response
        '404':
          description: Store does not exist
        '401':
          description: Wrong authorization token

  '/stores/menu':
    get:
      tags:
        - Menu
      summary: List the store menu
      parameters:
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema: 
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: The response will contain the menu of the stores associated with the authentication token
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/ProductMenu'
        '401':
          description: Wrong authorization token
  '/menu':
    post:
      tags:
        - Menu
      summary: Push a Menu to Rappi in order to update it contents.
      parameters:
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema: 
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: Successful response, Men√∫ pushed
        '401':
          description: Wrong authorization token
        '403':
          description: Access denied, the x-auth-int header is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp: 
                    type: string
                    example: "2020-02-12T20:51:39.323+0000"
                  status:
                    type: integer
                    example: 403
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Access Denied"
                  path:
                    type: string
                    example: "/api/restaurants-integrations-public-api/menu"
        '404':
          description: Reasons = ["The storeId does not belong to the used token", "The store needs skus on all items", "All items must have a valid name"]
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp: 
                    type: string
                    example: "2020-02-12T20:51:39.323+0000"
                  status:
                    type: integer
                    example: 404
                  error:
                    type: string
                    example: "Not Found"
                  message:
                    type: string
                    example: "StoreId 900000 not belongs to used token"
                  path:
                    type: string
                    example: "/api/restaurants-integrations-public-api/menu"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/StoreMenu"

components:
  schemas:
    OrderBody:
      type: object
      properties:
        order:
          $ref: "#/components/schemas/Order"
        client:
          $ref: '#/components/schemas/Client'
        store:
          $ref: '#/components/schemas/Store'
    Order:
      type: object
      properties:
        id:
          type: string
          example: "922233"
        totalValue:
          type: string
          example: "25080.0"
        createdAt:
          type: string
          example: "2019-02-05 14:56:15"
        totalValueWithDiscount:
          type: string
          example: "25080.0"
          description: Final order value, applying growth discounts.
        deliveryMethod:
          type: string
          example: "delivery"
        marketplace:
          type: string
          example: "false"
        paymentMethod:
          type: string
          example: "cash"
        eta:
          type: integer
          example: 35
        cookingTime:
          type: integer
          example: 10
        billingInformation:
          example: null
        totalValueFromGrowth:
          type: number
          format: double
          example: 25080.1
          description: Final order value, same value as totalValueWithDiscount.
        growthGlobalDiscounts:
          type: array
          items:
            $ref: '#/components/schemas/GrowthGlobalDiscount'
          description: List of discounts applied to the order.
        charges:
          $ref: '#/components/schemas/Charges'
        discounts:
          $ref: '#/components/schemas/Discounts'
        paymentDetails:
          $ref: '#/components/schemas/PaymentDetails'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          format: date-time
    Product:
      type: object
      properties:
        id:
          type: string
          example: "922233"
        name:
          type: string
          example: "Arma tu Pizza Familiar"
        comments:
          type: string
          example: "prueba"
        units:
          type: string
          example: "2"
        unitPrice:
          type: string
          example: "8590.0"
          description: Total price
        discountPercentage:
          type: string
          example: "0.0"
        unitPriceDiscount:
          type: string
          example: "8590.0"
        totalPrice:
          type: string
          example: "25080.0"
        productPriceWithGrowth:
          type: number
          format: double
          example: 25080.1
          description: Final price for the product, taking into account the growth discounts that are applied to it.
        productValueDiscountByGrowth:
          type: number
          format: double
          example: 0.1
          description: Discount value applied to the product.
        productPercentageDiscountByGrowth:
          type: number
          format: double
          example: 0.1
          description: Percentage of the discount applied to the product.
        toppings:
          type: array
          items:
            $ref: '#/components/schemas/Topping'
    Topping:
      type: object
      properties:
        id:
          type: string
          example: "12024"
        name:
          type: string
          example: "Pi√±a"
        units:
          type: string
          example: "1"
        price:
          type: string
          example: "900.0"
        toppingCategoryId:
          type: string
          example: "2478"
    GrowthGlobalDiscount:
      type: object
      properties:
        discountId:
          type: string
          example: "94197"
        productValueDiscount:
          type: number
          format: double
          example: 0.1
          description: Discount value applied to the order.
        productPercentageDiscount:
          type: number
          format: double
          example: 0.1
          description: Percentage of the discount applied to the order.
    Charges:
      type: object
      properties:
        shipping:
          type: number
          format: double
          example: 50.1
    Discounts:
      type: object
      properties:
        4481894-Orders\\GlobalOffers\\GlobalOffer:
          type: number
          format: double
          example: 4725.1
    PaymentDetails:
      type: object
      properties:
        total_discounts:
          type: number
          format: double
          example: 4726.1
        total_charges:
          type: number
          format: double
          example: 50.1
        total_rappi_pay:
          type: number
          format: double
          example: 0.1
        total_products_with_markdown:
          type: number
          format: double
          example: 31500.1
        tip:
          type: number
          format: double
          example: 500.1
        total_whims:
          type: number
          format: double
          example: 0.1
        total_orders:
          type: number
          format: double
          example: 27324.1
        total_products:
          type: number
          format: double
          example: 31500.1
    Client:
      type: object
      properties:
        id:
          type: string
          example: "922233"
        firstName:
          type: string
          example: "RAPPI"
        lastName:
          type: string
          example: "RAPPI"
        email:
          type: string
          example: "integration.public.publicapi@rappi.com"
        phone:
          type: string
          example: "3163535"
        address:
          type: string
          example: "Cll 93 No. 19 - 58"
    Store:
      type: object
      properties:
        id:
          type: string
          example: "900014652"
        name:
          type: string
          example: ""
    ProductMenu:
      type: object
      properties:
        id:
          type: string
          example: "1234"
        name:
          type: string
          example: "Product #1234"
        toppings:
          type: array
          items:
            $ref: '#/components/schemas/ToppingMenu'
    ToppingMenu:
      type: object
      properties:
        id:
          type: string
          example: "4321"
        name:
          type: string
          example: "Topping #1234"
        category:
          type: object
          properties:
            id: 
              type: string
              example: "678"
            name:
              type: string
              example: "Topping category #678"
    StoreMenu:
      type: object
      required:
       - storeId
      properties:
        storeId:
          type: string
          example: "900101446"
          description: Refers to the ally's unique identifier for the branch, which must be supplied to Rappi beforehand to be linked internally to the Rappi store id.
        items:
          type: array
          items:
            type: object
            required:
              - storeId
              - rappiIds
            properties:
              name: 
                type: string
                example: "3 PRESAS"
                description: It is the name assigned to each Category, product or Topping
              description:
                type: string
                example: "This is a description"
                description: Description of the item to be previewed
              rappiIds:
                type: array
                description: List of internal Rappi ids related to the item
                items:
                  type: string
                  example: "22312333"
              availableFrom:
                type: string
                example: "2020-05-04T23:05:01+00:00"
                description: Initial effective date of a product. Format ISO 8601  (2020-05-04T23:05:01+00:00)
              availableTo:
                type: string
                example: "2020-06-04T23:05:01+00:00"
                description: Final effective date of a product. Format ISO 8601  (2020-05-04T23:05:01+00:00)
              sortingPosition:
                type: integer
                example: 0
                description: Order in which the item must appear within the set to which it belongs, applies to categories, products and toppings.
              sku:
                type: string
                example: "2070"
                description: It is the identifier of the product in the POS, it is only required for integrations that use mapping, in which they do not use mapping, it can be null.
              stock:
                type: string
                example: "AVAILABLE"
                description: It allows defining if the product is available on the rappi platform, the accepted values are AVAILABLE and UNAVAILABLE.
              type:
                type: string
                example: "PRODUCT"
                description: PRODUCT, TOPPING
              price:
                type: number
                format: double
                example: 5000.1
                description: Final value for each item including taxes.
              category:
                type: object
                description: It is the element to which all the products of the same group are related, it must always be present in each Item. (Example, the beverage category may have related Bottled Water, Coca Cola, Strawberry Juice, etc.)
                required:
                  - id
                properties:
                  id:
                    type: string
                    example: "394"
                    description: It is the unique identifier of the category in the ally's POS.
                  name:
                    type: string
                    example: "Additionals Rappi"
                    description: It is the name assigned to each Category, product or Topping
                  minQty:
                    type: integer
                    example: 1
                    description: This field is required in children, since they indicate the minimum number of toppings that a user can select in the application. At the root level of items can be sent by default to zero.
                  maxQty:
                    type: integer
                    example: 1
                    description: This field is required in children, since they indicate the maximum number of toppings that a user can select in the application. At the root level of items can be sent by default to zero.
                  sortingPosition:
                    type: integer
                    example: 1
                    description: Order in which the item must appear within the set to which it belongs, applies to categories, products and toppings.
              imageUrl:
                type: string
                example: "https://example.com/img/example.jpg"
                description: URL address where the product image is published. It is mandatory for the Products.
              children:
                type: array
                description: They are the modifiers of the parent item, these items have the same structure as the main products.
                items:
                  type: object
                  properties:
                    name: 
                      type: string
                      example: "CRISPY"
                      description: It is the name assigned to each Category, product or Topping
                    description:
                      type: string
                      example: "This is a description"
                      description: Description of the item to be previewed
                    sku:
                      type: string
                      example: "2123"
                      description: It is the identifier of the product in the POS, it is only required for integrations that use mapping, in which they do not use mapping, it can be null.
                    stock:
                      type: string
                      example: "AVAILABLE"
                      description: It allows defining if the product is available on the rappi platform, the accepted values are AVAILABLE and UNAVAILABLE.
                    type:
                      type: string
                      example: "TOPPING"
                      description: PRODUCT, TOPPING
                    price:
                      type: number
                      format: double
                      example: 0.0
                      description: Final value for each item including taxes
                    category:
                      type: object
                      description: It is the element to which all the products of the same group are related, it must always be present in each Item. (Example, the beverage category may have related Bottled Water, Coca Cola, Strawberry Juice, etc.)
                      required:
                        - id
                      properties:
                        id:
                          type: string
                          example: "219"
                          description: It is the unique identifier of the category in the ally's PDV
                        name:
                          type: string
                          example: "¬øWHAT RECEIPT DO YOU NEED?"
                          description: It is the name assigned to each Category, product or Topping
                        minQty:
                          type: integer
                          example: 1
                          description: This field is required in children, since they indicate the minimum number of toppings that a user can select in the application. At the root level of items can be sent by default to zero.
                        maxQty:
                          type: integer
                          example: 1
                          description: This field is required in children, since they indicate the maximum number of toppings that a user can select in the application. At the root level of items can be sent by default to zero.
                        sortingPosition:
                          type: integer
                          example: 0
                          description: Order in which the item must appear within the set to which it belongs, applies to categories, products and toppings.
                    imageUrl:
                      type: string
                      example: "https://example.com/img/example.jpg"
                      description: URL address where the product image is published. It is mandatory for the Products.
                    children:
                      type: array
                      example: []
                      items:
                        type: object
                    availableFrom:
                      type: string
                      example: "2020-06-04T23:05:01+00:00"
                      description: Initial effective date of a product. Format ISO 8601  (2020-05-04T23:05:01+00:00)
                    availableTo:
                      type: string
                      example: "2020-07-04T23:05:01+00:00"
                      description: Final effective date of a product. Format ISO 8601  (2020-05-04T23:05:01+00:00)
                    sortingPosition:
                      type: integer
                      example: 1
                      description: Order in which the item must appear within the set to which it belongs, applies to categories, products and toppings.
    OrderError:
      type: object
      properties:
        errorCode:
          type: integer
        message:
          type: string
  examples:
    OrderNotExist:
      value:
        errorCode: 1000
        message: "The order #1234 not exists."
    OrderAlreadyProcessed:
      value:
        errorCode: 2000
        message: "The order #1234 was already processed."
