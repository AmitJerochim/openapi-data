openapi: 3.0.0
info:
  description: This API allows for integration with and modification of Maptician's Occupant Directory.  Occupants can be converted into users within the Maptician application by administrative users if sufficient user licences are available.
  version: "1.0.0-oas3"
  title: Maptician SCIM (RFC7643) API
  contact:
    name: Maptician
    email: support@maptician.com
  license:
    name: Maptician Service Agreement
    url: 'https://app.termly.io/document/terms-of-use-for-saas/e600d86f-3435-456a-b491-673758a2625c'
tags:
  - name: Users
    description: Office Occupants
  - name: Groups
    description: Occupant Groups
  - name: Configuration
    description: Facilitates discovery of SCIM service provider features and schema
paths:
  /groups:
    summary: Group Management
    get:
      tags:
        - Groups
      operationId: getGroup
      parameters:
        - $ref: '#/components/parameters/maptician_auth'
      responses:
        '200':
          description: Occupant successfully replaced.
          headers:
            location:
              schema:
                type: string
                format: uri
              description: URI link to the replaced Occupant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Input Parameter
        '500':
          description: Unexpected Server Error 
  /users:
    summary: User Management
    description: SCIM-Based User/Occupant Management
    post:
      tags:
        - Users
        - Create
      summary: Creates a new Maptician Occupant Entry
      operationId: addOccupant
      description: |
        Creates a Maptician occupant that can be added and tracked within the Maptician application.  A distinction is made between a user and an occupant within the Maptician environment.  An occupant is an entity within the system that is tracked for capacity purposes, can be potentially assigned to a seat or make a reservation, and will be visible in occupant directories and lists.  A user is an individual that is able to log into and interact with the Maptician application and possesses a username (generally their email) and a password.  A person can be an occupant and a user, or one or the other.  Occupants can be converted to users within the Maptician Occupants menu.  Individuals added through this API are created as occupants.
      parameters:
        - $ref: '#/components/parameters/maptician_auth'
      requestBody:
        description: Request body should contian a properly formatted SCIM user meeting RFC7643 specifications.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Occupant Created Successfully
          headers:
            location:
              schema:
                type: string
                format: uri
              description: URI link to the created Occupant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Input Parameter
        '500':
          description: Unexpected Server Error
    get:
      tags:
        - Users
        - Query
      summary: Retrieves zero or more occupants based on a set of provided query parameters
      description: Accepts query parameters in accordance with RFC 7644 3.4.2
      operationId: queryOccupants
      parameters:
        - $ref: '#/components/parameters/maptician_auth'
      responses:
        '200':
          description: List of documents retrieved by the query
          headers:
            location:
              schema:
                type: string
                format: uri
              description: URI link to the identified Occupant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
        '400':
          description: Bad Input Parameter
        '500':
          description: Unexpected Server Error
    put:
      tags:
        - Users
      summary: Replaces the data for an occupant, allowing for a complete replacement of all writable fields.  Any non-asserted values in the schema will be cleared or set to defaults.
      operationId: replaceOccupant
      parameters:
        - $ref: '#/components/parameters/maptician_auth'
        - in: path
          name: id
          required: true
          description: The unique Maptician identifier for the Occupant resource
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body should contian a properly formatted SCIM user meeting RFC7643 specifications.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Occupant successfully replaced.
          headers:
            location:
              schema:
                type: string
                format: uri
              description: URI link to the replaced Occupant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Input Parameter
        '500':
          description: Unexpected Server Error
    patch:
      tags:
        - Users
      summary: Performs a partial update to a Maptician occupant or user based on their unique Maptician id
      operationId: patchOccupant
      parameters:
        - $ref: '#/components/parameters/maptician_auth'
      responses:
        '200':
          description: Occupant successfully updated.
          headers:
            location:
              schema:
                type: string
                format: uri
              description: URI link to the replaced Occupant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Input Parameter
        '500':
          description: Unexpected Server Error
    delete:
      tags:
        - Users
      summary: Removes an occupant or user from Maptician
      operationId: removeOccupant
      parameters:
        - $ref: '#/components/parameters/maptician_auth'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: string
        '400':
          description: bad input parameter
  /users/{id}:
    summary: Get a known user
    description: Retrieve the user document for a user indicated by the id field
    get:
      tags:
        - Users
        - Query
      summary: Retrieves a SCIM formatted Maptician Occupant based on their unique Maptician id
      parameters:
      - $ref: '#/components/parameters/maptician_auth'
      - in: path
        name: id
        required: true
        description: The unique Maptician identifier for the Occupant resource
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Occupant successully located
          headers:
            location:
              schema:
                type: string
                format: uri
              description: URI link to the identified Occupant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Input Parameter
        '500':
          description: Unexpected Server Error
  /users/.search:
    summary: Get a known user
    description: Retrieve the user document for a user indicated by the id field
    post:
      tags:
        - Users
      summary: Retrieves a SCIM formatted Maptician Occupant based on their unique Maptician id
      parameters:
      - $ref: '#/components/parameters/maptician_auth'
      - in: path
        name: id
        required: true
        description: The unique Maptician identifier for the Occupant resource
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Occupant successully located
          headers:
            location:
              schema:
                type: string
                format: uri
              description: URI link to the identified Occupant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Input Parameter
        '500':
          description: Unexpected Server Error
  /ServiceProviderConfig:
    summary: Retrieve service provider's configuration.
    description: Returns a JSON structure that describes the SCIM specification features available for this service provider.  Returns an object with an attribute of "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig".
    get:
      tags:
        - Configuration
      parameters:
        - $ref: '#/components/parameters/maptician_auth'
      responses:
        '200':
          description: Service Provider Configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProviderConfig'
        '400':
          description: Bad Input Parameter
        '500':
          description: Unexpected Server Error
  /ResourceTypes:
    summary: Retrieve supported resource types.
    description: Used to discover the types of resources available from this SCIM service provider (e.g. Users and Groups), and any supported schema extensions.
    get:
      tags:
        - Configuration
      parameters:
        - $ref: '#/components/parameters/maptician_auth'
      responses:
        '200':
          description: Service Provider Resource Types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
        '400':
          description: Bad Input Parameter
        '500':
          description: Unexpected Server Error
  /Schemas:
    summary: Retrieve one or more supported schemas
    description: Retrieves information about resource schemas supported by this SCIM service provider.  Returns all supported schemas in ListResponse format.  Individual schema definitions can be returned by appending the schema URI to the /Schemas endpoint.
    get:
      tags:
        - Configuration
      parameters:
        - $ref: '#/components/parameters/maptician_auth'
      responses:
        '200':
          description: Service Provider Resource Types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDefinition'
        '400':
          description: Bad Input Parameter
        '500':
          description: Unexpected Server Error
servers:
  - url: 'https://maptician.com/scim/v2/'
    description: Maptician Live
components:
  parameters:
    maptician_auth:
        in: header
        name: maptician_auth
        description: Authorization token required to access the API
        schema:
          type: string
        required: true
  schemas:
    User:
      type: object
      required:
        - schemas
        - id
        - name
      properties:
        schemas:
          type: array
          items:
            type: string
            description: This is the userId for the user within the Maptician application.  It is unique across all users and cannot be modified.
            enum: 
            - urn:ietf:params:scim:schemas:core:2.0:User
            - urn:ietf:params:scim:schemas:extension:enterprise:2.0:User
        id:
          type: string
          description: This is the userId for Occupants in Maptician.
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          readOnly: true
          format: uuid
        externalId:
          type: string
          description: This is the userId for the user within the source system if one exists.  E.g. an employee's id within Active Directory.
          example: 6f144d94-cb4c-4bcc-81f9-7da322c57b7c
        userName:
          type: string
          description: This is the user's login username within Maptician.  It will generally be set to their primary or work email address at the time of their addition into the Maptician application.  This can be changed within the Maptician application or by modifying the email address collection associated with this user.
          readOnly: true
        name:
          type: object
          description: The components of the Occupant's name.
          properties:
            formatted:
              type: string
              description: The full name, including all middle names, titles, and suffixes as appropriate, formatted for display
              example: "Barbara Jensen"
            familyName:
              type: string
              description: The family name of the User, or last name in most Western languages.
              example: "Jensen"
            givenName:
              type: string
              description: The given name of the User, or first name in most Western languages.
              example: "Barbara"
          required: 
            - familyName
            - givenName
        title:
          type: string
          description: The user's title, such as "Vice President".
          example: "Sr. Accountant"
          minLength: 1
          maxLength: 50
        userType:
          type: string
          description: Used to identify the relationship between the organization and the user.  Typical values used might be "Contractor", "Employee", "Intern", "Temp", "External", and "Unknown", but any value may be used.
          example: "Employee"
          minLength: 1
          maxLength: 25
        timezone:
          type: string
          description: The User's time zone, in IANA Time Zone database format [RFC6557], also known as the "Olson" time zone database format [Olson-TZ]
          example: "America/Los_Angeles"
        active:
          type: boolean
          description: "A Boolean value indicating the user's administrative status.  The definitive meaning of this attribute is determined by the service provider.  As a typical example, a value of true implies that the user is able to log in, while a value of false implies that the user's account has been suspended."
        emails:
          type: array
          description: An array of email address objects for the Occupant.  The value SHOULD be specified according to [RFC5321].  An email address is required if the Occupant should be converted into a User since this will become their userID.
          items:
            type: object
            properties:
              value:
                type: string
                format: email
                description: A lowercase email address for the user.  Canonicalize the value according to [RFC5321], e.g., "bjensen@example.com" instead of "bjensen@EXAMPLE.COM".  Email addresses entered into Maptician will be automatically converted to this format.
                example: "jsmith@example.com"
              primary:
                type: boolean
                description: A single email address should be marked as primary.  This email address is used by Maptician for login access and as the visible email address for the user in the directory and for all communications.
              type:
                type: string
                description: A simple description for the specified email address.  If no email addresses are marked as primary, the first address marked "work" will be used as the user's username for login purposes.  If no email addresses are marked as primary or work, the first valid email address will be used.
                enum:
                - work
                - home
                - other
        phoneNumbers:
          type: array
          description: Phone numbers for the user.  The value SHOULD be specified according to the format defined in [RFC3966], e.g., 'tel:+1-201-555-0123'.  Service providers SHOULD canonicalize the value according to [RFC3966] format, when appropriate.
          items:
            type: object
            properties:
              value:
                type: string
                description: A phone number for the user.  Ideally in [RFC3966] format, but Maptician will attempt to parse and convert non-conforming formats during user creation or updating. Any extensions should also be included in this string.
                example: 'tel:+1-201-555-0123'
              type:
                type: string
                description: A simple description for the specified phone number.
                example: mobile
                enum:
                - mobile
                - cell
                - office
                - work
        photos:
          type: array
          description: A collection of one or more photos of the specified user.  For user creation, Maptician attempts to capture any photos that are labeled "profile" or "thumbnail" for use as the user's profile image
          items:
            type: object
            properties:
              value:
                type: string
                format: uri
                description: A link/uri that points to a resource location representing the user's image.  The resource MUST be a file (e.g., a GIF, JPEG, or PNG image file) rather than a web page containing an image.
              type:
                type: string
                description: A descriptor of the type of user image being linked
                enum:
                - profile
                - thumbnail
    ServiceProviderConfig:
      title: Service Provider Configuration
      description: "SCIM provides a schema for representing the service provider's configuration, identified using the following schema URI: urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig. The service provider configuration resource enables a service provider to discover SCIM specification features in a standardized form as well as provide additional implementation details to clients."
      type: object
      required:
        - patch
        - bulk
        - filter
        - changePassword
        - sort
        - etag
        - authenticationSchemes
      properties:
        documentationUri:
          type: string
          description: An HTTP-addressable URL pointing to the service provider's human-consumable help documentation.
          readOnly: true
        patch:
          type: object
          description: Specifies PATCH configuration options.
          readOnly: true
          properties:
            supported:
              type: boolean
              description: A Boolean value specifying whether or not the patch operation is supported.
        bulk:
          type: object
          description: Specifies bulk configuration options.
          readOnly: true
          properties:
            supported:
              type: boolean
              description: A Boolean value specifying whether or not bulk operations are supported.
            maxOperations:
              type: integer
              description: An integer value specifying the maximum number of operations.
            maxPayloadSize:
              type: integer
              description:  An integer value specifying the maximum payload size in bytes.
        filter:
          type: object
          description: Specifies FILTER options.
          readOnly: true
          properties:
            supported:
              type: boolean
              description: A Boolean value specifying whether or not filter operations are supported
            maxResults:
              type: integer
              description: An integer value specifying the maximum number of resources returned in a response
        changePassword:
          type: object
          properties:
            supported:
              type: boolean
              description: A Boolean value specifying whether or not change password operations are supported
        sort:
          type: object
          properties:
            supported:
              type: boolean
              description: A Boolean value specifying whether or not sorting operations are supported.
        etag:
          type: object
          properties:
            supported:
              type: boolean
              description: A Boolean value specifying whether or not etag operations are supported.  etags are used for versioning changes to resource objects
        authenticationSchemes:
          type: array
          items:
            type: object
            required:
              - type
              - name
              - description
            properties:
              type:
                type: string
                description: Defines the type of authentication method for the entry
                enum:
                  - oauth
                  - oauth2
                  - oathbearertoken
                  - httpbasic
                  - httpdigest
              name:
                type: string
                description: The common authentication scheme name, e.g. HTTP Basic
              description:
                type: string
                description: A description of the authentication scheme
              specUri:
                type: string
                description: An HTTP-addressable URL pointing to the authentication scheme's specification
              documentationUri:
                type: string
                description: An HTTP-addressable URL pointing ot the authentication scheme's usage documentation
    ResourceType:
      type: object
      title: Resource Type
      description: "Specifies the metadata about a resource type.  Resource type resources are READ-ONLY and identified using the following schema URI: urn:ietf:params:scim:schemas:core:2.0:ResourceType."
      required:
        - name
        - description
        - endpoint
        - schema
      properties:
        id:
          type: string
          description: The resource type's server unique id.  This is often the same value as the "name" attribute.
        name:
          type: string
          description: The resource type name.  When applicable, service providers MUST specify the name, e.g., "User" or "Group".  This name is referenced by the "meta.resourceType" attribute in all resources.
        description:
          type: string
          description: The resource type's human-readable description.
        endpoint:
          type: string
          description: The resource type's HTTP-addressable endpoint relative to the Base URL of the service provider, e.g., "Users".
        schema:
          type: string
          description: The resource type's primary/base schema URI, e.g., "urn:ietf:params:scim:schemas:core:2.0:User".  This MUST be equal to the "id" attribute of the associated "Schema" resource.
        schemaExtensions:
          type: array
          items:
            type: object
            required:
              - schema
              - required
            properties:
              schema:
                type: string
                description: The URI of an extended schema, e.g., "urn:edu:2.0:Staff". This MUST be equal to the "id" attribute of a "Schema" resource.
              required:
                type: boolean
                description: A Boolean value that specifies whether or not the schema extension is required for the resource type.  If true, a resource of this type MUST include this schema extension and also include any attributes declared as required in this schema extension.  If false, a resource of this type MAY omit this schema extension.
    SchemaDefinition:
      title: Schema Definition
      description: Defines the specifications and schema in use by resources available and accepted by this SCIM service provider.  For each "schemas" URI value, this schema specifies the defined attribute(s) and their characteristics (mutability, returnability, etc).  For every schema URI used in a resource object, there is a corresponding "Schema" resource.  Unless otherwise specified, all schema attributes are case insensitive.  These resources have a "schemas" attribute with the following schema URI urn:ietf:params:scim:schemas:core:2.0:Schema
      properties:
        id:
          type: string
          description: The unique URI of the schema.  Unlike most other schemas, which use some sort of Globally Unique Identifier (GUID) for the "id", the schema "id" is a URI so that it can be registered and is portable between different service providers and clients.
        name:
          type: string
          description: The schema's human-readable name. e.g., "User" or "Group".
        description:
          type: string
          description: The schema's human-readable description.
        attributes:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description:  The attribute's name.
              type:
                type: string
                description: The attribute's data type. When an attribute is of type "complex", there SHOULD be a corresponding schema attribute "subAttributes" defined, listing the sub-attributes of the attribute.
                enum:
                  - string
                  - boolean
                  - decimal
                  - integer
                  - dateTime
                  - reference
                  - complex
              subAttributes:
                type: object
                description: When an attribute is of type "complex", "subAttributes" defines a set of sub-attributes. "subAttributes" has the same schema sub-attributes as "attributes".
              multiValued:
                type: boolean
                description: A Boolean value indicating the attribute's plurality.
              description:
                type: string
                description: The attribute's human-readable description.
              required:
                type: boolean
                description: A Boolean value that specifies whether or not the attribute is required.
              canonicalValues:
                type: array
                description: A collection of suggested canonical values that MAY be used (e.g., "work" and "home").  In some cases, service providers MAY choose to ignore unsupported values.
                items:
                  type: string
              caseExact:
                type: boolean
                description: A Boolean value that specifies whether or not a string attribute is case sensitive.  The server SHALL use case sensitivity when evaluating filters.  For attributes that are case exact, the server SHALL preserve case for any value  submitted.  If the attribute is case insensitive, the server MAY alter case for a submitted value.  Case sensitivity also impacts how attribute values MAY be compared against filter values.
              mutability:
                type: string
                description: A single keyword indicating the circumstances under which the value of the attribute can be (re)defined.  1) readOnly  The attribute SHALL NOT be modified. 2) readWrite  The attribute MAY be updated and read at any time. This is the default value. 3) immutable  The attribute MAY be defined at resource creation (e.g., POST) or at record replacement via a request (e.g., a PUT).  The attribute SHALL NOT be updated. 4) writeOnly  The attribute MAY be updated at any time.  Attribute values SHALL NOT be returned (e.g., because the value is a stored hash). Note - An attribute with a mutability of "writeOnly" usually also has a returned setting of "never".
              returned:
                type: string
                description: A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request.  Valid keywords are as follows - 1) always  The attribute is always returned, regardless of the contents of the "attributes" parameter.  For example, "id" is always returned to identify a SCIM resource. 2) never  The attribute is never returned.  This may occur because the original attribute value (e.g., a hashed value) is not retained by the service provider.  A service provider MAY allow attributes to be used in a search filter. 3) default  The attribute is returned by default in all SCIM operation responses where attribute values are returned.  If the GET request "attributes" parameter is specified, attribute values are only returned if the attribute is named in the "attributes" parameter. DEFAULT. 4) request  The attribute is returned in response to any PUT, POST, or PATCH operations if the attribute was specified by the client (for example, the attribute was modified).  The attribute is returned in a SCIM query operation only if specified in the "attributes" parameter.
              uniqueness:
                type: string
                description:  A single keyword value that specifies how the service provider enforces uniqueness of attribute values.  A server MAY reject an invalid value based on uniqueness by returning HTTP response code 400 (Bad Request).  A client MAY enforce uniqueness on the client side to a greater degree than the service provider enforces.  For example, a client could make a value unique while the server has uniqueness of "none".  Valid keywords are as follows - 1) none  The values are not intended to be unique in any way. DEFAULT. 2) server  The value SHOULD be unique within the context of the current SCIM endpoint (or tenancy) and MAY be globally unique (e.g., a "username", email address, or other server-generated key or counter).  No two resources on the same server SHOULD possess the same value. 3) global  The value SHOULD be globally unique (e.g., an email address, a GUID, or other value).  No two resources on any server SHOULD possess the same value.
              referenceTypes:
                type: array
                description: "A multi-valued array of JSON strings that indicate the SCIM resource types that may be referenced.  Valid values are as follows - 1)  A SCIM resource type (e.g., User or Group), 2)  external - indicating that the resource is an external resource (e.g., a photo), or 3) uri - indicating that the reference is to a service endpoint or an identifier (e.g., a schema URN). This attribute is only applicable for attributes that are of type reference"
                items:
                  type: string
    ListResponse:
      title: List Response
      description: Schema of the server response to multi-document queries.  Contains the total number of results for the query and an array of the responses under the property "Resources".
      properties:
        schemas:
          type: array
          items:
            type: string
            description: Includes the formal description of the list response schema.
            enum: 
            - urn:ietf:params:scim:api:messages:2.0:ListResponse
        totalResults:
          type: integer
        Resources:
          type: array
          description: Contains the list of requested documents based on the query
          items:
            type: object
