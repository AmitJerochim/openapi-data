{
  "openapi" : "3.0.2",
  "info" : {
    "title" : "Uilicious API (working copy)",
    "version" : "3.0.0",
    "description" : "Uilicious Public API - using the accessKey token",
    "contact" : {
      "name" : "Eugene Cheah",
      "url" : "https://uilicious.com",
      "email" : "eugene@uilicious.com"
    }
  },
  "servers" : [ {
    "url" : "https://api.uilicious.com/v3.0",
    "description" : "Uilicious Cloud Production Server URL - for v3.0 API"
  } ],
  "paths" : {
    "/space/list" : {
      "summary" : "Get the list of space info object in an array",
      "description" : "Note: This path supports both GET, and POST endpoints.",
      "get" : {
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/space-info-result-list"
                }
              }
            },
            "description" : "Return a list of \"space\" info object in an array"
          }
        },
        "summary" : "/space/list",
        "description" : "Get the list of space info object in an array.\n\nNote: This path supports both GET, and POST endpoints."
      }
    },
    "/space/{space_id}/project/list" : {
      "summary" : "Get the list of project information in an array",
      "description" : "Note: This path supports both GET, and POST endpoints.",
      "get" : {
        "parameters" : [ {
          "examples" : {
            "base58_guid" : {
              "value" : "ABCDEFGHIJK1234567890"
            }
          },
          "name" : "space_id",
          "description" : "Uilicious spaces unique ID",
          "schema" : {
            "type" : "string"
          },
          "in" : "path",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/project-info-result-list"
                }
              }
            },
            "description" : "Result list of project object information"
          }
        },
        "summary" : "/space/{space_id}/project/list",
        "description" : "list of projects inside a given space ID\n\nNote: This path supports both GET, and POST endpoints."
      },
      "parameters" : [ {
        "examples" : {
          "base58_guid" : {
            "value" : "ABCDEFGHIJK1234567890"
          }
        },
        "name" : "space_id",
        "description" : "Uilicious spaces unique ID",
        "schema" : {
          "type" : "string"
        },
        "in" : "path",
        "required" : true
      } ]
    },
    "/project/file/query" : {
      "get" : {
        "parameters" : [ {
          "examples" : {
            "base58_guid" : {
              "value" : "ABCDEFGHIJK1234567890"
            }
          },
          "name" : "projectID",
          "description" : "Uilicious project base58 GUID",
          "schema" : {
            "type" : "string"
          },
          "in" : "query"
        }, {
          "name" : "type",
          "description" : "file listing type mode (note that only list is officially supported)",
          "schema" : {
            "enum" : [ "list" ],
            "type" : "string"
          },
          "in" : "query"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/project-file-result-list"
                }
              }
            },
            "description" : "Retuns a full list of various files and folders within a project"
          }
        },
        "summary" : "/project/file/query",
        "description" : "Retuns a full list of various files and folders within a project\n\nNote that only `type:list` is planned to be supported `type:tree` will be dropped in the future, and should not be used.\n\n---\n\nProject API is also planned to be changed into `/project/{project_id}/command` format in v4 onwards"
      }
    },
    "/project/file/get" : {
      "post" : {
        "parameters" : [ {
          "examples" : {
            "base58_guid" : {
              "value" : "ABCDEFGHIJK1234567890"
            }
          },
          "name" : "projectID",
          "description" : "Uilicious project base58 GUID",
          "schema" : {
            "type" : "string"
          },
          "in" : "query"
        }, {
          "examples" : {
            "file_path_example" : {
              "value" : "1. Navigation.test.js"
            }
          },
          "name" : "filePath",
          "description" : "File path content to return",
          "schema" : {
            "type" : "string"
          },
          "in" : "query"
        }, {
          "name" : "rawContent",
          "description" : "Use true, for the API to return the file content in raw format - useful for binary content.",
          "schema" : {
            "type" : "boolean"
          },
          "in" : "query"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/project-file-json-data"
                }
              },
              "binary" : { }
            },
            "description" : "Project file, inside a json result object.\n\nRaw binary response of the file occurs when `rawContent:true` is used."
          }
        },
        "summary" : "/project/file/get",
        "description" : "Get and return the file content,\neither in its raw form, or as a json result object\n\n---\n\nProject API is also planned to be changed into `/project/{project_id}/command` format in v4 onwards"
      }
    },
    "/project/file/put" : {
      "post" : {
        "parameters" : [ {
          "examples" : {
            "base58_guid" : {
              "value" : "ABCDEFGHIJK1234567890"
            }
          },
          "name" : "projectID",
          "description" : "Uilicious project base58 GUID",
          "schema" : {
            "type" : "string"
          },
          "in" : "query"
        }, {
          "examples" : {
            "file_path_example" : {
              "value" : "1. Navigation.test.js"
            }
          },
          "name" : "filePath",
          "description" : "File path content to return",
          "schema" : {
            "type" : "string"
          },
          "in" : "query"
        }, {
          "examples" : {
            "file_string" : {
              "value" : "You can pass a string, in place of a binary file - btw"
            }
          },
          "name" : "content",
          "description" : "Raw binary or string content for updating the file",
          "schema" : {
            "format" : "binary",
            "type" : "string"
          },
          "in" : "query"
        }, {
          "examples" : {
            "true" : {
              "value" : "true"
            }
          },
          "name" : "overwrite",
          "description" : "use true, if you intent to overwrite existing files - use false if you intent to throw an error if an existing file is found",
          "schema" : {
            "type" : "boolean"
          },
          "in" : "query"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/result-true"
                }
              }
            },
            "description" : "`result:true` when update occur succesfully\n"
          }
        },
        "summary" : "/project/file/put",
        "description" : "Get and return the file content,\neither in its raw form, or as a json result object\n\n---\n\nProject API is also planned to be changed into `/project/{project_id}/command` format in v4 onwards"
      }
    },
    "/project/testrun/start" : {
      "post" : {
        "parameters" : [ {
          "examples" : {
            "base58_guid" : {
              "value" : "ABCDEFGHIJK1234567890"
            }
          },
          "name" : "projectID",
          "description" : "Uilicious project base58 GUID",
          "schema" : {
            "type" : "string"
          },
          "in" : "query"
        }, {
          "examples" : {
            "file_path_example" : {
              "value" : "1. Navigation.test.js"
            }
          },
          "name" : "runFile",
          "description" : "Uilicious test file to execute, including the ending file type `.test.js`",
          "schema" : {
            "type" : "string"
          },
          "in" : "query"
        }, {
          "name" : "browser",
          "description" : "browser to use - defaults to chrome. Note you will be limited to the browsers in your current plan.",
          "schema" : {
            "enum" : [ "chrome", "firefox", "safari", "ie11", "edge" ],
            "type" : "string"
          },
          "in" : "query",
          "required" : false
        }, {
          "name" : "serverRegion",
          "description" : "server region to use - applicable only to `chrome/firefox`",
          "schema" : {
            "enum" : [ "default", "unitedkingdom", "singapore", "canada-toronto", "india-bangalore", "netherlands-amsterdamc", "usa-newyork", "usa-sanfranc", "germany-frankfurt", "indonesia-jarkata", "hongkong" ],
            "type" : "string"
          },
          "in" : "query"
        }, {
          "name" : "userAgent",
          "description" : "Browser user agent modified when used with `chrome`",
          "schema" : {
            "type" : "string"
          },
          "in" : "query"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : { }
            },
            "description" : "@TODO - update with full documentation of response"
          }
        },
        "summary" : "/project/testrun/start",
        "description" : "Get and return the file content,\neither in its raw form, or as a json result object\n\n---\n\nProject API is also planned to be changed into `/project/{project_id}/command` format in v4 onwards"
      }
    }
  },
  "components" : {
    "schemas" : {
      "space-info-obj" : {
        "title" : "Root Type for space-info-obj",
        "description" : "Information for a single space",
        "type" : "object",
        "properties" : {
          "_userRole" : {
            "description" : "User role for the currentt logged in user in the space",
            "enum" : [ "owner", "editor", "reporter" ],
            "type" : "string"
          },
          "_oid" : {
            "description" : "Uilicious Space base58 GUID",
            "type" : "string"
          },
          "userQuota" : {
            "description" : "Current user quota subscribed to the space",
            "type" : "integer"
          },
          "name" : {
            "description" : "Display name for the current space object",
            "type" : "string"
          }
        },
        "example" : {
          "_oid" : "ABCDEFGHIJK1234567890",
          "_userRole" : "owner",
          "userQuota" : 5,
          "name" : "Space 1"
        }
      },
      "space-info-result-list" : {
        "title" : "Root Type for space-list-response",
        "description" : "JSON response for /space/list endpoint",
        "type" : "object",
        "properties" : {
          "result" : {
            "description" : "List of space object information",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/space-info-obj"
            }
          }
        },
        "example" : {
          "result" : [ {
            "_userRole" : "owner",
            "_oid" : "ABCDEFGHIJK1234567890",
            "userQuota" : 5,
            "name" : "Space 1"
          }, {
            "_userRole" : "editor",
            "_oid" : "BBCDEFGHIJK1234567890",
            "userQuota" : 5,
            "name" : "Space 2"
          } ]
        }
      },
      "project-info-obj" : {
        "title" : "Root Type for project-info-obj",
        "description" : "Project information object",
        "type" : "object",
        "properties" : {
          "spaceID" : {
            "description" : "Uilicious Space Base58 GUID, which this object belongs to",
            "type" : "string"
          },
          "_oid" : {
            "description" : "Uilicious Project Base58 GUID",
            "type" : "string"
          },
          "name" : {
            "description" : "Display name of the project",
            "type" : "string"
          }
        },
        "example" : {
          "spaceID" : "ABCDEFGHIJK1234567890",
          "_oid" : "OBCDEFGHIJK1234567890",
          "name" : "Project Name"
        }
      },
      "project-info-result-list" : {
        "title" : "Root Type for project-info-result-list",
        "description" : "Result list of project info",
        "type" : "object",
        "properties" : {
          "result" : {
            "description" : "List of project object information ",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "spaceID" : {
                  "type" : "string"
                },
                "_oid" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "example" : {
          "result" : [ {
            "spaceID" : "2uXNtaXPuRWfU3TUTruCwt",
            "_oid" : "654vZbtxKgYRBSSaTHfpy1",
            "name" : "Welcome"
          }, {
            "spaceID" : "2uXNtaX123WfU3TUTruCwt",
            "_oid" : "654vZbtxKgYRBSSaTHfpy2",
            "name" : "Super Project"
          } ]
        }
      },
      "project-file-result-list" : {
        "title" : "Root Type for project-file-result-list",
        "description" : "List of various files and folders inside a project",
        "type" : "object",
        "properties" : {
          "result" : {
            "description" : "result array of various files and folder paths within the project.\n\n- paths which ends with \"/\" are folders\n- uilicious test files ends with \".test.js\"\n- paths with \"/\" are files within sub folders",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "example" : {
          "result" : [ "1. Navigation.test.js", "2. Fill in forms.test.js", "3. Clicking.test.js", "4. Check for messages.test.js", "5. When a test fails.test.js", "folder/", "folder/test-file.test.js", "new-tab.test.js" ]
        }
      },
      "project-file-json-data" : {
        "title" : "Root Type for project-file-json-data",
        "description" : "project file data - as json result data",
        "type" : "object",
        "properties" : {
          "result" : {
            "description" : "Result string, with encoding",
            "type" : "string"
          }
        },
        "example" : {
          "result" : "<test script file, with / escape encoding>"
        }
      },
      "result-true" : {
        "title" : "Root Type for result-true",
        "description" : "JSON result object, with a result of `true`",
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "boolean"
          }
        },
        "example" : {
          "result" : true
        }
      }
    },
    "securitySchemes" : {
      "accessKey_with_header" : {
        "type" : "apiKey",
        "description" : "Uilicious authentication accessKey - sent as either a header, or a parameter.",
        "name" : "accessKey",
        "in" : "header"
      },
      "accessKey_with_parameter" : {
        "type" : "apiKey",
        "description" : "Uilicious authentication accessKey - sent as either a header, or a parameter.",
        "name" : "accessKey",
        "in" : "query"
      }
    }
  },
  "security" : [ {
    "accessKey_with_parameter" : [ ]
  }, {
    "accessKey_with_header" : [ ]
  } ]
}