{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Pelesys Galaxy Central API V3",
    "description" : "The Pelesys API provides entry points for third party developers to interact with the data of the users in the Galaxy suite.",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://test.pelesys.com:8501/"
  }, {
    "url" : "https://pele-104.pelesys.net:444/"
  } ],
  "tags" : [ {
    "name" : "Authentication",
    "description" : "Authentication is performed by the caller first requesting the access token and the refresh token by providing the \nlogin credentials using the x-www-form-urlencoded format. Subsequent calls to the API endpoints then require the access token\nbe attached in the Authorization header as a means to verify that the caller is authorized.\n\nAn access token has an expiration period of 1 hour. When the access token has expired, the caller can use the refresh token to request a new pair of access and\nrefresh tokens. Refresh tokens have an expiration period of 8 hours. An expired refresh token cannot be used to request a \nnew access token and the caller must perform the authentication steps again. Format\n\nAccess tokens are created using the JWT format, conversely the refresh token is not a JWT."
  }, {
    "name" : "User Groups",
    "description" : "A User Group that a user is assigned to."
  }, {
    "name" : "Settings",
    "description" : "Relevant to retrieving and saving various settings and preferences related to the system"
  }, {
    "name" : "Contract",
    "description" : "A group-like structure that serves as a qualification criteria"
  } ],
  "paths" : {
    "/token" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get Token",
        "description" : "Request an user access token using the login credentials",
        "parameters" : [ {
          "in" : "header",
          "name" : "Referer",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "content" : {
            "text" : {
              "schema" : {
                "type" : "string",
                "example" : "grant_type=password&username=user1&password=1234567"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "access_token", "expires_in", "refresh_expires_in", "refresh_token", "token_type" ],
                  "type" : "object",
                  "properties" : {
                    "access_token" : {
                      "type" : "string",
                      "description" : "Access token string"
                    },
                    "refresh_token" : {
                      "type" : "string",
                      "description" : "Refresh token string"
                    },
                    "refresh_expires_in" : {
                      "type" : "number",
                      "description" : "Active duration of the refresh token in seconds"
                    },
                    "token_type" : {
                      "type" : "string",
                      "description" : "Type of the token, always \"bearer\""
                    },
                    "expires_in" : {
                      "type" : "number",
                      "description" : "Active duration of the access token in seconds"
                    }
                  }
                },
                "example" : {
                  "access_token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoibWFzdGVyIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFtZWlkZW50aWZpZXIiOiJmODIzYWRmYS1iMThkLTQ2ZDQtYmZiYi1kODA0OWI5MzExYTMiLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL2dyb3Vwc2lkIjoiOGJhMzI3YmItZjAzNy00Y2M5LWEyYjQtMDM4MTEzNTc3ZGMyIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjoidXNlciIsIm5iZiI6MTU1MDY4MTYyNSwiZXhwIjoxNTUwNjg1MjI1fQ.9lKr0sP6ydd1ncnXtpXmbcZygAL5IYID-NsGkScV5qQ",
                  "token_type" : "bearer",
                  "expires_in" : 3599,
                  "refresh_token" : "dff92dffc6ee409f90bf8106eece6c9c",
                  "refresh_expires_in" : 7199
                }
              }
            }
          },
          "400" : {
            "description" : "Returned when the refresh token is invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "error" ],
                  "type" : "object",
                  "properties" : {
                    "errorDescription" : {
                      "type" : "string",
                      "description" : "An optional message describing a reason behind a grant rejection# Group Profile"
                    },
                    "error" : {
                      "type" : "string",
                      "description" : "Oauth error type"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/me/profile" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get Profile",
        "description" : "Retrieve the user profile of the current user\n\n***",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get All",
        "description" : "Retrieve all users in the system\n\n***",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of users"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of users",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "userId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                    "employeeId" : "e123",
                    "title" : "employee1",
                    "firstname" : "John",
                    "middlename" : "Anthony",
                    "lastname" : "Wick",
                    "loginname" : "JWick123",
                    "password" : "password123",
                    "email" : "pelesys@email.com",
                    "photo" : "",
                    "company" : "Pelesys",
                    "department" : "pilot",
                    "notes" : "this is a user",
                    "employmentdate" : "2018-04-03T20:23:17.8648866Z",
                    "expirydate" : "2020-04-03T20:23:17.8648866Z",
                    "extendedRoleId" : "a3aaddfa-97a5-4723-af2a-442b4144db98",
                    "userroleids" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "usergroupids" : [ "50780198-b1e9-4536-b939-eb31b69701aa" ],
                    "contractids" : [ "b7380930-0149-4171-8f52-74e0ebf26552" ],
                    "equipmentids" : [ "0366abda-2cca-4f7f-8102-3b27c65e0976" ],
                    "jobroleids" : [ "e73c635d-5055-4868-9807-cecbc2a75a5a" ],
                    "organizationLocations" : [ {
                      "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                      "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                      "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                      "locationName" : "Kaer morhen",
                      "organizationName" : "Pelesys",
                      "loginName" : "admin",
                      "firstName" : "firstName",
                      "lastName" : "lastName",
                      "email" : "user@g.com",
                      "employeeId" : "507949"
                    } ],
                    "userAddress" : {
                      "addressId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                      "street1" : "123 Fake street",
                      "street2" : "456 Fake street",
                      "city" : "Vancouver",
                      "provinceId" : "BC",
                      "countryId" : "CA",
                      "postalCode" : "A1A1A1",
                      "phonenumber" : "604-123-4567",
                      "cellnumber" : "778-123-6543",
                      "faxnumber" : "604-987-7890",
                      "placeofbirth" : "Vancouver",
                      "citizenshipId" : "CA",
                      "gender" : 1,
                      "dateofbirth" : "1996-04-03T20:23:17.8648866Z",
                      "licensenumber" : "4h2-6j8",
                      "costcenter" : "c123"
                    }
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Authentication" ],
        "summary" : "Update",
        "description" : "Update a user\n\n::: note\n\n## Rules\n\n- Login name can only be changed by administrators\n\n- Login Name must be unique including comparison with deleted users\n\n- (First Name, Last Name, Email) must be unique including comparison with deleted users\n\n- Cannot assign duplicate System Roles\n\n- Assigned System Roles must exist\n\n- User must be assigned to atleast one System Role\n\n- Only users with the Administrator role can re assign System Roles\n\n- Cannot assign duplicate User Groups\n\n- Assigned User Groups must exist\n\n- Login Name length 3-50 characters inclusive\n\n- First Name length 1-20 characters inclusive\n\n- Last Name length 1-25 characters inclusive\n\n- Middle Name length 20 characters max if provided. Null or empty is acceptable.\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "email", "firstname", "lastname", "loginname", "password", "userId", "userroleids" ],
                "type" : "object",
                "properties" : {
                  "userId" : {
                    "type" : "string",
                    "description" : "Unique ID of the user"
                  },
                  "employeeId" : {
                    "type" : "string",
                    "description" : "ID given by the user's company"
                  },
                  "title" : {
                    "type" : "string",
                    "description" : "Title given to the user"
                  },
                  "firstname" : {
                    "type" : "string",
                    "description" : "User's first name"
                  },
                  "middlename" : {
                    "type" : "string",
                    "description" : "User's middle name"
                  },
                  "lastname" : {
                    "type" : "string",
                    "description" : "User's last name"
                  },
                  "loginname" : {
                    "type" : "string",
                    "description" : "User's unique login name they will use to log in"
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "Password that the user will use to log in"
                  },
                  "email" : {
                    "type" : "string",
                    "description" : "User's email address"
                  },
                  "photo" : {
                    "type" : "string",
                    "description" : "string representation of a photo"
                  },
                  "company" : {
                    "type" : "string",
                    "description" : "Name of the user's company"
                  },
                  "department" : {
                    "type" : "string",
                    "description" : "Name of the user's department"
                  },
                  "notes" : {
                    "type" : "string",
                    "description" : "Additional notes about the user"
                  },
                  "employmentdate" : {
                    "type" : "string",
                    "description" : "The date the user was employed"
                  },
                  "expirydate" : {
                    "type" : "string",
                    "description" : "The date the user'a account will expire"
                  },
                  "extendedRoleId" : {
                    "type" : "string",
                    "description" : "A system role id when an override exists, null if not"
                  },
                  "userroleids" : {
                    "type" : "array",
                    "description" : "A collection of user role ids that the user is assigned to",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "usergroupids" : {
                    "type" : "array",
                    "description" : "A collection of user group ids that the user is assigned to",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "contractids" : {
                    "type" : "array",
                    "description" : "A collection of contract ids associated with the user",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "equipmentids" : {
                    "type" : "array",
                    "description" : "A collection of equipment ids associated with the user",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "jobroleids" : {
                    "type" : "array",
                    "description" : "A collection of job role ids associated with the user",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "organizationLocations" : {
                    "type" : "array",
                    "description" : "A list of an organization location pairing that the user is associated with",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "userAddress" : {
                    "required" : [ "addressId", "countryId" ],
                    "type" : "object",
                    "properties" : {
                      "dateofbirth" : {
                        "type" : "string",
                        "description" : "The date the user'a account will expire"
                      },
                      "licensenumber" : {
                        "type" : "string",
                        "description" : "The user's license number"
                      },
                      "gender" : {
                        "type" : "number",
                        "description" : "The user's gender"
                      },
                      "city" : {
                        "type" : "string",
                        "description" : "The name of the city the user resides in"
                      },
                      "postalCode" : {
                        "type" : "string",
                        "description" : "The user's postal code"
                      },
                      "phonenumber" : {
                        "type" : "string",
                        "description" : "The user's home phone number"
                      },
                      "placeofbirth" : {
                        "type" : "string",
                        "description" : "The user's place of birth"
                      },
                      "provinceId" : {
                        "type" : "string",
                        "description" : "The postal abbreviations of the province/state the user resides in"
                      },
                      "citizenshipId" : {
                        "type" : "string",
                        "description" : "The abbreviations of the country the user has citizenship in"
                      },
                      "countryId" : {
                        "type" : "string",
                        "description" : "The abbreviations of the country the user resides in"
                      },
                      "addressId" : {
                        "type" : "string",
                        "description" : "Unique ID of the user address"
                      },
                      "cellnumber" : {
                        "type" : "string",
                        "description" : "The user's cellphone number"
                      },
                      "street1" : {
                        "type" : "string",
                        "description" : "The user's mailing address"
                      },
                      "street2" : {
                        "type" : "string",
                        "description" : "The user's alternate mailing address"
                      },
                      "faxnumber" : {
                        "type" : "string",
                        "description" : "The user's fax number"
                      },
                      "costcenter" : {
                        "type" : "string",
                        "description" : "The user's cost center"
                      }
                    }
                  }
                },
                "example" : {
                  "userId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                  "employeeId" : "e123",
                  "title" : "employee1",
                  "firstname" : "John",
                  "middlename" : "Anthony",
                  "lastname" : "Wick",
                  "loginname" : "JWick123",
                  "password" : "password123",
                  "email" : "pelesys@email.com",
                  "photo" : "",
                  "company" : "Pelesys",
                  "department" : "pilot",
                  "notes" : "this is a user",
                  "employmentdate" : "2018-04-03T20:23:17.8648866Z",
                  "expirydate" : "2020-04-03T20:23:17.8648866Z",
                  "extendedRoleId" : "a3aaddfa-97a5-4723-af2a-442b4144db98",
                  "userroleids" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "usergroupids" : [ "50780198-b1e9-4536-b939-eb31b69701aa" ],
                  "contractids" : [ "b7380930-0149-4171-8f52-74e0ebf26552" ],
                  "equipmentids" : [ "0366abda-2cca-4f7f-8102-3b27c65e0976" ],
                  "jobroleids" : [ "e73c635d-5055-4868-9807-cecbc2a75a5a" ],
                  "organizationLocations" : [ {
                    "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                    "locationName" : "Kaer morhen",
                    "organizationName" : "Pelesys",
                    "loginName" : "admin",
                    "firstName" : "firstName",
                    "lastName" : "lastName",
                    "email" : "user@g.com",
                    "employeeId" : "507949"
                  } ],
                  "userAddress" : {
                    "addressId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                    "street1" : "123 Fake street",
                    "street2" : "456 Fake street",
                    "city" : "Vancouver",
                    "provinceId" : "BC",
                    "countryId" : "CA",
                    "postalCode" : "A1A1A1",
                    "phonenumber" : "604-123-4567",
                    "cellnumber" : "778-123-6543",
                    "faxnumber" : "604-987-7890",
                    "placeofbirth" : "Vancouver",
                    "citizenshipId" : "CA",
                    "gender" : 1,
                    "dateofbirth" : "1996-04-03T20:23:17.8648866Z",
                    "licensenumber" : "4h2-6j8",
                    "costcenter" : "c123"
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "User Cannot Be Found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Create",
        "description" : "Create a new user in the system\n\n::: note\n\n## Rules\n\n-    Password must be 8-20 characters long, have no leading/trailing whitespace, and contain no special characters.\n\n-   Login Name must be unique including comparison with deleted users\n\n-   (First Name, Last Name, Email) must be unique including comparison with deleted users\n\n-   Cannot assign duplicate System Roles\n\n-   Assigned System Roles must exist\n\n-   User must be assigned to atleast one System Role\n\n-    Cannot assign duplicate User Groups\n\n-    Assigned User Groups must exist\n\n-   Login Name length 3-50 characters inclusive\n\n-   First Name length 1-20 characters inclusive\n\n-   Last Name length 1-25 characters inclusive\n\n-   Middle Name length 20 characters max if provided. Null or empty is acceptable.\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "email", "firstname", "lastname", "loginname", "password", "userId", "userroleids" ],
                "type" : "object",
                "properties" : {
                  "userId" : {
                    "type" : "string",
                    "description" : "Unique ID of the user"
                  },
                  "employeeId" : {
                    "type" : "string",
                    "description" : "ID given by the user's company"
                  },
                  "title" : {
                    "type" : "string",
                    "description" : "Title given to the user"
                  },
                  "firstname" : {
                    "type" : "string",
                    "description" : "User's first name"
                  },
                  "middlename" : {
                    "type" : "string",
                    "description" : "User's middle name"
                  },
                  "lastname" : {
                    "type" : "string",
                    "description" : "User's last name"
                  },
                  "loginname" : {
                    "type" : "string",
                    "description" : "User's unique login name they will use to log in"
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "Password that the user will use to log in"
                  },
                  "email" : {
                    "type" : "string",
                    "description" : "User's email address"
                  },
                  "photo" : {
                    "type" : "string",
                    "description" : "string representation of a photo"
                  },
                  "company" : {
                    "type" : "string",
                    "description" : "Name of the user's company"
                  },
                  "department" : {
                    "type" : "string",
                    "description" : "Name of the user's department"
                  },
                  "notes" : {
                    "type" : "string",
                    "description" : "Additional notes about the user"
                  },
                  "employmentdate" : {
                    "type" : "string",
                    "description" : "The date the user was employed"
                  },
                  "expirydate" : {
                    "type" : "string",
                    "description" : "The date the user'a account will expire"
                  },
                  "extendedRoleId" : {
                    "type" : "string",
                    "description" : "A system role id when an override exists, null if not"
                  },
                  "userroleids" : {
                    "type" : "array",
                    "description" : "A collection of user role ids that the user is assigned to",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "usergroupids" : {
                    "type" : "array",
                    "description" : "A collection of user group ids that the user is assigned to",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "contractids" : {
                    "type" : "array",
                    "description" : "A collection of contract ids associated with the user",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "equipmentids" : {
                    "type" : "array",
                    "description" : "A collection of equipment ids associated with the user",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "jobroleids" : {
                    "type" : "array",
                    "description" : "A collection of job role ids associated with the user",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "organizationLocations" : {
                    "type" : "array",
                    "description" : "A list of an organization location pairing that the user is associated with",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "userAddress" : {
                    "required" : [ "addressId", "countryId" ],
                    "type" : "object",
                    "properties" : {
                      "dateofbirth" : {
                        "type" : "string",
                        "description" : "The date the user'a account will expire"
                      },
                      "licensenumber" : {
                        "type" : "string",
                        "description" : "The user's license number"
                      },
                      "gender" : {
                        "type" : "number",
                        "description" : "The user's gender"
                      },
                      "city" : {
                        "type" : "string",
                        "description" : "The name of the city the user resides in"
                      },
                      "postalCode" : {
                        "type" : "string",
                        "description" : "The user's postal code"
                      },
                      "phonenumber" : {
                        "type" : "string",
                        "description" : "The user's home phone number"
                      },
                      "placeofbirth" : {
                        "type" : "string",
                        "description" : "The user's place of birth"
                      },
                      "provinceId" : {
                        "type" : "string",
                        "description" : "The postal abbreviations of the province/state the user resides in"
                      },
                      "citizenshipId" : {
                        "type" : "string",
                        "description" : "The abbreviations of the country the user has citizenship in"
                      },
                      "countryId" : {
                        "type" : "string",
                        "description" : "The abbreviations of the country the user resides in"
                      },
                      "addressId" : {
                        "type" : "string",
                        "description" : "Unique ID of the user address"
                      },
                      "cellnumber" : {
                        "type" : "string",
                        "description" : "The user's cellphone number"
                      },
                      "street1" : {
                        "type" : "string",
                        "description" : "The user's mailing address"
                      },
                      "street2" : {
                        "type" : "string",
                        "description" : "The user's alternate mailing address"
                      },
                      "faxnumber" : {
                        "type" : "string",
                        "description" : "The user's fax number"
                      },
                      "costcenter" : {
                        "type" : "string",
                        "description" : "The user's cost center"
                      }
                    }
                  }
                },
                "example" : {
                  "userId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                  "employeeId" : "e123",
                  "title" : "employee1",
                  "firstname" : "John",
                  "middlename" : "Anthony",
                  "lastname" : "Wick",
                  "loginname" : "JWick123",
                  "password" : "password123",
                  "email" : "pelesys@email.com",
                  "photo" : "",
                  "company" : "Pelesys",
                  "department" : "pilot",
                  "notes" : "this is a user",
                  "employmentdate" : "2018-04-03T20:23:17.8648866Z",
                  "expirydate" : "2020-04-03T20:23:17.8648866Z",
                  "extendedRoleId" : "a3aaddfa-97a5-4723-af2a-442b4144db98",
                  "userroleids" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "usergroupids" : [ "50780198-b1e9-4536-b939-eb31b69701aa" ],
                  "contractids" : [ "b7380930-0149-4171-8f52-74e0ebf26552" ],
                  "equipmentids" : [ "0366abda-2cca-4f7f-8102-3b27c65e0976" ],
                  "jobroleids" : [ "e73c635d-5055-4868-9807-cecbc2a75a5a" ],
                  "organizationLocations" : [ {
                    "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                    "locationName" : "Kaer morhen",
                    "organizationName" : "Pelesys",
                    "loginName" : "admin",
                    "firstName" : "firstName",
                    "lastName" : "lastName",
                    "email" : "user@g.com",
                    "employeeId" : "507949"
                  } ],
                  "userAddress" : {
                    "addressId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                    "street1" : "123 Fake street",
                    "street2" : "456 Fake street",
                    "city" : "Vancouver",
                    "provinceId" : "BC",
                    "countryId" : "CA",
                    "postalCode" : "A1A1A1",
                    "phonenumber" : "604-123-4567",
                    "cellnumber" : "778-123-6543",
                    "faxnumber" : "604-987-7890",
                    "placeofbirth" : "Vancouver",
                    "citizenshipId" : "CA",
                    "gender" : 1,
                    "dateofbirth" : "1996-04-03T20:23:17.8648866Z",
                    "licensenumber" : "4h2-6j8",
                    "costcenter" : "c123"
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "email", "firstname", "lastname", "loginname", "password", "userId", "userroleids" ],
                  "type" : "object",
                  "properties" : {
                    "expirydate" : {
                      "type" : "string",
                      "description" : "The date the user'a account will expire"
                    },
                    "firstname" : {
                      "type" : "string",
                      "description" : "User's first name"
                    },
                    "notes" : {
                      "type" : "string",
                      "description" : "Additional notes about the user"
                    },
                    "loginname" : {
                      "type" : "string",
                      "description" : "User's unique login name they will use to log in"
                    },
                    "organizationLocations" : {
                      "type" : "array",
                      "description" : "A list of an organization location pairing that the user is associated with",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "middlename" : {
                      "type" : "string",
                      "description" : "User's middle name"
                    },
                    "photo" : {
                      "type" : "string",
                      "description" : "string representation of a photo"
                    },
                    "contractids" : {
                      "type" : "array",
                      "description" : "A collection of contract ids associated with the user",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "employeeId" : {
                      "type" : "string",
                      "description" : "ID given by the user's company"
                    },
                    "usergroupids" : {
                      "type" : "array",
                      "description" : "A collection of user group ids that the user is assigned to",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "title" : {
                      "type" : "string",
                      "description" : "Title given to the user"
                    },
                    "userroleids" : {
                      "type" : "array",
                      "description" : "A collection of user role ids that the user is assigned to",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "userId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user"
                    },
                    "lastname" : {
                      "type" : "string",
                      "description" : "User's last name"
                    },
                    "employmentdate" : {
                      "type" : "string",
                      "description" : "The date the user was employed"
                    },
                    "userAddress" : {
                      "required" : [ "addressId", "countryId" ],
                      "type" : "object",
                      "properties" : {
                        "dateofbirth" : {
                          "type" : "string",
                          "description" : "The date the user'a account will expire"
                        },
                        "licensenumber" : {
                          "type" : "string",
                          "description" : "The user's license number"
                        },
                        "gender" : {
                          "type" : "number",
                          "description" : "The user's gender"
                        },
                        "city" : {
                          "type" : "string",
                          "description" : "The name of the city the user resides in"
                        },
                        "postalCode" : {
                          "type" : "string",
                          "description" : "The user's postal code"
                        },
                        "phonenumber" : {
                          "type" : "string",
                          "description" : "The user's home phone number"
                        },
                        "placeofbirth" : {
                          "type" : "string",
                          "description" : "The user's place of birth"
                        },
                        "provinceId" : {
                          "type" : "string",
                          "description" : "The postal abbreviations of the province/state the user resides in"
                        },
                        "citizenshipId" : {
                          "type" : "string",
                          "description" : "The abbreviations of the country the user has citizenship in"
                        },
                        "countryId" : {
                          "type" : "string",
                          "description" : "The abbreviations of the country the user resides in"
                        },
                        "addressId" : {
                          "type" : "string",
                          "description" : "Unique ID of the user address"
                        },
                        "cellnumber" : {
                          "type" : "string",
                          "description" : "The user's cellphone number"
                        },
                        "street1" : {
                          "type" : "string",
                          "description" : "The user's mailing address"
                        },
                        "street2" : {
                          "type" : "string",
                          "description" : "The user's alternate mailing address"
                        },
                        "faxnumber" : {
                          "type" : "string",
                          "description" : "The user's fax number"
                        },
                        "costcenter" : {
                          "type" : "string",
                          "description" : "The user's cost center"
                        }
                      }
                    },
                    "password" : {
                      "type" : "string",
                      "description" : "Password that the user will use to log in"
                    },
                    "company" : {
                      "type" : "string",
                      "description" : "Name of the user's company"
                    },
                    "extendedRoleId" : {
                      "type" : "string",
                      "description" : "A system role id when an override exists, null if not"
                    },
                    "department" : {
                      "type" : "string",
                      "description" : "Name of the user's department"
                    },
                    "jobroleids" : {
                      "type" : "array",
                      "description" : "A collection of job role ids associated with the user",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "email" : {
                      "type" : "string",
                      "description" : "User's email address"
                    },
                    "equipmentids" : {
                      "type" : "array",
                      "description" : "A collection of equipment ids associated with the user",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "userId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                  "employeeId" : "e123",
                  "title" : "employee1",
                  "firstname" : "John",
                  "middlename" : "Anthony",
                  "lastname" : "Wick",
                  "loginname" : "JWick123",
                  "password" : "password123",
                  "email" : "pelesys@email.com",
                  "photo" : "",
                  "company" : "Pelesys",
                  "department" : "pilot",
                  "notes" : "this is a user",
                  "employmentdate" : "2018-04-03T20:23:17.8648866Z",
                  "expirydate" : "2020-04-03T20:23:17.8648866Z",
                  "extendedRoleId" : "a3aaddfa-97a5-4723-af2a-442b4144db98",
                  "userroleids" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "usergroupids" : [ "50780198-b1e9-4536-b939-eb31b69701aa" ],
                  "contractids" : [ "b7380930-0149-4171-8f52-74e0ebf26552" ],
                  "equipmentids" : [ "0366abda-2cca-4f7f-8102-3b27c65e0976" ],
                  "jobroleids" : [ "e73c635d-5055-4868-9807-cecbc2a75a5a" ],
                  "organizationLocations" : [ {
                    "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                    "locationName" : "Kaer morhen",
                    "organizationName" : "Pelesys",
                    "loginName" : "admin",
                    "firstName" : "firstName",
                    "lastName" : "lastName",
                    "email" : "user@g.com",
                    "employeeId" : "507949"
                  } ],
                  "userAddress" : {
                    "addressId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                    "street1" : "123 Fake street",
                    "street2" : "456 Fake street",
                    "city" : "Vancouver",
                    "provinceId" : "BC",
                    "countryId" : "CA",
                    "postalCode" : "A1A1A1",
                    "phonenumber" : "604-123-4567",
                    "cellnumber" : "778-123-6543",
                    "faxnumber" : "604-987-7890",
                    "placeofbirth" : "Vancouver",
                    "citizenshipId" : "CA",
                    "gender" : 1,
                    "dateofbirth" : "1996-04-03T20:23:17.8648866Z",
                    "licensenumber" : "4h2-6j8",
                    "costcenter" : "c123"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/{id}" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get Single",
        "description" : "Retrieve a single user with the matching id\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "email", "firstname", "lastname", "loginname", "password", "userId", "userroleids" ],
                  "type" : "object",
                  "properties" : {
                    "expirydate" : {
                      "type" : "string",
                      "description" : "The date the user'a account will expire"
                    },
                    "firstname" : {
                      "type" : "string",
                      "description" : "User's first name"
                    },
                    "notes" : {
                      "type" : "string",
                      "description" : "Additional notes about the user"
                    },
                    "loginname" : {
                      "type" : "string",
                      "description" : "User's unique login name they will use to log in"
                    },
                    "organizationLocations" : {
                      "type" : "array",
                      "description" : "A list of an organization location pairing that the user is associated with",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "middlename" : {
                      "type" : "string",
                      "description" : "User's middle name"
                    },
                    "photo" : {
                      "type" : "string",
                      "description" : "string representation of a photo"
                    },
                    "contractids" : {
                      "type" : "array",
                      "description" : "A collection of contract ids associated with the user",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "employeeId" : {
                      "type" : "string",
                      "description" : "ID given by the user's company"
                    },
                    "usergroupids" : {
                      "type" : "array",
                      "description" : "A collection of user group ids that the user is assigned to",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "title" : {
                      "type" : "string",
                      "description" : "Title given to the user"
                    },
                    "userroleids" : {
                      "type" : "array",
                      "description" : "A collection of user role ids that the user is assigned to",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "userId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user"
                    },
                    "lastname" : {
                      "type" : "string",
                      "description" : "User's last name"
                    },
                    "employmentdate" : {
                      "type" : "string",
                      "description" : "The date the user was employed"
                    },
                    "userAddress" : {
                      "required" : [ "addressId", "countryId" ],
                      "type" : "object",
                      "properties" : {
                        "dateofbirth" : {
                          "type" : "string",
                          "description" : "The date the user'a account will expire"
                        },
                        "licensenumber" : {
                          "type" : "string",
                          "description" : "The user's license number"
                        },
                        "gender" : {
                          "type" : "number",
                          "description" : "The user's gender"
                        },
                        "city" : {
                          "type" : "string",
                          "description" : "The name of the city the user resides in"
                        },
                        "postalCode" : {
                          "type" : "string",
                          "description" : "The user's postal code"
                        },
                        "phonenumber" : {
                          "type" : "string",
                          "description" : "The user's home phone number"
                        },
                        "placeofbirth" : {
                          "type" : "string",
                          "description" : "The user's place of birth"
                        },
                        "provinceId" : {
                          "type" : "string",
                          "description" : "The postal abbreviations of the province/state the user resides in"
                        },
                        "citizenshipId" : {
                          "type" : "string",
                          "description" : "The abbreviations of the country the user has citizenship in"
                        },
                        "countryId" : {
                          "type" : "string",
                          "description" : "The abbreviations of the country the user resides in"
                        },
                        "addressId" : {
                          "type" : "string",
                          "description" : "Unique ID of the user address"
                        },
                        "cellnumber" : {
                          "type" : "string",
                          "description" : "The user's cellphone number"
                        },
                        "street1" : {
                          "type" : "string",
                          "description" : "The user's mailing address"
                        },
                        "street2" : {
                          "type" : "string",
                          "description" : "The user's alternate mailing address"
                        },
                        "faxnumber" : {
                          "type" : "string",
                          "description" : "The user's fax number"
                        },
                        "costcenter" : {
                          "type" : "string",
                          "description" : "The user's cost center"
                        }
                      }
                    },
                    "password" : {
                      "type" : "string",
                      "description" : "Password that the user will use to log in"
                    },
                    "company" : {
                      "type" : "string",
                      "description" : "Name of the user's company"
                    },
                    "extendedRoleId" : {
                      "type" : "string",
                      "description" : "A system role id when an override exists, null if not"
                    },
                    "department" : {
                      "type" : "string",
                      "description" : "Name of the user's department"
                    },
                    "jobroleids" : {
                      "type" : "array",
                      "description" : "A collection of job role ids associated with the user",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "email" : {
                      "type" : "string",
                      "description" : "User's email address"
                    },
                    "equipmentids" : {
                      "type" : "array",
                      "description" : "A collection of equipment ids associated with the user",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "userId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                  "employeeId" : "e123",
                  "title" : "employee1",
                  "firstname" : "John",
                  "middlename" : "Anthony",
                  "lastname" : "Wick",
                  "loginname" : "JWick123",
                  "password" : "password123",
                  "email" : "pelesys@email.com",
                  "photo" : "",
                  "company" : "Pelesys",
                  "department" : "pilot",
                  "notes" : "this is a user",
                  "employmentdate" : "2018-04-03T20:23:17.8648866Z",
                  "expirydate" : "2020-04-03T20:23:17.8648866Z",
                  "extendedRoleId" : "a3aaddfa-97a5-4723-af2a-442b4144db98",
                  "userroleids" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "usergroupids" : [ "50780198-b1e9-4536-b939-eb31b69701aa" ],
                  "contractids" : [ "b7380930-0149-4171-8f52-74e0ebf26552" ],
                  "equipmentids" : [ "0366abda-2cca-4f7f-8102-3b27c65e0976" ],
                  "jobroleids" : [ "e73c635d-5055-4868-9807-cecbc2a75a5a" ],
                  "organizationLocations" : [ {
                    "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                    "locationName" : "Kaer morhen",
                    "organizationName" : "Pelesys",
                    "loginName" : "admin",
                    "firstName" : "firstName",
                    "lastName" : "lastName",
                    "email" : "user@g.com",
                    "employeeId" : "507949"
                  } ],
                  "userAddress" : {
                    "addressId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                    "street1" : "123 Fake street",
                    "street2" : "456 Fake street",
                    "city" : "Vancouver",
                    "provinceId" : "BC",
                    "countryId" : "CA",
                    "postalCode" : "A1A1A1",
                    "phonenumber" : "604-123-4567",
                    "cellnumber" : "778-123-6543",
                    "faxnumber" : "604-987-7890",
                    "placeofbirth" : "Vancouver",
                    "citizenshipId" : "CA",
                    "gender" : 1,
                    "dateofbirth" : "1996-04-03T20:23:17.8648866Z",
                    "licensenumber" : "4h2-6j8",
                    "costcenter" : "c123"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to Find User",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Authentication" ],
        "summary" : "Remove",
        "description" : "Logically delete a User with the matching id from the system\n\n::: note\n\n## Rules\n\n- A user cannot delete themselves\n\n- A user with a lower system role cannot delete a user with a higher system role\n\n- Built in users cannot be deleted\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Cannot find User",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/filter" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Filter",
        "description" : "Filter Users by parameters in the body\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "firstname" : {
                    "type" : "string",
                    "description" : "User's first name"
                  },
                  "lastname" : {
                    "type" : "string",
                    "description" : "User's last name"
                  },
                  "loginname" : {
                    "type" : "string",
                    "description" : "User's unique login name they will use to log in"
                  },
                  "email" : {
                    "type" : "string",
                    "description" : "User's email address"
                  },
                  "employeeId" : {
                    "type" : "string",
                    "description" : "ID given by the user's company"
                  },
                  "userroleids" : {
                    "type" : "array",
                    "description" : "An array of user role ids to filter by",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "excluderoleIds" : {
                    "type" : "array",
                    "description" : "An array of user role ids to exclude in filter results",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "userIds" : {
                    "type" : "array",
                    "description" : "An array of user ids to filter by",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "excludeIds" : {
                    "type" : "array",
                    "description" : "An array of user ids to exclude in filter results",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "usergroupids" : {
                    "type" : "array",
                    "description" : "A array of user group ids used to filter by",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "organizationIds" : {
                    "type" : "array",
                    "description" : "A array of organization IDs used to filter by",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "locationIds" : {
                    "type" : "array",
                    "description" : "A array of location IDs used to filter by",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "contractids" : {
                    "type" : "array",
                    "description" : "A array of contract ids used to filter by",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "equipmentids" : {
                    "type" : "array",
                    "description" : "A array of equipment ids used to filter by",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "jobroleids" : {
                    "type" : "array",
                    "description" : "A array of job role ids used to filter by",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "firstname" : "John",
                  "lastname" : "Wick",
                  "loginname" : "JWick123",
                  "email" : "pelesys@email.com",
                  "employeeId" : "e123",
                  "userroleids" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "excluderoleIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "userIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "excludeIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "usergroupids" : [ "50780198-b1e9-4536-b939-eb31b69701aa" ],
                  "organizationIds" : [ "449b4630-41b6-4c6b-8900-18288ef693c6" ],
                  "locationIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "contractids" : [ "b7380930-0149-4171-8f52-74e0ebf26552" ],
                  "equipmentids" : [ "0366abda-2cca-4f7f-8102-3b27c65e0976" ],
                  "jobroleids" : [ "e73c635d-5055-4868-9807-cecbc2a75a5a" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of users"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of users",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "userId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                    "employeeId" : "e123",
                    "title" : "employee1",
                    "firstname" : "John",
                    "middlename" : "Anthony",
                    "lastname" : "Wick",
                    "loginname" : "JWick123",
                    "password" : "password123",
                    "email" : "pelesys@email.com",
                    "photo" : "",
                    "company" : "Pelesys",
                    "department" : "pilot",
                    "notes" : "this is a user",
                    "employmentdate" : "2018-04-03T20:23:17.8648866Z",
                    "expirydate" : "2020-04-03T20:23:17.8648866Z",
                    "extendedRoleId" : "a3aaddfa-97a5-4723-af2a-442b4144db98",
                    "userroleids" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "usergroupids" : [ "50780198-b1e9-4536-b939-eb31b69701aa" ],
                    "contractids" : [ "b7380930-0149-4171-8f52-74e0ebf26552" ],
                    "equipmentids" : [ "0366abda-2cca-4f7f-8102-3b27c65e0976" ],
                    "jobroleids" : [ "e73c635d-5055-4868-9807-cecbc2a75a5a" ],
                    "organizationLocations" : [ {
                      "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                      "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                      "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                      "locationName" : "Kaer morhen",
                      "organizationName" : "Pelesys",
                      "loginName" : "admin",
                      "firstName" : "firstName",
                      "lastName" : "lastName",
                      "email" : "user@g.com",
                      "employeeId" : "507949"
                    } ],
                    "userAddress" : {
                      "addressId" : "83c7c8b7-e29e-436b-86db-ccf8486ec3b9",
                      "street1" : "123 Fake street",
                      "street2" : "456 Fake street",
                      "city" : "Vancouver",
                      "provinceId" : "BC",
                      "countryId" : "CA",
                      "postalCode" : "A1A1A1",
                      "phonenumber" : "604-123-4567",
                      "cellnumber" : "778-123-6543",
                      "faxnumber" : "604-987-7890",
                      "placeofbirth" : "Vancouver",
                      "citizenshipId" : "CA",
                      "gender" : 1,
                      "dateofbirth" : "1996-04-03T20:23:17.8648866Z",
                      "licensenumber" : "4h2-6j8",
                      "costcenter" : "c123"
                    }
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/training" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Training",
        "description" : "Retrieve a set of training records related to a user's overall learning progress\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "userId" : {
                    "type" : "string",
                    "description" : "Get training data related to a specific user"
                  },
                  "completionStatus" : {
                    "type" : "number",
                    "description" : "Find training data with a specific completion status"
                  },
                  "startDate" : {
                    "type" : "string",
                    "description" : "Find training data that has started passed the specified date"
                  },
                  "endDate" : {
                    "type" : "string",
                    "description" : "Find training data that has ended before the specified date"
                  },
                  "includeActivityTrainings" : {
                    "type" : "boolean",
                    "description" : "Specifies that the filter properties will include ActivityEnrollment or not"
                  },
                  "courseSessionEnrollmentId" : {
                    "type" : "string",
                    "description" : "Get training data related to a specific CourseSessionEnrollmentId"
                  },
                  "sources" : {
                    "type" : "number",
                    "description" : "The type of Sources of training data"
                  }
                },
                "example" : {
                  "userId" : "8ace0092-f0cf-4dd1-8bb2-8d0f4fb33aaf",
                  "completionStatus" : 1,
                  "startDate" : "2018-04-19T07:00:00Z",
                  "endDate" : "2019-04-19T07:00:00Z",
                  "includeActivityTrainings" : true,
                  "courseSessionEnrollmentId" : "3C40869C-37B0-4DD2-B681-0580474D3E93",
                  "sources" : 0
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of training data"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of training data",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "trainingId" : "36ead9e6-e072-478c-a595-46f2c858b927",
                    "code" : "CRS-100",
                    "name" : "Course: Robotics 100",
                    "startDate" : "2018-04-19T07:00:00Z",
                    "endDate" : "2018-05-19T07:00:00Z",
                    "method" : 1,
                    "hours" : 10,
                    "learningStatus" : 1,
                    "EnrolledDate" : "2018-04-19T07:00:00Z",
                    "ExpiryDate" : "2019-04-19T07:00:00Z",
                    "CompletionDate" : "2018-04-19T07:00:00Z"
                  } ],
                  "nextPageLink" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/user/{id}/extendPermission" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Create",
        "description" : "Initialize a permission extension for the user\n\n::: note\n\n## Rules\n\n- The user cannot have an existing extension, the request is rejected when this happens\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "When a rule has been violated, see [Rules]",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to find the user",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Authentication" ],
        "summary" : "Remove",
        "description" : "Remove a user's extended permissions\n\n::: warning\n\n## Warning\n\nRemoving extended permissions will wipe out all relevant extended permissions\n:::\n\n::: note\n\n## Rules\n\n- The user must have extended permissions set\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "When a rule has been violated, see [Rules]",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to find the user",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/user/{id}/applicationAccessPermissions" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get",
        "description" : "Retrieve application access permissions for the given user\n\n::: note\n\n## Effects\n\n- Extended permissions are the highest priority\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "permission" : {
                      "type" : "array",
                      "description" : "An array of application access permissions",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "permission" : [ "1", "true", "1", "2", "3", "4", "5" ]
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to find the user",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Authentication" ],
        "summary" : "Update",
        "description" : "Update application permissions for a user's extended permission\n\n::: note\n\n## Rules\n\n- User must have an override created before this is called\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "permission" : {
                    "type" : "array",
                    "description" : "An array of application access permissions",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "permission" : [ "1", "true", "1", "2", "3", "4", "5" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "User has not setup an override",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to find the user",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/user/{id}/actionPermissions" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "User Permissions",
        "description" : "Retrieve action permissions for the given user\n\n::: note\n\n## Effects\n\n- Extended permissions are the highest priority\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "permission" : {
                      "type" : "array",
                      "description" : "An array of action permissions",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "permission" : [ "0", "1", "2", "3", "4", "5", "34", "35", "36", "37", "38", "39", "40", "1", "2", "3", "4" ]
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable To Find Action Permission",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Authentication" ],
        "summary" : "Update",
        "description" : "Update action permissions for a user's extended permission\n\n::: note\n\n## Rules\n\n- User must have an override created before this is called\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "permission" : {
                    "type" : "array",
                    "description" : "An array of action permissions",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "permission" : [ "0", "1", "2", "3", "4", "5", "34", "35", "36", "37", "38", "39", "40", "1", "2", "3", "4" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "User has not setup an override",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to find the user",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/user/{id}/dataPermissions" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get",
        "description" : "Retrieve data permissions for the given user\n\n::: note\n\n## Effects\n\n- Extended permissions are the highest priority\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "usergroups" : {
                      "type" : "array",
                      "description" : "An array of user group ids that are granted the data permission",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "usergroups" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ]
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable To Find User",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Authentication" ],
        "summary" : "Update",
        "description" : "Update data permissions for a user's extended permission\n\n::: note\n\n## Rules\n\n- User must have an override created before this is called\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "permission" : {
                    "type" : "array",
                    "description" : "An array of action permissions",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "permission" : [ "0", "1", "2", "3", "4", "5", "34", "35", "36", "37", "38", "39", "40", "1", "2", "3", "4" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "User has not setup an override",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to find the user",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/{id}/password" : {
      "patch" : {
        "tags" : [ "Authentication" ],
        "summary" : "Reset",
        "description" : "Allow the user to change their password\n\n::: note\n\n## Rules\n\n- Password must be 8-20 characters long, have no leading/trailing whitespace, and contain no special characters.\n\n- The logged in user can only change their own password\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "newpassword", "oldpassword" ],
                "type" : "object",
                "properties" : {
                  "oldpassword" : {
                    "type" : "string",
                    "description" : "User's old password"
                  },
                  "newpassword" : {
                    "type" : "string",
                    "description" : "The password that the user wants to change to"
                  }
                },
                "example" : {
                  "oldpassword" : "oldpw123",
                  "newpassword" : "newpw123"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to find the user",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/{id}/password/override" : {
      "patch" : {
        "tags" : [ "Authentication" ],
        "summary" : "Override",
        "description" : "Allow the administrator the ability to change a user's password\n\n::: note\n\n## Rules\n\n- Generated password must be exactly 6 characters long, only numerical digits\n\n- User accessing the api, must be an administrator\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "newpassword", "oldpassword" ],
                "type" : "object",
                "properties" : {
                  "oldpassword" : {
                    "type" : "string",
                    "description" : "User's old password"
                  },
                  "newpassword" : {
                    "type" : "string",
                    "description" : "The password that the user wants to change to"
                  }
                },
                "example" : {
                  "oldpassword" : "oldpw123",
                  "newpassword" : "newpw123"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "400" : {
            "description" : "Password format is not as expected",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "403" : {
            "description" : "The current user calling the API is not an Administrator",
            "content" : { }
          },
          "404" : {
            "description" : "Unable to find the user",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/password/recover/request" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Request",
        "description" : "Recover a user's password via login name, an email with a link is sent to the user.  \nThe link is temporary and expires in 60 minutes.\n\n::: warning\n\n## Warning\n\nThis API entry point can be accessed anonymously.\n:::\n\n::: note\n\n## Rules\n\n- Login name must match an existing user with same login name\n\n- Http request must be from the client binding associated with the user login name.\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "400" : {
            "description" : "Request has been refused due to underlying security checks",
            "content" : { }
          }
        }
      }
    },
    "/api/users/password/recover" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Verify",
        "description" : "Ask the system whether a recovery ticket is still active.\n\n::: warning\n\n## Warning\n\nThis API entry point can be accessed anonymously.\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "example" : true
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Authentication" ],
        "summary" : "Change",
        "description" : "Change (recover) the user's password using the recovery ticket\n\n::: warning\n\n## Warning\n\nThis API entry point can be accessed anonymously.\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "newPassword", "recoveryTicket" ],
                "type" : "object",
                "properties" : {
                  "recoveryTicket" : {
                    "type" : "string",
                    "description" : "The encrypted recovery ticket"
                  },
                  "newPassword" : {
                    "type" : "string",
                    "description" : "The new password to change to"
                  }
                },
                "example" : {
                  "recoveryTicket" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIzYWJkYzZjOC0zMWUwLTQ2NzMtYTUxMi01MWQ1ZjAzZDdiNWYifQ.wyM-mDtNh8ITcEaCONXSIjJ8haVvDBiIjkHuU3gcnT8",
                  "newPassword" : "pelesys1"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "400" : {
            "description" : "Ticket is expired, invalid or supplied password is not in expected format",
            "content" : { }
          }
        }
      }
    },
    "/api/users/import" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Import",
        "description" : "::: note\n\n## Rules\n\n- Uploaded csv data that is corrupted or not a csv file type will be rejected [400]\n\n- Mispelled csv columns will be rejected [400]\n\n- Duplicate csv columns will be rejected [400]\n\n- Duplicate rows for login names are rejected [400]\n\n- Passwords values will cause the import to be rejected only on user update [400]\n\n- Any value fields that fail property validation will be marked as error [ERROR]\n\n- Any failures ocurring during internal rule validation will be marked as error [ERROR]\n\n- Any contract that cannot be found in the system results in an error [ERROR]\n\n- Any equipment that cannot be found in the system results in an error [ERROR]\n\n- Any job role that cannot be found in the system results in an error [ERROR]\n\n- Any organization that cannot be found in the system results in an error [ERROR]\n\n- Any location that cannot be found in the system results in an error [ERROR]\n\n- Any user group that cannot be found in the system results in an error [ERROR]\n\n- The system will attempt to create a new user when it cannot be found [200]\n\n- User associations with various groups are additive (not on a replacement basis)\n\n- Organization and Location pairings must be separated by pipes and separated by commas for multiple pairs\n:::",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "csv" ],
                "type" : "object",
                "properties" : {
                  "csv" : {
                    "type" : "string",
                    "description" : "The raw binary data of the uploaded csv"
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "array",
                      "description" : "A list of error message that ocurred during processing rows plus a list of general information describing states of the import(# of user created, updated, failure in users import)",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "message" : [ {
                    "identifier" : "login name",
                    "rowNumber" : 12876,
                    "message" : "Row 12876 is invalid because...",
                    "messageType" : 0
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "Caused when the csv is not the correct filetype, the binary data is corrupted or columns",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Caused when the system cannot find the file that was uploaded to the system",
            "content" : { }
          },
          "415" : {
            "description" : "Caused when the request format was not multipart",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/importLoginNameUpdate" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "ImportLoginNameUpdate",
        "description" : "::: note\n\n## Rules\n\n- Uploaded csv data that is corrupted or not a csv file type will be rejected [400]\n\n- Mispelled csv columns will be rejected [400]\n\n- Duplicate csv columns will be rejected [400]\n\n- Duplicate rows for login names are rejected [400]\n:::",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "csv" ],
                "type" : "object",
                "properties" : {
                  "csv" : {
                    "type" : "string",
                    "description" : "The raw binary data of the uploaded csv"
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "array",
                      "description" : "A list of error message that ocurred during processing rows plus a list of general information describing states of the loginNameUpdate(# of user updated, failure in users loginNameUpdate)",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "message" : [ {
                    "identifier" : "login name",
                    "rowNumber" : 12876,
                    "message" : "Row 12876 is invalid because...",
                    "messageType" : 0
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "Caused when the csv is not the correct filetype, the binary data is corrupted or columns",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Caused when the system cannot find the file that was uploaded to the system",
            "content" : { }
          },
          "415" : {
            "description" : "Caused when the request format was not multipart",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/addUserOrganizationLocations" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Add Organization Location Pair",
        "description" : "Adds organization location pairings for users\n\n::: note\n\n## Rules\n\n- User accessing the api must have read/write permissions.\n\n- The user that the pairing is for must exist.\n\n- The organization must exist.\n\n- The location must exist.\n\n- The organization location pairing must not exist (No UserOrganizationLocation with matching UserId, OrganizationId, and LocationId).\n\n## Notes\n\n- An empty array returned in a successful response signifies all pairs were added successfully.\n\n- The error message in a returned failure model will relate to a broken rule that would normally return a 400 or 404 status.\n\n- In the UserOrganizationLocation model, only userId, organizationId and locationId is sent to the server\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "errorMessage" : "Pairing already exists",
                  "failedModel" : {
                    "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                    "locationName" : "Kaer morhen",
                    "organizationName" : "Pelesys",
                    "loginName" : "admin",
                    "firstName" : "firstName",
                    "lastName" : "lastName",
                    "email" : "user@g.com",
                    "employeeId" : "507949"
                  }
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/removeUserOrganizationLocations" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Remove Organization Location Pair",
        "description" : "Removes organization location pairings for users\n\n::: note\n\n## Rules\n\n- User accessing the api must have read/write permissions.\n\n- The organization location pairing must exist.\n\n## Notes\n\n- An empty array returned in a successful response signifies all pairs were removed successfully.\n\n- The error message in a returned failure model will relate to a broken rule that would normally return a 400 or 404 status.\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "errorMessage" : "Pairing already exists",
                  "failedModel" : {
                    "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                    "locationName" : "Kaer morhen",
                    "organizationName" : "Pelesys",
                    "loginName" : "admin",
                    "firstName" : "firstName",
                    "lastName" : "lastName",
                    "email" : "user@g.com",
                    "employeeId" : "507949"
                  }
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/{id}/userOrganizationLocations" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get UserOrganizationLocations",
        "description" : "Retrieve all UserOrganizationLocations associated with the UserId provided.\n\n::: note\n\n## Rules\n\n- Requires read level access for users.\n\n## Notes\n\n- All the property members in the UserOrganizationLocations model will be populated from the server\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ca408cf7-8643-40fc-979c-2d29bbd419bc"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                  "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                  "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                  "locationName" : "Kaer morhen",
                  "organizationName" : "Pelesys",
                  "loginName" : "admin",
                  "firstName" : "firstName",
                  "lastName" : "lastName",
                  "email" : "user@g.com",
                  "employeeId" : "507949"
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/users/userOrganizationLocations/filter" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "FilterUserOrganizationLocations",
        "description" : "Filter UserOrganizationLocations by parameters in the body\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "userIds" : {
                    "type" : "array",
                    "description" : "An array of user IDs used to find UserOrganizationLocations",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "userOrganizationIds" : {
                    "type" : "array",
                    "description" : "An array of organization IDs used to find UserOrganizationLocations that have users in an organization",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "userLocationIds" : {
                    "type" : "array",
                    "description" : "An array of location IDs used to find UserOrganizationLocations that have users in a location",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "organizationIds" : {
                    "type" : "array",
                    "description" : "A list of organization IDs used to find UserOrganizationLocations",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "locationIds" : {
                    "type" : "array",
                    "description" : "A list of location IDs used to find UserOrganizationLocations",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "usergroupids" : {
                    "type" : "array",
                    "description" : "A list of user group ids used to find UserOrganizationLocations",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "contractids" : {
                    "type" : "array",
                    "description" : "A list of contract ids used to find UserOrganizationLocations",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "equipmentids" : {
                    "type" : "array",
                    "description" : "A list of equipment ids used to find UserOrganizationLocations",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "jobroleids" : {
                    "type" : "array",
                    "description" : "A list of job role ids used to find UserOrganizationLocations",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "userIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "userOrganizationIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "userLocationIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "organizationIds" : [ "449b4630-41b6-4c6b-8900-18288ef693c6" ],
                  "locationIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "usergroupids" : [ "50780198-b1e9-4536-b939-eb31b69701aa" ],
                  "contractids" : [ "b7380930-0149-4171-8f52-74e0ebf26552" ],
                  "equipmentids" : [ "0366abda-2cca-4f7f-8102-3b27c65e0976" ],
                  "jobroleids" : [ "e73c635d-5055-4868-9807-cecbc2a75a5a" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of userOrganizationLocations"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of userOrganizationLocations",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                    "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                    "locationName" : "Kaer morhen",
                    "organizationName" : "Pelesys",
                    "loginName" : "admin",
                    "firstName" : "firstName",
                    "lastName" : "lastName",
                    "email" : "user@g.com",
                    "employeeId" : "507949"
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response## Group User Role"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/userroles" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get All",
        "description" : "Retrieve data for all user roles.\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of user roles"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of user roles",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "userroleId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                    "name" : "student",
                    "description" : "this is a student",
                    "type" : 1,
                    "isbuiltin" : true,
                    "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                    "usercount" : 1
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Authentication" ],
        "summary" : "Update",
        "description" : "Update a user roles's information\n\n::: note\n\n## Rules\n\n- User Role name must be unique\n\n- Users assigned to User Roles must exist\n\n- Users can only be removed from a User Role by a user with higher permissions\n\n- User Role Type must be a valid type\n\n- Built in admin user roles cannot have permissions set to readonly\n\n- Built in users cannot be removed from admin roles\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "isbuiltin", "name", "userroleId" ],
                "type" : "object",
                "properties" : {
                  "userroleId" : {
                    "type" : "string",
                    "description" : "Unique ID of the user role"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the user role"
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "Brief description of the user role"
                  },
                  "type" : {
                    "type" : "number"
                  },
                  "isbuiltin" : {
                    "type" : "boolean",
                    "description" : "Represents if the user role is built in or user created"
                  },
                  "users" : {
                    "type" : "array",
                    "description" : "An array of user ids that are in the user role",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "usercount" : {
                    "type" : "number",
                    "description" : "The total number of user that are actively in the user role"
                  }
                },
                "example" : {
                  "userroleId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "name" : "student",
                  "description" : "this is a student",
                  "type" : 1,
                  "isbuiltin" : true,
                  "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "usercount" : 1
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "isbuiltin", "name", "userroleId" ],
                  "type" : "object",
                  "properties" : {
                    "isbuiltin" : {
                      "type" : "boolean",
                      "description" : "Represents if the user role is built in or user created"
                    },
                    "usercount" : {
                      "type" : "number",
                      "description" : "The total number of user that are actively in the user role"
                    },
                    "name" : {
                      "type" : "string",
                      "description" : "Name of the user role"
                    },
                    "description" : {
                      "type" : "string",
                      "description" : "Brief description of the user role"
                    },
                    "type" : {
                      "type" : "number"
                    },
                    "userroleId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user role"
                    },
                    "users" : {
                      "type" : "array",
                      "description" : "An array of user ids that are in the user role",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "userroleId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "name" : "student",
                  "description" : "this is a student",
                  "type" : 1,
                  "isbuiltin" : true,
                  "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "usercount" : 1
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Create",
        "description" : "Create a new user role that can be assigned to users\n\n::: note\n\n## Rules\n\n- User Role name must be unique\n\n- Users assigned to User Roles must exist\n\n- User Role Type must be a valid type\n\n- User Role Type cannot be System Admin\n\n- Required fields cannot be null or empty\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "isbuiltin", "name", "userroleId" ],
                "type" : "object",
                "properties" : {
                  "userroleId" : {
                    "type" : "string",
                    "description" : "Unique ID of the user role"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the user role"
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "Brief description of the user role"
                  },
                  "type" : {
                    "type" : "number"
                  },
                  "isbuiltin" : {
                    "type" : "boolean",
                    "description" : "Represents if the user role is built in or user created"
                  },
                  "users" : {
                    "type" : "array",
                    "description" : "An array of user ids that are in the user role",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "usercount" : {
                    "type" : "number",
                    "description" : "The total number of user that are actively in the user role"
                  }
                },
                "example" : {
                  "userroleId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "name" : "student",
                  "description" : "this is a student",
                  "type" : 1,
                  "isbuiltin" : true,
                  "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "usercount" : 1
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "isbuiltin", "name", "userroleId" ],
                  "type" : "object",
                  "properties" : {
                    "isbuiltin" : {
                      "type" : "boolean",
                      "description" : "Represents if the user role is built in or user created"
                    },
                    "usercount" : {
                      "type" : "number",
                      "description" : "The total number of user that are actively in the user role"
                    },
                    "name" : {
                      "type" : "string",
                      "description" : "Name of the user role"
                    },
                    "description" : {
                      "type" : "string",
                      "description" : "Brief description of the user role"
                    },
                    "type" : {
                      "type" : "number"
                    },
                    "userroleId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user role"
                    },
                    "users" : {
                      "type" : "array",
                      "description" : "An array of user ids that are in the user role",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "userroleId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "name" : "student",
                  "description" : "this is a student",
                  "type" : 1,
                  "isbuiltin" : true,
                  "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "usercount" : 1
                }
              }
            }
          },
          "400" : {
            "description" : "Unable To Create new user role",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/userroles/{id}" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get Single",
        "description" : "Retrieve data for a single User Role.\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "isbuiltin", "name", "userroleId" ],
                  "type" : "object",
                  "properties" : {
                    "isbuiltin" : {
                      "type" : "boolean",
                      "description" : "Represents if the user role is built in or user created"
                    },
                    "usercount" : {
                      "type" : "number",
                      "description" : "The total number of user that are actively in the user role"
                    },
                    "name" : {
                      "type" : "string",
                      "description" : "Name of the user role"
                    },
                    "description" : {
                      "type" : "string",
                      "description" : "Brief description of the user role"
                    },
                    "type" : {
                      "type" : "number"
                    },
                    "userroleId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user role"
                    },
                    "users" : {
                      "type" : "array",
                      "description" : "An array of user ids that are in the user role",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "userroleId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "name" : "student",
                  "description" : "this is a student",
                  "type" : 1,
                  "isbuiltin" : true,
                  "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "usercount" : 1
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to Find User Role",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Authentication" ],
        "summary" : "Remove",
        "description" : "Delete a User Role with the matching id\n\n::: note\n\n## Rules\n\n- User Roles can only be deleted when they have no users assigned to them\n\n- Built in User Roles cannot be deleted\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable To Find User Role",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/userrole/{id}/applicationAccessPermissions" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get",
        "description" : "Retrieve application access permissions for the given user role\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "permission" : {
                      "type" : "array",
                      "description" : "An array of application access permissions",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "permission" : [ "1", "true", "1", "2", "3", "4", "5" ]
                }
              }
            }
          },
          "404" : {
            "description" : "Unable To Find Application Access permissions",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Authentication" ],
        "summary" : "Update",
        "description" : "Update application access permissions by user role id\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "permission" : {
                    "type" : "array",
                    "description" : "An array of application access permissions",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "permission" : [ "1", "true", "1", "2", "3", "4", "5" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "404" : {
            "description" : "Unable To Find Application Access permissions",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/userrole/{id}/actionPermissions" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get",
        "description" : "Retrieve action permissions for the given user role\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "permission" : {
                      "type" : "array",
                      "description" : "An array of action permissions",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "permission" : [ "0", "1", "2", "3", "4", "5", "34", "35", "36", "37", "38", "39", "40", "1", "2", "3", "4" ]
                }
              }
            }
          },
          "404" : {
            "description" : "Unable To Find Action Permission",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Authentication" ],
        "summary" : "Update",
        "description" : "Update action permissions by user role id\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "permission" : {
                    "type" : "array",
                    "description" : "An array of action permissions",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "permission" : [ "0", "1", "2", "3", "4", "5", "34", "35", "36", "37", "38", "39", "40", "1", "2", "3", "4" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "404" : {
            "description" : "Unable To Find Action Permission",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/userrole/{id}/dataPermissions" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Get",
        "description" : "Retrieve data permissions for the given user role\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "usergroups" : {
                      "type" : "array",
                      "description" : "An array of user group ids that are granted the data permission",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "usergroups" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ]
                }
              }
            }
          },
          "404" : {
            "description" : "Unable To Find User",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Authentication" ],
        "summary" : "Update",
        "description" : "Update data permissions by user role id\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "usergroups" : {
                    "type" : "array",
                    "description" : "An array of user group ids that are granted the data permission",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "usergroups" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "404" : {
            "description" : "Unable To Find Data Permission",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/userroles/filter" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Filter",
        "description" : "Filter User Roles by parameters in the body\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the user role to filter by"
                  },
                  "type" : {
                    "type" : "number",
                    "description" : "The user role type"
                  },
                  "userroleids" : {
                    "type" : "array",
                    "description" : "An array of user role ids to filter by",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "name" : "student",
                  "type" : 1,
                  "userroleids" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of user roles"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of user roles",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "userroleId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                    "name" : "student",
                    "description" : "this is a student",
                    "type" : 1,
                    "isbuiltin" : true,
                    "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                    "usercount" : 1
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/usergroups" : {
      "get" : {
        "tags" : [ "User Groups" ],
        "summary" : "Get All",
        "description" : "Retrieve data for all user groups.\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of user groups"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of user groups",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "usergroupId" : "c4df2fed-f971-46b1-a2e6-3bff144bd830",
                    "name" : "GroupA",
                    "description" : "this is group A",
                    "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                    "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                    "childIds" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "User Groups" ],
        "summary" : "Update",
        "description" : "Update a user group's information\n\n::: note\n\n## Rules\n\n- An user group with the same name cannot exist under the same parent\n\n- An user group cannot be its own parent (UserGroupID and ParentID cannot be the same)\n\n- An user group cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- An user group's immediate children with the same name cannot exist (No duplicate child names)\n\n- An user group cannot be its own child (UserGroupID cannot be the same as any of its children)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- When removing child user groups, child user group names cannot have a duplicate at the root level\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 300 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "name", "usergroupId" ],
                "type" : "object",
                "properties" : {
                  "usergroupId" : {
                    "type" : "string",
                    "description" : "Unique ID of the user group"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the user group"
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "Brief description of the user group"
                  },
                  "users" : {
                    "type" : "array",
                    "description" : "An array of user ids that are in the user group",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "parentId" : {
                    "type" : "string",
                    "description" : "Unique ID of the user group's parent group"
                  },
                  "childIds" : {
                    "type" : "array",
                    "description" : "An array of ids of the user group's child groups",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "usergroupId" : "c4df2fed-f971-46b1-a2e6-3bff144bd830",
                  "name" : "GroupA",
                  "description" : "this is group A",
                  "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "childIds" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "name", "usergroupId" ],
                  "type" : "object",
                  "properties" : {
                    "childIds" : {
                      "type" : "array",
                      "description" : "An array of ids of the user group's child groups",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "name" : {
                      "type" : "string",
                      "description" : "Name of the user group"
                    },
                    "usergroupId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user group"
                    },
                    "description" : {
                      "type" : "string",
                      "description" : "Brief description of the user group"
                    },
                    "users" : {
                      "type" : "array",
                      "description" : "An array of user ids that are in the user group",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "parentId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user group's parent group"
                    }
                  }
                },
                "example" : {
                  "usergroupId" : "c4df2fed-f971-46b1-a2e6-3bff144bd830",
                  "name" : "GroupA",
                  "description" : "this is group A",
                  "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "childIds" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ]
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "User Groups" ],
        "summary" : "Create",
        "description" : "Create a new user group that users can be assigned to.\n\n::: note\n\n## Rules\n\n- An user group with the same name cannot exist under the same parent\n\n- An user group cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- An user group's immediate children with the same name cannot exist (No duplicate child names)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 300 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "name", "usergroupId" ],
                "type" : "object",
                "properties" : {
                  "usergroupId" : {
                    "type" : "string",
                    "description" : "Unique ID of the user group"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the user group"
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "Brief description of the user group"
                  },
                  "users" : {
                    "type" : "array",
                    "description" : "An array of user ids that are in the user group",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "parentId" : {
                    "type" : "string",
                    "description" : "Unique ID of the user group's parent group"
                  },
                  "childIds" : {
                    "type" : "array",
                    "description" : "An array of ids of the user group's child groups",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "usergroupId" : "c4df2fed-f971-46b1-a2e6-3bff144bd830",
                  "name" : "GroupA",
                  "description" : "this is group A",
                  "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "childIds" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "name", "usergroupId" ],
                  "type" : "object",
                  "properties" : {
                    "childIds" : {
                      "type" : "array",
                      "description" : "An array of ids of the user group's child groups",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "name" : {
                      "type" : "string",
                      "description" : "Name of the user group"
                    },
                    "usergroupId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user group"
                    },
                    "description" : {
                      "type" : "string",
                      "description" : "Brief description of the user group"
                    },
                    "users" : {
                      "type" : "array",
                      "description" : "An array of user ids that are in the user group",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "parentId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user group's parent group"
                    }
                  }
                },
                "example" : {
                  "usergroupId" : "c4df2fed-f971-46b1-a2e6-3bff144bd830",
                  "name" : "GroupA",
                  "description" : "this is group A",
                  "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "childIds" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ]
                }
              }
            }
          },
          "400" : {
            "description" : "Unable To Create new user group",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/usergroups/{id}" : {
      "get" : {
        "tags" : [ "User Groups" ],
        "summary" : "Get Single",
        "description" : "Retrieve data for a single User Group.\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "name", "usergroupId" ],
                  "type" : "object",
                  "properties" : {
                    "childIds" : {
                      "type" : "array",
                      "description" : "An array of ids of the user group's child groups",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "name" : {
                      "type" : "string",
                      "description" : "Name of the user group"
                    },
                    "usergroupId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user group"
                    },
                    "description" : {
                      "type" : "string",
                      "description" : "Brief description of the user group"
                    },
                    "users" : {
                      "type" : "array",
                      "description" : "An array of user ids that are in the user group",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "parentId" : {
                      "type" : "string",
                      "description" : "Unique ID of the user group's parent group"
                    }
                  }
                },
                "example" : {
                  "usergroupId" : "c4df2fed-f971-46b1-a2e6-3bff144bd830",
                  "name" : "GroupA",
                  "description" : "this is group A",
                  "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "childIds" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ]
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable To Find Question",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "User Groups" ],
        "summary" : "Remove",
        "description" : "Delete a User Group with the matching id\n\n::: note\n\n## Rules\n\n- User Groups can only be deleted if they are not a parent to another user group\n\n- User Groups cannot be deleted if Users are assigned to them\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable To Find User Group",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/usergroups/filter" : {
      "post" : {
        "tags" : [ "User Groups" ],
        "summary" : "Filter",
        "description" : "Filter User Groups by parameters in the body\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "isrootonly" : {
                    "type" : "boolean",
                    "description" : "When true only root user groups with be filtered"
                  },
                  "parentId" : {
                    "type" : "string",
                    "description" : "Unique ID of the user group's parent group"
                  },
                  "usergroupIds" : {
                    "type" : "array",
                    "description" : "An array of user group ids to filter by",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "excludeIds" : {
                    "type" : "array",
                    "description" : "An array of ids representing user groups to be omitted from the result",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "isrootonly" : false,
                  "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "usergroupIds" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                  "excludeIds" : [ "fab2703e-9944-47c8-b559-6ad889a32fad" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of user groups"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of user groups",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "usergroupId" : "c4df2fed-f971-46b1-a2e6-3bff144bd830",
                    "name" : "GroupA",
                    "description" : "this is group A",
                    "users" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ],
                    "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                    "childIds" : [ "83c7c8b7-e29e-436b-86db-ccf8486ec3b9" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response## Group Client"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/clients" : {
      "get" : {
        "tags" : [ "User Groups" ],
        "summary" : "Get All",
        "description" : "Retrieve data for all clients.\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of clients"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of clients",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "clientId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "name" : "pelesys",
                    "description" : "this is a client",
                    "notes" : "this client is important",
                    "loginname" : "padmin",
                    "password" : "password123",
                    "clientApplication" : [ {
                      "applicationtype" : 1,
                      "isenabled" : true
                    } ],
                    "clientAddress" : {
                      "addressId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                      "street1" : "123 Fake Street",
                      "street2" : "456 Fake Street",
                      "city" : "Toronto",
                      "provinceId" : true,
                      "countryId" : "CA",
                      "postalCode" : "V1V1V1",
                      "phonenumber" : "604-123-4561",
                      "faxnumber" : "604-987-1234"
                    },
                    "clientContact" : {
                      "contactId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                      "firstname" : "Hank",
                      "middlename" : "Propane",
                      "lastname" : "Hill",
                      "email" : "propane@email.com"
                    },
                    "clientAuthentication" : {
                      "authenticationId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                      "type" : 1,
                      "endPointUrl" : "https://qa",
                      "appKey" : "192.168.0.1",
                      "accessTokenDuration" : 60,
                      "refreshTokenDuration" : 120
                    }
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "User Groups" ],
        "summary" : "Update",
        "description" : "Update a client's information\n\n::: note\n\n## Rules\n\n- Client name must be unique\n\n- Client bindings must be unique\n\n- Client applications must be of a valid application type\n\n- Client body must include all application types\n\n- Client must be bound to a specific URL\n:::",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "clientId", "loginname", "name", "password" ],
                "type" : "object",
                "properties" : {
                  "clientId" : {
                    "type" : "string",
                    "description" : "Unique ID of the client"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the client"
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "Brief description of the client"
                  },
                  "notes" : {
                    "type" : "string",
                    "description" : "Side notes about the client"
                  },
                  "loginname" : {
                    "type" : "string",
                    "description" : "Client's unique login name they will use to log into the default admin account"
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "Password that the client will use to log into the default admin account"
                  },
                  "clientApplication" : {
                    "type" : "array",
                    "description" : "A list of pelesys applications the client can access",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "clientAddress" : {
                    "required" : [ "addressId", "countryId" ],
                    "type" : "object",
                    "properties" : {
                      "city" : {
                        "type" : "string",
                        "description" : "The name of the city the client resides in"
                      },
                      "postalCode" : {
                        "type" : "string",
                        "description" : "The client's postal code"
                      },
                      "phonenumber" : {
                        "type" : "string",
                        "description" : "The client's business phone number"
                      },
                      "street1" : {
                        "type" : "string",
                        "description" : "The client's mailing address"
                      },
                      "street2" : {
                        "type" : "string",
                        "description" : "The client's alternate mailing address"
                      },
                      "faxnumber" : {
                        "type" : "string",
                        "description" : "The client's fax number"
                      },
                      "provinceId" : {
                        "type" : "string",
                        "description" : "The postal abbreviations of the province/state the client resides in"
                      },
                      "countryId" : {
                        "type" : "string",
                        "description" : "The abbreviations of the country the client resides in"
                      },
                      "addressId" : {
                        "type" : "string",
                        "description" : "Unique ID of the client address"
                      }
                    }
                  },
                  "clientContact" : {
                    "required" : [ "contactId", "firstname", "lastname" ],
                    "type" : "object",
                    "properties" : {
                      "firstname" : {
                        "type" : "string",
                        "description" : "Client contact's first name"
                      },
                      "contactId" : {
                        "type" : "string",
                        "description" : "Unique ID of the client contact"
                      },
                      "middlename" : {
                        "type" : "string",
                        "description" : "Client contact's middle name"
                      },
                      "email" : {
                        "type" : "string",
                        "description" : "Client contact's email"
                      },
                      "lastname" : {
                        "type" : "string",
                        "description" : "Client contact's last name"
                      }
                    }
                  },
                  "clientAuthentication" : {
                    "required" : [ "accessTokenDuration", "appKey", "authenticationId", "refreshTokenDuration", "type" ],
                    "type" : "object",
                    "properties" : {
                      "refreshTokenDuration" : {
                        "type" : "number",
                        "description" : "The duration in minutes of the refresh token"
                      },
                      "authenticationId" : {
                        "type" : "string",
                        "description" : "Unique ID of the client"
                      },
                      "appKey" : {
                        "type" : "string",
                        "description" : "IP Address of the client"
                      },
                      "type" : {
                        "type" : "number",
                        "description" : "Enum that represents the authentication type"
                      },
                      "endPointUrl" : {
                        "type" : "string",
                        "description" : "galaxy.pelesys.com:8081/identity/ (string, required) - The uri pointing to the identity server"
                      },
                      "accessTokenDuration" : {
                        "type" : "number",
                        "description" : "The duration in minutes of the primary access token"
                      }
                    }
                  }
                },
                "example" : {
                  "clientId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                  "name" : "pelesys",
                  "description" : "this is a client",
                  "notes" : "this client is important",
                  "loginname" : "padmin",
                  "password" : "password123",
                  "clientApplication" : [ {
                    "applicationtype" : 1,
                    "isenabled" : true
                  } ],
                  "clientAddress" : {
                    "addressId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "street1" : "123 Fake Street",
                    "street2" : "456 Fake Street",
                    "city" : "Toronto",
                    "provinceId" : true,
                    "countryId" : "CA",
                    "postalCode" : "V1V1V1",
                    "phonenumber" : "604-123-4561",
                    "faxnumber" : "604-987-1234"
                  },
                  "clientContact" : {
                    "contactId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "firstname" : "Hank",
                    "middlename" : "Propane",
                    "lastname" : "Hill",
                    "email" : "propane@email.com"
                  },
                  "clientAuthentication" : {
                    "authenticationId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "type" : 1,
                    "endPointUrl" : "https://qa",
                    "appKey" : "192.168.0.1",
                    "accessTokenDuration" : 60,
                    "refreshTokenDuration" : 120
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "User Groups" ],
        "summary" : "Create",
        "description" : "Create a new client that can use Pelesys applications\n\n::: note\n\n## Rules\n\n- Password must be 8-20 characters long, have no leading/trailing whitespace, and contain no special characters.\n\n- Login Name must be unique\n\n- Client name must be unique\n\n- Client bindings must be unique\n\n- Client applications must be of a valid application type\n\n- Client body must include all application types\n\n- Client must be bound to a specific URL\n:::\n\n::: note\n\n## Effects\n\n- A new default client settings profile will be created automatically\n:::",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "clientId", "loginname", "name", "password" ],
                "type" : "object",
                "properties" : {
                  "clientId" : {
                    "type" : "string",
                    "description" : "Unique ID of the client"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "Name of the client"
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "Brief description of the client"
                  },
                  "notes" : {
                    "type" : "string",
                    "description" : "Side notes about the client"
                  },
                  "loginname" : {
                    "type" : "string",
                    "description" : "Client's unique login name they will use to log into the default admin account"
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "Password that the client will use to log into the default admin account"
                  },
                  "clientApplication" : {
                    "type" : "array",
                    "description" : "A list of pelesys applications the client can access",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "clientAddress" : {
                    "required" : [ "addressId", "countryId" ],
                    "type" : "object",
                    "properties" : {
                      "city" : {
                        "type" : "string",
                        "description" : "The name of the city the client resides in"
                      },
                      "postalCode" : {
                        "type" : "string",
                        "description" : "The client's postal code"
                      },
                      "phonenumber" : {
                        "type" : "string",
                        "description" : "The client's business phone number"
                      },
                      "street1" : {
                        "type" : "string",
                        "description" : "The client's mailing address"
                      },
                      "street2" : {
                        "type" : "string",
                        "description" : "The client's alternate mailing address"
                      },
                      "faxnumber" : {
                        "type" : "string",
                        "description" : "The client's fax number"
                      },
                      "provinceId" : {
                        "type" : "string",
                        "description" : "The postal abbreviations of the province/state the client resides in"
                      },
                      "countryId" : {
                        "type" : "string",
                        "description" : "The abbreviations of the country the client resides in"
                      },
                      "addressId" : {
                        "type" : "string",
                        "description" : "Unique ID of the client address"
                      }
                    }
                  },
                  "clientContact" : {
                    "required" : [ "contactId", "firstname", "lastname" ],
                    "type" : "object",
                    "properties" : {
                      "firstname" : {
                        "type" : "string",
                        "description" : "Client contact's first name"
                      },
                      "contactId" : {
                        "type" : "string",
                        "description" : "Unique ID of the client contact"
                      },
                      "middlename" : {
                        "type" : "string",
                        "description" : "Client contact's middle name"
                      },
                      "email" : {
                        "type" : "string",
                        "description" : "Client contact's email"
                      },
                      "lastname" : {
                        "type" : "string",
                        "description" : "Client contact's last name"
                      }
                    }
                  },
                  "clientAuthentication" : {
                    "required" : [ "accessTokenDuration", "appKey", "authenticationId", "refreshTokenDuration", "type" ],
                    "type" : "object",
                    "properties" : {
                      "refreshTokenDuration" : {
                        "type" : "number",
                        "description" : "The duration in minutes of the refresh token"
                      },
                      "authenticationId" : {
                        "type" : "string",
                        "description" : "Unique ID of the client"
                      },
                      "appKey" : {
                        "type" : "string",
                        "description" : "IP Address of the client"
                      },
                      "type" : {
                        "type" : "number",
                        "description" : "Enum that represents the authentication type"
                      },
                      "endPointUrl" : {
                        "type" : "string",
                        "description" : "galaxy.pelesys.com:8081/identity/ (string, required) - The uri pointing to the identity server"
                      },
                      "accessTokenDuration" : {
                        "type" : "number",
                        "description" : "The duration in minutes of the primary access token"
                      }
                    }
                  }
                },
                "example" : {
                  "clientId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                  "name" : "pelesys",
                  "description" : "this is a client",
                  "notes" : "this client is important",
                  "loginname" : "padmin",
                  "password" : "password123",
                  "clientApplication" : [ {
                    "applicationtype" : 1,
                    "isenabled" : true
                  } ],
                  "clientAddress" : {
                    "addressId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "street1" : "123 Fake Street",
                    "street2" : "456 Fake Street",
                    "city" : "Toronto",
                    "provinceId" : true,
                    "countryId" : "CA",
                    "postalCode" : "V1V1V1",
                    "phonenumber" : "604-123-4561",
                    "faxnumber" : "604-987-1234"
                  },
                  "clientContact" : {
                    "contactId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "firstname" : "Hank",
                    "middlename" : "Propane",
                    "lastname" : "Hill",
                    "email" : "propane@email.com"
                  },
                  "clientAuthentication" : {
                    "authenticationId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "type" : 1,
                    "endPointUrl" : "https://qa",
                    "appKey" : "192.168.0.1",
                    "accessTokenDuration" : 60,
                    "refreshTokenDuration" : 120
                  }
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "clientId", "loginname", "name", "password" ],
                  "type" : "object",
                  "properties" : {
                    "password" : {
                      "type" : "string",
                      "description" : "Password that the client will use to log into the default admin account"
                    },
                    "clientId" : {
                      "type" : "string",
                      "description" : "Unique ID of the client"
                    },
                    "notes" : {
                      "type" : "string",
                      "description" : "Side notes about the client"
                    },
                    "loginname" : {
                      "type" : "string",
                      "description" : "Client's unique login name they will use to log into the default admin account"
                    },
                    "clientContact" : {
                      "required" : [ "contactId", "firstname", "lastname" ],
                      "type" : "object",
                      "properties" : {
                        "firstname" : {
                          "type" : "string",
                          "description" : "Client contact's first name"
                        },
                        "contactId" : {
                          "type" : "string",
                          "description" : "Unique ID of the client contact"
                        },
                        "middlename" : {
                          "type" : "string",
                          "description" : "Client contact's middle name"
                        },
                        "email" : {
                          "type" : "string",
                          "description" : "Client contact's email"
                        },
                        "lastname" : {
                          "type" : "string",
                          "description" : "Client contact's last name"
                        }
                      }
                    },
                    "clientApplication" : {
                      "type" : "array",
                      "description" : "A list of pelesys applications the client can access",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "name" : {
                      "type" : "string",
                      "description" : "Name of the client"
                    },
                    "description" : {
                      "type" : "string",
                      "description" : "Brief description of the client"
                    },
                    "clientAuthentication" : {
                      "required" : [ "accessTokenDuration", "appKey", "authenticationId", "refreshTokenDuration", "type" ],
                      "type" : "object",
                      "properties" : {
                        "refreshTokenDuration" : {
                          "type" : "number",
                          "description" : "The duration in minutes of the refresh token"
                        },
                        "authenticationId" : {
                          "type" : "string",
                          "description" : "Unique ID of the client"
                        },
                        "appKey" : {
                          "type" : "string",
                          "description" : "IP Address of the client"
                        },
                        "type" : {
                          "type" : "number",
                          "description" : "Enum that represents the authentication type"
                        },
                        "endPointUrl" : {
                          "type" : "string",
                          "description" : "galaxy.pelesys.com:8081/identity/ (string, required) - The uri pointing to the identity server"
                        },
                        "accessTokenDuration" : {
                          "type" : "number",
                          "description" : "The duration in minutes of the primary access token"
                        }
                      }
                    },
                    "clientAddress" : {
                      "required" : [ "addressId", "countryId" ],
                      "type" : "object",
                      "properties" : {
                        "city" : {
                          "type" : "string",
                          "description" : "The name of the city the client resides in"
                        },
                        "postalCode" : {
                          "type" : "string",
                          "description" : "The client's postal code"
                        },
                        "phonenumber" : {
                          "type" : "string",
                          "description" : "The client's business phone number"
                        },
                        "street1" : {
                          "type" : "string",
                          "description" : "The client's mailing address"
                        },
                        "street2" : {
                          "type" : "string",
                          "description" : "The client's alternate mailing address"
                        },
                        "faxnumber" : {
                          "type" : "string",
                          "description" : "The client's fax number"
                        },
                        "provinceId" : {
                          "type" : "string",
                          "description" : "The postal abbreviations of the province/state the client resides in"
                        },
                        "countryId" : {
                          "type" : "string",
                          "description" : "The abbreviations of the country the client resides in"
                        },
                        "addressId" : {
                          "type" : "string",
                          "description" : "Unique ID of the client address"
                        }
                      }
                    }
                  }
                },
                "example" : {
                  "clientId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                  "name" : "pelesys",
                  "description" : "this is a client",
                  "notes" : "this client is important",
                  "loginname" : "padmin",
                  "password" : "password123",
                  "clientApplication" : [ {
                    "applicationtype" : 1,
                    "isenabled" : true
                  } ],
                  "clientAddress" : {
                    "addressId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "street1" : "123 Fake Street",
                    "street2" : "456 Fake Street",
                    "city" : "Toronto",
                    "provinceId" : true,
                    "countryId" : "CA",
                    "postalCode" : "V1V1V1",
                    "phonenumber" : "604-123-4561",
                    "faxnumber" : "604-987-1234"
                  },
                  "clientContact" : {
                    "contactId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "firstname" : "Hank",
                    "middlename" : "Propane",
                    "lastname" : "Hill",
                    "email" : "propane@email.com"
                  },
                  "clientAuthentication" : {
                    "authenticationId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "type" : 1,
                    "endPointUrl" : "https://qa",
                    "appKey" : "192.168.0.1",
                    "accessTokenDuration" : 60,
                    "refreshTokenDuration" : 120
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Unable To Create new client",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/clients/{id}" : {
      "get" : {
        "tags" : [ "User Groups" ],
        "summary" : "Get Single",
        "description" : "Retrieve data for a single client.\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "clientId", "loginname", "name", "password" ],
                  "type" : "object",
                  "properties" : {
                    "password" : {
                      "type" : "string",
                      "description" : "Password that the client will use to log into the default admin account"
                    },
                    "clientId" : {
                      "type" : "string",
                      "description" : "Unique ID of the client"
                    },
                    "notes" : {
                      "type" : "string",
                      "description" : "Side notes about the client"
                    },
                    "loginname" : {
                      "type" : "string",
                      "description" : "Client's unique login name they will use to log into the default admin account"
                    },
                    "clientContact" : {
                      "required" : [ "contactId", "firstname", "lastname" ],
                      "type" : "object",
                      "properties" : {
                        "firstname" : {
                          "type" : "string",
                          "description" : "Client contact's first name"
                        },
                        "contactId" : {
                          "type" : "string",
                          "description" : "Unique ID of the client contact"
                        },
                        "middlename" : {
                          "type" : "string",
                          "description" : "Client contact's middle name"
                        },
                        "email" : {
                          "type" : "string",
                          "description" : "Client contact's email"
                        },
                        "lastname" : {
                          "type" : "string",
                          "description" : "Client contact's last name"
                        }
                      }
                    },
                    "clientApplication" : {
                      "type" : "array",
                      "description" : "A list of pelesys applications the client can access",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "name" : {
                      "type" : "string",
                      "description" : "Name of the client"
                    },
                    "description" : {
                      "type" : "string",
                      "description" : "Brief description of the client"
                    },
                    "clientAuthentication" : {
                      "required" : [ "accessTokenDuration", "appKey", "authenticationId", "refreshTokenDuration", "type" ],
                      "type" : "object",
                      "properties" : {
                        "refreshTokenDuration" : {
                          "type" : "number",
                          "description" : "The duration in minutes of the refresh token"
                        },
                        "authenticationId" : {
                          "type" : "string",
                          "description" : "Unique ID of the client"
                        },
                        "appKey" : {
                          "type" : "string",
                          "description" : "IP Address of the client"
                        },
                        "type" : {
                          "type" : "number",
                          "description" : "Enum that represents the authentication type"
                        },
                        "endPointUrl" : {
                          "type" : "string",
                          "description" : "galaxy.pelesys.com:8081/identity/ (string, required) - The uri pointing to the identity server"
                        },
                        "accessTokenDuration" : {
                          "type" : "number",
                          "description" : "The duration in minutes of the primary access token"
                        }
                      }
                    },
                    "clientAddress" : {
                      "required" : [ "addressId", "countryId" ],
                      "type" : "object",
                      "properties" : {
                        "city" : {
                          "type" : "string",
                          "description" : "The name of the city the client resides in"
                        },
                        "postalCode" : {
                          "type" : "string",
                          "description" : "The client's postal code"
                        },
                        "phonenumber" : {
                          "type" : "string",
                          "description" : "The client's business phone number"
                        },
                        "street1" : {
                          "type" : "string",
                          "description" : "The client's mailing address"
                        },
                        "street2" : {
                          "type" : "string",
                          "description" : "The client's alternate mailing address"
                        },
                        "faxnumber" : {
                          "type" : "string",
                          "description" : "The client's fax number"
                        },
                        "provinceId" : {
                          "type" : "string",
                          "description" : "The postal abbreviations of the province/state the client resides in"
                        },
                        "countryId" : {
                          "type" : "string",
                          "description" : "The abbreviations of the country the client resides in"
                        },
                        "addressId" : {
                          "type" : "string",
                          "description" : "Unique ID of the client address"
                        }
                      }
                    }
                  }
                },
                "example" : {
                  "clientId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                  "name" : "pelesys",
                  "description" : "this is a client",
                  "notes" : "this client is important",
                  "loginname" : "padmin",
                  "password" : "password123",
                  "clientApplication" : [ {
                    "applicationtype" : 1,
                    "isenabled" : true
                  } ],
                  "clientAddress" : {
                    "addressId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "street1" : "123 Fake Street",
                    "street2" : "456 Fake Street",
                    "city" : "Toronto",
                    "provinceId" : true,
                    "countryId" : "CA",
                    "postalCode" : "V1V1V1",
                    "phonenumber" : "604-123-4561",
                    "faxnumber" : "604-987-1234"
                  },
                  "clientContact" : {
                    "contactId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "firstname" : "Hank",
                    "middlename" : "Propane",
                    "lastname" : "Hill",
                    "email" : "propane@email.com"
                  },
                  "clientAuthentication" : {
                    "authenticationId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "type" : 1,
                    "endPointUrl" : "https://qa",
                    "appKey" : "192.168.0.1",
                    "accessTokenDuration" : 60,
                    "refreshTokenDuration" : 120
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Unable To Find Question",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/clients/filter" : {
      "post" : {
        "tags" : [ "User Groups" ],
        "summary" : "Filter",
        "description" : "Filter Clients by parameters in the body\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "countryId" : {
                    "type" : "string",
                    "description" : "The abbreviations of the country the client resides in"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "A client's name"
                  }
                },
                "example" : {
                  "countryId" : "CA",
                  "name" : "pelesys"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of clients"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of clients",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "clientId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                    "name" : "pelesys",
                    "description" : "this is a client",
                    "notes" : "this client is important",
                    "loginname" : "padmin",
                    "password" : "password123",
                    "clientApplication" : [ {
                      "applicationtype" : 1,
                      "isenabled" : true
                    } ],
                    "clientAddress" : {
                      "addressId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                      "street1" : "123 Fake Street",
                      "street2" : "456 Fake Street",
                      "city" : "Toronto",
                      "provinceId" : true,
                      "countryId" : "CA",
                      "postalCode" : "V1V1V1",
                      "phonenumber" : "604-123-4561",
                      "faxnumber" : "604-987-1234"
                    },
                    "clientContact" : {
                      "contactId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                      "firstname" : "Hank",
                      "middlename" : "Propane",
                      "lastname" : "Hill",
                      "email" : "propane@email.com"
                    },
                    "clientAuthentication" : {
                      "authenticationId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                      "type" : 1,
                      "endPointUrl" : "https://qa",
                      "appKey" : "192.168.0.1",
                      "accessTokenDuration" : 60,
                      "refreshTokenDuration" : 120
                    }
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/settings/general" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Get Settings",
        "description" : "Retrieve settings related to client\n\n::: warning\n\n## Warning\n\nThis API entry point can be accessed anonymously.\n:::",
        "parameters" : [ {
          "name" : "Referer",
          "in" : "header",
          "description" : "e.g. https://pele-038v2.pelesys.net:444",
          "schema" : {
            "type" : "string",
            "example" : "https://pele-038v2.pelesys.net:444"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "dateFormat", "dateTimeFormat", "timeFormat" ],
                  "type" : "object",
                  "properties" : {
                    "imageCourse" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be used as the default course image"
                    },
                    "loginMessage" : {
                      "type" : "string",
                      "description" : "The message below the title for the login page"
                    },
                    "imageLogo" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be used for the logo image"
                    },
                    "dateFormat" : {
                      "type" : "string",
                      "description" : "A string that represents a date without time information"
                    },
                    "primaryColor" : {
                      "type" : "string",
                      "description" : "A color in hex format"
                    },
                    "imageAfternoon" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be used on the front page when it is afternoon"
                    },
                    "imageEvening" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be used on the front page when it is evening"
                    },
                    "dateTimeFormat" : {
                      "type" : "string",
                      "description" : "A string that represents a date time format for the client"
                    },
                    "timeFormat" : {
                      "type" : "string",
                      "description" : "A string that represents a time format without date information"
                    },
                    "imageBackground" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be shown on the login screen"
                    },
                    "imageMorning" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be used on the front page when it is morning"
                    },
                    "theme" : {
                      "type" : "number",
                      "description" : "The client's theme"
                    },
                    "loginTitle" : {
                      "type" : "string",
                      "description" : "The title for the Login page"
                    }
                  }
                },
                "example" : {
                  "imageLogo" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageBackground" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageCourse" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageMorning" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageAfternoon" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageEvening" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "theme" : 0,
                  "primaryColor" : "#007aaa",
                  "loginTitle" : "Pelesys TMDS",
                  "loginMessage" : "Please enter your user name and password to log into Pelesys TMDS.",
                  "dateTimeFormat" : "DD.MM.YYYY HH:mm",
                  "dateFormat" : "DD.MM.YYYY",
                  "timeFormat" : "HH:mm"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings/{clientid}/general" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Get Settings",
        "description" : "Retrieve settings related to a specific client\n\n::: warning\n\n## Warning\n\nOnly super user can access this api uri end point\n:::",
        "parameters" : [ {
          "name" : "clientid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "dateFormat", "dateTimeFormat", "timeFormat" ],
                  "type" : "object",
                  "properties" : {
                    "imageCourse" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be used as the default course image"
                    },
                    "loginMessage" : {
                      "type" : "string",
                      "description" : "The message below the title for the login page"
                    },
                    "imageLogo" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be used for the logo image"
                    },
                    "dateFormat" : {
                      "type" : "string",
                      "description" : "A string that represents a date without time information"
                    },
                    "primaryColor" : {
                      "type" : "string",
                      "description" : "A color in hex format"
                    },
                    "imageAfternoon" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be used on the front page when it is afternoon"
                    },
                    "imageEvening" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be used on the front page when it is evening"
                    },
                    "dateTimeFormat" : {
                      "type" : "string",
                      "description" : "A string that represents a date time format for the client"
                    },
                    "timeFormat" : {
                      "type" : "string",
                      "description" : "A string that represents a time format without date information"
                    },
                    "imageBackground" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be shown on the login screen"
                    },
                    "imageMorning" : {
                      "type" : "string",
                      "description" : "A base64 encoded image that will be used on the front page when it is morning"
                    },
                    "theme" : {
                      "type" : "number",
                      "description" : "The client's theme"
                    },
                    "loginTitle" : {
                      "type" : "string",
                      "description" : "The title for the Login page"
                    }
                  }
                },
                "example" : {
                  "imageLogo" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageBackground" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageCourse" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageMorning" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageAfternoon" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageEvening" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "theme" : 0,
                  "primaryColor" : "#007aaa",
                  "loginTitle" : "Pelesys TMDS",
                  "loginMessage" : "Please enter your user name and password to log into Pelesys TMDS.",
                  "dateTimeFormat" : "DD.MM.YYYY HH:mm",
                  "dateFormat" : "DD.MM.YYYY",
                  "timeFormat" : "HH:mm"
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized as a SuperUser",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Settings" ],
        "summary" : "Save Settings",
        "description" : "Save client specific settings, if a settings profile does not exist for the client, it is created.\n\n::: warning\n\n## Warning\n\nOnly super user can access this api uri end point\n:::\n\n::: note\n\n## Restrictions\n\n- Logo image must be a maximum of up to 100kb\n\n- Login background image must be a maximum of up to 1mb\n\n- Course image must be a maximum of up to 500kb\n\n- Morning image must be a maximum of up to 250kb\n\n- Afternoon image must be a maximum of up to 250kb\n\n- Evening image must be a maximum of up to 250kb\n\n- All images must be a valid .jpg, .bmp, .png, .gif\n\n- Color must be in hex format [#222222], short-hand format is not accepted\n\n- Login title must not be blank, with a maximum of 60 characters\n\n- Login message must not be blank, with a maximum of 1000 characters\n\n- Formats for DateTime, Date and Time cannot be blank\n:::",
        "parameters" : [ {
          "name" : "clientid",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "dateFormat", "dateTimeFormat", "timeFormat" ],
                "type" : "object",
                "properties" : {
                  "imageLogo" : {
                    "type" : "string",
                    "description" : "A base64 encoded image that will be used for the logo image"
                  },
                  "imageBackground" : {
                    "type" : "string",
                    "description" : "A base64 encoded image that will be shown on the login screen"
                  },
                  "imageCourse" : {
                    "type" : "string",
                    "description" : "A base64 encoded image that will be used as the default course image"
                  },
                  "imageMorning" : {
                    "type" : "string",
                    "description" : "A base64 encoded image that will be used on the front page when it is morning"
                  },
                  "imageAfternoon" : {
                    "type" : "string",
                    "description" : "A base64 encoded image that will be used on the front page when it is afternoon"
                  },
                  "imageEvening" : {
                    "type" : "string",
                    "description" : "A base64 encoded image that will be used on the front page when it is evening"
                  },
                  "theme" : {
                    "type" : "number",
                    "description" : "The client's theme"
                  },
                  "primaryColor" : {
                    "type" : "string",
                    "description" : "A color in hex format"
                  },
                  "loginTitle" : {
                    "type" : "string",
                    "description" : "The title for the Login page"
                  },
                  "loginMessage" : {
                    "type" : "string",
                    "description" : "The message below the title for the login page"
                  },
                  "dateTimeFormat" : {
                    "type" : "string",
                    "description" : "A string that represents a date time format for the client"
                  },
                  "dateFormat" : {
                    "type" : "string",
                    "description" : "A string that represents a date without time information"
                  },
                  "timeFormat" : {
                    "type" : "string",
                    "description" : "A string that represents a time format without date information"
                  }
                },
                "example" : {
                  "imageLogo" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageBackground" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageCourse" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageMorning" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageAfternoon" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "imageEvening" : "/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAA==",
                  "theme" : 0,
                  "primaryColor" : "#007aaa",
                  "loginTitle" : "Pelesys TMDS",
                  "loginMessage" : "Please enter your user name and password to log into Pelesys TMDS.",
                  "dateTimeFormat" : "DD.MM.YYYY HH:mm",
                  "dateFormat" : "DD.MM.YYYY",
                  "timeFormat" : "HH:mm"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "400" : {
            "description" : "Settings data has violated one of the stated restrictions",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "*/*" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/settings/dashboard" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Get Dashboard Settings",
        "description" : "Retrieve Dashboard settings related to client",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Items" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "WelcomeMessage" : {
                      "type" : "object",
                      "properties" : {
                        "HtmlContent" : {
                          "type" : "string",
                          "description" : "String representation of the DashBoardItem's WelcomeMessage htmlContent"
                        },
                        "Title" : {
                          "type" : "string",
                          "description" : "String representation of the DashBoardItem's WelcomeMessage Title"
                        }
                      }
                    },
                    "Profile" : {
                      "type" : "object",
                      "properties" : {
                        "IsCertificateVisible" : {
                          "type" : "boolean",
                          "description" : "Represents if the Active Certificate feature is enabled or disabled"
                        },
                        "IsEnrollmentVisible" : {
                          "type" : "boolean",
                          "description" : "Represents if the Active Enrollment feature is enabled or disabled"
                        }
                      }
                    }
                  }
                },
                "example" : {
                  "Profile" : {
                    "IsCertificateVisible" : false,
                    "IsEnrollmentVisible" : false
                  },
                  "WelcomeMessage" : {
                    "Title" : "",
                    "HtmlContent" : ""
                  },
                  "Items" : [ {
                    "Name" : "",
                    "Type" : 1,
                    "Order" : 0,
                    "IsVisible" : false,
                    "Content" : ""
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Settings" ],
        "summary" : "Save Dashboard Settings",
        "description" : "Save client specific Dashboard settings, if a Dashboard settings document does not exist for the client, it is created.\n\n***",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "Profile" : {
                    "type" : "object",
                    "properties" : {
                      "IsCertificateVisible" : {
                        "type" : "boolean",
                        "description" : "Represents if the Active Certificate feature is enabled or disabled"
                      },
                      "IsEnrollmentVisible" : {
                        "type" : "boolean",
                        "description" : "Represents if the Active Enrollment feature is enabled or disabled"
                      }
                    }
                  },
                  "WelcomeMessage" : {
                    "type" : "object",
                    "properties" : {
                      "HtmlContent" : {
                        "type" : "string",
                        "description" : "String representation of the DashBoardItem's WelcomeMessage htmlContent"
                      },
                      "Title" : {
                        "type" : "string",
                        "description" : "String representation of the DashBoardItem's WelcomeMessage Title"
                      }
                    }
                  },
                  "Items" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "Profile" : {
                    "IsCertificateVisible" : false,
                    "IsEnrollmentVisible" : false
                  },
                  "WelcomeMessage" : {
                    "Title" : "",
                    "HtmlContent" : ""
                  },
                  "Items" : [ {
                    "Name" : "",
                    "Type" : 1,
                    "Order" : 0,
                    "IsVisible" : false,
                    "Content" : ""
                  } ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/settings/support" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "History",
        "description" : "Retrieve support related information",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "EntityId" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Data" : "{ }",
                  "PerformedByUserId" : "39eee4a3-d291-4dae-9302-e292ae0eead8",
                  "IsSuperUser" : true,
                  "Date" : "2020-04-03T20:23:17.8648866Z",
                  "ActionType" : 0,
                  "EntityType" : 0
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response ## Group License"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Settings" ],
        "summary" : "Save Support",
        "description" : "Save support information\n\n::: note\n\n## Restrictions\n\n- Email must be in the correct standard email format\n\n- Phone number must only contain digits\n\n- Information is restricted to 500 characters\n:::\n\n***",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "Email" : {
                    "type" : "string",
                    "description" : "support setting's Email value"
                  },
                  "Phone" : {
                    "type" : "string",
                    "description" : "support setting's phone value"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "support setting's html infomation content."
                  },
                  "Histories" : {
                    "type" : "array",
                    "description" : "A list of audit history object associated with a client id.",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "Email" : "",
                  "Phone" : "",
                  "Description" : "",
                  "Histories" : [ {
                    "EntityId" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Data" : "{ }",
                    "PerformedByUserId" : "39eee4a3-d291-4dae-9302-e292ae0eead8",
                    "IsSuperUser" : true,
                    "Date" : "2020-04-03T20:23:17.8648866Z",
                    "ActionType" : 0,
                    "EntityType" : 0
                  } ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "400" : {
            "description" : "The data contained in support info has violated rules or validation",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/licenses" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Get Current",
        "description" : "Retrieve the license for the current user\n\n***",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "isenabled", "licenseId" ],
                  "type" : "object",
                  "properties" : {
                    "termsofservice" : {
                      "type" : "string",
                      "description" : "The client's terms of service agreement"
                    },
                    "licenseId" : {
                      "type" : "string",
                      "description" : "Unique ID of the client license"
                    },
                    "userId" : {
                      "type" : "string",
                      "description" : "An Unique ID of the User has made the change(Only needs for Update)"
                    },
                    "isenabled" : {
                      "type" : "boolean",
                      "description" : "Represents if the terms of service feature is enabled or disabled"
                    }
                  }
                },
                "example" : {
                  "licenseId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                  "termsofservice" : "<p>these are the TOS</p>",
                  "isenabled" : true,
                  "userId" : "1271df53-43ea-4e18-8d9a-c323742950bb"
                }
              }
            }
          },
          "400" : {
            "description" : "User does not have an associated license",
            "content" : { }
          },
          "500" : {
            "description" : "User is not associated with a client",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Settings" ],
        "summary" : "Update",
        "description" : "Update a client's license content\n\n::: note\n\n## Rules\n\n- User must be an admin user role in order to update the terms of service\n:::",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "isenabled", "licenseId" ],
                "type" : "object",
                "properties" : {
                  "licenseId" : {
                    "type" : "string",
                    "description" : "Unique ID of the client license"
                  },
                  "termsofservice" : {
                    "type" : "string",
                    "description" : "The client's terms of service agreement"
                  },
                  "isenabled" : {
                    "type" : "boolean",
                    "description" : "Represents if the terms of service feature is enabled or disabled"
                  },
                  "userId" : {
                    "type" : "string",
                    "description" : "An Unique ID of the User has made the change(Only needs for Update)"
                  }
                },
                "example" : {
                  "licenseId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                  "termsofservice" : "<p>these are the TOS</p>",
                  "isenabled" : true,
                  "userId" : "1271df53-43ea-4e18-8d9a-c323742950bb"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/licenses/{id}" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Get Single",
        "description" : "Retrieve data for a single client's terms of service.\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "isenabled", "licenseId" ],
                  "type" : "object",
                  "properties" : {
                    "termsofservice" : {
                      "type" : "string",
                      "description" : "The client's terms of service agreement"
                    },
                    "licenseId" : {
                      "type" : "string",
                      "description" : "Unique ID of the client license"
                    },
                    "userId" : {
                      "type" : "string",
                      "description" : "An Unique ID of the User has made the change(Only needs for Update)"
                    },
                    "isenabled" : {
                      "type" : "boolean",
                      "description" : "Represents if the terms of service feature is enabled or disabled"
                    }
                  }
                },
                "example" : {
                  "licenseId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                  "termsofservice" : "<p>these are the TOS</p>",
                  "isenabled" : true,
                  "userId" : "1271df53-43ea-4e18-8d9a-c323742950bb"
                }
              }
            }
          },
          "404" : {
            "description" : "Unable To Find License",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/licenses/{id}/accept" : {
      "patch" : {
        "tags" : [ "Settings" ],
        "summary" : "Accept",
        "description" : "Has the current user accept the terms of service for their associated client\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "400" : {
            "description" : "User does not have an associated license",
            "content" : { }
          },
          "500" : {
            "description" : "User is not associated with a client",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/licenses/enable" : {
      "put" : {
        "tags" : [ "Settings" ],
        "summary" : "Enable",
        "description" : "Strictly enable the license and terms of service feature for the current client\n\n::: note\n\n## Rules\n\n- User must be an admin user role in order to enable the terms of service\n:::",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "isenabled", "licenseId" ],
                "type" : "object",
                "properties" : {
                  "licenseId" : {
                    "type" : "string",
                    "description" : "Unique ID of the client license"
                  },
                  "termsofservice" : {
                    "type" : "string",
                    "description" : "The client's terms of service agreement"
                  },
                  "isenabled" : {
                    "type" : "boolean",
                    "description" : "Represents if the terms of service feature is enabled or disabled"
                  },
                  "userId" : {
                    "type" : "string",
                    "description" : "An Unique ID of the User has made the change(Only needs for Update)"
                  }
                },
                "example" : {
                  "licenseId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                  "termsofservice" : "<p>these are the TOS</p>",
                  "isenabled" : true,
                  "userId" : "1271df53-43ea-4e18-8d9a-c323742950bb"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "User is not an administrator",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/licenses/disable" : {
      "put" : {
        "tags" : [ "Settings" ],
        "summary" : "Disable",
        "description" : "Strictly disable the license and terms of service feature for the current client\n\n::: note\n\n## Rules\n\n- User must be an admin user role in order to disable the terms of service\n:::",
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "isenabled", "licenseId" ],
                "type" : "object",
                "properties" : {
                  "licenseId" : {
                    "type" : "string",
                    "description" : "Unique ID of the client license"
                  },
                  "termsofservice" : {
                    "type" : "string",
                    "description" : "The client's terms of service agreement"
                  },
                  "isenabled" : {
                    "type" : "boolean",
                    "description" : "Represents if the terms of service feature is enabled or disabled"
                  },
                  "userId" : {
                    "type" : "string",
                    "description" : "An Unique ID of the User has made the change(Only needs for Update)"
                  }
                },
                "example" : {
                  "licenseId" : "1271df53-43ea-4e18-8d9a-c323742950bb",
                  "termsofservice" : "<p>these are the TOS</p>",
                  "isenabled" : true,
                  "userId" : "1271df53-43ea-4e18-8d9a-c323742950bb"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "User is not an administrator",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/contracts" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get All",
        "description" : "Retrieve all contracts in the system\n\n***",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of contracts"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of contracts",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "ContractID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Name" : "Contract-FA399",
                    "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                    "Description" : "A contractual obligation to deliver electronic components",
                    "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                    "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "Update",
        "description" : "Update a contract\n\n::: note\n\n## Rules\n\n- A contract with the same name cannot exist under the same parent\n\n- A contract cannot be its own parent (ContractID and ParentID cannot be the same)\n\n- A contract cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- A contract's immediate children with the same name cannot exist (No duplicate child names)\n\n- A contract cannot be its own child (ContractID cannot be the same as any of its children)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- When removing child contracts, child contract names cannot have a duplicate at the root level\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 50 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "Code", "ContractID", "Name" ],
                "type" : "object",
                "properties" : {
                  "ContractID" : {
                    "type" : "string",
                    "description" : "A unique ID for a contract"
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "A user defined name for the contract"
                  },
                  "Code" : {
                    "type" : "string",
                    "description" : "A unique code or identifier"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "An optional description"
                  },
                  "ParentID" : {
                    "type" : "string",
                    "description" : "A parent ID to define the contract as a child of another contract"
                  },
                  "ChildIds" : {
                    "type" : "array",
                    "description" : "A list of ids associated with child under the parent contract",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "UserIds" : {
                    "type" : "array",
                    "description" : "A list of ids of users that are associated with the contract",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "ContractID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Contract-FA399",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "A contractual obligation to deliver electronic components",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Contract Cannot Be Found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Create",
        "description" : "Create a new contract in the system\n\n::: note\n\n## Rules\n\n- A contract with the same name cannot exist under the same parent\n\n- A contract cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- A contract's immediate children with the same name cannot exist (No duplicate child names)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 50 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "Code", "ContractID", "Name" ],
                "type" : "object",
                "properties" : {
                  "ContractID" : {
                    "type" : "string",
                    "description" : "A unique ID for a contract"
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "A user defined name for the contract"
                  },
                  "Code" : {
                    "type" : "string",
                    "description" : "A unique code or identifier"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "An optional description"
                  },
                  "ParentID" : {
                    "type" : "string",
                    "description" : "A parent ID to define the contract as a child of another contract"
                  },
                  "ChildIds" : {
                    "type" : "array",
                    "description" : "A list of ids associated with child under the parent contract",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "UserIds" : {
                    "type" : "array",
                    "description" : "A list of ids of users that are associated with the contract",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "ContractID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Contract-FA399",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "A contractual obligation to deliver electronic components",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "Code", "ContractID", "Name" ],
                  "type" : "object",
                  "properties" : {
                    "ParentID" : {
                      "type" : "string",
                      "description" : "A parent ID to define the contract as a child of another contract"
                    },
                    "Description" : {
                      "type" : "string",
                      "description" : "An optional description"
                    },
                    "ChildIds" : {
                      "type" : "array",
                      "description" : "A list of ids associated with child under the parent contract",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "ContractID" : {
                      "type" : "string",
                      "description" : "A unique ID for a contract"
                    },
                    "Code" : {
                      "type" : "string",
                      "description" : "A unique code or identifier"
                    },
                    "UserIds" : {
                      "type" : "array",
                      "description" : "A list of ids of users that are associated with the contract",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Name" : {
                      "type" : "string",
                      "description" : "A user defined name for the contract"
                    }
                  }
                },
                "example" : {
                  "ContractID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Contract-FA399",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "A contractual obligation to deliver electronic components",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/contracts/{id}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get Single",
        "description" : "Retrieve a single contract with the matching id\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ca408cf7-8643-40fc-979c-2d29bbd419bc"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "Code", "ContractID", "Name" ],
                  "type" : "object",
                  "properties" : {
                    "ParentID" : {
                      "type" : "string",
                      "description" : "A parent ID to define the contract as a child of another contract"
                    },
                    "Description" : {
                      "type" : "string",
                      "description" : "An optional description"
                    },
                    "ChildIds" : {
                      "type" : "array",
                      "description" : "A list of ids associated with child under the parent contract",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "ContractID" : {
                      "type" : "string",
                      "description" : "A unique ID for a contract"
                    },
                    "Code" : {
                      "type" : "string",
                      "description" : "A unique code or identifier"
                    },
                    "UserIds" : {
                      "type" : "array",
                      "description" : "A list of ids of users that are associated with the contract",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Name" : {
                      "type" : "string",
                      "description" : "A user defined name for the contract"
                    }
                  }
                },
                "example" : {
                  "ContractID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Contract-FA399",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "A contractual obligation to deliver electronic components",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to Find Contract",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "Remove",
        "description" : "Delete a contract\n\n::: note\n\n## Rules\n\n- Contract cannot be deleted when it has immediate child contract\n\n- Contract cannot be deleted when it is linked to users\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "A rule/restriction has been violated",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "The contract cannot be found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/contracts/filter" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Filter",
        "description" : "Filter contracts by parameters in the body\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "isrootonly" : {
                    "type" : "boolean",
                    "description" : "When true only root contracts with be filtered"
                  },
                  "parentId" : {
                    "type" : "string",
                    "description" : "Unique ID of the contract's parent group"
                  }
                },
                "example" : {
                  "isrootonly" : false,
                  "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of contracts"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of contracts",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "ContractID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Name" : "Contract-FA399",
                    "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                    "Description" : "A contractual obligation to deliver electronic components",
                    "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                    "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/contracts/{id}/history" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "History",
        "description" : "Get a list of changes made to a contract\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "EntityId" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Data" : "{ }",
                  "PerformedByUserId" : "39eee4a3-d291-4dae-9302-e292ae0eead8",
                  "IsSuperUser" : true,
                  "Date" : "2020-04-03T20:23:17.8648866Z",
                  "ActionType" : 0,
                  "EntityType" : 0
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response## Group Equipment"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/equipment" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get All",
        "description" : "Retrieve all equipment in the system\n\n***",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of equipment"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of equipment",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "EquipmentID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Name" : "Screwdriver",
                    "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                    "Description" : "Basic maintenance tool",
                    "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                    "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "Update",
        "description" : "Update a equipment\n\n::: note\n\n## Rules\n\n- An equipment with the same name cannot exist under the same parent\n\n- An equipment cannot be its own parent (EquipmentID and ParentID cannot be the same)\n\n- An equipment cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- An equipment's immediate children with the same name cannot exist (No duplicate child names)\n\n- An equipment cannot be its own child (EquipmentID cannot be the same as any of its children)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- When removing child equipment, child equipment names cannot have a duplicate at the root level\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 50 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "Code", "EquipmentID", "Name" ],
                "type" : "object",
                "properties" : {
                  "EquipmentID" : {
                    "type" : "string",
                    "description" : "A unique ID for a equipment"
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "A user defined name for the equipment"
                  },
                  "Code" : {
                    "type" : "string",
                    "description" : "A unique code or identifier"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "An optional description"
                  },
                  "ParentID" : {
                    "type" : "string",
                    "description" : "A parent ID to define the equipment as a child of another equipment"
                  },
                  "ChildIds" : {
                    "type" : "array",
                    "description" : "A list of ids associated with child under the parent equipment",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "UserIds" : {
                    "type" : "array",
                    "description" : "A list of ids of users that are associated with the equipment",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "EquipmentID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Screwdriver",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Basic maintenance tool",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Equipment Cannot Be Found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Create",
        "description" : "Create a new equipment in the system\n\n::: note\n\n## Rules\n\n- An equipment with the same name cannot exist under the same parent\n\n- An equipment cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- An equipment's immediate children with the same name cannot exist (No duplicate child names)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 50 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "Code", "EquipmentID", "Name" ],
                "type" : "object",
                "properties" : {
                  "EquipmentID" : {
                    "type" : "string",
                    "description" : "A unique ID for a equipment"
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "A user defined name for the equipment"
                  },
                  "Code" : {
                    "type" : "string",
                    "description" : "A unique code or identifier"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "An optional description"
                  },
                  "ParentID" : {
                    "type" : "string",
                    "description" : "A parent ID to define the equipment as a child of another equipment"
                  },
                  "ChildIds" : {
                    "type" : "array",
                    "description" : "A list of ids associated with child under the parent equipment",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "UserIds" : {
                    "type" : "array",
                    "description" : "A list of ids of users that are associated with the equipment",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "EquipmentID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Screwdriver",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Basic maintenance tool",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "Code", "EquipmentID", "Name" ],
                  "type" : "object",
                  "properties" : {
                    "ParentID" : {
                      "type" : "string",
                      "description" : "A parent ID to define the equipment as a child of another equipment"
                    },
                    "Description" : {
                      "type" : "string",
                      "description" : "An optional description"
                    },
                    "EquipmentID" : {
                      "type" : "string",
                      "description" : "A unique ID for a equipment"
                    },
                    "ChildIds" : {
                      "type" : "array",
                      "description" : "A list of ids associated with child under the parent equipment",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Code" : {
                      "type" : "string",
                      "description" : "A unique code or identifier"
                    },
                    "UserIds" : {
                      "type" : "array",
                      "description" : "A list of ids of users that are associated with the equipment",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Name" : {
                      "type" : "string",
                      "description" : "A user defined name for the equipment"
                    }
                  }
                },
                "example" : {
                  "EquipmentID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Screwdriver",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Basic maintenance tool",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/equipment/{id}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get Single",
        "description" : "Retrieve a single equipment with the matching id\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ca408cf7-8643-40fc-979c-2d29bbd419bc"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "Code", "EquipmentID", "Name" ],
                  "type" : "object",
                  "properties" : {
                    "ParentID" : {
                      "type" : "string",
                      "description" : "A parent ID to define the equipment as a child of another equipment"
                    },
                    "Description" : {
                      "type" : "string",
                      "description" : "An optional description"
                    },
                    "EquipmentID" : {
                      "type" : "string",
                      "description" : "A unique ID for a equipment"
                    },
                    "ChildIds" : {
                      "type" : "array",
                      "description" : "A list of ids associated with child under the parent equipment",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Code" : {
                      "type" : "string",
                      "description" : "A unique code or identifier"
                    },
                    "UserIds" : {
                      "type" : "array",
                      "description" : "A list of ids of users that are associated with the equipment",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Name" : {
                      "type" : "string",
                      "description" : "A user defined name for the equipment"
                    }
                  }
                },
                "example" : {
                  "EquipmentID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Screwdriver",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Basic maintenance tool",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to Find Equipment",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "Remove",
        "description" : "Delete equipment\n\n::: note\n\n## Rules\n\n- Equipment cannot be deleted when it has immediate child equiment\n\n- Equipment cannot be deleted when it is linked to users\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "A rule/restriction has been violated",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "The equipment cannot be found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/equipment/filter" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Filter",
        "description" : "Filter equipment by parameters in the body\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "isrootonly" : {
                    "type" : "boolean",
                    "description" : "When true only root equipment with be filtered"
                  },
                  "parentId" : {
                    "type" : "string",
                    "description" : "Unique ID of the equipment's parent group"
                  }
                },
                "example" : {
                  "isrootonly" : false,
                  "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of equipment"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of equipment",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "EquipmentID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Name" : "Screwdriver",
                    "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                    "Description" : "Basic maintenance tool",
                    "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                    "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/equipment/{id}/history" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "History",
        "description" : "Get a list of changes made to an equipment\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "EntityId" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Data" : "{ }",
                  "PerformedByUserId" : "39eee4a3-d291-4dae-9302-e292ae0eead8",
                  "IsSuperUser" : true,
                  "Date" : "2020-04-03T20:23:17.8648866Z",
                  "ActionType" : 0,
                  "EntityType" : 0
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response## Group JobRole"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/jobroles" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get All",
        "description" : "Retrieve all job role in the system\n\n***",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of job role"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of job role",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "JobRoleID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Name" : "Scrum Master",
                    "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                    "Description" : "Diplomatic Conversationalist",
                    "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                    "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "Update",
        "description" : "Update a job role\n\n::: note\n\n## Rules\n\n- A job role with the same name cannot exist under the same parent\n\n- A job role cannot be its own parent (JobRoleID and ParentID cannot be the same)\n\n- A job role cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- A job role's immediate children with the same name cannot exist (No duplicate child names)\n\n- A job role cannot be its own child (job roleID cannot be the same as any of its children)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- When removing child job roles, child job role names cannot have a duplicate at the root level\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 50 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "Code", "JobRoleID", "Name" ],
                "type" : "object",
                "properties" : {
                  "JobRoleID" : {
                    "type" : "string",
                    "description" : "A unique ID for a job role"
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "A user defined name for the job role"
                  },
                  "Code" : {
                    "type" : "string",
                    "description" : "A unique code or identifier"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "An optional description"
                  },
                  "ParentID" : {
                    "type" : "string",
                    "description" : "A parent ID to define the job role as a child of another job role"
                  },
                  "ChildIds" : {
                    "type" : "array",
                    "description" : "A list of ids associated with child under the parent job role",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "UserIds" : {
                    "type" : "array",
                    "description" : "A list of ids of users that are associated with the job role",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "JobRoleID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Scrum Master",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Diplomatic Conversationalist",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "JobRole Cannot Be Found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Create",
        "description" : "Create a new job role in the system\n\n::: note\n\n## Rules\n\n- A job role with the same name cannot exist under the same parent\n\n- A job role cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- A job role's immediate children with the same name cannot exist (No duplicate child names)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 50 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "Code", "JobRoleID", "Name" ],
                "type" : "object",
                "properties" : {
                  "JobRoleID" : {
                    "type" : "string",
                    "description" : "A unique ID for a job role"
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "A user defined name for the job role"
                  },
                  "Code" : {
                    "type" : "string",
                    "description" : "A unique code or identifier"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "An optional description"
                  },
                  "ParentID" : {
                    "type" : "string",
                    "description" : "A parent ID to define the job role as a child of another job role"
                  },
                  "ChildIds" : {
                    "type" : "array",
                    "description" : "A list of ids associated with child under the parent job role",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "UserIds" : {
                    "type" : "array",
                    "description" : "A list of ids of users that are associated with the job role",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "JobRoleID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Scrum Master",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Diplomatic Conversationalist",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "Code", "JobRoleID", "Name" ],
                  "type" : "object",
                  "properties" : {
                    "ParentID" : {
                      "type" : "string",
                      "description" : "A parent ID to define the job role as a child of another job role"
                    },
                    "Description" : {
                      "type" : "string",
                      "description" : "An optional description"
                    },
                    "JobRoleID" : {
                      "type" : "string",
                      "description" : "A unique ID for a job role"
                    },
                    "ChildIds" : {
                      "type" : "array",
                      "description" : "A list of ids associated with child under the parent job role",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Code" : {
                      "type" : "string",
                      "description" : "A unique code or identifier"
                    },
                    "UserIds" : {
                      "type" : "array",
                      "description" : "A list of ids of users that are associated with the job role",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Name" : {
                      "type" : "string",
                      "description" : "A user defined name for the job role"
                    }
                  }
                },
                "example" : {
                  "JobRoleID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Scrum Master",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Diplomatic Conversationalist",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/jobroles/{id}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get Single",
        "description" : "Retrieve a single job role with the matching id\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ca408cf7-8643-40fc-979c-2d29bbd419bc"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "Code", "JobRoleID", "Name" ],
                  "type" : "object",
                  "properties" : {
                    "ParentID" : {
                      "type" : "string",
                      "description" : "A parent ID to define the job role as a child of another job role"
                    },
                    "Description" : {
                      "type" : "string",
                      "description" : "An optional description"
                    },
                    "JobRoleID" : {
                      "type" : "string",
                      "description" : "A unique ID for a job role"
                    },
                    "ChildIds" : {
                      "type" : "array",
                      "description" : "A list of ids associated with child under the parent job role",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Code" : {
                      "type" : "string",
                      "description" : "A unique code or identifier"
                    },
                    "UserIds" : {
                      "type" : "array",
                      "description" : "A list of ids of users that are associated with the job role",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Name" : {
                      "type" : "string",
                      "description" : "A user defined name for the job role"
                    }
                  }
                },
                "example" : {
                  "JobRoleID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Scrum Master",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Diplomatic Conversationalist",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to Find JobRole",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "Remove",
        "description" : "Delete a job role\n\n::: note\n\n## Rules\n\n- Job role cannot be deleted when it has immediate child job roles\n\n- Job role cannot be deleted when it is linked to users\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "A rule/restriction has been violated",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "The job role cannot be found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/jobroles/filter" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Filter",
        "description" : "Filter job role by parameters in the body\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "isrootonly" : {
                    "type" : "boolean",
                    "description" : "When true only root job role with be filtered"
                  },
                  "parentId" : {
                    "type" : "string",
                    "description" : "Unique ID of the job role's parent group"
                  }
                },
                "example" : {
                  "isrootonly" : false,
                  "parentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of job role"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of job role",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "JobRoleID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Name" : "Scrum Master",
                    "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                    "Description" : "Diplomatic Conversationalist",
                    "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                    "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/jobroles/{id}/history" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "History",
        "description" : "Get a list of changes made to a job role\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "EntityId" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Data" : "{ }",
                  "PerformedByUserId" : "39eee4a3-d291-4dae-9302-e292ae0eead8",
                  "IsSuperUser" : true,
                  "Date" : "2020-04-03T20:23:17.8648866Z",
                  "ActionType" : 0,
                  "EntityType" : 0
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response## Group Location"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/locations" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get All",
        "description" : "Retrieve all locations in the system\n\n***",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of locations"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of locations",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "LocationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Name" : "Vancouver",
                    "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                    "Description" : "Popular canadian city",
                    "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                    "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "Update",
        "description" : "Update a location\n\n::: note\n\n## Rules\n\n- A location with the same name cannot exist under the same parent\n\n- A location cannot be its own parent (LocationID and ParentID cannot be the same)\n\n- A location cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- A location's immediate children with the same name cannot exist (No duplicate child names)\n\n- A location cannot be its own child (locationID cannot be the same as any of its children)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- Parent if any, cannot be the special \"Any Location\" (parentId points to the location that has the code \"any\")\n\n- Children if any, cannot be the special \"Any Location\" (Any childId points to the location that has the code \"any\")\n\n- The location being updated cannot be the special \"Any Location\" (LocationId points to the location that has the code \"any\")\n\n- When removing child locations, child location names cannot have a duplicate at the root level\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 50 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "Code", "LocationID", "Name" ],
                "type" : "object",
                "properties" : {
                  "LocationID" : {
                    "type" : "string",
                    "description" : "A unique ID for a location"
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "A user defined name for the location"
                  },
                  "Code" : {
                    "type" : "string",
                    "description" : "A unique code or identifier"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "An optional description"
                  },
                  "ParentID" : {
                    "type" : "string",
                    "description" : "A parent ID to define the location as a child of another location"
                  },
                  "ChildIds" : {
                    "type" : "array",
                    "description" : "A list of ids associated with child under the parent location",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "UserIds" : {
                    "type" : "array",
                    "description" : "A list of ids of users that are associated with the location",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "LocationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Vancouver",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Popular canadian city",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Location Cannot Be Found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Create",
        "description" : "Create a new location in the system\n\n::: note\n\n## Rules\n\n- A location with the same name cannot exist under the same parent\n\n- A location cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- A location's immediate children with the same name cannot exist (No duplicate child names)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- Parent if any, cannot be the special \"Any Location\" (parentId points to the location that has the code \"any\")\n\n- Children if any, cannot be the special \"Any Location\" (Any childId points to the location that has the code \"any\")\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 50 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "Code", "LocationID", "Name" ],
                "type" : "object",
                "properties" : {
                  "LocationID" : {
                    "type" : "string",
                    "description" : "A unique ID for a location"
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "A user defined name for the location"
                  },
                  "Code" : {
                    "type" : "string",
                    "description" : "A unique code or identifier"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "An optional description"
                  },
                  "ParentID" : {
                    "type" : "string",
                    "description" : "A parent ID to define the location as a child of another location"
                  },
                  "ChildIds" : {
                    "type" : "array",
                    "description" : "A list of ids associated with child under the parent location",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "UserIds" : {
                    "type" : "array",
                    "description" : "A list of ids of users that are associated with the location",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "LocationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Vancouver",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Popular canadian city",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "Code", "LocationID", "Name" ],
                  "type" : "object",
                  "properties" : {
                    "ParentID" : {
                      "type" : "string",
                      "description" : "A parent ID to define the location as a child of another location"
                    },
                    "Description" : {
                      "type" : "string",
                      "description" : "An optional description"
                    },
                    "LocationID" : {
                      "type" : "string",
                      "description" : "A unique ID for a location"
                    },
                    "ChildIds" : {
                      "type" : "array",
                      "description" : "A list of ids associated with child under the parent location",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Code" : {
                      "type" : "string",
                      "description" : "A unique code or identifier"
                    },
                    "UserIds" : {
                      "type" : "array",
                      "description" : "A list of ids of users that are associated with the location",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Name" : {
                      "type" : "string",
                      "description" : "A user defined name for the location"
                    }
                  }
                },
                "example" : {
                  "LocationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Vancouver",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Popular canadian city",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/locations/{id}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get Single",
        "description" : "Retrieve a single location with the matching id\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ca408cf7-8643-40fc-979c-2d29bbd419bc"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "Code", "LocationID", "Name" ],
                  "type" : "object",
                  "properties" : {
                    "ParentID" : {
                      "type" : "string",
                      "description" : "A parent ID to define the location as a child of another location"
                    },
                    "Description" : {
                      "type" : "string",
                      "description" : "An optional description"
                    },
                    "LocationID" : {
                      "type" : "string",
                      "description" : "A unique ID for a location"
                    },
                    "ChildIds" : {
                      "type" : "array",
                      "description" : "A list of ids associated with child under the parent location",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Code" : {
                      "type" : "string",
                      "description" : "A unique code or identifier"
                    },
                    "UserIds" : {
                      "type" : "array",
                      "description" : "A list of ids of users that are associated with the location",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Name" : {
                      "type" : "string",
                      "description" : "A user defined name for the location"
                    }
                  }
                },
                "example" : {
                  "LocationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Vancouver",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Popular canadian city",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to Find Location",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "Remove",
        "description" : "Delete a location\n\n::: note\n\n## Rules\n\n- Location cannot be deleted when it has immediate child locations\n\n- Location cannot be deleted when it is linked to users\n\n- Location cannot be deleted when it is the special \"Any Location\" (LocationId points to the location that has the code \"any\")\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "A rule/restriction has been violated",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "The location cannot be found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/locations/filter" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Filter",
        "description" : "Filter locations by parameters in the body\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "IsRootOnly" : {
                    "type" : "boolean",
                    "description" : "Determines if root locations should be the only entities filtered"
                  },
                  "ParentId" : {
                    "type" : "string",
                    "description" : "Finds immediate child locations based on the ParentId provided"
                  },
                  "LocationIds" : {
                    "type" : "array",
                    "description" : "A list of location IDs used to find locations",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "ExcludeIds" : {
                    "type" : "array",
                    "description" : "A list of location IDs used to exclude locations",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "IsIncludeAnyLocation" : {
                    "type" : "boolean",
                    "description" : "Determines if the special \"Any Location\" should be included (a null value is treated as an alias for false)"
                  }
                },
                "example" : {
                  "IsRootOnly" : true,
                  "ParentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "LocationIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "ExcludeIds" : [ "81eb8c1e-f4ad-4339-8b61-18721428f279" ],
                  "IsIncludeAnyLocation" : false
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of locations"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of locations",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "LocationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Name" : "Vancouver",
                    "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                    "Description" : "Popular canadian city",
                    "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                    "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/locations/{id}/history" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "History",
        "description" : "Get a list of changes made to a location\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "EntityId" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Data" : "{ }",
                  "PerformedByUserId" : "39eee4a3-d291-4dae-9302-e292ae0eead8",
                  "IsSuperUser" : true,
                  "Date" : "2020-04-03T20:23:17.8648866Z",
                  "ActionType" : 0,
                  "EntityType" : 0
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/locations/{id}/userOrganizationLocations" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get UserOrganizationLocations",
        "description" : "Retrieve all UserOrganizationLocations associated with the LocationId provided.\n\n::: note\n\n## Rules\n\n- Requires read level access for locations.\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ca408cf7-8643-40fc-979c-2d29bbd419bc"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                  "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                  "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                  "locationName" : "Kaer morhen",
                  "organizationName" : "Pelesys",
                  "loginName" : "admin",
                  "firstName" : "firstName",
                  "lastName" : "lastName",
                  "email" : "user@g.com",
                  "employeeId" : "507949"
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response## Group Organization"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/organizations" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get All",
        "description" : "Retrieve all organizations in the system\n\n***",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of organizations"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of organizations",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "OrganizationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Name" : "Department 100",
                    "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                    "Description" : "Research & Development Department",
                    "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                    "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Contract" ],
        "summary" : "Update",
        "description" : "Update a organization\n\n::: note\n\n## Rules\n\n- An organization with the same name cannot exist under the same parent\n\n- An organization cannot be its own parent (OrganizationID and ParentID cannot be the same)\n\n- An organization cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- An organization's immediate children with the same name cannot exist (No duplicate child names)\n\n- An organization cannot be its own child (organizationID cannot be the same as any of its children)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- The parent is any, cannot be the special \"Any Organization\" (parentId points to the organization that has the code \"any\")\n\n- Children if any, cannot be the special \"Any Organization\" (Any childId points to the organization that has the code \"any\")\n\n- The organization being updated cannot be the special \"Any Organization\" (OrganizationId points to the organization that has the code \"any\")\n\n- When removing child organizations, child organization names cannot have a duplicate at the root level\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 50 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "Code", "Name", "OrganizationID" ],
                "type" : "object",
                "properties" : {
                  "OrganizationID" : {
                    "type" : "string",
                    "description" : "A unique ID for a organization"
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "A user defined name for the organization"
                  },
                  "Code" : {
                    "type" : "string",
                    "description" : "A unique code or identifier"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "An optional description"
                  },
                  "ParentID" : {
                    "type" : "string",
                    "description" : "A parent ID to define the organization as a child of another organization"
                  },
                  "ChildIds" : {
                    "type" : "array",
                    "description" : "A list of ids associated with child under the parent organization",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "UserIds" : {
                    "type" : "array",
                    "description" : "A list of ids of users that are associated with the organization",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "OrganizationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Department 100",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Research & Development Department",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Organization Cannot Be Found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Create",
        "description" : "Create a new organization in the system\n\n::: note\n\n## Rules\n\n- An organization with the same name cannot exist under the same parent\n\n- An organization cannot have an ancestor that is an immediate child (No ParentIds can be the same as any of its children)\n\n- An organization's immediate children with the same name cannot exist (No duplicate child names)\n\n- A parentId must either be null (root) or an ID that exists in the system\n\n- The parent is any, cannot be the special \"Any Organization\" (parentId points to the organization that has the code \"any\")\n\n- Children if any, cannot be the special \"Any Organization\" (Any childId points to the organization that has the code \"any\")\n\n- Name field is restricted to a maximum of 100 characters\n\n- Code field must be unique and a maximum of 50 characters\n\n- Description field is restricted to a maximum of 500 characters\n:::",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "required" : [ "Code", "Name", "OrganizationID" ],
                "type" : "object",
                "properties" : {
                  "OrganizationID" : {
                    "type" : "string",
                    "description" : "A unique ID for a organization"
                  },
                  "Name" : {
                    "type" : "string",
                    "description" : "A user defined name for the organization"
                  },
                  "Code" : {
                    "type" : "string",
                    "description" : "A unique code or identifier"
                  },
                  "Description" : {
                    "type" : "string",
                    "description" : "An optional description"
                  },
                  "ParentID" : {
                    "type" : "string",
                    "description" : "A parent ID to define the organization as a child of another organization"
                  },
                  "ChildIds" : {
                    "type" : "array",
                    "description" : "A list of ids associated with child under the parent organization",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "UserIds" : {
                    "type" : "array",
                    "description" : "A list of ids of users that are associated with the organization",
                    "items" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : {
                  "OrganizationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Department 100",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Research & Development Department",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "Code", "Name", "OrganizationID" ],
                  "type" : "object",
                  "properties" : {
                    "ParentID" : {
                      "type" : "string",
                      "description" : "A parent ID to define the organization as a child of another organization"
                    },
                    "Description" : {
                      "type" : "string",
                      "description" : "An optional description"
                    },
                    "ChildIds" : {
                      "type" : "array",
                      "description" : "A list of ids associated with child under the parent organization",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "OrganizationID" : {
                      "type" : "string",
                      "description" : "A unique ID for a organization"
                    },
                    "Code" : {
                      "type" : "string",
                      "description" : "A unique code or identifier"
                    },
                    "UserIds" : {
                      "type" : "array",
                      "description" : "A list of ids of users that are associated with the organization",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Name" : {
                      "type" : "string",
                      "description" : "A user defined name for the organization"
                    }
                  }
                },
                "example" : {
                  "OrganizationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Department 100",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Research & Development Department",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/organizations/{id}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get Single",
        "description" : "Retrieve a single organization with the matching id\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ca408cf7-8643-40fc-979c-2d29bbd419bc"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "Code", "Name", "OrganizationID" ],
                  "type" : "object",
                  "properties" : {
                    "ParentID" : {
                      "type" : "string",
                      "description" : "A parent ID to define the organization as a child of another organization"
                    },
                    "Description" : {
                      "type" : "string",
                      "description" : "An optional description"
                    },
                    "ChildIds" : {
                      "type" : "array",
                      "description" : "A list of ids associated with child under the parent organization",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "OrganizationID" : {
                      "type" : "string",
                      "description" : "A unique ID for a organization"
                    },
                    "Code" : {
                      "type" : "string",
                      "description" : "A unique code or identifier"
                    },
                    "UserIds" : {
                      "type" : "array",
                      "description" : "A list of ids of users that are associated with the organization",
                      "items" : {
                        "type" : "object"
                      }
                    },
                    "Name" : {
                      "type" : "string",
                      "description" : "A user defined name for the organization"
                    }
                  }
                },
                "example" : {
                  "OrganizationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Name" : "Department 100",
                  "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                  "Description" : "Research & Development Department",
                  "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                  "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "Unable to Find Organization",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "Remove",
        "description" : "Delete an organization\n\n::: note\n\n## Rules\n\n- Organization cannot be deleted when it has immediate child organizations\n\n- Organization cannot be deleted when it is linked to users\n\n- Organization cannot be deleted when it is the special \"Any Organization\" (OrganizationId points to the organization that has the code \"any\")\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "400" : {
            "description" : "A rule/restriction has been violated",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "404" : {
            "description" : "The organization cannot be found",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/organizations/filter" : {
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Filter",
        "description" : "Filter organizations by parameters in the body\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "IsRootOnly" : {
                    "type" : "boolean",
                    "description" : "Determines if root organizations should be the only entities filtered"
                  },
                  "ParentId" : {
                    "type" : "string",
                    "description" : "Finds immediate child organizations based on the ParentId provided"
                  },
                  "OrganizationIds" : {
                    "type" : "array",
                    "description" : "A list of organization IDs used to find organizations",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "ExcludeIds" : {
                    "type" : "array",
                    "description" : "A list of organization IDs used to exclude organizations",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "IsIncludeAnyOrganization" : {
                    "type" : "boolean",
                    "description" : "Determines if the special \"Any Organization\" should be included (a null value is treated as an alias for false)"
                  }
                },
                "example" : {
                  "IsRootOnly" : true,
                  "ParentId" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "OrganizationIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                  "ExcludeIds" : [ "81eb8c1e-f4ad-4339-8b61-18721428f279" ],
                  "IsIncludeAnyOrganization" : false
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink ``" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count 100" : {
                      "type" : "number",
                      "description" : "Total number of organizations"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "List of organizations",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "OrganizationID" : "73e25631-72e1-47da-b58d-8571f14afe08",
                    "Name" : "Department 100",
                    "Code" : "6afefbe1-1e71-4d54-a38a-4c7ee6a3dfb2",
                    "Description" : "Research & Development Department",
                    "ParentID" : "81eb8c1e-f4ad-4339-8b61-18721428f279",
                    "ChildIds" : [ "339b4630-43b6-4c6b-8900-18288ef693c6" ],
                    "UserIds" : [ "39eee4a3-d291-4dae-9302-e292ae0eead8" ]
                  } ],
                  "nextPageLink ``" : "",
                  "count 100" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/organizations/{id}/history" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "History",
        "description" : "Get a list of changes made to an organization\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "eb1067e6-d852-48b0-a867-5763a1f14800"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "EntityId" : "73e25631-72e1-47da-b58d-8571f14afe08",
                  "Data" : "{ }",
                  "PerformedByUserId" : "39eee4a3-d291-4dae-9302-e292ae0eead8",
                  "IsSuperUser" : true,
                  "Date" : "2020-04-03T20:23:17.8648866Z",
                  "ActionType" : 0,
                  "EntityType" : 0
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/organizations/{id}/userOrganizationLocations" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get UserOrganizationLocations",
        "description" : "Retrieve all UserOrganizationLocations associated with the OrganizationId provided.\n\n::: note\n\n## Rules\n\n- Requires read level access for organizations.\n:::",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ca408cf7-8643-40fc-979c-2d29bbd419bc"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "userId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                  "organizationId" : "7104a718-999f-4bb2-aee1-e3c98b98b51b",
                  "locationId" : "85b6cddc-4892-4105-9668-7a28ca6a00a9",
                  "locationName" : "Kaer morhen",
                  "organizationName" : "Pelesys",
                  "loginName" : "admin",
                  "firstName" : "firstName",
                  "lastName" : "lastName",
                  "email" : "user@g.com",
                  "employeeId" : "507949"
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response## Group Health"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/health/message/errors" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get",
        "description" : "Get a list of all application currently attached to GC along with their status.\n\n***",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  }
                },
                "example" : [ {
                  "id" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "application" : "SCH",
                  "uri" : "https://pele-038v2.pelesys.net:454/",
                  "state" : 0,
                  "lastPing" : "2019-07-11T20:49:32.5617463Z"
                } ]
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "403" : {
            "description" : "Only super user may access this api.",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Contract" ],
        "summary" : "Filter",
        "description" : "Return a subset of message errors.\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "application" : {
                    "type" : "string",
                    "description" : "An exact case-insensitive match against the error's application field"
                  }
                },
                "example" : {
                  "application" : "SCH"
                }
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "nextPageLink" : {
                      "type" : "string",
                      "description" : "Url to the next set of results"
                    },
                    "count" : {
                      "type" : "number",
                      "description" : "Total number of items in the subset"
                    },
                    "items" : {
                      "type" : "array",
                      "description" : "A list of message error items",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  }
                },
                "example" : {
                  "items" : [ {
                    "id" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                    "messageIndex" : 100,
                    "date" : "2019-07-07T20:00:00.0000000Z",
                    "application" : "SCH",
                    "action" : "UpdateUser",
                    "errorMessage" : "User with ID aa2b5cfa-e673-40d7-9fc0-0e51a9d7ea95 is not found",
                    "uri" : "https://pele-102.pelesys.net:449/"
                  } ],
                  "nextPageLink" : "https://pele-038v2.pelesys.net:446/api/health/message/errors?$skip=50",
                  "count" : 100
                }
              }
            }
          },
          "400" : {
            "description" : "An Error Has Occurred.",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "403" : {
            "description" : "Only super user may access this api.",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Contract" ],
        "summary" : "Clean",
        "description" : "Remove all errors in the system.\n\n***",
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "403" : {
            "description" : "Only super user may access this api.",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/proxy/{id}" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Get",
        "description" : "Retrieve a single proxy based on a specific guid id\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ca408cf7-8643-40fc-979c-2d29bbd419bc"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Encoding" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "application", "id", "lastPing", "state", "uri" ],
                  "type" : "object",
                  "properties" : {
                    "application" : {
                      "type" : "string",
                      "description" : "The name of the proxy node attached to GC"
                    },
                    "lastPing" : {
                      "type" : "string",
                      "description" : "The date of the proxies last ping to GC"
                    },
                    "id" : {
                      "type" : "string",
                      "description" : "The current session id of the proxy"
                    },
                    "state" : {
                      "type" : "number",
                      "description" : "The current state of the proxy"
                    },
                    "uri" : {
                      "type" : "string",
                      "description" : "The host url of the proxy"
                    }
                  }
                },
                "example" : {
                  "id" : "13ace924-3d0b-4cfb-8999-2c9c8f053f74",
                  "application" : "SCH",
                  "uri" : "https://pele-038v2.pelesys.net:454/",
                  "state" : 0,
                  "lastPing" : "2019-07-11T20:49:32.5617463Z"
                }
              }
            }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "403" : {
            "description" : "Only super user may access this api.",
            "content" : { }
          },
          "404" : {
            "description" : "Unable to find a proxy",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    },
    "/api/proxy/{id}/reconnect" : {
      "get" : {
        "tags" : [ "Contract" ],
        "summary" : "Reconnect",
        "description" : "Reconnect a proxy that is disconnected\n\n***",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ca408cf7-8643-40fc-979c-2d29bbd419bc"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "e.g. application/json",
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : { }
          },
          "401" : {
            "description" : "Returned when the user is not authorized, e.g. missing token or expired token.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "required" : [ "message" ],
                  "type" : "object",
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "description" : "Reason for the unauthorized error response"
                    }
                  }
                },
                "example" : {
                  "message" : "Authorization has been denied for this request."
                }
              }
            }
          },
          "403" : {
            "description" : "Only super user may access this api.",
            "content" : { }
          },
          "404" : {
            "description" : "Unable to find a proxy",
            "content" : { }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "User" : {
        "required" : [ "email", "firstname", "lastname", "loginname", "password", "userId", "userroleids" ],
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "description" : "Unique ID of the user"
          },
          "employeeId" : {
            "type" : "string",
            "description" : "ID given by the user's company"
          },
          "title" : {
            "type" : "string",
            "description" : "Title given to the user"
          },
          "firstname" : {
            "type" : "string",
            "description" : "User's first name"
          },
          "middlename" : {
            "type" : "string",
            "description" : "User's middle name"
          },
          "lastname" : {
            "type" : "string",
            "description" : "User's last name"
          },
          "loginname" : {
            "type" : "string",
            "description" : "User's unique login name they will use to log in"
          },
          "password" : {
            "type" : "string",
            "description" : "Password that the user will use to log in"
          },
          "email" : {
            "type" : "string",
            "description" : "User's email address"
          },
          "photo" : {
            "type" : "string",
            "description" : "string representation of a photo"
          },
          "company" : {
            "type" : "string",
            "description" : "Name of the user's company"
          },
          "department" : {
            "type" : "string",
            "description" : "Name of the user's department"
          },
          "notes" : {
            "type" : "string",
            "description" : "Additional notes about the user"
          },
          "employmentdate" : {
            "type" : "string",
            "description" : "The date the user was employed"
          },
          "expirydate" : {
            "type" : "string",
            "description" : "The date the user'a account will expire"
          },
          "extendedRoleId" : {
            "type" : "string",
            "description" : "A system role id when an override exists, null if not"
          },
          "userroleids" : {
            "type" : "array",
            "description" : "A collection of user role ids that the user is assigned to",
            "items" : {
              "type" : "object"
            }
          },
          "usergroupids" : {
            "type" : "array",
            "description" : "A collection of user group ids that the user is assigned to",
            "items" : {
              "type" : "object"
            }
          },
          "contractids" : {
            "type" : "array",
            "description" : "A collection of contract ids associated with the user",
            "items" : {
              "type" : "object"
            }
          },
          "equipmentids" : {
            "type" : "array",
            "description" : "A collection of equipment ids associated with the user",
            "items" : {
              "type" : "object"
            }
          },
          "jobroleids" : {
            "type" : "array",
            "description" : "A collection of job role ids associated with the user",
            "items" : {
              "type" : "object"
            }
          },
          "organizationLocations" : {
            "type" : "array",
            "description" : "A list of an organization location pairing that the user is associated with",
            "items" : {
              "type" : "object"
            }
          },
          "userAddress" : {
            "$ref" : "#/components/schemas/UserAddress"
          }
        }
      },
      "UserFilterModel" : {
        "type" : "object",
        "properties" : {
          "firstname" : {
            "type" : "string",
            "description" : "User's first name"
          },
          "lastname" : {
            "type" : "string",
            "description" : "User's last name"
          },
          "loginname" : {
            "type" : "string",
            "description" : "User's unique login name they will use to log in"
          },
          "email" : {
            "type" : "string",
            "description" : "User's email address"
          },
          "employeeId" : {
            "type" : "string",
            "description" : "ID given by the user's company"
          },
          "userroleids" : {
            "type" : "array",
            "description" : "An array of user role ids to filter by",
            "items" : {
              "type" : "object"
            }
          },
          "excluderoleIds" : {
            "type" : "array",
            "description" : "An array of user role ids to exclude in filter results",
            "items" : {
              "type" : "object"
            }
          },
          "userIds" : {
            "type" : "array",
            "description" : "An array of user ids to filter by",
            "items" : {
              "type" : "object"
            }
          },
          "excludeIds" : {
            "type" : "array",
            "description" : "An array of user ids to exclude in filter results",
            "items" : {
              "type" : "object"
            }
          },
          "usergroupids" : {
            "type" : "array",
            "description" : "A array of user group ids used to filter by",
            "items" : {
              "type" : "object"
            }
          },
          "organizationIds" : {
            "type" : "array",
            "description" : "A array of organization IDs used to filter by",
            "items" : {
              "type" : "object"
            }
          },
          "locationIds" : {
            "type" : "array",
            "description" : "A array of location IDs used to filter by",
            "items" : {
              "type" : "object"
            }
          },
          "contractids" : {
            "type" : "array",
            "description" : "A array of contract ids used to filter by",
            "items" : {
              "type" : "object"
            }
          },
          "equipmentids" : {
            "type" : "array",
            "description" : "A array of equipment ids used to filter by",
            "items" : {
              "type" : "object"
            }
          },
          "jobroleids" : {
            "type" : "array",
            "description" : "A array of job role ids used to filter by",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "UserOrganizationLocation" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "description" : "The unique id of the user"
          },
          "organizationId" : {
            "type" : "string",
            "description" : "The unique id of the organization"
          },
          "locationId" : {
            "type" : "string",
            "description" : "The unique id of the location"
          },
          "locationName" : {
            "type" : "string",
            "description" : "The name of the location"
          },
          "organizationName" : {
            "type" : "string",
            "description" : "The name of the organization"
          },
          "loginName" : {
            "type" : "string",
            "description" : "The login name of the user"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the user"
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the user"
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the user"
          },
          "employeeId" : {
            "type" : "string",
            "description" : "The employee id of the user"
          }
        }
      },
      "UserOrganizationLocationFilterModel" : {
        "type" : "object",
        "properties" : {
          "userIds" : {
            "type" : "array",
            "description" : "An array of user IDs used to find UserOrganizationLocations",
            "items" : {
              "type" : "object"
            }
          },
          "userOrganizationIds" : {
            "type" : "array",
            "description" : "An array of organization IDs used to find UserOrganizationLocations that have users in an organization",
            "items" : {
              "type" : "object"
            }
          },
          "userLocationIds" : {
            "type" : "array",
            "description" : "An array of location IDs used to find UserOrganizationLocations that have users in a location",
            "items" : {
              "type" : "object"
            }
          },
          "organizationIds" : {
            "type" : "array",
            "description" : "A list of organization IDs used to find UserOrganizationLocations",
            "items" : {
              "type" : "object"
            }
          },
          "locationIds" : {
            "type" : "array",
            "description" : "A list of location IDs used to find UserOrganizationLocations",
            "items" : {
              "type" : "object"
            }
          },
          "usergroupids" : {
            "type" : "array",
            "description" : "A list of user group ids used to find UserOrganizationLocations",
            "items" : {
              "type" : "object"
            }
          },
          "contractids" : {
            "type" : "array",
            "description" : "A list of contract ids used to find UserOrganizationLocations",
            "items" : {
              "type" : "object"
            }
          },
          "equipmentids" : {
            "type" : "array",
            "description" : "A list of equipment ids used to find UserOrganizationLocations",
            "items" : {
              "type" : "object"
            }
          },
          "jobroleids" : {
            "type" : "array",
            "description" : "A list of job role ids used to find UserOrganizationLocations",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "UserOrganizationLocationError" : {
        "type" : "object",
        "properties" : {
          "errorMessage" : {
            "type" : "string",
            "description" : "The reason the model failed to be handled in the respective api call"
          },
          "failedModel" : {
            "$ref" : "#/components/schemas/UserOrganizationLocation"
          }
        }
      },
      "UserAddress" : {
        "required" : [ "addressId", "countryId" ],
        "type" : "object",
        "properties" : {
          "addressId" : {
            "type" : "string",
            "description" : "Unique ID of the user address"
          },
          "street1" : {
            "type" : "string",
            "description" : "The user's mailing address"
          },
          "street2" : {
            "type" : "string",
            "description" : "The user's alternate mailing address"
          },
          "city" : {
            "type" : "string",
            "description" : "The name of the city the user resides in"
          },
          "provinceId" : {
            "type" : "string",
            "description" : "The postal abbreviations of the province/state the user resides in"
          },
          "countryId" : {
            "type" : "string",
            "description" : "The abbreviations of the country the user resides in"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The user's postal code"
          },
          "phonenumber" : {
            "type" : "string",
            "description" : "The user's home phone number"
          },
          "cellnumber" : {
            "type" : "string",
            "description" : "The user's cellphone number"
          },
          "faxnumber" : {
            "type" : "string",
            "description" : "The user's fax number"
          },
          "placeofbirth" : {
            "type" : "string",
            "description" : "The user's place of birth"
          },
          "citizenshipId" : {
            "type" : "string",
            "description" : "The abbreviations of the country the user has citizenship in"
          },
          "gender" : {
            "type" : "number",
            "description" : "The user's gender"
          },
          "dateofbirth" : {
            "type" : "string",
            "description" : "The date the user'a account will expire"
          },
          "licensenumber" : {
            "type" : "string",
            "description" : "The user's license number"
          },
          "costcenter" : {
            "type" : "string",
            "description" : "The user's cost center"
          }
        }
      },
      "Profile" : {
        "type" : "object"
      },
      "ProfileAddress" : {
        "required" : [ "addressId" ],
        "type" : "object",
        "properties" : {
          "addressId" : {
            "type" : "string",
            "description" : "Unique ID of the user address"
          },
          "street1" : {
            "type" : "string",
            "description" : "The user's mailing address"
          },
          "street2" : {
            "type" : "string",
            "description" : "The user's alternate mailing address"
          },
          "city" : {
            "type" : "string",
            "description" : "The name of the city the user resides in"
          },
          "provinceId" : {
            "type" : "string",
            "description" : "The postal abbreviations of the province/state the user resides in"
          },
          "countryId" : {
            "type" : "string",
            "description" : "The abbreviations of the country the user resides in"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The user's postal code"
          },
          "phonenumber" : {
            "type" : "string",
            "description" : "The user's home phone number"
          },
          "cellnumber" : {
            "type" : "string",
            "description" : "The user's cellphone number"
          },
          "faxnumber" : {
            "type" : "string",
            "description" : "The user's fax number"
          },
          "placeofbirth" : {
            "type" : "string",
            "description" : "The user's place of birth"
          },
          "citizenshipId" : {
            "type" : "string",
            "description" : "The abbreviations of the country the user has citizenship in"
          },
          "gender" : {
            "type" : "number",
            "description" : "The user's gender"
          },
          "dateofbirth" : {
            "type" : "string",
            "description" : "The date the user'a account will expire"
          },
          "licensenumber" : {
            "type" : "string",
            "description" : "The user's license number"
          },
          "costcenter" : {
            "type" : "string",
            "description" : "The user's cost center"
          }
        }
      },
      "UserPassword" : {
        "required" : [ "newpassword", "oldpassword" ],
        "type" : "object",
        "properties" : {
          "oldpassword" : {
            "type" : "string",
            "description" : "User's old password"
          },
          "newpassword" : {
            "type" : "string",
            "description" : "The password that the user wants to change to"
          }
        }
      },
      "UserRole" : {
        "required" : [ "isbuiltin", "name", "userroleId" ],
        "type" : "object",
        "properties" : {
          "userroleId" : {
            "type" : "string",
            "description" : "Unique ID of the user role"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the user role"
          },
          "description" : {
            "type" : "string",
            "description" : "Brief description of the user role"
          },
          "type" : {
            "type" : "number"
          },
          "isbuiltin" : {
            "type" : "boolean",
            "description" : "Represents if the user role is built in or user created"
          },
          "users" : {
            "type" : "array",
            "description" : "An array of user ids that are in the user role",
            "items" : {
              "type" : "object"
            }
          },
          "usercount" : {
            "type" : "number",
            "description" : "The total number of user that are actively in the user role"
          }
        }
      },
      "UserGroup" : {
        "required" : [ "name", "usergroupId" ],
        "type" : "object",
        "properties" : {
          "usergroupId" : {
            "type" : "string",
            "description" : "Unique ID of the user group"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the user group"
          },
          "description" : {
            "type" : "string",
            "description" : "Brief description of the user group"
          },
          "users" : {
            "type" : "array",
            "description" : "An array of user ids that are in the user group",
            "items" : {
              "type" : "object"
            }
          },
          "parentId" : {
            "type" : "string",
            "description" : "Unique ID of the user group's parent group"
          },
          "childIds" : {
            "type" : "array",
            "description" : "An array of ids of the user group's child groups",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "CsvMessage" : {
        "required" : [ "message", "messageType" ],
        "type" : "object",
        "properties" : {
          "identifier" : {
            "type" : "string",
            "description" : "A unique identifier for that row of user"
          },
          "rowNumber" : {
            "type" : "number",
            "description" : "The row in the csv that has caused an error"
          },
          "message" : {
            "type" : "string",
            "description" : "A message explaining why a particular row caused an error, or summary of how many users successfully created/update or failed during the user import"
          },
          "messageType" : {
            "type" : "number",
            "description" : "Enum that represents the message type of that row processed"
          }
        }
      },
      "Client" : {
        "type" : "object"
      },
      "ClientAuthentication" : {
        "required" : [ "accessTokenDuration", "appKey", "authenticationId", "refreshTokenDuration", "type" ],
        "type" : "object",
        "properties" : {
          "authenticationId" : {
            "type" : "string",
            "description" : "Unique ID of the client"
          },
          "type" : {
            "type" : "number",
            "description" : "Enum that represents the authentication type"
          },
          "endPointUrl" : {
            "type" : "string",
            "description" : "galaxy.pelesys.com:8081/identity/ (string, required) - The uri pointing to the identity server"
          },
          "appKey" : {
            "type" : "string",
            "description" : "IP Address of the client"
          },
          "accessTokenDuration" : {
            "type" : "number",
            "description" : "The duration in minutes of the primary access token"
          },
          "refreshTokenDuration" : {
            "type" : "number",
            "description" : "The duration in minutes of the refresh token"
          }
        }
      },
      "ClientApplication" : {
        "required" : [ "applicationtype", "isenabled" ],
        "type" : "object",
        "properties" : {
          "applicationtype" : {
            "type" : "number",
            "description" : "Enum that represents the type of application"
          },
          "isenabled" : {
            "type" : "boolean",
            "description" : "Represents if the application is enabled or disabled"
          }
        }
      },
      "ClientContact" : {
        "required" : [ "contactId", "firstname", "lastname" ],
        "type" : "object",
        "properties" : {
          "contactId" : {
            "type" : "string",
            "description" : "Unique ID of the client contact"
          },
          "firstname" : {
            "type" : "string",
            "description" : "Client contact's first name"
          },
          "middlename" : {
            "type" : "string",
            "description" : "Client contact's middle name"
          },
          "lastname" : {
            "type" : "string",
            "description" : "Client contact's last name"
          },
          "email" : {
            "type" : "string",
            "description" : "Client contact's email"
          }
        }
      },
      "ClientAddress" : {
        "required" : [ "addressId", "countryId" ],
        "type" : "object",
        "properties" : {
          "addressId" : {
            "type" : "string",
            "description" : "Unique ID of the client address"
          },
          "street1" : {
            "type" : "string",
            "description" : "The client's mailing address"
          },
          "street2" : {
            "type" : "string",
            "description" : "The client's alternate mailing address"
          },
          "city" : {
            "type" : "string",
            "description" : "The name of the city the client resides in"
          },
          "provinceId" : {
            "type" : "string",
            "description" : "The postal abbreviations of the province/state the client resides in"
          },
          "countryId" : {
            "type" : "string",
            "description" : "The abbreviations of the country the client resides in"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The client's postal code"
          },
          "phonenumber" : {
            "type" : "string",
            "description" : "The client's business phone number"
          },
          "faxnumber" : {
            "type" : "string",
            "description" : "The client's fax number"
          }
        }
      },
      "ClientSettings" : {
        "required" : [ "dateFormat", "dateTimeFormat", "timeFormat" ],
        "type" : "object",
        "properties" : {
          "imageLogo" : {
            "type" : "string",
            "description" : "A base64 encoded image that will be used for the logo image"
          },
          "imageBackground" : {
            "type" : "string",
            "description" : "A base64 encoded image that will be shown on the login screen"
          },
          "imageCourse" : {
            "type" : "string",
            "description" : "A base64 encoded image that will be used as the default course image"
          },
          "imageMorning" : {
            "type" : "string",
            "description" : "A base64 encoded image that will be used on the front page when it is morning"
          },
          "imageAfternoon" : {
            "type" : "string",
            "description" : "A base64 encoded image that will be used on the front page when it is afternoon"
          },
          "imageEvening" : {
            "type" : "string",
            "description" : "A base64 encoded image that will be used on the front page when it is evening"
          },
          "theme" : {
            "type" : "number",
            "description" : "The client's theme"
          },
          "primaryColor" : {
            "type" : "string",
            "description" : "A color in hex format"
          },
          "loginTitle" : {
            "type" : "string",
            "description" : "The title for the Login page"
          },
          "loginMessage" : {
            "type" : "string",
            "description" : "The message below the title for the login page"
          },
          "dateTimeFormat" : {
            "type" : "string",
            "description" : "A string that represents a date time format for the client"
          },
          "dateFormat" : {
            "type" : "string",
            "description" : "A string that represents a date without time information"
          },
          "timeFormat" : {
            "type" : "string",
            "description" : "A string that represents a time format without date information"
          }
        }
      },
      "Training" : {
        "required" : [ "trainingId" ],
        "type" : "object",
        "properties" : {
          "trainingId" : {
            "type" : "string",
            "description" : "Id from the source training item"
          },
          "code" : {
            "type" : "string",
            "description" : "The contextual code given to the training item"
          },
          "name" : {
            "type" : "string",
            "description" : "A meaningful name that describes the training activity"
          },
          "startDate" : {
            "type" : "string",
            "description" : "When the training has started"
          },
          "endDate" : {
            "type" : "string",
            "description" : "When the training has ended"
          },
          "method" : {
            "type" : "number",
            "description" : "A value that describes what kind of training has taken place"
          },
          "hours" : {
            "type" : "number",
            "description" : "How many hours in total was spent in the training session"
          },
          "learningStatus" : {
            "type" : "number",
            "description" : "A specific learning status for the trainings outcome"
          },
          "EnrolledDate" : {
            "type" : "string",
            "description" : "When the user has enrolled in the training session"
          },
          "ExpiryDate" : {
            "type" : "string",
            "description" : "When the training session has expired"
          },
          "CompletionDate" : {
            "type" : "string",
            "description" : "When the user has completed the training session"
          }
        }
      },
      "TrainingFilterModel" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "description" : "Get training data related to a specific user"
          },
          "completionStatus" : {
            "type" : "number",
            "description" : "Find training data with a specific completion status"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Find training data that has started passed the specified date"
          },
          "endDate" : {
            "type" : "string",
            "description" : "Find training data that has ended before the specified date"
          },
          "includeActivityTrainings" : {
            "type" : "boolean",
            "description" : "Specifies that the filter properties will include ActivityEnrollment or not"
          },
          "courseSessionEnrollmentId" : {
            "type" : "string",
            "description" : "Get training data related to a specific CourseSessionEnrollmentId"
          },
          "sources" : {
            "type" : "number",
            "description" : "The type of Sources of training data"
          }
        }
      },
      "License" : {
        "required" : [ "isenabled", "licenseId" ],
        "type" : "object",
        "properties" : {
          "licenseId" : {
            "type" : "string",
            "description" : "Unique ID of the client license"
          },
          "termsofservice" : {
            "type" : "string",
            "description" : "The client's terms of service agreement"
          },
          "isenabled" : {
            "type" : "boolean",
            "description" : "Represents if the terms of service feature is enabled or disabled"
          },
          "userId" : {
            "type" : "string",
            "description" : "An Unique ID of the User has made the change(Only needs for Update)"
          }
        }
      },
      "DataPermission" : {
        "type" : "object",
        "properties" : {
          "usergroups" : {
            "type" : "array",
            "description" : "An array of user group ids that are granted the data permission",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "ActionPermission" : {
        "type" : "object",
        "properties" : {
          "permission" : {
            "type" : "array",
            "description" : "An array of action permissions",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "ApplicationAccess" : {
        "type" : "object",
        "properties" : {
          "permission" : {
            "type" : "array",
            "description" : "An array of application access permissions",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "DashboardData" : {
        "type" : "object",
        "properties" : {
          "Profile" : {
            "$ref" : "#/components/schemas/DashboardProfile"
          },
          "WelcomeMessage" : {
            "$ref" : "#/components/schemas/DashboardWelcomeMessage"
          },
          "Items" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "DashboardProfile" : {
        "type" : "object",
        "properties" : {
          "IsCertificateVisible" : {
            "type" : "boolean",
            "description" : "Represents if the Active Certificate feature is enabled or disabled"
          },
          "IsEnrollmentVisible" : {
            "type" : "boolean",
            "description" : "Represents if the Active Enrollment feature is enabled or disabled"
          }
        }
      },
      "DashboardWelcomeMessage" : {
        "type" : "object",
        "properties" : {
          "Title" : {
            "type" : "string",
            "description" : "String representation of the DashBoardItem's WelcomeMessage Title"
          },
          "HtmlContent" : {
            "type" : "string",
            "description" : "String representation of the DashBoardItem's WelcomeMessage htmlContent"
          }
        }
      },
      "DashboardItem" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "type" : "string",
            "description" : "DashBoard Item's name"
          },
          "Type" : {
            "type" : "number",
            "description" : "DashBoard Item's Type"
          },
          "Order" : {
            "type" : "number",
            "description" : "DashBoard Item's Order in the display list"
          },
          "GroupId" : {
            "type" : "string",
            "description" : "DashBoard Item's GroupId"
          },
          "IsVisible" : {
            "type" : "boolean",
            "description" : "Represents if the DashBoardItem is Visible or not"
          },
          "Content" : {
            "type" : "string",
            "description" : "DashBoard Item's content to display in the tile"
          }
        }
      },
      "Contract" : {
        "required" : [ "Code", "ContractID", "Name" ],
        "type" : "object",
        "properties" : {
          "ContractID" : {
            "type" : "string",
            "description" : "A unique ID for a contract"
          },
          "Name" : {
            "type" : "string",
            "description" : "A user defined name for the contract"
          },
          "Code" : {
            "type" : "string",
            "description" : "A unique code or identifier"
          },
          "Description" : {
            "type" : "string",
            "description" : "An optional description"
          },
          "ParentID" : {
            "type" : "string",
            "description" : "A parent ID to define the contract as a child of another contract"
          },
          "ChildIds" : {
            "type" : "array",
            "description" : "A list of ids associated with child under the parent contract",
            "items" : {
              "type" : "object"
            }
          },
          "UserIds" : {
            "type" : "array",
            "description" : "A list of ids of users that are associated with the contract",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "JobRole" : {
        "required" : [ "Code", "JobRoleID", "Name" ],
        "type" : "object",
        "properties" : {
          "JobRoleID" : {
            "type" : "string",
            "description" : "A unique ID for a job role"
          },
          "Name" : {
            "type" : "string",
            "description" : "A user defined name for the job role"
          },
          "Code" : {
            "type" : "string",
            "description" : "A unique code or identifier"
          },
          "Description" : {
            "type" : "string",
            "description" : "An optional description"
          },
          "ParentID" : {
            "type" : "string",
            "description" : "A parent ID to define the job role as a child of another job role"
          },
          "ChildIds" : {
            "type" : "array",
            "description" : "A list of ids associated with child under the parent job role",
            "items" : {
              "type" : "object"
            }
          },
          "UserIds" : {
            "type" : "array",
            "description" : "A list of ids of users that are associated with the job role",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "Equipment" : {
        "required" : [ "Code", "EquipmentID", "Name" ],
        "type" : "object",
        "properties" : {
          "EquipmentID" : {
            "type" : "string",
            "description" : "A unique ID for a equipment"
          },
          "Name" : {
            "type" : "string",
            "description" : "A user defined name for the equipment"
          },
          "Code" : {
            "type" : "string",
            "description" : "A unique code or identifier"
          },
          "Description" : {
            "type" : "string",
            "description" : "An optional description"
          },
          "ParentID" : {
            "type" : "string",
            "description" : "A parent ID to define the equipment as a child of another equipment"
          },
          "ChildIds" : {
            "type" : "array",
            "description" : "A list of ids associated with child under the parent equipment",
            "items" : {
              "type" : "object"
            }
          },
          "UserIds" : {
            "type" : "array",
            "description" : "A list of ids of users that are associated with the equipment",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "Location" : {
        "required" : [ "Code", "LocationID", "Name" ],
        "type" : "object",
        "properties" : {
          "LocationID" : {
            "type" : "string",
            "description" : "A unique ID for a location"
          },
          "Name" : {
            "type" : "string",
            "description" : "A user defined name for the location"
          },
          "Code" : {
            "type" : "string",
            "description" : "A unique code or identifier"
          },
          "Description" : {
            "type" : "string",
            "description" : "An optional description"
          },
          "ParentID" : {
            "type" : "string",
            "description" : "A parent ID to define the location as a child of another location"
          },
          "ChildIds" : {
            "type" : "array",
            "description" : "A list of ids associated with child under the parent location",
            "items" : {
              "type" : "object"
            }
          },
          "UserIds" : {
            "type" : "array",
            "description" : "A list of ids of users that are associated with the location",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "LocationFilter" : {
        "type" : "object",
        "properties" : {
          "IsRootOnly" : {
            "type" : "boolean",
            "description" : "Determines if root locations should be the only entities filtered"
          },
          "ParentId" : {
            "type" : "string",
            "description" : "Finds immediate child locations based on the ParentId provided"
          },
          "LocationIds" : {
            "type" : "array",
            "description" : "A list of location IDs used to find locations",
            "items" : {
              "type" : "object"
            }
          },
          "ExcludeIds" : {
            "type" : "array",
            "description" : "A list of location IDs used to exclude locations",
            "items" : {
              "type" : "object"
            }
          },
          "IsIncludeAnyLocation" : {
            "type" : "boolean",
            "description" : "Determines if the special \"Any Location\" should be included (a null value is treated as an alias for false)"
          }
        }
      },
      "Organization" : {
        "required" : [ "Code", "Name", "OrganizationID" ],
        "type" : "object",
        "properties" : {
          "OrganizationID" : {
            "type" : "string",
            "description" : "A unique ID for a organization"
          },
          "Name" : {
            "type" : "string",
            "description" : "A user defined name for the organization"
          },
          "Code" : {
            "type" : "string",
            "description" : "A unique code or identifier"
          },
          "Description" : {
            "type" : "string",
            "description" : "An optional description"
          },
          "ParentID" : {
            "type" : "string",
            "description" : "A parent ID to define the organization as a child of another organization"
          },
          "ChildIds" : {
            "type" : "array",
            "description" : "A list of ids associated with child under the parent organization",
            "items" : {
              "type" : "object"
            }
          },
          "UserIds" : {
            "type" : "array",
            "description" : "A list of ids of users that are associated with the organization",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "OrganizationFilter" : {
        "type" : "object",
        "properties" : {
          "IsRootOnly" : {
            "type" : "boolean",
            "description" : "Determines if root organizations should be the only entities filtered"
          },
          "ParentId" : {
            "type" : "string",
            "description" : "Finds immediate child organizations based on the ParentId provided"
          },
          "OrganizationIds" : {
            "type" : "array",
            "description" : "A list of organization IDs used to find organizations",
            "items" : {
              "type" : "object"
            }
          },
          "ExcludeIds" : {
            "type" : "array",
            "description" : "A list of organization IDs used to exclude organizations",
            "items" : {
              "type" : "object"
            }
          },
          "IsIncludeAnyOrganization" : {
            "type" : "boolean",
            "description" : "Determines if the special \"Any Organization\" should be included (a null value is treated as an alias for false)"
          }
        }
      },
      "SupportInfo" : {
        "type" : "object",
        "properties" : {
          "Email" : {
            "type" : "string",
            "description" : "support setting's Email value"
          },
          "Phone" : {
            "type" : "string",
            "description" : "support setting's phone value"
          },
          "Description" : {
            "type" : "string",
            "description" : "support setting's html infomation content."
          },
          "Histories" : {
            "type" : "array",
            "description" : "A list of audit history object associated with a client id.",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "MessageError" : {
        "required" : [ "action", "application", "date", "errorMessage", "id", "messageIndex", "uri" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique id of the error"
          },
          "messageIndex" : {
            "type" : "number",
            "description" : "The index of the message that caused the error"
          },
          "date" : {
            "type" : "string",
            "description" : "When the error ocurred in UTC"
          },
          "application" : {
            "type" : "string",
            "description" : "The name of the application where the error originated"
          },
          "action" : {
            "type" : "string",
            "description" : "The action that the message was trying to do"
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "A message or stack trace describing the error"
          },
          "uri" : {
            "type" : "string",
            "description" : "The uri binding of the application"
          }
        }
      },
      "Proxy" : {
        "required" : [ "application", "id", "lastPing", "state", "uri" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The current session id of the proxy"
          },
          "application" : {
            "type" : "string",
            "description" : "The name of the proxy node attached to GC"
          },
          "uri" : {
            "type" : "string",
            "description" : "The host url of the proxy"
          },
          "state" : {
            "type" : "number",
            "description" : "The current state of the proxy"
          },
          "lastPing" : {
            "type" : "string",
            "description" : "The date of the proxies last ping to GC"
          }
        }
      },
      "EntityHistory" : {
        "type" : "object",
        "properties" : {
          "EntityId" : {
            "type" : "string",
            "description" : "ID of the modified entity"
          },
          "Data" : {
            "type" : "string",
            "description" : "JSON object representing the modified entity"
          },
          "PerformedByUserId" : {
            "type" : "string",
            "description" : "ID of the user that made the modification"
          },
          "IsSuperUser" : {
            "type" : "boolean",
            "description" : "Whether the user that made the modification is a superuser or not"
          },
          "Date" : {
            "type" : "string",
            "description" : "The date the modification was made"
          },
          "ActionType" : {
            "type" : "number",
            "description" : "The type of modification made to the entity"
          },
          "EntityType" : {
            "type" : "number",
            "description" : "The type of entity modified"
          }
        }
      },
      "AuditHistory" : {
        "type" : "object",
        "properties" : {
          "EntityId" : {
            "type" : "string",
            "description" : "ID of the modified entity"
          },
          "Data" : {
            "type" : "string",
            "description" : "JSON object representing the modified entity"
          },
          "PerformedByUserId" : {
            "type" : "string",
            "description" : "ID of the user that made the modification"
          },
          "IsSuperUser" : {
            "type" : "boolean",
            "description" : "Whether the user that made the modification is a superuser or not"
          },
          "Date" : {
            "type" : "string",
            "description" : "The date the modification was made"
          },
          "ActionType" : {
            "type" : "number",
            "description" : "The type of modification made to the entity"
          },
          "EntityType" : {
            "type" : "number",
            "description" : "The type of entity modified"
          }
        }
      },
      "User Token" : {
        "type" : "object"
      },
      "API" : {
        "type" : "object"
      },
      "Extended Permission" : {
        "type" : "object"
      },
      "Application Permission" : {
        "type" : "object"
      },
      "Action Permission" : {
        "type" : "object"
      },
      "Data Permission" : {
        "type" : "object"
      },
      "Password Ticket" : {
        "type" : "object"
      },
      "Password Recovery" : {
        "type" : "object"
      },
      "Import" : {
        "type" : "object"
      },
      "loginNameUpdate" : {
        "type" : "object"
      },
      "Dashboard API" : {
        "type" : "object"
      },
      "Support" : {
        "type" : "object"
      },
      "Message Errors" : {
        "type" : "object"
      },
      "Single" : {
        "type" : "object"
      },
      "Reconnect" : {
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "Bearer" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}