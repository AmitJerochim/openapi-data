penapi: 3.0.0
servers:
  - url: https://microservices.dev.rappi.com/api/restaurants-integrations-public-api
    description: Test
  - url: https://services.mxgrability.rappi.com/api/restaurants-integrations-public-api
    description: Mexico
  - url: https://services.rappi.com/api/restaurants-integrations-public-api
    description: Colombia
  - url: https://services.rappi.cl/api/restaurants-integrations-public-api
    description: Chile
  - url: https://services.rappi.com.br/api/restaurants-integrations-public-api
    description: Brasil
  - url: https://services.rappi.com.ar/api/restaurants-integrations-public-api
    description: Argentina
  - url: https://services.rappi.com.uy/api/restaurants-integrations-public-api
    description: Uruguay
info:
  description: |
    This document contains the specification of the methods that are part of the integration API that is offered by Rappi to its affiliated restaurants, the content of this document will allow the Rappi associate to know the requirements necessary to make use of the service and understand the messaging that will be exchanged between the two entities.
  version: "1.0.1"
  title: Service Specification API Restaurant Integration

tags:
  - name: Authentication
  - name: Orders request
  - name: Order Acceptance
  - name: Order Rejection
  - name: Menu

paths:
  /login:
    post:
      tags:
        - Authentication
      summary: The authentication is done through a public access token provided by RAPPI
      responses:
        '200':
          description: Successful response
          headers:
            x-auth-int:
              schema:
                type: string
                example: Bearer asd87asd7a8sd8sa
              description: |
                    Token to access different API methods
                    
                    *Note: it's valid for 30 days, after that it's necessary to renew it*
        '401':
          description: Wrong authorization token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Token provided by rappi
                  example: as78da6sd7as6d8asd
  /orders:
    get:
      tags:
        - Orders request
      summary: Get available orders to be processed
      parameters:
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema: 
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: List of orders. If there isn't any, an empty list will be received.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Order'
        '401':
          description: Wrong authorization token

  '/orders/take/{orderId}':
    get:
      tags:
        - Order Acceptance
      summary: Indicates to the restaurant integration service that the order has been processed successfully
      parameters:
        - in: path
          name: orderId
          required: true
          description: Some order id obtanied from /orders
          schema:
            type: integer
            example: 1234
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema: 
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: Order has been taken succeesfully by RAPPI
        '401':
          description: Wrong authorization token
        '400':
          description: Order does not exist or was already processed
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/OrderError'
              examples:
                Order does not exist:
                   $ref: '#/components/examples/OrderNotExist'
                Order was already processed:
                  $ref: '#/components/examples/OrderAlreadyProcessed'
                  
  /orders/reject:
    post:
      tags:
        - Order Rejection
      summary: Indicates to the restaurant integration service that the order has not been processed successfully
      parameters:
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema: 
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: Successful response
        '401':
          description: Wrong authorization token
        '400':
          description: Order does not exist or was already processed
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/OrderError'
              examples:
                Order does not exist:
                   $ref: '#/components/examples/OrderNotExist'
                Order was already processed:
                  $ref: '#/components/examples/OrderAlreadyProcessed'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: integer
                  description: Rappi order id
                  example: 1234
                reason:
                  type: string
                  description: Describe the rejection reason
                  example: Error code 4 description
  /stores/menu:
    get:
      tags:
        - Menu
      summary: List the store menu
      parameters:
        - in: header
          name: x-auth-int
          required: true
          description: Token obtained in the /login
          schema: 
            type: string
            example: asd87asd7a8sd8sa
      responses:
        '200':
          description: The response will contain the menu of the stores associated with the authentication token
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/ProductMenu'
        '401':
          description: Wrong authorization token

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
          example: "922233"
        totalValue:
          type: string
          example: "25080.0"
        createdAt:
          type: string
          example: "2019-02-05 14:56:15"
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          format: date-time
        client:
          $ref: '#/components/schemas/Client'
        store:
          $ref: '#/components/schemas/Store'
    Product:
      type: object
      properties:
        id:
          type: string
          example: "922233"
        name:
          type: string
          example: "Arma tu Pizza Familiar"
        comments:
          type: string
          example: "prueba"
        units:
          type: string
          example: "2"
        unitPrice:
          type: string
          example: "8590.0"
          description: Total price
        discountPercentage:
          type: string
          example: "0.0"
        unitPriceDiscount:
          type: string
          example: "8590.0"
        totalPrice:
          type: string
          example: "25080.0"
        toppings:
          type: array
          items:
            $ref: '#/components/schemas/Topping'
    Topping:
      type: object
      properties:
        id:
          type: string
          example: "12024"
        name:
          type: string
          example: "Pi√±a"
        units:
          type: string
          example: "1"
        price:
          type: string
          example: "900.0"
        toppingCategoryId:
          type: string
          example: "2478"
    Client:
      type: object
      properties:
        id:
          type: string
          example: "922233"
        firstName:
          type: string
          example: "RAPPI"
        lastName:
          type: string
          example: "RAPPI"
        email:
          type: string
          example: "integration.public.publicapi@rappi.com"
        phone:
          type: string
          example: "3163535"
        address:
          type: string
          example: "Cll 93 No. 19 - 58"
    Store:
      type: object
      properties:
        id:
          type: string
          example: "900014652"
        name:
          type: string
          example: ""
    ProductMenu:
      type: object
      properties:
        id:
          type: string
          example: "1234"
        name:
          type: string
          example: "Product #1234"
        toppings:
          type: array
          items:
            $ref: '#/components/schemas/ToppingMenu'
    ToppingMenu:
      type: object
      properties:
        id:
          type: string
          example: "4321"
        name:
          type: string
          example: "Topping #1234"
        category:
          type: object
          properties:
            id: 
              type: string
              example: "678"
            name:
              type: string
              example: "Topping category #678"
    OrderError:
      type: object
      properties:
        errorCode:
          type: integer
        message:
          type: string
  examples:
    OrderNotExist:
      value:
        errorCode: 1000
        message: "The order #1234 not exists."
    OrderAlreadyProcessed:
      value:
        errorCode: 2000
        message: "The order #1234 was already processed."