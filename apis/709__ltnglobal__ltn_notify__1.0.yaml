openapi: 3.0.0
info:
  version: '1.0'
  title: 'LTN Notify API'
  description: 'LTN Notify allows LTN systems to generate a variety of notifications for both internal and external use. This server will maintain and filter these notifications so that processes and communication can efficiently be automated.'
  
servers:
  - url: '127.0.0.1:8000'
    description: 'Development server'
  - url: 'https://svg-mon-dev4.livetimenet.com'
    description: 'Testing server'
  - url: 'https://bwi-mon-web-1.livetimenet.net'
    description: 'Production server 1'
  - url: 'https://bwi-mon-web-2.livetimenet.net'
    description: 'Production server 2'

security:
  - authToken: []

tags:
  - name: Notification
  - name: Email
  - name: Zendesk Ticket
  - name: Zendesk User
  - name: Zendesk Search

paths:
  /notification:
    post:
      tags:
        - Notification
      summary: Create or update a notification
      description: Notifications will be able to be identified based on *notification type*, *identifier* and *start time*. The combination of these fields will be unique per current notification instance, which may correspond to a Zendesk ticket. If an active notification with the same *identifier* and *notification type* already exists, an update will take place. Otherwise, a new notification will be created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: Success - Notification updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '201':
          description: Success - Notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '207':
          description: Multi-Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Error'

  /email:
    post:
      tags:
        - Email
      summary: Send an email
      requestBody:
        description: Default *from* and outgoing mail server (SMTP) values will be used if not specified in the request body.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Error'

  /zendesk/ticket:
    post:
      tags:
        - Zendesk Ticket
      summary: Create a ticket
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/tickets#create-ticket*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZendeskTicket'
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'

  /zendesk/ticket/{ticket_id}:
    get:
      tags:
        - Zendesk Ticket
      summary: Returns a ticket by ID
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/tickets#show-ticket*
      parameters:
        - $ref: '#/components/parameters/ticket_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'
    put:
      tags:
        - Zendesk Ticket
      summary: Update a ticket by ID
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/tickets#update-ticket*
      parameters:
        - $ref: '#/components/parameters/ticket_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZendeskTicket'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'
    delete:
      tags:
        - Zendesk Ticket
      summary: Delete a ticket by ID
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/tickets#delete-ticket*
      parameters:
        - $ref: '#/components/parameters/ticket_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'

  /zendesk/ticket/{ticket_id}/audits:
    get:
      tags:
        - Zendesk Ticket
      summary: Returns a list of audits (read-only history) of a ticket by ID
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/ticket_audits#list-audits-for-a-ticket*
      parameters:
        - $ref: '#/components/parameters/ticket_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'

  /zendesk/ticket/{ticket_id}/comments:
    get:
      tags:
        - Zendesk Ticket
      summary: Returns a list of comments of a ticket by ID
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/ticket_comments#list-comments*
      parameters:
        - $ref: '#/components/parameters/ticket_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'

  /zendesk/ticket/{ticket_id}/tags:
    get:
      tags:
        - Zendesk Ticket
      summary: Returns a list of tags of a ticket by ID
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/tags#show-tags*
      parameters:
        - $ref: '#/components/parameters/ticket_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'
    put:
      tags:
        - Zendesk Ticket
      summary: Add tags to a ticket by ticket ID
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/tags#add-tags*
      parameters:
        - $ref: '#/components/parameters/ticket_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZendeskTags'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'

  /zendesk/user:
    post:
      tags:
        - Zendesk User
      summary: Create a user
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/users#create-user*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZendeskUser'
      responses:
        '201':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'

  /zendesk/user/{user_id}:
    get:
      tags:
        - Zendesk User
      summary: Returns a user by ID
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/users#show-user*
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'

  /zendesk/user/{user_id}/tickets/ccd:
    get:
      tags:
        - Zendesk User
      summary: Returns a list of tickets on which a user is CC'd
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/tickets.html#list-tickets*
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'

  /zendesk/users:
    post:
      tags:
        - Zendesk User
      summary: Returns a list of users by IDs
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/users#show-many-users*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZendeskUserIdList'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'

  /zendesk/search:
    post:
      tags:
        - Zendesk Search
      summary: Unified search for tickets, users and organizations
      description: For response content and further details, refer to *https://developer.zendesk.com/rest_api/docs/support/search*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZendeskSearch'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ZendeskError'

components:
  schemas:
    Notification:
      type: object
      properties:
        notification_type:
          type: string
          enum: [DISCONNECTION, BOOKING, VIDEO_EQUIPMENT_ALARM, CUE_ALARM]
          description: Type of notification. Default options based on notification type can be found in *ltnms.NotificationsType*.
          example: BOOKING
        identifier:
          type: string
          description: ID based on the *notification type*
          example: '1-500547'
        start_datetime:
          type: string
          pattern: '^(20\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])?$'
          nullable: true
          description: Datetime notification was initialized. Defaults to the current datetime if a new notification is being created. If an update is taking place, this field will be ignored.
          example: '2019-06-29 11:20:00'
        end_datetime:
          type: string
          pattern: '^(20\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])?$'
          nullable: true
          description: Datetime notification ended or was resolved. Until an end datetime is included, the notification will stay active and take updates. The request will be ignored if end_datetime is included but not between the start and current datetime.
          example: '2019-07-01 12:00:00'
        timezone:
          type: string
          enum: [ET, GMT]
          nullable: true
          description: Timezone of *start_datetime* and or *end_datetime*. Defaults to GMT.
          example: ET
        communication_types:
          type: array
          items:
            type: string
            enum: [ACCOUNT_NOTIFICATION, NOC_NOTIFICATION, EMAIL, ZENDESK]
          description: List of communication types to be used. If the *priority* is high or urgent, or a *private description* is included, zendesk will automatically be included. If the *subject*, *priority* or *end datetime* is being changed, zendesk, account_notification and noc_notification will automatically be included if previously included any time during the notification instance, unless specifically excluded. For email, if account_notification is also a communication type, the email list will include contacts derived from ltndb_getRelatedIdsByAccount, which primarily uses the LinkContactToEndpoints table. If noc_notification is also a communication type, the email list will include notify@ltnglobal.com. If neither are included, no email will be sent.
          example: [ACCOUNT_NOTIFICATION, ZENDESK]
        excluded_communication_types:
          type: array
          items:
            type: string
            enum: [ACCOUNT_NOTIFICATION, NOC_NOTIFICATION, EMAIL, ZENDESK]
          description: List of communication types to exclude, mainly for communication types automatically included by the circumstances noted in the *communication types* description.
          example: [ZENDESK]
        subject:
          type: string
          nullable: true
          description: Subject of the notification. If omitted, a default based on the *notification type* will be used.
          example: Offline-requestable Booking Attempt
        email_subject:
          type: string
          nullable: true
          description: Subject of the notification's detail email. If omitted, the notification subject will be used. If email isn't a *communication type*, this field will be ignored.
          example: Offline-requestable Booking Attempt
        description:
          type: string
          nullable: true
          description: Description/comment for the notification. If omitted, and the request is not a private comment update, a default based on the *notification type* will be used.
          example: We are now able to communicate again with the LTN Appliance at your site.
        private_description:
          type: string
          description: Private comment that will be an internal note on the associated Zendesk ticket, which customers cannot see. If a ticket doesn't already exist, one will be created.
          example: No customer email sent. Verify that there is at least one related contact with an "Email 1"
        private_description_only:
          anyOf:
            - type: boolean
            - type: integer
              enum: [0, 1]
          description: Determines if a public comment will be used. If a private description is not provided, this notification will be skipped. If a ticket doesn't already exist, one will be created. No email will be sent even if email a notification type.
        user_id:
          type: string
          description: Description/comment author. Defaults to the portal user if the request is coming from the portal.
          example: schoe@ltnglobal.com
        reopen_notification_timeframe:
          type: integer
          description: Maximum number of minutes that can pass between a notification ending and one with the same *notification type* and *identifier* following, where the first one will reopen and take the second one as an update. -1 means a previously ended notification will be reopened regardless of time passed. If omitted, a default based on the *notification type* will be used.
          example: 10
        reopen_notification:
          anyOf:
            - type: boolean
            - type: integer
              enum: [0, 1]
          description: Determines if a previously ended notification with the same *notification type* and *identifier* will reopen, and an update will take place. Defaults at false and overrules *reopen_notification_timeframe*.
        priority:
          type: string
          enum: [LOW, NORMAL, HIGH, URGENT]
          nullable: true
          description: Priority displayed on the Portal's Notifications Page, the NOC Alarm Panel, and Zendesk tickets. Defaults at normal, and will automatically escalate based on urgent conditions and approaching due dates.
          example: HIGH
        due_date:
          type: string
          pattern: '^(20\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]))?$'
          nullable: true
          description: Zendesk ticket due date, which may automatically affect the *priority*. If Zendesk isn't a *communication type*, this field will be ignored.
          example: '2019-07-01'
        ticket_type:
          type: string
          enum: [problem, incident, question, task]
          nullable: true
          description: Zendesk ticket type to use. If omitted, a default based on the *notification type* will be used. If Zendesk isn't a *communication type*, this field will be ignored.
          example: incident
        ticket_form_id:
          type: string
          nullable: true
          description: Zendesk ticket form ID to use. If omitted, a default based on the *notification type* will be used. If Zendesk isn't a *communication type*, this field will be ignored.
          example: '360001158593'
        tags:
          type: array
          items:
            type: string
          description: Zendesk tags to include. Default tags based on *notification type* will also be included automatically. If Zendesk isn't a *communication type*, this field will be ignored.
          example: ['created_from_portal']
        ops_live_issues:
          anyOf:
            - type: boolean
            - type: integer
              enum: [0, 1]
          description: Determines if the Zendesk ticket will be marked with OPSLIVEISSUES. Defaults at false. If Zendesk isn't a *communication type*, this field will be ignored.
        root_cause_analysis:
          type: string
          nullable: true
          description: Zendesk ticket's root cause analysis. Required to close a ticket. For available values, refer to *https://ltnglobal.zendesk.com/agent/admin/ticket_fields/360010344993*. If Zendesk isn't a *communication type*, this field will be ignored.
          example: ltn_alarms___site_is_back_online
        summary:
          type: string
          nullable: true
          description: Zendesk ticket's summary. Required to close some tickets, depending on the ticket form. If Zendesk isn't a *communication type*, this field will be ignored.
          example: Alarm Server detected disconnection that has been reconnected
        leaf_device_id:
          type: string
          nullable: true
          description: Zendesk ticket's leaf device ID. Required to close some tickets, depending on the ticket form. If Zendesk isn't a *communication type*, this field will be ignored.
          example: ltnd-col-dev-a-decode-l2
      required:
        - notification_type
        - identifier
      additionalProperties: false
      example:
        notification_type: DISCONNECTION
        identifier: cnni-atl
        start_datetime: '2019-06-23 16:00:00'
        communication_types: [ACCOUNT_NOTIFICATION, EMAIL, ZENDESK]
        private_description: No flowclient on the endpoint is producing logs
        priority: LOW

    Email:
      type: object
      properties:
        smtp_host:
          type: string
        smtp_port:
          type: string
        from:
          type: string
        to:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
        cc:
          type: array
          items:
            type: string
          uniqueItems: true
        bcc:
          type: array
          items:
            type: string
          uniqueItems: true
        subject:
          type: string
        body:
          type: string
        headers:
          type: string
          description: Email headers as a string, separated by new lines (\n)
          example: 'X-LTNNotify-Priority: LOW\nX-Some-Other-Header: value'
      required:
        - to
      additionalProperties: false
      example:
        to: ['johndoe@domain.com', 'janedoe@domain.com']
        cc: ['admin@domain.com']
        subject: Engineering Meeting
        body: There will be an engineering meeting on Monday.

    ZendeskTicket:
      type: object
      properties:
        ticket:
          type: object
          properties:
            requester_id:
              type: string
            subject:
              type: string
            status:
              type: string
            group_id:
              type: string
            priority:
              type: string
            is_public:
              type: boolean
            type:
              type: string
            tags:
              type: array
              items:
                type: string
            comment:
              type: object
              properties:
                body:
                  type: string
                public:
                  type: boolean
              required:
                - body
            email_ccs:
              type: array
              items:
                type: object
                properties:
                  user_email:
                    type: string
                    pattern: ^.+@.+\..+$
                  action:
                    type: string
                required:
                  - user_email
            custom_fields:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  value:
                    type: string
                required:
                  - id
                  - value
                additionalProperties: false
      required:
        - ticket
      additionalProperties: false
      description: For ticket field details, refer to *https://developer.zendesk.com/rest_api/docs/support/tickets#json-format*
      example:
        ticket:
          requester_id: '368462224434'
          subject: Disconnection at site
          status: open
          type: problem
          group_id: '360002701974'
          custom_fields: [{id: 360008241553, value: Site name}, {id: 360008335913, value: '120.310'}]
          tags: [disconnection, scheduled]
          comment: {body: Current disconnection}
          is_public: true

    ZendeskTags:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
      required:
        - tags
      additionalProperties: false
      example:
        tags: ['test created_from_portal']

    ZendeskUser:
      type: object
      properties:
        user:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
              pattern: ^.+@.+\..+$
      required:
        - user
      additionalProperties: false
      example:
        user:
          name: John Doe
          email: johndoe@domain.com

    ZendeskUserIdList:
      type: object
      properties:
        user_ids:
          type: array
          items:
            type: integer
      required:
        - user_ids
      additionalProperties: false
      example:
        user_ids: [20, 25, 50]

    ZendeskSearch:
      type: object
      properties:
        query:
          type: string
          description: Search string formatted according to *https://developer.zendesk.com/rest_api/docs/support/search#query-basics*
        sort_by:
          type: string
          enum: [updated_at, created_at, priority, status, ticket_type]
        sort_order:
          type: string
          enum: [asc, desc]
      required:
        - query
      example:
        query: type:ticket status:open tags:testTag updated>2weeks
        sort_by: created_at
        sort_order: asc

    NotificationResponse:
      type: object
      properties:
        account_notification:
          type: boolean
          description: Result of account notification attempt
        noc_notification:
          type: boolean
          description: Result of noc notification attempt
        email:
          type: object
          properties:
            detail:
              type: array
              items:
                type: string
              description: List of emails that received this detailed notification email
            summary:
              type: array
              items:
                type: string
              description: List of emails that will receive summary emails with this notification included
          description: Email recipients rely on contacts' *notification_emails* settings
        zendesk:
          oneOf:
            - type: object
              properties:
                ticket_id:
                  type: integer
              description: Returns when a ticket is successfully created or updated
            - type: object
              properties:
                status_code:
                  type: integer
                response:
                  type: object
              description: Returns when attempting to create or update a ticket fails
      description: Only attempted communication types are included - omitted does not mean failure.
      example:
        account_notification: true
        email:
          detail: ['johndoe@domain.com', 'janedoe@domain.com']
          summary: [johndoe@domain.com']
        zendesk:
          ticket_id: 12835

    FalconErrorResponse:
      type: object
      properties:
        description:
          type: string
        title:
          type: string

    ZendeskErrorResponse:
      type: object
      properties:
        description:
          type: string
        error:
          type: string

  parameters:
    ticket_id:
      name: ticket_id
      in: path
      required: true
      description: The ID of the ticket to return
      schema:
        type: integer
    user_id:
      name: user_id
      in: path
      required: true
      description: The ID of the user to return
      schema:
        type: integer

  responses:
    Success:
      description: Success
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FalconErrorResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FalconErrorResponse'
    ZendeskError:
      description: Zendesk Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ZendeskErrorResponse'
    Error:
      description: Error

  securitySchemes:
    authToken:
      type: apiKey
      description: API key to authorize requests
      name: Authorization
      in: header
