penapi: 3.0.0

info:
  version: "1.0.0"
  title: service

paths:
  /admin/schools/:
    post:
      description: Creates a new school
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_School'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
  /admin/users/:
    post:
      description: Creates a new user
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /verification/phone/:
    post:
      description: requests a phone number verification code sms
      tags:
        - verification
      operationId: requestPhone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phone_Verification'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '409':
          description: Conflict. Username already exists.
    get:
      description: confirms a phone number verification code
      tags:
        - verification
      operationId: confirmPhone
      parameters:
        - $ref: '#/components/parameters/Phone_Number'
        - $ref: '#/components/parameters/Device_ID'
        - $ref: '#/components/parameters/Code'
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
  /schools/:
    get:
      description: Gets the list of schools
      tags:
        - schools
      operationId: getSchools
      parameters:
        - $ref: '#/components/parameters/Vector'
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/School_Search'
        - $ref: '#/components/parameters/School_Fields'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schools'
        '400':
          description: Bad Request
  /users/:
    post:
      description: Creates a new user
      tags:
        - users
      operationId: createUser
      parameters:
        - $ref: '#/components/parameters/User_Fields'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '409':
          description: Conflict. Username already exists.
  /users/usernames/:
    get:
      description: searches for an existing username
      tags:
        - users
      operationId: findUsername
      parameters:
        - $ref: '#/components/parameters/Username'
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
  /users/emails/:
    get:
      description: searches for an existing email
      tags:
        - users
      operationId: findEmail
      parameters:
        - $ref: '#/components/parameters/Email'
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
  /users/login/:
    get:
      description: Logs in a user
      tags:
        - users
      operationId: loginUser
      parameters:
        - $ref: '#/components/parameters/Username_Optional'
        - $ref: '#/components/parameters/Phone_Number_Optional'
        - $ref: '#/components/parameters/Password'
        - $ref: '#/components/parameters/User_Fields'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found. A user with the given credentials does not exist.
    
components:
  parameters:
    School_Fields:
      description: a comma delimited list of school fields
      name: fields
      in: query
      required: true
      schema:
        type: string
        example: 'id,name,city,state'
    School_Search:
      description: a search string; searches against school `name` field
      name: search
      in: query
      schema:
        type: string
        example: 'Leona'
    User_Fields:
      description: a comma delimited list of user fields
      name: fields
      in: query
      required: true
      schema:
        type: string
        example: 'id,username'
    Cursor:
      description: a pagination cursor; defaults to the cursor of the first item in the paginated list
      name: cursor
      in: query
      schema:
        type: string
        example: 'WFlaOA=='
    Vector:
      description: a pagination vector; the absolute value specifies the desired quantity of items and the sign specifies whether these items are fetched in a forwards (positive) or backwards (negative) direction relative to some initial item as specified in a pagination cursor
      name: vector
      in: query
      required: true
      schema:
        type: integer
        example: '0'
    Username:
      description: a username
      name: username
      in: query
      required: true
      schema:
        type: string
    Username_Optional:
      description: a username
      name: username
      in: query
      schema:
        type: string
    Email:
      description: an email
      name: email
      in: query
      required: true
      schema:
        type: string
    Password:
      description: a password
      name: password
      in: query
      required: true
      schema:
        type: string
    Phone_Number:
      description: a phone number
      name: phone_number
      in: query
      required: true
      schema:
        type: string
    Phone_Number_Optional:
      description: a phone number
      name: phone_number
      in: query
      schema:
        type: string
    Device_ID:
      description: a device id
      name: device_id
      in: query
      required: true
      schema:
        type: string
    Code:
      description: a verification code
      name: code
      in: query
      required: true
      schema:
        type: string
  schemas:
    Array_Container:
      type: object
      properties:
        nextCursor:
          description: the cursor of the item immediately after the items in the array in the current pagination direction; if there is no such item then this property is undefined
          type: string
    Array_Item:
      type: object
      properties:
        cursor:
          type: string
      required: [cursor]
    Sport:
      type: object
      properties:
        sport:
          type: string
          enum: [BASEBALL, BASKETBALL, BOWLING, CHEERLEADING, CREW, CRICKET, CROSS_COUNTRY, DANCE, FENCING, FIELD_HOCKEY, FOOTBALL, GOLF, ICE_HOCKEY, LACROSSE, RUGBY, SOCCER, SOFTBALL, SWIMMING, TABLE_TENNIS, TENNIS, TRACK, VOLLEYBALL, WRESTLING]
    State_Code:
      type: object
      properties:
        state:
          type: string
          enum: [AK, AL, AZ, AR, CA, CO, CT, DE, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY]
    New_User_Base:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        birth_date:
          description: an ISO 8601 datetime
          type: string
          format: date-time
          example: '2013-02-04T22:44:30.652Z'
        email:
          type: string
        password:
          type: string
        phone_number:
          type: string
        username:
          type: string
      required: [first_name, last_name, birth_date, email, password, phone_number, username]
    New_Coach_Or_Fan:
      type: object
      allOf:
        - $ref: '#/components/schemas/New_User_Base'
      properties:
        role:
          type: string
          enum: [COACH, FAN]
        school_id:
          type: string
      required: [role]
    New_Student:
      type: object
      allOf:
        - $ref: '#/components/schemas/New_User_Base'
      properties:
        role:
          type: string
          enum: [STUDENT]
        sports:
          type: array
          items:
            $ref: '#/components/schemas/Sport'
        school_id:
          type: string
        school_year:
          type: string
          enum: [SEVENTH, EIGHTH, FRESHMAN, SOPHOMORE, JUNIOR, SENIOR, ALUMNI]
      required: [role, sports, school_id, school_year]
    New_User:
      type: object
      oneOf:
        - $ref: '#/components/schemas/New_Coach_Or_Fan'
        - $ref: '#/components/schemas/New_Student'
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
    New_School:
      allOf:
        - $ref: '#/components/schemas/State_Code'
        - type: object
          properties:
            name:
              type: string
            city:
              type: string
          required: [name, city, state]
    School:
      allOf:
        - $ref: '#/components/schemas/State_Code'
        - type: object
          properties:
            id:
              type: string
            name:
              type: string
            city:
              type: string
    Schools:
      allOf:
        - $ref: '#/components/schemas/Array_Container'
        - type: object
          properties:
            array:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Array_Item'
                  - type: object
                    properties:
                      item:
                        $ref: '#/components/schemas/School'
                    required: [item]
          required: [array]
    Phone_Verification:
      type: object
      properties:
        phone_number:
          type: string
        device_id:
          type: string
      required: [phone_number, device_id]