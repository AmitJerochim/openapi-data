openapi: 3.0.0
servers:
  - description: Docusketch Sandbox API
    url: https://sandbox.docusketch.com/rest/v2/
  - description: Docusketch Production API
    url: https://app.docusketch.com/rest/v2/
info:
  description: |
    Docusketch Pano API
    [http://swagger.io](http://swagger.io)
  version: "2.0.1"
  title: Docusketch Pano API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: api@docusketch.com
tags:
  - name: Room
    description: Documentation of a room
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: Pano
    description: Documentation of Pano
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  '/tour/{tourID}/room':
    post:
      tags:
        - Room
      parameters:
        - name: tourID
          in: path
          description: ID of tour to add a room to
          required: true
          schema:
            type: string
      summary: POST a new Room to a tour
      description: ''
      operationId: postRoom
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'
        '200':
          description: Room successfully added to tour
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: ["ROOM_CREATED"]
                  details:
                    $ref: '#/components/schemas/Room'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'Some related resource could not be found <br /> Possible type values: TOUR_NOT_FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                ProjectNotFound:
                  value:
                    type: "TOUR_NOT_FOUND"
      requestBody:
        description: Room to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomPost'
  '/tour/{tourID}/room/{roomID}':
    get:
      tags:
        - Room
      summary: Get Room By ID
      operationId: getRoom
      parameters:
        - name: tourID
          in: path
          description: ID of tour to query the room for
          required: true
          schema:
            type: string
        - name: roomID
          in: path
          description: ID of room to query
          required: true
          schema:
            type: string
        - name: scope
          in: query
          description: 'Comma separated list of Scopes to include additional data in response <br /><b>Allowed values</b>: PANO_FULL'
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'Some related resource could not be found <br /> Possible type values: TOUR_NOT_FOUND, ROOM_NOT_FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                ProjectNotFound:
                  value:
                    type: "ROOM_NOT_FOUND"
        '200':
          description: Room retrieval successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
    put:
      tags:
        - Room
      parameters:
        - name: tourID
          in: path
          description: ID of tour to query the room for
          required: true
          schema:
            type: string
        - name: roomID
          in: path
          description: ID of room to update
          required: true
          schema:
            type: string
        - name: scope
          in: query
          description: 'Comma separated list of Scopes to include additional data in response <br /><b>Allowed values</b>: PANO_FULL'
          schema:
            type: string
      summary: Update a rooms base data
      operationId: putRoom
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '200':
          description: Room successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: ["ROOM_MODIFIED"]
                  details:
                    $ref: '#/components/schemas/Room'
        '404':
          description: 'Some related resource could not be found <br /> Possible type values: TOUR_NOT_FOUND, ROOM_NOT_FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                ProjectNotFound:
                  value:
                    type: "ROOM_NOT_FOUND"
      requestBody:
        description: Room to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomPost'
    delete:
      tags:
        - Room
      parameters:
        - name: tourID
          in: path
          description: ID of tour to query the rooms for
          required: true
          schema:
            type: string
        - name: roomID
          in: path
          description: ID of room to update
          required: true
          schema:
            type: string
      summary: Delete a Room from a Tour
      operationId: deleteRoom
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '200':
          description: Room successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: ["ROOM_DELETED"]
        '404':
          description: 'Some related resource could not be found <br /> Possible type values: TOUR_NOT_FOUND, ROOM_NOT_FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                ProjectNotFound:
                  value:
                    type: "ROOM_NOT_FOUND"
  '/tour/{tourID}/poi':
    post:
      tags:
        - POI
      parameters:
        - name: tourID
          in: path
          description: ID of tour to add the poi to
          required: true
          schema:
            type: string
      summary: POST a new POI to a tour
      description: ''
      operationId: postPOI
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'
        '200':
          description: POI successfully added to tour
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: ["POI_CREATED"]
                  details:
                    $ref: '#/components/schemas/POI'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'Some related resource could not be found <br /> Possible type values: TOUR_NOT_FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                ProjectNotFound:
                  value:
                    type: "TOUR_NOT_FOUND"
      requestBody:
        description: POI to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/POIPost'
  '/tour/{tourID}/poi/{poiID}':
    put:
      tags:
        - POI
      parameters:
        - name: tourID
          in: path
          description: ID of tour to add the poi to
          required: true
          schema:
            type: string
        - name: poiID
          in: path
          description: ID of poi to modify
          required: true
          schema:
            type: string
      summary: PUT changes to existing POI
      description: ''
      operationId: putPOI
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'
        '200':
          description: POI successfully modified
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: ["POI_MODIFIED"]
                  details:
                    $ref: '#/components/schemas/POI'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'Some related resource could not be found <br /> Possible type values: TOUR_NOT_FOUND, POI_NOT_FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                ProjectNotFound:
                  value:
                    type: "TOUR_NOT_FOUND"
      requestBody:
        description: POI changes to apply
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/POIPost'
    delete:
      tags:
        - POI
      parameters:
        - name: tourID
          in: path
          description: ID of tour to delete the poi from
          required: true
          schema:
            type: string
        - name: poiID
          in: path
          description: ID of poi to delete
          required: true
          schema:
            type: string
      summary: DELETE POI with specified ID
      description: ''
      operationId: deletePOI
      responses:
        '401':
          $ref: '#/components/responses/Unauthorized'
        '200':
          description: POI successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: ["POI_DELETED"]
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'Some related resource could not be found <br /> Possible type values: TOUR_NOT_FOUND, POI_NOT_FOUND'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              examples:
                ProjectNotFound:
                  value:
                    type: "TOUR_NOT_FOUND"
      

components:
  responses:
    Unauthorized:
      description: "Unauthorized, passed token invalid"
    Forbidden:
      description: "Forbidden, user itself valid, but triggered operation not granted"
  schemas:
    Room:
      type: object
      properties:
        id:
          type: string
          description: ObjectId of room
        name:
          type: string
          description: name of room as shown in the player
        floor:
          type: integer
          description: Floor on which a room is located
        cameraHeight: 
          type: number
          description: Cameraheight in m (double)
        ceilingHeight:
          type: number
          description: Ceilingheight in m (double)
        status:
          type: string
          enum: ["ACTIVE", "DELETED"]
        panos:
          type: array
          description: list of related panos (Transient)
          items:
            $ref: '#/components/schemas/Pano'
    RoomPost:
      type: object
      properties:
        name:
          type: string
          description: name of room as shown in the player
        floor:
          type: integer
          description: Floor on which a room is located
        cameraHeight: 
          type: number
          description: Cameraheight in m (double)
        ceilingHeight:
          type: number
          description: Ceilingheight in m (double)
        
    Pano:
      type: object
      properties:
        id:
          type: string
          description: ObjectId of pano
        cameraID:
          type: string
          description: ObjectId of camera that it relates to
        layerID:
          type: string
          description: ObjectId of layer that the room is on. Usually used for working in timelines
        filename:
          type: string
          description: filename under which image is saved
        additionalMergeFiles:
          description: 'In case if HDR is required 3 images will be passed on image upload and filenames will be saved in this attribute'
          type: array
          items:
            type: string
        imageUrls:
          description: Available Scaled Versions of image
          type: object
          properties:
            ORIGINAL:
              type: string
            MERGED:
              type: string
            STICHTED:
              type: string
            EDITOR_COPY:
              type: string
            DS_TEXTURE:
              type: string
            SMALL:
              type: string
            HD1080:
              type: string
            HD2688:
              type: string
            HD1606:
              type: string
        source:
          type: string
          enum: ["MI", "RICOH", "GALLERY", "EDITOR"]
          description: 'Defines where the how the image has been created and implies behaviour for image processing pipline'
        status:
          type: string
          enum: ["ACTIVE", "EMPTY", "REPLACED", "DELETED"]
        fileLength:
          type: integer
          description: Filelength of the original image
        fileWidth:
          type: integer
          description: fileWidth in pixels
        fileHeight:
          type: integer
          description: fileHeight in pixels
        compass:
          type: number
        cameraHeight:
          type: number
          description: Height of camera at the moment of image creation
        presetCenterH:
          type: number
          description: Predefined starting angle
        presetCenterV:
          type: number
          description: Predefined starting angle
        presetCenterFOV:
          type: number
          description: Predefined starting Field of view
        hlookatmin:
          type: number
          description: Restriction possible rotation in player
        hlookatmax:
          type: number
          description: Restriction possible rotation in player
        vlookatmin:
          type: number
          description: Restriction possible rotation in player
        vlookatmax:
          type: number
          description: Restriction possible rotation in player
        exifDate:
          type: string
          description: date of creation extracted from exif data
        isoSpeed:
          type: integer
          description: isoSpeed which was used to take the image
        pitch:
          type: number
          description: Rotation of camera at the moment of image creation
        roll:
          type: number
          description: Rotation of camera at the moment of image creation
    NotFound:
      type: object
      properties:
        type:
          type: string
          enum: ["PROJECT_NOT_FOUND", "ROOM_NOT_FOUND", "FLOORPLAN_NOT_FOUND", "LAYER_NOT_FOUND"]
    POI:
      type: object
      properties:
        id:
          type: string
          description: ObjectId of POI
        tourID:
          type: string
          description: ObjectId of tour
        panoID:
          type: string
          description: ObjectId of pano that it references to (optional)
        roomID:
          type: string
          description: ObjectId of room that it references to (optional)
        xPos:
          type: number
          description: X Coordinate in Pano (optional, only valid if panoID is set)
        yPos:
          type: number
          description: Y Coordinate in Pano (optional, only valid if panoID is set)
        type: 
          type: string
          enum: ["HOTSPOT", "IMAGE", "VIDEO", "TEXT", "PDF", "EMBED_URL", "MEASUREMENT_NOTE", "CUSTOM", "FRONT_VIEW"]
          description: Type of the POI, different logic might be applied for different types
        linkedPanoID:
          type: string
          description: ObjectId of referenced pano in case of TYPE == HOTSPOT
        name: 
          type: string
          description: Customer defined name that is shown in the player 
        description:
          type: string
          description: Customer defined description
        url:
          type: string
          description: URL of stored resource (valid for type == PDF | EMBED_URL)
        templateID:
          type: string
          description: ObjectId of referenced template (templates store structure of expected customData)
        customData:
          type: object
          description: Key-value based map that holds values of custom fields that are defined by the referenced template (only valid if templateID is set)
        wallWidth:
          type: number
          description: only valid for type == MEASUREMENT_NOTE
        wallHeight:
          type: number
          description: only valid for type == MEASUREMENT_NOTE
        wallToOpposite:
          type: number
          description: only valid for type == MEASUREMENT_NOTE
    
        
    POIPost:
      type: object
      properties:
        panoID:
          type: string
          description: ObjectId of pano that it references to (optional)
        roomID:
          type: string
          description: ObjectId of room that it references to (optional)
        xPos:
          type: number
          description: X Coordinate in Pano (optional, only valid if panoID is set)
        yPos:
          type: number
          description: Y Coordinate in Pano (optional, only valid if panoID is set)
        type: 
          type: string
          enum: ["HOTSPOT", "IMAGE", "VIDEO", "TEXT", "PDF", "EMBED_URL", "MEASUREMENT_NOTE", "CUSTOM", "FRONT_VIEW"]
          description: Type of the POI, different logic might be applied for different types
        linkedPanoID:
          type: string
          description: ObjectId of referenced pano in case of TYPE == HOTSPOT
        name: 
          type: string
          description: Customer defined name that is shown in the player 
        description:
          type: string
          description: Customer defined description
        url:
          type: string
          description: URL of stored resource (valid for type == PDF | EMBED_URL)
        templateID:
          type: string
          description: ObjectId of referenced template (templates store structure of expected customData)
        customData:
          type: object
          description: Key-value based map that holds values of custom fields that are defined by the referenced template (only valid if templateID is set)
        wallWidth:
          type: number
          description: only valid for type == MEASUREMENT_NOTE
        wallHeight:
          type: number
          description: only valid for type == MEASUREMENT_NOTE
        wallToOpposite:
          type: number
          description: only valid for type == MEASUREMENT_NOTE

  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
