penapi: 3.0.0
info:
  description: AP ERP API
  version: "1.0.1"
  title: AP ERP API
  contact:
    email: vincent@growthmate.hk
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Store App
    description: API for store app
  - name: Staff App
    description: API for staff app
paths:
  /oauth/token:
    post:
      tags:
        - Staff App
      summary: get access token
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              properties:
                grant_type: 
                  type: string
                  example: 'password'
                client_id:
                  type: integer
                  example: 2
                client_secret:
                  type: string
                  example: 'I1jSNrxom1En4pXj3GGDTZUKIHjoLvqlANj43sGR'
                username:
                  type: string
                  example: 'staff1'
                password:
                  type: string
                  example: 'staff1_password'
      responses:
        '200':
          description: Save the value of “access_token” and pass it in the Authorization header of subsequence API 
          content:
            application/json:
              schema:
                properties:
                  token_type: 
                    type: string
                    example: 'Bearer'
                  expires_in:
                    type: integer
                    example: 31622400
                  access_token:
                    type: string
                    example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIyIiwianRpIjoiNTNmMzQwZjEyOWQxNzgyMWFhNzNhMDkyNTZiODljNzlkYmRhZTM5MzY3MTI0YmI2ZWYwMDY3YTIxYzQxY2FhZDQzZTkzNzZlYWI3NGZhZTciLCJpYXQiOjE1ODE4NDg3NTcsIm5iZiI6MTU4MTg0ODc1NywiZXhwIjoxNjEzNDcxMTU3LCJzdWIiOiIyIiwic2NvcGVzIjpbXX0'
        '400':
          $ref: '#/components/responses/InvalidInput'
  /user/{userId}:
    get:
      tags:
        - Staff App
      summary: get user
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          description: userId
          schema:
            type: string
      responses:
        '200':
          description: user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /user/{userId}/attendance/{action}:
    post:
      tags:
        - Staff App
      summary: record attendance action
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          description: userId
          schema:
            type: string
        - in: path
          name: action
          required: true
          description: attendance action
          schema:
            type: string
            enum: ['clockIn', 'clockOut']
      responses:
        '200':
          description: Success perform clock in
          content:
            application/json:
              schema:
                $ref: '#/components/responses/GeneralAPIResponse'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          description: Unauthorized, please login.
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /user/{userId}/attendance:
    get:
      tags:
        - Staff App
      summary: list user attendance record
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          description: userId
          schema:
            type: string
        - in: query
          name: fromDate
          description: filter attendance record by fromDate, empty value will default to today
          schema:
            type: string
          allowEmptyValue: true
        - in: query
          name: toDate
          description: filter attendance record by toDate, empty value will default to today
          schema:
            type: string
          allowEmptyValue: true
      responses:
        '200':
          description: list current user attendances record according to search criteria,  latest record comes first
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttendanceRecord'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /user/{userId}/shift:
    get:
      tags:
        - Staff App
      summary: list scheduled shift record
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          description: userId
          schema:
            type: string
        - in: query
          name: fromDate
          description: filter shift record by fromDate, empty value will default to today
          schema:
            type: string
          allowEmptyValue: true
        - in: query
          name: toDate
          description: filter shift record by toDate, empty value will default to today
          schema:
            type: string
          allowEmptyValue: true
      responses:
        '200':
          description: list current scheduled shift record according to search criteria, oldest record comes first
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shift'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /user/{userId}/attendanceAdjustmentRequest:
    get:
      tags:
        - Staff App
      summary: list attendance adjustment request for store manager record
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          description: userId
          schema:
            type: string
        - in: query
          name: limit
          description: item per page, default 20
          schema:
            type: string
          allowEmptyValue: true
        - in: query
          name: page
          description: page number, default 1
          schema:
            type: string
          allowEmptyValue: true
      responses:
        '200':
          description: list attendance adjustment request record according to search criteria, latest record comes first
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/PaginationResponse'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AdjustmentRequest'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /user/{userId}/attendanceAdjustmentRequest/{requestId}/{action}:
    post:
      tags:
        - Staff App
      summary: process attendance adjustment request
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          description: userId
          schema:
            type: string
        - in: path
          name: requestId
          required: true
          description: attendance adjustment request id
          schema:
            type: string
        - in: path
          name: action
          required: true
          description: process request action
          schema:
            type: string
            enum: ['accept', 'reject']
      responses:
        '200':
          description: Success perform action
          content:
            application/json:
              schema:
                $ref: '#/components/responses/GeneralAPIResponse'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /store/findByAuthCode:
    get:
      tags:
        - Store App
      summary: get store hash by auth code
      parameters:
        - in: query
          name: authCode
          required: true
          description: auth code pre-allocated for store
          schema:
            type: string
      responses:
        '200':
          description: store object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '404':
          description: Not Found
  /store/{storeId}/otp:
    get:
      operationId: Get Store OTP
      tags:
        - Store App
      summary: get attendence tracking OTP
      parameters:
        - in: path
          name: storeId
          required: true
          schema:
            type: string
        - in: query
          name: timestamp
          required: true
          description: unix timestamp matching with signature, timestamp need to be within
            +/- 12 hours with server time
          schema:
            type: string
        - in: query
          name: signature
          required: true
          description: md5(timestamp + "." + storeId)
          schema:
            type: string
      responses:
        '200':
          description: generate OTP and invalidate old OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  otp:
                    type: string
                    description: one time password for attendance tracking in staff app
                      with manual input
                    example: 123456
                  otpQR:
                    type: string
                    description: QR one time password for attendance tracking in staff app
                      with QR input
                    example: MTIzNDU2
        '400':
          $ref: '#/components/responses/InvalidInput'
        '404':
          description: Not Found
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    GeneralAPIResponse:
      description: General API Result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIResult'
    InvalidInput:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    User:
      required:
      - id
      - name
      - email
      properties:
        id: 
          type: integer
          example: 1
        name:
          type: string
          example: Peter
        email:
          type: string
          example: peter@example.com
          nullable: true
    Store:
      required:
      - id
      - name
      properties:
        id: 
          type: integer
          example: 1
        name:
          type: string
          example: Example Store
    AttendanceRecord:
      required:
      - id
      - user
      - action
      - createdAt
      properties:
        id:
          type: integer
          example: 1
        user:
          $ref: '#/components/schemas/User'
        action:
          type: string
          enum: ['clockIn', 'clockOut']
          example: 'clockIn'
        adjustmentRequest:
          $ref: '#/components/schemas/AdjustmentRequest'
        createdAt:
          type: string
          example: '2020-02-16 21:00:00'
    AdjustmentRequest:
      required:
      - id
      - status
      properties:
        id:
          type: integer
          example: 1
        status:
          type: string
          enum: ['pending', 'approved', 'rejected']
          example: 'pending'
        requestedBy:
          $ref: '#/components/schemas/User'
        requestedAt:
          type: string
          nullable: true
          example: '2020-02-16 21:00:00'
        processedBy:
          $ref: '#/components/schemas/User'
        processedAt:
          type: string
          nullable: true
          example: '2020-02-16 21:00:00'
    Shift:
      required:
      - id
      - status
      - location
      - user
      - from
      - to
      - date
      - fromTime
      - toTime
      properties:
        id:
          type: integer
          example: 1
        status:
          type: string
          enum: ['drafted', 'active']
          example: 'active'
        location:
          $ref: '#/components/schemas/Store'
        user:
          $ref: '#/components/schemas/User'
        from:
          type: string
          example: '2020-02-16 09:00:00'
        to:
          type: string
          example: '2020-02-16 17:00:00'
        date:
          type: string
          example: '2020-02-16'
        fromTime:
          type: string
          example: '9:00'
        toTime:
          type: string
          example: '17:00'
    Error:
      required:
      - message
      - data
      properties:
        message:
          type: string
          nullable: true
          example: Invalid Data
        data:
          type: object
          nullable: true
    APIResult:
      required:
      - message
      - data
      properties:
        success:
          type: boolean
        message:
          type: string
          example: Success
          nullable: true
        data:
          type: object
          nullable: true
    PaginationResponse:
      required:
      - total
      - hasNext
      properties:
        total:
          type: number
          example: 100
        hasNext:
           type: boolean
      xml:
         name: PaginationResponsedata
servers:
  - url: 'https://virtserver.swaggerhub.com/Growthmate/aperp/1.0.0'