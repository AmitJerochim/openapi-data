penapi: 3.0.0
info:
  title: Luisterhuis metadata API
  description: Exchanging metadata with Luisterhuis
  version: "v1"
servers:
  - url: https://api.luisterhuis.nl/api/CB/v1
    description: Production server
  - url: https://cbtest-api.luisterhuis.nl/api/CB/v1
    description: Sandbox server (uses test data)
security:
- basicAuth: []
- bearerAuth: []
paths:
  /audiobooks/eans:
    get:
      summary: Get array of EANs that have updated metadata since ReferenceDatetime
      parameters:
      - name: referencedatetime
        in: query
        description: "The reference date after which changes have taken place in the Luisterhuis metadata of audiobook(s), should conform to date-time from RFC3339. Example: audiobooks?referencedatetime=2019-09-19T07:46:13.318+00:00"
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        example: 2019-03-20T09:12:28+00:00
      responses:
        200:
          description: OK
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfEANs'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        401:
          description: "Authentication information or Access token is missing or invalid"
  /audiobooks/{ean}/lhattributes:
    get:
      summary: "Get relevant metadata generated by Luisterhuis for the specified EAN. Voorbeeld: audiobooks/9781234567897/lhattributes"
      parameters:
      - name: ean
        in: path
        description: "The ean of the audiobook"
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^([0-9]{13})$
          type: string
        example: "9781234567897"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EANMetadata'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        401:
          description: Authentication information or Access token is missing or invalid
        404:
          description: Unknown EAN
  /audiobooks/{ean}/datafiles:
    put:
      summary: "Tell Luisterhuis files have been uploaded for this EAN"
      parameters:
      - name: ean
        in: path
        description: "The ean of the audiobook"
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^([0-9]{13})$
          type: string
        example: "9781234567897"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EANDatafiles'
        required: true
      responses:
        204:
          description: No Content
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        401:
          description: Authentication information or Access token is missing or invalid
        404:
          description: Unknown EAN
        406:
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        415:
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
  /audiobooks/{ean}:
    get:
      summary: Get data from Luisterhuis
      parameters:
      - name: ean
        in: path
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^([0-9]{13})$
          type: string
        example: "9781234567897"
      responses:
        200:
          description: data from luisterhuis
          content:
            application/json:
              schema:
                type: object
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        404:
          description: Not Found
        406:
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"        
    put:
      summary: Post ONIX data to Luisterhuis
      parameters:
      - name: ean
        in: path
        required: true
        style: simple
        explode: false
        schema:
          pattern: ^([0-9]{13})$
          type: string
        example: "9781234567897"
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ONIXMessage'
        required: true
      responses:
        204:
          description: No Content
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        401:
          description: Authentication information or Access token is missing or invalid
        406:
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        415:
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
components:
  schemas:
    ONIXMessage:
      type: object
      properties:
        release:
          type: string
          xml:
            attribute: true
          default: "3.0"
        Header:
          type: object
        Product:
          type: object
      xml:
        namespace: http://ns.editeur.org/onix/3.0/reference
    EANDatafiles:
      type: object
      required:
        - "Location"
        - "DateTimePlaced"
      properties:
        Location:
          type: string
          description: Indicates which prefix was used in the S3 ingress bucket.
        DateTimePlaced:
          type: string
          description: Signifies when upload was completed as date-time conform RFC3339
          format: date-time
    EANMetadata:
      type: object
      required:
        - "ProductReady"
      properties:
        ProductReady:
          type: boolean
          description: Indicates if the owner of the product fully filled the mandatory metadata of the product and also that the audiofiles are processed correctly. If ‘yes’ (`true`), the product (and audiofiles) can be communicated and delivered to the market.
        AudioFilesStatus:
          type: string
          enum: ["Missing", "Received", "Processing", "Errors", "OK"]
          description: >
            The status of the audiofiles related to a product
             * `Missing`: No audiofiles are known for this product (Luisterhuis)
             * `Received`: The audiofiles of the product are received and stored at CB (Luisterhuis)
             * `Processing`: The audiofiles of the product are being processed/checked by CB (Luisterhuis)
             * `Errors`: The audiofiles of the product have been checked and one or some errors occurred
             * `OK`: The audiofiles of the product have been checked and the audiofiles of the product are approved. The audiofiles are ready to receive orders and to deliver to platforms (depends on the metadata of the product if orders can be received and audiofiles will be delivered to platforms).
        AudioFilesLastUpdated:
          type: string
          description: Last update of audiofiles date-time conform RFC3339
          format: date-time
        TotalPlayTime:
          type: integer
          description: Total play time in seconds
        TotalFileSize:
          type: integer
          description: Total file size in bytes
    ArrayOfEANs:
      minItems: 0
      uniqueItems: true
      type: "array"
      items:
        properties:
          EAN:
            type: "string"
            example: "9781234567897"
            description: "The ean of the audiobook"
          LastUpdated:
            type: "string"
            format: "date-time"
            description: "Last update of Luisterhuis attributes"
    Messages:
      type: "array"
      items:
        $ref: "#/components/schemas/Message"
    Message:
      type: "object"
      required:
        - "MessageType"
        - "MessageCode"
        - "MessageText"
      properties:
        MessageType:
          type: "string"
          enum: ["E", "I"]
          description: >
            Functional message
             * `E` (Error) The web service did not lead to a possible functional reply. There is a fault in the request.
             * `I` (Information) The web service did lead to a functional reply. However, this functional reply may require further explanation.
          example: "I"
        "MessageCode":
          type: "string"
          description: "The code of the error/information"
          example: "LH-00001"
        "MessageText":
           type: "string"
           description: "Explanation of the error/information"
           example: "The text of the error/information"
        "MessageInfo":
          type: "array"
          description: "Optional array of detailed error/info messages"
          items:
            type: "string"
            example: "Optional detailed error/information messages"
      description: "The message body"
  responses:
    UnauthorizedError:
      description: "Authentication information or Access token is missing or invalid"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT