openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/mirc-engineering/workloggerweb/1.0.0
  - description: Development URL
    url: https://www.workloggerweb-staging.herokuapp.com/api/v1/
  - description: Public URL
    url: https://www.workloggerweb.com/api/v1/
info:
  description: |
    This API is for development purposes only. It is not meant to be a public API. 
  version: "1.0.0"
  title: Workloggerweb
  contact:
    email: mirc.engineering@mays.tamu.edu
tags:
  - name: audio_files
    description: Creating and listing audio files for manager
  - name: availabilities
    description: Access to Petstore orders
  - name: flags
    description: Operations about user
  - name: groups
    description: Operations about user
  - name: manager_settings
    description: Operations about user
  - name: messages
    description: Operations about user
  - name: questions
    description: Operations about user
  - name: surveys
    description: Operations about user
  - name: users
    description: Operations about user  
  - name: violations
    description: Operations about user  
  - name: worker_sessions
    description: Operations about user  
  - name: wages
    description: Operations about user  
  - name: worker_stats
    description: Operations about user    

    
paths:
  /audio_files/future_audio_file:
    post:
      tags:
        - audio_files
      summary: Create a future audio file
      operationId: create_futureAudioFile
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        $ref: '#/components/requestBodies/FutureAudioFile'
  /audio_files/list:
    post:
      tags:
        - audio_files
      summary: Returns an array of manager's audio files
      operationId: audio_files_list
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        $ref: '#/components/requestBodies/List' #???
    
  /audio_files/new:
    post:
      tags:
        - audio_files
      summary: Create new audio files
      operationId: audio_files_new
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
          $ref: '#/components/requestBodies/FutureAudioFile'   
      
  /audio_files/delete:
    post:
      tags:
        - audio_files
      summary: Delete audio files
      operationId: audio_files_delete
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                audio_file_name:
                  type: string 
                  
  /availabilities/today:
    post:
      tags:
        - availabilities
      summary: Get today's availabilities for manager
      operationId: availabilities_today
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
        
        
  /availabilities/tomorrow:
    post:
      tags:
        - availabilities
      summary: Get tomorrow's availabilities for manager
      operationId: availabilities_tomorrow
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
        
      
  /availabilities/weekly:
    post:
      tags:
        - availabilities
      summary: Get weekly availabilities for manager
      operationId: availabilities_weekly
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    
  /flags/list:
    post:
      tags:
        - flags
      summary: List all flags for manager
      operationId: flags_list
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              
  /flags/create:
    post:
      tags:
        - flags
      summary: Create a flag
      operationId: flags_create
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: boolean
                description:
                  type: string
                value: 
                  type: integer
                user_id:
                  type: integer
                
  
  /flags/delete:
    post:
      tags:
        - flags
      summary: Delete a flag
      operationId: flags_delete
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flag_id:
                  type: integer  
                
  /groups/create:
    post:
      tags:
        - groups
      summary: Create a new group for manager
      operationId: groups_create
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                members:
                  type: array
                  items: 
                    $ref: '#/components/schemas/FutureAudioFile' 
                    #Not sure about this
                    
  /groups/default:
    post:
      tags:
        - groups
      summary: get the default group
      operationId: groups_default
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              
  /groups/delete:
    post:
      tags:
        - groups
      summary: delete groups from manager and removes workers from group
      operationId: groups_delete
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: integer
 
 
  /groups/edit:
    post:
      tags:
        - groups
      summary: add or remove workers from groups
      operationId: groups_edit
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties:
                group_id:
                  type: integer
                members:
                  type: array
                  items: 
                    $ref: '#/components/schemas/FutureAudioFile' 
                    #Not sure about this
                  
              
  /groups/list:
    post:
      tags:
        - groups
      summary: list manager groups and the members of each
      operationId: groups_list
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              
  /groups/set_default:
    post:
      tags:
        - groups
      summary: set a group as default for this manager
      operationId: groups_set_default
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties:
                group_id:
                  type: integer
                  
  /manager_settings/list:
    post:
      tags:
        - manager_settings
      summary: manager settings that don't care
      operationId: manager_settings_list
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
  
                  
  /messages/today:
    post:
      tags:
        - messages
      summary: today's messages for given manager
      operationId: messages_today
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
            
  /messages/yesterday:
    post:
      tags:
        - messages
      summary: yesterday's messages for given manager
      operationId: messages_yesterday
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  
  /questions/answer:
    post:
      tags:
        - questions
      summary: submit questions to be answered
      operationId: questions_answer
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties:
                yes:
                  type: array
                  items:
                    $ref: '#/components/schemas/FutureAudioFile' 
                    #Not sure about this
                no:
                  type: array
                  items:
                    $ref: '#/components/schemas/FutureAudioFile' 
                    #Not sure about this
                neutral:
                  type: array
                  items:
                    $ref: '#/components/schemas/FutureAudioFile' 
                    #Not sure about this    
              
  /questions/delete:
    post:
      tags:
        - questions
      summary: delete a question
      operationId: questions_delete
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties:
                question_id:
                  type: integer
              
  /questions/list:
    post:
      tags:
        - questions
      summary: list unanswered questions for manager
      operationId: questions_list
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              
            
  /settings/group:
    post:
      tags:
        - settings
      summary: list group settings
      operationId: settings_group
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              
              
  /settings/user:
    post:
      tags:
        - settings
      summary: list user settings
      operationId: settings_user
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              
  /settings/update_group:
    post:
      tags:
        - settings
      summary: update group settings
      operationId: settings_update_group
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties:
                settings:
                  type: object #not sure
                group_id:
                  type: integer
                
              
  /settings/update_user:
    post:
      tags:
        - settings
      summary: update user settings
      operationId: settings_update_user
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties:
                settings:
                  type: object #not sure
                group_id:
                  type: integer
  /settings/manager:
    post:
      tags:
        - settings
      summary: list remaining settings for the manager
      operationId: settings_manager
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              
  /surveys/list:
    post:
      tags:
        - surveys
      summary: list serveys managers has createdd
      operationId: surveys_list
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              
   
  /users/authenticate:
    post:
      tags:
        - users
      summary: First call, gives access to server for manager. If email and pw then do not send token as param!  
      operationId: users_authenticate
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object   
              properties:
                #token:  #google Oauth2 ID token????
                email:
                  type: string
                password:
                  type: string
                
                  
              

  /users/: #or just /users
    post:
      tags:
        - users
      summary: creates user
      operationId: users
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                user[name]:
                  type: string
                user[email]:
                  type: string
                user[password]:
                  type: string
                password_confirmation:
                  type: string
                

  /users/daily_hours:
    post:
      tags:
        - users
      summary: hours worked each day for this week
      operationId: users_daily_hours
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object              
              
  /users/deactivate:
    post:
      tags:
        - users
      summary: make worker inactive, remove from all managers, clear from groups
      operationId: users_deactivate
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                worker_id:
                  type: integer
              
              
  /users/remove:
    post:
      tags:
        - users
      summary: remove worker from this manager, clear groups of this manager
      operationId: users_remove
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                worker_id:
                  type: integer
                
              
              
  /users/roster_workers:
    post:
      tags:
        - users
      summary: gives the roster for this manager
      operationId: users_roster_workers
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              
              
  /users/today_hours:
    post:
      tags:
        - users
      summary: hours for today foor each worker under this manager
      operationId: users_today_hours
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              
              
  /users/unfinished_audio_count:
    post:
      tags:
        - users
      summary: number of audio files each worker has for manager
      operationId: users_unfinished_audio_count
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              
              
              
  /users/week_hours:
    post:
      tags:
        - users
      summary: hours worked for each worker under this manager, current for this
              week, previous for last week hours
      operationId: users_week_hours
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              
              #filter=>'current' or 'previous' ???
              
  /violations/today:
    post:
      tags:
        - violations
      summary: violations today
      operationId: violations_today
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object     
              
  /violations/weekly:
    post:
      tags:
        - violations
      summary: weekly violations
      operationId: violations_weekly
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object            
  
  /violations/weekly_count:
    post:
      tags:
        - violations
      summary: red flags count since the start of the week
      operationId: violations_weekly_count
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object            
  
  /violations/semester_count:
    post:
      tags:
        - violations
      summary: red flags count since the start of the semester
      operationId: violations_semester_count
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object            
  
  /worker_sessions/current_user:
    post:
      tags:
        - worker_sessions
      summary: get all current users for manager
      operationId: worker_sessions_current_user
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object         
              
  /wages:  #???? /wages/:
    post:
      tags:
        - wages
      summary: edit a worker's wage
      operationId: wages
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                wage:
                  type: number

  /wages/list:
    post:
      tags:
        - wages
      summary: list wages of workers for manager
      operationId: wages_list
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object            
  
  /worker_stats/list:
    post:
      tags:
        - worker_stats
      summary: list stats for all workers for a manager
      operationId: worker_stats_list
      parameters:
        - name: manager_id
          in: query
          description: id of manager
          required: true
          schema:
            type : integer
            format: int64
            minimum: 120
      responses:
        '200':
          description: success
        '422': 
          description: error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
  
  
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FutureAudioFile'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FutureAudioFile'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FutureAudioFile'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FutureAudioFile'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      deprecated: true
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FutureAudioFile'
            application/xml:
              schema:
                $ref: '#/components/schemas/FutureAudioFile'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    FutureAudioFile:
      type: object
      required:
        - name
        - photoUrls
      properties:
        user_id:
          type: integer
          example: 38
        manager_id:
          type: integer
          example: 120
        manager_email:
          type: string
          example: 'example@test.com'
        name:
          type: string
          example: 'Test McTestFace'
        send_to:
          type: string
          example: 'testRecipient'
        data:
          type: string
          example: '10/7/2019'
        time:
          type: string
          example: '13:46'
        importance:
          type: string
          example: "'P' for primary, 'S'  for secondary"
        priority:
          type: string
          example: "'URGENT', 'HIGH', 'LOW'" 
        extension:
          type: string
          example: "'mp4' for android and 'mp3' for ios'"
        length:
          type: integer
          example: 7
        transfer_data:
          type: string
          example:  '2018-07-16'
        deadline:
          type: string #Optional
          example: "'2018-07-16', 'N/A' as no deadline"
        submit_file:
          type: boolean
          example: 1
        survey:
          type: boolean
          example: 0
        attachment_name:
          type: string
          example: 'name'
    
    List:
      type: object
      
        
            
      
        
      xml:
        name: FutureAudioFile
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    FutureAudioFile:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FutureAudioFile'
        application/xml:
          schema:
            $ref: '#/components/schemas/FutureAudioFile'
      description: Create a future audio file
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    
    List:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/List'
        application/xml:
          schema:
            $ref: '#/components/schemas/List'
      
      
  securitySchemes:
    manager_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header