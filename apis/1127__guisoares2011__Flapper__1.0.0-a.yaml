openapi: 3.0.0
info:
  description: |
  
    # Autenticação
      
      Alguns métodos na nossa API exige que usuário esteja logado. O login pode ser feito através de&#58;
      
      - Login de usuário&#58; `/api/v1/user/signin`
      - Login via facebook&#58; `/api/v1/user/connectwithfacebook`
      - Criação de usuário&#58; `/api/v1/user/signup`
      
    
    # Error Codes
    - **0** - OK
    - **1** - An error occurred
    - **2** - Authentication is required
    - **3** - Invalid type user
    - **4** - The session has been expired
    - **5** - Invalid parameters
    - **6** - User already registered
    - **7** - The user is inactive
    - **8** - The user is blocked
    - **9** - Invalid credentials
    - **10** - Invalid application
    - **11** - Invalid session
    - **12** - Token is no longer valid
    - **13** - Not implemented method
    - **14** - Resource not found
    - **15** - User not found
    - **16** - An error occurred while the application was trying to create the user
    - **17** - An error occurred while was trying to update the user
    - **18** - Address not found.
    - **19** - An error occurred while was trying to update the address.
    - **20** - An error occurred while was trying to delete the address.
    - **21** - An error occurred while was trying to update preferences.
    - **22** - Preferences not found.
    - **23** - Card already exists
    - **24** - No cards found
    - **25** - An error occurred while was trying to delete the card.
    - **26** - An error occurred while was trying to add billing address to the card.
    - **27** - An error occurred while was trying to generate new password token.
    - **28** - User is not allowed to perform action.
    - **29** - No spots were found.
    - **30** - Error toggling the reachbility of the session
    - **31** - An error occurred while trying to generate ticket.
    - **32** - An error occurred while trying to update flight data.
    - **33** - An error occurred while trying to create flight.
    - **34** - An error ocurred while trying to create transaction.
    - **35** - An error ocurred while trying to retrieve payment data.
    - **36** - An error ocurred while trying to register transaction.
    - **37** - Tickets not found.
    - **38** - An error occurred while trying to register boleto.
    - **39** - There are no seats available.
    - **40** - There are no quotations for this route. We will mail you with an special deal soon.
    - **41** - Flight not found.
    - **42** - Route not found.
    - **43** - An error occurred while trying to create route.
    - **44** - An error occurred while trying to calculate the average distance.
    - **45** - The informed route already exists.
    - **46** - Aircraft not found.
    - **47** - An error occurred while trying to create product.
    - **48** - An error occurred while trying to create order.
    - **49** - An error occurred while trying to register discount.
    - **50** - An error occurred while trying to create address.
    - **51** - An error occurred while trying to create session.
    - **52** - Malformed JSON.
    - **53** - Insufficient limit.
    - **54** - Insufficient funds.
    - **55** - An error occurred while trying to create a request for quotation.
    - **56** - Malformed XML.
    - **57** - An error occurred while trying to update a route.
    - **58** - An error occurred while was tryiing to create the company
    - **59** - An error occurred while was tryiing to update
    - **60** - The company doesn't exists
    - **61** - Flight list not found.
    - **62** - Order not found.
    - **63** - An error occurred while trying to create passenger.
    - **64** - An error occurred while trying to update the passenger
    - **65** - Passenger not found
    - **66** - Order already canceled.
    - **67** - An error ocurred while trying to update order.
    - **68** - An error ocurred while trying to update transaction.
    - **69** - An error occurred while trying to set the Reservation status.
    - **70** - Wallet not found
    - **71** - An error occurred while trying to create a wallet.
    - **72** - An error occurred while trying to update a wallet
    - **73** - Not allowed to process this payment method.
    - **74** - An error occurred while trying to create invoice
    - **75** - An error occurred while trying to update invoice
    - **76** - Invalid promotional code.
    - **77** - An error occurred while trying to purchase flights from provider
    - **78** - An error ocurred while trying to create new fare group
    - **79** - An error ocurred while trying to create new fare
    - **80** - An error ocurred while trying to attach new fare
    - **81** - An error occurred while trying to cancel order from provider
    - **82** - This user already have an active pending Order.
    - **83** - Cannot get wallet address for this Order.
    - **84** - Payment failed at Warp.
    - **85** - An error occurred while trying to create a refund.
    - **86** - An error occurred while trying to update a refund
    - **87** - Refund not found
    - **88** - Your purchase has been expired. Please try to select your items again.
    - **89** - This order is invalid for pending order.
    - **90** - Quotation proposal not found
    - **91** - This quotation proposal is expired
    - **92** - This quotation proposal is expired
    - **93** - This quotation proposal is not available for purchase.
    - **94** - This quotation proposal is already accepted
    - **95** - This quotation proposal wasn't reviewed yet.
    - **100** - Your application version has expired. Please try download the new version.
    
    This is a sample Petstore server.  You can find 
    out more about Swagger at 
    [http://swagger.io](http://swagger.io) or on 
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "1.0.0-a"
  title: Flapper API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:

      
  - name: user
    description: Métodos para Usuários
    
  - name: flight
    description: Métodos para Voo/Cotação

  - name: aircraft
    description: Métodos para Aeronaves/Modelos

  - name: payment
    description: Métodos para fluxo de pagamento

paths:
  
  # User Methods
  
  # Flight Methods
  /flight/quote:
    post:
      tags:
        - flight
      summary: Flight Quote
      operationId: flightQuote
     
      requestBody:
        
        $ref: '#/components/requestBodies/FlightQuote'
        
      responses:
        '200':
          description: "200 - OK"
          content:
            application/json:
              schema:
                allOf: 
                 - $ref: '#/components/schemas/BaseResponse'
                 - properties:
                    quotation: 
                      type: object
                      properties:
                        routes:
                          type: array
                          items: 
                            $ref: '#/components/schemas/FlightQuoteResponseRouteItem'
        '400':
          $ref: '#/components/responses/BadRequest'
          description: kpo
          
  # Payment Methods
      

    
  # /pet/findByStatus:
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by status
  #     description: Multiple status values can be provided with comma separated strings
  #     operationId: findPetsByStatus
  #     parameters:
  #       - name: status
  #         in: query
  #         description: Status values that need to be considered for filter
  #         required: true
  #         explode: true
  #         schema:
  #           type: array
  #           items:
  #             type: string
  #             enum:
  #               - available
  #               - pending
  #               - sold
  #             default: available
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid status value
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  # /pet/findByTags:
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by tags
  #     description: >-
  #       Muliple tags can be provided with comma separated strings. Use\ \ tag1,
  #       tag2, tag3 for testing.
  #     operationId: findPetsByTags
  #     parameters:
  #       - name: tags
  #         in: query
  #         description: Tags to filter by
  #         required: true
  #         explode: true
  #         schema:
  #           type: array
  #           items:
  #             type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid tag value
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #     deprecated: true
  # '/pet/{petId}':
  #   get:
  #     tags:
  #       - pet
  #     summary: Find pet by ID
  #     description: Returns a single pet
  #     operationId: getPetById
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #     security:
  #       - api_key: []
  #   post:
  #     tags:
  #       - pet
  #     summary: Updates a pet in the store with form data
  #     operationId: updatePetWithForm
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet that needs to be updated
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '405':
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #     requestBody:
  #       content:
  #         application/x-www-form-urlencoded:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 description: Updated name of the pet
  #                 type: string
  #               status:
  #                 description: Updated status of the pet
  #                 type: string
  #   delete:
  #     tags:
  #       - pet
  #     summary: Deletes a pet
  #     operationId: deletePet
  #     parameters:
  #       - name: api_key
  #         in: header
  #         required: false
  #         schema:
  #           type: string
  #       - name: petId
  #         in: path
  #         description: Pet id to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  # '/pet/{petId}/uploadImage':
  #   post:
  #     tags:
  #       - pet
  #     summary: uploads an image
  #     operationId: uploadFile
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ApiResponse'
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #     requestBody:
  #       content:
  #         multipart/form-data:
  #           schema:
  #             type: object
  #             properties:
  #               additionalMetadata:
  #                 description: Additional data to pass to server
  #                 type: string
  #               file:
  #                 description: file to upload
  #                 type: string
  #                 format: binary
  # /store/inventory:
  #   get:
  #     tags:
  #       - store
  #     summary: Returns pet inventories by status
  #     description: Returns a map of status codes to quantities
  #     operationId: getInventory
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               additionalProperties:
  #                 type: integer
  #                 format: int32
  #     security:
  #       - api_key: []
  # /store/order:
  #   post:
  #     tags:
  #       - store
  #     summary: Place an order for a pet
  #     operationId: placeOrder
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #       '400':
  #         description: Invalid Order
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Order'
  #       description: order placed for purchasing the pet
  #       required: true
  # '/store/order/{orderId}':
  #   get:
  #     tags:
  #       - store
  #     summary: Find purchase order by ID
  #     description: >-
  #       For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
  #       values will generated exceptions
  #     operationId: getOrderById
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of pet that needs to be fetched
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #           minimum: 1
  #           maximum: 10
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Order not found
  #   delete:
  #     tags:
  #       - store
  #     summary: Delete purchase order by ID
  #     description: >-
  #       For valid response try integer IDs with positive integer value.\ \
  #       Negative or non-integer values will generate API errors
  #     operationId: deleteOrder
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of the order that needs to be deleted
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #           minimum: 1
  #     responses:
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Order not found
  # /user:
  #   post:
  #     tags:
  #       - user
  #     summary: Create user
  #     description: This can only be done by the logged in user.
  #     operationId: createUser
  #     responses:
  #       default:
  #         description: successful operation
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #       description: Created user object
  #       required: true
  # /user/createWithArray:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     operationId: createUsersWithArrayInput
  #     responses:
  #       default:
  #         description: successful operation
  #     requestBody:
  #       $ref: '#/components/requestBodies/UserArray'
  # /user/createWithList:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     operationId: createUsersWithListInput
  #     responses:
  #       default:
  #         description: successful operation
  #     requestBody:
  #       $ref: '#/components/requestBodies/UserArray'
  # /user/login:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     operationId: loginUser
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: true
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #           application/xml:
  #             schema:
  #               type: string
  #       '400':
  #         description: Invalid username/password supplied
  # /user/logout:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     operationId: logoutUser
  #     responses:
  #       default:
  #         description: successful operation
  # '/user/{username}':
  #   get:
  #     tags:
  #       - user
  #     summary: Get user by user name
  #     operationId: getUserByName
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be fetched. Use user1 for testing.
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
  #   put:
  #     tags:
  #       - user
  #     summary: Updated user
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: name that need to be updated
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '400':
  #         description: Invalid user supplied
  #       '404':
  #         description: User not found
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #       description: Updated user object
  #       required: true
  #   delete:
  #     tags:
  #       - user
  #     summary: Delete user
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - description: Production
    url: 'https://flyflapper.com/api/v1'
  - description: QA
    url: 'https://qa.flyflapper.com/api/v1'
  - description: Swagger HUB
    url: 'http://virtserver.swaggerhub.com/guisoares2011/Flapper/1.0.0'
components:

  requestBodies:
  
    FlightQuote:
      description:
        "Request para fazer uma cotação e obter voos compartilhados do sistema."
      content:
        application/json:
          schema:
            type: object
            properties:
              quotation:
                type: object
                properties:
                  segments: 
                    type: array
                    items: 
                      $ref: "#/components/schemas/FlightQuoteSegment"
              
    # UserArray:
    #   content:
    #     application/json:
    #       schema:
    #         type: array
    #         items:
    #           $ref: '#/components/schemas/User'
    #   description: List of user object
    #   required: true
    # Pet:
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/Pet'
    #     application/xml:
    #       schema:
    #         $ref: '#/components/schemas/Pet'
    #   description: Pet object that needs to be added to the store
    #   required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
      
  responses:
    BadRequest:
      description: "400 - Bad Request"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/BaseResponse"
    OK:
      description: "200 - OK"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/BaseResponse"


  schemas:
   
          
    FlightQuoteSegment: 
      type: object
      properties:
        origin:
          $ref: '#/components/schemas/FlightQuoteSegmentSpot'
        destination:
          $ref: '#/components/schemas/FlightQuoteSegmentSpot'
        departureDatetime: 
          type: string
          format: date-time
        aircraftId:
          type: integer
          format: int32
          default: null
        
    FlightQuoteSegmentSpot:
      type: object
      oneOf:
        - type: object
          properties:
            spotId:
              description: ID of Spot
              type: integer
              format: int32
        
        - type: object
          properties:
            cityId:
              type: integer
              format: int32
              
    FlightQuoteResponseRouteItem:
      type: object
      properties:
        departureDatetime: 
          type: string
          format: date-time
        

            
    BaseResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            status:
              type: integer
              format: int32
              description: "Error code"
            message:
              type: string
              description: "Error message"
