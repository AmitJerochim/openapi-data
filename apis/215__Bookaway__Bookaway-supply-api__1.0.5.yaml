openapi: 3.0.0
servers:
  - url: https://api-sandbox.bookaway.com/supply/v1
  - url: https://api.bookaway.com/supply/v1
info:
  version: "1.0.5"
  title: 'Bookaway supply api'
  description: 'Bookaway supply api  - every request should have a bearer authorization header as "bearer xxxxxxxxxxxxxx"'
  # put the contact info for your development or API team
  # contact:
  #   email: omer@bookaway.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: partners
  description: partners of bookaway

paths:
  /routes:
    get:
      tags:
      - partners
      summary: "Get all routes"
      operationId: getRoutes
      description: |
        Get all routes (by stations)
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema:
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      - in: query
        name: offset
        description: "number of records to skip for pagination"
        schema: 
          type: integer
          format: int32
          minimum: 0
        required: false
      - in: query
        name: limit
        description: "maximum number of records to return"
        schema: 
          type: integer
          format: int32
          minimum: 0
          maximum: 500
        required: false
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/route'
        500:
          description: bad input parameter
  /routes.json:
    get:
      tags:
      - partners
      summary: "Get all routes"
      operationId: getRoutesJson
      description: |
        Get all routes (by stations)
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: false
        schema: 
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/route'
        500:
          description: bad input parameter
  /trips:
    get:
      tags:
      - partners
      summary: "get all trips for specific date"
      operationId: getTrips
      description: |
        Get all trips for specific date
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema: 
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      - in: query
        name: froms
        description: "list of departure station ids, seperete by comma (,)"
        schema:
          type: string
          example: "5c4dcf7249b5323becaf5fb5,5c4718134b19f6a3353d2fe7,58a9dbc55da64000063e3632"
      - in: query
        name: tos
        description: "list of arrival station ids, seperete by comma (,)"
        schema: 
          type: string
          example: "5c4dcf7249b5323becaf5fb5,5c4718134b19f6a3353d2fe7,58a9dbc55da64000063e3631"
      - in: query
        name: fromcity
        description: "id of city - to include all station of this city, cannot be combined with 'froms' field"
        schema:
          type: string
          example: "58ade15cd8638d00070c04b2"
      - in: query
        name: tocity
        description: "id of city - to include all station of this city, cannot be combined with 'tos' field"
        schema:
          type: string
          example: "58bbf19db7afab000551dfc6"
      - in: query
        name: date
        description: 'the required date in format: "YYYY-MM-DD"'
        schema: 
          type: string
        required: true
        example: '2020-02-24'
      - in: query
        name: passengers
        description: 'amount of passengers [1..15]'
        required: false
        schema:
          type: number
          minimum: 1
          maximum: 15
          example: 1
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/trip'
        500:
          description: bad input parameter
    post:
      tags:
      - partners
      summary: "get all trips for specific date"
      operationId: getTripsPost
      description: |
        Get all trips for specific date same as get endPoint to support longer strings of \'froms\' & \'tos\'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - date
              properties:
                froms:
                  description: "list of departure station ids, seperete by comma (,)"
                  type: string
                  example: "5c4dcf7249b5323becaf5fb5,5c4718134b19f6a3353d2fe7,58a9dbc55da64000063e3632"
                tos:
                  description: "list of arrival station ids, seperete by comma (,)"
                  type: string
                  example: "5c4dcf7249b5323becaf5fb5,5c4718134b19f6a3353d2fe7,58a9dbc55da64000063e3631"
                fromcity:
                  description: "id of city - to include all station of this city, cannot be combined with 'froms' field"
                  type: string
                  example: "58ade15cd8638d00070c04b2"
                tocity:
                  description: "id of city - to include all station of this city, cannot be combined with 'tos' field"
                  type: string
                  example: "58bbf19db7afab000551dfc6"
                date:
                  type: string
                  description: 'the required date in format: "YYYY-MM-DD"'
                  example: '2020-02-24'
                passengers:
                  type: number
                  minimum: 1
                  maximum: 15
                  example: 1
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema: 
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/trip'
        500:
          description: bad input parameter
  /stations:
    get:
      tags:
      - partners
      summary: "get all stations"
      operationId: getStations
      description: Get all stations
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema:
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      - in: query
        name: offset
        description: "number of records to skip for pagination"
        schema:
          type: integer
          format: int32
          minimum: 0
        required: false
      - in: query
        name: limit
        description: "maximum number of records to return"
        schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 50
        required: false
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/station'
        500:
          description: bad input parameter
  /stations.json:
    get:
      tags:
      - partners
      summary: "get all stations"
      operationId: getStationsJson
      description: Get all stations
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema:
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/station'
        500:
          description: bad input parameter
  /stations/{stationId}:
    get:
      tags:
      - partners
      summary: "get specific station"
      operationId: getStation
      description: Get specific station
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema:
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      - in: path
        name: stationId
        description: "StationId"
        schema:
          type: string
          example: "5c4dcc446145c4be85adc967"
        required: true
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/station"
        500:
          description: bad input parameter
  /cities:
    get:
      tags:
      - partners
      summary: "get all cities"
      operationId: getCities
      description: Get all cities
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema:
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      - in: query
        name: offset
        description: "number of records to skip for pagination"
        schema:
          type: integer
          format: int32
          minimum: 0
        required: false
      - in: query
        name: limit
        description: "maximum number of records to return"
        schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 50
        required: false
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/city'
        500:
          description: bad input parameter
  /cities.json:
    get:
      tags:
      - partners
      summary: "get all cities"
      operationId: getCitiesJson
      description: Get all cities
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema:
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      - in: query
        name: offset
        description: "number of records to skip for pagination"
        schema:
          type: integer
          format: int32
          minimum: 0
        required: false
      - in: query
        name: limit
        description: "maximum number of records to return"
        schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 50
        required: false
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/city'
        500:
          description: bad input parameter
  /cities/{cityId}:
    get:
      tags:
      - partners
      summary: "get specific city"
      operationId: getCity
      description: Get specific city
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema:
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      - in: path
        name: cityId
        description: "cityId"
        schema:
          type: string
          example: "5a8576d9b90e800008a1088e"
        required: true
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/city"
        500:
          description: bad input parameter
  /operators:
    get:
      tags:
      - partners
      summary: "get all operators"
      operationId: getOperators
      description: Get all operators
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema:
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      - in: query
        name: offset
        description: "number of records to skip for pagination"
        schema:
          type: integer
          format: int32
          minimum: 0
        required: false
      - in: query
        name: limit
        description: "maximum number of records to return"
        schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 50
        required: false
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/operator'
        500:
          description: bad input parameter
  /operators.json:
    get:
      tags:
      - partners
      summary: "get all opertros"
      operationId: getOperatorsJson
      description: Get all operators
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema:
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      - in: query
        name: offset
        description: "number of records to skip for pagination"
        schema:
          type: integer
          format: int32
          minimum: 0
        required: false
      - in: query
        name: limit
        description: "maximum number of records to return"
        schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 50
        required: false
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/operator'
        500:
          description: bad input parameter
  /operators/{operatorId}:
    get:
      tags:
      - partners
      summary: "get specific operator"
      operationId: getOperator
      description: Get specific operator
      parameters:
      - name: authorization
        in: header
        description: an authorization header as "bearer xxxxxxxxxxxxxx"
        required: true
        schema:
          type: string
          example: "bearer xxxxxxxxxxxxxx"
      - in: path
        name: operatorId
        description: "operatorId"
        schema:
          type: string
          example: "58adcbe447784600065bbbf0"
        required: true
      responses:
        200:
          description: "search results matching criteria"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/operator"
        500:
          description: bad input parameter
        
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    route:
      type: object
      required:
      - name
      - from
      - to
      properties:
        from:
          type: string
          format: uuid
          example: "5c4dcc446145c4be85adc967"
        name:
          type: string
          example: "Sapa to Hanoi"
        to:
          type: string
          format: uuid
          example: "5c4dcf7249b5323becaf5fb5"
    trip:
      type: object
      required:
      - id
      - arrival
      - departure
      - from
      - to
      properties:
        id:
          type: string
          format: uuid
          example: "1577d122-6a8d-478b-91c4-6d2fa52a8eef2019-11-3006:00AM"
        arrival:
          type: object
          example: {
             "date": "2019-11-30T06:00:00+07:00",
              "timezone": "Asia/Pontianak"
          }
        departure:
          type: object
          example: {
              "date": "2019-11-30T06:00:00+07:00",
              "timezone": "Asia/Pontianak"
          }
        from:
          type: string
          format: uuid
          example: "5c4dcf7249b5323becaf5fb5"
        to:
          type: string
          format: uuid
          example: "5c4dcc446145c4be85adc967"
        price:
          type: number
          example: 6.53
        currency:
          type: string
          example: "USD"
        supplier:
          type: string
          example: "Roong Reuang Coach"
        vehicleType:
          type: string
          example: "bus"
        classType:
          type: string
          example: "Economy"
        productPage:
          type: string
          format: link
          example: "https://www.bookaway.com/routes/thailand/bangkok-to-pattaya/economy-bus-by-roong-reuang-coach-1?passengers=1&departuredate=2020-03-30&departuretime=0900AM&utm_source=bookaway&utm_medium=api"
        checkoutPage:
          type: string
          format: link
          example: "https://www.bookaway.com/routes/checkout/details?departuredate=2020-03-30&passengers=1&departuretime=0900AM&productname=economy-bus-by-roong-reuang-coach-1&fromslug=bangkok&toslug=pattaya&utm_source=bookaway&utm_medium=api"
        productId:
          type: string
          format: uuid
          example: "5a64b159aaa0ed0008a817f5"
        amenities:
          type: array
          items:
            type: string
            example: ["A/C", "Wifi"]
        
    station:
      type: object
      required:
      - stationId
      - name
      - address
      - city
      - latitude
      - longitude
      properties:
        stationId: 
          type: string
          format: uuid
          example: "5a8576d9b90e800008a1088e"
        name:
          type: string
          example: "Saladan Pier, Koh Lanta"
        address:
          type: string
          example: "Saladan Pier, Tambon Sala Dan, Amphoe Ko Lanta, Chang Wat Krabi 81150, Thailand"
        latitude:
          type: number
          example: 7.6483295
        longituide:
          type: number
          example: 99.0408542
        city:
          type: object
          example: {
            "cityId": "5a85722fb90e800008a1084a",
              "country": "Thailand",
              "name": "Koh Lanta",
              "timezone": "Asia/Bangkok"
          }
    city:
      type: object
      required:
      - id
      - name
      - slug
      - country
      properties:
        id: 
          type: string
          format: uuid
          example: "5a8576d9b90e800008a1088e"
        name:
          type: string
          example: "Bangkok"
        slug:
          type: string
          example: "bangkok"
        country:
          type: string
          example: "Thailand"
        timezone:
          type: string
          example: "Asia/Bangkok" 
    operator:
      type: object
      required:
      - id
      - name
      - logo
      - country
      properties:
        id: 
          type: string
          format: uuid
          example: "58adcbe447784600065bbbf0"
        name:
          type: string
          example: "Good Morning Sapa"
        logo:
          type: string
          example: "http://images.bookaway.com/media/files/5bf518eb82a145630a7a12ac.jpeg?width=250"
        country:
          type: string
          example: "Vietnam"
security: 
  - bearerAuth: []
