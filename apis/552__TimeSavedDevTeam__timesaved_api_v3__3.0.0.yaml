openapi: 3.0.2
info:
  title: TimeSaved API V3
  version: 3.0.0
  description: |-
    **Introduction**

    This describes the resources that make up the TimeSaved REST API. It uses standard resource-based URLs and all requests return JSON.

    **Authentication**

    Authentication is done using API keys. To perform an authenticated request to the TimeSaved API, include your API key in your request header.

    **Overview**

    There are three main user types: agency users, clients, and workers.

    In addition, you can read and update information about jobs, companies, and conversations. These are described in more detail below.

    **Agency Customization**

    Agencies can customize their configuration of TimeSaved. These are the options that can be customized:

    Job Categories and Subcategories. Languages. Skills. Experience Parameters. Onboarding Questions. 

    **Worker Profiles**

    Workers’ profiles are split into separate requests to reduce the need to request or send unnecessary data. The profile sections are 

    Worker Profile - The worker identifying information and address. Worker Language. Worker Skills. Worker JobCategories. Worker Availability. Worker Unavailable Dates. Worker Document.

    Note: WorkersList is not part of a worker’s profile. It is a list of workers that can be created by the agency.

    **Jobs**

    Jobs are the central element connecting the TimeSaved workflow. All jobs have a client, location, wage, and number of workers requested. A job can have workers who are invited, confirmed or removed. It can also have job questions, description, and other supplementary information.

    **Pagination**

    Requests that return many results will default to a limit of 10 results. You can request the next page by passing a `page` param with your request. You can specify the limit by passing a `limit` param. You can also use the `sort` param with specified field names to return the results sorted by that field in ascending or descending order.                                                                               
basePath: /
paths:
  /auth/users:
    post:
      description: User Sign In
      tags:
        - Authentication
      requestBody:
        description: User email and password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/signInResponseUser'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/auth/users/{id}':
    put:
      description: User Sign Out
      security:
        - Authorization: []
      tags:
        - Authentication
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
      requestBody:
        description: User tokens
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/200Empty'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/users/{id}/refreshTokens/{refreshToken}':
    get:
      description: Acquire new access token
      tags:
        - Authentication
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
        - in: path
          name: refreshToken
          schema:
            type: string
          description: refreshToken
          required: true
      responses:
        '200':
          $ref: '#/components/responses/refreshTokenResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /agencies:
    post:
      description: Create the new agency profile
      security:
        - Authorization: []
      tags:
        - Agency
      requestBody:
        description: Agency object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agency'
      responses:
        '200':
          $ref: '#/components/responses/agencyReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}':
    put:
      description: Update the agency's profile
      security:
        - Authorization: []
      tags:
        - Agency
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
      requestBody:
        description: Agency object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agency'
      responses:
        '200':
          $ref: '#/components/responses/agencyReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Read the agency's profile
      security:
        - Authorization: []
      tags:
        - Agency
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/agencyReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the agency's profile
      security:
        - Authorization: []
      tags:
        - Agency
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/agencyReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/search':
    get:
      description: 'Search query for clients, jobs and workers with an agency'
      security:
        - Authorization: []
      tags:
        - Agency
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: id
          schema:
            type: string
          description: The name query
          required: true
        - $ref: '#/components/parameters/limitQuery'
      responses:
        '200':
          $ref: '#/components/responses/agencySearchReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/hours':
    get:
      description: Export all worker hours within the time range
      security:
        - Authorization: []
      tags:
        - Agency
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: Start date for time range
          required: true
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: End date for time range
          required: true
      responses:
        '200':
          $ref: '#/components/responses/agencyHoursReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/workerHours':
    put:
      description: Export specific worker hours within the time range
      security:
        - Authorization: []
      tags:
        - Agency
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: Start date for time range
          required: true
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: End date for time range
          required: true
      requestBody:
        description: Workers Id array
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workers:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          $ref: '#/components/responses/agencyHoursReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/job/{jobId}/jobHours':
    put:
      description: Export hours by job within the time range
      security:
        - Authorization: []
      tags:
        - Agency
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: path
          name: jobId
          schema:
            type: string
          description: Job Id
          required: true
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: Start date for time range
          required: true
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: End date for time range
          required: true
      responses:
        '200':
          $ref: '#/components/responses/agencyHoursReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/job/{jobId}/jobHoursWorkers':
    put:
      description: Export hours by job and specific workers within the time range
      security:
        - Authorization: []
      tags:
        - Agency
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: path
          name: jobId
          schema:
            type: string
          description: Job Id
          required: true
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: Start date for time range
          required: true
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: End date for time range
          required: true
      requestBody:
        description: Workers Id array
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workers:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          $ref: '#/components/responses/agencyHoursReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /conversations/group:
    post:
      description: Create a new group conversation.
      security:
        - Authorization: []
      tags:
        - Conversation
      requestBody:
        description: Conversation object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupConversation'
      responses:
        '200':
          $ref: '#/components/responses/conversationReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /conversations/chat:
    post:
      description: Create a new chat conversation.
      security:
        - Authorization: []
      tags:
        - Conversation
      requestBody:
        description: Conversation object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatConversation'
      responses:
        '200':
          $ref: '#/components/responses/conversationReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{agencyId}/conversations/{id}':
    put:
      description: Update a conversation profile.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Conversatin Id
          required: true
        - in: path
          name: agencyId
          schema:
            type: string
          description: Agency Id
          required: true
      requestBody:
        description: Conversation object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageType:
                  type: string
                  enum:
                    - CHAT
                    - EMAIL
                    - SMS
                status:
                  type: number
                blastMessages:
                  type: object
                  properties:
                    name:
                      type: string
                    phoneNumber:
                      type: string
                    email:
                      type: string
                    autoReplyMessage:
                      type: string
                    enabled:
                      type: number
                mute:
                  type: number
                block:
                  type: number
                isArchived:
                  type: number
      responses:
        '200':
          $ref: '#/components/responses/conversationReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete a conversation.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Conversation Id
          required: true
        - in: path
          name: agencyId
          schema:
            type: string
          description: Agency Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/conversationReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/conversations/{id}/group':
    get:
      description: Fetch the group conversation by recruiter.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Conversation Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/conversationThreadReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/conversations/{id}/threads/{threadId}':
    get:
      description: Fetch the group conversation thread.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Conversation Id
          required: true
        - in: path
          name: threadId
          schema:
            type: string
          description: Thread Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/conversationThreadReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/conversations/{id}/chat':
    get:
      description: Fetch the chat conversation.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Conversation Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/conversationThreadReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/conversations':
    get:
      description: Fetch all the conversations associated with an agency.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: isArchived
          schema:
            type: number
          description: '1 - is archived, 0 - is unarchived'
      responses:
        '200':
          $ref: '#/components/responses/conversationsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/users/{id}/conversations/group':
    get:
      description: Fetch all the group conversations associated with a user.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
        - in: query
          name: isArchived
          schema:
            type: integer
          description: '1 = Archived, 0 = unarchived'
        - in: query
          name: unread
          schema:
            type: string
          description: unread conversations (type unread)
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - $ref: '#/components/parameters/nameQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: >-
            The sort parameter - one of name, -name, createdBy, -createdBy,
            date, -date, lastActive, -lastActive
      responses:
        '200':
          $ref: '#/components/responses/conversationsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/users/{id}/conversations/chat':
    get:
      description: Fetch all the chat conversations associated with a user.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
        - in: query
          name: conversation
          schema:
            type: string
          description: Conversation Id that need be left out
          required: true
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: 'The sort parameter - one of unread, -unread, lastActive, -lastActive'
      responses:
        '200':
          $ref: '#/components/responses/conversationsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/conversations':
    get:
      description: Fetch all the conversations associated with a worker.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
      responses:
        '200':
          $ref: '#/components/responses/conversationsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/unreadMessages':
    get:
      description: Fetch the number of unread messages associated with a worker.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/unreadMessagesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/conversations/{id}/users':
    put:
      description: Add or remove users in a blast conversation
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Conversation Id
          required: true
        - in: query
          name: action
          schema:
            type: string
          description: Add or Remove
          required: true
      requestBody:
        description: Workers
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          $ref: '#/components/responses/conversationReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/conversations/{id}/workers':
    put:
      description: Add or remove workers in a blast conversation
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Conversation Id
          required: true
        - in: query
          name: action
          schema:
            type: string
          description: Add or Remove
          required: true
      requestBody:
        description: Workers
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workers:
                  type: array
                  items:
                    type: string
                    format: uuid
                workersLists:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          $ref: '#/components/responses/conversationReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/users/{id}/workerMessages':
    get:
      description: Fetch all the recent messages of worker for dashboard
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/users/{id}/workers/{workerId}/conversations':
    get:
      description: Fetch the chat conversation between a recruiter and a worker.
      security:
        - Authorization: []
      tags:
        - Conversation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
        - in: path
          name: workerId
          schema:
            type: string
          description: Worker Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/conversationThreadReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /experienceParams:
    post:
      description: Create a new experience parameter in agency.
      security:
        - Authorization: []
      tags:
        - Experience Parameter
      requestBody:
        description: ExperienceParam object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperienceParam'
      responses:
        '200':
          $ref: '#/components/responses/experienceParamReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/experienceParams/{id}':
    put:
      description: Update an experience parameter in agency.
      security:
        - Authorization: []
      tags:
        - Experience Parameter
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ExperienceParam Id
          required: true
      requestBody:
        description: ExperienceParam object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperienceParam'
      responses:
        '200':
          $ref: '#/components/responses/experienceParamReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Read the experience parameter in agency.
      security:
        - Authorization: []
      tags:
        - Experience Parameter
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ExperienceParam Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/experienceParamReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete an experience parameter in agency.
      security:
        - Authorization: []
      tags:
        - Experience Parameter
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ExperienceParam Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/experienceParamReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/experienceParams':
    get:
      description: Read all the experience paramters in agency.
      security:
        - Authorization: []
      tags:
        - Experience Parameter
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: isPublished
          schema:
            type: number
          description: '1 - is published, 0 - is unpublished'
      responses:
        '200':
          $ref: '#/components/responses/experienceParamsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /jobCategories:
    post:
      description: Create a new job category in agency.
      security:
        - Authorization: []
      tags:
        - Job Category
      requestBody:
        description: JobCategory object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCategory'
      responses:
        '200':
          $ref: '#/components/responses/jobCategoryReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/jobCategories/{id}':
    put:
      description: Update the job category in agency.
      security:
        - Authorization: []
      tags:
        - Job Category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: JobCategory Id
          required: true
      requestBody:
        description: JobCategory object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCategory'
      responses:
        '200':
          $ref: '#/components/responses/jobCategoryReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Read the job category in agency.
      security:
        - Authorization: []
      tags:
        - Job Category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: JobCategory Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/jobCategoryReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the job category in agency.
      security:
        - Authorization: []
      tags:
        - Job Category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: JobCategory Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/jobCategoryReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/jobCategories':
    get:
      description: Read all the job categories in agency.
      security:
        - Authorization: []
      tags:
        - Job Category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: isPublished
          schema:
            type: number
          description: '1 - is published, 0 - is unpublished'
      responses:
        '200':
          $ref: '#/components/responses/jobCategoriesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /skills:
    post:
      description: Create a new skill in agency.
      security:
        - Authorization: []
      tags:
        - Skill
      requestBody:
        description: Skill object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '200':
          $ref: '#/components/responses/skillReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/skills/{id}':
    put:
      description: Update a skill in agency.
      security:
        - Authorization: []
      tags:
        - Skill
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Skill Id
          required: true
      requestBody:
        description: Skill object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '200':
          $ref: '#/components/responses/skillReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Read the skill in agency.
      security:
        - Authorization: []
      tags:
        - Skill
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Skill Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/skillReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete a skill in agency.
      security:
        - Authorization: []
      tags:
        - Skill
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Skill Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/skillReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/skills':
    get:
      description: Read all the skills in agency.
      security:
        - Authorization: []
      tags:
        - Skill
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: isPublished
          schema:
            type: number
          description: '1 - is published, 0 - is unpublished'
      responses:
        '200':
          $ref: '#/components/responses/skillsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /onboardQuestions:
    post:
      description: Create a new onboarding question in agency.
      security:
        - Authorization: []
      tags:
        - Onboarding Question
      requestBody:
        description: OnboardQuestion object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardQuestion'
      responses:
        '200':
          $ref: '#/components/responses/onboardQuestionReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/onboardQuestions/{id}':
    put:
      description: Update an onboarding question in agency.
      security:
        - Authorization: []
      tags:
        - Onboarding Question
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: OnboardQuestion Id
          required: true
      requestBody:
        description: OnboardQuestion object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardQuestion'
      responses:
        '200':
          $ref: '#/components/responses/onboardQuestionReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Read the onboarding question in agency.
      security:
        - Authorization: []
      tags:
        - Onboarding Question
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: OnboardQuestion Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/onboardQuestionReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the onboarding question in agency.
      security:
        - Authorization: []
      tags:
        - Onboarding Question
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: OnboardQuestion Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/onboardQuestionReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/onboardQuestions':
    get:
      description: Read all the onboarding questions in agency.
      security:
        - Authorization: []
      tags:
        - Onboarding Question
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: isPublished
          schema:
            type: number
          description: '1 - is published, 0 - is unpublished'
      responses:
        '200':
          $ref: '#/components/responses/onboardQuestionsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /languages:
    post:
      description: Create a new language in agency.
      security:
        - Authorization: []
      tags:
        - Language
      requestBody:
        description: Language object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Language'
      responses:
        '200':
          $ref: '#/components/responses/languageReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/languages/{id}':
    put:
      description: Update a language in agency.
      security:
        - Authorization: []
      tags:
        - Language
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Language Id
          required: true
      requestBody:
        description: Language object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Language'
      responses:
        '200':
          $ref: '#/components/responses/languageReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Read the language in agency.
      security:
        - Authorization: []
      tags:
        - Language
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Language Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/languageReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the language in agency.
      security:
        - Authorization: []
      tags:
        - Language
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Language Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/languageReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/languages':
    get:
      description: Read all the languages in agency.
      security:
        - Authorization: []
      tags:
        - Language
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: isPublished
          schema:
            type: number
          description: '1 - is published, 0 - is unpublished'
      responses:
        '200':
          $ref: '#/components/responses/languagesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /users:
    post:
      description: Create the new agency recruiter
      security:
        - Authorization: []
      tags:
        - User
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/responses/agencyUserReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/users/{id}':
    put:
      description: Update the agency recruiter's profile
      security:
        - Authorization: []
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/responses/agencyUserReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Read the agency recruiter's profile
      security:
        - Authorization: []
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/agencyUserReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the agency recruiter
      security:
        - Authorization: []
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/agencyUserReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/recruiters':
    get:
      description: Read all agency recruiters' profile
      security:
        - Authorization: []
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - $ref: '#/components/parameters/nameQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: >-
            The sort parameter, sorting by name (name or -name), branch (branch
            or -branch), number (number or -number), email (email or -email)
        - in: query
          name: blockTest
          schema:
            type: string
          description: Does not return any test users if set
      responses:
        '200':
          $ref: '#/components/responses/agencyUsersReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /clients:
    post:
      description: Create the new client
      security:
        - Authorization: []
      tags:
        - Client
      requestBody:
        description: Client object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '200':
          $ref: '#/components/responses/clientReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/clients/{id}':
    put:
      description: Update the client's profile
      security:
        - Authorization: []
      tags:
        - Client
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Client Id
          required: true
      requestBody:
        description: Client object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '200':
          $ref: '#/components/responses/clientReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Read the client's profile
      security:
        - Authorization: []
      tags:
        - Client
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Client Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/clientReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the client
      security:
        - Authorization: []
      tags:
        - Client
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Client Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/clientReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/clients':
    get:
      description: Read all clients' profile in the agency
      security:
        - Authorization: []
      tags:
        - Client
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: branch
          schema:
            type: string
          description: branch Id
        - in: query
          name: isArchived
          schema:
            type: integer
          description: '1 = Archived, 0 = unarchived'
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - $ref: '#/components/parameters/nameQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: >-
            The sort parameter - one of name, -name, address, -address, contact,
            -contact
      responses:
        '200':
          $ref: '#/components/responses/clientsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /jobs:
    post:
      description: Create a new job
      security:
        - Authorization: []
      tags:
        - Job
      requestBody:
        description: Job object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '200':
          $ref: '#/components/responses/jobReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/jobs/{id}':
    get:
      description: Read the job's profile
      security:
        - Authorization: []
      tags:
        - Job
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Job Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/jobReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{agencyId}/jobs/{id}':
    put:
      description: Update the job's profile
      security:
        - Authorization: []
      tags:
        - Job
      parameters:
        - in: path
          name: agencyId
          schema:
            type: string
          description: Agency Id
          required: true
        - in: path
          name: id
          schema:
            type: string
          description: Job Id
          required: true
      requestBody:
        description: Job object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '200':
          $ref: '#/components/responses/jobReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the job
      security:
        - Authorization: []
      tags:
        - Job
      parameters:
        - in: path
          name: agencyId
          schema:
            type: string
          description: Agency Id
          required: true
        - in: path
          name: id
          schema:
            type: string
          description: Job Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/jobReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/jobs/{id}/workers':
    put:
      description: 'Invite, confirm, or remove workers in a job'
      security:
        - Authorization: []
      tags:
        - Job
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Job Id
          required: true
        - in: query
          name: action
          schema:
            type: string
          description: 'One of invite, confirm, remove'
          required: true
        - in: query
          name: removeReason
          schema:
            type: number
          description: >-
            Required if removing workers, 0 -> Resigned, 1 -> Unqualified, 2 ->
            Job Ended, 3 -> Schedule Conflict
      requestBody:
        description: Job object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workers:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          $ref: '#/components/responses/jobReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: 'Read invited, confirmed, or removed workers in a job'
      security:
        - Authorization: []
      tags:
        - Job
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Job Id
          required: true
        - in: query
          name: type
          schema:
            type: string
          description: 'One of Invited, Confirmed, Removed'
          required: true
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      job:
                        type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                          agency:
                            type: string
                            format: uuid
                          invitedWorkers:
                            type: array
                            items:
                              $ref: '#/components/schemas/Worker'
                          confirmedWorkers:
                            type: array
                            items:
                              $ref: '#/components/schemas/Worker'
                          removedWorkers:
                            type: array
                            items:
                              $ref: '#/components/schemas/Worker'
                  count:
                    type: integer
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/jobs':
    get:
      description: Read all jobs' profile in the agency
      security:
        - Authorization: []
      tags:
        - Job
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: branch
          schema:
            type: string
          description: branch Id
        - in: query
          name: status
          schema:
            type: number
          description: 0 = active or 1 = completed
        - in: query
          name: isArchived
          schema:
            type: number
          description: 0 = unarchived or 1 = archived
        - in: query
          name: isFilled
          schema:
            type: number
          description: >-
            Dashboard Filter -> for jobs that are filled (1 -> filled, 0 ->
            unfilled)
        - in: query
          name: presetTime
          schema:
            type: number
          description: >-
            Dashboard Filter -> queries for ongoing jobs during one of the
            default dates (0 -> today, 1 -> this week, 2 -> next week)
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: >-
            Dashboard Filter -> queries for ongoing jobs during the custom date
            (end date is not required)
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: >-
            Dashboard Filter -> queries for ongoing jobs during the custom date
            (start date is required)
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - $ref: '#/components/parameters/nameQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: >-
            The sort parameter; one of (name or -name), (client or -client),
            (leadRecruiter or -leadRecruiter), (date or -date), (createdAt or
            -createdAt), (roles or -roles)
      responses:
        '200':
          $ref: '#/components/responses/jobsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/clients/{id}/jobs':
    get:
      description: Read all client's jobs
      security:
        - Authorization: []
      tags:
        - Job
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Client Id
          required: true
        - $ref: '#/components/parameters/limitQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: >-
            The sort parameter - one of name, -name, location, -location, date,
            -date, roles, -roles
      responses:
        '200':
          $ref: '#/components/responses/jobsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/recruiters/{id}/jobs':
    get:
      description: Read all recruiter's assigned jobs
      security:
        - Authorization: []
      tags:
        - Job
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Recruiter Id
          required: true
        - in: query
          name: isFilled
          schema:
            type: number
          description: >-
            Dashboard Filter -> for jobs that are filled (1 -> filled, 0 ->
            unfilled)
        - in: query
          name: presetTime
          schema:
            type: number
          description: >-
            Dashboard Filter -> queries for ongoing jobs during one of the
            default dates (0 -> today, 1 -> this week, 2 -> next week)
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: >-
            Dashboard Filter -> queries for ongoing jobs during the custom date
            (end date is not required)
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: >-
            Dashboard Filter -> queries for ongoing jobs during the custom date
            (start date is required)
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - $ref: '#/components/parameters/nameQuery'
      responses:
        '200':
          $ref: '#/components/responses/jobsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/jobs':
    get:
      description: Read all worker's jobs
      security:
        - Authorization: []
      tags:
        - Job
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
        - in: query
          name: status
          schema:
            type: string
          description: 'One of invited, open, closed'
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - $ref: '#/components/parameters/nameQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: >-
            The sort parameter - one of name, -name, address, -address, contact,
            -contact
      responses:
        '200':
          $ref: '#/components/responses/jobsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{agencyId}/jobActivities/{id}':
    get:
      description: Read the job activity
      security:
        - Authorization: []
      tags:
        - Job
      parameters:
        - in: path
          name: agencyId
          schema:
            type: string
          description: Agency Id
          required: true
        - in: path
          name: id
          schema:
            type: string
          description: Job Activity Id
          required: true
        - in: query
          name: endJob
          schema:
            type: string
          description: type endJob
        - in: query
          name: today
          schema:
            type: string
          description: type today
      responses:
        '200':
          $ref: '#/components/responses/jobActivityReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /workers:
    post:
      description: Create the agency worker's profile in Web
      security:
        - Authorization: []
      tags:
        - Worker
      requestBody:
        description: Worker object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Worker'
      responses:
        '200':
          $ref: '#/components/responses/agencyWorkerReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{agencyId}/workers':
    get:
      description: >-
        Read all workers' profile in the agency. If the endpoint is being used
        for the inviting workers to a job, the 'Job Invite Filters' must be
        used, this will filter out workers that are in jobs that conflict with
        the current job's shift. For this filter, you must input the exact same
        shift times from the job that you are inviting from.
      security:
        - Authorization: []
      tags:
        - Worker
      parameters:
        - in: path
          name: agencyId
          schema:
            type: string
          description: agency Id
          required: true
        - in: query
          name: appInstalled
          schema:
            type: integer
          description: '1 = worker has installed app, 0 = worker has not installed app'
        - in: query
          name: verified
          schema:
            type: integer
          description: '1 = worker is verified, 0 = worker is not verified'
        - in: query
          name: jobCategories
          schema:
            type: array
            items:
              type: string
          description: Array of jobCategory Object IDs
        - in: query
          name: subJobCategories
          schema:
            type: array
            items:
              type: string
          description: Array of subJobCategory Object IDs
        - in: query
          name: skills
          schema:
            type: array
            items:
              type: string
          description: Array of skill Object IDs
        - in: query
          name: rating
          schema:
            type: array
            items:
              type: integer
          description: The worker's total rating
        - in: query
          name: shiftRepeatDays
          schema:
            type: object
            properties:
              sunday:
                type: number
              monday:
                type: number
              tuesday:
                type: number
              wednesday:
                type: number
              thursday:
                type: number
              friday:
                type: number
              saturday:
                type: number
          style: deepObject
          explode: true
          description: >-
            Job Invite Filter -> Object of selected days (1 = selected, 0 =
            unselected). Only insert the days that you are querying for.
        - in: query
          name: branch
          schema:
            type: string
          description: branch Id
        - in: query
          name: status
          schema:
            type: array
            items:
              type: integer
          description: Worker Status
        - in: query
          name: shiftStartHour
          schema:
            type: integer
          description: Job Invite Filter -> starting hour shift time
        - in: query
          name: shiftEndHour
          schema:
            type: integer
          description: Job Invite Filter -> ending hour shift time
        - in: query
          name: repeatDays
          schema:
            type: object
            properties:
              sunday:
                type: number
              monday:
                type: number
              tuesday:
                type: number
              wednesday:
                type: number
              thursday:
                type: number
              friday:
                type: number
              saturday:
                type: number
          style: deepObject
          explode: true
          description: >-
            Availability Filter -> Object of selected days (1 = selected, 0 =
            unselected). Only insert the days that you are querying for.
        - in: query
          name: startHour
          schema:
            type: integer
          description: Availability Filter -> starting hour available time
        - in: query
          name: endHour
          schema:
            type: integer
          description: Availability Filter -> ending hour available time
        - in: query
          name: presetDays
          schema:
            type: number
          description: >-
            Last Active Filter -> The preset dates worker is last active from; 0
            = 7 days, 1 = 14 days, 2 = 30 days
        - in: query
          name: customStartDate
          schema:
            type: string
            format: date-time
          description: >-
            Last Active Filter -> start date for picking custom date (format is
            a date)
        - in: query
          name: customEndDate
          schema:
            type: string
            format: date-time
          description: >-
            Last Active Filter -> end date for picking custom date (format is a
            date)
        - in: query
          name: shadowAccount
          schema:
            type: integer
          description: '0 - valid accounts, 1 - shadow accounts'
        - in: query
          name: currentlyConfirmed
          schema:
            type: integer
          description: '0 - not confirmed to jobs, 1 - confirmed to jobs'
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - $ref: '#/components/parameters/nameQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: >-
            The sort parameter, sorting by first name (name or -name), rating
            (rating or -rating), hours (hours or -hours), activity (lastActive
            or -lastActive), verified worker (verified or -verified)
        - in: query
          name: selectAll
          schema:
            type: string
          description: type selectAll
        - in: query
          name: email
          schema:
            type: string
          description: the email of the worker
      responses:
        '200':
          $ref: '#/components/responses/agencyWorkers'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/workerProfile':
    get:
      description: Get worker's profile
      security:
        - Authorization: []
      tags:
        - Worker Profile
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/workerProfileReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    put:
      description: Update a worker's profile
      security:
        - Authorization: []
      tags:
        - Worker Profile
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: Profile Update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workerProfile'
      responses:
        '200':
          $ref: '#/components/responses/workerProfileReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/languages':
    post:
      description: Add a language to worker
      security:
        - Authorization: []
      tags:
        - Worker Language
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: Added Language
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workerLanguage'
      responses:
        '200':
          $ref: '#/components/responses/workerLanguagesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Get worker's languages
      security:
        - Authorization: []
      tags:
        - Worker Language
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/workerLanguagesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    put:
      description: Update a workers language
      security:
        - Authorization: []
      tags:
        - Worker Language
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: Language Update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workerLanguage'
      responses:
        '200':
          $ref: '#/components/responses/workerLanguagesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/languages/{languageId}':
    delete:
      description: Delete the language of a worker
      security:
        - Authorization: []
      tags:
        - Worker Language
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
        - in: path
          name: languageId
          schema:
            type: string
          description: 'ID of the language document, not the ID of element in array'
          required: true
      responses:
        '200':
          $ref: '#/components/responses/workerLanguagesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/skills':
    post:
      description: Add a skill to worker
      security:
        - Authorization: []
      tags:
        - Worker Skills
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: New Skill
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workerSkill'
      responses:
        '200':
          $ref: '#/components/responses/workerSkillsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Get worker's skills
      security:
        - Authorization: []
      tags:
        - Worker Skills
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/workerSkillsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    put:
      description: Update a worker's skill
      security:
        - Authorization: []
      tags:
        - Worker Skills
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: Skill Update
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    _id:
                      type: string
                      format: uuid
                - $ref: '#/components/schemas/workerSkill'
      responses:
        '200':
          $ref: '#/components/responses/workerSkillsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/skills/{skillId}':
    delete:
      description: Delete the skill of a worker
      security:
        - Authorization: []
      tags:
        - Worker Skills
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
        - in: path
          name: skillId
          schema:
            type: string
          description: 'ID of the skill document, not the ID of element in array'
          required: true
      responses:
        '200':
          $ref: '#/components/responses/workerSkillsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/jobCategories':
    post:
      description: Add a JobCategory to worker
      security:
        - Authorization: []
      tags:
        - Worker JobCategories
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: New JobCategory
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workerJobCategory'
      responses:
        '200':
          $ref: '#/components/responses/workerJobCategoryReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Get worker's JobCategories
      security:
        - Authorization: []
      tags:
        - Worker JobCategories
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/workerJobCategoryReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    put:
      description: Update a worker's JobCategory
      security:
        - Authorization: []
      tags:
        - Worker JobCategories
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: JobCategory Update
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    _id:
                      type: string
                      format: uuid
                - $ref: '#/components/schemas/workerJobCategory'
      responses:
        '200':
          $ref: '#/components/responses/workerJobCategoryReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/jobCategories/{jobCategoryId}':
    delete:
      description: Delete the JobCategory of a worker
      security:
        - Authorization: []
      tags:
        - Worker JobCategories
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
        - in: path
          name: jobCategoryId
          schema:
            type: string
          description: 'ID of the JobCategory document, not the ID of element in array'
          required: true
      responses:
        '200':
          $ref: '#/components/responses/workerJobCategoryReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/availability':
    post:
      description: Add an availability to worker
      security:
        - Authorization: []
      tags:
        - Worker Availability
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: New Availability
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workerAvailability'
      responses:
        '200':
          $ref: '#/components/responses/workerAvailabilityReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Get worker's availability
      security:
        - Authorization: []
      tags:
        - Worker Availability
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/workerAvailabilityReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    put:
      description: Update a worker's availability
      security:
        - Authorization: []
      tags:
        - Worker Availability
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: Availability Update
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    _id:
                      type: string
                      format: uuid
                - $ref: '#/components/schemas/workerAvailability'
      responses:
        '200':
          $ref: '#/components/responses/workerAvailabilityReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/availability/{dateId}':
    delete:
      description: Delete the availability of a worker
      security:
        - Authorization: []
      tags:
        - Worker Availability
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
        - in: path
          name: dateId
          schema:
            type: string
          description: Date Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/workerAvailabilityReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/unavailableDates':
    post:
      description: Add unavailable dates to worker
      security:
        - Authorization: []
      tags:
        - Worker Unavailable Dates
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: New Availability
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
      responses:
        '200':
          $ref: '#/components/responses/unavailableDatesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: Get worker's unavailable dates
      security:
        - Authorization: []
      tags:
        - Worker Unavailable Dates
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/unavailableDatesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    put:
      description: Update a worker's unavailable dates
      security:
        - Authorization: []
      tags:
        - Worker Unavailable Dates
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        description: Availability Update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  format: uuid
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
      responses:
        '200':
          $ref: '#/components/responses/unavailableDatesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/unavailableDates/{dateId}':
    delete:
      description: Delete the unavailable date of a worker
      security:
        - Authorization: []
      tags:
        - Worker Unavailable Dates
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
        - in: path
          name: dateId
          schema:
            type: string
          description: Date Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/unavailableDatesReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/documents':
    put:
      description: Upload a worker document
      security:
        - Authorization: []
      tags:
        - Worker Document
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
        - in: query
          name: description
          schema:
            type: string
          description: Document description
        - in: query
          name: skill
          schema:
            type: string
          description: Skill Id
      requestBody:
        description: Document file
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          $ref: '#/components/responses/documentResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the uploaded file
      security:
        - Authorization: []
      tags:
        - Worker Document
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
        - in: query
          name: documents
          schema:
            type: array
            items:
              type: string
          description: Array of worker document IDs
          required: true
      responses:
        '200':
          $ref: '#/components/responses/200Empty'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /workersList:
    post:
      description: Create the new workersList.
      security:
        - Authorization: []
      tags:
        - WorkersList
      requestBody:
        description: WorkersList object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkersList'
      responses:
        '200':
          $ref: '#/components/responses/workersListReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workersList/{id}':
    put:
      description: Update the WorkersList.
      security:
        - Authorization: []
      tags:
        - WorkersList
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: WorkersList Id
          required: true
      requestBody:
        description: WorkersList object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkersList'
      responses:
        '200':
          $ref: '#/components/responses/workersListReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    get:
      description: read WorkersList
      security:
        - Authorization: []
      tags:
        - WorkersList
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: WorkersList Id
          required: true
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: 'The sort parameter - one of name, -name, activity, -activity'
      responses:
        '200':
          $ref: '#/components/responses/workersListOneReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete an WorkersList
      security:
        - Authorization: []
      tags:
        - WorkersList
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: WorkersList Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/workersListReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workersList/{id}/workers':
    put:
      description: Update the workers in WorkersList.
      security:
        - Authorization: []
      tags:
        - WorkersList
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: WorkersList Id
          required: true
        - in: query
          name: action
          schema:
            type: string
          description: Add or Delete
          required: true
      requestBody:
        description: Workers array
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workers:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          $ref: '#/components/responses/workersListReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/workersList':
    get:
      description: Fetch all the experience paramters associated with an agency.
      security:
        - Authorization: []
      tags:
        - WorkersList
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
        - in: query
          name: isArchived
          schema:
            type: number
          description: '1 - is archived, 0 - is not archived'
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - $ref: '#/components/parameters/nameQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: 'The sort parameter - one of name, -name, date, -date'
      responses:
        '200':
          $ref: '#/components/responses/workersListsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  /reviews:
    post:
      description: Create a new review.
      security:
        - Authorization: []
      tags:
        - Review
      requestBody:
        description: Review object
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Review'
      responses:
        '200':
          $ref: '#/components/responses/reviewReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/reviews':
    get:
      description: Read all reviews for a worker.
      security:
        - Authorization: []
      tags:
        - Review
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
        - $ref: '#/components/parameters/pageNumberQuery'
        - $ref: '#/components/parameters/limitQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: >-
            The sort parameter - one of rating, -rating, client, -client, date,
            -date, job, -job, recruiter, -recruiter
      responses:
        '200':
          $ref: '#/components/responses/reviewsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/clients/{id}/reviews':
    get:
      description: Read all reviews for a client.
      security:
        - Authorization: []
      tags:
        - Review
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Client Id
          required: true
        - $ref: '#/components/parameters/limitQuery'
        - in: query
          name: sort
          schema:
            type: string
          description: >-
            The sort parameter - one of rating, -rating, worker, -worker, date,
            -date, job, -job
      responses:
        '200':
          $ref: '#/components/responses/reviewsReturn'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '409':
          $ref: '#/components/responses/409Conflict'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/users/{id}/images':
    put:
      description: Upload the user profile image
      security:
        - Authorization: []
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
      requestBody:
        $ref: '#/components/requestBodies/userImage'
      responses:
        '200':
          $ref: '#/components/responses/imageResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the uploaded user profile image
      security:
        - Authorization: []
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/200Empty'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/agencies/{id}/images':
    put:
      description: Upload the agency profile image
      security:
        - Authorization: []
      tags:
        - Agency
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
      requestBody:
        $ref: '#/components/requestBodies/userImage'
      responses:
        '200':
          $ref: '#/components/responses/imageResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the uploaded agency profile image
      security:
        - Authorization: []
      tags:
        - Agency
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Agency Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/200Empty'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/clients/{id}/images':
    put:
      description: Upload the client profile image
      security:
        - Authorization: []
      tags:
        - Client
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Client Id
          required: true
      requestBody:
        $ref: '#/components/requestBodies/userImage'
      responses:
        '200':
          $ref: '#/components/responses/imageResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the uploaded client profile image
      security:
        - Authorization: []
      tags:
        - Client
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Client Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/200Empty'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
  '/workers/{id}/images':
    put:
      description: Upload the worker profile image
      security:
        - Authorization: []
      tags:
        - Worker
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      requestBody:
        $ref: '#/components/requestBodies/userImage'
      responses:
        '200':
          $ref: '#/components/responses/imageResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
    delete:
      description: Delete the uploaded worker profile image
      security:
        - Authorization: []
      tags:
        - Worker
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: Worker Id
          required: true
      responses:
        '200':
          $ref: '#/components/responses/200Empty'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '412':
          $ref: '#/components/responses/412PreconditionFailed'
        '500':
          $ref: '#/components/responses/500InternalError'
components:
  schemas:
    error:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
    Agency:
      type: object
      required:
        - name
        - email
        - branches
        - license
        - measurementUnit
      properties:
        name:
          type: string
        email:
          type: string
        supportEmail:
          type: string
          format: email
        displayEmails:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
                format: email
        about:
          type: string
          description: About
        branches:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              address:
                type: string
              city:
                type: string
              postalCode:
                type: string
              province:
                type: string
              country:
                type: string
              contacts:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    workNumber:
                      type: number
                    mobileNumber:
                      type: number
                    email:
                      type: string
                      format: email
              socialNetworks:
                type: array
                items:
                  type: object
                  properties:
                    SNS:
                      type: integer
                      description: '0 -> facebook, 1 -> twitter, 2 -> linkedIn'
                    link:
                      type: string
        phones:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              code:
                type: integer
                default: 1
              number:
                type: integer
        license:
          type: object
          properties:
            trial:
              type: integer
              description: '1 -> on trial, 0 -> premium'
            expiryDate:
              type: object
              properties:
                year:
                  type: integer
                month:
                  type: integer
                day:
                  type: integer
        operatingHours:
          type: object
          properties:
            startTime:
              type: object
              properties:
                hour:
                  type: integer
                minute:
                  type: integer
            endTime:
              type: object
              properties:
                hour:
                  type: integer
                minute:
                  type: integer
        provisionedNumbers:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
                default: 1
              number:
                type: integer
        website:
          type: string
        ATS:
          type: integer
          default: 0
          description: '0 -> nothing, 1 -> StaffTrak, 2 -> Avionte'
        measurementUnit:
          type: integer
          description: '1 -> km, 0 -> miles'
        uniqueCode:
          type: string
        avatarURL:
          type: string
        googleMapsKey:
          type: string
        twilioServiceId:
          type: string
        mobileVersion:
          type: object
          properties:
            android:
              type: string
            ios:
              type: string
        appLink:
          type: object
          properties:
            android:
              type: string
            ios:
              type: string
        isArchived:
          type: integer
          default: 0
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: integer
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
        integration:
          type: object
          properties:
            type:
              type: string
            password:
              type: string
            reportEmail:
              type: string
            codes:
              type: array
              items:
                type: object
                properties:
                  externalId:
                    type: string
                  id:
                    type: string
                  idSub:
                    type: string
                  type:
                    type: string
        emailInviteTemplateId:
          type: string
    Branch:
      type: object
      required:
        - name
        - address
        - city
        - postalCode
        - contacts
        - agency
      properties:
        agency:
          type: string
          format: uuid
        name:
          type: string
        externalId:
          type: number
        address:
          type: string
        city:
          type: string
        postalCode:
          type: string
        province:
          type: string
        country:
          type: string
        fullAddress:
          type: string
        unit:
          type: string
        about:
          type: string
          description: About
        manager:
          type: string
          format: uuid
        users:
          type: array
          items:
            type: string
            format: uuid
        contacts:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              workNumber:
                type: number
              mobileNumber:
                type: number
              email:
                type: string
                format: email
              socialNetworks:
                type: array
                items:
                  type: object
                  properties:
                    SNS:
                      type: integer
                      description: '0 -> facebook, 1 -> twitter, 2 -> linkedIn'
                    link:
                      type: string
        operatingHours:
          type: object
          properties:
            startTime:
              type: object
              properties:
                hour:
                  type: integer
                minute:
                  type: integer
            endTime:
              type: object
              properties:
                hour:
                  type: integer
                minute:
                  type: integer
        provisionedNumbers:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
                default: 1
              number:
                type: integer
        lat:
          type: number
        lng:
          type: number
        isArchived:
          type: integer
          default: 0
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: integer
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
    User:
      type: object
      required:
        - agency
        - email
        - firstName
        - lastName
        - phones
        - accessLevel
      properties:
        agency:
          type: string
          format: uuid
        email:
          type: string
          format: email
        displayEmails:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
                format: email
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        branch:
          type: string
          format: uuid
        branches:
          type: array
          items:
            type: string
            format: uuid
        notes:
          type: string
        role:
          type: string
        online:
          type: string
        status:
          type: integer
          format: int32
          default: 1
        birthdate:
          type: string
          format: date
        gender:
          type: integer
          format: int32
          default: 0
          description: '0 -> Not Specified, 1 -> Female, 2 -> Male'
        address:
          type: object
          properties:
            line1:
              type: string
            line2:
              type: string
            city:
              type: string
            province:
              type: string
            postalCode:
              type: string
            country:
              type: string
            unit:
              type: string
            fullAddress:
              type: string
        phones:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              code:
                type: integer
                default: 1
              number:
                type: integer
        emergencyContact:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phoneCode:
              type: integer
              default: 1
            phoneNumber:
              type: integer
        accessLevel:
          type: integer
          default: 1
          description: '1 -> Recruiter, 2 -> Manager, 3 -> Super Admin'
        activity:
          type: object
          properties:
            lastLogin:
              type: string
              format: date
            lastActive:
              type: string
              format: date
            lastLogout:
              type: string
              format: date
        avatarURL:
          type: string
        socialNetworks:
          type: array
          items:
            type: object
            properties:
              SNS:
                type: number
                description: '0 -> facebook, 1 -> twitter, 2 -> linkedIn'
              link:
                type: string
        device:
          type: object
          properties:
            deviceType:
              type: number
              description: '0 -> iOS, 1 -> Android'
            fcmToken:
              type: string
              description: used for push notifications
        isArchived:
          type: number
          default: 0
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
    ClientUser:
      type: object
      required:
        - agency
        - client
        - email
        - firstName
        - lastName
        - phones
        - accessLevel
      properties:
        agency:
          type: string
          format: uuid
        client:
          type: string
          format: uuid
        workers:
          type: array
          items:
            type: string
            format: uuid
        email:
          type: string
          format: email
        displayEmails:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
                format: email
        firstName:
          type: string
        lastName:
          type: string
        branch:
          type: string
          format: uuid
        branches:
          type: array
          items:
            type: string
            format: uuid
        notes:
          type: string
        role:
          type: string
        online:
          type: string
        status:
          type: integer
          format: int32
          default: 1
        birthdate:
          type: string
          format: date
        gender:
          type: integer
          format: int32
          default: 0
          description: '0 -> Not Specified, 1 -> Female, 2 -> Male'
        address:
          type: object
          properties:
            line1:
              type: string
            line2:
              type: string
            city:
              type: string
            province:
              type: string
            postalCode:
              type: string
            country:
              type: string
            unit:
              type: string
            fullAddress:
              type: string
        phones:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              code:
                type: integer
                default: 1
              number:
                type: integer
        emergencyContact:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phoneCode:
              type: integer
              default: 1
            phoneNumber:
              type: integer
        accessLevel:
          type: integer
          description: 0 -> Client User
        activity:
          type: object
          properties:
            lastLogin:
              type: string
              format: date
            lastActive:
              type: string
              format: date
            lastLogout:
              type: string
              format: date
        avatarURL:
          type: string
        socialNetworks:
          type: array
          items:
            type: object
            properties:
              SNS:
                type: number
                description: '0 -> facebook, 1 -> twitter, 2 -> linkedIn'
              link:
                type: string
        devices:
          type: array
          items:
            type: string
            format: uuid
        isArchived:
          type: number
          default: 0
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
    Job:
      type: object
      required:
        - name
        - shift
        - location
        - startDate
        - wage
        - workersRequested
        - agency
        - client
      properties:
        name:
          type: string
        description:
          type: string
        externalId:
          type: string
        dateImport:
          type: string
          format: date-time
        shift:
          type: object
          properties:
            name:
              type: string
            notes:
              type: string
            repeatDays:
              type: object
              properties:
                sunday:
                  type: number
                  default: 0
                monday:
                  type: number
                  default: 1
                tuesday:
                  type: number
                  default: 1
                wednesday:
                  type: number
                  default: 1
                thursday:
                  type: number
                  default: 1
                friday:
                  type: number
                  default: 1
                saturday:
                  type: number
                  default: 0
            startTime:
              type: object
              properties:
                hour:
                  type: integer
                  format: int32
                minute:
                  type: integer
                  format: int32
            endTime:
              type: object
              properties:
                hour:
                  type: number
                minute:
                  type: number
        timezone:
          type: string
          default: America/Toronto
        location:
          type: object
          properties:
            branchId:
              type: string
            name:
              type: string
            address:
              type: string
            city:
              type: string
            postalCode:
              type: string
            province:
              type: string
            country:
              type: string
            externalId:
              type: string
            coordinates:
              type: object
              properties:
                lat:
                  type: number
                lng:
                  type: number
        wage:
          type: number
          default: 0
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        client:
          type: string
          format: uuid
        clientConfidential:
          type: number
        locationConfidential:
          type: number
        createdBy:
          type: string
          format: uuid
        uniqueCode:
          type: string
        agency:
          type: string
          format: uuid
        branch:
          type: string
          format: uuid
        recruiters:
          type: array
          items:
            type: string
            format: uuid
        leadRecruiter:
          type: string
          format: uuid
        workersRequested:
          type: number
        workersFilled:
          type: number
        hours:
          type: number
        status:
          type: integer
          format: int32
          default: 0
          description: '0 -> active, 1-> completed'
        state:
          type: number
          default: 1
          description: '0 -> Job Form, 1 -> Invite Workers, 2 -> Finished'
        isArchived:
          type: number
          default: 0
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
        filledAt:
          type: string
          format: date-time
        jobCategories:
          type: array
          items:
            type: object
            properties:
              jobCategory:
                type: string
                format: uuid
              subJobCategories:
                type: array
                items:
                  type: object
                  properties:
                    subJobId:
                      type: string
                      format: uuid
                    name:
                      type: string
        jobQuestions:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
              attachment:
                type: number
                default: 0
                description: '1 -> has attachment, 0 -> doesn''t have attachment'
              responseType:
                type: number
                default: 0
                description: '0 -> text, 1 -> yes or no, 2 -> multiple choice'
              selections:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                description: >-
                  only used if responseType = 2, Mongo will auto generate
                  ObjectID
              isPublished:
                type: number
                default: 1
        invitedWorkers:
          type: array
          items:
            type: object
            properties:
              worker:
                type: string
                format: uuid
              externalId:
                type: string
              status:
                type: number
                default: 0
                description: '0 -> Invited, 1 -> Accepted, 2 -> Declined'
              seen:
                type: number
                default: 0
                description: '0 -> unseen, 1 -> seen'
        confirmedWorkers:
          type: array
          items:
            type: object
            properties:
              worker:
                type: string
                format: uuid
              externalId:
                type: string
              status:
                type: number
                default: 0
                description: '3 -> Confirmed, 4 -> Active'
        removedWorkers:
          type: array
          items:
            type: object
            properties:
              worker:
                type: string
                format: uuid
              externalId:
                type: string
              status:
                type: number
                default: 0
                description: 5 -> Closed
              reason:
                type: number
                description: >-
                  0 -> Resigned, 1 -> Unqualified, 2 -> Job Ended, 3 -> Schedule
                  Conflict
        contacts:
          type: array
          items:
            type: object
            properties:
              contactId:
                type: string
              name:
                type: string
              email:
                type: string
              number:
                type: number
              ext:
                type: number
    JobActivity:
      type: object
      required:
        - worker.workerId
        - worker.firstName
        - worker.lastName
      properties:
        agency:
          type: string
          format: uuid
        job:
          type: string
          format: uuid
        worker:
          type: string
          format: uuid
        review:
          type: string
          format: uuid
        hoursWorked:
          type: number
        activities:
          type: array
          items:
            $ref: '#/components/schemas/activity'
        jobAnswers:
          type: array
          items:
            $ref: '#/components/schemas/jobAnswer'
    activity:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: >-
            0 -> DECLINED, 1 -> ACCEPTED, 2 -> COMMUTE, 3 -> ARRIVED, 4 ->
            STARTEDJOB, 5 -> STARTEDBREAK, 6-> ENDBREAK, 7-> ENDEDJOB, 8 ->
            CLOSEJOB
        date:
          type: string
          format: date-time
        comment:
          type: string
        adjustedDate:
          type: string
          format: date-time
        adjustmentComment:
          type: string
        location:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
    jobAnswer:
      type: object
      properties:
        questionId:
          type: string
          format: uuid
        question:
          type: string
        attachment:
          type: string
          description: will be the selection name if response type was 2
        answer:
          type: string
        selectionId:
          type: string
          description: only used if job question was of response type 2
        file:
          type: string
    Client:
      type: object
      required:
        - name
        - agency
        - branches
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        information:
          type: object
          properties:
            content:
              type: string
            included:
              type: number
              description: '1 -> included, 0 -> not included'
        cultureDetails:
          type: object
          properties:
            content:
              type: string
            included:
              type: number
              description: '1 -> included, 0 -> not included'
        avatarURL:
          type: string
        externalId:
          type: string
        rating:
          type: number
          default: -1
        uniqueCode:
          type: string
        branches:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              address:
                type: string
              city:
                type: string
              postalCode:
                type: string
              province:
                type: string
              country:
                type: string
              unit:
                type: string
              fullAddress:
                type: string
              externalId:
                type: string
              contacts:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    number:
                      type: number
                    ext:
                      type: string
        availabilities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              notes:
                type: string
              externalId:
                type: string
              repeatDays:
                type: object
                properties:
                  sunday:
                    type: number
                    default: 0
                  monday:
                    type: number
                    default: 1
                  tuesday:
                    type: number
                    default: 1
                  wednesday:
                    type: number
                    default: 1
                  thursday:
                    type: number
                    default: 1
                  friday:
                    type: number
                    default: 1
                  saturday:
                    type: number
                    default: 0
              startTime:
                type: object
                properties:
                  hour:
                    type: number
                  minute:
                    type: number
              endTime:
                type: object
                properties:
                  hour:
                    type: number
                  minute:
                    type: number
        agency:
          type: string
          format: uuid
        branch:
          type: string
          format: uuid
        leadRecruiter:
          type: string
          format: uuid
        users:
          type: array
          items:
            type: string
            format: uuid
        clientPools:
          type: array
          items:
            type: string
            format: uuid
        reviews:
          type: array
          items:
            type: string
            format: uuid
        isArchived:
          type: number
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: number
          description: '0 -> not deleted, 1 -> deleted'
    JobCategory:
      type: object
      required:
        - name
        - agency
      properties:
        name:
          type: string
        agency:
          type: string
          format: uuid
        subJobCategories:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
          description: Mongo will auto generate _id field
        isPublished:
          type: number
          default: 1
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
    Skill:
      type: object
      required:
        - name
        - agency
        - experienceParam
      properties:
        name:
          type: string
        agency:
          type: string
          format: uuid
        experienceParam:
          type: string
          format: uuid
        attachment:
          type: number
          default: 0
          description: '1 has attachment, 0 doesn''t have attachment'
        attachmentDesc:
          type: string
          description: required if attachment = 1
        isPublished:
          type: number
          default: 1
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
        externalId:
          type: string
    OnboardQuestion:
      type: object
      required:
        - name
        - agency
        - responseType
      properties:
        name:
          type: string
        agency:
          type: string
          format: uuid
        attachment:
          type: number
          default: 0
          description: '1 -> has attachment, 0 -> doesn''t have attachment'
        responseType:
          type: number
          default: 0
          description: '0 -> text, 1 -> yes or no, 2 -> multiple choice'
        selections:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
          description: 'only used if responseType = 2, Mongo will auto generate ObjectID'
        isPublished:
          type: number
          default: 1
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
    ExperienceParam:
      type: object
      required:
        - label
        - constants
        - agency
      properties:
        label:
          type: string
        constants:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
          description: Mongo wil auto generate _id field
        agency:
          type: string
          format: uuid
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
    Language:
      type: object
      required:
        - name
        - agency
      properties:
        name:
          type: string
        agency:
          type: string
          format: uuid
        isPublished:
          type: number
          default: 1
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
        externalId:
          type: string
    Worker:
      type: object
      required:
        - agency
        - email
        - firstName
        - lastName
        - phoneNumber
      properties:
        agency:
          type: string
          format: uuid
        branch:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        notes:
          type: string
        availabilityRadius:
          type: number
        measurementUnit:
          type: number
          description: '0 -> miles, 1 -> km'
        uniqueCode:
          type: string
        birthDate:
          type: object
          properties:
            year:
              type: number
            month:
              type: number
            day:
              type: number
        emergencyContactName:
          type: string
        emergencyContactNumber:
          type: number
        rating:
          type: number
          default: -1
        avatarURL:
          type: string
        appInstalled:
          type: number
          description: '0 -> uninstalled, 1 -> installed'
        lastInvited:
          type: string
          format: date
        employeeId:
          type: string
        source:
          type: string
        experience:
          type: string
        about:
          type: string
        hoursWorked:
          type: number
        externalId:
          type: string
        verified:
          type: number
          description: '0 -> unverified, 1 -> verified'
        status:
          type: number
          default: null
        transportation:
          type: string
        SIN:
          type: string
        generatedPassword:
          type: number
          default: 1
          description: '1 -> password auto generated, 0 -> password manually created'
        address:
          type: object
          properties:
            line1:
              type: string
            line2:
              type: string
            city:
              type: string
            province:
              type: string
            postalCode:
              type: string
            country:
              type: string
            unit:
              type: string
            fullAddress:
              type: string
            lat:
              type: number
            lng:
              type: number
        phoneCode:
          type: number
          default: 1
        phoneNumber:
          type: number
        homePhoneCode:
          type: number
          default: 1
        homePhoneNumber:
          type: number
        unavailableDates:
          type: array
          items:
            type: object
            properties:
              startDate:
                type: string
                format: date
              endDate:
                type: string
                format: date
        activity:
          type: object
          properties:
            lastLogin:
              type: string
              format: date
            lastActive:
              type: string
              format: date
            lastLogout:
              type: string
              format: date
        skills:
          type: array
          items:
            properties:
              skill:
                type: string
                format: uuid
              experienceParam:
                type: object
                properties:
                  paramId:
                    type: string
                    format: uuid
                    description: Must be the ID of the entire experience parameter group
                  constantId:
                    type: string
                    format: uuid
                    description: Must be ID from constants array
                  name:
                    type: string
                    description: >-
                      Must be the name of the constant, not the label of the
                      experienceParam
        jobCategories:
          type: array
          items:
            properties:
              jobCategory:
                type: string
                format: uuid
              subJobCategories:
                type: array
                items:
                  type: object
                  properties:
                    subJobId:
                      type: string
                      format: uuid
                    name:
                      type: string
        languages:
          type: array
          items:
            properties:
              language:
                type: string
                format: uuid
              experienceParam:
                type: number
                description: '0 -> beginner, 1 -> intermediate, 2 -> advanced, 3 -> expert'
        device:
          type: object
          properties:
            deviceType:
              type: number
              description: '0 -> iOS, 1 -> Android'
            fcmToken:
              type: string
              description: used for push notifications
        availabilities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              repeatDays:
                $ref: '#/components/schemas/repeatDays'
              startTime:
                type: object
                properties:
                  hour:
                    type: number
                  minute:
                    type: number
              endTime:
                type: object
                properties:
                  hour:
                    type: number
                  minute:
                    type: number
        attachments:
          type: array
          items:
            type: string
            format: uuid
        conversations:
          type: array
          items:
            type: string
            format: uuid
        reviews:
          type: array
          items:
            type: string
            format: uuid
        phone:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              code:
                type: number
                default: 1
              number:
                type: number
        onboardAnswers:
          type: array
          items:
            type: object
            properties:
              onboardQuestion:
                type: string
                format: uuid
              question:
                type: string
              attachment:
                type: string
              answer:
                type: string
                description: will be the selection name if response type was 2
              selectionId:
                type: string
                description: only used if onboarding question was of response type 2
              file:
                type: string
        onboardingStep:
          type: number
          default: 0
          description: >-
            0 -> Account created, 1 -> Step 2 = Address, 2 -> Step 3 =
            Availability, 3 -> Step 4 = Skills, 4 -> Step 5 = Questions, 5 ->
            Onboarding Complete
        workerSince:
          type: string
          format: date
          description: >-
            will be set to the date specified by worker import, otherwise, will
            be equivalent to 'createdAt'
        shadowAccount:
          type: number
          default: 0
          description: '0 -> not a shadow account, 1 -> shadow account'
        newWorker:
          type: number
          default: 0
          description: '0 -> not a new Worker, 1 -> new Worker'
        currentlyConfirmed:
          type: number
          default: 0
          description: '0 -> not a confirmed Worker, 1 -> a confirmed Worker'
        isArchived:
          type: number
          default: 0
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
    repeatDays:
      type: object
      properties:
        sunday:
          type: number
          default: 0
        monday:
          type: number
          default: 1
        tuesday:
          type: number
          default: 1
        wednesday:
          type: number
          default: 1
        thursday:
          type: number
          default: 1
        friday:
          type: number
          default: 1
        saturday:
          type: number
          default: 0
    Review:
      type: object
      required:
        - rating
        - client
        - worker
        - job
        - agency
        - jobActivity
        - recipient
      properties:
        rating:
          type: number
        comment:
          type: string
        recipient:
          type: string
          enum:
            - WORKER
            - CLIENT
        client:
          type: string
          format: uuid
        agency:
          type: string
          format: uuid
        worker:
          type: string
          format: uuid
        job:
          type: string
          format: uuid
        jobActivity:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
    WorkersList:
      type: object
      properties:
        name:
          type: string
        createdBy:
          type: string
          format: uuid
        agency:
          type: string
          format: uuid
        client:
          type: string
          format: uuid
        users:
          type: array
          items:
            type: string
            format: uuid
        workers:
          type: array
          items:
            type: string
            format: uuid
        isArchived:
          type: number
          default: 0
        isDeleted:
          type: number
          default: 0
        newWorkers:
          type: number
          default: 0
    Conversation:
      type: object
      required:
        - messageType
        - agency
        - createdBy
        - conversationType
      properties:
        messageType:
          type: string
          enum:
            - CHAT
            - EMAIL
            - SMS
        conversationType:
          type: string
          enum:
            - CHAT
            - BLAST
        status:
          type: number
          default: 0
        agency:
          type: string
          format: uuid
        createdBy:
          type: string
          format: uuid
        blastMessages:
          type: object
          properties:
            name:
              type: string
            phoneNumber:
              type: string
            email:
              type: string
            autoReplyMessage:
              type: string
            enabled:
              type: number
        blastUserMsgs:
          type: array
          items:
            type: string
            format: uuid
        blastLastMessage:
          type: string
          format: uuid
        users:
          type: array
          items:
            type: string
            format: uuid
        userThreads:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
                format: uuid
              unread:
                type: number
                default: 0
              lastMessage:
                type: string
                format: uuid
        workers:
          type: array
          items:
            type: string
            format: uuid
        workerThreads:
          type: array
          items:
            type: object
            properties:
              worker:
                type: string
                format: uuid
              unread:
                type: number
                default: 0
              firstReply:
                type: number
                default: 0
              lastMessage:
                type: string
                format: uuid
              workerLastMessage:
                type: string
                format: uuid
              thread:
                type: string
                format: uuid
              replies:
                type: number
        workersLists:
          type: array
          items:
            type: string
            format: uuid
        threads:
          type: array
          items:
            type: string
            format: uuid
        user:
          type: string
          format: uuid
        userThread:
          type: object
          properties:
            user:
              type: string
              format: uuid
            unread:
              type: number
              default: 0
            lastMessage:
              type: string
              format: uuid
        worker:
          type: string
          format: uuid
        workerThread:
          type: object
          properties:
            worker:
              type: string
              format: uuid
            unread:
              type: number
              default: 0
            firstReply:
              type: number
              default: 0
            lastMessage:
              type: string
              format: uuid
            workerLastMessage:
              type: string
              format: uuid
            replies:
              type: number
        chatMsgs:
          type: array
          items:
            type: string
            format: uuid
        uniqueCode:
          type: string
        mute:
          type: number
          default: 0
        block:
          type: number
          default: 0
        isArchived:
          type: number
          default: 0
          description: '0 -> unarchived, 1 -> archived'
        isDeleted:
          type: number
          default: 0
          description: '0 -> not deleted, 1 -> deleted'
    Thread:
      type: object
      properties:
        users:
          type: array
          items:
            type: string
            format: uuid
        worker:
          type: string
          format: uuid
        lastMessage:
          type: string
          format: uuid
        conversation:
          type: string
          format: uuid
        messages:
          type: array
          items:
            type: string
            format: uuid
        replies:
          type: number
          default: 0
    Message:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        worker:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        thread:
          type: string
          format: uuid
        firstName:
          type: string
          description: sender's firstName
        lastName:
          type: string
          description: sender's lastName
        avatarURL:
          type: string
          description: sender's avatarURL
        messageType:
          type: string
        sender:
          type: string
          enum:
            - WORKER
            - USER
    Notification:
      type: object
      properties:
        worker:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        agency:
          type: string
          format: uuid
        client:
          type: string
          format: uuid
        unread:
          type: number
          default: 0
          description: '1 is unread, 0 is read'
        type:
          type: number
          default: 0
          description: >-
            0 - WORKER_PROFILE, 1 - WORKER_JOB_CATEGORY, 2 - WORKER_SKILL, 3 -
            WORKER_LANGUAGE, 4 - WORKER_DOCUMENT, 5 - WORKER_AVAILABILITY, 6 -
            WORKER_UNAVAILABLE_DATE, 7 - WORKER_JOB_ACTIVITY, 8 -
            WORKER_APP_INSTALLED, 9 - WORKER_JOB_INVITED, 10 -
            WORKER_JOB_CONFIRMED, 11 - WORKER_JOB_REMOVED, 12 - JOB_CLOSED
        content:
          type: string
        extra:
          type: string
        conversation:
          type: string
          format: uuid
        message:
          type: string
          format: uuid
        job:
          type: string
          format: uuid
        jobActivity:
          type: string
          format: uuid
    Statistics:
      type: object
      properties:
        agency:
          type: string
          format: uuid
        totalAppDownloads:
          type: number
        weeklyActiveWorkers:
          type: number
          description: Number of active workers in past 7 days
        recentActiveWorkers:
          type: number
          description: Number of active workers in past 24 hours
        totalPositionsFilled:
          type: number
        weeklyPositionsFilled:
          type: number
          description: Number of positions filled in past 7 days
        recentPositionsFilled:
          type: number
          description: NUmber of positions filled in past 24 hours
        avgFillTime:
          type: number
          description: Average time to fill a job (time calculated in days)
        fillRate:
          type: number
          description: Ratio of positions filled to total positions
        startedJobs:
          type: number
          description: Jobs that have started (based off of the job's startDate)
    Token:
      type: object
      required:
        - token
        - type
      properties:
        token:
          type: string
        user:
          type: string
          format: uuid
        worker:
          type: string
          format: uuid
        userType:
          type: string
          enum:
            - WORKER
            - USER
    RefreshToken:
      type: object
      required:
        - token
        - type
      properties:
        token:
          type: string
        user:
          type: string
          format: uuid
        worker:
          type: string
          format: uuid
        userType:
          type: string
          enum:
            - WORKER
            - USER
    Attachment:
      type: object
      properties:
        file:
          type: string
        fileName:
          type: string
        description:
          type: string
        user:
          type: string
          format: uuid
        worker:
          type: string
          format: uuid
        agency:
          type: string
          format: uuid
        client:
          type: string
          format: uuid
        skill:
          type: string
          format: uuid
        onboardQuestion:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - IMAGE
            - DOCUMENT
            - CSV
        isDeleted:
          type: number
    groupConversation:
      type: object
      required:
        - messageType
        - agency
        - createdBy
        - firstMessage
      properties:
        messageType:
          type: string
          enum:
            - CHAT
            - EMAIL
            - SMS
        status:
          type: number
          default: 0
        agency:
          type: string
          format: uuid
        createdBy:
          type: string
          format: uuid
        blastMessages:
          type: object
          properties:
            name:
              type: string
            phoneNumber:
              type: string
            email:
              type: string
            autoReplyMessage:
              type: string
            enabled:
              type: number
        users:
          type: array
          items:
            type: string
            format: uuid
        workers:
          type: array
          items:
            type: string
            format: uuid
        workersLists:
          type: array
          items:
            type: string
            format: uuid
        mute:
          type: number
        block:
          type: number
          default: 0
        firstMessage:
          $ref: '#/components/schemas/Message'
    chatConversation:
      type: object
      required:
        - messageType
        - agency
        - user
        - worker
      properties:
        messageType:
          type: string
        status:
          type: number
          default: 0
        agency:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        worker:
          type: string
          format: uuid
        firstMessage:
          $ref: '#/components/schemas/Message'
    workerHistory:
      type: object
      properties:
        data:
          type: object
          properties:
            agency:
              type: string
              format: uuid
            job:
              type: object
              properties:
                _id:
                  type: string
                  format: uuid
                uniqueCode:
                  type: string
                name:
                  type: string
                client:
                  type: object
                  properties:
                    name:
                      type: string
                    avatarURL:
                      type: string
                location:
                  type: object
                  properties:
                    branchId:
                      type: string
                    name:
                      type: string
                    address:
                      type: string
                    city:
                      type: string
                    postalCode:
                      type: string
                    province:
                      type: string
                    country:
                      type: string
                    loc:
                      type: object
                      properties:
                        coordinates:
                          type: array
                          items:
                            type: number
                shift:
                  type: object
                  properties:
                    name:
                      type: string
                    repeatDays:
                      $ref: '#/components/schemas/repeatDays'
                    startTime:
                      type: object
                      properties:
                        hour:
                          type: integer
                        minute:
                          type: integer
                    endTime:
                      type: object
                      properties:
                        hour:
                          type: number
                        minute:
                          type: number
                wage:
                  type: number
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                description:
                  type: string
            worker:
              type: string
              format: uuid
            review:
              type: object
              properties:
                rating:
                  type: number
            hoursWorked:
              type: number
            activities:
              type: array
              items:
                $ref: '#/components/schemas/activity'
            jobAnswers:
              type: array
              items:
                $ref: '#/components/schemas/activity'
    workerProfile:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: number
        email:
          type: string
          format: email
        birthDate:
          type: object
          properties:
            year:
              type: number
            month:
              type: number
            day:
              type: number
        address:
          type: object
          properties:
            line1:
              type: string
            line2:
              type: string
            city:
              type: string
            province:
              type: string
            postalCode:
              type: string
            country:
              type: string
            unit:
              type: string
            fullAddress:
              type: string
            lat:
              type: number
            lng:
              type: number
        availabilityRadius:
          type: number
        emergencyContactName:
          type: string
        emergencyContactNumber:
          type: number
    workerLanguage:
      type: object
      properties:
        language:
          allOf:
            - type: object
              properties:
                _id:
                  type: string
                  format: uuid
            - $ref: '#/components/schemas/Language'
        experienceParam:
          type: number
    workerSkill:
      type: object
      properties:
        skill:
          allOf:
            - type: object
              properties:
                _id:
                  type: string
                  format: uuid
            - $ref: '#/components/schemas/Skill'
        experienceParam:
          type: object
          properties:
            paramId:
              type: string
              format: uuid
            constantId:
              type: string
              format: uuid
            name:
              type: string
    workerJobCategory:
      type: object
      properties:
        jobCategory:
          $ref: '#/components/schemas/JobCategory'
        subJobCategory:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                format: uuid
              subJobId:
                type: string
                format: uuid
              name:
                type: string
    workerAvailability:
      type: object
      properties:
        repeatDays:
          $ref: '#/components/schemas/repeatDays'
        startTime:
          type: object
          properties:
            hour:
              type: number
            minute:
              type: number
        endTime:
          type: object
          properties:
            hour:
              type: number
            minute:
              type: number
  responses:
    200Empty:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
    401Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    403Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    404NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    409Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    412PreconditionFailed:
      description: Precondition Failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    500InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    signInResponseUser:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: uuid
                      firstName:
                        type: string
                      lastName:
                        type: string
                      email:
                        type: string
                      accessLevel:
                        type: string
                      activity:
                        type: string
                      avatarURL:
                        type: string
                      uniqueCode:
                        type: string
                      isDeleted:
                        type: number
                      agency:
                        type: string
                        format: uuid
                      client:
                        type: string
                        format: uuid
                      createdAt:
                        type: string
                        format: date
                  token:
                    type: string
                  refreshToken:
                    type: string
    signInResponseWorker:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  worker:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: uuid
                      firstName:
                        type: string
                      lastName:
                        type: string
                      email:
                        type: string
                      activity:
                        type: object
                      avatarURL:
                        type: string
                      uniqueCode:
                        type: string
                      agency:
                        type: string
                        format: uuid
                      createdAt:
                        type: string
                        format: date
                  token:
                    type: string
                  refreshToken:
                    type: string
    refreshTokenResponse:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  token:
                    type: string
    agencyReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  agency:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/Agency'
    agenciesReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  agencies:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/Agency'
                  count:
                    type: integer
    agencySearchReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  clients:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        avatarURL:
                          type: string
                  workers:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          format: uuid
                        firstName:
                          type: string
                        lastName:
                          type: string
                        avatarURL:
                          type: string
                  jobs:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          format: uuid
                        name:
                          type: string
    agencyHoursReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  csvURL:
                    type: string
    conversationThreadReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  conversation:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/Conversation'
                  threads:
                    type: array
                    items:
                      type: object
    conversationReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  conversation:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/Conversation'
    conversationsReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/Conversation'
                  count:
                    type: integer
    unreadMessagesReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  unread:
                    type: integer
    experienceParamReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  experienceParam:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/ExperienceParam'
    experienceParamsReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  experienceParams:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/ExperienceParam'
                  count:
                    type: integer
    jobCategoryReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  jobCategory:
                    allOf:
                      - $ref: '#/components/schemas/JobCategory'
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
    jobCategoriesReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  jobCategories:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/JobCategory'
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                  count:
                    type: integer
    skillReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  skill:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/Skill'
    skillsReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  skills:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/Skill'
                  count:
                    type: integer
    onboardQuestionReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  onboardQuestion:
                    allOf:
                      - $ref: '#/components/schemas/OnboardQuestion'
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
    onboardQuestionsReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  onboardQuestions:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/OnboardQuestion'
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                  count:
                    type: integer
    languageReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  language:
                    allOf:
                      - $ref: '#/components/schemas/Language'
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
    languagesReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  languages:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Language'
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                  count:
                    type: integer
    agencyUserReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  user:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/User'
    agencyUsersReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/User'
                  count:
                    type: integer
    agencyAllUsersReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/User'
                  count:
                    type: integer
                  allUsers:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          format: uuid
                        firstName:
                          type: string
                        lastName:
                          type: string
                        avatarURL:
                          type: string
    clientReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  client:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/Client'
    clientsReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  clients:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/Client'
                  count:
                    type: integer
    clientUserReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  clientUser:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/ClientUser'
    clientUsersReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  clientUsers:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/ClientUser'
                  count:
                    type: integer
    jobReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  job:
                    allOf:
                      - $ref: '#/components/schemas/Job'
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
    jobsReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Job'
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                  count:
                    type: integer
    managerJobsReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Job'
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                  count:
                    type: integer
                  totalUnfilledPos:
                    type: integer
                  unFilledJobs:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Job'
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
    jobActivityReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  jobActivity:
                    $ref: '#/components/schemas/JobActivity'
              message:
                type: string
    jobActivityJobPopulatedReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  jobActivity:
                    type: object
                    required:
                      - worker.workerId
                      - worker.firstName
                      - worker.lastName
                    properties:
                      agency:
                        type: string
                        format: uuid
                      job:
                        type: string
                        format: uuid
                      worker:
                        $ref: '#/components/schemas/Worker'
                      review:
                        type: string
                        format: uuid
                      hoursWorked:
                        type: number
                      activities:
                        type: array
                        items:
                          $ref: '#/components/schemas/activity'
                      jobAnswers:
                        type: array
                        items:
                          $ref: '#/components/schemas/jobAnswer'
              message:
                type: string
    workerHistoryReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/workerHistory'
                  count:
                    type: integer
    agencyWorkers:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  workers:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/Worker'
                  count:
                    type: integer
    agencyWorkerReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  worker:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/Worker'
    workerProfileReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  workerProfile:
                    $ref: '#/components/schemas/workerProfile'
    workerLanguagesReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  count:
                    type: number
                  languages:
                    type: array
                    items:
                      $ref: '#/components/schemas/workerLanguage'
    workerSkillsReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  workerSkills:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/workerSkill'
                  count:
                    type: number
    workerJobCategoryReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  count:
                    type: number
                  workerJobCategories:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/workerJobCategory'
    workerAvailabilityReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  availabilities:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/workerAvailability'
                  count:
                    type: integer
    unavailableDatesReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  count:
                    type: number
                  unavailableDates:
                    type: array
                    items:
                      type: object
                      properties:
                        startDate:
                          type: string
                          format: date
                        endDate:
                          type: string
                          format: date
    documentResponse:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  description:
                    type: string
                  fileName:
                    type: string
                  URL:
                    type: string
                  _id:
                    type: string
                    format: uuid
    workersListReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  workersList:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/WorkersList'
    workersListOneReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  workersList:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                      - $ref: '#/components/schemas/WorkersList'
                  workers:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/Worker'
                  count:
                    type: number
    workersListsReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  workersLists:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                        - $ref: '#/components/schemas/WorkersList'
                  count:
                    type: integer
    reviewReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  review:
                    allOf:
                      - $ref: '#/components/schemas/Review'
                      - type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
    reviewsReturn:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Review'
                        - type: object
                          properties:
                            _id:
                              type: string
                              format: uuid
                  count:
                    type: integer
    imageResponse:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  URL:
                    type: string
  parameters:
    limitQuery:
      in: query
      name: limit
      schema:
        type: integer
      description: The limit of items in the page
    pageNumberQuery:
      in: query
      name: page
      schema:
        type: integer
      description: The page number
    nameQuery:
      in: query
      name: name
      schema:
        type: string
      description: The name query
  securitySchemes:
    Authorization:
      type: apiKey
      in: header
      name: authorization
  requestBodies:
    userImage:
      description: Image file
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
tags: []