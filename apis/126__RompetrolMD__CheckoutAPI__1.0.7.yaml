penapi: 3.0.0
servers:
  - description: MOCK endpoint
    url: https://virtserver.swaggerhub.com/RompetrolMD/CheckoutAPI/1.0.7
  - description: STAGE endpoint
    url: http://88.198.159.215:4000
  - description: PRO endpoint
    url: http://ext.rpm.qsystemsglobal.com
info:
  version: "1.0.7"
  title: Rompetrol MD Checkout API (External)
  contact:
    name: Rompetrol MD
    email: officemd@rompetrol.com
  x-logo:
    url: 'http://admin.rpm.qsystemsglobal.com/img/logo.png'
    altText: Rompetrol MD Icon
  description: |
    # Overview
    **Rompetrol MD Checkout API (External)** is a `RESTful web service` (see [Representational state transfer](https://en.wikipedia.org/wiki/Representational_state_transfer), HTTP/REST API definition) for B2B integration of external shopping checkpoints with the **Rompetrol MD Loyalty Platform**.
    
    # OpenAPI specification
    This API is documented in `OpenAPI 3.0.0 format` (see [OpenAPI initiative](https://www.openapis.org/)) and is built using `Swagger` (see [Swagger tools](https://swagger.io/tools/)) and `ReDoc` (see [ReDoc page](https://github.com/Redocly/redoc)) tools.

    # Cross-Origin resource sharing
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
    And that allows cross-domain communication from the browser.
    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.

    # Authorization scheme
    **Checkout API** offers an **API Key** authentication using `Bearer Authentication Scheme` (see [RFC 6750](https://tools.ietf.org/html/rfc6750), bearer tokens to access OAuth 2.0-protected resources).  
    
    Example:
    ```
    GET /invoice/4dd87798-c0e0-41f6-a321-74891afecd57 HTTP/1.1
    Host: 88.198.159.215:4000
    Authorization: Bearer vbIY2wk0k7DY6mOHpmsxVtAm0JUr8URFWx7DfnCk3I2wni4K46TNedSORuParv1y
    ```
    # Usage scenario
    1. **Customer** fills the shopping cart and requests discount showing his loyalty card;
    1. **Cashier** registers shopping cart, calculate net amount and requests discount from **Backoffice**;
    1. **Backoffice**
       1. checks **Customer**â€™s balance (loyalty points),
       1. calculates amount of points to get highest discount,
       1. requests **Customer** to confirm the redeeming;
    1. **Customer** confirms redeeming request;
    1. **Backoffice** provides Cashier with the discount and the remaining amount;
    1. **Customer** pays remaining amount; 
    1. **Cashier** prints out payment receipt for the remaining amount.

    # Sequence diagram
    ![Redeeming loyalty points](https://www.websequencediagrams.com/cgi-bin/cdraw?lz=dGl0bGUgUmVkZWVtaW5nIGxveWFsdHkgcG9pbnRzCnBhcnRpY2lwYW50IENsaWVudAAFDmFzaGllcgAaDUJhY2tvZmZpY2UKACwGLT4AIAc6IENoZWNrb3V0IFNIT1BQSU5HIENBUlQKAEAHAB4LUmVnaXN0ZXIACCFDYWxjdWxhdGUgQU1PVU5UIFRPIFBBWQBICwCBMQU6IFJlcXVlc3QgJACBBBIAEwhESVNDT1VOAHwURW50ZXIAGAkgTU9ERQBREkFzayBMT1lBTFRZIENBUkQAgW4SU2hvdyBCQVJDADIOABYJY2FuAAQbRXh0cmFjdABXBSBOTwCBDhlBV0FJVACCWAVPTkZJUk1BVElPTgCBJQ8AgxwKOiBDcmVhdGUgW1BPU1RdIElOVk9JQ0UKbG9vcACDWQggaW5zdGFudGx5IGNoZWNrcyAocG9sbHMpIGFuACkIIHN0YXRlAEsXaGVjayBbR0UAVQtlbmQKAIQiCgCDHwoAgh8FUEFZTUVOVACBNQ0Kb3B0IEN1c3RvbWVyIGNvbmZpcm1zIHBheW1lbnQAhGQJAIFODFN1Ym1pdAA4FgBvDQCEbgp0dXIAgUkKYXMgUEFJRACCdxVpdACCRCUAhHAQAIUaDSAtAIRqCwCGHRAkAIUzElByaW4AgUUKUkVDRUlQAIUaFXhpAIVFCgCFKAZlbHNlAINGCWNhbmNlbACCMQsAhAIVACAFIFtERUxFVEUAhA8KAIFRPACBBhsAg3gUQ2xvc2UAg3cWAIhLEVBheXMgdy9vAIc9CmVuZAoK&s=magazine)
    
    # Usage visualization
    
    ## Step 1 POS: Set payment amount
    ![](http://admin.rpm.qsystemsglobal.com/docs/ext_checkpoint_api/ux/step2.png)

    ## Step 2 POS: Scan loyalty card
    ![](http://admin.rpm.qsystemsglobal.com/docs/ext_checkpoint_api/ux/step1.png)
    
    ## Step 2 POS: Awaiting confirmation
    ![](http://admin.rpm.qsystemsglobal.com/docs/ext_checkpoint_api/ux/step3.png)
    
    ## Step 3 Customer: Confirm payment
    ![](http://admin.rpm.qsystemsglobal.com/docs/ext_checkpoint_api/ux/step4.png)
    
    ## Step 4 POS: Show payment receipt
    ![](http://admin.rpm.qsystemsglobal.com/docs/ext_checkpoint_api/ux/step5.png)
    
    # How to try it
    You can put hand on the API and perform all the sendboxing and debugging using the [Swagger Application](https://app.swaggerhub.com/apis-docs/RompetrolMD/CheckoutAPI/1.0.7).
    
    Just follow few simple steps:
    1. Switch to [Swagger Application](https://app.swaggerhub.com/apis-docs/RompetrolMD/CheckoutAPI/1.0.7);
    ![](http://admin.rpm.qsystemsglobal.com/docs/ext_checkpoint_api/guide/1_initial_setup.png)
    1. Select the server from the list to interact with. For the very first tryouts it is better to leave default mockup server.
    1. Push **Authorize** button to setup bearer token. For mockup server you can set any value, it will not affect the response.
    1. Scroll down to the method you'd like to try and push **Try it out** button. You'll get **Execution pane**.
    ![](http://admin.rpm.qsystemsglobal.com/docs/ext_checkpoint_api/guide/2_get_result.png)
    1. Push **Execute** button and find result in the **Response body** section.    
tags:
  - name: Checkout API definition
    description: Methods to manage invoice LC for ext integration
paths:
  /invoice:
    post:
      tags:
        - Checkout API definition
      security:
        - bearerAuth: []
      operationId: create_invoice
      description: Create invoice
      summary: Create invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - account
                - amount
                - invoice_id
              properties:
                account:
                  description: |
                    Customer's account number received manily via a bar code printed on a loyalty card.
                  type: string
                  pattern: "^[0-9]{10}$"
                  example: "3126962512"
                amount:
                  description: Net amount of the payment
                  type: number
                  format: double
                  example: 100.0
                invoice_id:
                  description: Self generated invoice ID assigned to the request.
                  type: string
                  format: uuid
                  example: "014d81df-ff4b-4580-9adf-a7379e888caa"
      responses:
        200:
          description: Invoice (aka payment intent) has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
              examples:
                just_created_invoice:
                  value:
                    id: "014d81df-ff4b-4580-9adf-a7379e888caa"
                    state: new
                    amount: 100.0
                    discount: 20.0
                    updated_at: "2019-11-28T11:04:22.397Z"
        401:
          $ref: "#/components/responses/Unauthorized"
        405:
          $ref: '#/components/responses/OneInvoiceAllowed'
        406:
          $ref: "#/components/responses/UnacceptableBalance"
        409:
          $ref: "#/components/responses/Conflict"
        410:
          $ref: "#/components/responses/NotFoundAccount"
        500:
          $ref: "#/components/responses/GeneralError"
  /invoice/{invoice_id}:
    get:
      tags:
        - Checkout API definition
      security:
        - bearerAuth: []
      summary: Get invoice details
      description: Check invoice state, designed to be polled.
      parameters:
        - in: path
          name: invoice_id
          required: true
          schema:
            type: string
            format: uuid
            example: "014d81df-ff4b-4580-9adf-a7379e888caa"
      responses:
        200:
          description: Invoice (aka payment intent) details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
              examples:
                just_created_invoice:
                  value:
                    id: "014d81df-ff4b-4580-9adf-a7379e888caa"
                    state: paid
                    amount: 100.0
                    discount: 20.0
                    updated_at: "2019-11-28T11:04:22.397Z"
        401:
          $ref: "#/components/responses/Unauthorized"
        410:
          $ref: "#/components/responses/NotFoundInvoice"
        500:
          $ref: "#/components/responses/GeneralError"
    delete:
      tags:
        - Checkout API definition
      security:
        - bearerAuth: []
      summary: Cancel invoice
      description: Check initiated invoice.
      parameters:
        - in: path
          name: invoice_id
          required: true
          schema:
            type: string
            format: uuid
            example: "014d81df-ff4b-4580-9adf-a7379e888caa"
      responses:
        200:
          description: Invoice (aka payment intent) details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
              examples:
                just_created_invoice:
                  value:
                    id: "014d81df-ff4b-4580-9adf-a7379e888caa"
                    state: canceled
                    amount: 100.0
                    discount: 20.0
                    updated_at: "2019-11-28T11:04:22.397Z"
        401:
          $ref: "#/components/responses/Unauthorized"
        410:
          $ref: "#/components/responses/NotFoundInvoice"
        500:
          $ref: "#/components/responses/GeneralError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    GeneralError:
      description: Something went wrong
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Something went wrong.
          examples:
            general_error:
              value:
                message: Something went wrong.
    Unauthorized:
      description: Authentication information is missing or invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Authentication information is missing or invalid.
          examples:
            auth_error:
              value:
                message: Authentication information is missing or invalid.
    OneInvoiceAllowed:
      description: There is an active invoice issued for the account. Only one invoice at a time is allowed.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Only one invoice at a time is allowed.
          examples:
            one_invoice_allowed_error:
              value:
                message: Only one invoice at a time is allowed.
    UnacceptableBalance:
      description: Not acceptable zero balance on loyalty card.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Zero balance on loyalty card.
          examples:
            zero_balance_error:
              value:
                message: Zero balance on loyalty card.
    NotFoundAccount:
      description: Defined account was not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: No account.
          examples:
            no_account_error:
              value:
                message: No account.
    NotFoundInvoice:
      description: Defined invoice was not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: No invoice.
          examples:
            no_invoice_error:
              value:
                message: No invoice.
    Conflict:
      description: Proposed invoice id already exists.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Collision in the invoice id.
          examples:
            id_collision_error:
              value:
                example: Collision in the invoice id.
  schemas:
    Invoice:
      required:
        - id
        - state
        - amount
        - discount
        - updated_at
      properties:
        id:
          description: Invoice self generated id
          type: string
          format: uuid
          example: "014d81df-ff4b-4580-9adf-a7379e888caa"
        state:
          description: Invoice state
          type: string
          enum:
            - new
            - paid
            - canceled
          example: new
        amount:
          description: Net amount of the payment
          type: number
          format: double
          example: 100.0
        discount:
          description: Amount of the discount (based on the max available balance on a loyalty card)
          type: number
          format: double
          example: 20.0
        updated_at:
          description: Creation/Paid/Canceled time mark
          type: string
          format: date-time
          example: '2019-11-28T11:04:22.397Z'