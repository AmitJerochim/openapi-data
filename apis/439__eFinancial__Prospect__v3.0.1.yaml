openapi: "3.0.1"
info:
  title: "Prospect Service - IAM Test"
  version: "v3.0.1"
paths:
  /v3/prospect/{prospectId}/meta:
    patch:
      tags:
        - prospect/meta
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/PatchProspect"
        required: true
      responses:
        400:
          description: "400 response"
          content: {}
        412:
          description: "412 response"
          content: {}
        500:
          description: "500 response"
          content: {}
        204:
          description: "204 response"
          headers:
            etag:
              schema:
                type: "string"
          content: {}
        404:
          description: "404 response"
          content: {}
        428:
          description: "428 response"
          content: {}
        409:
          description: "409 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-patch/invocations"
        responses:
          '.*errorType": "Conflict".*':
            statusCode: "409"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.etag: "integration.response.body.headers.etag"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "BadRequest".*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "PreconditionFailed".*':
            statusCode: "412"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "PreconditionRequired".*':
            statusCode: "428"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            attribute\": \"Meta\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /v3/prospect/{prospectId}/address:
    get:
      tags:
        - prospect/address
      operationId: "getAllAddressByprospectId"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        404:
          description: "404 response"
          content: {}
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfAddress"
        400:
          description: "400 response"
          content: {}
        500:
          description: "500 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    post:
      tags:
        - prospect/address
      operationId: "createAddressForprospect"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
        required: true
      responses:
        404:
          description: "404 response"
          content: {}
        208:
          description: "208 response"
          content: {}
        201:
          description: "201 response"
          headers:
            Location:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        500:
          description: "500 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-post-attributes/invocations"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Location: "integration.response.body.headers.resourceUri"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "AlreadyReported".*':
            statusCode: "208"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            attribute\": \"Addresses\",\n    \"basePath\": \"https://rrwc4f23ma.execute-api.us-west-2.amazonaws.com/int\"\
            \n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /v3/prospect/{prospectId}/survey/{question}:
    delete:
      tags:
        - prospect/survey
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "question"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /v3/prospect/search:
    get:
      tags:
        - prospect
      operationId: "getprospectByMinSearch"
      parameters:
      - name: "phoneNumber"
        in: "query"
        schema:
          type: "string"
      - name: "state"
        in: "query"
        schema:
          type: "string"
      - name: "daysOld"
        in: "query"
        schema:
          type: "string"
      - name: "agent"
        in: "query"
        schema:
          type: "string"
      - name: "dob"
        in: "query"
        schema:
          type: "string"
      - name: "firstName"
        in: "query"
        schema:
          type: "string"
      - name: "exactMatch"
        in: "query"
        schema:
          type: "string"
      - name: "lastName"
        in: "query"
        schema:
          type: "string"
      responses:
        404:
          description: "404 response"
          content: {}
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfProspect"
        400:
          description: "400 response"
          content: {}
        500:
          description: "500 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-search/invocations"
        responses:
          default:
            statusCode: "200"
          '.*errorType": "BadRequest".*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    }\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /v3/prospect/{prospectId}/survey:
    get:
      tags:
        - prospect/survey
      operationId: "getAllSurveyByprospectId"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        404:
          description: "404 response"
          content: {}
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfAnswer"
        400:
          description: "400 response"
          content: {}
        500:
          description: "500 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    put:
      tags:
        - prospect/survey
      operationId: "updateSurveyAnswerByprospectId"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Answer"
        required: true
      responses:
        500:
          description: "500 response"
          content: {}
        405:
          description: "405 response"
          content: {}
        204:
          description: "204 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    post:
      tags:
        - prospect/survey
      operationId: "addSurveyAnswerForprospect"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArrayOfAnswer"
        required: true
      responses:
        404:
          description: "404 response"
          content: {}
        208:
          description: "208 response"
          content: {}
        201:
          description: "201 response"
          headers:
            Location:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        500:
          description: "500 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-post-attributes/invocations"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Location: "integration.response.body.headers.resourceUri"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "AlreadyReported".*':
            statusCode: "208"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            attribute\": \"Survey\",\n    \"basePath\": \"https://rrwc4f23ma.execute-api.us-west-2.amazonaws.com/int\"\
            \n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      tags:
        - prospect/survey
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    patch:
      tags:
        - prospect/survey
      operationId: "updateSurveyByprospectIdAndSurveyBody"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/PatchProspect"
        required: true
      responses:
        400:
          description: "400 response"
          content: {}
        412:
          description: "412 response"
          content: {}
        500:
          description: "500 response"
          content: {}
        204:
          description: "204 response"
          headers:
            etag:
              schema:
                type: "string"
          content: {}
        404:
          description: "404 response"
          content: {}
        428:
          description: "428 response"
          content: {}
        409:
          description: "409 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-patch/invocations"
        responses:
          '.*errorType": "Conflict".*':
            statusCode: "409"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.etag: "integration.response.body.headers.etag"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "BadRequest".*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "PreconditionFailed".*':
            statusCode: "412"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "PreconditionRequired".*':
            statusCode: "428"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            attribute\": \"Survey\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /v3/prospect/{prospectId}:
    get:
      tags:
        - prospect
      operationId: "getprospectByprospectId"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        404:
          description: "404 response"
          content: {}
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            etag:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Prospect"
        400:
          description: "400 response"
          content: {}
        500:
          description: "500 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-get-by-prospectId/invocations"
        responses:
          '.*errorType": "BadRequest".*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.etag: "integration.response.body.headers.etag"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($message = $input.json('$.message'))\n{\n  \
                \  \"message\": $message\n}"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    }\n}"
        passthroughBehavior: "never"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      tags:
        - prospect
      operationId: "deleteprospectByprospectId"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        404:
          description: "404 response"
          content: {}
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        400:
          description: "400 response"
          content: {}
        500:
          description: "500 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      tags:
        - prospect
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,etag'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    patch:
      tags:
        - prospect
      operationId: "patchprospectByprospectId"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/PatchProspect"
        required: true
      responses:
        400:
          description: "400 response"
          content: {}
        412:
          description: "412 response"
          content: {}
        500:
          description: "500 response"
          content: {}
        204:
          description: "204 response"
          headers:
            etag:
              schema:
                type: "string"
          content: {}
        404:
          description: "404 response"
          content: {}
        428:
          description: "428 response"
          content: {}
        409:
          description: "409 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-patch/invocations"
        responses:
          '.*errorType": "Conflict".*':
            statusCode: "409"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.etag: "integration.response.body.headers.etag"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "BadRequest".*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "PreconditionFailed".*':
            statusCode: "412"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "PreconditionRequired".*':
            statusCode: "428"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json-patch+json: "{\n    \"body\": $input.json('$'),\n    \"\
            headers\": {\n        #foreach($header in $input.params().header.keySet())\n\
            \            \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            attribute\": \"\"\n}"
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            attribute\": \"\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /v3/prospect/{prospectId}/phone:
    get:
      tags:
        - prospect/phone
      operationId: "getAllPhoneByprospectId"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        404:
          description: "404 response"
          content: {}
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfPhone"
        400:
          description: "400 response"
          content: {}
        500:
          description: "500 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    post:
      tags:
        - prospect/phone
      operationId: "addPhoneForprospect"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Phone"
        required: true
      responses:
        404:
          description: "404 response"
          content: {}
        208:
          description: "208 response"
          content: {}
        201:
          description: "201 response"
          headers:
            Location:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        500:
          description: "500 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-post-attributes/invocations"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Location: "integration.response.body.headers.resourceUri"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "AlreadyReported".*':
            statusCode: "208"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            attribute\": \"Phones\",\n    \"basePath\": \"https://rrwc4f23ma.execute-api.us-west-2.amazonaws.com/int\"\
            \n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /v3/prospect/address/{addressId}:
    get:
      tags:
        - prospect/address
      operationId: "getAddressByAddressId"
      parameters:
      - name: "addressId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        400:
          description: "400 response"
          content: {}
        404:
          description: "404 response"
          content: {}
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
      security:
      - Cognito_Auth:
        - "prospect-api/read_prospect"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    delete:
      tags:
        - prospect/address
      operationId: "deleteAddressByAddressId"
      parameters:
      - name: "addressId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        404:
          description: "404 response"
          content: {}
        400:
          description: "400 response"
          content: {}
        500:
          description: "500 response"
          content: {}
        204:
          description: "204 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-delete-attributes/invocations"
        responses:
          default:
            statusCode: "204"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "BadRequest".*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    }\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /v3/prospect:
    post:
      tags:
        - prospect
      operationId: "createprospect"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prospect"
        required: true
      responses:
        500:
          description: "500 response"
          content: {}
        208:
          description: "208 response"
          headers:
            Location:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        201:
          description: "201 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Location:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-dynamo-put/invocations"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Location: "integration.response.body.headers.resourceUri"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "DuplicateError".*':
            statusCode: "208"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"basePath\"\
            : \"https://rrwc4f23ma.execute-api.us-west-2.amazonaws.com/int\"\n}"
        passthroughBehavior: "never"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      tags:
        - prospect
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /v3/prospect/phone/{phoneId}:
    get:
      tags:
        - prospect/phone
      operationId: "getPhoneByPhoneId"
      parameters:
      - name: "phoneId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        404:
          description: "404 response"
          content: {}
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Phone"
        400:
          description: "400 response"
          content: {}
        500:
          description: "500 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    delete:
      tags:
        - prospect/phone
      operationId: "deletePhoneByPhoneId"
      parameters:
      - name: "phoneId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        404:
          description: "404 response"
          content: {}
        400:
          description: "400 response"
          content: {}
        500:
          description: "500 response"
          content: {}
        204:
          description: "204 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-delete-attributes/invocations"
        responses:
          default:
            statusCode: "204"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "BadRequest".*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    }\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /v3/prospect/{prospectId}/phone/{phoneId}:
    patch:
      tags:
        - prospect/phone
      operationId: "updatePhoneByprospectIdAndPhoneBody"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "phoneId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/PatchProspect"
        required: true
      responses:
        400:
          description: "400 response"
          content: {}
        412:
          description: "412 response"
          content: {}
        500:
          description: "500 response"
          content: {}
        204:
          description: "204 response"
          headers:
            etag:
              schema:
                type: "string"
          content: {}
        404:
          description: "404 response"
          content: {}
        428:
          description: "428 response"
          content: {}
        409:
          description: "409 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-patch/invocations"
        responses:
          '.*errorType": "Conflict".*':
            statusCode: "409"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.etag: "integration.response.body.headers.etag"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "BadRequest".*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "PreconditionFailed".*':
            statusCode: "412"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "PreconditionRequired".*':
            statusCode: "428"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            attribute\": \"Phones\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /v3/prospect/{prospectId}/address/{addressId}:
    patch:
      tags:
        - prospect/address
      operationId: "updateAddressByprospectIdAndAddressBody"
      parameters:
      - name: "prospectId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "addressId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/PatchProspect"
        required: true
      responses:
        400:
          description: "400 response"
          content: {}
        412:
          description: "412 response"
          content: {}
        500:
          description: "500 response"
          content: {}
        204:
          description: "204 response"
          headers:
            etag:
              schema:
                type: "string"
          content: {}
        404:
          description: "404 response"
          content: {}
        428:
          description: "428 response"
          content: {}
        409:
          description: "409 response"
          content: {}
      security:
      - sigv4: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:152753114247:function:efinancial-prospect-patch/invocations"
        responses:
          '.*errorType": "Conflict".*':
            statusCode: "409"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.etag: "integration.response.body.headers.etag"
            responseTemplates:
              application/json: "{}"
          '.*errorType": "BadRequest".*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "PreconditionFailed".*':
            statusCode: "412"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "ServerError".*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "PreconditionRequired".*':
            statusCode: "428"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
          '.*errorType": "NotFound".*':
            statusCode: "404"
            responseTemplates:
              application/json: "#set($errorMessageObject = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"message\": \"$errorMessageObject.message\",\n    \"awsRequestId\"\
                : \"$errorMessageObject.awsRequestId\"\n}\n"
        requestTemplates:
          application/json: "{\n    \"body\": $input.json('$'),\n    \"headers\":\
            \ {\n        #foreach($header in $input.params().header.keySet())\n  \
            \          \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\"\
            \ \n            #if($foreach.hasNext),#end\n        #end\n    },\n   \
            \ \"method\": \"$context.httpMethod\",\n    \"params\": {\n        #foreach($param\
            \ in $input.params().path.keySet())\n            \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            query\": {\n        #foreach($queryParam in $input.params().querystring.keySet())\n\
            \            \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\"\
            \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
            attribute\": \"Addresses\"\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
components:
  schemas:
    Meta:
      type: "object"
      properties:
        ProspectId:
          type: "string"
          format: "uuid"
        IpAddress:
          type: "string"
          description: "IPV4 ip address of the prospect"
        Owner:
          type: "string"
          description: "What agency or agent owns this prospect"
        MarketingSource:
          type: "string"
        MarketingCampaign:
          type: "string"
        Score:
          type: "string"
        Origin:
          type: "string"
        Filter:
          type: "string"
        Priority:
          type: "string"
        Notes:
          type: "string"
        LeadIdComId:
          type: "string"
          format: "uuid"
        Action:
          type: "string"
        ExternalIds:
          $ref: "#/components/schemas/ExternalIds"
    Address:
      type: "object"
      properties:
        ProspectId:
          type: "string"
          format: "uuid"
        UuId:
          type: "string"
          format: "uuid"
        Address1:
          type: "string"
        Address2:
          type: "string"
        City:
          type: "string"
        Zipcode:
          type: "string"
        AddressType:
          type: "string"
    ArrayOfAnswer:
      type: "array"
      items:
        $ref: "#/components/schemas/Answer"
    ArrayOfPhone:
      type: "array"
      items:
        $ref: "#/components/schemas/Phone"
    ArrayOfAddress:
      type: "array"
      items:
        $ref: "#/components/schemas/Address"
    ApiResponse:
      type: "object"
      properties:
        Id:
          type: "string"
        Message:
          type: "string"
    Answer:
      type: "object"
    Empty:
      title: "Empty Schema"
      type: "object"
    ExternalIds:
      type: "object"
      properties:
        gclid:
          type: "string"
        mscklid:
          type: "string"
        fbclid:
          type: "string"
        utm_medium:
          type: "string"
        utm_source:
          type: "string"
        utm_campaign:
          type: "string"
        utm_term:
          type: "string"
    Phone:
      type: "object"
      properties:
        ProspectId:
          type: "string"
          format: "uuid"
        UuId:
          type: "string"
          format: "uuid"
        Number:
          type: "string"
        EwcAutoDial:
          type: "boolean"
        EwcSms:
          type: "boolean"
        EwcMms:
          type: "boolean"
        EwcPreRecorded:
          type: "boolean"
        PhoneType:
          type: "string"
    PatchProspect:
      type: "array"
      items:
        required:
        - "op"
        - "path"
        type: "object"
        properties:
          op:
            type: "string"
          path:
            type: "string"
    Prospect:
      type: "object"
      properties:
        ProspectId:
          type: "string"
          format: "uuid"
        LastName:
          type: "string"
        FirstName:
          type: "string"
        Gender:
          type: "string"
        DOB:
          type: "string"
        EmailAddress:
          type: "string"
        EwcEmail:
          type: "boolean"
        Weight:
          type: "integer"
          format: "int32"
        Height:
          type: "integer"
          format: "int32"
        Addresses:
          type: "array"
          items:
            $ref: "#/components/schemas/Address"
        Phones:
          type: "array"
          items:
            $ref: "#/components/schemas/Phone"
        Meta:
          $ref: "#/components/schemas/Meta"
        Survey:
          type: "array"
          items:
            $ref: "#/components/schemas/Answer"
        Tags:
          type: "array"
          items:
            $ref: "#/components/schemas/Tag"
    Tag:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
    ArrayOfProspect:
      type: "array"
      items:
        $ref: "#/components/schemas/Prospect"
  securitySchemes:
    Cognito_Auth:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        providerARNs:
        - "arn:aws:cognito-idp:us-west-2:152753114247:userpool/us-west-2_AC83PSxCS"
        type: "cognito_user_pools"
    sigv4:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "awsSigv4"
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true