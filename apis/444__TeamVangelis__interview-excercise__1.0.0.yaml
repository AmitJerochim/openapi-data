openapi: "3.0.0"
info:
  version: 1.0.0
  title: Interview Excercise
  description: This API defines a Car Pooling application where shared cars can be booked and checked out for usage. THe API also provided features for the payment of the usage
  license:
    name: Vangelis Angelidis
servers:
  - url: https://app.swaggerhub.com/apis/TeamVangelis/interview_exercise/1.0.0
tags:
  - name: car
    description: Everything related to Car operations in the API
  - name: dockingStation
    description: Places where you can pick up or return a car
  - name: account
    description: Accounts can make bookings and check-in/out cars
  - name: booking
    description: Marks operations related to bookings
paths:
  /car:
    post:
      summary: Adds a car instance to the carpooling ecosystem
      operationId: addCar
      tags:
        - car
      requestBody:
        $ref: "#/components/requestBodies/NewCar"
      responses:
        405:
          description: Invalid input
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Lists all the cars present in the system
      operationId: getCars
      tags:
        - car
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: An paged array of cars
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Cars"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /car/{carRegNo}:
    get:
      summary: Searches for a specific car using the registration number
      operationId: getCarByRegNo
      tags:
        - car
      parameters:
        - name: carRegNo
          in: path
          required: true
          description: The registration number of the car to retrieve
          schema:
            type: string
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cars"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /booking/{account}{car}:
    post:
      summary: Creates a booking for the specified car and it associates it with the specified account 
      operationId: createBooking
      tags:
        - booking
      parameters:
        - name: account
          in: path
          required: true
          description: The account (user) that initiates this booking
          schema:
            $ref: "#/components/schemas/Account"
        - name: car
          in: path
          required: true
          description: The car that this booking will book
          schema:
            $ref: "#/components/schemas/Car"
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /booking/startBooking/{booking}:
    put:
      summary: Marks the booking as started. All related actions must be perofrmed in the implementation, e.g. marked the car as checked out  
      operationId: startBooking
      tags:
        - booking
      parameters:
        - name: booking
          in: path
          required: true
          description: The booking that is to be marked as started
          schema:
            $ref: "#/components/schemas/Booking"
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /booking/endBooking{booking}:
    put:
      summary: Marks the booking as ended. All related actions must be perofrmed in the implementation, e.g. marked the car as checked in  
      operationId: endBooking
      tags:
        - booking
      parameters:
        - name: booking
          in: path
          required: true
          description: The booking that is to be marked as ended
          schema:
            $ref: "#/components/schemas/Booking"
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /booking/payBooking{booking}{payment}:
    put:
      summary: Pay an ended Booking. All related actions must be perofrmed in the implementation, e.g. marked the car as not in use  
      operationId: payBooking
      tags:
        - booking
      parameters:
        - name: booking
          in: path
          required: true
          description: The booking that is to be paid
          schema:
            $ref: "#/components/schemas/Booking"
        - name: payment
          in: path
          required: true
          description: The payment that will define the payment method and the amount
          schema:
            $ref: "#/components/schemas/Payment"
      responses:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dockingstations/:
    get:
      summary: Lists all the docking stations present in the system
      operationId: getDockingStations
      tags:
        - dockingStation
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: An paged array of docking stations
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/DockingStations"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Car:
      description: A car that can be booked and checked out for usage
      type: object
      required:
        - make
        - model
        - registrationNumber
      properties:
        make:
          type: string
          default: null
        model:
          type: string
          default: null
        registrationNumber:
          type: string
          default: null
        geoLocation:
          $ref: "#/components/schemas/GeoLocation"
        dockingStation:
          $ref: "#/components/schemas/DockingStation"
        isInUse:
          type: boolean
          default: false
    GeoLocation:
      description: A geographical location where a car or a docking station is located
      type: object
      required:
        - xCoord
        - yCoord
      properties:
        xCoord:
          type: number
          default: 0.0
        yCoord:
          type: number
          default: 0.0
    DockingStation:
      description: The location where one or more cars are parked. Bookings start and end at docking stations
      type: object
      required:
        - geoLocation
      properties:
        geoLocation:
          $ref: "#/components/schemas/GeoLocation"
        cars:
          $ref: "#/components/schemas/Cars"        
    Payment:
      description: Defines how the booking for a car will be payed
      type: object
      required:
        - paymentType
        - amount
      properties:
        paymentType:
          $ref: "#/components/schemas/SupportedPayment"
        amount:
          type: number
          format: double
    Account:
      
      description: Every user needs to have an account in order to create bookings for cars
      type: object
      required:
        - firstName
        - lastName
        - email
        - phone
        - password
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        accountStatus:
          type: integer
          description: Account Status
          format: int32
    Booking:
      description: Defines the right for an Account (user) to use a Car
      type: object
      required:
        - bookingId
        - account
        - car
        - plannedStartDate
        - plannedEndDate
      properties:
        bookingId:
          type: integer
          format: int64
        account:
            $ref: "#/components/schemas/Account"
        car:
            $ref: "#/components/schemas/Car"
        plannedStartDate:
          type: string
          format: date-time
        plannedEndDate:
          type: string
          format: date-time
        actualStartDate:
          type: string
          format: date-time
        actualEndDate:
          type: string
          format: date-time
        status:
          type: string
          description: Booking Status
          enum:
            - created
            - incomplete
            - complete
        inProgress:
          type: boolean
          default: false
    Cars:
      description: The list of cars in the system. Cars can be filtered by location or Docking Station
      type: array
      items:
        $ref: "#/components/schemas/Car"
    DockingStations:
      description: The list of docking stations in the system.
      type: array
      items:
        $ref: "#/components/schemas/DockingStation"
    SupportedPayment:
      description: The list of all payment methods supported by the system
      type: string
      enum:
        - VISA
        - MASTERCARD
        - AMEX
        - DINERS
        - OTHER_CARD
        - PAYPAL
        - BANK_TRANSFER
        - INVOICE
        - CASH
        - FREE_OF_CHARGE
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  requestBodies:
    NewCar:
      description: A Car object that needs to be added to the pool
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Car"
        application/xml:
          schema:
            $ref: "#/components/schemas/Car"
      required: true
