openapi: 3.0.0
servers:
# Added by API Auto Mocking Plugin
  - description: Homologação
    url: https://monitoramento.viafacil.com.br/spartan/api
info:
  description: Spartan API
  version: "1.0.7"
  title: Spartan API
  contact:
    email: rodrigo.souza@semparar.net
    
tags:
  - name: Autorização
    description: Autorização da API
  - name: Patio
    description: Pátio do Estacionamento
  - name: Admin
    description: Métodos administrativos de apoio

paths:
  /auth/login:
    get:
      security:
       - basicAuth: []
      tags:
        - Autorização
      summary: Login
      operationId: login
      description: |
        Efetua o login para receber um token de autorizacao
      responses:
        '200':
          description: Login efetuado com sucesso
        '404':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.
      
  /patio/canentry:
    post:
      tags:
        - Patio
      summary: Verifica autorização de entrada para um cliente Sem Parar
      operationId: CanEntry
      description: |
        Passando os parâmetros requeridos, será retornada a resposta de autorização de acesso do cliente ao estacionamento (Procedure CanEntry)
        
          Status codes:
          
          100 - NELA
          
          101 - SEM CADASTRO
          
          102 - DUPLA LEITURA
          
          103 - TAG NA PRAIA
          
          104 - REEENTRADA
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestAuth'
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ResponseAuth'
        '400':
          description: Parâmetros de entrada inválidos.        
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.
          
  /patio/canexit:
    post:
      tags:
        - Patio
      summary: Verifica autorização de saida para um cliente Sem Parar
      operationId: CanExit
      description: |
        Passando os parâmetros requeridos, será retornada a resposta de autorização de saída do cliente do estacionamento (Procedure CanExit)
        
        Status Codes
        
        O  - OK
        
        57 - SAIDA NEGADA
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCanExit'
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ResponseCanExit'
        '400':
          description: Parâmetros de entrada inválidos.        
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.
  
  /patio/canpass:
    post:
      tags:
        - Patio
      summary: Verifica autorização de passagem para um cliente Sem Parar
      operationId: CanPass
      description: |
        Passando os parâmetros requeridos, será retornada a resposta de autorização de passagem do cliente para um bolsão (Procedure CanPass)
        
        Status Codes
        
        O  - OK
        
        57 - PASSAGEM NEGADA
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCanPass'
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ResponseCanPass'
        '400':
          description: Parâmetros de entrada inválidos.        
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.
  
  /patio:
    get:
      tags:
        - Patio
      summary: Lista todos os veículos do pátio.
      operationId: GetPatio
      description: |
        Retorna a lista de veículos do pátio do estacionamento.
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/LstPatio'
        '204':
          description: Nenhum veículo encontrado no pátio.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.
    
    post:
      tags:
        - Patio
      summary: Insere um veículo no pátio
      operationId: InsertPatio
      description: |
        Insere um veículo no pátio com os parametros enviados |
        Os campos dataSaida e valor devem ser enviados nos casos de |
        pagamento na Entrada, sendo que o valor deve ser fornecido
        em centavos. Ex. R$ 1,00 = 100
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatioIn'
      responses:
        '201':
          description: Registro inserido com sucesso
        '203':
          description: Veiculo já encontra-se no pátio
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor. 
  
  /patio/update:        
    post:
      tags:
      - Patio
      summary: Atualiza o pátio com as informações fornecidas
      operationId: UpdatePatio
      description: |
        Fecha a transaçao
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        description: Objeto pátio que necessita ser atualizado
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatioUpd'
      responses:
        '200':
          description: Registro atualizado com sucesso
        '203':
          description: Registro já consta na tabela de transação
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        
        '500':
          description: Erro interno do servidor.
          
  /patio/pass:        
    post:
      tags:
      - Patio
      summary: Atualiza a pista de entrada do registro do Pátio
      operationId: PassPatio
      description: |
        Atualiza a pista de entrada do registro do pátio
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        description: Objeto pátio que necessita ser atualizado
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatioPass'
      responses:
        '200':
          description: Pista alterada com sucesso
        '203':
          description: Veículo nao consta no pátio
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        
        '500':
          description: Erro interno do servidor.
  
  /patio/cancel:        
    post:
      tags:
      - Patio
      summary: Cancela o acesso
      operationId: CancelAccess
      description: |
        Cancela o acesso via Sem Parar, por token ou ticket
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:          
                  type: string
                  example: '18d6527c53aaae961a69bd38cf0e01a683ebe88c0c49a1984c3bcab8b360523a'
                ticket:          
                  type: string
                  example: '1234567890'
      responses:
        '200':
          description: Registro cancelado com sucesso
        '204':
          description: Token nao encontrado
        '412':
          description: Token ou Ticket invalido ou expirado
        '500':
          description: Erro interno do servidor.
          
  /patio/tag/{numeroTag}:
    get:
      tags:
        - Patio
      summary: Lista todos os veículos do pátio buscando por Tag.
      operationId: GetPatioByTag
      description: |
        Retorna a lista de veículos do pátio do estacionamento, filtrando por Tag.
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
        - in: path
          name: numeroTag
          schema:
            type: integer
          required: true
          description: Numero do Tag
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/LstPatio'
        '203':
          description: Não foi possível realizar a passagem
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.
  
  /patio/placa/{placaVeiculo}:
    get:
      tags:
        - Patio
      summary: Lista todos os veículos do pátio buscando por Placa.
      operationId: GetPatioByPlate
      description: |
        Retorna a lista de veículos do pátio do estacionamento, filtrando por Placa.
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
        - in: path
          name: placaVeiculo
          schema:
            type: string
          required: true
          description: Placa do Veiculo
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/LstPatio'
        '204':
          description: Nenhum veículo encontrado no pátio.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.  

  
  /admin/cancelaTransacao:
    post:
      tags:
        - Admin
      summary: Cancela uma transação no SemParar
      operationId: CancelTransaction
      description: |
        Cancela uma transação do SemParar que ainda não foi enviada para o Backoffice
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket:          
                  type: string
                  example: '1234567890'
      responses:
        '201':
          description: Registro cancelado com sucesso
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.
          
  /admin/evento:
    post:
      tags:
        - Admin
      summary: Registra um novo evento
      operationId: InsertEvento
      description: |
        Registra um novo evento com os parâmetros fornecidos
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        description: Verificar o Schema para identificar os parâmetros obrigatórios
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evento'
      responses:
        '201':
          description: Registro inserido com sucesso
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.
    
  /admin/evento/pista/{pista}:
    get:
      tags:
        - Admin
      summary: Lista todos os eventos do pátio buscando por Pista.
      operationId: GetEventoByLane
      description: |
        Retorna a lista de eventos estacionamento, filtrando por Pista.
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
        - in: path
          name: pista
          schema:
            type: integer
          required: true
          description: Numero da Pista
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/LstEventos'
        '204':
          description: Nenhum evento encontrado/
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.  
  
  /admin/evento/codigo/{codigo}:
    get:
      tags:
        - Admin
      summary: Lista todos os eventos do pátio buscando por codigo.
      operationId: GetEventoByCode
      description: |
        Retorna a lista de eventos estacionamento, filtrando por Código.
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
        - in: path
          name: codigo
          schema:
            type: integer
          required: true
          description: Código do Evento
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/LstEventos'
        '204':
          description: Nenhum evento encontrado/
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor. 
          
  /admin/versao:
    post:
      tags:
        - Admin
      summary: Registra a versão do software
      operationId: insertVersao
      description: |
        Registra a versão do software
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                app:          
                  type: string
                versao:    
                  type: string
      responses:
        '201':
          description: Registro inserido com sucesso
        '204':
          description: Registro não inserido
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.
  
  
  /admin/monitor:
    post:
      tags:
        - Admin
      summary: Insere um novo registro na tabela monitor
      operationId: insertMonitor
      description: |
        Insere um novo registro na tabela monitor com os parâmetros fornecidos
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        description: Verificar o Schema para identificar os parâmetros obrigatórios
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Monitor'
      responses:
        '201':
          description: Registro inserido com sucesso
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.  
          
    get:
      tags:
        - Admin
      summary: Lista todos os registros da tabela Monitor
      operationId: getMonitor
      description: |
        Retorna a lista de registros da tabela Monitor
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/LstMonitor'
        '204':
          description: Nenhum registro encontrado.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor. 
    
  
  /admin/status:
    post:
      tags:
        - Admin
      summary: Grava um registro na tabela de status
      operationId: insertStatus
      description: |
        Grava um registro na tabela de status
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        description: Verificar o Schema para identificar os parâmetros obrigatórios
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'  
      responses:
        '201':
          description: Registro inserido com sucesso
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor. 
    
    get:
      tags:
        - Admin
      summary: Lista registros da tabela status.
      operationId: getStatus
      description: |
        Retorna a lista de registros da tabela status
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LstStatus'
        '204':
          description: Nenhum registro encontradosem
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor.
  
  
  /admin/parametro:
    post:
      tags:
        - Admin
      summary: Grava um registro na tabela de parametros
      operationId: insertParametro
      description: |
        Grava um registro na tabela de parametros
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
      requestBody:
        description: Verificar o Schema para identificar os parâmetros obrigatórios
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parametro'
      responses:
        '201':
          description: Registro inserido com sucesso
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '500':
          description: Erro interno do servidor. 
  
  /admin/parametro/app/{app}/param/{parametro}/datahora/{datahora}:
    get:
      tags:
        - Admin
      summary: Retorna registro filtrado por nome da aplicação e nome do parametro.
      operationId: getParametro
      description: |
        Retorna a lista de parametros filtrados por app, nome do parametro e data hora
      parameters:
        - in: header
          name: codigoEstacionamento
          schema:
            type: integer
          required: true
          example: 4073
        - in: path
          name: app
          schema:
            type: string
          required: true
          example: Spartan
          description: Nome do aplicativo que contém o parametro
        - in: path
          name: parametro
          schema:
            type: string
          required: true
          example: Version
          description: Nome do parametro a ser buscado
        - in: path
          name: datahora
          schema:
            type: string
          required: true
          example: "2019-12-02"
          description: DataHora do parametro a ser buscado.
      responses:
        '200':
          description: Chamada realizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parametro'
        '204':
          description: Nenhum parametro encontrado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Acesso proibido
        '412':
          description: Token de entrada invalido
        '500':
          description: Erro interno do servidor.
          
components:
  responses:
    UnauthorizedError:
      description: Token de autorização faltando ou inválido
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:     
      type: http
      scheme: basic  
  schemas:
    RequestAuth:
      required:
        - dispositivo
        - valor
      properties:
        dispositivo:
          type: integer
          example: 709876543
        pistaEntrada:
          type: integer
          example: 1
        valor:
          type: integer
          example: 1050
  
    ResponseAuth:
      properties:
        status:
          type: integer
          example: 0
        codigoMotivo:
          type: integer
          example: 0
        motivo:
          type: string
          example: 'Habilitado'
        placa:
          type: string
          example: 'ABC1234'
        token:
          type: string
          example: '18d6527c53aaae961a69bd38cf0e01a683ebe88c0c49a1984c3bcab8b360523a'
        documento:
          type: string
          example: '22299988844'
        bloquearAvulso:
          type: boolean
          example: false
        celular:
          type: string
          example: '11988881999'
     
    RequestCanExit:
      required:
        - dispositivo
        - pistaSaida
      properties:
        dispositivo:
          type: integer
          example: 700987654
        pistaSaida:
          type: integer
          example: 51
        
    RequestCanPass:
      required:
        - dispositivo
        - pistaPassagem
      properties:
        dispositivo:
          type: integer
          example: 700987654
        pistaPassagem:
          type: integer
          example: 51
          
    ResponseCanExit:
      properties:
        statusCode:
          type: integer
          example: 0
        dataEntrada:
          type: string
          example: "2019-08-02T02:00:00"
        pistaEntrada:
          type: integer
          example: 10
        tipoTarifa:
          type: integer
          example: 1
        ticket:
          type: string
          example: "12312361723678"
        placa:
          type: string
          example: 'ABC1234'
        documento:
          type: string
          example: '22299988844'
        tabelaCobranca:
          type: string
          example: '1'
        token:
          type: string
          example: "32176482196357823645786438"
        hash:
          type: string
          example: "AE4B4B32C053C3F797E10775E0B3303F5CEB31133AB529FF789629B9C1D11D40E2FF17CD08951120953BB47E22353DF6B8B742C0D61CDC2F42B2464B70867F8D36363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636"
    
    ResponseCanPass:
      properties:
        statusCode:
          type: integer
          example: 0
        token:
          type: string
          example: "32176482196357823645786438"

    
    Parametro:
      properties:
        app:
          type: string
          example: "sce"
        parametro:
          type: string
          example: "parametro"
        valor:
          type: string
          example: "valor"
        validade:
          type: string
          example: "2019-08-02T02:00:00"
 
    LstParametros:
      type: array
      items: 
        $ref: "#/components/schemas/Parametro"
    
    Status:
      properties:
        dataRegistro:
          type: string
          example: "2019-08-02T02:00:00"
        pista:
          type: integer
          example: 1
        codigo:
          type: integer
          example: 1
        inputs:
          type: integer
          example: 123
        outputs:
          type: integer
          example: 456
        dispositivo:
          type: integer
          example: 709876543
        param:
          type: integer
          example: 0
      
    PatioIn:
      required:
        - dataEntrada
        - dispositivo
        - pistaEntrada
        - placa
        - token
      properties:
        dataEntrada:
          type: string
          example: "2020-02-18T02:00:00"
        dataSaida:
          type: string
          example: "2020-02-18T08:00:00"
        dispositivo:
          type: integer
          example: 709876543
        pistaEntrada:
          type: integer
          example: 1
        placa:
          type: string
          example: "ABC1234"
        valor:
          type: integer
          example: 100
        token:
          type: string
          example: '18d6527c53aaae961a69bd38cf0e01a683ebe88c0c49a1984c3bcab8b360523a'
        ticket:
          type: string
          example: "1234567890"
        hash:
          type: string
          example: "1234567890"
        isento:
          type: boolean
          example: true
        entradaAutomatica:
          type: boolean
          example: true
        reenvio:
          type: boolean
          example: false
          
    PatioPass:
      required:
        - dispositivo
        - pistaPassagem
        - token
      properties:
        dispositivo:
          type: integer
          example: 709876543
        pistaPassagem:
          type: integer
          example: 51
        token:
          type: string
          example: "472134218975389165782463576398"
        reenvio:
          type: boolean
          example: false
          
    PatioUpd:
      required:
        - dataSaida
        - dispositivo
        - pistaSaida
        - token
      properties:
        dataSaida:
          type: string
          example: "2019-08-02T02:00:00"
        dispositivo:
          type: integer
          example: 709876543
        pistaSaida:
          type: integer
          example: 51
        saidaAutomatica:
          type: boolean
          example: true
        token:
          type: string
          example: "472134218975389165782463576398"
        valor:
          type: integer
          example: 1000
        hash:
          type: string
          example: "12345546576"
        reenvio:
          type: boolean
          example: false
    Patio:
      properties:
        dataEntrada:
          type: string
          example: "2019-08-02T02:00:00"
        dispositivo:
          type: integer
          example: 709876543
        pistaEntrada:
          type: integer
          example: 1
        placa:
          type: string
          example: "ABC1234"
        ticket:
          type: string
          example: "1234567890"
        hash:
          type: string
          example: "1234567890"
          
    CancelaTransacao:
      properties:
        ticket:
          type: string
          example: "1234567890"

          
    LstStatus:
      type: array
      items: 
        $ref: "#/components/schemas/Status"
        
    LstPatio:
      type: array
      items: 
        $ref: "#/components/schemas/Patio"
    
    LstEventos:
      type: array
      items: 
        $ref: "#/components/schemas/Evento" 
    
    LstMonitor:
      type: array
      items:
        $ref: "#/components/schemas/Monitor" 
    
    Monitor:
      properties:
        Pista:
          type: number
          example: 1
        Dados:
          type: array
          items:
            $ref: "#/components/schemas/TbMonitor" 
    
    TbMonitorArr:
      type: array
      items:
        $ref: "#/components/schemas/Monitor" 
    
    TbMonitor:
      properties:
        cParam:
          type: string
          example: "tsData"
        iType:
          type: number
          example: 231
        cValor:
          type: string
          example: "2019-09-25T08:00:00"
        

    Evento:
      properties:
        dataEvento:
          type: string
          example: "2019-08-02T02:00:00"
        codigo:
          type: integer
          example: 10
        placa:
          type: string
          example: "ABC1234"
        usuario:
          type: string
          example: "admin"
        pista:
          type: integer
          example: 1
        texto:
          type: string
          example: "Texto"
        dispositivo:
          type: integer
          example: 1
        emissor:
          type: integer
          example: 290
      required:  
        - dataEvento
        - codigo
        - usuario
        - texto
security:
  - bearerAuth: []