{
  "openapi" : "3.0.0",
  "servers" : [ {
    "url" : "https://api.youbim.com/",
    "description" : "Production Server"
  } ],
  "info" : {
    "description" : "**PRD API Version: 0.132.0.rc1**\n\nAll of our calls return a standard header object in the response like the following:\n    \n    {\n      \"response\": {\n        \"code\": 200,\n        \"result\": \"ok\",\n        \"message\": \"operation success\",\n        \"timestamp\": 1572383571,\n        \"errors\": [],\n        \"data\": { }\n      }\n    }\n\n\nwhere response.data contain the objects that were requested. If the data requested is a list of elements, they will be contained in the **records** array.\n",
    "version" : "1.0.0",
    "title" : "YouBIM API documentation",
    "contact" : {
      "email" : "support@youbim.com",
      "name" : "YouBIM Support Team"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "security" : [ {
    "YoubimScheme" : [ ]
  } ],
  "tags" : [ {
    "name" : "Authentication"
  }, {
    "name" : "Sites"
  }, {
    "name" : "Buildings"
  }, {
    "name" : "Types"
  }, {
    "name" : "Assets"
  }, {
    "name" : "Type Attributes"
  }, {
    "name" : "Asset Attributes"
  }, {
    "name" : "Work Orders"
  }, {
    "name" : "Modeling Identifiers"
  } ],
  "paths" : {
    "/users/getToken" : {
      "post" : {
        "security" : [ ],
        "tags" : [ "Authentication" ],
        "summary" : "Login method. Gets a token that will be passed to the next API calls.",
        "operationId" : "getToken",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserCredentials"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "an object containing the valid token for subsequent requests. To use, add a header in the following format: x-auth-token: {token}",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserToken"
                }
              }
            }
          }
        }
      }
    },
    "/sites" : {
      "get" : {
        "tags" : [ "Sites" ],
        "summary" : "gets the list of sites",
        "operationId" : "getSites",
        "description" : "By passing in the appropriate filters, you can search for\navailable sites\n",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of records to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "tags" : [ "Sites" ],
        "summary" : "Adds a new site to your account",
        "operationId" : "addSite",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InsertSite"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "items created. Returns the Id of the element created for future reference"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          }
        }
      }
    },
    "/sites/{id}" : {
      "get" : {
        "tags" : [ "Sites" ],
        "summary" : "Gets a single site filtered by Id",
        "operationId" : "getSite",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the site to filter. Eg. \"/sites/512\"",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Site"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/buildings" : {
      "get" : {
        "tags" : [ "Buildings" ],
        "summary" : "Gets the list of buildings",
        "operationId" : "getBuildings",
        "parameters" : [ {
          "name" : "FilterSite_id",
          "in" : "query",
          "description" : "pass an optional site id to filter buildings",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of records to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "tags" : [ "Buildings" ],
        "summary" : "Adds a new building",
        "operationId" : "addBuilding",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InsertBuilding"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "item created. Returns the Id of the element created for future reference"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          }
        }
      }
    },
    "/buildings/{id}" : {
      "get" : {
        "tags" : [ "Buildings" ],
        "summary" : "Gets a single building filtered by Id",
        "operationId" : "getBuilding",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the building to filter. Eg. \"/buildings/766\"",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Building"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/types" : {
      "get" : {
        "tags" : [ "Types" ],
        "summary" : "gets the list of types",
        "operationId" : "getTypes",
        "description" : "By passing in the appropriate filters, you can search for\navailable types in the building\n",
        "parameters" : [ {
          "name" : "FilterBuilding_id",
          "in" : "query",
          "description" : "pass an optional building id to filter types in that building",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of records to return. Default 25",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Type"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "tags" : [ "Types" ],
        "summary" : "Adds types to the buildings",
        "operationId" : "addTypes",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InsertType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "items created. Returns the Ids of the elements created for future reference"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          }
        }
      }
    },
    "/types/{id}" : {
      "get" : {
        "tags" : [ "Types" ],
        "summary" : "Gets a single type filtered by Id",
        "operationId" : "getType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the type to filter. Eg. \"/types/122563\"",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Type"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/assets" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "gets the list of assets",
        "operationId" : "getAssets",
        "description" : "By passing in the appropriate filters, you can search for\navailable assets in the building\n",
        "parameters" : [ {
          "name" : "FilterBuilding_id",
          "in" : "query",
          "description" : "pass an optional building id to filter assets in that building",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "FilterType_id",
          "in" : "query",
          "description" : "pass an optional type id to filter assets of that type",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of records to return. Default 25",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Adds assets to the building",
        "operationId" : "addAssets",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InsertAsset"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "items created. Returns the Ids of the elements created for future reference"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          }
        }
      }
    },
    "/assets/{id}" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets a single asset filtered by Id",
        "operationId" : "getAsset",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the asset to filter. Eg. \"/assets/3131615\"",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/typeattributes" : {
      "get" : {
        "tags" : [ "Type Attributes" ],
        "summary" : "gets the list of type attributes",
        "operationId" : "getTypeAttributes",
        "description" : "We don't have a RESTful way to get type attributes but as a workaround the\nfollowing method can be used: types/{id}?ContainTypeattributes=all\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the type to filter attributes. Eg. \"/types/12796048?ContainTypeattributes=all\"",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "ContainTypeattributes",
          "in" : "query",
          "description" : "all to get all attributes, otherwise the comma separated list of attribute names",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of records to return. Default 25",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TypeAttribute"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "tags" : [ "Type Attributes" ],
        "summary" : "Adds attributes to types",
        "operationId" : "addTypeAttributes",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InsertTypeAttribute"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "items created. Returns the Ids of the elements created for future reference"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          }
        }
      }
    },
    "/assetattributes" : {
      "get" : {
        "tags" : [ "Asset Attributes" ],
        "summary" : "gets the list of asset attributes",
        "operationId" : "getAssetAttributes",
        "description" : "By passing in the appropriate filters, you can search for\navailable asset attributes in the building\n",
        "parameters" : [ {
          "name" : "FilterAsset_id",
          "in" : "query",
          "description" : "pass an optional asset id to filter attributes for that asset",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of records to return. Default 25",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAttribute"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "tags" : [ "Asset Attributes" ],
        "summary" : "Adds attributes to assets",
        "operationId" : "addAssetAttributes",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InsertAssetAttribute"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "items created. Returns the Ids of the elements created for future reference"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          }
        }
      }
    },
    "/assetattributes/{id}" : {
      "get" : {
        "tags" : [ "Asset Attributes" ],
        "summary" : "Gets a single asset attribute filtered by Id",
        "operationId" : "getAssetAttribute",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the attribute to filter. Eg. \"/assetattributes/12796048\"",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAttribute"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/workorders/locations/{id}" : {
      "post" : {
        "tags" : [ "Work Orders" ],
        "summary" : "Create Workorders of rooms",
        "operationId" : "Locations",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "description" : "Id of room",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/workorderschecklists/" : {
      "get" : {
        "tags" : [ "Workorders Checklists" ],
        "summary" : "Get all checklists for an account",
        "operationId" : "getWorkorderschecklists",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/WorkorderChecklist"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Workorders Checklists" ],
        "summary" : "Uploads a checklist for an account",
        "operationId" : "postWorkorderchecklist",
        "requestBody" : {
          "content" : {
            "application/pdf" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "example" : "Checklist uploaded"
                }
              }
            }
          }
        }
      }
    },
    "/workorderschecklists/{id}" : {
      "delete" : {
        "tags" : [ "Workorders Checklists" ],
        "summary" : "Deletes a checklist in an account",
        "operationId" : "deleteWorkorderchecklist",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "example" : "25001"
                }
              }
            }
          }
        }
      }
    },
    "/modelingidentifiers/room/{id}" : {
      "get" : {
        "tags" : [ "Modeling Identifiers" ],
        "summary" : "Gets a single modelingidentifiers room filtered by Id",
        "operationId" : "getRoomModelingidentifiers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the modelingidentifier to filter. Eg. \"room/94591\"",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoomModelingidentifier"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/modelingidentifiers/asset/{id}" : {
      "get" : {
        "tags" : [ "Modeling Identifiers" ],
        "summary" : "Gets a single modelingidentifiers asset filtered by Id",
        "operationId" : "getAssetsModelingidentifiers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the modelingidentifier to filter. Eg. \"room/94591\"",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetModelingidentifier"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "UserCredentials" : {
        "type" : "object",
        "required" : [ "username", "password" ],
        "properties" : {
          "username" : {
            "type" : "string",
            "example" : "test_user"
          },
          "password" : {
            "type" : "string",
            "example" : "a!r4nd0m*p4ssw0rd"
          },
          "remember_me" : {
            "type" : "boolean",
            "example" : 1
          }
        }
      },
      "UserToken" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 654866
          },
          "username" : {
            "type" : "string",
            "example" : "test_user"
          },
          "first_name" : {
            "type" : "string",
            "example" : "John"
          },
          "last_name" : {
            "type" : "string",
            "example" : "Doe"
          },
          "email" : {
            "type" : "string",
            "example" : "john.doe@example.com"
          },
          "systemrole_id" : {
            "type" : "integer",
            "example" : 4
          },
          "active" : {
            "type" : "boolean",
            "example" : 1
          },
          "token" : {
            "type" : "string",
            "example" : "ed7d410bc4f4f23ac57f11b5cd61de7b1f8d3097"
          }
        }
      },
      "InsertSite" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "My awesome site"
          }
        }
      },
      "Site" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 123
          },
          "name" : {
            "type" : "string",
            "example" : "My awesome site"
          },
          "account_id" : {
            "type" : "integer",
            "example" : 12
          }
        }
      },
      "InsertBuilding" : {
        "type" : "object",
        "required" : [ "name", "site_id" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "My awesome building"
          },
          "site_id" : {
            "type" : "integer",
            "example" : 25
          }
        }
      },
      "Building" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 123
          },
          "name" : {
            "type" : "string",
            "example" : "My awesome building"
          },
          "site_id" : {
            "type" : "integer",
            "example" : 12
          }
        }
      },
      "InsertType" : {
        "type" : "array",
        "items" : {
          "required" : [ "assettype", "building_id", "description", "modelnumber", "name" ],
          "properties" : {
            "assettype" : {
              "type" : "string",
              "example" : "F | M"
            },
            "building_id" : {
              "type" : "integer",
              "example" : 375
            },
            "description" : {
              "type" : "string",
              "example" : "Description of the Cooling Tower X-3000"
            },
            "modelnumber" : {
              "type" : "string",
              "example" : "Z0628276_F"
            },
            "name" : {
              "type" : "string",
              "example" : "Cooling Tower X-3000"
            }
          }
        }
      },
      "Type" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 12345
          },
          "name" : {
            "type" : "string",
            "example" : "Cooling Tower X-3000"
          },
          "description" : {
            "type" : "string",
            "example" : "Description of the Cooling Tower X-3000"
          },
          "assettype" : {
            "type" : "string",
            "example" : "F"
          },
          "modelnumber" : {
            "type" : "string",
            "example" : "Z0628276_F"
          },
          "building_id" : {
            "type" : "integer",
            "example" : 375
          },
          "mantenible" : {
            "type" : "boolean",
            "example" : 1
          }
        }
      },
      "InsertAsset" : {
        "type" : "array",
        "items" : {
          "required" : [ "building_id", "description", "name", "type_id" ],
          "properties" : {
            "building_id" : {
              "type" : "integer",
              "example" : 375
            },
            "description" : {
              "type" : "string",
              "example" : "Description of the Cooling Tower X-3000 #1"
            },
            "name" : {
              "type" : "string",
              "example" : "Cooling Tower X-3000-1"
            },
            "type_id" : {
              "type" : "integer",
              "example" : 85556
            }
          }
        }
      },
      "Asset" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 12345
          },
          "name" : {
            "type" : "string",
            "example" : "Cooling Tower X-3000-1"
          },
          "type_id" : {
            "type" : "integer",
            "example" : 85556
          },
          "building_id" : {
            "type" : "integer",
            "example" : 375
          },
          "description" : {
            "type" : "string",
            "example" : "Description of the Cooling Tower X-3000 #1"
          }
        }
      },
      "InsertTypeAttribute" : {
        "type" : "array",
        "items" : {
          "required" : [ "name", "unit", "value", "type_id" ],
          "properties" : {
            "name" : {
              "type" : "string",
              "example" : "Attribute # 1"
            },
            "unit" : {
              "type" : "string",
              "example" : "Unit of measure like kg, volts, meters, seconds, etc."
            },
            "value" : {
              "type" : "string",
              "example" : "4.688"
            },
            "type_id" : {
              "type" : "integer",
              "example" : 85556
            }
          }
        }
      },
      "TypeAttribute" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 654895131
          },
          "type_id" : {
            "type" : "integer",
            "example" : 85556
          },
          "name" : {
            "type" : "string",
            "example" : "Attribute # 1"
          },
          "unit" : {
            "type" : "string",
            "example" : "Unit of measure like kg, volts, meters, seconds, etc."
          },
          "value" : {
            "type" : "string",
            "example" : "4.688"
          },
          "is_favourite" : {
            "type" : "boolean",
            "example" : 0
          }
        }
      },
      "InsertAssetAttribute" : {
        "type" : "array",
        "items" : {
          "required" : [ "name", "unit", "value", "asset_id", "is_favourite" ],
          "properties" : {
            "name" : {
              "type" : "string",
              "example" : "Attribute # 1"
            },
            "unit" : {
              "type" : "string",
              "example" : "Unit of measure like kg, volts, meters, seconds, etc."
            },
            "value" : {
              "type" : "string",
              "example" : "4.688"
            },
            "asset_id" : {
              "type" : "integer",
              "example" : 85556
            },
            "is_favourite" : {
              "type" : "boolean",
              "example" : 1
            }
          }
        }
      },
      "AssetAttribute" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 654895131
          },
          "asset_id" : {
            "type" : "integer",
            "example" : 85556
          },
          "name" : {
            "type" : "string",
            "example" : "Attribute # 1"
          },
          "unit" : {
            "type" : "string",
            "example" : "Unit of measure like kg, volts, meters, seconds, etc."
          },
          "value" : {
            "type" : "string",
            "example" : "4.688"
          },
          "is_favourite" : {
            "type" : "boolean",
            "example" : 1
          }
        }
      },
      "RoomModelingidentifier" : {
        "type" : "object",
        "properties" : {
          "2d" : {
            "type" : "string",
            "example" : "c82e0dd9-31e8-407e-a294-c30431c2fda3-000bb77f"
          }
        }
      },
      "AssetModelingidentifier" : {
        "type" : "object",
        "properties" : {
          "2d" : {
            "type" : "string",
            "example" : "c82e0dd9-31e8-407e-a294-c30431c2fda3-000bb77f"
          },
          "3d" : {
            "type" : "string",
            "example" : "c82e0dd9-31e8-407e-a294-c30431c2fda3-000bb77f"
          }
        }
      },
      "WorkorderChecklist" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "example" : 123456
          },
          "file_name" : {
            "type" : "string",
            "example" : "file.pdf"
          },
          "file_size" : {
            "type" : "string",
            "example" : "128 KB"
          }
        }
      }
    },
    "securitySchemes" : {
      "YoubimScheme" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "x-auth-token"
      }
    }
  }
}