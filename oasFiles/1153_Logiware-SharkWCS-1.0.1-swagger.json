{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "1.0.1",
    "title" : "SHARK WCS REST API",
    "description" : "The SHARK WCS REST API is a protocol that provides low-level access to\nthe devices controlled by SHARK WCS. It is defined in a way, that makes\nit easy to implement in most programming languages and thereby\nsupporting a simple integration into a Host System.\n\nMost commands are generic and hides as much as possible, the actually\nphysical device. This means that different types of vertical lifts and\nsimilar automats can be controlled with the same set of commands. \n\nThe interface can be tested from a standard Web Browser, thereby the\nfunctionality of the SHARK WCS can be tested and explored before the\nfinal integration is ready. A simulation mode is also available to test\nthe software before the actually hardware is installed.\n\nAs an alternative to use a Web Browser, the public domain tool \"curl\"\ncan be used from a command line, in a scripting languages for testing or\neven in a final implementation.\n\nThe Host does not have to maintain the physical position of the trays,\nthis is handled by SHARK WCS, it also knows what trays are the opening\nand it will automatically return trays or boxes if needed, this\nminimize the risk of crashes due to errors in the Host programming and\nmeans that the Host does not have to keep any state information of the\nmachine. \n",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "name" : "Logiware ApS",
      "email" : "support@logiware.dk",
      "url" : "http://sharkwms.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "http://localhost:8095"
  } ],
  "paths" : {
    "/wcs/device/automat/{module}/fetch" : {
      "get" : {
        "tags" : [ "Automat" ],
        "description" : "Get a tray or tote from an automat.\n\nIt is important to understand the concept of the command to get the\noptimal performance of the system. The carrier \\<number\\> is the one\nthat the operator is supposed to pick from. If the device is equipped\nwith picking light, this will be turned on for the specified carrier.\n\\<next\\> is the following carriers, sorted in the expected picking\norder.\n\nThe Host is expected to make this call for every pick/store transaction,\nin much cases it will not result in any physical movement, just change\nthe pick-by-light indicator to the right box. If there are more picks\nfrom the same box, it is completely legal to repeat the same call, it\nwill just be ignored.\n\nThe \"next\" list is used for automats, that supply turbo functionality\n(prefetch of trays).\n\nThe four “text” parameters can be used to display textual information on\nthe screen if available. If the text is formatted like\n\\<label\\>:\\<text\\>, it will change the name of the text label to\n\\<label\\> and display \\<text\\>. An example could be:\n\n text1=Article:011202\\&text2=Pick:5\n\nExamples for a vertical lift:\n\nTo get tray 3 in a vertical lift:\n\n```\n    http://localhost:8095/wcs/device/automat/a1/fetch?carrier=3\n```\n\nTo get tray 3 from opening\n    2:\n```\n    http://localhost:8095/wcs/device/automat/a1/fetch?carrier=3&opening=2\n```\n\n**Pointers**\n\nIf the vertical lift support pointers, this can be specified for the\nfetch command. The pointer value is given as an X and a Y value. Both\nare decimal numbers from 0 to 1. \n\n0,0 is the lower left corner.\n\n1,1 is the upper right corner.\n\n0.5,0.5 is the center of the tray.\n",
        "operationId" : "fetch",
        "parameters" : [ {
          "name" : "module",
          "in" : "path",
          "description" : "ID of pet to fetch",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "carrier",
          "in" : "query",
          "description" : "Carrier number",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "next",
          "in" : "query",
          "description" : "Optional list of the next carriers to fetch. Used for equipment that supports turbu/dual functionality or multiple carriers in the opening.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "opening",
          "in" : "query",
          "description" : "Opening number. If not specified, the default opening 1 is used.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pointer_x",
          "in" : "query",
          "description" : "If a pointer or light bar is supported, this is the X coordinates.",
          "required" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "pointer_y",
          "in" : "query",
          "description" : "If a pointer or light bar is supported, this is the Y coordinates.",
          "required" : false,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "text1",
          "in" : "query",
          "description" : "In combination with displays, this can be used to display text fields.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "text2",
          "in" : "query",
          "description" : "In combination with displays, this can be used to display text fields.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "text3",
          "in" : "query",
          "description" : "In combination with displays, this can be used to display text fields.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "text4",
          "in" : "query",
          "description" : "In combination with displays, this can be used to display text fields.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tilt",
          "in" : "query",
          "description" : "If the supports tilting of the tray.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully reponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusMessage"
                }
              }
            }
          }
        }
      }
    },
    "/wcs/device/automat/{module}/store" : {
      "get" : {
        "tags" : [ "Automat" ],
        "description" : "Return all carriers in the opening. Can be used to cleanup the opening,\nwhen the order is finished or if new carriers have been installed in the\nopening. If there are more than one opening, the opening number must be\nspecified, else the default opening is 1 and no parameters are\nneeded.\n",
        "parameters" : [ {
          "name" : "module",
          "in" : "path",
          "description" : "ID of pet to fetch",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "opening",
          "in" : "query",
          "description" : "2|3|4 (Opening number) (defalt is 1)",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully reponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusMessage"
                }
              }
            }
          }
        }
      }
    },
    "/wcs/device/automat/{module}/install" : {
      "get" : {
        "tags" : [ "Automat" ],
        "description" : "Place a carrier in a position in the opening. It will not start any\nphysical movement, only register the box is in the opening.\n\n>Note:\n>\n>If the specified carrier already is registered in another physical\n>location, *it will be removed from the other location*. This is a smart\n>way to clean up after, for example, mechanical problems, but it is very\n>important that the box actually is in the opening and the number is not\n>for some reason dublicated, because the previous location will be\n>regarded empty and reused for other carriers. Due to this it is also\n>highly recommended, that the box numbers are scanned and not entered\n>manually to prevent any typing errors.\n",
        "parameters" : [ {
          "name" : "module",
          "in" : "path",
          "description" : "ID of pet to fetch",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "opening",
          "in" : "query",
          "description" : "2|3|4 (Opening number) (defalt is 1)",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "carrier",
          "in" : "query",
          "description" : "Carrier number",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "position",
          "in" : "query",
          "description" : "Position in the opening",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "height",
          "in" : "query",
          "description" : "Height of the box in mm",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully reponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusMessage"
                }
              }
            }
          }
        }
      }
    },
    "/wcs/device/automat/{module}/returntray" : {
      "get" : {
        "tags" : [ "Automat" ],
        "description" : "Return the current tray/boxes/carrier from the opening. \nIt is recommended to use the *store* command instead.\n",
        "parameters" : [ {
          "name" : "module",
          "in" : "path",
          "description" : "ID of pet to fetch",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "opening",
          "in" : "query",
          "description" : "2|3|4 (Opening number) (defalt is 1)",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully reponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusMessage"
                }
              }
            }
          }
        }
      }
    },
    "/wcs/device/automat/{module}/getstate" : {
      "get" : {
        "tags" : [ "Automat" ],
        "description" : "Returns information about the specified opening and the positions of the\ncarrier(s). \n",
        "parameters" : [ {
          "name" : "module",
          "in" : "path",
          "description" : "ID of pet to fetch",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "opening",
          "in" : "query",
          "description" : "2|3|4 (Opening number) (defalt is 1)",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully reponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusMessage"
                }
              }
            }
          }
        }
      }
    },
    "/wcs/device/automat/{module}/getconfig" : {
      "get" : {
        "tags" : [ "Automat" ],
        "description" : "Returns information about all trays  installed in the machine and where\nthey are placed.\n",
        "parameters" : [ {
          "name" : "module",
          "in" : "path",
          "description" : "ID of pet to fetch",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully reponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusMessage"
                }
              }
            }
          }
        }
      }
    },
    "/wcs/picklist/order" : {
      "post" : {
        "tags" : [ "PickLists" ],
        "description" : "Send a pick list.",
        "requestBody" : {
          "description" : "Order to be picked.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully reponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusMessage"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "StatusMessage" : {
        "required" : [ "errorcode", "status", "message" ],
        "properties" : {
          "errorcode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "status" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "Order" : {
        "properties" : {
          "ordernumber" : {
            "type" : "string"
          },
          "ordertype" : {
            "type" : "integer"
          },
          "orderlines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderLine"
            }
          }
        }
      },
      "OrderLine" : {
        "properties" : {
          "articleNumber" : {
            "type" : "string"
          },
          "qty" : {
            "type" : "number"
          }
        }
      },
      "Error" : {
        "required" : [ "errorcode", "status", "message" ],
        "properties" : {
          "errorcode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "status" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    }
  }
}