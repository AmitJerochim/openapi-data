openapi: 3.0.0
info:
  description: |
    This is a sample Expense's API
  version: "0.5.0"
  title: shMag Expense
  contact:
    email: tak@oshiire.to
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /expenses:
    post:
      summary: Add a new expense
      operationId: addExpense
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Expense'
    put:
      summary: Update an existing expense
      operationId: updateExpense
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Expense not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Expense'
  '/expenses/{id}':
    get:
      summary: Find expense by ID
      description: Returns a single expense
      operationId: getExpenseById
      parameters:
        - name: id
          in: path
          description: ID of expense to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          description: Invalid ID supplied
        '404':
          description: Expense not found
    post:
      summary: Updates a expense in the store with form data
      operationId: updateExpenseWithForm
      parameters:
        - name: id
          in: path
          description: ID of expense that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '405':
          description: Invalid input
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                date:
                  description: Updated date of the expense
                  type: string
                type:
                  description: Updated type of the expense
                  type: string
                description:
                  description: Update description of the expense
                  type: string
                amount:
                  description: Update amount of the expense
                  type: number
    delete:
      summary: Deletes a expense
      operationId: deleteExpense
      parameters:
        - name: id
          in: path
          description: Expense id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Expense not found
  /user:
    post:
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The user email for login
          required: true
          schema:
            type: string
        - name: hash
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{id}':
    get:
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: The id that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /role:
    post:
      summary: Add role
      description: This can only be done by the logged in user.
      operationId: addRole
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        description: Created role object
        required: true
  '/role/{id}':
    get:
      summary: Get role by id
      operationId: getRoleById
      parameters:
        - name: id
          in: path
          description: The id that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      summary: Updated role
      description: This can only be done by the logged in user.
      operationId: updateRole
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid role supplied
        '404':
          description: Role not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      summary: Delete role
      description: This can only be done by the logged in user.
      operationId: deleteRole
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid role supplied
        '404':
          description: Role not found
  '/role/{user_id}':
    get:
      summary: Get role by user_id
      operationId: getRoleByUserId
      parameters:
        - name: user_id
          in: path
          description: The id that needs to be fetched.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user_id supplied
        '404':
          description: Role not found          
servers:
  - url: 'https://app.swaggerhub.com/apis/oshi/Expense/0.5.0'
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    Expense:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Expense'
      description: Expense object that needs to be added
      required: true
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        boss_id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        hash:
          type: string
          format: password
        deleted_at:
          type: string
          format: date
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: string
          format: uuid
        name:
         type: string
    Expense:
      type: object
      required:
        - id
        - user_id
        - date
        - type
        - amount
      properties:
        id:
          type: string
          format: uuid
        user_name:
          type: string
          example: 'sho kisaragi'
        user_id:
          type: string
          format: uuid
        date:
          type: string
          format: date
        type:
          type: string
          example: 'train'
        description:
          type: string
          example: 'reason of an expense'
