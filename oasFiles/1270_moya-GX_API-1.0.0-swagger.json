{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/moya/GX_API/1.0.0"
  }, {
    "description" : "GX Recommendation API",
    "url" : "https://{env}.gx.com/api/",
    "variables" : {
      "env" : {
        "default" : "sandbox",
        "description" : "Possible values. sandbox, fedev, autoqa, manualqa, staging, production"
      }
    }
  } ],
  "info" : {
    "description" : "Draft of GX Recommendation API",
    "version" : "1.0.0",
    "title" : "GX Recommendation APIm"
  },
  "tags" : [ {
    "name" : "general",
    "description" : "Operations available to the FE app."
  }, {
    "name" : "developers",
    "description" : "Operations available for debug/dev purposes."
  } ],
  "paths" : {
    "/user" : {
      "get" : {
        "tags" : [ "general" ],
        "summary" : "Retrieves user profile",
        "operationId" : "getUser",
        "description" : "Receives a JWT token from the Authentication service provider. Token will be decoded and user information returned.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Header_auth"
        } ],
        "responses" : {
          "200" : {
            "description" : "User information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User_profile"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/components/schemas/403"
          }
        }
      },
      "put" : {
        "tags" : [ "general" ],
        "summary" : "Creates a new user entry in the database",
        "description" : "We decode the auth token from the header, retrieve the user id from the authentication provider and create an entry in our database. All user information will be stored under this user identifier.\n",
        "operationId" : "putUser",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Header_auth"
        } ],
        "responses" : {
          "200" : {
            "description" : "User updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User_profile"
                }
              }
            }
          },
          "201" : {
            "description" : "User created"
          },
          "403" : {
            "$ref" : "#/components/schemas/403"
          }
        }
      },
      "patch" : {
        "tags" : [ "general" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/Header_auth"
        } ],
        "operationId" : "patchUser",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User_profile"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Latest version of user entry in the database",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User_profile"
                }
              }
            }
          },
          "403" : {
            "$ref" : "#/components/schemas/403"
          }
        }
      }
    },
    "/timeline" : {
      "get" : {
        "tags" : [ "general" ],
        "operationId" : "getTimeline",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Header_auth"
        }, {
          "in" : "query",
          "name" : "begin",
          "description" : "Start timestamp of the horizon window",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "end",
          "description" : "End timestamp of the horizon window",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "full",
          "description" : "Whether the API should return the entire user timeline (debugging purposes)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "in" : "query",
          "name" : "event_type",
          "description" : "If provided, it will only return events of the specified type",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/Event_type"
          }
        }, {
          "in" : "query",
          "name" : "app_version",
          "description" : "Latest timeline version the client has. Server will reply with latest one or 204 if already latest.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Latest user timeline",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Timeline"
                }
              }
            }
          },
          "204" : {
            "description" : "Client already have latest timeline version, no new content."
          }
        }
      }
    },
    "/timeline/events/{id}" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/Header_auth"
      }, {
        "in" : "path",
        "name" : "id",
        "description" : "Timeline event that is being modified",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "put" : {
        "tags" : [ "general" ],
        "operationId" : "putEvent",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Event"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Id of the created object"
          }
        }
      },
      "patch" : {
        "tags" : [ "general" ],
        "operationId" : "patchEvent",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Header_auth"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Event"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Latest event in the server"
          }
        }
      },
      "delete" : {
        "tags" : [ "general" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/Header_auth"
        } ],
        "operationId" : "deleteEvent",
        "responses" : {
          "200" : {
            "description" : "Confirmation that the event was deleted"
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "Header_auth" : {
        "in" : "header",
        "name" : "X-GX-Auth-Token",
        "description" : "Token received from the authentication provider.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "schemas" : {
      "403" : {
        "description" : "Forbidden"
      },
      "Timeline" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "string",
            "example" : "1"
          },
          "events" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Event"
            }
          }
        }
      },
      "Event" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-1234-4b01-90e6-d701748f0851"
          },
          "type" : {
            "$ref" : "#/components/schemas/Event_type"
          },
          "begin" : {
            "$ref" : "#/components/schemas/Datetime"
          },
          "end" : {
            "$ref" : "#/components/schemas/Datetime"
          },
          "source" : {
            "$ref" : "#/components/schemas/Source_type"
          },
          "state" : {
            "$ref" : "#/components/schemas/Event_state_type"
          }
        }
      },
      "User_profile" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "name" : {
            "type" : "string",
            "example" : "Joe Doe"
          },
          "height" : {
            "type" : "number",
            "example" : 1.78
          },
          "weight" : {
            "type" : "number",
            "example" : 60
          },
          "date_of_birth" : {
            "$ref" : "#/components/schemas/Datetime"
          },
          "diet" : {
            "$ref" : "#/components/schemas/Diet_type"
          },
          "gender" : {
            "$ref" : "#/components/schemas/Gender_type"
          },
          "unit_system" : {
            "$ref" : "#/components/schemas/Unit_system_type"
          },
          "target_bed_time" : {
            "type" : "string",
            "example" : "22:00"
          },
          "target_wake_time" : {
            "type" : "string",
            "example" : "06:00"
          },
          "color_preferences" : {
            "type" : "object",
            "properties" : {
              "wellness" : {
                "type" : "string",
                "example" : null
              },
              "compliance" : {
                "type" : "string",
                "example" : null
              },
              "workload" : {
                "type" : "string",
                "example" : null
              }
            }
          }
        }
      },
      "Datetime" : {
        "type" : "string",
        "format" : "datetime",
        "description" : "Datetime follows ISO8601 convention and is always in UTC",
        "example" : "1991-11-05T13:15:30Z"
      },
      "Diet_type" : {
        "type" : "string",
        "description" : "Type of user's diet",
        "enum" : [ "Omnivore", "Vegetarian", "Vegan", "No_gluten", "No_sugar" ]
      },
      "Source_type" : {
        "type" : "string",
        "enum" : [ "GX_API", "User", "Third_party" ]
      },
      "Event_type" : {
        "type" : "string",
        "enum" : [ "Activity", "Recommendation" ]
      },
      "Event_state_type" : {
        "type" : "string",
        "enum" : [ "Confirmed", "Not_confirmed", "Virtually_confirmed" ]
      },
      "Gender_type" : {
        "type" : "string",
        "enum" : [ "Male", "Female" ]
      },
      "Unit_system_type" : {
        "type" : "string",
        "default" : "Metric",
        "enum" : [ "US_customary", "Metric", "Imperial" ]
      }
    }
  }
}