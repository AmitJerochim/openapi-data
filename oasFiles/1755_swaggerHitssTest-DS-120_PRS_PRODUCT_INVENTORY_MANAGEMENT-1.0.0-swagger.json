{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Product Inventory",
    "description" : "**TMF API Reference : TMF 637 - Product Inventory Management**\n\nRelease : 19.0 - June 2019\n\n",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/swaggerHitssTest/DS-120_PRS_PRODUCT_INVENTORY_MANAGEMENT/1.0.0"
  }, {
    "url" : "https://serverRoot/tmf-api/productInventory/v4/"
  } ],
  "tags" : [ {
    "name" : "product"
  } ],
  "paths" : {
    "/product" : {
      "post" : {
        "tags" : [ "product" ],
        "summary" : "create or find Product objects",
        "description" : "This operation list or find Product entities",
        "operationId" : "createProduct",
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "A secure token chain that indicates that it is an authorized request.",
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "Bearer 00D2a0000008ePA!AQYAQI6JHrDSAjIWx4XVT6MGZniXJ5bT22xHgPoCn1ceutZ1bx0QhSGY5h2rh9noirIJNkw9Yqv8MQQy8NqB6VtfIOpz5MhN"
          }
        }, {
          "name" : "correlatorId",
          "in" : "header",
          "description" : "NB ID used to match the request with its corresponding SB asynchronous notification. The format should be like below: \n ASPID+yyyyMMddHHmmss+sequence(5 digits) \n Note:+ means concat \n The ASPID is the M2M indentifer, and its length is maximum 21 characters \n yyyyMMddHHmmss is the UTC time format. \n Sequence is an increased sequence, and its length is 5 digits.the sequence should be started with 00001 and end with 99999. \n Example: TP000002322017022409365100021",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "messageId",
          "in" : "header",
          "description" : "Transaction identity for each request",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "requestDate",
          "in" : "header",
          "description" : "Time and date the request is sent",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "targetSystem",
          "in" : "header",
          "description" : "The system where targets the request.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "originSystem",
          "in" : "header",
          "description" : "The system where is originated the request.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "country",
          "in" : "header",
          "description" : "Indicates the country to route. ISO 1366 – 3 character Example: MEX",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The Product to be created",
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "headers" : {
              "correlatorId" : {
                "description" : "NB ID used to match the request with its corresponding SB asynchronous notification. The format should be like below: \n ASPID+yyyyMMddHHmmss+sequence(5 digits) \n Note:+ means concat \n The ASPID is the M2M indentifer, and its length is maximum 21 characters \n yyyyMMddHHmmss is the UTC time format. \n Sequence is an increased sequence, and its length is 5 digits.the sequence should be started with 00001 and end with 99999. \n Example: TP000002322017022409365100021",
                "schema" : {
                  "type" : "string"
                }
              },
              "country" : {
                "description" : "Indicates the country to route. ISO 1366 – 3 character Example: MEX",
                "schema" : {
                  "type" : "string"
                }
              },
              "originSystem" : {
                "description" : "The system where is originated the request.",
                "schema" : {
                  "type" : "string"
                }
              },
              "requestDate" : {
                "description" : "Time and date the request is sent",
                "schema" : {
                  "type" : "string"
                }
              },
              "messageId" : {
                "description" : "Transaction identity for each request",
                "schema" : {
                  "type" : "string"
                }
              },
              "targetSystem" : {
                "description" : "The system where targets the request.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "headers" : {
              "correlatorId" : {
                "description" : "NB ID used to match the request with its corresponding SB asynchronous notification. The format should be like below: \n ASPID+yyyyMMddHHmmss+sequence(5 digits) \n Note:+ means concat \n The ASPID is the M2M indentifer, and its length is maximum 21 characters \n yyyyMMddHHmmss is the UTC time format. \n Sequence is an increased sequence, and its length is 5 digits.the sequence should be started with 00001 and end with 99999. \n Example: TP000002322017022409365100021",
                "schema" : {
                  "type" : "string"
                }
              },
              "country" : {
                "description" : "Indicates the country to route. ISO 1366 – 3 character Example: MEX",
                "schema" : {
                  "type" : "string"
                }
              },
              "originSystem" : {
                "description" : "The system where is originated the request.",
                "schema" : {
                  "type" : "string"
                }
              },
              "requestDate" : {
                "description" : "Time and date the request is sent",
                "schema" : {
                  "type" : "string"
                }
              },
              "messageId" : {
                "description" : "Transaction identity for each request",
                "schema" : {
                  "type" : "string"
                }
              },
              "targetSystem" : {
                "description" : "The system where targets the request.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericFault"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "headers" : {
              "correlatorId" : {
                "description" : "NB ID used to match the request with its corresponding SB asynchronous notification. The format should be like below: \n ASPID+yyyyMMddHHmmss+sequence(5 digits) \n Note:+ means concat \n The ASPID is the M2M indentifer, and its length is maximum 21 characters \n yyyyMMddHHmmss is the UTC time format. \n Sequence is an increased sequence, and its length is 5 digits.the sequence should be started with 00001 and end with 99999. \n Example: TP000002322017022409365100021",
                "schema" : {
                  "type" : "string"
                }
              },
              "country" : {
                "description" : "Indicates the country to route. ISO 1366 – 3 character Example: MEX",
                "schema" : {
                  "type" : "string"
                }
              },
              "originSystem" : {
                "description" : "The system where is originated the request.",
                "schema" : {
                  "type" : "string"
                }
              },
              "requestDate" : {
                "description" : "Time and date the request is sent",
                "schema" : {
                  "type" : "string"
                }
              },
              "messageId" : {
                "description" : "Transaction identity for each request",
                "schema" : {
                  "type" : "string"
                }
              },
              "targetSystem" : {
                "description" : "The system where targets the request.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericFault"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "headers" : {
              "correlatorId" : {
                "description" : "NB ID used to match the request with its corresponding SB asynchronous notification. The format should be like below: \n ASPID+yyyyMMddHHmmss+sequence(5 digits) \n Note:+ means concat \n The ASPID is the M2M indentifer, and its length is maximum 21 characters \n yyyyMMddHHmmss is the UTC time format. \n Sequence is an increased sequence, and its length is 5 digits.the sequence should be started with 00001 and end with 99999. \n Example: TP000002322017022409365100021",
                "schema" : {
                  "type" : "string"
                }
              },
              "country" : {
                "description" : "Indicates the country to route. ISO 1366 – 3 character Example: MEX",
                "schema" : {
                  "type" : "string"
                }
              },
              "originSystem" : {
                "description" : "The system where is originated the request.",
                "schema" : {
                  "type" : "string"
                }
              },
              "requestDate" : {
                "description" : "Time and date the request is sent",
                "schema" : {
                  "type" : "string"
                }
              },
              "messageId" : {
                "description" : "Transaction identity for each request",
                "schema" : {
                  "type" : "string"
                }
              },
              "targetSystem" : {
                "description" : "The system where targets the request.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericFault"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "headers" : {
              "correlatorId" : {
                "description" : "NB ID used to match the request with its corresponding SB asynchronous notification. The format should be like below: \n ASPID+yyyyMMddHHmmss+sequence(5 digits) \n Note:+ means concat \n The ASPID is the M2M indentifer, and its length is maximum 21 characters \n yyyyMMddHHmmss is the UTC time format. \n Sequence is an increased sequence, and its length is 5 digits.the sequence should be started with 00001 and end with 99999. \n Example: TP000002322017022409365100021",
                "schema" : {
                  "type" : "string"
                }
              },
              "country" : {
                "description" : "Indicates the country to route. ISO 1366 – 3 character Example: MEX",
                "schema" : {
                  "type" : "string"
                }
              },
              "originSystem" : {
                "description" : "The system where is originated the request.",
                "schema" : {
                  "type" : "string"
                }
              },
              "requestDate" : {
                "description" : "Time and date the request is sent",
                "schema" : {
                  "type" : "string"
                }
              },
              "messageId" : {
                "description" : "Transaction identity for each request",
                "schema" : {
                  "type" : "string"
                }
              },
              "targetSystem" : {
                "description" : "The system where targets the request.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericFault"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "headers" : {
              "correlatorId" : {
                "description" : "NB ID used to match the request with its corresponding SB asynchronous notification. The format should be like below: \n ASPID+yyyyMMddHHmmss+sequence(5 digits) \n Note:+ means concat \n The ASPID is the M2M indentifer, and its length is maximum 21 characters \n yyyyMMddHHmmss is the UTC time format. \n Sequence is an increased sequence, and its length is 5 digits.the sequence should be started with 00001 and end with 99999. \n Example: TP000002322017022409365100021",
                "schema" : {
                  "type" : "string"
                }
              },
              "country" : {
                "description" : "Indicates the country to route. ISO 1366 – 3 character Example: MEX",
                "schema" : {
                  "type" : "string"
                }
              },
              "originSystem" : {
                "description" : "The system where is originated the request.",
                "schema" : {
                  "type" : "string"
                }
              },
              "requestDate" : {
                "description" : "Time and date the request is sent",
                "schema" : {
                  "type" : "string"
                }
              },
              "messageId" : {
                "description" : "Transaction identity for each request",
                "schema" : {
                  "type" : "string"
                }
              },
              "targetSystem" : {
                "description" : "The system where targets the request.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericFault"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "headers" : {
              "correlatorId" : {
                "description" : "NB ID used to match the request with its corresponding SB asynchronous notification. The format should be like below: \n ASPID+yyyyMMddHHmmss+sequence(5 digits) \n Note:+ means concat \n The ASPID is the M2M indentifer, and its length is maximum 21 characters \n yyyyMMddHHmmss is the UTC time format. \n Sequence is an increased sequence, and its length is 5 digits.the sequence should be started with 00001 and end with 99999. \n Example: TP000002322017022409365100021",
                "schema" : {
                  "type" : "string"
                }
              },
              "country" : {
                "description" : "Indicates the country to route. ISO 1366 – 3 character Example: MEX",
                "schema" : {
                  "type" : "string"
                }
              },
              "originSystem" : {
                "description" : "The system where is originated the request.",
                "schema" : {
                  "type" : "string"
                }
              },
              "requestDate" : {
                "description" : "Time and date the request is sent",
                "schema" : {
                  "type" : "string"
                }
              },
              "messageId" : {
                "description" : "Transaction identity for each request",
                "schema" : {
                  "type" : "string"
                }
              },
              "targetSystem" : {
                "description" : "The system where targets the request.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericFault"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "headers" : {
              "correlatorId" : {
                "description" : "NB ID used to match the request with its corresponding SB asynchronous notification. The format should be like below: \n ASPID+yyyyMMddHHmmss+sequence(5 digits) \n Note:+ means concat \n The ASPID is the M2M indentifer, and its length is maximum 21 characters \n yyyyMMddHHmmss is the UTC time format. \n Sequence is an increased sequence, and its length is 5 digits.the sequence should be started with 00001 and end with 99999. \n Example: TP000002322017022409365100021",
                "schema" : {
                  "type" : "string"
                }
              },
              "country" : {
                "description" : "Indicates the country to route. ISO 1366 – 3 character Example: MEX",
                "schema" : {
                  "type" : "string"
                }
              },
              "originSystem" : {
                "description" : "The system where is originated the request.",
                "schema" : {
                  "type" : "string"
                }
              },
              "requestDate" : {
                "description" : "Time and date the request is sent",
                "schema" : {
                  "type" : "string"
                }
              },
              "messageId" : {
                "description" : "Transaction identity for each request",
                "schema" : {
                  "type" : "string"
                }
              },
              "targetSystem" : {
                "description" : "The system where targets the request.",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericFault"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "product"
      }
    }
  },
  "components" : {
    "schemas" : {
      "Product" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the product"
          },
          "externalId" : {
            "type" : "string",
            "description" : "Unique external identifier of the product"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the product"
          },
          "description" : {
            "type" : "string",
            "description" : "Is the description of the product. It could be copied from the description of the Product Offering."
          },
          "type" : {
            "type" : "string",
            "description" : "type of the product."
          },
          "isBundle" : {
            "type" : "boolean",
            "description" : "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
          },
          "isCustomerVisible" : {
            "type" : "boolean",
            "description" : "If true, the product is visible by the customer."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the product. It could be the same as the name of the product offering"
          },
          "orderDate" : {
            "type" : "string",
            "description" : "Is the date when the product was ordered",
            "format" : "date-time"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Is the date from which the product starts",
            "format" : "date-time"
          },
          "terminationDate" : {
            "type" : "string",
            "description" : "Is the date when the product was terminated",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "description" : "Is the lifecycle status of the product."
          },
          "state" : {
            "type" : "string",
            "description" : "Is the state of the product."
          },
          "action" : {
            "type" : "string",
            "description" : "action of resource product."
          },
          "createBy" : {
            "type" : "string",
            "description" : "createBy of resource product."
          },
          "lastUpdateDate" : {
            "type" : "string",
            "description" : "lastUpdateDate of resource product.",
            "format" : "date-time"
          },
          "billingAccount" : {
            "$ref" : "#/components/schemas/BillingAccountRef"
          },
          "place" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Place"
            }
          },
          "productCharacteristic" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Characteristic"
            }
          },
          "productOffering" : {
            "$ref" : "#/components/schemas/ProductOfferingRef"
          },
          "productPrice" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductPrice"
            }
          },
          "productTerm" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductTerm"
            }
          },
          "relatedParty" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "category" : {
            "type" : "array",
            "description" : "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
            "items" : {
              "$ref" : "#/components/schemas/CategoryRef"
            }
          },
          "realizingResource" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceRef"
            }
          },
          "productSpecification" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductSpecificationRef"
            }
          },
          "realizingService" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Service"
            }
          },
          "productOrderItem" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedProductOrderItem"
            }
          },
          "networkProduct" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NetworkProduct"
            }
          }
        },
        "description" : "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s)."
      },
      "RelatedProductOrderItem" : {
        "type" : "object",
        "properties" : {
          "orderItemAction" : {
            "type" : "string",
            "description" : "Action of the order item for this product"
          },
          "orderItemId" : {
            "type" : "string",
            "description" : "Identifier of the order item where the product was managed"
          },
          "productOrderHref" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "productOrderId" : {
            "type" : "string",
            "description" : "Unique identifier of a related entity."
          },
          "role" : {
            "type" : "string",
            "description" : "role of the product order item for this product"
          },
          "productOfferingQualification" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductOfferingQualificationRef"
            }
          },
          "quote" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuoteRef"
            }
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format" : "uri"
          },
          "@type" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType" : {
            "type" : "string",
            "description" : "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description" : "RelatedProductOrderItem (ProductOrder item) .The product order item which triggered product creation/change/termination."
      },
      "ProductOfferingQualificationRef" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "identifier"
          },
          "name" : {
            "type" : "string",
            "description" : "name"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format" : "uri"
          },
          "@type" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType" : {
            "type" : "string",
            "description" : "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "QuoteRef" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "identifier"
          },
          "externalId" : {
            "type" : "string",
            "description" : "external identifier"
          },
          "name" : {
            "type" : "string",
            "description" : "name"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format" : "uri"
          },
          "@type" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType" : {
            "type" : "string",
            "description" : "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "Service" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of a related entity."
          },
          "externalId" : {
            "type" : "string",
            "description" : "Unique external identifier of a related entity."
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the related entity."
          },
          "supportingService" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceRef"
            }
          },
          "externalReference" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ExternalReference"
            }
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format" : "uri"
          },
          "@type" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType" : {
            "type" : "string",
            "description" : "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description" : "Service reference, for when Service is used by other entities"
      },
      "ServiceRef" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of a related entity."
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the related entity."
          },
          "description" : {
            "type" : "string",
            "description" : "Name of the related entity."
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format" : "uri"
          },
          "@type" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType" : {
            "type" : "string",
            "description" : "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description" : "Service reference, for when Service is used by other entities"
      },
      "ExternalReference" : {
        "type" : "object",
        "properties" : {
          "externalReferenceType" : {
            "type" : "string",
            "description" : "Type of the external reference."
          },
          "name" : {
            "type" : "string",
            "description" : "External reference name."
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format" : "uri"
          },
          "@type" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          }
        },
        "description" : "External reference of the individual or reference in other system."
      },
      "ResourceRef" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of a related entity."
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the resource"
          },
          "value" : {
            "type" : "string",
            "description" : "The resource value that can be used to identify a resource with a public key (e.g.: a tel nr, an msisdn)"
          },
          "relatedParty" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "characteristic" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Characteristic"
            }
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format" : "uri"
          },
          "@type" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType" : {
            "type" : "string",
            "description" : "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "BillingAccountRef" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the billing account"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the billing account"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the billing account"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format" : "uri"
          },
          "@type" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "@referredType" : {
            "type" : "string",
            "description" : "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description" : "BillingAccount reference. A BillingAccount is a detailed description of a bill structure."
      },
      "Place" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the place"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the place"
          },
          "name" : {
            "type" : "string",
            "description" : "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
          },
          "address" : {
            "$ref" : "#/components/schemas/GeographicAddress"
          }
        },
        "description" : "Place reference. Place defines the places where the products are sold or delivered."
      },
      "GeographicAddress" : {
        "title" : "GeographicAddress",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the address"
          },
          "externalId" : {
            "type" : "string",
            "description" : "Unique identifier of the address in an external system"
          },
          "fullAddress" : {
            "type" : "string",
            "description" : "A denormalised string showing the type and position numbers up the hierarchy with separator characters."
          }
        },
        "description" : "A geographic address is a structured textual way of describing how to find a Property in an urban area (country properties are often defined differently)"
      },
      "Characteristic" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "identifier of the characteristic"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the characteristic"
          },
          "valueType" : {
            "type" : "string",
            "description" : "Data type of the value of the characteristic"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the characteristic"
          }
        },
        "description" : "Describes a given characteristic of an object or entity through a name/value pair."
      },
      "ProductOfferingRef" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of a related entity."
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the related entity."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the productOffering"
          },
          "isBundle" : {
            "type" : "boolean",
            "description" : "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
          },
          "lastUpdate" : {
            "type" : "string",
            "description" : "Date and time of the last update",
            "format" : "date-time"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status"
          },
          "productOfferingPrice" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductOfferingPriceRef"
            }
          },
          "category" : {
            "type" : "array",
            "description" : "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
            "items" : {
              "$ref" : "#/components/schemas/CategoryRef"
            }
          },
          "productSpecification" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductSpecificationRef"
            }
          },
          "bundledProductOffering" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductOfferingRef"
            }
          },
          "bucket" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UsageVolumeProduct"
            }
          },
          "networkProduct" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NetworkProduct"
            }
          },
          "productOfferingTerm" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductOfferingTerm"
            }
          },
          "prodSpecCharValueUse" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProdSpecCharValueUse"
            }
          }
        },
        "description" : "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information."
      },
      "ProductOfferingPriceRef" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of a related entity."
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the related entity."
          },
          "priceType" : {
            "type" : "string",
            "description" : "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
          },
          "recurringChargePeriodType" : {
            "type" : "string",
            "description" : "The period to repeat the application of the price\nCould be month, week..."
          },
          "recurringChargePeriodLength" : {
            "type" : "integer",
            "description" : "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
          },
          "unitOfMeasure" : {
            "$ref" : "#/components/schemas/Money"
          },
          "price" : {
            "$ref" : "#/components/schemas/Price"
          },
          "productOfferingTerm" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductOfferingTerm"
            }
          }
        },
        "description" : "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased"
      },
      "Price" : {
        "type" : "object",
        "properties" : {
          "taxRate" : {
            "type" : "number",
            "description" : "Tax rate",
            "format" : "float"
          },
          "dutyFreeAmount" : {
            "$ref" : "#/components/schemas/Money"
          },
          "taxIncludedAmount" : {
            "$ref" : "#/components/schemas/Money"
          },
          "percentage" : {
            "type" : "number",
            "description" : "Percentage to apply for ProdOfferPriceAlteration",
            "format" : "float"
          }
        },
        "description" : "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration."
      },
      "Money" : {
        "type" : "object",
        "properties" : {
          "unit" : {
            "type" : "string",
            "description" : "Currency (ISO4217 norm uses 3 letters to define the currency)"
          },
          "value" : {
            "type" : "number",
            "description" : "A positive floating point number",
            "format" : "float"
          }
        },
        "description" : "A base / value business entity used to represent money"
      },
      "CategoryRef" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of a related entity."
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the related entity."
          },
          "subCategory" : {
            "type" : "array",
            "description" : "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings.",
            "items" : {
              "$ref" : "#/components/schemas/CategoryRef"
            }
          }
        },
        "description" : "The category for grouping recommendations"
      },
      "ProdSpecCharValueUse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the associated productSpecCharacteristic"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the associated productSpecCharacteristic"
          },
          "description" : {
            "type" : "string",
            "description" : "A narrative that explains in detail what the productSpecCharacteristic is"
          },
          "valueType" : {
            "type" : "string",
            "description" : "A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          "value" : {
            "type" : "string",
            "description" : "Value that the characteristi"
          }
        },
        "description" : "A use of the ProdSpecCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProdSpecCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProdSpecCharValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics."
      },
      "ProductSpecificationRef" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of a related entity."
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the related entity."
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the product specification"
          },
          "productOffering" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductOfferingRef"
            }
          },
          "productConfigSpec" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductConfigSpec"
            }
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "characteristic" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Characteristic"
            }
          }
        },
        "description" : "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role."
      },
      "UsageVolumeProduct" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the bucket"
          },
          "name" : {
            "type" : "string",
            "description" : "Bucket name"
          },
          "duration" : {
            "$ref" : "#/components/schemas/Quantity"
          },
          "bucketBalance" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UsageVolumeBalance"
            }
          }
        },
        "description" : "A bucket (called UsageVolumeProduct in the SID model) represents a quantity of usage, as 2 hours national calls or 50 sms for example. It could be either a quantity or an amount in a currency (i.e. It could represent a fixed number of SMS, MMS, minutes of calls, quantity of data, number of events as well as a specific amount in a given currency). It requires one or more network products from which usages will debit the bucket."
      },
      "UsageVolumeBalance" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the balance"
          },
          "remainingValueName" : {
            "type" : "string",
            "description" : "Remaining value in a formatted string for the bucket given in the balance unit (for example 1.9 Gb). This formatted string could be used for display needs for example"
          },
          "remainingValue" : {
            "$ref" : "#/components/schemas/Quantity"
          },
          "duration" : {
            "$ref" : "#/components/schemas/Quantity"
          }
        },
        "description" : "The balance (called UsageVolumeBalance in the SID model) defines the remaining allowed product usage quantity in terms of volume, time, currency or events. It corresponds to the initial allowed usage quantity minus the usage consumed on the bucket."
      },
      "RelatedParty" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of a related entity."
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the related entity."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the related entity."
          },
          "role" : {
            "type" : "string",
            "description" : "Role played by the related party"
          },
          "identifierType" : {
            "type" : "string",
            "description" : "Tipe of identifier used to the party"
          },
          "partyProfile" : {
            "$ref" : "#/components/schemas/PartyProfile"
          }
        },
        "description" : "Related Entity reference. A related party defines party or party role linked to a specific entity."
      },
      "ProductPrice" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "A narrative that explains in detail the semantics of this product price."
          },
          "name" : {
            "type" : "string",
            "description" : "A short descriptive name such as \"Subscription price\"."
          },
          "priceType" : {
            "type" : "string",
            "description" : "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
          },
          "recurringChargePeriod" : {
            "type" : "string",
            "description" : "Could be month, week..."
          },
          "unitOfMeasure" : {
            "$ref" : "#/components/schemas/Money"
          },
          "price" : {
            "$ref" : "#/components/schemas/Price"
          },
          "productTerm" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductTerm"
            }
          }
        },
        "description" : "An amount, usually of money, that represents the actual price paid by a Customer for a purchase, a rent or a lease of a Product. The price is valid for a defined period of time."
      },
      "ProductConfigSpec" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "A narrative that explains in detail what the ConfigurationSpecification is."
          },
          "name" : {
            "type" : "string",
            "description" : "A word, term, or phrase by which the ConfigurationSpecification is known and distinguished from other ConfigurationSpecifications."
          },
          "value" : {
            "type" : "string",
            "description" : "Value of the ConfigurationSpecification"
          }
        },
        "description" : "The definition of how a Product operates or functions in terms of CharacteristicSpecification(s) and related ResourceSpec(s), ProductSpec(s), ServiceSpec(s)."
      },
      "ProductOfferingTerm" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the productOfferingTerm"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the productOfferingTerm"
          },
          "duration" : {
            "$ref" : "#/components/schemas/Quantity"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          }
        },
        "description" : "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods."
      },
      "PartyProfile" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "A unique identifier for the PartyProfile."
          },
          "name" : {
            "type" : "string",
            "description" : "A word, term, or phrase by which the characteristic is known and distinguished from characteristics."
          }
        },
        "description" : "A match between a Party and a PartyProfileType. It is based on matching PartyDemographics and other Party characteristics, such as use of a product, with the characteristics of a PartyProfileType."
      },
      "ProductTerm" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Description of the productTerm"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the productTerm"
          },
          "duration" : {
            "$ref" : "#/components/schemas/Quantity"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          }
        },
        "description" : "Description of a productTerm linked to this product. This represent a commitment with a duration"
      },
      "Quantity" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "Numeric value in a given unit",
            "format" : "float",
            "default" : 1.0
          },
          "units" : {
            "type" : "string",
            "description" : "Unit"
          }
        },
        "description" : "An amount in a given unit"
      },
      "NetworkProduct" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the network product"
          },
          "name" : {
            "type" : "string",
            "description" : "Network product name"
          },
          "type" : {
            "type" : "string",
            "description" : "Network product type"
          },
          "characteristic" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Characteristic"
            }
          }
        },
        "description" : "An instantiated network product (specialization of a product) subscribed by a customer."
      },
      "TimePeriod" : {
        "type" : "object",
        "properties" : {
          "endDateTime" : {
            "type" : "string",
            "description" : "End of the time period, using IETC-RFC-3339 format",
            "format" : "date-time"
          },
          "startDateTime" : {
            "type" : "string",
            "description" : "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end",
            "format" : "date-time"
          }
        },
        "description" : "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
      },
      "GenericFault" : {
        "required" : [ "latency", "messageUUID", "responseDate" ],
        "type" : "object",
        "properties" : {
          "messageUUID" : {
            "type" : "string",
            "description" : "ID of message"
          },
          "responseDate" : {
            "type" : "string",
            "description" : "Date of the response",
            "format" : "date-time"
          },
          "latency" : {
            "type" : "integer",
            "description" : "Time of the operation execution in milliseconds"
          },
          "errorList" : {
            "$ref" : "#/components/schemas/ErrorListType"
          }
        },
        "description" : "Error defined for detail the fault"
      },
      "ErrorListType" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DetailResType"
            }
          }
        },
        "description" : "List with the detail of the faults"
      },
      "DetailResType" : {
        "required" : [ "code", "description" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Application related code"
          },
          "severityLevel" : {
            "type" : "string",
            "description" : "Ifentifies the severity of the transaction"
          },
          "description" : {
            "type" : "string",
            "description" : "Text that explains the reason for error."
          },
          "actor" : {
            "type" : "string",
            "description" : "Response Actor."
          },
          "businessMeaning" : {
            "type" : "string",
            "description" : "Meaning of the response."
          }
        },
        "description" : "Error defined for detail the fault"
      }
    }
  }
}