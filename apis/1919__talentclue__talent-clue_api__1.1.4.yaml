openapi: 3.0.0
info:
  title: Talent Clue API
  version: "1.1.4"
  description: |

    **Autentication**

    For legacy reasons, this API has two distinct authentication methods:
    - Username & secret in the request payload
    - Bearer token

    In the documentation you will find which authentication method is needed for an specific endpoint.

    Contact [Talent Clue](https://talentclue.com) for your credentials.

  contact:
    name: Talent Clue
    url: https://talentclue.com

servers:
  - url: https://test.referup.com/api
    description: test
  - url: https://api.talentclue.com/api
    description: production

paths:
  /group/query:
    post:
      summary: List the user companies and all its subsidiaries
      tags:
        - Company
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: List of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: integer
                    desc:
                      type: string
                    role:
                      type: string
                example:
                  - code: 517
                    desc: 'Translion S.L. Brasil'
                    role: 'owner'
                  - code: 519
                    desc: 'Translion S.L. France'
                    role: 'owner'
                  - code: 580
                    desc: 'Translion S.L. UK'
                    role: 'owner'
  /industry/query:
    post:
      summary: List of available industries
      tags:
        - Taxonomy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
                - type: object
                  properties:
                    lang:
                      $ref:  '#/components/schemas/LanguageCode'
                      default: 'en'
              example:
                language: 'en'
      responses:
        '200':
          description: List of industries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxonomyTerm'
                example:
                  - code: 1
                    desc: 'Art and Design'
                  - code: 2
                    desc: 'Auditing and Consulting'
                  - code: 3
                    desc: 'Banking, insurance and finance'
                  - code: 4
                    desc: 'Consumer goods'
  /discipline/query:
    post:
      summary: List of available disciplines
      tags:
        - Taxonomy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
                - type: object
                  properties:
                    language:
                      $ref:  '#/components/schemas/LanguageCode'
                      default: 'en'
              example:
                language: 'en'
      responses:
        '200':
          description: List of disciplines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxonomyTerm'
                example:
                  - code: 20
                    desc: 'Design'
                  - code: 22
                    desc: 'Engineering'
                  - code: 23
                    desc: 'Finance'
                  - code: 24
                    desc: 'Human Resources'
  /country/query:
    post:
      summary: List of available countries
      tags:
        - Taxonomy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
                - type: object
                  properties:
                    language:
                      $ref:  '#/components/schemas/LanguageCode'
                      default: 'en'
              example:
                language: 'en'
      responses:
        '200':
          description: List of countries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxonomyTerm'
                example:
                  - code: 155
                    desc: 'Afghanistan'
                  - code: 362
                    desc: 'Spain'
                  - code: 393
                    desc: 'United States'
  /province/query:
    post:
      summary: List of available provinces/states for a given country
      tags:
        - Taxonomy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
                - type: object
                  properties:
                    language:
                      $ref:  '#/components/schemas/LanguageCode'
                      default: 'en'
                    country_id:
                      type: integer
              required:
                - country_id
              example:
                language: 'en'
                country_id: 160
      responses:
        '200':
          description: List of provincies/states for the country
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxonomyTerm'
                example:
                  - code: 1044
                    desc: 'Andorra La Vella'
                  - code: 1045
                    desc: 'Canillo'
                  - code: 1046
                    desc: 'Encamp'
                  - code: 1047
                    desc: 'La Massana'
  /salary/query:
    post:
      summary: List of available types and ranges for salaries
      tags:
        - Taxonomy
      requestBody:
        description: |

          # Examples

           ### Get _currency_ types

            _Request:_

              { "username": "yourUsername", "secret":"yourPassword", "type": "currency"}

            _Response:_

              [
                {
                  "code":7601,
                  "desc":"Euros"
                },
                {
                  "code":7602,
                  "desc":"Mexican Peso"
                }
              ]

          ### Get available _salaryTypes_

            _Request:_

              { "username": "yourUsername", "secret":"yourPassword", "type": "type", "currency": 7601}

            _Response:_

              [
                {
                  "code": 7612,
                  "desc": "Gross/day"
                },
                {
                  "code": 7611,
                  "desc": "Gross/hour"
                },
                {
                  "code": 7610,
                  "desc": "Gross/month"
                },
                {
                  "code": 7609,
                  "desc": "Gross/year"
                }
              ]

          ### Get _min/max_ for a given _currency_ and _salaryType_

            _Request:_

              { "username": "yourUsername", "secret":"yourPassword", "type": "max", "salaryType": 7612, "currency": 7601}

            _Response:_

              [
                {
                  "code": 7896,
                  "desc": "115000"
                },
                {
                  "code": 7689,
                  "desc": "116000"
                },
                {
                  "code": 7690,
                  "desc": "118000"
                }
              ]

          ### Use "desc" values for job creation fields "salarymin" and "salarymax"

          # Deprecated usages

          ### Get _min_/_max_ for _salaryType_ using [0..3] code in _salaryType_ is DEPRECATED. Use the code returned by the API.

              { "username": "yourUsername", "secret":"yourPassword", "type": "max", "salaryType": 3}

          ### Currency defaults to _Euros_ when not specified is DEPRECATED. Always provide a currency when needed.
          ----
          ----
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
                - type: object
                  properties:
                    language:
                      $ref:  '#/components/schemas/LanguageCode'
                      default: 'en'
                    type:
                      type: string
                      enum:
                        - max
                        - min
                        - currency
                        - type
                    salaryType:
                      type: integer
                    currency:
                      type: integer
              required:
                - type

      responses:
        '200':
          description: Salary types/currencies/min/max values (see endpoint description for details)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxonomyTerm'
  /jobclosing/query:
    post:
      summary: List of available job closing reasons
      tags:
        - Taxonomy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
                - type: object
                  properties:
                    language:
                      $ref:  '#/components/schemas/LanguageCode'
                      default: 'en'
              example:
                language: 'en'
      responses:
        '200':
          description: List of job closing reasons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxonomyTerm'
                example:
                  - code: 420
                    desc: 'Cancelled'
                  - code: 421
                    desc: 'External'
                  - code: 422
                    desc: 'Internal hiring'
  /job:
    post:
      summary: Create a job or clone for existing one
      tags:
        - Job
      requestBody:
        description: |

          # Examples

           ### Basic Job Creation

            _Request:_

              {
                "username": "yourUsername",
                "secret":"yourPassword",
                "job": {
                  "joblanguage": "es",
                  "group":517,
                  "title": "Marketing Manager"
                }
              }

            _Response:_

              [
                {
                  "response": {
                    "ref": null,
                    "tc_nid": "115020",
                    "tc_ref": "LJT6",
                    "tcjurl": "http://api.talentclue.com/es/node/115020",
                    "tc_job_url_preview": "http://app.talentclue.com/user/login?destination=/node/115020/preview",
                    "tc_job_url_edit": "http://app.talentclue.com/user/login?destination=/post/115020",
                    "tc_job_url_post": "http://app.talentclue.com/user/login?destination=/node/115020/edit",
                    "resp": "Job created successfully"
                  }
                }
              ]

          ### Clone Job

            _Request:_

              {
                "username": "yourUsername",
                "secret":"yourPassword",
                "job": {
                  "joblanguage": "es",
                  "group": 517,
                  "title": "Marketing Manager",
                  "clone_job": 123456,
                }
              }

            _Response:_

              [
                {
                  "response": {
                    "ref": "mark-man",
                    "tc_nid": "115022",
                    "tc_ref": "LJT0",
                    "tcjurl": "http://api.talentclue.com/es/node/115022",
                    "tc_job_url_preview": "http://app.talentclue.com/user/login?destination=/node/115022/preview",
                    "tc_job_url_edit": "http://app.talentclue.com/user/login?destination=/post/115022",
                    "tc_job_url_post": "http://app.talentclue.com/user/login?destination=/node/115022/edit",
                    "resp": "Job created successfully"
                  }
                }
              ]

          ### Clone Job And JobBoards specific information

            _Request:_

              {
                "username": "yourUsername",
                "secret":"yourPassword",
                "job": {
                  "joblanguage": "es",
                  "group": 517,
                  "title": "Marketing Manager",
                  "clone_job": 123456,
                  "clone_job_board_posts": true
                }
              }

            _Response:_

              [
                {
                  "response": {
                    "ref": "mark-man",
                    "tc_nid": "115022",
                    "tc_ref": "LJT0",
                    "tcjurl": "http://api.talentclue.com/es/node/115022",
                    "tc_job_url_preview": "http://app.talentclue.com/user/login?destination=/node/115022/preview",
                    "tc_job_url_edit": "http://app.talentclue.com/user/login?destination=/post/115022",
                    "tc_job_url_post": "http://app.talentclue.com/user/login?destination=/node/115022/edit",
                    "resp": "Job created successfully"
                  }
                }
              ]



          ### Job with salary data

            _Request:_

              {
                "username": "yourUsername",
                "secret":"yourPassword",
                "job": {
                  "joblanguage": "es",
                  "group":517, "title":
                  "Marketing Manager",
                  "currency": 7601,
                  "typeofsalary": 7609,
                  "salarymin": 8000,
                  "salarymax": 10000

                }
              }

            _Response:_

              [
                {
                  "response": {
                    "ref": null,
                    "tc_nid": "115021",
                    "tc_ref": "LJT9",
                    "tcjurl": "http://api.talentclue.com/es/node/115021",
                    "tc_job_url_preview": "http://app.talentclue.com/user/login?destination=/node/115021/preview",
                    "tc_job_url_edit": "http://app.talentclue.com/user/login?destination=/post/115021",
                    "tc_job_url_post": "http://app.talentclue.com/user/login?destination=/node/115021/edit",
                    "resp": "Job created successfully"
                  }
                }
              ]

          ### Job with all fields

            _Request:_

              {
                "username": "yourUsername",
                "secret":"yourPassword",
                "job": {
                  "joblanguage": "es",
                  "group": 517,
                  "title": "Marketing Manager",
                  "ref": "mark-man",
                  "industry": 1,
                  "discipline": 21,
                  "vacants": 3,
                  "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis ut eros luctus, cursus est at, hendrerit turpis. In hac habitasse platea dictumst. Ut vitae dolor mauris. Proin dolor nibh, mattis eget viverra in, dignissim eget erat.",
                  "country": 362,
                  "province": 1423,
                  "city": "Barcelona",
                  "typeofcontract": 61,
                  "currency": 7601,
                  "typeofsalary": 7609,
                  "salarymin": 8000,
                  "salarymax": 10000,
                  "typeofjourney": 54,
                  "confidential": 0,
                  "private": 0,
                  "requisites": "Praesent tristique vulputate metus id ultricies. Fusce tortor leo, tincidunt et mi a, mattis facilisis mauris. Phasellus vitae bibendum eros, sit amet finibus augue.",
                  "keywords": "Marketing, Manager",
                  "open_q":[
                    "Open question 1?",
                    "Open question 2?"
                  ],
                  "killer_q":[
                    {
                      "questions":"Killer question 1?",
                      "answers":[
                        [
                          "Answer 1",
                          "10"
                        ],
                        [
                          "Answer 2",
                          "8"
                        ],
                        [
                          "Answer 3",
                          "6"
                        ],
                        [
                          "Answer 4",
                          "4"
                        ],
                        [
                          "Answer 5",
                          "0"
                        ]
                      ]
                    }
                  ],
                  "visibilityoptions":{
                    "showcompany":1,
                    "showsalary":1
                  }
                }
              }

            _Response:_

              [
                {
                  "response": {
                    "ref": "mark-man",
                    "tc_nid": "115022",
                    "tc_ref": "LJT0",
                    "tcjurl": "http://api.talentclue.com/es/node/115022",
                    "tc_job_url_preview": "http://app.talentclue.com/user/login?destination=/node/115022/preview",
                    "tc_job_url_edit": "http://app.talentclue.com/user/login?destination=/post/115022",
                    "tc_job_url_post": "http://app.talentclue.com/user/login?destination=/node/115022/edit",
                    "resp": "Job created successfully"
                  }
                }
              ]
          ----
          ----
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
                - type: object
                  properties:
                    job:
                      type: object
                      properties:
                        ref:
                          type: string
                        clone_job:
                          type: integer
                        clone_job_board_posts:
                          type: boolean
                        group:
                          type: integer
                        title:
                          type: string
                        joblanguage:
                          type: string
                        industry:
                          type: integer
                        discipline:
                          type: integer
                        vacants:
                          type: integer
                        description:
                          type: string
                        country:
                          type: integer
                        province:
                          type: integer
                        city:
                          type: string
                        typeofcontract:
                          type: integer
                        currency:
                          type: integer
                        typeofsalary:
                          type: integer
                        salarymin:
                          type: integer
                          description: use TaxonomyTerm->desc values from salary/query -> Get min/max for a given currency and salaryType
                        salarymax:
                          type: integer
                          description: use TaxonomyTerm->desc values from salary/query -> Get min/max for a given currency and salaryType
                        typeofjourney:
                          type: integer
                        confidential:
                          type: integer
                        private:
                          type: integer
                        requisites:
                          type: string
                        keywords:
                          type: string
                        open_q:
                          type: object
                          items:
                            type: string
                        killer_q:
                          type: object
                          properties:
                            questions:
                              type: string
                            answers:
                              type: object
                              properties:
                                a:
                                  type: array
                                  items:
                                    type: string
                                v:
                                  type: array
                                  items:
                                    type: string
                                    enum:
                                      - 1
                                      - 2
                                      - 3
                                      - 4
                                      - 5
                                      - 6
                                      - 7
                                      - 8
                                      - 9
                                      - 10
                                      - 11
                                      - 12
                        labels:
                          type: object
                          items:
                            type: integer
                        visibilityoptions:
                          type: object
                          properties:
                            showsalary:
                              type: integer
                              enum:
                                - 0
                                - 1
                            showcompany:
                              type: integer
                              enum:
                                - 0
                                - 1
                      required:
                        - group
                        - title
                        - joblanguage
              example:
                job:
                  group: 517
                  title: 'Marketing Manager'
                  joblanguage: 'es'
      responses:
        '200':
          description: Job has been created
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    result:
                      $ref: '#/components/schemas/JobCreated'
  /job/unpublish/{channel}/{jobId}:
    post:
      summary: Unpublish job
      parameters:
        - in: path
          name: channel   # Note the name is the same as in the path
          required: true
          schema:
            $ref:  '#/components/schemas/ChannelMachinename'
          description: Job board machine name
        - in: path
          name: jobId   # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Job id
      tags:
        - Job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: Operation Status
          content:
            application/json:
              schema:
                items:
                  type: array
                  properties:
                    status:
                      type: string

                example:
                  - status: success
                  - code: 401
                    desc: 'Unauthorized'
                  - code: 406
                    desc: 'No valid JobId provided'
                  - code: 406
                    desc: 'Invalid Channel'
                  - code: 406
                    desc: 'Credentials not configured for channel'
                  - code: 500
                    desc: 'Internal error'
  /job/{jobId}/close:
    post:
      summary: Job close
      parameters:
        - in: path
          name: jobId   # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Job id
      tags:
        - Job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
                - type: object
                  properties:
                    job:
                      type: object
                      properties:
                        closereason:
                          type: integer
                        closecomments:
                          type: string
                      required:
                        - closereason
              example:
                job:
                  closereason: 420
                  closecomments: 'Oferta ya no válida'
      responses:
        '200':
          description: Operation Status
          content:
            application/json:
              schema:
                items:
                  type: array
                  properties:
                    status:
                      type: string
  /job/{jobId}/owner:
    post:
      summary: Retrieve job owner user data
      parameters:
        - in: path
          name: jobId   # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Job id
      tags:
        - Job
      responses:
        '200':
          description: The job owner data
          content:
            application/json:
              schema:
                type: object
                $ref:  '#/components/schemas/JobOwner'
        '404':
          description: If job or owner is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      errorcode:
                        type: integer
                        example: 404
                      description:
                        type: string
                        example: "Job owner user not found"
                      details:
                        type: string
                        example: "The job owner do not exists."
        '401':
          description: The current user is not authorized to see this job data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      errorcode:
                        type: integer
                        example: 401
                      description:
                        type: string
                        example: "Unauthorized"
                      details:
                        type: string
                        example: "The current user is not authorized to see this job data."
  /job/open/{jobId}:
    post:
      summary: Job open
      parameters:
        - in: path
          name: jobId   # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Job id
      tags:
        - Job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: Operation Status
          content:
            application/json:
              schema:
                items:
                  type: array
                  properties:
                    status:
                      type: string

                example:
                  - status: success
                  - code: 401
                    desc: 'Unauthorized'
                  - code: 406
                    desc: 'No valid JobId provided'
                  - code: 406
                    desc: 'Job already open'
                  - code: 406
                    desc: 'Reached maximum number of jobs opened'
                  - code: 500
                    desc: 'Internal error'
  /job/post/{channel}/{jobId}:
    post:
      summary: Post a Job in the especified Channel
      parameters:
        - in: path
          name: channel   # Note the name is the same as in the path
          required: true
          schema:
            $ref:  '#/components/schemas/ChannelMachinename'
          description: Job board machine name
        - in: path
          name: jobId   # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Job id
      tags:
        - Job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: Operation Status
          content:
            application/json:
              schema:
                items:
                  type: object
                  properties:
                    status:
                      type: string

                example:
                  - status: success
  /job/repost/{channel}/{jobId}:
    post:
      summary: Repost a Job in the especified Channel
      parameters:
        - in: path
          name: channel   # Note the name is the same as in the path
          required: true
          schema:
            $ref:  '#/components/schemas/ChannelMachinename'
          description: Job board machine name
        - in: path
          name: jobId   # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Job id
      tags:
        - Job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: Operation Status
          content:
            application/json:
              schema:
                items:
                  type: object
                  properties:
                    status:
                      type: string

                example:
                  - status: success

  /jobs/{jobId}/applicants:
    get:
      summary: Get applicants for a Job in a paginated list
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Job id
        - in: query
          name: query
          required: false
          schema:
            type: string
          description: |

            Filter the applicants. To filter by hiring status add one of the following options: hiring_status=applied, hiring_status=hired, hiring_status=in-process, hiring_status=shortlist, hiring_status=discarded

            Important: values should be urlencoded (ej: query=hiring_status%3Dshortlist)
          example: "hiring_status=applied"
        - in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 0
          description: "Specify the page of the applicant list. Default page: 0"
          example: 0
        - in: query
          name: per_page
          required: false
          schema:
            type: integer
            minimum: 1
          description: "Specify the number of applicants to return in one request, specified as an integer from 1 to 50. Default per_page: 10"
          example: 10

      tags:
        - Job
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/GetApplicationsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

        '400':
          $ref: '#/components/responses/BadRequest'

        '404':
          description: The {jobId} does not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:

    Authentication:
      properties:
        username:
          type: string
        secret:
          type: string
          format: password
      required:
        - username
        - secret
      example:
        username: yourUsername
        secret: yourPassword

    LanguageCode:
      type: string
      enum:
        - 'en'
        - 'es'
    ChannelMachinename:
      type: string
      enum:
        - 'my_website'
    TaxonomyTerm:
      type: object
      properties:
        code:
          type: integer
        desc:
          type: string
    JobCreated:
      type: object
      properties:
        ref:
          type: string
          nullable: true
        tc_ref:
          type: string
        tc_nid:
          type: integer
        tcjurl:
          type: string
          format: url
        tc_job_url_preview:
          type: string
          format: url
        tc_job_url_edit:
          type: string
          format: url
        tc_job_url_post:
          type: string
          format: url
        resp:
          type: string

    JobOwner:
      type: object
      properties:
        name:
          type: string
          example: "John"
        surname:
          type: string
          example: "Smith"
        email:
          type: string
          example: "john-smith@email.com"

    DiscardReason:
      type: object
      properties:
        id:
          type: string
          enum: ["NR", "KQ", 123, 321, "..."]
          example: "KQ"
          description: "Identifier of the Discard Reason. It will be KQ if the candidate has been discarded by killer questions, NR if there is no discard reason  or a numeric value if it is a company custom reason."
        reason:
          type: string
          example: "Discarded by Killer Questions"
          enum: ["No reason", "Discarded by Killer Questions", "Custom reason 1", "Custom reason N", "..."]

    GetApplicationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            "$ref": "#/components/schemas/Applications"
        meta:
          type: object
          properties:
            total:
              type: integer
              example: 127
              description: Total number of applicants
            page:
              type: integer
              example: 2
              description: Current page
            per_page:
              type: integer
              example: 50
              description: Number of applicants per page

    Applications:
      type: object
      properties:
        id:
          type: integer
          example: 123456
        hiringStatus:
          type: string
          example: "discarded"
          enum: ["discarded", "applicant", "in process", "shortlist", "hired"]
          description: "Status of the applicant in the job"
        discardReason:
          "$ref": "#/components/schemas/DiscardReason"
        candidate:
          "$ref": "#/components/schemas/Candidate"

    Candidate:
      type: object
      properties:
        id:
          type: integer
          example: 123456
        contact:
          "$ref": "#/components/schemas/Contact"
        personalData:
          "$ref": "#/components/schemas/PersonalData"
        residence:
          "$ref": "#/components/schemas/Residence"
        education:
          "$ref": "#/components/schemas/Education"
        labour:
          "$ref": "#/components/schemas/Labour"

    Contact:
      type: object
      properties:
        email:
          type: string
          example: "jdoe@talentclue.com"

    PersonalData:
      type: object
      properties:
        legalId:
          "$ref": "#/components/schemas/LegalId"
        name:
          "$ref": "#/components/schemas/Name"
        birth:
          type: string
          example: "1979-09-09"
          description: "YYYY-MM-DD format"

    Residence:
      type: object
      properties:
        country:
          type: string
          example: "es"
          description: "Country ISO Code"
        city:
          type: string
          example: "London"
    Education:
      type: object
      properties:
        academicDegree:
          type: string
          example: ""

    Labour:
      type: object
      properties:
        headLine:
          type: string
          example: "Cobol expert"

    LegalId:
      type: object
      properties:
        identity:
          type: string
          example: "123456789Z"
          description: "Identity card value"
        identityType:
          type: string
          example: "NIF"
          enum: ["NIF", "NIE", "Passport", "DUI", "IFE", "RUT","Citizenship card"]
          description: "Type of legal identity card"


    Name:
      type: object
      properties:
        name:
          type: string
          example: "Charles"
        surname:
          type: string
          example: "Cruselles"
        lastSurname:
          type: string
          example: "Marin"

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            errorcode:
              type: integer
              description: The http error code
            description:
              type: string
              description: Description of the error
            details:
              type: string
              description: Detailed description of the error

  responses:
    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequest:
      description: Bad request. Missing mandatory parameters or invalid values
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'