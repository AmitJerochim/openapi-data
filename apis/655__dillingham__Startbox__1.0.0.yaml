openapi: 3.0.1
info:
  version: 1.0.0
  title: Startbox
servers:
  - url: 'https://b51ff7d8-15d7-4be3-b763-293f670ce6b7.mock.pstmn.io'
    description: Postman Mock
paths:
  /auth/login:
    post:
      description: Authenticate the client app user
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/Login'
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: bCIE9BI9dAyjb5hjKNLh6W0WrYYPotGXHJIaItvhEGr52ZaG2bdS4svrAPvUe8A2QuDlMeTbtkhjLTv3
                      user:
                        $ref: '#/components/schemas/User'
  /auth/forgot-password:
    post:
      description: Request unauthenticated user password reset
      tags:
        - Auth
      security: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: jane@example.com
                password:
                  type: string
                  example: password
                confirm:
                  type: string
                  example: password
      responses:
        '200':
          $ref: '#/components/responses/Success'
  /auth/pin-login:
    post:
      description: Authenticate the client app user
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/PinLogin'
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: bCIE9BI9dAyjb5hjKNLh6W0WrYYPotGXHJIaItvhEGr52ZaG2bdS4svrAPvUe8A2QuDlMeTbtkhjLTv3
                      user:
                        $ref: '#/components/schemas/User'
  /auth/pin:
    post:
      description: Set a temporary PIN for the client app user
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/Pin'
      responses:
        '200':
          $ref: '#/components/responses/Success'
  /current-user:
    get:
      description: Get user info
      tags:
        - User
      responses:
        '200':
          description: A User object
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/User'
  /settings:
    put:
      description: Save userâ€™s settings
      tags:
        - Settings
      requestBody:
        $ref: '#/components/requestBodies/UserSettings'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
  /settings/password:
    put:
      description: Change authenticated user's password
      tags:
        - Settings
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                current:
                  type: string
                  example: old password
                new:
                  type: string
                  example: new password
                confirm:
                  type: string
                  example: new password
      responses:
        '200':
          $ref: '#/components/responses/Success'
  /facilities:
    get:
      description: Get facilities list
      tags:
        - Organizations
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacilityList'
  '/facilities/{id}/locations':
    get:
      description: Get location list
      tags:
        - Organizations
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationList'
  /today/patient:
    get:
      description: List of procedures with details for today
      tags:
        - Today
      parameters:
        - $ref: '#/components/parameters/Term'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientList'
  /today/procedures:
    get:
      description: List of patients with details for today
      tags:
        - Today
      parameters:
        - $ref: '#/components/parameters/Term'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: filter
          in: query
          required: false
          description: The select filter options
          schema:
            type: string
            enum:
              - scheduled
              - completed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcedureList'
  /patients:
    get:
      description: Get list of patients
      tags:
        - Patients
      parameters:
        - $ref: '#/components/parameters/Term'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientList'
    post:
      description: Create a patient
      tags:
        - Patients
      requestBody:
        $ref: '#/components/requestBodies/Patient'
      responses:
        '200':
          description: A patient object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Patient'
  '/patients/{id}':
    put:
      description: Update a patient
      tags:
        - Patients
      requestBody:
        $ref: '#/components/requestBodies/Patient'
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A patient object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Patient'
  '/patients/{id}/activity':
    get:
      description: Get list of patient activity
      tags:
        - Patients
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityList'
  '/patients/{id}/locations':
    get:
      description: Get list of patient locations
      tags:
        - Patients
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationList'
  '/patients/{id}/providers':
    get:
      description: Get list of patient providers
      tags:
        - Patients
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderList'
  /patient-scans:
    post:
      description: Scan & retrieve a patient
      tags:
        - Patients
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: A patient object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Patient'
  /procedures:
    get:
      description: List procedures
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/Term'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientList'
    post:
      description: Create a procedure
      tags:
        - Procedures
      requestBody:
        $ref: '#/components/requestBodies/Procedure'
      responses:
        '200':
          description: A procedure object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Procedure'
  '/procedures/{id}':
    put:
      description: Update a procedure
      tags:
        - Procedures
      requestBody:
        $ref: '#/components/requestBodies/Procedure'
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A procedure object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Procedure'
  '/procedures/{id}/archive':
    post:
      description: Create an archived procedure
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: An activity object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Activity'
    delete:
      description: Un-archive a procedure
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: An activity object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Activity'
  /procedure-statuses:
    get:
      description: List procedure statuses
      tags:
        - Procedures
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusList'
  '/procedures/{id}/activity':
    get:
      description: List a procedure's activity
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityList'
  '/procedures/{id}/statuses':
    post:
      description: Create a status update
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/ProcedureStatus'
      responses:
        '200':
          description: An activity object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Activity'
  '/procedures/{id}/signouts':
    post:
      description: Create procedure signout
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: An activity object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Activity'
  '/procedures/{id}/timeouts':
    post:
      description: Create procedure signout
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: An activity object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Activity'
  /no-gos:
    post:
      description: Create a no-go
      tags:
        - No-gos
      requestBody:
        $ref: '#/components/requestBodies/NoGo'
      responses:
        '200':
          description: A no-go object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NoGo'
  '/no-gos/{id}':
    put:
      description: Update a no-go
      tags:
        - No-gos
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/NoGo'
      responses:
        '200':
          description: A no-go object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NoGo'
  /scan/kit:
    post:
      description: Create kit pairing
      tags:
        - Scan / Pair
      requestBody:
        $ref: '#/components/requestBodies/ScanPair'
      responses:
        '200':
          description: A scan pair object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ScanPair'
  '/patients/{id}/kit':
    delete:
      description: Remove kit pairing
      tags:
        - Scan / Pair
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
  /scan/armband:
    post:
      description: Create armband pairing
      tags:
        - Scan / Pair
      requestBody:
        $ref: '#/components/requestBodies/ScanPair'
      responses:
        '200':
          description: A scan pair object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ScanPair'
  '/patients/{id}/armband':
    delete:
      description: Remove armband pairing
      tags:
        - Scan / Pair
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
  /scripts/procedure-decision:
    get:
      description: Create procedure decision script
      tags:
        - Scripts
      parameters:
        - $ref: '#/components/parameters/Patient'
      responses:
        '200':
          description: A script object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Script'
  /scripts/procedure-timeout:
    get:
      description: Create procedure timeout script
      tags:
        - Scripts
      parameters:
        - $ref: '#/components/parameters/Patient'
      responses:
        '200':
          description: A script object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Script'
  /training/resources:
    get:
      description: List training resources
      tags:
        - Training
      responses:
        '200':
          $ref: '#/components/responses/Success'
  /support:
    post:
      description: Create support ticket
      tags:
        - Support
      requestBody:
        $ref: '#/components/requestBodies/Support'
      responses:
        '200':
          $ref: '#/components/responses/Success'
components:
  schemas:
    ActivityList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Activity'
    Activity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          example: update
        creator:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
          example: '2020-02-02 00:00:00'
    FacilityList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Facility'
    Facility:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Facility 1
        created_at:
          type: string
          format: date-time
          example: '2020-02-02 00:00:00'
    LocationList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Location'
    Location:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Location 1
        created_at:
          type: string
          format: date-time
          example: '2020-02-02 00:00:00'
    NoGo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        reason:
          type: string
          example: laterality
          enum:
            - patient
            - procedure
            - site
            - laterality
        note:
          type: string
          example: Wrong laterality
        creator:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
          example: '2020-02-02 00:00:00'
    PatientList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Patient'
    Patient:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        first_name:
          type: string
          minLength: 3
          maxLength: 20
          example: Jane
        last_name:
          type: string
          minLength: 3
          maxLength: 20
          example: Doe
        dob:
          type: string
          example: 10/12/1988
        sex:
          type: string
          example: male
          enum:
            - male
            - female
            - other
        dod_identifier:
          type: integer
          example: 123456789
        created_at:
          type: string
          format: date-time
          example: '2020-02-02 00:00:00'
    ProcedureList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Procedure'
    Procedure:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: A procedure title
        description:
          type: string
          example: A procedure description
        laterality:
          type: integer
          enum:
            - 0
            - 1
            - 2
          example: 0
        script:
          type: string
          example: I am the script
        patient:
          $ref: '#/components/schemas/Patient'
        provider:
          $ref: '#/components/schemas/Provider'
        recording:
          $ref: '#/components/schemas/Recording'
        completed_at:
          type: string
          format: date-time
          example: '2020-03-02 00:00:00'
        scheduled_at:
          type: string
          format: date-time
          example: '2020-03-02 00:00:00'
        canceled_at:
          type: string
          format: date-time
          example: null
        archived_at:
          type: string
          format: date-time
          example: null
        created_at:
          type: string
          format: date-time
          example: '2020-02-02 00:00:00'
    ProviderList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Provider'
    Provider:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        first_name:
          type: string
          minLength: 3
          maxLength: 20
          example: Jane
        last_name:
          type: string
          minLength: 3
          maxLength: 20
          example: Doe
        created_at:
          type: string
          format: date-time
          example: '2020-02-02 00:00:00'
    Recording:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        path:
          type: string
          example: s3.eu-west-1.amazonaws.com/some/file.mp4
        type:
          type: string
          enum:
            - decision
            - signout
            - timeout
          example: decision
        created_at:
          type: string
          format: date-time
          example: '2020-02-02 00:00:00'
    ScanPair:
      type: object
      properties:
        patient:
          $ref: '#/components/schemas/Patient'
        barcode:
          type: string
          example: sdgsdgsdgsdgsdgsdgsdgsdgsdg
        creator:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
          example: '2020-02-02 00:00:00'
    Script:
      type: object
      properties:
        content:
          type: string
          example: These are words to read outloud
    StatusList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Status'
    Status:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: On-Hold
        creator:
          $ref: '#/components/schemas/User'
    UserSettings:
      type: object
      properties:
        data:
          type: object
          properties:
            default_location_id:
              type: integer
              example: 1
            default_today_view:
              type: string
              enum:
                - patients
                - procedures
                - last-visited
              example: patients
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        first_name:
          type: string
          minLength: 3
          maxLength: 20
          example: Jane
        last_name:
          type: string
          minLength: 3
          maxLength: 20
          example: Doe
        default_location_id:
          type: integer
          example: 1
        default_today_view:
          type: string
          example: patients
          enum:
            - patients
            - procedures
            - last-visited
        created_at:
          type: string
          format: date-time
          example: '2020-02-02 00:00:00'
  parameters:
    Id:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    Page:
      name: page
      in: query
      required: false
      description: The pagination parameter
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 1
    Patient:
      name: patient_id
      in: query
      required: false
      description: The patient id
      example: 1
      schema:
        type: integer
    PerPage:
      name: per_page
      in: query
      required: false
      description: The per page parameter
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
    Term:
      name: term
      in: query
      required: false
      description: A search term to query against
      example: Jane Doe
      schema:
        type: string
  responses:
    Success:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: If the request behaved as intended
                example: true
              message:
                type: string
                description: The response text
                example: OK
  requestBodies:
    Login:
      description: Login fields
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              email:
                type: string
                example: jane@example.com
              password:
                type: string
                example: password
    Pin:
      description: Pin login fields
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              pin:
                type: integer
                example: 1234
              confirm:
                type: integer
                example: 1234
    PinLogin:
      description: Pin login fields
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              email:
                type: string
                example: jane@example.com
              pin:
                type: integer
                example: 1234
    NoGo:
      description: No-go fields
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              procedure_id:
                type: integer
                example: 1
              reason:
                type: string
                example: laterality
                enum:
                  - patient
                  - procedure
                  - site
                  - laterality
              note:
                type: string
                example: Wrong laterality
    Patient:
      description: Patient fields
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              first_name:
                type: string
                minLength: 3
                maxLength: 20
                example: Jane
              last_name:
                type: string
                minLength: 3
                maxLength: 20
                example: Doe
              dob:
                type: string
                example: 10/12/1988
              sex:
                type: string
                example: male
                enum:
                  - male
                  - female
                  - other
              dod_identifier:
                type: integer
                example: 123456789
    Procedure:
      description: Pin login fields
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              title:
                type: string
                minLength: 5
                maxLength: 64
                example: A procedure title
              description:
                type: string
                minLength: 5
                maxLength: 64
                example: A procedure description
              script:
                type: string
                example: I am a script
              laterality:
                type: integer
                enum:
                  - 0
                  - 1
                  - 2
              patient_id:
                type: integer
                example: 1
              provider_id:
                type: integer
                example: 1
              location_id:
                type: integer
                example: 1
    ProcedureStatus:
      description: Pin login fields
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              status_id:
                type: integer
                example: 1
    ScanPair:
      description: Pin login fields
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              barcode:
                type: string
                example: adsfsdfgsdgsdgsdgsdg
              patient_id:
                type: integer
                example: 1
    UserSettings:
      description: Pin login fields
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              default_location_id:
                type: integer
                example: 1
              default_today_view:
                type: string
                enum:
                  - patients
                  - procedures
                  - last-visited
                example: patients
    Support:
      description: Pin login fields
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              message:
                type: string
                example: I see a bug
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []