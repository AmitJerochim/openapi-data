openapi: 3.0.0
info:
  title: AKI PAY DUCKBILL
  version: "1.0.0"
  description: Esta API consulta dados do cliente e efetua transações de credito/dinheiro para geração de cashback e o resgate do mesmo.Todas as chamadas devem ser feitas com o token no header, capturado na chamada authenticate, que pede usuário e senha do painel de controle web como parâmetros, e tem um tempo limitado de uso.
  contact:
    name: Jean Orlando
    email: jean@wemoga.com.br
    
paths:
  /health:
    get:
      summary: Health Check
      description: >-
        Returns if the API health is ok.
      responses:
        '200':
          description: Response OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'up'
  /authenticate:
    post:
      summary: Get Auth Token
      description: >-
        Retorna o nome da empresa e o token de authentificação.
        O email e a senha usados são os mesmo usados no portal para usuario Administrador (isAdmin ativo)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  company:
                    type: string
                    example: 'Duckbill'
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1ODM5NjYyNzAsImV4cCI6MTU4Mzk2OTg3MH0.2nEDoDK1KbqVPbM-aTW8yUpUhPPWJWprpXAXcjX1x6Q'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /cashback/{cpf}:
    get:
      summary: Consulta os dados de um cliente pelo cpf.
      parameters:
        - in: path
          name: cpf
          schema:
            type: string
          required: true
          description: cpf do cliente (sem simbolos)
      description: >-
        Consulta os dados de um cliente pelo cpf.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
  /cashback/credit:
    post:
      summary: 'Criar um transação de crédito/debito.'
      description: >-
        Cria uma transação de crédito/debito e gera cashback.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: integer
                  description: >-
                    Valor da compra. Atenção! O valor deve ser multiplicado por 100 e enviado como inteiro (ex. R$ 35,00 = 3500)
                  example: 3500
                cpf:
                  type: string
                  description: 'CPF do comprador'
                  example: '12345678910'
                salesman_cpf:
                  type: string
                  description: 'CPF do cliente'
                  example: '12345678911'
                qtd_offer:
                  type: integer
                  description: 'Quantos itens do ofertão existem na compra'
                  example: 0
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'ok'
                  data:
                    type: object
                    properties:
                      transaction_id: 
                        type: integer
                        example: 1
                      value: 
                        type: integer
                        example: 1146
                  msg:
                    type: string
                    example: 'Créditos gerados com sucesso'
                  offer:
                    $ref: '#/components/schemas/ErrorOffer'
                required:
                  - status
                  - data
                  - msg
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
  /cashback/money:
    post:
      summary: 'Cria uma transação em dinheiro.'
      description: >-
        Criar um transação em dinheiro e gerar cashback.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: integer
                  description: >-
                    Valor da compra. Atenção! O valor deve ser multiplicado por 100 e enviado como inteiro (ex. R$ 35,00 = 3500)
                  example: 3500
                cpf:
                  type: string
                  description: 'CPF do comprador'
                  example: '12345678910'
                salesman_cpf:
                  type: string
                  description: 'CPF do cliente'
                  example: '12345678911'
                qtd_offer:
                  type: integer
                  description: 'Quantos itens do ofertão existem na compra'
                  example: 0
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'ok'
                  data:
                    type: object
                    properties:
                      transaction_id: 
                        type: integer
                        example: 1
                      value: 
                        type: integer
                        example: 1146
                  msg:
                    type: string
                    example: 'Créditos gerados com sucesso'
                  offer:
                    $ref: '#/components/schemas/ErrorOffer'
                required:
                  - status
                  - data
                  - msg
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
  /cashback/rescue:
    post:
      summary: 'Resgatar cashback.'
      description: >-
        Resgatar cashback gerado anteriormente
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cpf:
                  type: string
                  description: 'CPF do comprador'
                  example: '12345678910'
                password:
                  type: string
                  format: password
                  description: 'Senha do comprador'
                  example: 'senha'
                salesman_cpf:
                  type: string
                  description: 'CPF do cliente'
                  example: '12345678911'
                value:
                  type: integer
                  description: >-
                    Valor da compra. Atenção! O valor deve ser multiplicado por 100 e enviado como inteiro (ex. R$ 35,00 = 3500)
                  example: 3500
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'ok'
                  data:
                    type: object
                    properties:
                      transaction_id: 
                        type: integer
                        example: 1
                      value: 
                        type: integer
                        example: 1146
                  msg:
                    type: string
                    example: 'Resgatado com sucesso'
                required:
                  - status
                  - data
                  - msg
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
                
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          description: 'Email do usuário'
          example: 'email@email.com'
        password:
          type: string
          description: 'Senha do usuário'
          format: password
          example: 'senha'
      required:
        - email
        - password
    Customer:
      type: object
      properties:
        customer_id:
          type: integer
          description: 'Id do cliente'
          example: 1
        name:
          type: string
          description: 'Nome'
          example: 'Nome'
        email:
          type: string
          description: 'Email'
          example: 'email@email.com'
        cpf:
          type: string
          description: 'CPF'
          example: '12345678910'
        birthday:
          type: string
          description: 'Aniversário'
          example: '1900-01-01T00:00:00.000Z'
        cellphone:
          type: string
          description: 'Telefone'
          example: '12234567890'
        points_blocked:
          type: integer
          description: 'Pontos bloqueados'
          example: 0
        points_exchange:
          type: integer
          description: 'Pontos Resgatados'
          example: 0
        points_fidelity:
          type: integer
          description: 'Pontos de Fidelidade'
          example: 0
      required:
        - customer_id
        - name
        - email
        - cpf
        - birthday
        - cellphone
        - points_blocked
        - points_exchange
        - points_fidelity
    ErrorOffer:
      type: object
      properties:
        error:
          type: string
          description: 'erro gerado ao tentar aplicar ofertão'
          example: 'offer ended'
        msg:
          type: string
          description: 'mensagem de erro ao tentar aplicar ofertão'
          example: 'Ofertão encerrado.'
      required:
        - error
        - msg
    ErrorMessage:
      type: object
      properties:
        error:
          type: string
          description: 'erro gerado'
          example: '[field] not found'
        msg:
          type: string
          description: 'mensagem de erro'
          example: '[campo] não encontrado'
      required:
        - error
    ErrorUnauthorized:
      type: object
      properties:
        error:
          type: string
          description: 'erro gerado'
          example: 'Token invalid'
      required:
        - error
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: URL BASE
    url: http://apiduckbill.akipay.com.br/api/v1/
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/wemoga/akipayapi/1.0.0
