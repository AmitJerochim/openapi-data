{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "v0.2",
    "title" : "Iris API Spec",
    "description" : "Iris API Spec as of beginning of May 2020 used for Proof of Concept"
  },
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/norima-sfi/IrisMobileApi/v0.2"
  } ],
  "security" : [ {
    "OAuth2" : [ "read", "write" ]
  } ],
  "paths" : {
    "/accounts/forgot_password" : {
      "post" : {
        "security" : [ ],
        "summary" : "Send user password reset email",
        "description" : "Sends the given email a password reset code, returns 200 even when email is not in DB",
        "tags" : [ "User" ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/200OK"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "error" : {
                      "type" : "string",
                      "description" : "Error code or error name",
                      "example" : "BadRequestError"
                    },
                    "errorMessage" : {
                      "type" : "string",
                      "description" : "A more descriptive error, may be user-facing?",
                      "example" : "Incorrectly formatted email"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/authorize" : {
      "get" : {
        "summary" : "Exchange credentials for Authorization Code to be exchanged for access code later",
        "tags" : [ "User" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "response_type",
          "description" : "Must be 'code' for this flow. indicates that your server expects to receive an authorization code",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "code"
          }
        }, {
          "in" : "query",
          "name" : "client_id",
          "description" : "The Client ID for the application",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "in" : "query",
          "name" : "redirect_uri",
          "description" : "Indicates the URL to return the user to after authorization is complete",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uri",
            "example" : "org.example.app://redirect"
          }
        }, {
          "in" : "query",
          "name" : "state",
          "description" : "A random string generated by your application, which youâ€™ll verify later",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "123456abcd"
          }
        }, {
          "in" : "query",
          "name" : "code_challenge",
          "description" : "A Base64-url-encoded string of the SHA256 hash of the cryptographically random code verifier. SHOULD NOT be plain code verifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "code_challenge_method",
          "description" : "Either plain or S256, depending on whether the challenge is the plain verifier string or the SHA256 hash of the string. If this parameter is omitted, the server will assume plain. SHOULD Be S256 though",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "S256"
          }
        } ],
        "responses" : {
          "302" : {
            "description" : "Success Redirect to be used by app",
            "headers" : {
              "Location" : {
                "schema" : {
                  "type" : "string",
                  "example" : "$redirect_uri/?code=$TheAuthorizationCode&state=$exactStateFromRequest"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/token" : {
      "post" : {
        "summary" : "Exchange authorization code for Access Token",
        "tags" : [ "User" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "grant_type",
          "description" : "grant type of this token request",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "authorization_code"
          }
        }, {
          "in" : "query",
          "name" : "code",
          "description" : "The authorizaton code obtained from redirect",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "ExampleAuthCode"
          }
        }, {
          "in" : "query",
          "name" : "redirect_uri",
          "description" : "Indicates the URL to return the user to after authorization is complete. Must be the same as before",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uri",
            "example" : "org.example.app://redirect"
          }
        }, {
          "in" : "query",
          "name" : "client_id",
          "description" : "The Client ID for the application",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "in" : "query",
          "name" : "code_verifier",
          "description" : "Cryptographically random key that was used to generate the code_challenge passed to /authorize",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tokens",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserTokens"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/revoke_token" : {
      "post" : {
        "summary" : "Log out by revoking the access token",
        "tags" : [ "User" ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "token" : {
                    "type" : "string"
                  },
                  "client_id" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/200OK"
          }
        }
      }
    },
    "/trackers" : {
      "get" : {
        "summary" : "Fetch all trackers a user can see",
        "description" : "Get a list of trackers a user can see",
        "tags" : [ "Trackers" ],
        "responses" : {
          "200" : {
            "description" : "List of trackers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tracker"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/trackers/{trackerId}/entry/{entryIndex}/layout" : {
      "get" : {
        "summary" : "Get Survey Page Format (Questions)",
        "description" : "Retrieve the questions to display on a page and any metadata. Separated from other fetch endpoint for optimization",
        "tags" : [ "Trackers" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/trackerId"
        }, {
          "$ref" : "#/components/parameters/entryIndex"
        } ],
        "responses" : {
          "200" : {
            "description" : "Layout for a survey page",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SurveyPage"
                }
              }
            }
          }
        }
      }
    },
    "/trackers/{trackerId}/entry/{entryIndex}" : {
      "get" : {
        "summary" : "Get Survey Page Details",
        "description" : "Fetch Questions and any responses for when page is viewed",
        "tags" : [ "Trackers" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/trackerId"
        }, {
          "$ref" : "#/components/parameters/entryIndex"
        } ],
        "responses" : {
          "200" : {
            "description" : "Questions and any responses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "questions" : {
                      "type" : "array",
                      "items" : {
                        "oneOf" : [ {
                          "$ref" : "#/components/schemas/QuestionText"
                        }, {
                          "$ref" : "#/components/schemas/QuestionMultipleChoice"
                        } ]
                      }
                    },
                    "responses" : {
                      "type" : "array",
                      "items" : {
                        "description" : "Each object in the array is a response to a questions in the survey page. Details depend on type of question.",
                        "oneOf" : [ {
                          "$ref" : "#/components/schemas/TextResponse"
                        }, {
                          "$ref" : "#/components/schemas/MultipleChoiceResponse"
                        } ]
                      }
                    }
                  }
                },
                "example" : "{\n    \"questions\": [{\n            \"id\": 0,\n            \"type\": \"multiplechoicequestion\",\n            \"is_queston\": true,\n            \"css_classes\": [],\n            \"display_title\": \"Worry Start\",\n            \"initially_visible\": true,\n            \"triggers\": [],\n            \"text_content\": \"Rate My Worry\",\n            \"display_style\": \"slider_display\",\n            \"answers\": [{\n                    \"answer_id\": 0,\n                    \"content\": 0,\n                    \"number\": 0,\n                    \"image\": \"https://i.imgur.com/F7yNM9i.png\",\n                    \"color\": \"#0f0\"\n                },\n                {\n                    \"answer_id\": 1,\n                    \"content\": 1,\n                    \"number\": 1,\n                    \"image\": \"https://i.imgur.com/205zdwH.png\",\n                    \"color\": \"#0f0\"\n                },\n                {\n                    \"answer_id\": 2,\n                    \"content\": 2,\n                    \"number\": 2,\n                    \"image\": \"https://i.imgur.com/syNngTE.png\",\n                    \"color\": \"#0f0\"\n                },\n                {\n                    \"answer_id\": 3,\n                    \"content\": 3,\n                    \"number\": 3,\n                    \"image\": \"https://i.imgur.com/O0HQGxY.png\",\n                    \"color\": \"#0f0\"\n                },\n                {\n                    \"answer_id\": 4,\n                    \"content\": \"4\",\n                    \"number\": \"4\",\n                    \"image\": \"https://i.imgur.com/1RxJSqq.png\",\n                    \"color\": \"#0f0\"\n                }\n            ]\n        },\n        {\n            \"id\": 1,\n            \"type\": \"multiplechoicequestion\",\n            \"is_question\": true,\n            \"css_classes\": [],\n            \"display_title\": \"Fav colours\",\n            \"text_content\": \"Favourite Colour?\",\n            \"initially_visible\": true,\n            \"triggers\": [],\n            \"display_style\": \"horizontal_display\",\n            \"answers\": [{\n                    \"answer_id\": 1,\n                    \"content\": \"Red\",\n                    \"number\": 2,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#f00\"\n                },\n                {\n                    \"answer_id\": 2,\n                    \"content\": \"Green\",\n                    \"number\": 3,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#0f0\",\n                    \"checked\": true\n                },\n                {\n                    \"answer_id\": 6,\n                    \"content\": \"Pinku\",\n                    \"number\": 3,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#f3e\",\n                    \"checked\": true\n                },\n                {\n                    \"answer_id\": 3,\n                    \"content\": \"Octarine\",\n                    \"number\": 78,\n                    \"image\": \"/path/to/image\",\n                    \"color\": \"#e4a500\"\n                },\n                {\n                    \"answer_id\": 4,\n                    \"content\": \"Seafoam\",\n                    \"number\": 3,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#00ffaa\",\n                    \"checked\": true\n                },\n                {\n                    \"answer_id\": 5,\n                    \"content\": \"Maroonish?\",\n                    \"number\": 3,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#834\",\n                    \"checked\": true\n                },\n                {\n                    \"answer_id\": 7,\n                    \"content\": \"Purple\",\n                    \"number\": 3,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#874092\",\n                    \"checked\": true\n                },\n                {\n                    \"answer_id\": 8,\n                    \"content\": \"Salmonish\",\n                    \"number\": 3,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#f67\",\n                    \"checked\": true\n                },\n                {\n                    \"answer_id\": 9,\n                    \"content\": \"Grey\",\n                    \"number\": 3,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#aaa\",\n                    \"checked\": true\n                }\n            ]\n        },\n        {\n            \"id\": 2,\n            \"type\": \"multiplechoicequestion\",\n            \"is_question\": true,\n            \"css_classes\": [],\n            \"display_title\": \"Fav colours\",\n            \"text_content\": \"Favourite RGB?\",\n            \"initially_visible\": true,\n            \"triggers\": [],\n            \"display_style\": \"default\",\n            \"answers\": [{\n                    \"answer_id\": 1,\n                    \"content\": \"Red\",\n                    \"number\": 2,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#f00\"\n                },\n                {\n                    \"answer_id\": 2,\n                    \"content\": \"Green\",\n                    \"number\": 3,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#0f0\",\n                    \"checked\": true\n                },\n                {\n                    \"answer_id\": 6,\n                    \"content\": \"Blue\",\n                    \"number\": 3,\n                    \"image\": \"path/to/image\",\n                    \"color\": \"#00f\",\n                    \"checked\": true\n                }\n            ]\n        },\n        {\n            \"id\": 3,\n            \"type\": \"textquestion\",\n            \"is_question\": true,\n            \"css_classes\": [],\n            \"column_width\": 0,\n            \"text_content\": \"Nagging Question\",\n            \"initially_visible\": true,\n            \"triggers\": [],\n            \"text_content\": \"Are we there yet?\",\n            \"text_area\": false,\n            \"required\": false\n        },\n        {\n            \"id\": 4,\n            \"type\": \"textquestion\",\n            \"is_question\": true,\n            \"css_classes\": [],\n            \"column_width\": 0,\n            \"display_title\": \"Placeholder required?\",\n            \"initially_visible\": true,\n            \"triggers\": [],\n            \"text_content\": \"Is this required?\",\n            \"text_area\": false,\n            \"required\": true\n        },\n        {\n            \"id\": 5,\n            \"type\": \"textquestion\",\n            \"is_question\": true,\n            \"css_classes\": [],\n            \"column_width\": 0,\n            \"display_title\": \"Long question\",\n            \"initially_visible\": true,\n            \"triggers\": [],\n            \"text_content\": \"This is a super long question with lots of detail. Why is it so long? I don't know, but will it wrap nicely?\",\n            \"text_area\": false,\n            \"required\": true\n        }\n    ],\n    \"responses\": []\n}\n"
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Submit responses",
        "tags" : [ "Trackers" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/trackerId"
        }, {
          "$ref" : "#/components/parameters/entryIndex"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "completed" : {
                    "type" : "string",
                    "format" : "date-time",
                    "description" : "The timestamp when the user hit Save",
                    "example" : "2020-12-31T12:32:45Z"
                  },
                  "retrieved" : {
                    "type" : "string",
                    "format" : "date-time",
                    "description" : "The timestamp when the survey page was requested. Useful for diffs in Phase 2 with offline",
                    "example" : "2020-12-31T12:32:45Z"
                  },
                  "responses" : {
                    "type" : "array",
                    "description" : "List of the question Ids with the associated answer values.",
                    "items" : {
                      "oneOf" : [ {
                        "$ref" : "#/components/schemas/TextResponse"
                      }, {
                        "$ref" : "#/components/schemas/MultipleChoiceResponse"
                      } ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/200OK"
          }
        }
      }
    },
    "/theme" : {
      "get" : {
        "security" : [ ],
        "summary" : "Get Theme document",
        "description" : "Retrieves CSS file to turn into app theme",
        "tags" : [ "IRIS Instance Configuration" ],
        "responses" : {
          "200" : {
            "description" : "The Theme CSS file",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "example" : "{\n  \"text\": { \n    \"header_tagline\": \"SFI\",\n    \"additional_less\": \"/*lessdata*/\"\n  },\n  \"theme_chain\": [\n    \"base\", \n    \"modern\"\n  ], \n  \"less_variables\": {\n    \"bodyBackgroundLightContrast\": \"#f5f5f5\", \n    \"bannerBackground\": \"#2A2F7C\", \n    \"demoBarColor\": \"#444444\", \n    \"primaryColor\": \"#2A2F7C\", \n    \"useBanner\": \"False\", \n    \"endSolidColorPosition\": \"65%\", \n    \"fontFamily\": \"\\\"Roboto\\\",\", \n    \"primaryMenuTextColor\": \"#2A2F7C\", \n    \"bodyBackground\": \"#ffffff\", \n    \"menuFontSize\": \"14px\", \n    \"tableSectionFooterBackgroundHover\": \"#ededed\", \n    \"contrastTextColor\": \"#555555\", \n    \"transparencyPosition\": \"100%\", \n    \"useIcons\": \"False\", \n    \"tableSectionHeaderBackground\": \"#f2f2f2\", \n    \"menuFontWeight\": \"500\", \n    \"menuBackgroundColor\": \"#2A2F7C\", \n    \"h1HeadingColor\": \"#2A2F7C\", \n    \"bannerFileName\": \"\\\"None\\\"\", \n    \"tableSectionFooterBackground\": \"#f5f5f5\", \n    \"linkColor\": \"#1d2156\", \n    \"logoFileName\": \"\\\"logo.png\\\"\", \n    \"textColor\": \"#333333\", \n    \"wellBackgroundColor\": \"#eeeeee\", \n    \"demoBarTopStripeColor\": \"#2c2c2c\", \n    \"subtleTextColor\": \"#999999\", \n    \"headingsColor\": \"#444444\", \n    \"linkColorHover\": \"#171943\", \n    \"baseFontSize\": \"13px\",\n    \"headingsFontWeight\": \"bold\", \n    \"secondaryColor\": \"#A9AE37\", \n    \"subtleLineColor\": \"#dfdfdf\", \n    \"gradientAngle\": \"90deg\", \n    \"tableSectionHeaderBackgroundHover\": \"#eaeaea\", \n    \"menuFontFamily\": \"\\\"Roboto\\\",\", \n    \"primaryMenuIconColor\": \"#2A2F7C\", \n    \"bodyBackgroundVeryLightContrast\": \"#f9f9f9\", \n    \"secondaryMenuIconColor\": \"#2A2F7C\", \n    \"headingsFontFamily\": \"inherit\"\n  }, \n  \"extends\": \"base\"\n}\n"
                }
              },
              "text/css" : {
                "schema" : {
                  "type" : "string",
                  "format" : "css",
                  "example" : "html {\n  margin: 0;\n  padding: 0;\n}\n"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "UserTokens" : {
        "type" : "object",
        "description" : "Tokens returned by the token exchange endpoint. May contain more properties such as expiry timestamps.",
        "properties" : {
          "access_token" : {
            "type" : "string",
            "description" : "Token used for most requests",
            "example" : "my_access_token"
          },
          "refresh_token" : {
            "type" : "string",
            "description" : "Token used to get a new access token",
            "example" : "my_refresh_token"
          },
          "token_type" : {
            "type" : "string",
            "description" : "The type of token",
            "example" : "Bearer"
          }
        }
      },
      "SurveyPage" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "'tracker' is the only value for Phase 1",
            "example" : "tracker"
          },
          "contents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BaseContent"
            }
          }
        }
      },
      "Answer" : {
        "type" : "object",
        "description" : "Available answer for a question (for multiple choice primarily)",
        "properties" : {
          "answer_id" : {
            "type" : "integer",
            "description" : "Not 'id' to avoid reserved name issues"
          },
          "content" : {
            "type" : "string"
          },
          "number" : {
            "type" : "integer",
            "description" : "details TBD"
          },
          "image" : {
            "type" : "string",
            "format" : "uri",
            "description" : "relative url to the image to show"
          },
          "color" : {
            "type" : "string",
            "format" : "hex",
            "description" : "Hex colour to use"
          }
        }
      },
      "BaseContent" : {
        "type" : "object",
        "description" : "",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "",
            "enum" : [ "text", "pagebreakquestion", "textquestion", "multiplechoicequestion" ]
          },
          "id" : {
            "type" : "integer",
            "description" : "identifier for this content"
          },
          "is_question" : {
            "type" : "boolean",
            "description" : "Useful for classifying content quickly."
          },
          "css_classes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "column_width" : {
            "type" : "integer",
            "minimum" : 0,
            "maximum" : 100
          },
          "display_title" : {
            "type" : "string",
            "description" : "Unused by the user-facing client. Used by the web view for admins to represent the content fragment."
          },
          "initially_visible" : {
            "type" : "boolean",
            "description" : "Initial visibility state of the content. Expose triggers may make this visible later."
          },
          "triggers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Trigger"
            }
          }
        }
      },
      "Text" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseContent"
        }, {
          "type" : "object",
          "properties" : {
            "content" : {
              "oneOf" : [ {
                "type" : "string",
                "format" : "html"
              }, {
                "$ref" : "#/components/schemas/SmartContent"
              } ]
            },
            "avatar_uri" : {
              "type" : "string",
              "format" : "uri",
              "example" : "https://media.example.com/avatar_1.png"
            }
          }
        } ]
      },
      "QuestionBase" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseContent"
        }, {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string"
            },
            "text_content" : {
              "description" : "The label for the question, appears above the input fields (text, checkboxes, slider, etc)",
              "oneOf" : [ {
                "type" : "string"
              }, {
                "$ref" : "#/components/schemas/SmartContent"
              } ]
            },
            "required" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "QuestionPageBreak" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QuestionBase"
        } ]
      },
      "QuestionText" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QuestionBase"
        }, {
          "type" : "object",
          "properties" : {
            "text_area" : {
              "type" : "boolean",
              "description" : "Full text area (true) or one-liner (false)"
            }
          }
        } ]
      },
      "QuestionMultipleChoice" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QuestionBase"
        }, {
          "type" : "object",
          "properties" : {
            "display_style" : {
              "type" : "string",
              "description" : "Full text area (true) or one-liner (false)",
              "enum" : [ "default_display", "select_menu", "slider_display", "horizontal_display" ]
            },
            "answers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Answer"
              }
            },
            "triggers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Trigger"
              }
            }
          }
        } ]
      },
      "Entry" : {
        "type" : "object",
        "description" : "placeholder",
        "properties" : {
          "entry_id" : {
            "type" : "integer"
          },
          "entry_index" : {
            "type" : "integer"
          },
          "entry_date" : {
            "type" : "string",
            "format" : "datetime"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "complete", "empty", "partial" ]
          },
          "color_code" : {
            "type" : "string",
            "format" : "hex",
            "example" : "#f0f0f0"
          },
          "image_url" : {
            "type" : "string",
            "description" : "Relative path url to an image",
            "example" : "/images/1.png"
          }
        }
      },
      "Tracker" : {
        "type" : "object",
        "properties" : {
          "tracker_id" : {
            "type" : "integer",
            "description" : "Unique identifier for tracker. Int or string or UUID?"
          },
          "title" : {
            "type" : "string",
            "description" : "Name of Tracker to display to user"
          },
          "treatment_package" : {
            "type" : "object",
            "description" : "TBD",
            "properties" : {
              "package_id" : {
                "type" : "integer",
                "description" : "Unique identifer for the package"
              },
              "name" : {
                "type" : "string",
                "description" : "Name of the treatment package"
              }
            }
          },
          "entries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Entry"
            }
          }
        }
      },
      "Trigger" : {
        "type" : "object",
        "properties" : {
          "trigger_type" : {
            "type" : "string",
            "enum" : [ "ExposeContent" ]
          },
          "answers" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "description" : "The ID of the Multiple Choice Answer which activates the trigger."
            }
          },
          "contents" : {
            "description" : "List of Content to expose when one of the answers is selected",
            "type" : "array",
            "items" : {
              "type" : "integer",
              "description" : "ID of in-page Content"
            }
          }
        }
      },
      "BaseResponse" : {
        "description" : "The response for the associated question",
        "properties" : {
          "question_id" : {
            "type" : "integer"
          }
        }
      },
      "TextResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseResponse"
        }, {
          "type" : "object",
          "properties" : {
            "value" : {
              "type" : "string",
              "description" : "The response typed by the user"
            }
          }
        } ]
      },
      "MultipleChoiceResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseResponse"
        }, {
          "type" : "object",
          "properties" : {
            "value" : {
              "type" : "array",
              "description" : "The IDs of each Answer selected.",
              "items" : {
                "type" : "integer"
              }
            }
          }
        } ]
      },
      "SmartContent" : {
        "type" : "object",
        "description" : "Interpolation string with values to interpolate.",
        "properties" : {
          "string_template" : {
            "type" : "string",
            "example" : "Hello, ${pipe25}! It is ${pipe1}"
          },
          "mapping" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "pattern" : "^pipe\\d$",
              "example" : {
                "pipe25" : "World",
                "pipe1" : "2020-05-05 Tuesday"
              }
            }
          }
        }
      }
    },
    "parameters" : {
      "trackerId" : {
        "name" : "trackerId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      },
      "entryIndex" : {
        "name" : "entryIndex",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      }
    },
    "responses" : {
      "500InternalError" : {
        "description" : "Internal Server Error"
      },
      "200OK" : {
        "description" : "Simple OK response",
        "content" : {
          "text/plain" : {
            "schema" : {
              "type" : "string",
              "example" : "OK"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "OAuth2" : {
        "type" : "oauth2",
        "description" : "Authorization Code flow with PKCE",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://example.com/oauth/authorize",
            "tokenUrl" : "https://example.com/oauth/token",
            "scopes" : {
              "read" : "Grants read access",
              "write" : "Grants write access"
            }
          }
        }
      }
    }
  }
}