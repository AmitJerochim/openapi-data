openapi: 3.0.0
info:
  version: "1.2.0"
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  title: Hilbert Backend
  description: APIs for backend
servers: 
 - url: 'https://hilbert.himkwtn.me'
tags:
  - name: auth
    description: registration and log in
  - name: guest
    description: guest profile management
  - name: reservation
    description: Searching and making reservation
  - name: door
    description: door operation
  - name: checkIn
    description: check-in at the kiosk
  - name: admin
    description: admin management system

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: register new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstname
                - lastname
                - nationID
                - phone
                - address
              properties:
                email:
                  type: string
                  example: hello@email.com
                password:
                  type: string
                  example: password
                firstname:
                  type: string
                  example: firstname
                lastname:
                  type: string
                  example: lastname
                nationalID:
                  type: string
                  example: '1234567891234'
                phone:
                  type: string
                  example: '0812345678'
                address:
                  type: string
                  example: Earth                
      responses:
        '201':
          description: account created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
  /auth/login:
    post:
      summary: login to an existing account
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: hello@email.com
                password:
                  type: string
                  example: password
      responses:
        200:
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Incorrect email or password.
  /auth/ping:
    get:
      tags:
        - auth
      security:
        - bearerAuth: []
      summary: test authentication
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: fail
  /auth/verify:
    post:
      summary: verify account using token
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userID
                - token
              properties:
                userID:
                  type: string
                  example: '1234abcd'
                token:
                  type: string
                  example: '012345'
      responses:
        '200':
          description: verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: verification failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Incorrect token.'
  /auth/check/email:
    get:
      tags:
        - auth
      summary: check if email is available
      parameters: 
        - in: query
          name: input
          schema:
            type: string
            format: date
            example: 'hello@email.com'
          description: 'email'
          required: true
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    example: false
  /auth/check/id:
    get:
      tags:
        - auth
      summary: check if national id number is available
      parameters: 
        - in: query
          name: input
          schema:
            type: string
            format: date
            example: '11111111111111'
          description: 'email'
          required: true
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    example: false
  /guest:
    patch:
      summary: edit profile
      tags:
        - guest
      requestBody:
        content:
          application/json:
            schema:
              properties:
                firstname:
                  type: string
                  example: firstname
                lastname:
                  type: string
                  example: lastname
                nationalID:
                  type: string
                  example: '1234567891234'
                phone:
                  type: string
                  example: '0812345678'
                address:
                  type: string
                  example: Earth
      responses:
        200:
          description: updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /reservation:
    get:
      summary: find available rooms
      tags:
        - reservation
      parameters: 
        - in: query
          name: checkIn
          schema:
            type: string
            format: date
            example: '2020-02-02'
          description: 'check-in date'
          required: true
        - in: query
          name: checkOut
          schema:
            type: string
            format: date
            example: '2020-02-10'
          description: 'check-out date'
          required: true
        - in: query
          name: guests
          schema:
            type: integer
            example: 2
          description: 'number of people coming'
          required: true

      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  rooms:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoomSearch'
                  suggestions:
                    type: object
                    properties:
                      lowestPrice:
                        type: array
                        items:
                          type: object
                          properties:
                            totalPrice: 
                              type: integer
                              example: 1000
                            roomConfig:
                              type: array
                              items:
                                $ref: '#/components/schemas/RoomSuggestion'
                      lowestNumberOfRooms:
                        type: array
                        items:
                          type: object
                          properties:
                            totalPrice: 
                              type: integer
                              example: 1000
                            roomConfig:
                              type: array
                              items:
                                $ref: '#/components/schemas/RoomSuggestion'
        '400':
          description: bad request
    post:
      tags:
        - reservation
      summary: make a reservation
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required: 
                - checkIn
                - checkOut
                - rooms
              properties:
                checkIn:
                  type: string
                  format: date
                checkOut: 
                  type: string
                  format: date
                rooms:
                  type: array
                  items:
                    type: object
                    required: 
                      - id
                      - guests
                    properties:
                      id: 
                        type: integer
                        example: 4
                      guests: 
                        type: integer
                        example: 2
                specialRequests:
                  type: string
                  example: "I want an extra large cheese."
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
  /reservation/{reservation_id}:
    get:
      summary: get reservation details
      tags:
        - reservation
      parameters: 
        - in: path
          required: true
          name: reservation_id
          schema:
            type: string
          example: 'abc-123'
      responses:
        200:
          description: reservation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
  /reservation/{reservation_id}/payment:
    get:
      summary: check payment status
      tags:
        - reservation
      parameters:
        - in: path
          required: true
          name: reservation_id
          schema:
            type: string
          example: 'abc-123'
      responses:
        200:
          description: payment status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isPaid:
                    type: boolean
                    example: true
    post:
      summary: request for payment
      tags:
        - reservation
      parameters:
        - in: path
          required: true
          name: reservation_id
          schema:
            type: string
          example: 'abc-123'
      responses:
        200:
          description: deeplink url and payment amount
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: "scbeasysim://purchase/<id>"
                  amount:
                    type: integer
                    example: 1200
  /reservation/share/:
    post:
      tags:
        - reservation
      summary: share room
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required: 
                - reservationID
                - userID
                - roomID
              properties:
                reservationID:
                  type: string
                  example: '1234abcd'
                userID: 
                  type: string
                  example: '1234-abcd-5678'
                roomID:
                  type: integer
                  example: 1
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: success
                  
  /door/lock:
    get:
      summary: lock the door
      tags:
        - door
      responses:
        200:
          description: door is locked
  /door/unlock:
    get:
      summary: unlock the door
      tags:
        - door
      responses:
        200:
          description: door is unlocked
  /door/room:
    get:
      summary: rooms that you can enter
      tags:
        - door
      responses:
        200:
          description: rooms that you can enter
          content:
            application/json:
              schema:
                type: object
                properties:
                  rooms:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReservedRoom"
                  reservationID: 
                    type: string
                    example: "1234abcd"
  /door/share:
    post:
      summary: share room permission
      tags:
        - door
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: string
                  example: '1234abcd'
                reservationID:
                  type: string
                  example: '012345'
                roomID:
                  type: number
                  example: 1
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: success
  /door/generate:
    get:
      summary: generate code for door unlock
      tags:
        - door
      parameters:
        - in: query
          name: roomID
          schema:
            type: number
            example: 5
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '012345'
  /door/verify:
    post:
      summary: verify code
      tags:
        - door
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: '012345'
                roomID:
                  type: integer
                  example: 1
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: success
  /checkIn:
    get:
      summary: get reservation details from national ID card
      tags:
        - checkIn
      parameters: 
        - in: query
          name: nationalID
          schema: 
            type: string
            description: '13-digit national ID number'
        - in: query
          name: date
          schema:
            type: string
            format: date
            example: '2020-04-01'
      responses:
        200:
          description: 'reservation details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        404:
          description: 'reservation not found'
    post:
      summary: complete check-in process
      tags:
        - checkIn
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                kioskPhoto:
                  type: string
                  format: binary
                idCardPhoto:
                  type: string
                  format: binary
                nationalID:
                  type: string
                nameTH:
                  type: string
                nameEN:
                  type: string
                birthdate:
                  type: string
                gender:
                  type: string
                issuer:
                  type: string
                issueDate:
                  type: string
                expireDate:
                  type: string
                address:
                  type: string
      responses:
        200:
          description: 'check in complete'

  /checkIn/generate-otp/{reservation_id}:
    post:
      summary: generate otp code
      tags:
        - checkIn
      parameters:
        - in: path
          name: reservation_id
          required: true
          schema:
            type: string
            description: 'reservation id'
      responses:
        200:
          description: 'otp generated'
          content:
            application/json:
              schema:
                type: object
                properties:
                  referenceCode:
                    type: string
                    example: abcd
        404:
          description: 'reservation not found'
  /checkIn/verify-otp/{reservation_id}:
    post:
      summary: verify otp code
      tags:
        - checkIn
      parameters:
        - in: path
          name: reservation_id
          required: true
          schema:
            type: string
            description: 'reservation id'
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required: 
                - otp
              properties:
                otp:
                  type: string
                  example: '000000'
      responses:
        200:
          description: 'otp verified'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                    format: jwt
        404:
          description: 'reservation not found'
        400:
          description: 'incorrect OTP'
  /checkOut:
    post:
      summary: for checking out
      tags:
        - checkIn
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required: 
                - otp
              properties:
                reservationID:
                  type: string
                  example: '1234'
      responses:
        200:
          description: 'check out done'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'sucess'
    get:
      summary: code for check out
      tags:
        - checkIn
      responses:
        200:
          description: 'code for check out'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'some secret code'
  /checkOut/rate:
    post:
      summary: rating
      tags:
        - checkIn
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required: 
                - otp
              properties:
                reservationID:
                  type: string
                  example: '1234'
                rating:
                  type: integer
                  example: 5
      responses:
        200:
          description: 'rating done'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'sucess'
        
  /admin/login:
    post:
      summary: login to an existing account
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: hello@email.com
                password:
                  type: string
                  example: password
      responses:
        200:
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User' 
  /admin/ping:
    get:
      tags:
        - admin
      security:
        - bearerAuth: []
      summary: test authentication
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: fail
  /admin/summary:
    get:
      tags:
        - admin
      summary: hostel summary
      parameters:
        - in: query
          name: from
          required: false
          schema:
            type: string
            format: date
            example: '2020-02-02'
            description: 'from when'
        - in: query
          name: to
          required: false
          schema:
            type: string
            format: date
            example: '2020-02-02'
            description: 'to when'
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  revenue:
                    type: integer
                    example: 100000
                  guests:
                    type: integer
                    example: 200
                  utilization:
                    type: number
                    example: 70.5
  /admin/reservation:
    get:
      summary: get list of reservation
      tags:
        - admin
      parameters:
        - in: query
          name: from
          required: false
          schema:
            type: string
            format: date
            example: '2020-02-02'
            description: 'from when'
        - in: query
          name: to
          required: false
          schema:
            type: string
            format: date
            example: '2020-02-02'
            description: 'to when'
      responses:
        200:
          description: 'list of reservation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
  /admin/guest:
    get:
      summary: get list of guests
      tags:
        - admin
      parameters: 
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: size
          required: false
          schema:
            type: integer
            example: 25
      responses:
        200:
          description: 'list of reservation'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /admin/guest/{id}:
    patch:
      summary: update guest information
      tags:
        - admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: '1234'
            description: 'id of guest'
      responses:
        200:
          description: 'updated guest information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: update guest information
      tags:
        - admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: '1234'
            description: 'id of guest'
      responses:
        200:
          description: 'updated guest information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /admin/checkIn:
    get:
      summary: list check ins
      tags:
        - admin
      parameters: 
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: size
          required: false
          schema:
            type: integer
            example: 25
      responses:
        200:
          description: 'list of check ins'
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkIn:
                    type: array
                    items:
                      $ref: '#/components/schemas/CheckIn'
                  checkOut:
                    type: array
                    items:
                      $ref: '#/components/schemas/CheckOut'
    post:
      summary: force check in
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationID:
                  type: string
                  example: abcd1234
                date:
                  type: string
                  format: date
      responses:
        200:
          description: checked in
  /admin/checkOut:
    post:
      summary: force check out
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationID:
                  type: string
                  example: abcd1234
                date:
                  type: string
                  format: date
      responses:
        200:
          description: checked out
  /admin/room:
    get:
      summary: list all rooms
      tags:
        - admin
      responses:
        200:
          description: 'list of check ins'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminRoom'
  /admin/unlock:
    post:
      summary: unlock door
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roomID:
                  type: integer
                  example: 1
      responses:
        200:
          description: unlock
  /admin/maintenance:
    post:
      summary: create room maintenance
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - roomID
                - from
                - to
              properties:
                roomID:
                  type: integer
                  example: 1
                from:
                  type: string
                  format: date
                to:
                  type: string
                  format: date
                description:
                  type: string
                  example: "clean room"
      responses:
        200:
          $ref: '#/components/schemas/Maintenance'
    get:
      summary: list of maintenance
      tags:
        - admin
      parameters:
        - in: query
          name: from
          required: false
          schema:
            type: string
            format: date
            description: 'from when'
        - in: query
          name: to
          required: false
          schema:
            type: string
            format: date
            description: 'to when'
      responses:
        200:
          description: 'list of maintenance'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Maintenance'
  /admin/maintenance/{id}:
    delete:
      summary: delete maintenance
      tags:
        - admin
      parameters: 
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
            description: 'id of maintenance'
      responses:
        200:
          description: deleted
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT  
  schemas:
    User:
      required:
        - id
        - email
        - firstname
        - lastname
        - nationalID
        - address
        - phone
      properties:
        id:
          type: string
          example: '1234-abcd'
        email:
          type: string
          example: hello@email.com
        firstname:
          type: string
          example: firstname
        lastname:
          type: string
          example: lastname
        nationalID:
          type: string
          example: '1234567891234'
        phone:
          type: string
          example: '0812345678'
        address:
          type: string
          example: Earth
    RoomSearch:
      properties:
        type:
          type: string
          example: Deluxe
        description:
          type: string
          example: Double bed
        price:
          type: integer
          example: 500
        availability:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              available:
                type: integer
                example: 1
        photos:
          type: array
          items:
            type: object
            properties:
              photo_url:
                type: string
                format: uri
                example: https://image.com
              photo_description:
                type: string
                example: This is a room.
        facilities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: towel
              count:
                type: integer
                example: 1
    RoomSuggestion:
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: Deluxe
        description:
          type: string
          example: Double bed
        guests:
          type: integer
          example: 2
        price:
          type: integer
          example: 500
        photos:
          type: array
          items:
            type: object
            properties:
              photo_url:
                type: string
                format: uri
                example: https://image.com
              photo_description:
                type: string
                example: This is a room.
        facilities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: towel
              count:
                type: integer
                example: 1
    ReservedRoom:
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: Deluxe
        description:
          type: string
          example: Double bed
        beds:
          type: integer
          example: 2
        price:
          type: integer
          example: 500
        photos:
          type: array
          items:
            type: object
            properties:
              photo_url:
                type: string
                format: uri
                example: https://image.com
              photo_description:
                type: string
                example: This is a room.
        facilities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: towel
              count:
                type: integer
                example: 1
    Reservation:
      properties:
        id:
          type: string
          example: abcd1234
        checkIn: 
          type: string
          format: Date
          example: '2020-02-10'
        checkOut:
          type: string
          format: Date
          example: '2020-02-20'
        specialRequests:
          type: string
          example: please prepare .... for me
        guest:
          $ref: '#/components/schemas/User'
        rooms:
          $ref: '#/components/schemas/ReservedRoom'
    CheckIn:
      properties:
        guest:
          $ref: '#/components/schemas/User'
        checkInTime:
          type: string
          format: date-time
        nights:
          type: integer
          example: 5
        beds:
          type: integer
          example: 5
    CheckOut:
      properties:
        guest:
          $ref: '#/components/schemas/User'
        checkOutTime:
          type: string
          format: date-time
        nights:
          type: integer
          example: 5
        beds:
          type: integer
          example: 5
    AdminRoom:
      properties:
        type:
          type: string
          example: Deluxe
        description:
          type: string
          example: Double bed
        price:
          type: integer
          example: 500
        rooms:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              beds:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
    Maintenance:
      properties:
        id:
          type: integer
          example: 1
        roomID:
          type: integer
          example: 1
        from:
          type: string
          format: date
        to:
          type: string
          format: date
        description:
          type: string
          example: "clean room"