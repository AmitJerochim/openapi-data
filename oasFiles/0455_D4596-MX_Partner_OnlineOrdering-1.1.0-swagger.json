{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "MX Online Order Receiver API",
    "description" : "DSS - MX Online Order APIs create a generate entry point for 3rd Partners create Orders on the fly with the Internal DL system",
    "version" : "1.1.0",
    "contact" : { }
  },
  "tags" : [ {
    "name" : "mx",
    "description" : ""
  } ],
  "servers" : [ ],
  "components" : {
    "securitySchemes" : {
      "bearer" : {
        "scheme" : "bearer",
        "bearerFormat" : "JWT",
        "type" : "http"
      }
    },
    "schemas" : {
      "Currency" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : "VND",
            "description" : "follow Currency Code ISO 4217"
          },
          "exponent" : {
            "type" : "number",
            "example" : 1,
            "default" : 1,
            "description" : "Min value is 1"
          }
        },
        "required" : [ "code", "exponent" ]
      },
      "FeatureFlags" : {
        "type" : "object",
        "properties" : {
          "orderAcceptedType" : {
            "type" : "string",
            "enum" : [ "AUTO", "MANUAL" ],
            "example" : 0,
            "description" : "AUTO=0, MANUAL=1"
          }
        },
        "required" : [ "orderAcceptedType" ]
      },
      "SubmitOrderModifier" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "boolean",
            "example" : "12341",
            "description" : "Attribute ID, numeric string"
          },
          "price" : {
            "type" : "boolean",
            "example" : 0,
            "description" : "Modifier's Price, Min value is 0"
          },
          "quantity" : {
            "type" : "boolean",
            "example" : 1,
            "description" : "Modifier's Quantity in Order, Min value is 1"
          }
        },
        "required" : [ "id", "price", "quantity" ]
      },
      "SubmitOrderModifierGroup" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "boolean",
            "example" : "12341",
            "description" : "Modifier Group ID, numeric string"
          },
          "modifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubmitOrderModifier"
            }
          }
        },
        "required" : [ "id", "modifiers" ]
      },
      "SubmitOrderItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "8118"
          },
          "variant_id" : {
            "type" : "string",
            "example" : "367",
            "description" : "Variant ID, value mapped existed in each modifiers"
          },
          "quantity" : {
            "type" : "number",
            "example" : 2
          },
          "specifications" : {
            "type" : "string",
            "example" : "Nhieu sen, nhieu vang (tieng viet khong dau)"
          },
          "price" : {
            "type" : "number",
            "example" : 39000
          },
          "discount" : {
            "type" : "number",
            "example" : 5,
            "description" : "discount percent (%) for that Order Item"
          },
          "modifierGroups" : {
            "example" : [ {
              "id" : "147",
              "modifiers" : [ {
                "id" : "327",
                "price" : 10000,
                "quantity" : 1
              } ]
            }, {
              "id" : "146",
              "modifiers" : [ {
                "id" : "324",
                "price" : 0,
                "quantity" : 1
              } ]
            }, {
              "id" : "148",
              "modifiers" : [ {
                "id" : "329",
                "price" : 0,
                "quantity" : 1
              } ]
            } ],
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubmitOrderModifierGroup"
            }
          }
        },
        "required" : [ "id", "variant_id", "quantity", "price", "discount", "modifierGroups" ]
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "street" : {
            "type" : "string",
            "example" : "127-129 Nguyen Co Thach"
          },
          "district" : {
            "type" : "string",
            "example" : "Quan 2"
          },
          "city" : {
            "type" : "string",
            "example" : "TP.HCM"
          },
          "country" : {
            "type" : "string",
            "example" : "VN",
            "default" : "VN"
          }
        },
        "required" : [ "street", "district", "city", "country" ]
      },
      "Customer" : {
        "type" : "object",
        "properties" : {
          "fullName" : {
            "type" : "string",
            "example" : "Arkay Lee"
          },
          "mobile" : {
            "type" : "string",
            "example" : "+84382051088"
          },
          "email" : {
            "type" : "string",
            "example" : "+84382051088"
          },
          "billing_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            }, {
              "example" : {
                "street" : "127-129 Nguyen Co Thach",
                "district" : "Quan 2",
                "city" : "TP.HCM",
                "country" : "VN"
              }
            } ]
          },
          "shipping_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            }, {
              "example" : {
                "street" : "131-133 Nguyen Co Thach",
                "district" : "Quan 2",
                "city" : "TP.HCM",
                "country" : "VN"
              }
            } ]
          }
        },
        "required" : [ "fullName", "mobile", "shipping_address" ]
      },
      "OrderPrice" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "Description is Optional but need atleast 5 characters if have"
          },
          "discount" : {
            "type" : "number",
            "example" : 10000,
            "description" : "discount value, Min acceptable value is 0"
          },
          "total" : {
            "type" : "number",
            "example" : 102900,
            "description" : "after tax, Min acceptable value is 0"
          },
          "subtotal" : {
            "type" : "number",
            "example" : 98000,
            "description" : "before tax, Min acceptable value is 0"
          },
          "tax" : {
            "type" : "number",
            "example" : 4900,
            "default" : 0,
            "description" : "Total Tax in Order, Min acceptable value is 0"
          },
          "deliveryFee" : {
            "type" : "number",
            "example" : 9000,
            "default" : 0,
            "description" : "Min acceptable value is 0"
          },
          "eaterPayment" : {
            "type" : "number",
            "example" : 91900,
            "description" : "(after_tax + fee) - all_promo - discount, Min acceptable value is 0"
          },
          "fundPromo" : {
            "type" : "number",
            "example" : 5000,
            "description" : "HLC Promotion, Min value is 0",
            "default" : 0
          },
          "merchantFundPromo" : {
            "type" : "number",
            "example" : 5000,
            "description" : "Partner Promotion, Min value is 0",
            "default" : 0
          }
        },
        "required" : [ "discount", "total", "subtotal", "tax", "deliveryFee", "eaterPayment", "fundPromo", "merchantFundPromo" ]
      },
      "SubmitOrderRequest" : {
        "type" : "object",
        "properties" : {
          "orderID" : {
            "type" : "string",
            "example" : "P00001",
            "description" : "3rd Partner Order ID Eg. from Zalo, Grab, Now, Momo etc."
          },
          "merchantID" : {
            "type" : "string",
            "example" : "1231",
            "description" : "Partner ID Eg. from 3rd Partner Client ID."
          },
          "partnerMerchantID" : {
            "type" : "string",
            "example" : "M00001",
            "description" : "Store ID"
          },
          "orderTime" : {
            "type" : "string",
            "example" : "2020-03-18 12:57:20",
            "description" : "Order Time when 3rd Partner send request to HLC"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "CASHLESS", "CASH" ],
            "example" : 0,
            "description" : "CASHLESS=0, CASH=1"
          },
          "shortOrderNumber" : {
            "type" : "string",
            "example" : "M100"
          },
          "orderType" : {
            "type" : "string",
            "enum" : [ "PICKUP", "DELIVERY" ],
            "example" : "PICKUP",
            "default" : "PICKUP"
          },
          "currency" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Currency"
            }, {
              "description" : "refer Currency type for more information"
            } ]
          },
          "featureFlags" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/FeatureFlags"
            }, {
              "description" : "refer FeatureFlags type for more information"
            } ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubmitOrderItem"
            }
          },
          "customer" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Customer"
            }, {
              "example" : {
                "fullName" : "Arkay Lee",
                "mobile" : "+84382051088",
                "billing_address" : {
                  "street" : "127-129 Nguyen Co Thach",
                  "district" : "Quan 2",
                  "city" : "TP.HCM",
                  "country" : "VN"
                },
                "shipping_address" : {
                  "street" : "131-133 Nguyen Co Thach",
                  "district" : "Quan 2",
                  "city" : "TP.HCM",
                  "country" : "VN"
                }
              }
            } ]
          },
          "price" : {
            "$ref" : "#/components/schemas/OrderPrice"
          },
          "checksum" : {
            "type" : "string",
            "example" : "ac1bca50875b7304e941dc71c1a6080f",
            "description" : "\n      Checksum value for the order. \n      - orderID\n      - merchantID\n      ...\n      not include checksum field in md5  \n    "
          }
        },
        "required" : [ "orderID", "merchantID", "partnerMerchantID", "orderTime", "paymentType", "orderType", "currency", "featureFlags", "items", "customer", "price", "checksum" ]
      },
      "OrderResponse" : {
        "type" : "object",
        "properties" : {
          "orderID" : {
            "type" : "string",
            "example" : "S00001",
            "description" : "3rd Partner Order ID Eg. from Zalo, Grab, Now, Momo etc."
          },
          "state" : {
            "type" : "string",
            "enum" : [ "ORDER_NEW", "ORDER_SUCCESS", "ORDER_CONFIRMED", "ORDER_PREPARING", "ORDER_READY", "DRIVER_ALLOCATED", "DRIVER_ARRIVED", "ORDER_PICKED", "ORDER_DELIVERED", "CANCELLED", "FAILED" ],
            "default" : "ORDER_NEW",
            "example" : "ORDER_NEW"
          }
        },
        "required" : [ "orderID", "state" ]
      },
      "UpdateOrderStateRequest" : {
        "type" : "object",
        "properties" : {
          "merchantID" : {
            "type" : "string",
            "example" : "HLC00001"
          },
          "orderID" : {
            "type" : "string",
            "example" : "S123123"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "ORDER_NEW", "ORDER_SUCCESS", "ORDER_CONFIRMED", "ORDER_PREPARING", "ORDER_READY", "DRIVER_ALLOCATED", "DRIVER_ARRIVED", "ORDER_PICKED", "ORDER_DELIVERED", "CANCELLED", "FAILED" ],
            "default" : "DRIVER_ALLOCATED",
            "example" : "DRIVER_ALLOCATED",
            "description" : "\n      For using Order Status values, please following that rule:\n      1. ORDER_NEW: return immediately when we receive a New Order\n      2. ORDER_SUCCESS: auto send as a handshake when we received right order from partner\n      3. ORDER_CONFIRMED: confirm that we will serve that order\n      4. ORDER_PREPARING: start preparing your order\n      5. ORDER_READY: order ready for pickup or delivery\n      \n      // 3rd delivery partner\n      6. DRIVER_ALLOCATED: assign driver to ship that order \n      7. DRIVER_ARRIVED: driver in store \n      8. ORDER_PICKED: driver pickup or collected order\n      9. ORDER_DELIVERED: customer received order\n\n      // Mark fail or not processing\n      10. CANCELLED: we deny serve that order\n      11. FAILED: system processing fail\n    "
          },
          "message" : {
            "type" : "string",
            "example" : "Your Order has been assign to Driver yet.",
            "default" : ""
          }
        },
        "required" : [ "merchantID", "orderID", "state" ]
      },
      "OAuthRequest" : {
        "type" : "object",
        "properties" : {
          "client_id" : {
            "type" : "string",
            "example" : "Z00100100010001"
          },
          "client_secret" : {
            "type" : "string",
            "example" : "12356789099876543"
          },
          "grant_type" : {
            "type" : "string",
            "example" : "client_credentials"
          },
          "scopes" : {
            "example" : [ "app1.function1", "app1.function2" ],
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "client_id", "client_secret", "grant_type" ]
      },
      "OAuthResponse" : {
        "type" : "object",
        "properties" : {
          "access_token" : {
            "type" : "string",
            "example" : "sdlajfa982734aldskfjo38u4r"
          },
          "expires_in" : {
            "type" : "number",
            "example" : 3600
          },
          "token_type" : {
            "type" : "string",
            "example" : "Bearer"
          }
        },
        "required" : [ "access_token", "expires_in", "token_type" ]
      },
      "PriceList" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "1234"
          },
          "applied_date" : {
            "type" : "string",
            "example" : "2020-03-18 20:06:08",
            "description" : ""
          }
        },
        "required" : [ "id", "applied_date" ]
      },
      "TimePeriod" : {
        "type" : "object",
        "properties" : {
          "startTime" : {
            "type" : "string",
            "example" : "08:00"
          },
          "endTime" : {
            "type" : "string",
            "example" : "22:00"
          }
        },
        "required" : [ "startTime", "endTime" ]
      },
      "HoursByDay" : {
        "type" : "object",
        "properties" : {
          "openPeriodType" : {
            "type" : "string",
            "enum" : [ "OpenPeriod", "OpenAllDay", "CloseAllDay" ],
            "example" : "OpenPeriod"
          },
          "periods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TimePeriod"
            }
          }
        },
        "required" : [ "openPeriodType", "periods" ]
      },
      "HoursByWeekDay" : {
        "type" : "object",
        "properties" : {
          "mon" : {
            "$ref" : "#/components/schemas/HoursByDay"
          },
          "tue" : {
            "$ref" : "#/components/schemas/HoursByDay"
          },
          "wed" : {
            "$ref" : "#/components/schemas/HoursByDay"
          },
          "thu" : {
            "$ref" : "#/components/schemas/HoursByDay"
          },
          "fri" : {
            "$ref" : "#/components/schemas/HoursByDay"
          },
          "sat" : {
            "$ref" : "#/components/schemas/HoursByDay"
          },
          "sun" : {
            "$ref" : "#/components/schemas/HoursByDay"
          }
        },
        "required" : [ "mon", "tue", "wed", "thu", "fri", "sat", "sun" ]
      },
      "Modifier" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "1234"
          },
          "name" : {
            "type" : "string",
            "example" : "S"
          },
          "name_en" : {
            "type" : "string",
            "example" : "S"
          },
          "sequence" : {
            "type" : "number",
            "example" : 1
          },
          "availableStatus" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "UNAVAILABLE" ],
            "example" : "AVAILABLE"
          },
          "price" : {
            "type" : "number",
            "example" : 1
          },
          "photos" : {
            "example" : [ "https://example.com/web/statics/image.png" ],
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        },
        "required" : [ "id", "name", "name_en", "sequence", "availableStatus", "price", "photos", "variants" ]
      },
      "ModifierGroup" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "1234"
          },
          "name" : {
            "type" : "string",
            "example" : "Cỡ"
          },
          "name_en" : {
            "type" : "string",
            "example" : "Size"
          },
          "sequence" : {
            "type" : "number",
            "example" : 1
          },
          "availableStatus" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "UNAVAILABLE" ],
            "example" : "AVAILABLE"
          },
          "selectionRangeMin" : {
            "type" : "number",
            "example" : 1
          },
          "selectionRangeMax" : {
            "type" : "number",
            "example" : 1
          },
          "modifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Modifier"
            }
          },
          "variant_flag" : {
            "type" : "boolean",
            "example" : true
          }
        },
        "required" : [ "id", "name", "name_en", "sequence", "availableStatus", "selectionRangeMin", "selectionRangeMax", "modifiers", "variant_flag" ]
      },
      "Product" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "8115"
          },
          "name" : {
            "type" : "string",
            "example" : "Phin Sua Da"
          },
          "name_en" : {
            "type" : "string",
            "example" : "Ice Coffee"
          },
          "sequence" : {
            "type" : "number",
            "example" : 1
          },
          "availableStatus" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "UNAVAILABLE" ],
            "example" : "AVAILABLE"
          },
          "description" : {
            "type" : "string",
            "example" : "Day la Phin Sua Da"
          },
          "description_en" : {
            "type" : "string",
            "example" : "This is Ice Coffee"
          },
          "price" : {
            "type" : "number",
            "example" : 29000
          },
          "isFlagship" : {
            "type" : "boolean",
            "example" : true
          },
          "photos" : {
            "example" : [ "https://example.com/web/statics/image.png" ],
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "modifierGroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModifierGroup"
            }
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        },
        "required" : [ "id", "name", "name_en", "sequence", "availableStatus", "description", "description_en", "price", "isFlagship", "photos", "modifierGroups", "variants" ]
      },
      "Category" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "11",
            "description" : "Category ID numeric string"
          },
          "name" : {
            "type" : "string",
            "example" : "Cà Phê Truyền Thống"
          },
          "name_en" : {
            "type" : "string",
            "example" : "Traditional Coffee"
          },
          "sequence" : {
            "type" : "number",
            "example" : 1
          },
          "availableStatus" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "UNAVAILABLE" ],
            "example" : "AVAILABLE"
          },
          "parentID" : {
            "type" : "string",
            "example" : "1"
          },
          "photos" : {
            "example" : [ "https://example.com/web/statics/image.png" ],
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          }
        },
        "required" : [ "id", "name", "name_en", "sequence", "availableStatus", "parentID", "photos", "items" ]
      },
      "Section" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "S0001"
          },
          "name" : {
            "type" : "string",
            "example" : "Menu"
          },
          "sequence" : {
            "type" : "number",
            "example" : 1
          },
          "serviceHours" : {
            "$ref" : "#/components/schemas/HoursByWeekDay"
          },
          "categories" : {
            "example" : [ {
              "id" : "1",
              "name" : "Cà Phê",
              "name_en" : "Coffee",
              "sequence" : 1,
              "availableStatus" : "AVAILABLE",
              "parentID" : "False",
              "photos" : [ "https://example.com/web/statics/image.png" ],
              "items" : [ ]
            }, {
              "id" : "11",
              "name" : "Cà Phê Truyền Thống",
              "name_en" : "Traditional Coffee",
              "sequence" : 1,
              "availableStatus" : "AVAILABLE",
              "parentID" : "False",
              "photos" : [ "https://example.com/web/statics/image.png" ],
              "items" : [ {
                "id" : "1",
                "name" : "Phin Sua Da",
                "name_en" : "Ice Coffee",
                "sequence" : 1,
                "availableStatus" : "AVAILABLE",
                "description" : "Day la Phin Sua Da",
                "description_en" : "This is Ice Coffee",
                "price" : 29000,
                "isFlagship" : true,
                "photos" : [ "https://example.com/web/statics/image.png" ],
                "modifierGroups" : [ {
                  "id" : "1234",
                  "name" : "Cỡ",
                  "name_en" : "Size",
                  "sequence" : 1,
                  "availableStatus" : "AVAILABLE",
                  "selectionRangeMin" : 1,
                  "selectionRangeMax" : 1,
                  "modifiers" : [ {
                    "id" : "12341",
                    "name" : "S",
                    "name_en" : "S",
                    "sequence" : 1,
                    "availableStatus" : "AVAILABLE",
                    "price" : 0,
                    "photos" : [ ]
                  }, {
                    "id" : "12342",
                    "name" : "M",
                    "name_en" : "M",
                    "sequence" : 1,
                    "availableStatus" : "AVAILABLE",
                    "price" : 6000,
                    "photos" : [ ]
                  }, {
                    "id" : "12343",
                    "name" : "L",
                    "name_en" : "L",
                    "sequence" : 1,
                    "availableStatus" : "AVAILABLE",
                    "price" : 10000,
                    "photos" : [ ]
                  } ]
                } ]
              } ]
            }, {
              "id" : "2",
              "name" : "Trà",
              "name_en" : "Tea",
              "sequence" : 2,
              "availableStatus" : "AVAILABLE",
              "parentID" : "False",
              "photos" : [ "https://example.com/web/statics/image.png" ],
              "items" : [ {
                "id" : "21",
                "name" : "Trà Sen Vàng",
                "name_en" : "Golden Sen Tea :D",
                "sequence" : 1,
                "availableStatus" : "AVAILABLE",
                "description" : "Đây là Trà Sen Vàng",
                "description_en" : "This is Golden Sen Tea",
                "price" : 29000,
                "isFlagship" : true,
                "photos" : [ "https://example.com/web/statics/image.png" ],
                "modifierGroups" : [ {
                  "id" : "12345",
                  "name" : "Cỡ",
                  "name_en" : "Size",
                  "sequence" : 1,
                  "availableStatus" : "AVAILABLE",
                  "selectionRangeMin" : 1,
                  "selectionRangeMax" : 1,
                  "modifiers" : [ {
                    "id" : "123451",
                    "name" : "S",
                    "name_en" : "S",
                    "sequence" : 1,
                    "availableStatus" : "AVAILABLE",
                    "price" : 0,
                    "photos" : [ ]
                  }, {
                    "id" : "123452",
                    "name" : "M",
                    "name_en" : "M",
                    "sequence" : 1,
                    "availableStatus" : "AVAILABLE",
                    "price" : 10000,
                    "photos" : [ ]
                  }, {
                    "id" : "123453",
                    "name" : "L",
                    "name_en" : "L",
                    "sequence" : 1,
                    "availableStatus" : "AVAILABLE",
                    "price" : 14000,
                    "photos" : [ ]
                  } ]
                } ]
              } ]
            } ],
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Category"
            }
          }
        },
        "required" : [ "id", "name", "sequence", "serviceHours", "categories" ]
      },
      "GetMenuResponse" : {
        "type" : "object",
        "properties" : {
          "merchantID" : {
            "type" : "string",
            "example" : "HLC00001",
            "description" : "3rd Partner Client ID Eg. for Zalo, Grab, Now, Momo etc."
          },
          "partnerMerchantID" : {
            "type" : "string",
            "example" : "M00001",
            "description" : "Store ID"
          },
          "partnerMerchantStoreID" : {
            "type" : "string",
            "example" : "MS00001",
            "description" : "Partner Store ID"
          },
          "pricelist" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PriceList"
            }, {
              "description" : "Applied Pricelist"
            } ]
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Section"
            }
          }
        },
        "required" : [ "merchantID", "partnerMerchantID", "partnerMerchantStoreID", "pricelist", "currency", "sections" ]
      },
      "GetStoreResponse" : {
        "type" : "object",
        "properties" : {
          "merchantID" : {
            "type" : "string",
            "example" : "HLC00001",
            "description" : "3rd Partner Client ID Eg. for Zalo, Grab, Now, Momo etc."
          },
          "partnerMerchantID" : {
            "type" : "string",
            "example" : "M00001",
            "description" : "Store ID"
          },
          "partnerMerchantStoreID" : {
            "type" : "string",
            "example" : "MS00001",
            "description" : "Partner Store ID"
          },
          "name" : {
            "type" : "string",
            "example" : "Highlands Sala 2",
            "description" : "Store Name"
          },
          "hotline" : {
            "type" : "string",
            "example" : "+84382051088",
            "description" : "Hotline"
          },
          "photos" : {
            "example" : [ "https://example.com/web/statics/image.png" ],
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pricelist" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PriceList"
            }, {
              "description" : "Applied Pricelist"
            } ]
          },
          "address" : {
            "type" : "string",
            "example" : "127-129 Nguyễn Cơ Thach",
            "description" : "Store full address"
          },
          "status" : {
            "type" : "string",
            "example" : "WORKING",
            "description" : "\n      Store Status:\n      - WORKING\n      - PERMANENT_CLOSED\n      - TEMPORARY_CLOSE\n    "
          },
          "openingTime" : {
            "type" : "number",
            "example" : "7",
            "description" : "Meaning 07:00"
          },
          "closingTime" : {
            "type" : "number",
            "example" : "21",
            "description" : "Meaning 22:00"
          },
          "latitude" : {
            "type" : "number",
            "example" : 10.7704909,
            "description" : "Store latitude"
          },
          "longitude" : {
            "type" : "number",
            "example" : 106.723932,
            "description" : "Store latitude"
          }
        },
        "required" : [ "merchantID", "partnerMerchantID", "partnerMerchantStoreID", "name", "hotline", "photos", "pricelist", "address", "status", "openingTime", "closingTime", "latitude", "longitude" ]
      },
      "UpdateMenuRequest" : {
        "type" : "object",
        "properties" : {
          "merchantID" : {
            "type" : "string",
            "example" : "HLC00001",
            "description" : "3rd Partner Client ID Eg. for Zalo, Grab, Now, Momo etc."
          },
          "storeID" : {
            "type" : "string",
            "example" : "M00001",
            "description" : "Update Store ID"
          },
          "state" : {
            "type" : "string",
            "example" : "UPDATE_MENU",
            "description" : "Status"
          },
          "message" : {
            "type" : "string",
            "example" : "Please update that store menu",
            "description" : "Message"
          }
        },
        "required" : [ "merchantID", "storeID", "state", "message" ]
      },
      "UpdateMenuResponse" : {
        "type" : "object",
        "properties" : {
          "merchantID" : {
            "type" : "string",
            "example" : "HLC00001",
            "description" : "3rd Partner Client ID Eg. for Zalo, Grab, Now, Momo etc."
          },
          "storeID" : {
            "type" : "string",
            "example" : "M00001",
            "description" : "Update Store ID"
          },
          "state" : {
            "type" : "string",
            "example" : "ON_PROGRESS",
            "description" : "Status"
          }
        },
        "required" : [ "merchantID", "storeID", "state" ]
      }
    }
  },
  "paths" : {
    "/orders" : {
      "post" : {
        "operationId" : "OrdersController_createOrder",
        "parameters" : [ ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubmitOrderRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Create Order Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "tags" : [ "Orders" ],
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/orders/state" : {
      "put" : {
        "operationId" : "OrdersController_updateOrderState",
        "parameters" : [ ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateOrderStateRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Update State Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "tags" : [ "Orders" ],
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/orders/state/{merchantID}/{orderId}" : {
      "get" : {
        "operationId" : "OrdersController_getOrderState",
        "parameters" : [ {
          "name" : "merchantID",
          "required" : true,
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderId",
          "required" : true,
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Update State Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "tags" : [ "Orders" ],
        "security" : [ {
          "bearer" : [ ]
        } ]
      }
    },
    "/oauth2/token" : {
      "post" : {
        "operationId" : "OauthController_getToken",
        "parameters" : [ ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/OAuthRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Get Token Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OAuthResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request"
          }
        },
        "tags" : [ "Authentication" ]
      }
    },
    "/merchant/menu/{merchantID}" : {
      "get" : {
        "operationId" : "MerchantController_getMenus",
        "parameters" : [ {
          "name" : "merchantID",
          "required" : true,
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get Menu Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GetMenuResponse"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "tags" : [ "Menu" ]
      }
    },
    "/merchant/menu/{merchantID}/{storeID}" : {
      "get" : {
        "operationId" : "MerchantController_getMenu",
        "parameters" : [ {
          "name" : "merchantID",
          "required" : true,
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeID",
          "required" : true,
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get Menu in Store Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetMenuResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "tags" : [ "Menu" ]
      }
    },
    "/merchant/stores/{merchantID}" : {
      "get" : {
        "operationId" : "MerchantController_getStores",
        "parameters" : [ {
          "name" : "merchantID",
          "required" : true,
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get Stores Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GetStoreResponse"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "tags" : [ "Menu" ]
      }
    },
    "/merchant/stores/{merchantID}/{storeID}" : {
      "get" : {
        "operationId" : "MerchantController_getStore",
        "parameters" : [ {
          "name" : "merchantID",
          "required" : true,
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeID",
          "required" : true,
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get Store Info Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetStoreResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "tags" : [ "Menu" ]
      }
    },
    "/order/update-status" : {
      "post" : {
        "operationId" : "PartnerOrderController_updateOrderState",
        "summary" : "That API endpoint is a suggestion for Partner.",
        "parameters" : [ ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateOrderStateRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Update State Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "tags" : [ "For Partners" ]
      }
    },
    "/store/update-menu" : {
      "post" : {
        "operationId" : "PartnerOrderController_updateStoreMenu",
        "summary" : "That API endpoint is a suggestion for Partner.",
        "parameters" : [ ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateMenuRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Update State Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateMenuResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not Found"
          }
        },
        "tags" : [ "For Partners" ]
      }
    }
  }
}