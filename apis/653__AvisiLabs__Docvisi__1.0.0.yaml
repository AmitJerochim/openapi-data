openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/AvisiLabs/Docvisi/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ErikE96/Docvisi/1.0.0
  - description: Server
    url: https://server/api/v1
info:
  description: Docvisi API
  version: "1.0.0"
  title: Docvisi API
  contact:
    email: fn-labs@avisi.nl
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Authentication
  - name: Content
  - name: VideoMetadata
  - name: Document
security:
  - BearerAuth: []
paths:
  /login:
    post:
      operationId: login
      tags:
        - Authentication
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - username
                - password
              properties:
                username:
                  type: string
                  example: Labs
                password:
                  type: string
                  example: superawesomepassword
      responses:
        '200':
          description: login successful
          headers:
            Authorization:
              schema:
                type: string
                example: Bearer eyJhbGci.eyJsb2dn.gzSraSYS
              description: JWT token
        '403':
          description: given credentials are invalid
  # /refresh_token:
  #   post:
  #     operationId: refreshToken
  #     tags:
  #       - Authentication
  #     summary: Refresh token
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #     responses:
  /content/upload:
    post:
      operationId: uploadContent
      tags:
        - Content
      summary: Upload content
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: content upload succeeded
        '500':
          description: server error
  /content/videos/{videoFilename}:
    get:
      operationId: getVideo
      tags:
        - Content
      summary: Get a video based on the filename
      parameters:
        - in: path
          name: videoFilename
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
        '206':
          description: 'Partial Content'
  /videos/{objectId}:
    get:
      operationId: getVideoById
      tags:
        - VideoMetadata
      summary: Search VideoMetadata object by objectId
      parameters: 
        - in: path
          name: objectId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema: 
                items:
                  $ref: '#/components/schemas/InformationObjectVideoMetadata'
        '404':
          description: 'Not Found'
  /document/{objectId}:
    get:
      operationId: getDocumentById
      tags:
        - Document
      summary: Search Document object by objectId
      parameters: 
        - in: path
          name: objectId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema: 
                items:
                  $ref: '#/components/schemas/InformationObjectDocument'
        '404':
          description: 'Not Found'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
  schemas:
    InformationObjectVideoMetadata:
      type: object
      required:
        - id
        - location
        - metadata
      properties:
        id:
          type: string
        type:
          type: string
        location:
          type: string
        metadata:
          $ref: '#/components/schemas/VideoMetadata'
    InformationObjectDocument:
      type: object
      required:
        - id
        - location
        - metadata
      properties:
        id:
          type: string
        type:
          type: string
        location:
          type: string
          example: /content/documents/document1.pdf
        metadata:
          $ref: '#/components/schemas/Document'
    VideoMetadata:
      type: object
      required:
        - duration
      properties:
        duration:
          type: string
    Document:
      type: object
      required:
        - pages
      properties:
        pages:
          type: number
