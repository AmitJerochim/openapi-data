openapi: 3.0.0
info:
  version: "v0.2"
  title: Iris API Spec
  description: Iris API Spec as of beginning of May 2020 used for Proof of Concept
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/norima-sfi/IrisMobileApi/v0.2
security:
  - OAuth2: [read, write]
paths:
  /accounts/forgot_password:
    post:
      security: []
      summary: Send user password reset email
      description: Sends the given email a password reset code, returns 200 even when email is not in DB
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          $ref: '#/components/responses/200OK'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "Error code or error name"
                    example: "BadRequestError"
                  errorMessage:
                    type: string
                    description: "A more descriptive error, may be user-facing?"
                    example: "Incorrectly formatted email"
  /oauth/authorize:
    get:
      summary: Exchange credentials for Authorization Code to be exchanged for access code later
      tags:
        - User
      parameters:
        - in: query
          name: response_type
          description: "Must be 'code' for this flow. indicates that your server expects to receive an authorization code"
          required: true
          schema:
            type: string
            example: code
        - in: query
          name: client_id
          description: The Client ID for the application
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: redirect_uri
          description: "Indicates the URL to return the user to after authorization is complete"
          required: true
          schema:
            type: string
            format: uri
            example: org.example.app://redirect
        - in: query
          name: state
          description: "A random string generated by your application, which youâ€™ll verify later"
          required: true
          schema:
            type: string
            example: "123456abcd"
        - in: query
          name: code_challenge
          description: "A Base64-url-encoded string of the SHA256 hash of the cryptographically random code verifier. SHOULD NOT be plain code verifier"
          required: true
          schema:
            type: string
        - in: query
          name: code_challenge_method
          description: "Either plain or S256, depending on whether the challenge is the plain verifier string or the SHA256 hash of the string. If this parameter is omitted, the server will assume plain. SHOULD Be S256 though"
          required: true
          schema:
            type: string
            example: "S256"
      responses:
        302:
          description: Success Redirect to be used by app
          headers:
            Location:
              schema:
                type: string
                example: "$redirect_uri/?code=$TheAuthorizationCode&state=$exactStateFromRequest"
  /oauth/token:
    post:
      summary: Exchange authorization code for Access Token
      tags:
        - User
      parameters:
        - in: query
          name: grant_type
          description: "grant type of this token request"
          required: true
          schema:
            type: string
            example: authorization_code
        - in: query
          name: code
          description: "The authorizaton code obtained from redirect"
          required: true
          schema:
            type: string
            example: "ExampleAuthCode"
        - in: query
          name: redirect_uri
          description: "Indicates the URL to return the user to after authorization is complete. Must be the same as before"
          required: true
          schema:
            type: string
            format: uri
            example: org.example.app://redirect
        - in: query
          name: client_id
          description: "The Client ID for the application"
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: code_verifier
          description: "Cryptographically random key that was used to generate the code_challenge passed to /authorize"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Tokens"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokens'
  /oauth/revoke_token:
    post:
      summary: Log out by revoking the access token
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                client_id:
                  type: string
      responses:
        200:
          $ref: '#/components/responses/200OK'
  /trackers:
    get:
      summary: Fetch all trackers a user can see
      description: Get a list of trackers a user can see
      tags:
        - Trackers
      responses:
        200:
          description: List of trackers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tracker'
  /trackers/{trackerId}/entry/{entryIndex}/layout:
    get:
      summary: Get Survey Page Format (Questions)
      description: Retrieve the questions to display on a page and any metadata. Separated from other fetch endpoint for optimization
      tags:
        - Trackers
      parameters:
        - $ref: '#/components/parameters/trackerId'
        - $ref: '#/components/parameters/entryIndex'
      responses:
        200:
          description: Layout for a survey page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyPage'
  /trackers/{trackerId}/entry/{entryIndex}:
    get:
      summary: Get Survey Page Details
      description: Fetch Questions and any responses for when page is viewed
      tags:
        - Trackers
      parameters:
        - $ref: '#/components/parameters/trackerId'
        - $ref: '#/components/parameters/entryIndex'
      responses:
        200:
          description: Questions and any responses
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/QuestionText'
                        - $ref: '#/components/schemas/QuestionMultipleChoice'
                  responses:
                    type: array
                    items:
                      description: Each object in the array is a response to a questions in the survey page. Details depend on type of question.
                      oneOf:
                        - $ref: '#/components/schemas/TextResponse'
                        - $ref: '#/components/schemas/MultipleChoiceResponse'
              example: |
                {
                    "questions": [{
                            "id": 0,
                            "type": "multiplechoicequestion",
                            "is_queston": true,
                            "css_classes": [],
                            "display_title": "Worry Start",
                            "initially_visible": true,
                            "triggers": [],
                            "text_content": "Rate My Worry",
                            "display_style": "slider_display",
                            "answers": [{
                                    "answer_id": 0,
                                    "content": 0,
                                    "number": 0,
                                    "image": "https://i.imgur.com/F7yNM9i.png",
                                    "color": "#0f0"
                                },
                                {
                                    "answer_id": 1,
                                    "content": 1,
                                    "number": 1,
                                    "image": "https://i.imgur.com/205zdwH.png",
                                    "color": "#0f0"
                                },
                                {
                                    "answer_id": 2,
                                    "content": 2,
                                    "number": 2,
                                    "image": "https://i.imgur.com/syNngTE.png",
                                    "color": "#0f0"
                                },
                                {
                                    "answer_id": 3,
                                    "content": 3,
                                    "number": 3,
                                    "image": "https://i.imgur.com/O0HQGxY.png",
                                    "color": "#0f0"
                                },
                                {
                                    "answer_id": 4,
                                    "content": "4",
                                    "number": "4",
                                    "image": "https://i.imgur.com/1RxJSqq.png",
                                    "color": "#0f0"
                                }
                            ]
                        },
                        {
                            "id": 1,
                            "type": "multiplechoicequestion",
                            "is_question": true,
                            "css_classes": [],
                            "display_title": "Fav colours",
                            "text_content": "Favourite Colour?",
                            "initially_visible": true,
                            "triggers": [],
                            "display_style": "horizontal_display",
                            "answers": [{
                                    "answer_id": 1,
                                    "content": "Red",
                                    "number": 2,
                                    "image": "path/to/image",
                                    "color": "#f00"
                                },
                                {
                                    "answer_id": 2,
                                    "content": "Green",
                                    "number": 3,
                                    "image": "path/to/image",
                                    "color": "#0f0",
                                    "checked": true
                                },
                                {
                                    "answer_id": 6,
                                    "content": "Pinku",
                                    "number": 3,
                                    "image": "path/to/image",
                                    "color": "#f3e",
                                    "checked": true
                                },
                                {
                                    "answer_id": 3,
                                    "content": "Octarine",
                                    "number": 78,
                                    "image": "/path/to/image",
                                    "color": "#e4a500"
                                },
                                {
                                    "answer_id": 4,
                                    "content": "Seafoam",
                                    "number": 3,
                                    "image": "path/to/image",
                                    "color": "#00ffaa",
                                    "checked": true
                                },
                                {
                                    "answer_id": 5,
                                    "content": "Maroonish?",
                                    "number": 3,
                                    "image": "path/to/image",
                                    "color": "#834",
                                    "checked": true
                                },
                                {
                                    "answer_id": 7,
                                    "content": "Purple",
                                    "number": 3,
                                    "image": "path/to/image",
                                    "color": "#874092",
                                    "checked": true
                                },
                                {
                                    "answer_id": 8,
                                    "content": "Salmonish",
                                    "number": 3,
                                    "image": "path/to/image",
                                    "color": "#f67",
                                    "checked": true
                                },
                                {
                                    "answer_id": 9,
                                    "content": "Grey",
                                    "number": 3,
                                    "image": "path/to/image",
                                    "color": "#aaa",
                                    "checked": true
                                }
                            ]
                        },
                        {
                            "id": 2,
                            "type": "multiplechoicequestion",
                            "is_question": true,
                            "css_classes": [],
                            "display_title": "Fav colours",
                            "text_content": "Favourite RGB?",
                            "initially_visible": true,
                            "triggers": [],
                            "display_style": "default",
                            "answers": [{
                                    "answer_id": 1,
                                    "content": "Red",
                                    "number": 2,
                                    "image": "path/to/image",
                                    "color": "#f00"
                                },
                                {
                                    "answer_id": 2,
                                    "content": "Green",
                                    "number": 3,
                                    "image": "path/to/image",
                                    "color": "#0f0",
                                    "checked": true
                                },
                                {
                                    "answer_id": 6,
                                    "content": "Blue",
                                    "number": 3,
                                    "image": "path/to/image",
                                    "color": "#00f",
                                    "checked": true
                                }
                            ]
                        },
                        {
                            "id": 3,
                            "type": "textquestion",
                            "is_question": true,
                            "css_classes": [],
                            "column_width": 0,
                            "text_content": "Nagging Question",
                            "initially_visible": true,
                            "triggers": [],
                            "text_content": "Are we there yet?",
                            "text_area": false,
                            "required": false
                        },
                        {
                            "id": 4,
                            "type": "textquestion",
                            "is_question": true,
                            "css_classes": [],
                            "column_width": 0,
                            "display_title": "Placeholder required?",
                            "initially_visible": true,
                            "triggers": [],
                            "text_content": "Is this required?",
                            "text_area": false,
                            "required": true
                        },
                        {
                            "id": 5,
                            "type": "textquestion",
                            "is_question": true,
                            "css_classes": [],
                            "column_width": 0,
                            "display_title": "Long question",
                            "initially_visible": true,
                            "triggers": [],
                            "text_content": "This is a super long question with lots of detail. Why is it so long? I don't know, but will it wrap nicely?",
                            "text_area": false,
                            "required": true
                        }
                    ],
                    "responses": []
                }


                
    post:
      summary: Submit responses
      tags:
        - Trackers
      parameters:
        - $ref: '#/components/parameters/trackerId'
        - $ref: '#/components/parameters/entryIndex'
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                completed:
                  type: string
                  format: date-time
                  description: "The timestamp when the user hit Save"
                  example: "2020-12-31T12:32:45Z"
                retrieved:
                  type: string
                  format: date-time
                  description: "The timestamp when the survey page was requested. Useful for diffs in Phase 2 with offline"
                  example: "2020-12-31T12:32:45Z"
                responses:
                  type: array
                  description: "List of the question Ids with the associated answer values."
                  items:
                    oneOf:
                      - $ref: '#/components/schemas/TextResponse'
                      - $ref: '#/components/schemas/MultipleChoiceResponse'
      responses:
        200:
          $ref: '#/components/responses/200OK'
  /theme:
    # There's one theme per IRIS instance (though it can change)
    get:
      security: []
      summary: Get Theme document
      description: "Retrieves CSS file to turn into app theme"
      tags:
        - IRIS Instance Configuration
      responses:
        200:
          description: The Theme CSS file
          content:
            application/json: # Preferred for the app
              schema:
                type: object
                # The | means every newline underneath this key becomes an actual newline
                example: |
                  {
                    "text": { 
                      "header_tagline": "SFI",
                      "additional_less": "/*lessdata*/"
                    },
                    "theme_chain": [
                      "base", 
                      "modern"
                    ], 
                    "less_variables": {
                      "bodyBackgroundLightContrast": "#f5f5f5", 
                      "bannerBackground": "#2A2F7C", 
                      "demoBarColor": "#444444", 
                      "primaryColor": "#2A2F7C", 
                      "useBanner": "False", 
                      "endSolidColorPosition": "65%", 
                      "fontFamily": "\"Roboto\",", 
                      "primaryMenuTextColor": "#2A2F7C", 
                      "bodyBackground": "#ffffff", 
                      "menuFontSize": "14px", 
                      "tableSectionFooterBackgroundHover": "#ededed", 
                      "contrastTextColor": "#555555", 
                      "transparencyPosition": "100%", 
                      "useIcons": "False", 
                      "tableSectionHeaderBackground": "#f2f2f2", 
                      "menuFontWeight": "500", 
                      "menuBackgroundColor": "#2A2F7C", 
                      "h1HeadingColor": "#2A2F7C", 
                      "bannerFileName": "\"None\"", 
                      "tableSectionFooterBackground": "#f5f5f5", 
                      "linkColor": "#1d2156", 
                      "logoFileName": "\"logo.png\"", 
                      "textColor": "#333333", 
                      "wellBackgroundColor": "#eeeeee", 
                      "demoBarTopStripeColor": "#2c2c2c", 
                      "subtleTextColor": "#999999", 
                      "headingsColor": "#444444", 
                      "linkColorHover": "#171943", 
                      "baseFontSize": "13px",
                      "headingsFontWeight": "bold", 
                      "secondaryColor": "#A9AE37", 
                      "subtleLineColor": "#dfdfdf", 
                      "gradientAngle": "90deg", 
                      "tableSectionHeaderBackgroundHover": "#eaeaea", 
                      "menuFontFamily": "\"Roboto\",", 
                      "primaryMenuIconColor": "#2A2F7C", 
                      "bodyBackgroundVeryLightContrast": "#f9f9f9", 
                      "secondaryMenuIconColor": "#2A2F7C", 
                      "headingsFontFamily": "inherit"
                    }, 
                    "extends": "base"
                  }
            text/css: # Here for future use
              schema:
                type: string
                format: css
                # The | means every newline underneath this key becomes an actual newline
                example: |
                  html {
                    margin: 0;
                    padding: 0;
                  }

components:
  # Reusable Schemas (data models)
  schemas:
    UserTokens:
      type: object
      description: "Tokens returned by the token exchange endpoint. May contain more properties such as expiry timestamps."
      properties:
        access_token:
          type: string
          description: Token used for most requests
          example: "my_access_token"
        refresh_token:
          type: string
          description: Token used to get a new access token
          example: "my_refresh_token"
        token_type:
          type: string
          description: "The type of token"
          example: "Bearer"
    SurveyPage:
      type: object
      properties:
        type: 
          type: string
          description: "'tracker' is the only value for Phase 1"
          example: "tracker"
        contents:
          type: array
          items:
            # SurveysPages can have any type of Content (BaseContent and any subclass). This means text, questions, etc.
            $ref: '#/components/schemas/BaseContent'
    # An "Answer" is a possible answer for a question, not the response from a user
    Answer:
      type: object
      description: Available answer for a question (for multiple choice primarily)
      properties:
        answer_id:
          type: integer
          description: "Not 'id' to avoid reserved name issues"
        content:
          type: string
        number:
          type: integer
          description: details TBD
        image:
          type: string
          format: uri
          description: relative url to the image to show
        color:
          type: string
          format: hex
          description: Hex colour to use
    BaseContent:
      type: object
      description: ""
      properties:
        type:
          type: string
          description: ""
          enum:
            - "text"
            - "pagebreakquestion"
            - "textquestion"
            - "multiplechoicequestion"
        id:
          type: integer
          description: "identifier for this content"
        is_question:
          type: boolean
          description: "Useful for classifying content quickly."
        css_classes:
          type: array
          items:
            type: string
        column_width:
          # Converted from Bootstrap columns, so it's using 1/12 increments.
          type: integer
          minimum: 0
          maximum: 100
        display_title:
          type: string
          description: "Unused by the user-facing client. Used by the web view for admins to represent the content fragment."
        initially_visible:
          type: boolean
          description: "Initial visibility state of the content. Expose triggers may make this visible later."
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/Trigger'
    Text:
      allOf:
        - $ref: '#/components/schemas/BaseContent'
        - type: object
          properties:
            content:
              oneOf:
                - type: string
                  format: html
                - $ref: '#/components/schemas/SmartContent'
            avatar_uri:
              type: string
              format: uri
              example: 'https://media.example.com/avatar_1.png'
    QuestionBase:
      allOf:
        - $ref: '#/components/schemas/BaseContent'
        - type: object
          properties:
            type:
              type: string
            text_content:
              description: "The label for the question, appears above the input fields (text, checkboxes, slider, etc)"
              oneOf: 
                - type: string
                - $ref: '#/components/schemas/SmartContent'
            required:
              type: boolean
    QuestionPageBreak:
      # May be unused in Phase 1
      allOf:
        - $ref: '#/components/schemas/QuestionBase'
    QuestionText:
      allOf:
        - $ref: '#/components/schemas/QuestionBase'
        - type: object
          properties:
            text_area:
              type: boolean
              description: Full text area (true) or one-liner (false)
    QuestionMultipleChoice:
      allOf:
        - $ref: '#/components/schemas/QuestionBase'
        - type: object
          properties:
            display_style:
              type: string
              description: Full text area (true) or one-liner (false)
              enum:
                - "default_display"
                - "select_menu"
                - "slider_display"
                - "horizontal_display"
            answers:
              type: array
              items:
                $ref: '#/components/schemas/Answer'
            triggers:
              type: array
              items:
                $ref: '#/components/schemas/Trigger'
    Entry:
      type: object
      description: placeholder
      properties:
        entry_id:
          type: integer
        entry_index:
          type: integer
        entry_date:
          type: string
          # Normally midnight (somewhere), including time for future options. Mostly care about date.
          format: datetime
        status:
          type: string
          enum:
            - "complete"
            - "empty"
            - "partial"
        color_code:
          type: string
          format: hex
          example: "#f0f0f0"
        image_url:
          type: string
          description: Relative path url to an image
          example: '/images/1.png'
    Tracker:
      type: object
      properties:
        tracker_id:
          type: integer
          description: "Unique identifier for tracker. Int or string or UUID?"
        title:
          type: string
          description: Name of Tracker to display to user
        treatment_package:
          type: object
          description: TBD
          properties:
            package_id:
              type: integer
              description: "Unique identifer for the package"
            name:
              type: string
              description: "Name of the treatment package"
        entries:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
    Trigger:
      type: object
      properties:
        trigger_type:
          type: string
          enum:
            - "ExposeContent"
              # Expose
        answers:
          type: array
          items:
            type: integer
            description: "The ID of the Multiple Choice Answer which activates the trigger."
        contents:
          description: "List of Content to expose when one of the answers is selected"
          type: array
          items:
            type: integer
            description: "ID of in-page Content"
    BaseResponse:
      description: "The response for the associated question"
      properties:
        question_id:
          type: integer
    TextResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            value:
              type: string
              description: "The response typed by the user"
    MultipleChoiceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            value:
              type: array
              description: "The IDs of each Answer selected."
              items:
                type: integer
    SmartContent:
      type: object
      description: "Interpolation string with values to interpolate."
      properties:
        string_template:
          type: string
          example: "Hello, ${pipe25}! It is ${pipe1}"
        mapping:
          type: object
          additionalProperties:
            type: string
            pattern: '^pipe\d$'
            example:
              pipe25: "World"
              pipe1: "2020-05-05 Tuesday"
  parameters:
    trackerId:
        name: trackerId
        in: path
        required: true
        schema:
          type: integer
    entryIndex:
      name: entryIndex
      in: path
      required: true
      schema:
        type: integer
  responses:
    500InternalError:
      description: "Internal Server Error"
    200OK:
      description: "Simple OK response"
      content:
        text/plain:
          schema:
            type: string
            example: OK
  securitySchemes:
    OAuth2:
      # Placeholder details
      type: oauth2
      description: Authorization Code flow with PKCE
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
