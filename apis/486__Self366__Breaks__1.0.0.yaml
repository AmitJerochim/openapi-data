openapi: 3.0.0
info:
  description: |
    This is a sample timecard server.
  version: "1.0.0"
  title: HRMS Timecard
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Self366/Breaks/1.0.0
paths:
  /v1/companies/{companyId}/employees/{employeeId}/TimeInOut:
    post:
      tags:
        - Timecard
      summary: Add Time In/Out 
      description: TimeCard
      operationId: Add Timecard
      parameters:
        - in: path
          name: json
          description: EmployeeId to get the break details
          required: true
          schema:
            $ref: '#/components/schemas/TimeCardReqDto'
        - in: path
          name: companyId
          description: Company Id
          required: true
          schema:
            type: string
        - in: path
          name: employeeId
          description: Employee Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                   $ref: '#/components/schemas/BreakRootObject'
        '400':
          description: Bad Request
          content:
            application/json:
               schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                 type: array
                 items:
                     $ref: '#/components/schemas/error'
  /v1/companies/{companyId}/employees/{employeeId}/Approvals:
    put:
      tags:
        - Timecard
      summary: BreakApprovals
      description: TimeCard
      operationId: Approvals
      parameters:
        - in: path
          name: json
          description: Additional Rate Model
          required: true
          schema:
            $ref: '#/components/schemas/ApprovalReqDto'
        - in: path
          name: companyId
          description: Company Id
          required: true
          schema:
            type: string
        - in: path
          name: employeeId
          description: Employee Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                   $ref: '#/components/schemas/BreakRootObject'
        '400':
          description: Bad Request
          content:
            application/json:
               schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                 type: array
                 items:
                     $ref: '#/components/schemas/error'
  /v1/companies/{companyId}/employees/{employeeId}/getBreakById:
    get:
      tags:
        - Timecard
      summary: Employee break details
      description: This will give the record for the break for a particular employee
      operationId: getBreakById
      parameters:
        - in: path
          name: json
          description: Additional Rate Model
          required: true
          schema:
            $ref: '#/components/schemas/ApprovalReqDto'
        - in: path
          name: companyId
          description: Company Id
          required: true
          schema:
            type: string
        - in: path
          name: employeeId
          description: Employee Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                type: array
                items:
                   $ref: '#/components/schemas/BreakRootObject'
        '400':
          description: Bad Request
          content:
            application/json:
               schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                 type: array
                 items:
                     $ref: '#/components/schemas/error'
  /v1/companies/{companyId}/employees/{employeeId}/getAllBreakDetails:
    get:
      tags:
        - Timecard
      summary: All break details by date range
      description: This will give the record for the break for a a prticular date range
      operationId: getAllBreakDetails
      parameters:
        - in: path
          name: json
          description: Additional Rate Model
          required: true
          schema:
            $ref: '#/components/schemas/Period'
        - in: path
          name: companyId
          description: Company Id
          required: true
          schema:
            type: string
        - in: path
          name: employeeId
          description: Employee Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                  type: array
                  items:
                   $ref: '#/components/schemas/BreakRootObject'
        '400':
          description: Bad Request
          content:
            application/json:
               schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                 type: array
                 items:
                     $ref: '#/components/schemas/error'
components:
  schemas:
    DocumentId:
      type: object
      properties:
        value:
          type: string
          example:  1
    Id:
      type: object
      properties:
         value:
           type: string
           example: 1
    Name:
      type: object
      properties:
         given:
           type: string
           example: 'Josh'
         family: 
           type: string
           example: 'Mathew'
    Person:
      type: object
      properties:
         id:
           $ref: '#/components/schemas/Id'
         name:
           $ref: '#/components/schemas/Name'
    Period:
      type: object
      properties:
         start:
           type: string
           format: date-time
         end:
           type: string
           format: date-time
    Approver:
       type: object
       properties:
         person:
           $ref: '#/components/schemas/Person'
         datetime:
           type: string
           format: date-time  
    Department:
       type: object
       properties:
         code:
           type: string
           example: 'DEP01'
         name:
           type: string
           example: 'HR'
    Item:
       type: object
       properties:
         typecode:
           type: string
           example: 'TC1'
         code:
           type: string
         location:
           $ref: '#/components/schemas/Location'
         department:
           $ref: '#/components/schemas/Department'
         period:
           $ref: '#/components/schemas/Period'
         timeTotal:
           type: string
         approvers:
           $ref: '#/components/schemas/Approver'
    Location:
       type: object
       properties:
        name:
          type: string
          example: 'LOC001'
        code:
          type: string
          example: 'LOCTYP001'
    Quantity:
       type: object
       properties:
        value: 
          type: integer
          format: int32
        unitCode:
          type: string
    CostCenter:
        type: object
        properties:
         code: 
          type: string
    CostAllocation:
        type: object
        properties:
         percentage:
           type: number
           format: double
         department:
           $ref: '#/components/schemas/Department'
    PayRate:
        type: object
        properties:
          code:
           type: string
          name:
           type: string
          amount:
           type: string
    Amount:
       type: object
       properties:
          value:
           type: number
           format: double
          currency:
           type: string
    Balance:
       type: object
       properties:
          name:
           type: string
          code: 
           type: string
          quantity:
           $ref: '#/components/schemas/Quantity'
    Expense:
       type: object
       properties:
          code: 
           type: string
          amount:
           $ref: '#/components/schemas/Amount'
    WorkAllocation:
       type: object
       properties:
          quantityLimit:
             type: integer
             format: int32
          payRate:
             $ref: '#/components/schemas/PayRate'
    PieceWork:
       type: object
       properties:
          id:
             $ref: '#/components/schemas/Id'
          quantity:
             $ref: '#/components/schemas/Quantity'
    TimeCardDto:
       type: object
       properties:
         person:
             $ref: '#/components/schemas/Person'
         period:
             $ref: '#/components/schemas/Period'
    TimeCardReqDto:
       type: object
       properties:
         person:
             $ref: '#/components/schemas/Id'
         DateTime:
             $ref: '#/components/schemas/Date'
    Date:
       type: object
       properties:
         date: 
           type: string
           format: date
         time:
           type: string
           format: time
    error:
       type: object
       properties:
         field:
             type: string
         message:
             type: string
         options:
             type: object
             format: array
    BreakRootObject:
        type: object
        properties:
          documentId:
              $ref: '#/components/schemas/DocumentId'
          person:
              $ref: '#/components/schemas/Person'
          location:
              $ref: '#/components/schemas/Location'
          period:
              type: string
              example: '04-24-2020'
          items:
              type: array
              items:
               $ref: '#/components/schemas/Item'
    ApprovalReqDto:
          type: object
          properties:
            person:
              $ref: '#/components/schemas/Person'
            approver:
              $ref: '#/components/schemas/Approver'
            period:
              $ref: '#/components/schemas/Period'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
