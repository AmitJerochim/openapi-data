openapi: 3.0.1
info:
  title: Te Cobro
  description: 'CoDi enabled API'
  termsOfService: https://tecobro.com/terms/
  contact:
    email: info@adhocserv.com
  version: "1.1.0"
externalDocs:
  description: Mas información
  url: https://emtechadhocservices.com
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/jdashel/HackCodi/1.0.0
- url: https://tecobro.com.mx/api/
tags:
- name: Users
  description: User data operations
  externalDocs:
    description: Más información
    url: https://tecobro.com.mx/doc/users
- name: Bank Accounts
  description: Bank accounts operations
  externalDocs:
    description: Más información
    url: https://tecobro.com.mx/doc/bank_accounts
- name: CoDi Accounts
  description: CoDi accounts operations
  externalDocs:
    description: Más información
    url: https://tecobro.com.mx/doc/codi_accounts
- description: All payment operations
  externalDocs:
    url: www.tecobro.com.mx/doc/payments
  name: Payments
- name: Charges
  description: All charge operations
  externalDocs:
    url: www.tecobro.com.mx/doc/charges
paths:
  /users/signup:
    post:
      tags:
      - Users
      summary: Registro de usuario.
      description: Petición de registro para un usaurio nuevo.
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'user@dominio.com'
                password:
                  type: string
                  example: '*****'
        required: true
      responses:
        '400':
          description: Información incorrecta
        '200':
          description: Registro correcto
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: string
                    example: 'SFDSFDGWRER342WER'
                  token:
                    type: string
                    example: 'SDF2345ESFG24235SG....'
  /users/signin:
    post:
      tags:
      - Users
      summary: Inicio de sesión
      description: Solicitud de token de sesión.
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'user@dominio.com'
                password:
                  type: string
                  example: '*****'
        required: true
      responses:
        '400':
          description: Información incorrecta
        '200':
          description: Registro correcto
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: string
                    example: 'SFDSFDGWRER342WER'
                  token:
                    type: string
                    example: 'SDF2345ESFG24235SG....'                
  /users/{id}:
    get:
      tags:
      - Users
      summary: 'Solicitar usuario por id'
      description: 'Solo el usuario que inicio sesión puede ver sus datos'
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: 'Identificador del usuario solicitado'
        required: true
        schema:
          type: string
      responses:
        200:
          description: Operación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Indentificar de usuario inválido'
        404:
          description: 'Usuario no encontrado'
        403:
          description: 'No ha iniciado sesión'
    put:
      tags:
      - Users
      summary: 'Actualizar información del usuario' 
      description: 'Solo el usuario que inicio sesión puede actualizar sus datos'
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: 'Identificador del usuario a actualizar'
        required: true
        schema:
          type: string
      requestBody:
        description: 'Objeto con la información del usuario actualizada'
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: 'Indentificar de usuario inválido'
        404:
          description: 'Usuario no encontrado'
        403:
          description: 'No ha iniciado sesión'
  
  /bank_accounts:
    get:
      tags:
      - Bank Accounts
      summary: 'Get all user bank accounts'
      description: 'Get logged in user bank account list'
      operationId: getBankAccounts
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        400:
          description: 'Invalid bank account id'
        404:
          description: 'Bank account not found'
        403:
          description: 'Not logged in user'
    post:
      tags:
      - Bank Accounts
      summary: 'Create a new bank account'
      description: 'Logged in user new bank account'
      operationId: createBankAccount
      parameters:
      - name: auth
        in: header
        description: 'Logged user token'
        required: true
        schema:
          type: string
      requestBody:
        description: New bank account data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccountRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        400:
          description: 'Invalid bank account id'
        404:
          description: 'Bank account not found'
        403:
          description: 'Not logged in user'
  /bank_accounts/{id}:
    get:
      tags:
      - Bank Accounts
      summary: 'Get bank account data'
      description: 'Logged in user bank account data'
      operationId: getBankAccount
      parameters:
      - name: id
        in: path
        description: 'Registered bank account id'
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        400:
          description: 'Invalid bank account id'
        404:
          description: 'Bank account not found'
        403:
          description: 'Not logged in user'
          
  /codi_accounts:
    get:
      tags:
      - CoDi Accounts
      summary: 'Get all user codi accounts'
      description: 'Get logged in user codi account list'
      operationId: getCodiAccounts
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        400:
          description: 'Invalid bank account id'
        404:
          description: 'Bank account not found'
        403:
          description: 'Not logged in user'
    post:
      tags:
      - CoDi Accounts
      summary: 'Create a new codi account'
      description: 'Logged in user new codi account'
      operationId: createCodiAccount
      parameters:
      - name: auth
        in: header
        description: 'Logged user token'
        required: true
        schema:
          type: string
      requestBody:
        description: New codi account data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodiAccountRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodiAccount'
        400:
          description: 'Invalid bank account id'
        404:
          description: 'Bank account not found'
        403:
          description: 'Not logged in user'
  /codi_accounts/{id}:
    get:
      tags:
      - CoDi Accounts
      summary: 'Get codi account data'
      description: 'Logged in user codi account data'
      operationId: getCodiAccount
      parameters:
      - name: id
        in: path
        description: 'Registered codi account id'
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        400:
          description: 'Invalid bank account id'
        404:
          description: 'Bank account not found'
        403:
          description: 'Not logged in user'
          
  /payments:
    get:
      tags:
      - Payments
      summary: 'Get all payment transactions'
      description: Get logged in user payment list
      operationId: getPayments
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        400:
          description: 'Invalid bank account id'
        404:
          description: 'Bank account not found'
        403:
          description: 'Not logged in user'
    post:
      tags:
      - Payments
      summary: 'Submit a new payment'
      description: Logged in user new payment record
      operationId: createPayment
      parameters:
      - name: auth
        in: header
        description: 'Logged user token'
        required: true
        schema:
          type: string
      requestBody:
        description: New codi account data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: 'Invalid bank account id'
        404:
          description: 'Bank account not found'
        403:
          description: 'Not logged in user'
          
  /charges:
    get:
      tags:
      - Charges
      summary: 'Get all payment transactions'
      description: 'Get logged in user codi account list'
      operationId: getCharges
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge'
        400:
          description: 'Invalid bank account id'
        404:
          description: 'Bank account not found'
        403:
          description: 'Not logged in user'
    post:
      tags:
      - Charges
      summary: 'Create a new codi account'
      description: 'Logged in user new codi account'
      operationId: createCharge
      parameters:
      - name: auth
        in: header
        description: 'Logged user token'
        required: true
        schema:
          type: string
      requestBody:
        description: New codi account data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargeRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodiAccount'
        400:
          description: 'Invalid bank account id'
        404:
          description: 'Bank account not found'
        403:
          description: 'Not logged in user'
components:
  schemas:
    BankAccountRequest:
      type: object
      properties:
        name:
          type: string
          example: "Maria"
        lastname:
          type: string
          example: "Perez"
        phone_number:
          type: string
          example: "555..."
      xml:
        name: BankAccountRequest
    BankAccount:
      type: object
      properties:
        id:
          type: string
          example: "jh134lh1..."
          nullable: true
        clabe:
          type: string
          example: "123456789123456789"
        created:
          type: string
          format: date-time
        enabled:
          type: boolean
          default: true
      xml:
        name: BankAccount
    
    CodiAccount:
      type: object
      properties:
        id:
          type: string
          example: "jh134lh1..."
      xml:
        name: CodiAccount
        
    CodiAccountRequest:
      type: object
      properties:
        clabe:
          type: string
          example: "123456789123456789"
        phone_number:
          type: string
          example: "555..."
      xml:
        name: CodiAccount

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        phone:
          type: string
        enabled:
          type: boolean
          default: true
      xml:
        name: User
        
    Payment:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        phone:
          type: string
        enabled:
          type: boolean
          default: true
      xml:
        name: User
    PaymentRequest:
      type: object
      properties:
        source_account:
          type: string
        dest_account:
          type: string
        amount:
          type: number
      xml:
        name: User
    
    Charge:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        phone:
          type: string
        enabled:
          type: boolean
          default: true
      xml:
        name: User
    ChargeRequest:
      type: object
      properties:
        source_account:
          type: string
        dest_account:
          type: string
        amount:
          type: number
      xml:
        name: User
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
