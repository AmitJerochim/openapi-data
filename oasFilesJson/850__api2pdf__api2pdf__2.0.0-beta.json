{"openapi":"3.0.0","servers":[{"url":"https://v2.api2pdf.com","description":"Api2Pdf.com API"}],"info":{"description":"\n# Introduction\n[Api2Pdf](https://www.api2pdf.com) is a powerful PDF generation API with no quotas. We make the experience of generating PDFs for application developers not completely miserable. Api2Pdf runs on a serverless architecture while being up to 90% cheaper than alternatives.\n\n2.0.0 is currently in public beta and running on Google Cloud Run. Pricing is $0.001 per mb bandwidth + $0.00019551 per second of computation. New features are being added. You may want to [use v1](https://www.api2pdf.com/documentation) in the mean time.\n\n# SDKs & Client Libraries\nComing soon. Updated versions of the v1 client libraries will be provided.\n# Authorization\nCreate an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.\n\n**Authorize your API calls**\n- GET requests, include apikey=YOUR-API-KEY as a query string parameter\n- POST requests, add **Authorization** to your header.\n``` Authorization: YOUR-API-KEY ```\n\n# Quickstart\nIf you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like:\n``` https://v2.api2pdf.com/chrome/pdf/url?url={UrlToConvert}&apikey={YourApiKey} ```\n\nFor more advanced usage and settings, see the API specification below.\n","version":"2.0.0-beta","title":"Api2Pdf - PDF Generation, Powered by Serverless","contact":{"name":"Support","email":"support@api2pdf.com"},"license":{"name":"Creative Commons","url":"https://creativecommons.org/licenses/by/4.0/legalcode"}},"externalDocs":{"description":"Find out more about Api2Pdf","url":"https://www.api2pdf.com"},"paths":{"/chrome/pdf/url":{"get":{"tags":["Headless Chrome"],"security":[{"QueryApiKey":[]}],"summary":"Convert URL to PDF","parameters":[{"in":"query","name":"url","schema":{"type":"string"},"required":true,"description":"Url of the page to convert to PDF. Must start with http:// or https://."}],"operationId":"chromePdfFromUrlGET","description":"Convert a URL or Web Page to PDF using Headless Chrome. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.\n### Authorize via Query String Parameter\n**apikey=YOUR-API-KEY**\n### Example\n``` https://v2.api2pdf.com/chrome/pdf/url?url={UrlToConvert}&apikey={YourApiKey} ``` ","responses":{"302":{"description":"Redirected to the resulting URL of the file","content":{"application/pdf":{"schema":{"type":"string","format":"binary"}}}}}},"post":{"tags":["Headless Chrome"],"summary":"Convert URL to PDF","operationId":"chromePdfFromUrlPost","description":"Convert a URL or Web Page to PDF using Headless Chrome.\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChromeUrlToPdfRequest"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `url` *(string, required)* - Url to the web page to convert to PDF\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/chrome/pdf/html":{"post":{"tags":["Headless Chrome"],"summary":"Convert raw HTML to PDF","operationId":"chromePdfFromHtmlPost","description":"Convert HTML to a PDF using Headless Chrome w/ Puppeteer\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChromeHtmlToPdfRequest"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `html` *(string, required)* - raw HTML to convert to PDF\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to false.\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/chrome/image/url":{"get":{"tags":["Headless Chrome"],"security":[{"QueryApiKey":[]}],"summary":"Convert URL to Image","parameters":[{"in":"query","name":"url","schema":{"type":"string"},"required":true,"description":"Url of the page to convert to Image. Must start with http:// or https://."}],"operationId":"chromeImageFromUrlGET","description":"Convert a URL or Web Page to Image using Headless Chrome. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.\n### Authorize via Query String Parameter\n**apikey=YOUR-API-KEY**\n### Example\n``` https://v2.api2pdf.com/chrome/image/url?url={UrlToConvert}&apikey={YourApiKey} ``` ","responses":{"302":{"description":"Redirected to the resulting URL of the file","content":{"image/*":{"schema":{"type":"string","format":"binary"}}}}}},"post":{"tags":["Headless Chrome"],"summary":"Convert URL to Image","operationId":"chromeImageFromUrlPost","description":"Convert a URL or Web Page to PDF using Headless Chrome.\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the Image and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChromeUrlToImageRequest"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `url` *(string, required)* - Url to the web page to convert to PDF\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/chrome/image/html":{"post":{"tags":["Headless Chrome"],"summary":"Convert raw HTML to Image","operationId":"chromeImageFromHtmlPost","description":"Convert HTML to a Image using Headless Chrome w/ Puppeteer\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the Image and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChromeHtmlToImageRequest"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `html` *(string, required)* - raw HTML to convert to PDF\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to false.\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/wkhtml/pdf/url":{"get":{"tags":["Wkhtmltopdf"],"security":[{"QueryApiKey":[]}],"summary":"Convert URL to PDF","parameters":[{"in":"query","name":"url","schema":{"type":"string"},"required":true,"description":"Url of the page to convert to PDF. Must start with http:// or https://."}],"operationId":"wkhtmlPdfFromUrlGET","description":"Convert a URL or Web Page to PDF using wkhtmltopdf. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.\n### Authorize via Query String Parameter\n**apikey=YOUR-API-KEY**\n### Example\n``` https://v2.api2pdf.com/wkhtml/pdf/url?url={UrlToConvert}&apikey={YourApiKey} ``` ","responses":{"302":{"description":"Redirected to the resulting URL of the file","content":{"application/pdf":{"schema":{"type":"string","format":"binary"}}}}}},"post":{"tags":["Wkhtmltopdf"],"summary":"Convert URL to PDF","operationId":"wkhtmlPdfFromUrlPost","description":"Convert a URL or Web Page to PDF using Wkhtmltopdf\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WkhtmlUrlToPdfRequest"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `url` *(string, required)* - Url to the web page to convert to PDF\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `options` *(object, optional)* - Include advanced Wkhtmltopdf options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-wkhtmltopdf/).\n- `enableToc` *(boolean, optional)* - Enable table of contents on your pdf by setting enableToc to true.\n- `tocOptions` *(object, optional)* - set enableToc to true and then configure your ToC options add a Table of Contents to the top of your PDF automatically.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/wkhtml/pdf/html":{"post":{"tags":["Wkhtmltopdf"],"summary":"Convert raw HTML to PDF","operationId":"wkhtmlPdfFromHtmlPost","description":"Convert HTML to a PDF using Wkhtmltopdf\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WkhtmlHtmlToPdfRequest"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `html` *(string, required)* - raw HTML to convert to PDF\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to false.\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `options` *(object, optional)* - Include advanced wkhtmltopdf options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-wkhtmltopdf/).\n- `enableToc` *(boolean, optional)* - Enable table of contents on your pdf by setting enableToc to true.\n- `tocOptions` *(object, optional)* - set enableToc to true and then configure your ToC options add a Table of Contents to the top of your PDF automatically.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/libreoffice/any-to-pdf":{"post":{"tags":["LibreOffice"],"summary":"Convert Office Document or Image File to PDF","operationId":"libreOfficeAnyToPdfFromPost","description":"Convert Office Document or Image File to PDF format using LibreOffice\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LibreOfficeAnyToPdfRequest"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `url` *(string, required)* - Url to the file to convert to PDF\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/libreoffice/pdf-to-html":{"post":{"tags":["LibreOffice"],"summary":"Convert a PDF file to an HTML document","operationId":"libreOfficePdfToHtmlFromPost","description":"Convert a PDF file to HTML using LibreOffice. Limitation is that images will be lost.\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LibreOfficePdfToHtmlRequest"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `url` *(string, required)* - Url to the file to convert to PDF\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/libreoffice/html-to-docx":{"post":{"tags":["LibreOffice"],"summary":"Generate a Microsoft Word file (.docx) from HTML","operationId":"libreOfficeHtmlToDocxFromPost","description":"Convert HTML to docx format using LibreOffice\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LibreOfficeHtmlToDocxRequest"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `url` *(string, required)* - Url to the file to convert to PDF\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/libreoffice/html-to-xlsx":{"post":{"tags":["LibreOffice"],"summary":"Generate a Microsoft Excel document (.xlsx) from HTML","operationId":"libreOfficeHtmlToXlsxFromPost","description":"Convert Html to .xlsx using LibreOffice\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LibreOfficeHtmlToXlsxRequest"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `url` *(string, required)* - Url to the file to convert to PDF\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/pdfsharp/merge":{"post":{"tags":["PdfSharp"],"summary":"Combine multiple PDF files into a single PDF file","operationId":"pdfSharpMerge","description":"Combine multiple PDF files into a single PDF file\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PdfSharpMerge"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `urls` *(list of strings, required)* - List of urls to the PDFs to merge\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/pdfsharp/bookmarks":{"post":{"tags":["PdfSharp"],"summary":"Add bookmarks to an existing PDF","operationId":"pdfSharpBookmarks","description":"Add bookmarks to an existing PDF\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PdfSharpBookmarks"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `url` *(string, required)* - Url to the PDF\n- `bookmarks` *(array, required)* - Array of objects with title and page number attributes where page number is zero-indexed (0 is first page)\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/pdfsharp/password":{"post":{"tags":["PdfSharp"],"summary":"Add a password to an existing PDF","operationId":"pdfSharpPassword","description":"Add a password to an existing PDF\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object containing the url to the PDF and other meta data","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PdfSharpPassword"}}},"description":"A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\n- `url` *(string, required)* - Url to the PDF\n- `userpassword` *(string, required)* - User password to set to lock down pdf\n- `ownerpassword` *(string, optional)* - Owner password to set on pdf\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers."}}},"/zebra":{"get":{"tags":["ZXING (Zebra Crossing) Bar Codes"],"security":[{"QueryApiKey":[]}],"summary":"Generate bar codes and QR codes with ZXING.","parameters":[{"in":"query","name":"format","schema":{"type":"string"},"required":true,"description":"Most common is CODE_39 or QR_CODE"},{"in":"query","name":"value","schema":{"type":"string"},"required":true,"description":"Specify the text value you want to convert"},{"in":"query","name":"showlabel","schema":{"type":"boolean"},"description":"Show label of text below barcode"},{"in":"query","name":"height","schema":{"type":"integer"},"description":"Height of the barcode generated image"},{"in":"query","name":"width","schema":{"type":"integer"},"description":"Width of the barcode generated image"}],"operationId":"zebraGET","description":"See full list of options and documentation [here](https://www.api2pdf.com/documentation/advanced-options-zxing-zebra-crossing-barcodes/)\n### Authorize via Query String Parameter\n**apikey=YOUR-API-KEY**\n### Example\n``` https://v2.api2pdf.com/zebra?format={format}&apikey={YourApiKey}&value={YourText} ``` ","responses":{"200":{"description":"An image of the generated barcode or QR code","content":{"image/png":{"schema":{"type":"string","format":"binary"}}}}}}},"/file/{responseId}":{"delete":{"parameters":[{"in":"path","name":"responseId","schema":{"type":"string"},"required":true,"description":"Guid from responseId of initial API call"}],"tags":["Utility Commands"],"summary":"Delete a file on command","operationId":"fileDELETE","description":"Delete a file on command instead of waiting 24 hours for self-delete. Make a DELETE call to /file/{responseId} where {responseId} is from the JSON object returned from the original call to generate the file.\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"A JSON object","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiResponseSuccess"}}}}}}},"/zip":{"post":{"tags":["Utility Commands"],"summary":"Create a .zip file from multiple files","operationId":"filesZip","description":"Pass in a list of urls to existing files along with desired file names and paths to subdirectories. This method will ingest those files and create a .zip and return the .zip in binary form in the response.\n### Authorize via Header of Request\n**Authorization: YOUR-API-KEY**","responses":{"200":{"description":"Binary zip file","content":{"application/octet-stream":{"schema":{"type":"string","format":"binary"}}}}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UtilityZipAllFiles"}}}}}},"/status":{"get":{"tags":["Utility Commands"],"summary":"Call this to check the health of the API","operationId":"statusCheck","description":"Returns a status 200, no authentication required.","responses":{"200":{"description":"Returns a 200 OK"}}}},"/balance":{"get":{"tags":["Utility Commands"],"summary":"Call this to check the balance remaining on your account","operationId":"balanceCheck","description":"Returns your balance in JSON response\n### Authorize via Query String Parameter\n**apikey=YOUR-API-KEY**\n### Example\n``` https://v2.api2pdf.com/balance?apikey={YourApiKey} ```","responses":{"200":{"description":"Returns a 200 OK if balance is above 0","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BalanceCheckSuccess"}}}}}}}},"components":{"securitySchemes":{"HeaderApiKey":{"type":"apiKey","in":"header","name":"Authorization"},"QueryApiKey":{"type":"apiKey","in":"query","name":"apikey"}},"schemas":{"ApiResponseSuccess":{"type":"object","properties":{"FileUrl":{"type":"string","description":"A url to the PDF that will exist only for 24 hours","example":"https://link-to-your-file"},"MbOut":{"type":"number","description":"The amount of megabytes of bandwidth generated from the resulting pdf","example":0.73327},"Cost":{"type":"number","description":"Cost of the operation (mbIn + mbOut) * $.001","example":7.979E-4},"Success":{"type":"boolean","description":"Will be true if the operation suceeded","example":true},"ResponseId":{"type":"string","description":"Identifier of the API call for reference later if needed","example":"0cdfdb27-dcc0-413e-a713-b9371b2e2678"},"Seconds":{"type":"number","description":"The length of time, in seconds of how long the operation took.","example":4},"Error":{"type":"string","description":"Explanation if operation failed"}}},"BalanceCheckSuccess":{"type":"object","properties":{"UserBalance":{"type":"number","example":12.76}}},"ChromeUrlToPdfRequest":{"type":"object","required":["url"],"properties":{"url":{"type":"string","format":"url","example":"https://www.github.com"},"inline":{"type":"boolean","example":true},"fileName":{"type":"string","example":"test.pdf"},"extraHTTPHeaders":{"type":"object","description":"A key-value pair (dictionary) for setting headers on a request to a URL."},"options":{"$ref":"#/components/schemas/ChromeAdvancedPdfOptions"},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"ChromeUrlToImageRequest":{"type":"object","required":["url"],"properties":{"url":{"type":"string","format":"url","example":"https://www.github.com"},"inline":{"type":"boolean","example":true},"fileName":{"type":"string","example":"test.png"},"extraHTTPHeaders":{"type":"object","description":"A key-value pair (dictionary) for setting headers on a request to a URL."},"options":{"$ref":"#/components/schemas/ChromeAdvancedImageOptions"},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"ChromeHtmlToPdfRequest":{"type":"object","required":["html"],"properties":{"html":{"type":"string","format":"html","example":"<p>Hello World</p>"},"inline":{"type":"boolean","example":true},"fileName":{"type":"string","example":"test.pdf"},"options":{"$ref":"#/components/schemas/ChromeAdvancedPdfOptions"},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"ChromeHtmlToImageRequest":{"type":"object","required":["html"],"properties":{"html":{"type":"string","format":"html","example":"<p>Hello World</p>"},"inline":{"type":"boolean","example":true},"fileName":{"type":"string","example":"test.png"},"options":{"$ref":"#/components/schemas/ChromeAdvancedImageOptions"},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"ChromeAdvancedPdfOptions":{"properties":{"delay":{"type":"number","example":0,"description":"How long to wait (in milliseconds) for the page to render before taking the snapshot"},"puppeteerWaitForMethod":{"type":"string","example":"WaitForNavigation"},"puppeteerWaitForValue":{"type":"string","example":"Load"},"usePrintCss":{"type":"boolean","example":true},"landscape":{"type":"boolean","example":false},"printBackground":{"type":"boolean","example":true},"displayHeaderFooter":{"type":"boolean","example":false},"headerTemplate":{"type":"string","example":"<span></span>"},"footerTemplate":{"type":"string","example":"<span></span>"},"width":{"type":"string","example":"8.27in"},"height":{"type":"string","example":"11.69in"},"marginTop":{"type":"string","example":".4in"},"marginBottom":{"type":"string","example":".4in"},"marginLeft":{"type":"string","example":".4in"},"marginRight":{"type":"string","example":".4in"},"pageRanges":{"type":"string","example":"1-10000"},"scale":{"type":"number","example":1}},"type":"object"},"ChromeAdvancedImageOptions":{"properties":{"delay":{"type":"number","example":0,"description":"How long to wait (in milliseconds) for the page to render before taking the snapshot"},"puppeteerWaitForMethod":{"type":"string","example":"WaitForNavigation"},"puppeteerWaitForValue":{"type":"string","example":"Load"},"fullPage":{"type":"boolean","example":true}},"type":"object"},"FileStorageOptions":{"properties":{"method":{"type":"string","example":"PUT"},"url":{"type":"string","example":"https://presignedurl","description":"This should be a url that we should upload the file to. An example is a presigned Amazon S3 url"},"extraHTTPHeaders":{"type":"object","description":"A key-value object for specifying headers in a request to the URL."}}},"WkhtmlUrlToPdfRequest":{"type":"object","required":["url"],"properties":{"url":{"type":"string","format":"url","example":"https://www.github.com"},"inline":{"type":"boolean","example":true},"fileName":{"type":"string","example":"test.pdf"},"options":{"$ref":"#/components/schemas/WkhtmlAdvancedOptions"},"enableToc":{"type":"boolean","example":false},"tocOptions":{"$ref":"#/components/schemas/WkhtmlTocOptions"},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"WkhtmlHtmlToPdfRequest":{"type":"object","required":["url"],"properties":{"html":{"type":"string","example":"<p>Hello World</p>"},"inline":{"type":"boolean","example":true},"fileName":{"type":"string","example":"test.pdf"},"options":{"$ref":"#/components/schemas/WkhtmlAdvancedOptions"},"enableToc":{"type":"boolean","example":false},"tocOptions":{"$ref":"#/components/schemas/WkhtmlTocOptions"},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"WkhtmlAdvancedOptions":{"type":"object","properties":{"orientation":{"type":"string","example":"Portrait","description":"Change to Landscape to go into landscape mode"},"pageSize":{"type":"string","example":"A4"}}},"WkhtmlTocOptions":{"type":"object","properties":{"tocHeaderText":{"type":"string","example":"Lorem Ipsum"},"tocLevelIndentation":{"type":"string","example":"1em"}}},"LibreOfficeAnyToPdfRequest":{"type":"object","required":["url"],"properties":{"url":{"type":"string","format":"url","example":"https://www.api2pdf.com/wp-content/themes/api2pdf/assets/samples/sample-word-doc.docx"},"inline":{"type":"boolean","example":true},"fileName":{"type":"string","example":"test.pdf"},"extraHTTPHeaders":{"type":"object","description":"A key-value pair (dictionary) for setting headers on a request to a URL."},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"LibreOfficePdfToHtmlRequest":{"type":"object","required":["url"],"properties":{"url":{"type":"string","format":"url","example":"https://your-url-to-pdf-file"},"fileName":{"type":"string","example":"test.html"},"extraHTTPHeaders":{"type":"object","description":"A key-value pair (dictionary) for setting headers on a request to a URL."},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"LibreOfficeHtmlToDocxRequest":{"type":"object","required":["url"],"properties":{"url":{"type":"string","format":"url","example":"https://your-url-to-html-file"},"fileName":{"type":"string","example":"test.docx"},"extraHTTPHeaders":{"type":"object","description":"A key-value pair (dictionary) for setting headers on a request to a URL."},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"LibreOfficeHtmlToXlsxRequest":{"type":"object","required":["url"],"properties":{"url":{"type":"string","format":"url","example":"https://your-url-to-html-file"},"fileName":{"type":"string","example":"test.xlsx"},"extraHTTPHeaders":{"type":"object","description":"A key-value pair (dictionary) for setting headers on a request to a URL."},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"PdfSharpMerge":{"type":"object","required":["urls"],"properties":{"urls":{"type":"array","items":{"type":"string"},"example":["https://link-to-your-pdf-1.pdf","https://link-to-your-pdf-2.pdf"]},"inline":{"type":"boolean","example":true},"fileName":{"type":"string","example":"test.pdf"},"extraHTTPHeaders":{"type":"object","description":"A key-value pair (dictionary) for setting headers on a request to a URL."},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"PdfSharpBookmarks":{"type":"object","required":["url","bookmarks"],"properties":{"url":{"type":"string","format":"url","example":"https://link-to-your-pdf-1.pdf"},"bookmarks":{"type":"array","items":{"type":"object","properties":{"title":{"type":"string"},"page":{"type":"integer"}}}},"inline":{"type":"boolean","example":true},"fileName":{"type":"string","example":"test.pdf"},"extraHTTPHeaders":{"type":"object","description":"A key-value pair (dictionary) for setting headers on a request to a URL."},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"PdfSharpPassword":{"type":"object","required":["url","userpassword"],"properties":{"url":{"type":"string","format":"url","example":"https://link-to-your-pdf-1.pdf"},"userpassword":{"type":"string","example":"your-password"},"ownerpassword":{"type":"string","example":"your-password"},"inline":{"type":"boolean","example":true},"fileName":{"type":"string","example":"test.pdf"},"extraHTTPHeaders":{"type":"object","description":"A key-value pair (dictionary) for setting headers on a request to a URL."},"useCustomStorage":{"type":"boolean","example":false},"storage":{"$ref":"#/components/schemas/FileStorageOptions"}}},"UtilityZipAllFiles":{"type":"object","required":["files"],"properties":{"files":{"type":"array","items":{"type":"object","properties":{"url":{"type":"string","format":"url"},"fileName":{"type":"string","description":"Can be a path including subfolder in name"}}}}}}}},"security":[{"HeaderApiKey":[]}]}