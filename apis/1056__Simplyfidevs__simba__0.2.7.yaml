penapi: 3.0.0
info:
  title: SIMBA powered by SIMPLYFI
  description: |
    SimplyFI Bank Automation (SIMBA) APIs will automate the Trade Finance Documentation compliance check with all regulations under ISBP

    powered by - [SimplyFi Softech India Pvt. Ltd.](https://simplyfi.tech)
  contact:
    email: viswanadh@simplyfi.tech
  version: 0.2.7
servers:
- url: http://174.138.122.223:5002/
tags:
- name: OCR & AI APIs
  description: needs to verify
- name: User Management
  description: Admin and user registration
paths:
  /user/admin_register:
    post:
      tags:
      - user management
      summary: admin register
      description: Registers an admin. Sends an email to the provided emailId with a verification link to reset the password.
      operationId: registerAdmin
      requestBody:
        description: Created authentication object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerAdmin'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerAdmin'
        400:
          description: Bad Request
        401:
          description: Unauthorized    
  /user/login:
    post:
      tags:
      - user management
      summary: user login
      description: registered user can login by using password and email id
      operationId: login
      requestBody:
        description: Created authentication object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login'
        400:
          description: Bad Request
        401:
          description: Unauthorized
  /user/logout:
    delete:
      tags:
      - user management
      summary: logout token
      description: To logout of the application
      operationId: logout
      responses:
        201:
          description: Created
        400:
          description: Bad Request
        401:
          description: Unauthorized  
      security:
      - Bearer: []   
  /user/refresh:
    post:
      tags:
      - user management
      summary: get refresh token
      description: When your token gets expired you can refresh token by this api.
      operationId: getRefreshToken
      responses:
        201:
          description: Created
        400:
          description: Bad Request
        401:
          description: Unauthorized  
      security:
      - Bearer: []      
  /user/reset_password:
    put:
      tags:
      - user management
      summary: reset password
      description: Once the email has been verified using the login link provided, the link redirects to ‘reset_password’ API where the admin can set a new password.
      operationId: updatePassword
      requestBody:
        description: reset password link
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resetPassword'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resetPassword'
        400:
          description: Bad Request
        401:
          description: Unauthorized
  /user/user_register:
    post:
      tags:
      - user management
      summary: user get registered by admin
      description: User will be created and a mail with a verification link will be sent to the emailId providedby the admin. Admin can create user and also assign the role. Admin assigns the roles as per the requirement. As of now, Admin can assign maker or checker roles.
      operationId: registerUser
      requestBody:
        description: Created authentication object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerUser'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerUser'
        400:
          description: Bad Request
        401:
          description: Unauthorized  
      security:
      - Bearer: []       
  /MT734:
    get:
      tags:
      - OCR & AI
      summary: get swift list
      description: needs to verify
      operationId: getSwiftList
      responses:
        201:
          description: successful operation
        400:
          description: Invalid Order
  
  /article/{article_id}:
    get:
      tags:
      - OCR & AI
      summary: get article list
      description: Articles are the rules that apply to any documentary credits or foreign trade. This will display the description of article on the basis of article id.
      operationId: getArticle
      parameters:
      - name: article_id
        in: path
        description: article id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        201:
          description: successful operation
        400:
          description: Invalid Order
  
  /maker/docs/data/{request_id}:
    get:
      tags:
      - OCR & AI
      summary: reports table data
      description: Displays results of OCR. This page provides all the relevant information required to process the transaction, as per the UCP and any other ISBP publications.
      operationId: getReport
      parameters:
      - name: request_id
        in: path
        description: request id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        201:
          description: successful operation
        400:
          description: Invalid Order
      security:
      - Bearer: []   
  /maker/docs/details/{request_id}:
    get:
      tags:
      - OCR & AI
      summary: fetch docs based on request id
      description: Displays document wise details like - Name of the document, No.of Copies and a link to view the Document.
      operationId: getdoc
      parameters:
      - name: request_id
        in: path
        description: request id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        201:
          description: successful operation
        400:
          description: Invalid Order
      security:
      - Bearer: []       
  /maker/docs/process:
    post:
      tags:
      - OCR & AI
      summary: processing of docs
      description: The documents will be processed and classified accordingly using Pytesseract. Data from the classified documents will be extracted using OCR and stored.
      operationId: docProcess
      requestBody:
        description: processing of docs
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/docProcess'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/docProcess'
        400:
          description: Bad Request
        401:
          description: Unauthorized
      security:
      - Bearer: []
  /maker/docs/summary/{request_id}:
    get:
      tags:
      - OCR & AI
      summary: doc summary based on request id
      description: Displays accuracy and status of all the rules for each document 
      operationId: getSummary
      parameters:
      - name: request_id
        in: path
        description: request id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        201:
          description: successful operation
        400:
          description: Invalid Order
      security:
      - Bearer: []          
  /maker/docs/upload:
    post:
      tags:
      - OCR & AI
      summary: upload doc
      description: Initiates the transaction by uploading or scanning all the documents.
      operationId: uploadDoc
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'file' will be the field name in this multipart request
                file:
                  type: string
                  format: binary
        required: true
      responses:
        201:
          description: Created
        400:
          description: Bad Request
        401:
          description: Unauthorized
      security:
      - Bearer: []  
  /maker/docs/{request_id}:
    get:
      tags:
      - OCR & AI
      summary: fetch document details based on request id
      description: When user uploads the documents a request id gets created so to get the all documents details we need to pass request id.
      operationId: getDocc
      parameters:
      - name: request_id
        in: path
        description: request id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        201:
          description: successful operation
        400:
          description: Invalid Order
      security:
      - Bearer: []       
  /maker/docs/{request_id}/{rule_id}:
    get:
      tags:
      - OCR & AI
      summary: filter documents based on request id and rule id
      description: rule ids are assigned for each rule mentioned in the articles. So we can filter document on the basis of request id and rule id.
      operationId: getDoccc
      parameters:
      - name: request_id
        in: path
        description: request id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rule_id
        in: path
        description: rule id
        required: true
        style: simple
        explode: false
        schema:
          type: string    
      responses:
        201:
          description: successful operation
        400:
          description: Invalid Order
      security:
      - Bearer: []       
  
components:
  schemas:
    login:
      required:
      - password
      - userId
      type: object
      properties:
        password:
          type: string
          description: You need to provide this particular password
          example: password
        userId:
          type: string
          description: You need to provide this particular user id
          example: test123 
    registerAdmin:
      required:
      - emailId
      - roles
      type: object
      properties:
        emailId:
          type: string
          description: emailId of the user
          example: tilifi3792@mail3tech.com
        roles:
          type: string
          description: role of the user
          example: admin  
    registerUser:
      required:
      - emailId
      - roles
      - employeeName
      - employeeId
      - designation
      - reporting_Authority
      - branch_Name
      - city
      - country
      type: object
      properties:
        emailId:
          type: string
          description: emailId of the user
          example: tilifi3792@mail3tech.com
        roles:
          type: string
          description: role of the user
          example: admin 
        employeeName:
          description: name of the employee
          type: string
          example: John
        employeeId:
          description: id of the employee
          type: string
          example: i0004
        designation:
          description: designtaion
          type: string
          example: manager
        reporting_Authority:
          description: reporting authority
          type: string
          example: general
        branch_Name:
          description: name of the branch
          type: string
          example: itpl
        city:
          description: city
          type: string
          example: Bangalore
        country:
          description: country
          type: string
          example: India  
    resetPassword:
      required:
      - emailId
      - oldPassword
      - newPassword
      type: object
      properties:
        emailId:
          description: emailId
          type: string
          example: tilifi3792@mail3tech.com
        oldPassword:
          description: password
          type: string
          example: 6YOKTJ
        newPassword:
          description: password
          type: string
          example: test123
    
    docProcess:
      required:
      - request_id
      type: object
      properties:
        request_id:
          type: string
          description: NTQQ1VLO2G
          example: NTQQ1VLO2G
    
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header