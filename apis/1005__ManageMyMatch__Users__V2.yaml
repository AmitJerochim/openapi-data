penapi: 3.0.1
info:
  title: ManageMyMatch API
  description: |-
    Public API to ManageMyMatch. All access requires authorisation. For your personal **access token** and **api key**, refer to the [developer tab](https://www.managemymatch.com/my/account/developers)  in **My account** where you will find a panel entitled *Generate an accessToken for API access* 
    > *Please note that this API is a work in progress and it is intended to grow over the coming months*
  contact:
    name: MMM Support
    email: support@managemymatch.com
  license:
    name: 'License: Apache 2.0'
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "V2"
servers:
- url: https://api.managemymatch.com/{basePath}
  variables:
    basePath:
      default: test
      enum:
        - v1
        - test
      description: Test server is accessed with 'test' and production server accessed via an API version number - *Vn*
- url: https://{basePath}.managemymatch.com
  variables:
    basePath:
      default: test
      enum:
        - www
        - test
      description: Access point to retrieve basic user information with a bearer token
tags:
- name: users
  description: Authenticated MMM users only
- name: oauth2
  description: oauth2 bearer token access
paths:
  /my/details:
    get:
      tags:
      - users
      description: Retrieves user details including personal information like DoB
        etc
      operationId: my-details
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
      security:
      - access_token: []
      - api_key: []
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:705889014628:function:api:${stageVariables.environment}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
  /my/bookings:
    get:
      tags:
      - users
      description: Retrieves all personal court bookings from today onward (at any
        club)
      operationId: my-bookings
      responses:
        200:
          description: 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingItem'
      security:
      - access_token: []
      - api_key: []
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:705889014628:function:api:${stageVariables.environment}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
  /oauth/user:
    get:
      tags:
      - oauth2
      description: Retrieves a user id and name given the bearer token provided
      operationId: aouth2-user
      responses:
        200:
          description: 200 resoonse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIdentifier'
      security:
      - bearer_token: []
components:
  schemas:
    UserDetail:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: First and last name
          example: Joseph Bloggs
        address:
          type: string
          description: Full address
          example: 12 Sycamore avenue, etc
        postcode:
          type: string
          description: Post code or Zip code
          example: FE11 6GT
        phone:
          type: string
          description: Users phone number
          example: 09876 123456
        email:
          type: string
          description: Primary email
          format: email
        dob:
          type: string
          description: Date of birth
          format: date
        sex:
          type: string
          description: Sex (specified or unspecified)
          enum:
          - male
          - female
          - unspecified
        sports:
          type: array
          items:
            $ref: '#/components/schemas/Sport'
        clubs:
          type: array
          description: Set of clubs to which user is a member
          items:
            $ref: '#/components/schemas/ObjectIdentifier'
    BookingItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        details:
          type: string
          description: The purpose for whch this booking has been made
          example: Match
        period:
          $ref: '#/components/schemas/DatePeriod'
        duration:
          type: integer
          description: Duration of booking in minutes
          example: 45
        court:
          type: string
          description: The court name
          example: "3"
        club:
          $ref: '#/components/schemas/ObjectIdentifier'
    DatePeriod:
      required:
      - end
      - start
      type: object
      properties:
        start:
          type: string
          description: The start of the period
          format: date-time
        end:
          type: string
          description: The end of the period
          format: date-time
    Id:
      pattern: /^[23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz]{17}$/
      type: string
      description: Standard MMM document identifier
      example: Zj7jE4rYuGgdrjHJE
    ObjectIdentifier:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: Name of the object associated with the id given above
          example: Name of this object
    Sport:
      type: string
      description: Supported court sports
      enum:
      - squash
      - squash57
      - lcscash
      - tennis
      - tabletennis
      - badminton
  securitySchemes:
    api_key:
      type: apiKey
      name: x-api-key
      in: header
    access_token:
      type: apiKey
      name: accessToken
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        authorizerUri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:705889014628:function:APIauthorizer:${stageVariables.environment}/invocations
        authorizerResultTtlInSeconds: 300
        identityValidationExpression: ^.{43}$
        type: token
    bearer_token:
      type: http
      scheme: bearer
x-aws-api-id: 4zh0y1uad7