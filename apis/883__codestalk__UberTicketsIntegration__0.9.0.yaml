openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: Development Environment
    url: http://api-ubertickets.codestalk.dev/integrations/v1
info:
  description: Uber Tickets Integration API for 3rd Party Application
  version: "0.9.0"
  title: Uber Tickets Integration API
  contact:
    email: admin@codestalk.dev
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: auth
    description: Authenticate accounts
  - name: tickets
    description: Member available tickets
  - name: templates
    description: Member available templates
  - name: members
    description: Members record
paths:
  /auth/login:
    post:
      tags:
        - auth
      description: "<p>Login as an application account<br><br><strong>- generates application token</strong></p>"
      operationId: authLogin
      responses:
        '200':
          description: authentication successful
        '400':
          description: invalid values
        '401':
          description: unauthorized access
        '500':
          description: server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationAuth'
        description: Application Login Credential
  /auth/login/as:
    post:
      tags:
        - auth
      security:
        - bearerToken: []
      description: "<p>In behalf, login as a member account<br><br><strong>- use application token</strong><br><strong>- generates member token</strong></p>"
      operationId: authLoginAs
      responses:
        '200':
          description: authentication successful
        '400':
          description: invalid values
        '401':
          description: unauthorized access
        '500':
          description: server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asMemberAuth'
        description: As User Login Credential
  /my/tickets:
    get:
      tags:
        - tickets
      security:
        - bearerToken: []
      description: "<p>get member available tickets<br><br><strong>- use member token</strong></p>"
      operationId: getMyTickets
      responses:
        '200':
          description: tickets retrieved
        '404':
          description: not found
        '500':
          description: server error
    post:
      tags:
        - tickets
      security:
        - bearerToken: []
      description: "<p>submit a ticket for a member<br><br><strong>- use member token</strong></p>"
      operationId: createMyTicket
      responses:
        '201':
          description: ticket created
        '400':
          description: invalid values
        '404':
          description: not found
        '500':
          description: server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createTicketModel'
        description: Ticket Creation Model
  '/my/tickets/{id}':
    get:
      tags:
        - tickets
      security:
        - bearerToken: []
      description: "<p>get member current ticket info via ID<br><br><strong>- use member token</strong></p>"
      operationId: getMyTicket
      parameters:
        - name: id
          in: path
          description: Ticket ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ticket retrieved
        '404':
          description: not found
        '500':
          description: server error
  /my/templates:
    get:
      tags:
        - templates
      security:
        - bearerToken: []
      description: "<p>get member available templates<br><br><strong>- use member token</strong></p>"
      operationId: getMyTemplates
      responses:
        '200':
          description: templates retrieved
        '404':
          description: not found
        '500':
          description: server error
  '/my/templates/{id}':
    get:
      tags:
        - templates
      security:
        - bearerToken: []
      description: "<p>get member current template data via ID<br><br><strong>- use member token</strong></p>"
      operationId: getMyTemplate
      parameters:
        - name: id
          in: path
          description: Template ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: template retrieved
        '404':
          description: not found
        '500':
          description: server error
  /members/find:
    get:
      tags:
        - members
      security:
        - bearerToken: []
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: member registered email
      description: "<p>find member record via email<br><br><strong>- use application token</strong></p>"
      operationId: getMember
      responses:
        '200':
          description: tickets retrieved
        '400':
          description: invalid values
        '404':
          description: not found
        '500':
          description: server error
  /members/create:
    post:
      tags:
        - members
      security:
        - bearerToken: []
      description: "<p>create a member<br><br><strong>- use application token</strong></p>"
      operationId: createMember
      responses:
        '201':
          description: member created
        '400':
          description: invalid values
        '404':
          description: not found
        '500':
          description: server error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMemberModel'
        description: Member Creation Model
components:
  schemas:
    applicationAuth:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: app_username
        password:
          type: string
          example: app_password
    asMemberAuth:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: user@mail.com
    createTicketModel:
      type: object
      required:
        - template_id
        - field_id
      properties:
        template_id:
          type: string
          format: uuid
          example: 8f31879e-1534-58ca-933e-acb23354b9fb
        field_id:
          type: string
          example: field value
    createMemberModel:
      type: object
      required:
        - email
        - meta
      properties:
        email:
          type: string
          format: email
          example: email@mail.com
        meta:
          type: object
          properties:
            first_name:
              type: string
              example: John
            last_name:
              type: string
              example: Doe
          required:
            - first_name
            - last_name
  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
