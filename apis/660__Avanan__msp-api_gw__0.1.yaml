openapi: 3.0.1
info:
  title: 'Avanan portal API'
  description: >
    This API provides MSP with ability to do CRUD operations on their portals.
  version: "0.1"
servers:
  - url: 'https://q8ykd35w73.execute-api.us-east-1.amazonaws.com/{basePath}'
    variables:
      basePath:
        default: v1
paths:
  /api/token:
    post:
      tags:
        - Token
      summary: Get access token
      description: >-
        Takes a set of user credentials and returns an access token
        authentication of those credentials.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenInput'
      responses:
        '200':
          description: Token was successfully generated and returned in response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
      x-code-samples:
      - lang: curl
        source: |
          curl \
            "https://q8ykd35w73.execute-api.us-east-1.amazonaws.com/v1/api/token" \
            --request POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=string" \
            -d "client_secret=string" \
            -d "grant_type=client_credentials"
  /api/portals:
    get:
      tags:
        - Portal
      summary: List available portals
      responses:
        '200':
          description: List of portals is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfPortal'
      security:
        - jwt-token-auth: []
      x-code-samples:
      - lang: curl
        source: |
          curl \
            "https://q8ykd35w73.execute-api.us-east-1.amazonaws.com/v1/api/portals" \
            -H  "Authorization: the_token"
    post:
      tags:
        - Portal
      summary: Add a new portal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalInput'
        required: true
      responses:
        '201':
          description: Portal was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalId'
      security:
        - jwt-token-auth: []
      x-code-samples:
      - lang: curl
        source: |
          curl \
            "https://q8ykd35w73.execute-api.us-east-1.amazonaws.com/v1/api/portals" \
            --request POST \
            -H  "Authorization: the_token" \
            -H  "Content-Type: application/json" \
            -d '{
              "domain":"company-domain",
              "email":"user@example.com",
              "name":"John Doe",
              "phone":"+1234567890",
              "company_name":"Super Company",
              "region":"us"
            }'

  /api/licenses:
    get:
      tags:
        - License
      summary: List available licenses
      responses:
        '200':
          description: List of available licenses is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfLicense'

      security:
        - jwt-token-auth: []
      x-code-samples:
      - lang: curl
        source: |
          curl \
            "https://q8ykd35w73.execute-api.us-east-1.amazonaws.com/v1/api/licenses" \
            -H  "Authorization: the_token"

  /api/portals/{portalId}/license:
    post:
      tags:
        - License
      summary: Set license for portal
      parameters:
        - name: portalId
          in: path
          description: Numeric ID of the portal to set license.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseCodeName'
        required: true
      responses:
        '200':
          description: The license was assigned successfully
          content: {}
        '404':
          description: The portal was not found
          content: {}
      security:
        - jwt-token-auth: []
      x-code-samples:
      - lang: curl
        source: |
          curl \
            "https://q8ykd35w73.execute-api.us-east-1.amazonaws.com/v1/api/portals/{portalId}/license" \
            --request POST \
            -H  "Authorization: the_token" \
            -H  "Content-Type: application/json" \
            -d '{
              "license":"advanced_anti_phising"
            }'

  '/api/portals/{portalId}':
    get:
      tags:
        - Portal
      summary: Get portal details
      parameters:
        - name: portalId
          in: path
          description: Numeric ID of the portal to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Portal details are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portal'
        '404':
          description: The portal was not found
          content: {}
      security:
        - jwt-token-auth: []
      x-code-samples:
      - lang: curl
        source: |
          curl \
            "https://q8ykd35w73.execute-api.us-east-1.amazonaws.com/v1/api/portals/{portalId}" \
            -H  "Authorization: the_token"
    delete:
      tags:
        - Portal
      summary: Delete portal
      parameters:
        - name: portalId
          in: path
          description: Numeric ID of the portal to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The portal was deleted successfully.
          content: {}
        '404':
          description: The portal was not found
          content: {}
      security:
        - jwt-token-auth: []
      x-code-samples:
      - lang: curl
        source: |
          curl \
            "https://q8ykd35w73.execute-api.us-east-1.amazonaws.com/v1/api/portals/{portalId}" \
            --request DELETE
            -H  "Authorization: the_token"

components:
  schemas:
    PortalInput:
      description: This data need to be passed to create a new portal
      required:
        - company_name
        - domain
        - email
        - name
        - phone
        - region
      type: object
      properties:
        domain:
          type: string
          description: Domain name that will be assigned to new portal.
          example: company-domain
        email:
          type: string
          description: Contact person email
          format: email
        name:
          type: string
          description: Contact person name
          example: John Doe
        phone:
          type: string
          description: Contact person (company) phone number
          example: "+1234567890"
        company_name:
          type: string
          description: Company name
          example: Super Company
        region:
          type: string
          description: Region where the portal will be created (US, Canada or Europe)
          enum:
            - us
            - ca
            - eu
          example: us
    Portal:
      description: This data are returned by API for existing portal
      type: object
      properties:
        id:
          type: integer
          description: Portal ID
          format: int32
          example: 10
        portal:
          type: string
          description: Portal domain name
          example: some-company.avanan.net
        mode:
          type: string
          description: Whether portal is paid or POC
          enum:
            - poc
            - paid
          example: paid
        license:
          allOf:
            - $ref: '#/components/schemas/License'
          description: License assigned to this portal
        poc_date_start:
          type: string
          description: POC period start date
          format: date
        poc_date_expiration:
          type: string
          description: POC period expiration date
          format: date
        paid_date_start:
          type: string
          description: Paid period start date
          format: date
        status:
          type: object
          description: Health status of the portal
          properties:
            status_code:
              type: string
              description: Status code
              enum:
                - success
                - warning
                - error
              example: success
            text:
              type: string
              description: Status details
              example: Active

    ArrayOfPortal:
      type: array
      items:
        $ref: '#/components/schemas/Portal'

    LicenseCodeName:
      description: License code name, that can be used to assign license to portal
      required:
        - code_name
      type: object
      properties:
        code_name:
          type: string
          example: advanced_anti_phising
          description: License code name to set.
    License:
      description: License information
      type: object
      properties:
        code_name:
          type: string
          example: advanced_anti_phising
          description: License code name
        display_name:
          type: string
          example: Advanced Anti-Phishing
          description: License display name
    ArrayOfLicense:
      type: array
      items:
        $ref: '#/components/schemas/License'
    PortalId:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 10
    TokenInput:
      properties:
        client_id:
          type: string
          description: ClientID
        client_secret:
          type: string
          description: ClientSecret
        grant_type:
          type: string
          enum: [client_credentials]
          description: This one must always be client_credentials
      required:
      - client_id
      - client_secret
      - grant_type
    TokenData:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          enum: [Bearer]
        expires_in:
          type: integer
          format: int32
          description: Access token lifetime, in seconds
          example: 3600
  securitySchemes:
    jwt-token-auth:
      type: apiKey
      name: Authorization
      in: header
      description: >
        Call [token](#tag/Token) endpoint to get JWT Bearer token, and then pass this token to all following requests in `Authorization` header. Token lifetime is 60 minutes.
      x-amazon-apigateway-authtype: cognito_user_pools
