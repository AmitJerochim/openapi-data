openapi: 3.0.0
info:
  version: "1.0.0"
  title: data-trial

paths:
  /users:
    post:
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '409':
          $ref: '#/components/responses/Username_Taken'
    get:
      description: Returns an array of users
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/Vector'
        - $ref: '#/components/parameters/Users_Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
  /messages:
    post:
      description: Creates a new message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_Message'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
    get:
      description: Returns an array of messages sorted lesser to greater by `timestamp` property
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/Vector'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
    
                   
components:
  parameters:
    Index:
      description: an array index; used in conjunction with `vector` to fetch a subarray from an underlying array of items; ignored if the underlying array is empty
      name: index
      in: query
      schema:
        type: integer
        default: the maximum index of the underlying array
    Vector:
      description: a signed integer where the absolute value specifies a quantity of items and the sign specifies whether these items are ascending (positive sign) or descending (negative sign) from a starting index (inclusive); used in conjunction with `index` to fetch a subarray from an underlying array of items; ignored if the underlying array is empty
      name: vector
      in: query
      schema:
        type: integer
        default: -10
    Users_Sort:
      description: specifies the sort order of the underlying array of users; `username` sorts greater to lesser by the `username` property; `timestamp` sorts lesser to greater by the `timestamp` property
      name: sort
      in: query
      schema:
        type: string
        enum: [username, timestamp]
        default: username
    User_ID:
      description: a user ID
      name: user_id
      in: path
      required: true
      schema:
        type: integer
  responses:
    Username_Taken:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: username is already in use
  schemas:
    New_User:
      type: object
      properties:
        username:
          type: string
        password_hash:
          type: string
        timestamp:
          description: an ISO 8601 timestamp
          type: string
          format: date-time
          example: '2013-02-04T22:44:30.652Z'
      required: [username, password_hash, timestamp]
    User:
      type: object
      properties:
        id:
          description: a unique identifier
          type: string
        username:
          type: string
        password_hash:
          type: string
        timestamp:
          description: an ISO 8601 timestamp
          type: string
          format: date-time
          example: '2013-02-04T22:44:30.652Z'
      required: [id, username, password_hash, timestamp]
    New_Message:
      type: object
      properties:
        text:
          type: string
        author_id:
          description: a unique identifier
          type: string
        timestamp:
          description: an ISO 8601 timestamp
          type: string
          format: date-time
          example: '2013-02-04T22:44:30.652Z'
      required: [text, author_id, timestamp]
    Message:
      type: object
      properties:
        id:
          description: a unique identifier
          type: string
        text:
          type: string
        author_id:
          description: a unique identifier
          type: string
        timestamp:
          description: an ISO 8601 timestamp
          type: string
          format: date-time
          example: '2013-02-04T22:44:30.652Z'
      required: [id, text, author_id, timestamp]
    Array_Container:
      type: object
      properties:
        total_length:
          description: the length of the underlying array of items; not the length of the array in the response
          type: integer
      required: [total_length]
    Users:
      allOf:
        - $ref: '#/components/schemas/Array_Container'
        - type: object
          properties:
            array:
              type: array
              items:
                $ref: '#/components/schemas/User'
          required: [array]
    Messages:
      allOf:
        - $ref: '#/components/schemas/Array_Container'
        - type: object
          properties:
            array:
              type: array
              items:
                $ref: '#/components/schemas/Message'
          required: [array]
