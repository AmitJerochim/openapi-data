openapi: 3.0.0
servers:
  - url: 'https://api.dubiex.com'
info:
  version: '1.0.0'
  title: Cryptocurrency exchange DubiEx API spec
paths:
  /api/orders:
    get:
      tags:
        - inactive
        - redflag
        - redflag_cantFindUsage
        - complexity_4
        - network_complexity_0
        - risk_10
        - weight_10
      summary: Gets orders
      operationId: getOrders
      parameters:
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/Orders'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/sortedOrders:
    get:
      tags:
        - inactive
        - redflag_cantFindUsage
        - complexity_4
        - network_complexity_0
        - risk_8
        - weight_10
      summary: Gets sorted orders
      operationId: getSortedOrders
      parameters:
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':  
          $ref: '#/components/responses/Orders'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/groupedOrders/timeframe/{timeframe}:
    get:
      tags:
        - inactive
        - redflag_cantFindUsage
        - complexity_1
        - risk_10
        - weight_10
      summary: Gets grouped orders of timeframe
      operationId: getGroupedOrdersOfTimeframe
      parameters:
        - $ref: '#/components/parameters/Timeframe'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/OrdersGroupedInTimeframe'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/indexes/{store}/timeframe/{timeframe}:
    get:
      tags:
        - inactive
        - redflag
        - redflag_cantFindUsage
        - complexity_1
        - risk_10
        - weight_10
      summary: Gets specified store data of specific timeframe 
      operationId: getIndexesInTimeframe
      parameters:
        - $ref: '#/components/parameters/Timeframe'
        - $ref: '#/components/parameters/Store'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/Indexes'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /live:
    get:
      tags:
        - live
        - complexity_1
        - risk_1
        - weight_1
      summary: Gets specific store data in timeframe
      operationId: getStoreInTimeframe
      responses:
        '200':
          $ref: '#/components/responses/LiveProbe'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /ready:
    get:
      tags:
        - live
        - complexity_1
        - risk_1
        - weight_1
      summary: Endpoint to validate if api is ready to serve data
      operationId: isApiReady
      responses:
        '200':
          $ref: '#/components/responses/ReadyProbe'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/globalStats/timeframe/{timeframe}/{oldTimestamp}/{newTimestamp}:
    get:
      tags:
        - inactive
        - redflag
        - redflag_cantFindUsage
        - complexity_1
        - risk_10
        - weight_10
      summary: Gets orders of exchange between timestamps in timeframe chunks
      operationId: getGlobalStatsBetweenTimestampsInTimeframeChunks
      parameters:
        - $ref: '#/components/parameters/Timeframe'
        - $ref: '#/components/parameters/NewTimestamp'
        - $ref: '#/components/parameters/OldTimestamp'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/Orders'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/pairs/timeframe/{timeframe}/{oldTimestamp}/{newTimestamp}/{pairA}/{pairB}:
    get:
      tags:
        - live
        - complexity_3
        - risk_10
        - weight_10
      summary: Gets orders of coin pair between timestamps in timeframe chunks
      operationId: getCoinPairOrdersBetweenTimestampsInTimeframeChunks
      parameters:
        - $ref: '#/components/parameters/Timeframe' 
        - $ref: '#/components/parameters/OldTimestamp' 
        - $ref: '#/components/parameters/NewTimestamp'
        - $ref: '#/components/parameters/PairA'
        - $ref: '#/components/parameters/PairB'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/Pairs'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500': 
          $ref: '#/components/responses/500-UnexpectedError'
  /api/orders/status/{ids}:
    get:
      tags:
        - inactive
        - complexity_3
        - risk_2
        - weight_4
      summary: Gets status information of orders
      operationId: getOrdersStatus
      parameters:
        - $ref: '#/components/parameters/Ids'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/OrdersStatus'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/orders/history/{ids}:
    get:
      tags:
        - live
        - complexity_3
        - risk_2
        - weight_4
      summary: Gets history of the orders
      operationId: getOrderHistory
      parameters:
        - $ref: '#/components/parameters/Ids'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/OrdersHistory'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/markets:
    get:
      tags:
        - live
        - complexity_1
        - risk_8
        - weight_8
      summary: Gets all dubiex markets
      operationId: getDubiExMarkets
      parameters:
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/Markets'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/tokens:
    get:
      tags:
        - live
        - complexity_5
        - risk_2
        - weight_2
      summary: Gets all tokens of dubiEx
      operationId: getDubiExTokens
      parameters:
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/Tokens'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/tokens/query:
    post:
      tags:
        - live
        - complexity_3
        - risk_
        - weight_
      summary: Get tokens using query
      operationId: getDubiExTokensWithQuery
      parameters:
        - $ref: '#/components/parameters/Limit'
      requestBody:
        $ref: '#/components/requestBodies/TokensQuery'
      responses:
        '200':
          $ref: '#/components/responses/SearchedTokens'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/tokens/search/{str}:
    get:
      tags:
        - live
        - complexity_1
        - risk_3
        - weight_4
      summary: Searches tokens
      operationId: searchTokens
      parameters:
        - $ref: '#/components/parameters/Str'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/SearchedTokens'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/sync:
    get:
      tags:
        - inactive
        - redflag
        - redflag_cantFindUsage
        - complexity_1
        - risk_1
        - weight_1
      summary: Gets ethereum node sync stats
      operationId: getEthNodeSyncStats
      responses:
        '200':
          $ref: '#/components/responses/EthNodeSync'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/pendingTransaction/add:
    post:
      tags:
        - live
        - complexity_4
        - network_complexity_1
        - risk_3
        - weight_4
        - call_api
        - call_api_etherscan
        - call_api_etherscan_getTransactionByHash
      summary: Adds pending transaction to be monitored
      operationId: addPendingTxToMonitoring
      requestBody:
        $ref: '#/components/requestBodies/MonitorPendingTransaction'
      responses:
        '200':
          $ref: '#/components/responses/MonitorPendingTransaction'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/pendingTransactions/all/:
    get:
      tags:
        - live
        - complexity_1
        - risk_1
        - weight_2
      summary: Gets all pending orders
      operationId: getAllPendingOrders
      parameters:
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/PendingOrders'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/buywallLevels:
    get:
      tags:
        - live
        - complexity_1
        - risk_1
        - weight_1
      summary: Gets current buy wall levels
      operationId: getCurrentBuyWallLevels
      responses:
        '200':
          $ref: '#/components/responses/BuyWallLevels'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/gasPrice:
    get:
      tags:
        - live
        - complexity_1
        - risk_1
        - weight_1
      summary: Gets current gas price
      operationId: getCurrentGasPrice
      responses:
        '200':
          $ref: '#/components/responses/GasPrice'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/ethBalance/{address}:
    get:
      tags:
        - live
        - complexity_1
        - risk_1
        - weight_1
      summary: Get eth balance of an address
      operationId: getEthBalanceOfAddress
      parameters:
        - $ref: '#/components/parameters/Address'
      responses:
        '200':
          $ref: '#/components/responses/EthBalance'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-UnexpectedError'
  /api/orders/status/query/{user}:
    get:
      tags:
        - live
        - risk_5
        - weight_8
      operationId: getOrdersOfWallet
      parameters:
        - $ref: '#/components/parameters/Users'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/CountsAndOrderResultAndPages'
  /api/orders/status/query/{user}/{pairA}:
    get:
      tags:
        - live
        - risk_5
        - weight_6
      summary: Gets wallet address orders of specific token
      operationId: getWalletAddressOrdersOfSpecificToken
      parameters:
        - $ref: '#/components/parameters/Users'
        - $ref: '#/components/parameters/PairA'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/CountsAndOrderResultAndPages'
  /api/orders/status/query/{user}/{pairA}/{pairB}:
    get:
      tags:
        - live
        - risk_5
        - weight_4
      summary: Gets wallet orders of coin pair
      operationId: getOrdersOfWalletOfCoinPair
      parameters:
        - $ref: '#/components/parameters/Users'
        - $ref: '#/components/parameters/PairA'
        - $ref: '#/components/parameters/PairB'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/CountsAndOrderResultAndPages'
  /api/orders/history/query/:{type}:
    get:
      tags:
        - live
        - complexity_3
        - risk_10
        - weight_10
      summary: Gets history of buy, sell or all orders of specific wallet address and token  
      operationId: getHistoryOfBuySellOrAllOrders
      parameters:
        - $ref: '#/components/parameters/Type' 
      responses:
        '200':
          $ref: '#/components/responses/CountsAndOrderResultAndPages'
  /api/orders/history/query/:{type}/:{user}:
    get:
      tags:
        - live
        - complexity_3
        - risk_10
        - weight_10
      summary: Gets history of buy, sell or all orders of specific wallet address and token  
      operationId: getHistoryOfBuySellOrAllOrdersOfSpecificWallet
      parameters:
        - $ref: '#/components/parameters/Type' 
        - $ref: '#/components/parameters/Users' 
      responses:
        '200':
          $ref: '#/components/responses/CountsAndOrderResultAndPages'
  /api/orders/history/query/:{type}/:{user}/:{pairA}:
    get:
      tags:
        - live
        - complexity_3
        - risk_10
        - weight_10
      summary: Gets history of buy, sell or all orders of specific wallet address and token  
      operationId: getHistoryOfBuySellOrAllOrdersOfSpecificWalletAndToken
      parameters:
        - $ref: '#/components/parameters/Type' 
        - $ref: '#/components/parameters/Users' 
        - $ref: '#/components/parameters/PairA' 
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/CountsAndOrderResultAndPages'
  /api/orders/history/query/:{type}/:{user}/:{pairA}/:{pairB}:
    get:
      tags:
        - live
        - complexity_3
        - risk_10
        - weight_10
      summary: Gets history of buy, sell or all orders of specific wallet address and token pair
      operationId: getHistoryOfBuySellOrAllOrdersOfSpecificWalletAndTokenPair
      parameters:
        - $ref: '#/components/parameters/Type'
        - $ref: '#/components/parameters/Users'
        - $ref: '#/components/parameters/PairA'
        - $ref: '#/components/parameters/PairB'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/CountsAndOrderResultAndPages'
  /api/pending/{user}:
    get:
      tags:
        - live
        - complexity_1
        - risk_4
        - weight_5
      summary: Get pending orders of users
      operationId: getPendingOrdersOfUsers
      parameters:
        - $ref: '#/components/parameters/Users'
      responses:
        '200':
          $ref: '#/components/responses/CountsAndOrderResultAndPages'
  /api/pending/{user}/{pairA}:
    get:
      tags:
        - live
        - complexity_1
        - risk_4
        - weight_5
      summary: Get pending orders of users of specific token
      operationId: getPendingOrdersOfUsersOfSpecificToken
      parameters:
        - $ref: '#/components/parameters/Users'
        - $ref: '#/components/parameters/PairA'
      responses:
        '200':
          $ref: '#/components/responses/CountsAndOrderResultAndPages'
  /api/pending/{user}/{pairA}/${pairB}:
    get:
      tags:
        - live
        - complexity_1
        - risk_4
        - weight_5
      summary: Get pending orders of users of specific token pair
      operationId: getPendingOrdersOfUsersOfSpecificTokenPair
      parameters:
        - $ref: '#/components/parameters/Users'
        - $ref: '#/components/parameters/PairA'
        - $ref: '#/components/parameters/PairB'
      responses:
        '200':
          $ref: '#/components/responses/CountsAndOrderResultAndPages'
components:
  schemas:

  # SIMPLE SCHEMAS
    
    DateTime:
      type: string
      format: date-time
      example: '2018-02-28T03:58:42.384Z'
    Int32:
      type: integer
      format: int32
      example: 5
    PositiveFloat:
      type: number
      format: float
      minimum: 0
      example: 0.105
    PositiveNumber:
      type: number
      minimum: 0
      example: 20.10
    PositiveInt:
      type: integer
      minimum: 0
      example: 100
    UnixTimestamp:
      type: integer
      minimum: 1300000000
      example: 1582363069
    StringBigInt:
      type: string
      minLength: 1
      pattern: '^\d+$'
      example: '100000000'
    StringInt32:
      type: string
      minLength: 1
      maxLength: 10
      pattern: '^\d+$'
      example: '10'
    StringMinLength1MaxLength300:
      type: string
      minLength: 1
      maxLength: 300
      example: 'VeryLongStringTest'
    StringMinLength1MaxLength10:
      type: string
      minLength: 1
      maxLength: 10
      example: 'ETH'
    StringMinLength1MaxLength100:
      type: string
      minLength: 1
      maxLength: 100
      example: 'ThisShouldBeStringWithLength100'
    NullableStringMinLength1MaxLength100:
      allOf:
        - $ref: '#/components/schemas/StringMinLength1MaxLength100'
        - nullable: true
    StringMinLength1MaxLength50:
      type: string
      minLength: 1
      maxLength: 50
      example: 'StringWithMaxLength50'
    FloatOrIntStringMinLength1:
      type: string
      minLength: 1
      pattern: '^\d+\.?\d*$'
      example: '0.1'
    EthWalletOrContractAddress:
      type: string
      pattern: '^D{1}[5-9A-HJ-NP-U]{1}[1-9A-HJ-NP-Za-km-z]{32}$'
      example: '0xE40C374d8805b1dD58CDcEFf998A2F6920Cb52FD'
    TransactionHash:
      type: string
      pattern: '^0x([A-Fa-f0-9]{64})$'
      example: '0x02b732d646751af0ac4d47e04af7e0b08e97515b6b4706dcee6f75f9db39a487 '
    TradingPair:
      type: string
      minLength: 65
      maxLength: 65
      example: '0xE40C374d8805b1dD58CDcEFf998A2F6920Cb52FD/0x0000000000000000000000000000000000000000'
    Limit:
      type: integer
      minimum: 1
      maximum: 200
      default: 10
  
  # COMPLEX SCHEMAS

    ItemAndPageCount:
      type: object
      required:
        - itemCount
        - pageCount
      properties:
        itemCount:
          $ref: '#/components/schemas/PositiveInt'
        pageCount:
          $ref: '#/components/schemas/PositiveInt'
  
  # SIMPLE SCHEMAS GENERAL 
    
    DateVerified:
      allOf:
        - $ref: '#/components/schemas/DateTime'
        - nullable: true
    Icon:
      type: string
      format: uri
      nullable: true
    Timeframes:
      enum:
        - min1
        - mins3
        - mins5
        - mins10
        - mins15
        - mins30
        - hour1
        - hours2
        - hours3
        - hours4
        - hours6
        - hours12
        - day1
        - days3
        - week1
        - weeks2
        - month1
    Stores:
      type: string
      enum:
        - pairStats
        - globalStats
  
  # SIMPLE SCHEMAS ORDERS 

    OrderType:
      type: string
      enum:
        - makeOrder
        - takeOrder

  # COMPLEX SCHEMAS ORDERS
    
    OrderInputs:
      type: object
      required:
        - id
        - maker
        - amount
        - pairA
        - pairB
        - priceA
        - priceB
      properties:
        id:
          $ref: '#/components/schemas/StringInt32'
        maker: 
          $ref: '#/components/schemas/EthWalletOrContractAddress'
        amount:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        pairA:
          $ref: '#/components/schemas/EthWalletOrContractAddress'
        pairB:
          $ref: '#/components/schemas/EthWalletOrContractAddress'
        priceA:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        priceB:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
    OrderMetaDataMakeOrder:
      type: object
      required:
        - id
        - maker
        - amount
        - pairA
        - pairB
        - priceA
        - priceB
      properties:
        id:
          $ref: '#/components/schemas/StringInt32'
        maker:
          $ref: '#/components/schemas/EthWalletOrContractAddress'
        amount:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        pairA:
          $ref: '#/components/schemas/EthWalletOrContractAddress'
        pairB: 
          $ref: '#/components/schemas/EthWalletOrContractAddress'
        priceA:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        priceB:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
    OrderPairMetaData:
      type: object
      required:
        - pairAName
        - pairASymbol
        - pairBName
        - pairBSymbol
      properties:
        pairAName:
          $ref: '#/components/schemas/NullableStringMinLength1MaxLength100'
        pairASymbol:
          $ref: '#/components/schemas/NullableStringMinLength1MaxLength100'
        pairBName:
          $ref: '#/components/schemas/NullableStringMinLength1MaxLength100'
        pairBSymbol:
          $ref: '#/components/schemas/NullableStringMinLength1MaxLength100'
    OrderPair:
      type: object
      required:
        - id
        - left
        - right
      properties:
        id: 
          $ref: '#/components/schemas/TradingPair'
        left:
          $ref: '#/components/schemas/StringMinLength1MaxLength10'
        right:
          $ref: '#/components/schemas/StringMinLength1MaxLength10'
        metadata:
          $ref: '#/components/schemas/OrderPairMetaData'
    OrderMetaData:
      type: object
      required:
        - type
        - sender
        - isMakeOrder
        - isTakeOrder
        - isCancelOrder
        - fromMultiTx
        - blockNumber
        - transactionIndex
        - argIdIndex
        - transactionHash
        - timestamp
      properties:
        type:
          $ref: '#/components/schemas/OrderType'
        sender:
          $ref: '#/components/schemas/EthWalletOrContractAddress'
        isMakeOrder:
          type: boolean
        isTakeOrder:
          type: boolean
        isCancelOrder:
          type: boolean
        fromMultiTx:
          type: boolean
        blockNumber:
          $ref: '#/components/schemas/Int32'
        transactionIndex: 
          $ref: '#/components/schemas/Int32'
        argIdIndex:
          $ref: '#/components/schemas/Int32'
        transactionHash:
          $ref: '#/components/schemas/TransactionHash'
        makeOrder:
          $ref: '#/components/schemas/OrderMetaDataMakeOrder'
        pair:
          $ref: '#/components/schemas/OrderPair'
    Order:
      type: object
      required:
        - id
        - inputs
        - metadata
        - pair
        - price
        - volume
        - volumeASorted
        - volumeBSorted
      properties:
        id: 
          $ref: '#/components/schemas/StringMinLength1MaxLength300'
        inputs:
          $ref: '#/components/schemas/OrderInputs'
        metadata:
          $ref: '#/components/schemas/OrderMetaData' 
        pair:
          $ref: '#/components/schemas/OrderPair' 
        price:
          $ref: '#/components/schemas/PositiveFloat'
        volume:
          $ref: '#/components/schemas/PositiveFloat'
        volumeASorted: 
          $ref: '#/components/schemas/PositiveFloat'
        volumeBSorted: 
          $ref: '#/components/schemas/PositiveFloat'
    OrderStatus:
      type: object
      required:
        - id
        - pair
      properties:
        id: 
          $ref: '#/components/schemas/StringMinLength1MaxLength300'
        pairId:
          $ref: '#/components/schemas/TradingPair'
        orderId:
          $ref: '#/components/schemas/StringMinLength1MaxLength100'
        amount:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        makeOrder:
          $ref: '#/components/schemas/OrderMetaDataMakeOrder'
        pair:
          $ref: '#/components/schemas/OrderPair'
        createdAt:
          $ref: '#/components/schemas/UnixTimestamp'
        updatedAt:
          $ref: '#/components/schemas/UnixTimestamp'
    PendingOrderInputs:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            $ref: '#/components/schemas/StringInt32'
    PendingOrder:
      type: object
      required:
        - createdAt
        - updateAt
        - hash
        - from
        - mined
        - pending
        - failed
        - type
        - inputs
      properties:
        createdAt:
          $ref: '#/components/schemas/UnixTimestamp'
        updateAt:
          $ref: '#/components/schemas/UnixTimestamp'
        hash:
          $ref: '#/components/schemas/TransactionHash'
        from: 
          $ref: '#/components/schemas/EthWalletOrContractAddress'
        mined: 
          type: boolean
        pending: 
          type: boolean
        failed:
          type: boolean
          nullable: true
        type:
          $ref: '#/components/schemas/StringMinLength1MaxLength50'
        inputs:
          $ref: '#/components/schemas/PendingOrderInputs'

  # COMPLEX SCHEMAS PAIR STATS
    
    PairStats:
      type: object
      required:
        - pairId
        - lastPrice
        - volume
        - volumeASorted
        - volumeBSorted
        - low
        - high
        - openPrice
        - closePrice
      properties:
        pairId:
          $ref: '#/components/schemas/TradingPair'
        lastPrice:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        volume:
          $ref: '#/components/schemas/PositiveNumber'
        volumeASorted:
          $ref: '#/components/schemas/PositiveNumber'
        volumeBSorted:
          $ref: '#/components/schemas/PositiveNumber'
        low:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        high:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        openPrice:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        closePrice:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'

  # COMPLEX SCHEMAS GLOBAL STATS
    
    GlobalStat:
      type: object
      required:
        - makeOrders
        - takeOrders
        - cancelOrders
        - volume
      properties:
        makeOrders:
          $ref: '#/components/schemas/PositiveInt'
        takeOrders:
          $ref: '#/components/schemas/PositiveInt'
        cancelOrders:
          $ref: '#/components/schemas/PositiveInt'
        volume:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'      

  # COMPLEX SCHEMAS MARKETS
    
    MarketPairTradeDayData:
      type: object
      required:
        - dayLow
        - dayHigh
        - volume
        - dayPercent
      properties:
          dayLow:
            $ref: '#/components/schemas/FloatOrIntStringMinLength1'
          dayHigh:
            $ref: '#/components/schemas/FloatOrIntStringMinLength1'
          volume:
            $ref: '#/components/schemas/FloatOrIntStringMinLength1'
          dayPercent:
            $ref: '#/components/schemas/FloatOrIntStringMinLength1'
    MarketPairTrade:
      type: object
      required:
        - pairId
        - lastPrice
        - volume
        - volumeASorted
        - volumeBSorted
        - low
        - high
        - openPrice
        - closePrice
        - dayData
        - dayLow
        - dayHigh
        - dayPercent
      properties:
        pairId:
          $ref: '#/components/schemas/TradingPair'
        lastPrice:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        volume:
          $ref: '#/components/schemas/PositiveNumber'
        volumeASorted:
          $ref: '#/components/schemas/PositiveNumber'
        volumeBSorted:
          $ref: '#/components/schemas/PositiveNumber'
        low:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        high:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        openPrice:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        closePrice:
          $ref: '#/components/schemas/FloatOrIntStringMinLength1'
        dayData:
          $ref: '#/components/schemas/MarketPairTradeDayData'
    TradePairData:
      type: object
      required:
        - address
      properties:
        address:
          $ref: '#/components/schemas/EthWalletOrContractAddress'
    MarketPair:
      type: object
      required:
        - pairId
        - tradeData
        - pairAData
        - pairBData
      properties:
        pairId:
          $ref: '#/components/schemas/TradingPair'
        tradeData: 
          $ref: '#/components/schemas/MarketPairTrade'
        pairAData:
          $ref: '#/components/schemas/TradePairData'
        pairBData:
          $ref: '#/components/schemas/TradePairData'
 
  # COMPLEX SCHEMAS TOKENS
    
    Token:
      type: object
      required:
        - address
        - symbol
        - decimal
        - type
        - name
        - dateAdded
        - isBlacklisted
        - dateVerified
        - icon
      properties:
        address: 
          $ref: '#/components/schemas/EthWalletOrContractAddress'
        symbol:
          $ref: '#/components/schemas/StringMinLength1MaxLength10'
        decimal:
          $ref: '#/components/schemas/Int32'
        type: 
          $ref: '#/components/schemas/StringMinLength1MaxLength50'
        name:
          $ref: '#/components/schemas/StringMinLength1MaxLength10'
        dateAdded:
          $ref: '#/components/schemas/DateTime'
        isBlacklisted:
          type: boolean
        dateVerified: 
          $ref: '#/components/schemas/DateVerified'
        icon:
          $ref: '#/components/schemas/Icon'
    Page:
      type: object
      required:
        - number
        - url
      properties:
        number:
          $ref: '#/components/schemas/Int32'
        url:
          type: string
          format: uri
 
  parameters:
    Timeframe:
      in: path
      name: timeframe
      description: Interval name defined in the api
      required: true
      schema:
        $ref: '#/components/schemas/Timeframes'
      example: mins10
    Store:
      in: path
      name: store
      description: One of the stores defined in the api
      required: true
      schema:
        $ref: '#/components/schemas/Stores'
      example: globalStats  
    OldTimestamp:
      in: path
      name: oldTimestamp
      description: Old timestamp
      required: true
      schema:
        $ref: '#/components/schemas/UnixTimestamp'
      example: mins15
    NewTimestamp:
      in: path
      name: newTimestamp
      description: New timestamp
      required: true
      schema:
        $ref: '#/components/schemas/UnixTimestamp'
      example: mins10
    PairA:
      in: path
      name: pairA
      description: Contract address of a currency to buy
      required: true
      schema:
        $ref: '#/components/schemas/EthWalletOrContractAddress'
      example: '0xE40C374d8805b1dD58CDcEFf998A2F6920Cb52FD'
    PairB:
      in: path
      name: pairB
      description: Contract address of a currency to buy for 
      required: true
      schema:
        $ref: '#/components/schemas/EthWalletOrContractAddress'
      example: '0x0000000000000000000000000000000000000000'
    Ids:
      in: path
      name: ids
      description: Id of the order 
      required: true
      schema:
        $ref: '#/components/schemas/StringMinLength1MaxLength100'
      example: '405788171'
    Str:
      in: path
      name: str
      description: string 
      required: true
      schema:
        $ref: '#/components/schemas/StringMinLength1MaxLength300'
      example: 'pr'
    Address:
      in: path
      name: address
      description: string 
      required: true
      schema:
        $ref: '#/components/schemas/EthWalletOrContractAddress'
      example: '0xE40C374d8805b1dD58CDcEFf998A2F6920Cb52FD'
    Limit:
      in: query
      name: limit
      description: The limit of results returned by api 
      required: false
      schema:
        $ref: '#/components/schemas/Limit'
      example: 10
    Users:
      in: path
      name: user
      description: The eth wallet address 
      required: true
      schema:
        oneOf:
          - $ref: '#/components/schemas/EthWalletOrContractAddress'
          - enum:
            - all
    Type:
      in: path
      name: type
      description: The eth wallet address 
      required: true
      schema:
        enum:
          - all
          - takeOrder
          - makeOrder
          - cancelOrder

  requestBodies:
    
    TokensQuery:
      description: A JSON object of addresses and symbols arrays
      content:
        application/json:
          schema:
            type: object
            required:
              - addresses
              - symbols
            properties:
              addresses:
                type: array
                items:
                  $ref: '#/components/schemas/EthWalletOrContractAddress'
              symbols:
                type: array
                items:
                  $ref: '#/components/schemas/StringMinLength1MaxLength10'
    MonitorPendingTransaction:
      description: A JSON object with transaction hash
      content:
        application/json:
          schema:
            type: object
            required:
              - hash
            properties:
              hash:
                $ref: '#/components/schemas/TransactionHash'
    
  responses:
 
  # 500
    
    500-UnexpectedError:
      description: A JSON object of error message 'unexpected error' sent whenever error 500 happens
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                enum:
                  - unexpected error
  
  # 404
    
    404-NotFound:
      description: A JSON object of error message 'not found' sent whenever error 404 happens
  
  # 200
    
    Orders:
      description: A JSON array of orders  
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Order'
    OrdersGroupedInTimeframe:
      description: A JSON object of timeframe, orders and item
      content:
        application/json:
          schema:
            type: object
            required:
              - timeframe
              - orders
            properties:
              timeframe:
                $ref: '#/components/schemas/Timeframes'
              orders:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    LiveProbe:
      description: A JSON object of success field
      content:
        application/json:
          schema:
            type: object
            required:
              - success
            properties:
              success:
                enum:
                  - true
    ReadyProbe:
      description: A JSON object of ready field of value type boolean
      content:
        application/json:
          schema:
            type: object
            required:
              - ready
            properties:
              ready:
                type: boolean
    Pairs:
      description: A JSON object of request timeframe and result representing pairs stats
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Timeframes'
              - type: object
                required:
                  - result
                properties:
                  result:
                    type: object
                    additionalProperties:
                      type: object
                      additionalProperties:
                        $ref: '#/components/schemas/PairStats'
    OrdersHistory:
      description: A JSON object of result containing history of order id's provided in params
      content:
        application/json:
          schema:
            type: object
            required:
              - result
            additionalProperties:
              type: array
              items:
                $ref: '#/components/schemas/Order'
    OrdersStatus:
      description: A JSON object of result containing status info of order id's provided in params
      content:
        application/json:
          schema:
            type: object
            required:
              - result
            additionalProperties:
              $ref: '#/components/schemas/OrderStatus'
    Markets:
      description: A JSON object of item count page count and result representing markets 
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ItemAndPageCount'
              - type: object
                required:
                  - result
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/MarketPair'
    Tokens:
      description: A JSON object of item count page count and result representing tokens
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ItemAndPageCount'
              - type: object
                required:
                  - result
                  - pages
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Token'
                  pages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Page'                  
    SearchedTokens:
      description: A JSON object of item count page count and result representing searched tokens 
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ItemAndPageCount'
              - type: object
                required:
                  - result
                  - pages
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Token'
                  pages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Page'
    EthNodeSync:
      description: A plain text, true or false
      content:
        text/plain:
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
    MonitorPendingTransaction:
      description: A JSON object of result
      content:
        application/json:
          schema:
            type: object
            required:
              - result
            properties:
              result:
                type: string
    PendingOrders:
      description: A JSON array of pending orders
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PendingOrder'
    BuyWallLevels:
      description: A JSON of buy wall levels info
      content:
        application/json:
          schema:
            type: object
            required:
              - currLvl
              - currPrice
              - nextPrice
            properties:
              currLvl:
                $ref: '#/components/schemas/Int32'
              currPrice:
                $ref: '#/components/schemas/PositiveFloat'
              nextPrice:
                $ref: '#/components/schemas/PositiveFloat'
    GasPrice:
      description: String of gas price
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/StringInt32'
    EthBalance:
      description: Float string of eth balance    
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/FloatOrIntStringMinLength1'
    Indexes:
      description: A JSON object of global stats or pair stats
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                additionalProperties:
                  $ref: '#/components/schemas/GlobalStat'
              - type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/PairStats'
    CountsAndOrderResultAndPages:
      description: A JSON object of status item and page counts, result as orders array and pages
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ItemAndPageCount'
              - type: object
                required:
                  - result
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Page'