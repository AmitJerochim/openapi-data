openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/zimovid/TicketsFrontApi/1.0.0
info:
  description: This is a simple API
  version: "1.0.0"
  title: Public api for Tickets project
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: public
    description: Public routes
  
paths:
  /mainPage:
    get:
      tags:
        - public
      summary: get main page
      operationId: mainPage
      description: |
        Get main page data
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MainPageItem'
        '500':
          description: serevr error  
  /menu:
    get:
      tags:
        - public
      summary: get menu 
      operationId: menu 
      description: |
        Get menu
      responses:  
        '200':
          description: get site menu
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
        '500':
          description: serevr error  
  '/event/{eventId}':
   get:
      tags:
        - public
      summary: Find event by id
      operationId: event
      description: |
        Get event data     
      parameters:
      - name: eventId
        in: path
        description: "ID of event to return"
        required: true
        schema:
            type: string
            format: uuid 
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/EventRequestItem"
        '400':
          description: "Invalid ID supplied"
        '404':
          description: " Event not found"  
          
  '/category/{categoryId}': 
    get:
      tags:
        - public
      summary: Find category by id
      operationId: category
      description: |
        Get category data, additional params can filter result     
      parameters:
      - name: categoryId
        in: path
        description: "ID of category to return"
        required: true
        schema:
            type: string
            format: uuid 
      - name: date
        in: query
        description: "Date of evnets in this category"
        required: false
        schema:
            type: string
            format: date       
      - name: place
        in: query
        description: "Place id of evnets in this category"
        required: false
        schema:
            type: string
            format: uuid  
      - name: tag
        in: query
        description: "Tag id of evnets in this category"
        required: false
        schema:
            type: string
            format: uuid  
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/EventRequestItem"
        '400':
          description: "Invalid ID supplied"
        '404':
          description: "Category not found"  
    
  '/place/{placeId}':
   get:
      tags:
        - public
      summary: Find place by id
      operationId: place
      description: |
        Get place data     
      parameters:
      - name: placeId
        in: path
        description: "ID of place to return"
        required: true
        schema:
            type: string
            format: uuid 
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/PlaceRequestItem"
        '400':
          description: "Invalid ID supplied"
        '404':
          description: " Place not found"  
          
components:
  schemas:
      
    MainPageItem:
      type: object
      properties:
        events:
          type: object
          properties:
            currentMonth:
              type: array
              description: Events for the coming month. Events get by date <= current month, limit 12
              maxItems: 12
              items:  
                $ref: '#/components/schemas/EventRequestItem'
            nearest:
              maxItems: 12
              description: Upcoming events. Events get by date >= 1 week, limit 6, image don't need
              items:  
                $ref: '#/components/schemas/EventRequestItem'
            editorsChoice:
              type: array
              maxItems: 6
              description: Upcoming events. Events get by tag 'editors choice', limit 6
              items:  
                $ref: '#/components/schemas/EventRequestItem'
        compilations:
          type: array
          description: |
           Compilations events by tag
          items: 
            $ref: '#/components/schemas/EventRequestItem'
        categories:
          type: array
          items: 
            $ref: '#/components/schemas/EventRequestItem'
        banners:
          type: array
          items: 
            $ref: '#/components/schemas/BannersItem'
            
    EventRequestItem:
      type: object
      description: |
        The model is assembled from Events
      required:
        - _id
        - slug
        - name
        - place
        - date 
      properties:
        _id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        slug:
          type: string
        name: 
          type: string
        description: 
          type: string  
        place:  
          $ref: '#/components/schemas/PlaceRequestItem'
        tag:
          $ref: '#/components/schemas/Tags'
        image: 
          type: string
        date:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        cost:
          type: number
          
    PlaceRequestItem:
      type: object
      required:
        - _id
        - slug
        - name
      properties:
        _id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        slug:
          type: string
        name: 
          type: string
        description: 
          type: string 
        coordinates:
          type: array
          items:
            type: object
            example: {lo: '', la: ''}
            properties:
              id:
                type: integer
                
    MenuItem:
      type: array
      description: |
           Menu items
      items: 
            $ref: '#/components/schemas/Category'
            
    BannersItem:  
     type: array
     description: |
           Banners items
     items: 
       $ref: '#/components/schemas/Banners'
    
    Banners:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        slug:
          type: string
        name: 
          type: string
        page:
          type: string
          enum: ['MainPage']
            
    Category:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        slug:
          type: string
        name: 
          type: string
          
    Tags:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        slug:
          type: string
        name: 
          type: string
