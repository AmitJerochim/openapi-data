penapi: 3.0.0
info:
  description: This is a simple API
  version: "1.0.3"
  title: Simple Inventory API
  contact:
    email: casualesportsamateurleague@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /achievement:
    get:
      tags:
        - Achievement
      summary: Get achivements for player
      operationId: getAchievement
      parameters:
        - in: query
          name: userId
          description: pass in the userId of the player you wish to see achievements for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AchievementView'
        '400':
          description: bad input parameter
    post:
      tags:
        - Achievement
      summary: adds an Achievement item
      operationId: addAchievement
      description: Adds an achievement to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AchievementView'
        description: Achievement item to add
  /saveSummonerData:
    post:
      tags:
        - Summoner
      operationId: saveSummonerData
      description: Saves summoner information
      responses:
        '201':
          description: Successfully saved data
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SummonerInfoForm'
        description: Summoner Information to save
  /getUserById:
    get:
      tags:
        - User
      summary: get user by their Id
      operationId: getUserById
      parameters:
        - in: query
          name: userId
          description: pass in the userId of the player you wish to see achievements for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          description: bad input parameter
  /getAllUsers:
    get:
      tags:
        - User
      summary: get all users in system
      operationId: getAllUsers
      parameters:
        - in: query
          name: ExcludeBannedUsers
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEntity'
        '400':
          description: bad input parameter
  /createUser:
    post:
      tags:
        - User
      operationId: addUser
      description: Adds an User to the system
      responses:
        '201':
          description: UserId
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEntityForm'
        description: User item to add
  /createRoleForUser:
    post:
      tags:
        - User
      operationId: addRoleToUser
      description: Adds a role to the user
      responses:
        '201':
          description: Successfully added role to user
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleForm'
        description: UserRole to add
  /createRole:
    post:
      tags:
        - User
      operationId: addRole
      description: Adds a new role
      responses:
        '201':
          description: RoleId
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Role to add
servers:
  - url: 'https://virtserver.swaggerhub.com/CEAL4/SampleCeal/1.0.3'
components:
  schemas:
    SummonerRoleEnum:
      type: string
      enum: &SummonerRole
        - None
        - Top
        - Jungle
        - Mid
        - Adc
        - Sup
        - Fill
    TierDivisionEnum:
      type: string
      enum: &TierDivision
        - Unranked
        - Iron4
        - Iron3
        - Iron2
        - Iron1
        - Bronze4
        - Bronze3
        - Bronze2
        - Bronze1
        - Silver4
        - Silver3
        - Silver2
        - Silver1
        - Gold4
        - Gold3
        - Gold2
        - Gold1
        - Platinum4
        - Platinum3
        - Platinum2
        - Platinum1
        - Diamond4
        - Diamond3
        - Diamond2
        - Diamond1
        - Masters1
        - Grandmasters1
    PlayoffBracketEnum:
      type: string
      enum: &PlayoffBracket
        - Standard
        - Gauntlet
      description: currently only standard is used, gauntlet needs to be finished and tested
    
    BaseInfo:
      type: object
      description: would like to apply this to all entities from here on
      properties:
        createdBy:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedBy:
          type: string
          nullable: true
        updatedOn:
          type: string
          format: date-time
          nullable: true
    UserEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          maxLength: 50
        email:
          type: string
        password:
          type: string
          maxLength: 50
        phone number:
          type: string
        birthdate:
          type: string
          format: date-time
    UserRoleEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    BlacklistEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        isBanned:
          type: boolean
    LookupEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        category:
          type: string
        description:
          type: string
        enum:
          type: string
        value:
          type: string
    AlternateAccountEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        summonerId:
          type: string
          format: uuid
        alternateName:
          type: string
        opGgUrl:
          type: string
    MessageLogEntity:
      type: object
      description: This is used for logging information to our db, such as an account being registered for the first time, or an exception that was thrown on the backend. Can be used anywhere in the backend project.
      properties:
        id:
          type: string
          format: uuid
        sessionId:
          type: string
          format: uuid
          readOnly: true
          description: currently not in use, but we could use it for who is logged in as an example
        timestamp:
          type: string
          format: date-time
        typeId:
          type: string
          format: uuid
          description: Type of message it is. I.E. error, log, critical, etc.
        message:
          type: string
        exception:
          type: string
          nullable: true
        innerexception:
          type: string
          nullable: true
        stacktrace:
          type: string
          nullable: true
        source:
          type: string
        CreatedBy:
          type: string
        CreatedOn:
          type: string
          format: date-time
    SeasonInfoEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        seasonName:
          type: string
        createdon:
          type: string
          format: date-time
        closedRegistrationDate:
          type: string
          format: date-time
        seasonStartDate:
          type: string
          format: date-time
        seasonEndDate:
          type: string
          format: date-time
          nullable: true
          description: This will be updated once Tribunal has decided to start registration process of the next split
    SummonerInfoEntity:
      type: object
      properties:
        id: 
          type: string
          format: uuid
        userId: 
          type: string
          format: uuid
        summonerName:
          type: string
        roleId: 
          type: string
          format: uuid
        tierDivisionId: 
          type: string
          format: uuid
        opGgUrlLink: 
          type: string
        isValidPlayer:
          type: boolean
        currentLp:
          type: integer
        offRoleId:
          type: string
          format: uuid
        isSubOnly:
          type: boolean
          nullable: true
        teamRoleId: 
          type: string
          format: uuid
          nullable: true
          description: will be moving this to TeamPlayerEntity as it is more appropriate in that entity
        updatedOn: 
          type: string
          format: date-time
          nullable: true
    DivisionEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        seasonInfoId:
          type: string
          format: uuid
        name:
          type: string
        lowerLimit:
          type: integer
        upperLimit:
          type: integer
    TeamRosterEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        teamName:
          type: string
        teamTierScore:
          type: integer
          nullable: true
        wins:
          type: integer
          nullable: true
        loses:
          type: integer
          nullable: true
        points:
          type: integer
          nullable: true
        seasonInfoId:
          type: string
          format: uuid
          nullable: true
    TeamPlayerEntity:
      type: object
      description: Relationship table between TeamRosterEntity, SeasonInfoEntity, and SummonerInfoEntity
      properties:
        summonerId:
          type: string
          format: uuid
        teamRosterId:
          type: string
          format: uuid
        isSub:
          type: boolean
          nullable: true
        seasonInfoId:
          type: string
          format: uuid
          nullable: true
    TeamCaptainEntity:
      type: object
      description: Relationship table between SummonerInfoEntity and TeamRosterEntity. This could be removed in place of a simple bit field in TeamPlayer, but when created, I prefered the idea of seperation
      properties:
        summonerId:
          type: string
          format: uuid
        teamRosterId:
          type: string
          format: uuid
    SummonerRequestEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        summonerId: 
          type: string
          format: uuid
          description: who is making the request
        summonerRequestedId:
          type: string
          format: uuid
          description: who is being requested
        isSub:
          type: boolean
        seasonInfoId:
          type: string
          format: uuid
          nullable: true
    ScheduleEntity:
      type: object
      description: is called TeamSchedule in db. These are created by the big red button on the schedule tab after registration has closed
      properties:
        id:
          type: string
          format: uuid
        seasonInfoId:
          type: string
          format: uuid
        homeRosterTeamId:
          type: string
          format: uuid
        awayRosterTeamId:
          type: string
          format: uuid
        homeTeamWins:
          type: integer
        awayTeamWins:
          type: integer
        matchWeek:
          type: string
          format: date-time
          description: this is the start of the week when the match will take place. Currently is set to Wednesdays
        matchScheduledTime:
          type: string
          format: date-time
          nullable: true
          description: this is the selected time of when the match will be played
        casterName:
          type: string
          nullable: true
          description: not a required field, just a field to let players know who is casting the game. Can be input after a stream so people who look for games casted can look by who casted them as well
        isPlayoffMatch:
          type: boolean
    PlayoffSeedEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        rosterId:
          type: string
          format: uuid
        divisionId:
          type: string
          format: uuid
        seasonInfoId:
          type: string
          format: uuid
        seed:
          type: integer
        playoffBracket:
          type: integer
          enum: *PlayoffBracket
          description: this will be the integer value of the enum, thank you C#
    PlayerStatsEntity:
      type: object
      description: this is on a per-game basis
      properties:
        id: 
          type: string
          format: uuid  
        summonerId: 
          type: string
          format: uuid  
        kills: 
          type: integer
        deaths:
          type: integer
        assists:
          type: integer
        cs:
          type: integer
        gold:
          type: integer
        totalTeamKills:
          type: integer
        visionScore:
          type: integer
        gameTime:
          type: string
          format: time
          description: hh:mm:ss
    MatchMvpEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        blueMvp:
          description: Blue team's mvp for the game
          type: string
          format: uuid  
          nullable: true
        redMvp:
          description: Red team's mvp for the game
          type: string
          format: uuid  
          nullable: true
        teamScheduleId:
          description: match being played
          type: string
          format: uuid  
        game:
          description: game in series
          type: integer
        createdBy:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedBy:
          type: string
          nullable: true
        updatedOn:
          type: string
          format: date-time
          nullable: true
    MatchDetailEntity:
      description: Relationship table between the match that was played, the game number, the player stats, the player, and the season
      type: object
      properties:
        id:
          type: string
          format: uuid
        teamScheduleId:
          type: string
          format: uuid
        game: 
          type: integer
        playerStatsId:
          type: string
          format: uuid
        playerId:
          type: string
          format: uuid
        seasonInfoId:
          type: string
          format: uuid
        winner:
          type: boolean
    ChampionStatsEntity:
      type: object
      description: this is on a per-game basis, whether picked or banned
      properties:
        id:
          type: string
          format: uuid
        playerId:
          type: string
          format: uuid   
          nullable: true
          description: Based on player from game? Wont be recorded if banned
        seasonInfoId:
          type: string
          format: uuid
        divisionId:
          type: string
          format: uuid
        championId:
          type: string
          format: uuid
          description: retrieved from our LookupEntity table, by looking under the 'Champion' category
        matchDetailId:
          type: string
          format: uuid
          nullable: true
          description: Will be the Match Detail, can be null such as for bans
        teamScheduleId:
          type: string
          format: uuid
        kills: 
          type: integer
        deaths:
          type: integer
        assists:
          type: integer
        picked:
          type: boolean
        banned:
          type: boolean
        win:
          type: boolean
        loss:
          type: boolean
          
          
          
    AlternateAccount:
      type: object
      properties:
        summonerName:
          type: string
        opGgUrl:
          type: string
    UserEntityForm:
      required:
        - email
        - password
      type: object
      properties:
        username:
          type: string
          maxLength: 50
        email:
          type: string
        password:
          type: string
          maxLength: 50
        phone number:
          type: string
        birthdate:
          type: string
          format: date-time
    UserRoleForm:
      required:
        - roleName
        - userId
      type: object
      properties:
        roleName:
          type: string
        userId:
          type: string
          format: uuid
    SummonerInfoForm:
      required:
        - summonerName
        - role
        - tierDivision
        - currentLp
        - opGgUrl
      type: object
      properties:
        summonerName:
          type: string
        role:
          type: string
          enum: *SummonerRole
        offRole:
          type: string
          enum: *SummonerRole
          nullable: true
        tierDivision:
          type: string
          enum: *TierDivision
        currentLp:
          type: integer
          minimum: 0
          maximum: 1000
        opGgUrl:
          type: string
        isSubOnly:
          type: boolean
          default: false
        userId:
          type: string
          format: uuid
          description: this should be passed along as they create their account
        alternateAccounts:
          type: array
          items:
            $ref: '#/components/schemas/AlternateAccount'
    
    AchievementView:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          format: uuid
        Achievement:
          type: string
        AchievedDate:
          type: string
          format: date-time
        AchievedTeam:
          type: string