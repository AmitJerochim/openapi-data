openapi: 3.0.0
info:
  description: Esse é um exemplo de uso de API para um eCommerce no caso da FIAP
  version: "1.0.0"
  title: eCommerce FIAP - 28ATI 
  termsOfService: 'http://ecommercefiap.io/terms/'
  contact:
    email: marcos.macedo@fiap.com.br
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
# Added by API Auto Mocking Plugin
  - description: Servidor do eCommerce API - FIAP 28ATI
    url: https://virtserver.swaggerhub.com/fiap_labs/eCommerceFiap/1.0.0
  - url: 'https://ecommercefiap.swagger.io/v2'
tags:
  - name: clientes
    description: Tudo sobre operações de Clientes
    externalDocs:
      description: Sabia mais sobre a API em
      url: 'http://ecommercefiap.io'
  - name: vendas
    description: Tudo sobre operações de Vendas
  - name: usuarios
    description: Tudo sobre operações de usuários
    externalDocs:
      description: Saiba mais sobre a API em
      url: 'http://ecommercefiap.io'
paths:
  /clientes:
    post:
      tags:
        - clientes
      summary: Cria um novo cliente
      operationId: addCustomer
      responses:
        '405':
          description: Dados de clientes são inválidos
      security:
        - ecommerce_auth:
            - 'write:clientes'
            - 'read:clientes'
      requestBody:
        $ref: '#/components/requestBodies/Clientes'
    put:
      tags:
        - clientes
      summary: altera um cliente existente
      operationId: updateCustomer
      responses:
        '400':
          description: codigo do cliente inválido
        '404':
          description: Cliente não encontrado
        '405':
          description: erro na validação de dados
      security:
        - ecommerce_auth:
            - 'write:clientes'
            - 'read:clientes'
      requestBody:
        $ref: '#/components/requestBodies/Clientes'
  /clientes/findByStatus:
    get:
      tags:
        - clientes
      summary: Busca por clientes
      description: consulta clientes através de uma lista de status
      operationId: findCustomersByStatus
      parameters:
        - name: status
          in: query
          description: Status em que você queria realizar a consulta
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - ativo
                - inativo
                - deletado
              default: ativo
      responses:
        '200':
          description: operção realizada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Clientes'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Clientes'
        '400':
          description: Status informado é inválido
      security:
        - ecommerce_auth:
            - 'write:clientes'
            - 'read:clientes'
  /clientes/findByTags:
    get:
      tags:
        - clientes
      summary: Consulta clientes por nome
      description: Consulta uma lista de clientes através de nomes
      operationId: findCustomersByTags
      parameters:
        - name: tags
          in: query
          description: Consulta filtrada por Nome
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: operação realizada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Clientes'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Clientes'
        '400':
          description: Nome informado é inválido
      security:
        - ecommerce_auth:
            - 'write:clientes'
            - 'read:clientes'
      deprecated: true
  '/clientes/{clienteId}':
    get:
      tags:
        - clientes
      summary: Consulta clientes por ID
      description: retorna um cliente pelo ID informado
      operationId: getCustomerById
      parameters:
        - name: clienteId
          in: path
          description: id do cliente
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: operação realizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clientes'
            application/xml:
              schema:
                $ref: '#/components/schemas/Clientes'
        '400':
          description: ID informado está inválido
        '404':
          description: Cliente não encontrado pelo ID informado
      security:
        - api_key: []
    post:
      tags:
        - clientes
      summary: cria um cliente
      operationId: updateCustomerWithForm
      parameters:
        - name: clienteId
          in: path
          description: id do cliente
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Dados inválidos
      security:
        - ecommerce_auth:
            - 'write:clientes'
            - 'read:clientes'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                nome:
                  description: nome do cliente
                  type: string
                situacao:
                  description: status do cliente
                  type: string
    delete:
      tags:
        - clientes
      summary: Exclui um cliente
      operationId: deleteCustomer
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: clienteId
          in: path
          description: id do cliente que será excluído
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: ID informado é inválido
        '404':
          description: Cliente não encontrado
      security:
        - ecommerce_auth:
            - 'write:clientes'
            - 'read:clientes'
  '/clientes/{clienteId}/uploadImage':
    post:
      tags:
        - clientes
      summary: envia uma imagem
      operationId: uploadFile
      parameters:
        - name: clienteId
          in: path
          description: id do cliente
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: operação realizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - ecommerce_auth:
            - 'write:clientes'
            - 'read:clientes'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /vendas/inventory:
    get:
      tags:
        - vendas
      summary: retorna uma venda
      description: retorna uma quantidade de vendas
      operationId: getInventory
      responses:
        '200':
          description: operação realizada com suceso
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /vendas/order:
    post:
      tags:
        - vendas
      summary: vendas de um cliente
      operationId: placeOrder
      responses:
        '200':
          description: operação realizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendas'
            application/xml:
              schema:
                $ref: '#/components/schemas/Vendas'
        '400':
          description: Venda inválida
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vendas'
        description: venda a ser registrada para um cliente
        required: true
  '/vendas/order/{vendaId}':
    get:
      tags:
        - vendas
      summary: Busca uma venda pelo ID
      description: Busca de vendas po um ID informado
      operationId: getOrderById
      parameters:
        - name: vendaId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: operação realizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendas'
            application/xml:
              schema:
                $ref: '#/components/schemas/Vendas'
        '400':
          description: ID da venda informada é inválida
        '404':
          description: Venda não encontrada
    delete:
      tags:
        - vendas
      summary: Exclui um venda pelo ID
      description: exclui um venda
      operationId: deleteOrder
      parameters:
        - name: vendaId
          in: path
          description: Id da venda a ser excluída
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Id da venda informado é inválido
        '404':
          description: Venda não encontrada
  /usuarios:
    post:
      tags:
        - usuarios
      summary: cria um usuário
      description: Cria um usuário
      operationId: createUser
      responses:
        default:
          description: operação realizado com sucesso
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuarios'
        description: cria um novo usuário
        required: true
  /usuarios/createWithArray:
    post:
      tags:
        - usuarios
      summary: cria usuarios através de uma lista informada
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: operação relizada com sucesso
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /usuarios/createWithList:
    post:
      tags:
        - usuarios
      summary: Cria usuários através de uma lista
      responses:
        default:
          description: operação realizada com sucesso
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /usuarios/login:
    get:
      tags:
        - usuarios
      summary: usuario realiza um login
      operationId: loginUser
      parameters:
        - name: login
          in: query
          description: login do usuario
          required: true
          schema:
            type: string
        - name: senha
          in: query
          description: a senha do usuario
          required: true
          schema:
            type: string
      responses:
        '200':
          description: operação realizada com sucesso
          headers:
            X-Rate-Limit:
              description: chamada de logins por hora
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: data e hora que o login será expirado
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Login ou senha informado está errado
  /usuarios/logout:
    get:
      tags:
        - usuarios
      summary: Logout do usuário conectado
      operationId: logoutUser
      responses:
        default:
          description: operação realizada com sucesso
  '/usuarios/{login}':
    get:
      tags:
        - usuarios
      summary: Consulta se um determinado usuário está logado
      operationId: getUserByName
      parameters:
        - name: login
          in: path
          description: login do usuário a ser consultado
          required: true
          schema:
            type: string
      responses:
        '200':
          description: operação realizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuarios'
            application/xml:
              schema:
                $ref: '#/components/schemas/Usuarios'
        '400':
          description: Login informado é inválido
        '404':
          description: Usuário não encontrado para o login informado
    put:
      tags:
        - usuarios
      summary: Altera os dados de usuário
      description: Alteração de dados de um determinado usuário
      operationId: updateUser
      parameters:
        - name: login
          in: path
          description: login do usuário que será alterado
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Login do usuário não encontrado
        '404':
          description: Usuário não encontrado
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuarios'
        description: Dados dos usuário que foi alterado
        required: true
    delete:
      tags:
        - usuarios
      summary: Exclui um usuário
      description: Exclusão de um determinado usuário
      operationId: deleteUser
      parameters:
        - name: login
          in: path
          description: O login do usuário que será excluído
          required: true
          schema:
            type: string
      responses:
        '400':
          description: login informado é inválido
        '404':
          description: Usuário não encontrado
externalDocs:
  description: Saiba mais em
  url: 'http://ecommercefiap.io'
components:
  schemas:
    Vendas:
      type: object
      properties:
        id:
          type: integer
          format: int64
        clienteId:
          type: integer
          format: int64
        quantidade:
          type: integer
          format: int32
        data:
          type: string
          format: date-time
        situacao:
          type: string
          description: Situação da Venda
          enum:
            - realizada
            - aprovada
            - entregue
        completa:
          type: boolean
          default: false
      xml:
        name: Vendas
    Categorias:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nome:
          type: string
      xml:
        name: Categorias
    Usuarios:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        primeiroNome:
          type: string
        ultimoNome:
          type: string
        email:
          type: string
        senha:
          type: string
        telefone:
          type: string
        situacao:
          type: integer
          format: int32
          description: Situacao do usuário
      xml:
        name: Usuarios
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Clientes:
      type: object
      required:
        - nome
        - fotoUrls
      properties:
        id:
          type: integer
          format: int64
        categoria:
          $ref: '#/components/schemas/Categorias'
        nome:
          type: string
          example: marcos macedo
        fotoUrls:
          type: array
          xml:
            name: fotoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        situacao:
          type: string
          description: situacao de um cliente
          enum:
            - ativo
            - inativo
            - deletado
      xml:
        name: Clientes
    ApiResponse:
      type: object
      properties:
        codigo:
          type: integer
          format: int32
        tipo:
          type: string
        mensagem:
          type: string
  requestBodies:
    Clientes:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Clientes'
        application/xml:
          schema:
            $ref: '#/components/schemas/Clientes'
      description: Clientes serão armazenados no banco de dados
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Usuarios'
      description: List of user object
      required: true
  securitySchemes:
    ecommerce_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://ecommercefiap.swagger.io/oauth/dialog'
          scopes:
            'write:clientes': altera os dados de clientes
            'read:clientes': lê os dados de cliente
    api_key:
      type: apiKey
      name: api_key
      in: header
