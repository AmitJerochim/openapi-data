{
  "openapi" : "3.0.1",
  "servers" : [ {
    "url" : "http://localhost:5000"
  }, {
    "url" : "http://10.99.234.100:5000"
  }, {
    "url" : "http://10.99.234.100:5050"
  }, {
    "url" : "http://10.99.234.102:5000"
  } ],
  "info" : {
    "title" : "ROSS SIM API",
    "description" : "ROSS SIM API Documentation",
    "version" : "1.13.647.0"
  },
  "paths" : {
    "/simapi/CycleCount/StartCycleCounts" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Start a new cycle count.",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/StartCycleCounts\r\n    {\r\n       \"StockNo\":1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StartCycleCountIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StartCycleCountOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 -Input Missing<br />\r\n            0 - OK <br />\r\n            1 -Error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/ProcessBegEndFixture" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : " Create the FixtureNo between beg/end FixtureNo,\r\nrecords in CycleCountsFixture if no record exists,\t\t\t\t\r\n else just add the not exist tag nos",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/ProcessBegEndFixture\r\n    {\r\n       \"DocId\":232,\r\n       \"StockNo\":1,\r\n       \"BegFixtureNo\": \"2323232\",\r\n       \"EndFixtureNo\": \"123231\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProcessBegEndFixNoIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DbRecCodeOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - Input Missing<br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />\r\n            0 - OK <br />\r\n            1 -Error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/ProcessItem" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Process the item",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/ProcessItem\r\n    {\r\n       \"DocId:0,\r\n       \"StockNo\":21,\r\n       \"TagNo\":\"123\",\r\n       \"Sku\":\"400002\",\r\n       \"Symbology\":\"0\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProcessItemIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProcessItemOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - Input Missing<br />\r\n            1006 - Invalid SKU format <br />\r\n            1007 - Item not in POS <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/DeleteRestart" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Delete all the record",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/DeleteRestart\r\n    {\r\n       \"DocId:420,\r\n       \"StockNo\":21,\r\n       \"TagNo\": \"1\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeleteRestartIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/CloseStock" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Close the cycle count",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/CloseStock\r\n    {\r\n       \"DocId:0,\r\n       \"StockNo\":21\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CloseStockIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - Input Missing<br />\r\n            2016 - No data in database <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/AcceptNotFoundItem" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Add the not found sku to db\r\nwe use the same object as Process item",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/AcceptNotFoundItem\r\n    {\r\n       \"DocId: 420,\r\n       \"StockNo\": 21,\r\n       \"TagNo\": \"400000109039\",\r\n       \"Sku\": \"400000109039\",\r\n       \"Symbology\":\"0\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AcceptNotFoundItemIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1006 - Invalid SKU <br />\r\n            1018 - Input Missing <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/GetStockNo" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Retrieve DocId and StockNo\t\r\nwe use the same object as Process item",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/GetStockNo",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetStockNoOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/DelFixture" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Remove the related data from db",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/DelFixture\r\n    {\r\n       \"DocId:3,\r\n       \"StockNo\":4,\r\n       \"TagNo\":\"400002\",\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetDelFixtureInfoIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DbRecCodeOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - Input Missing<br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/GetDelFixtureInfo" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Remove the related data from db",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/GetDelFixtureInfo\r\n    {\r\n       \"DocId:480,\r\n       \"StockNo\":21,\r\n       \"TagNo\":\"50000\",\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetDelFixtureInfoIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDelFixtureInfoOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - Input Missing<br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/ProcessFixAuditCount" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Remove the related data from db",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/ProcessFixAuditCount\r\n    {\r\n       \"DocId:480,\r\n       \"StockNo\":21,\r\n       \"TagNo\": \"50000,\"\r\n       \"AuditCount\": 2\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProcessFixAuditCountIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return int : 0=OK, 1=Tag Not In Range, 2= In Use, 3=Tag Scanned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DbRecCodeOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - Input Missing<br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/ManagerAddFixture" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Remove the related data from db",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/ManagerAddFixture\r\n    {\r\n       \"DocId:420,\r\n       \"StockNo\":1,\r\n       \"TagNo\": \"000000000001\",\r\n       \"AuditCount\": 1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProcessFixAuditCountIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns DBRecCode",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DbRecCodeOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - Input Missing<br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/CheckFixtureTagNo" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Checks that the fixture(s) already exist in the DB\t\t\t\t\r\nIf qualified, then write the audit count to db",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/CheckFixtureTagNo\r\n    {\r\n       \"DocId:420,\r\n       \"StockNo\":1,\r\n       \"BegTagNo\": \"000000000001\",\r\n       \"TagCount\": 1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckFixtureTagNoIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "List of barcods",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - Input Missing<br />\r\n            2004 - SQL  Execute failed<br /> \r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/ExistsStockNo" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Check if there is an open stock control number exists",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/ExistsStockNo",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExistsStockNoOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2004 - SQL  Execute failed<br /> \r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/FinishScanSku" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "summary" : "Close the fixture if the scanned count matches the audit count.\r\n If all fixtures in the cycle count closed, then close the cycle",
        "description" : "Sample request:\r\n\r\n    POST simapi/CycleCount/FinishScanSku\r\n   {\r\n          DocId:420\r\n          StockNo :1\r\n          TagNo :\"5000\"\r\n   }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FinishScanSkuIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DbRecCodeOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n             POC/RF Error IDs:<br />\r\n             1018 - Input Missing<br />\r\n             2004 - SQL  Execute failed<br /> \r\n             2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/CycleCount/CloseFixture" : {
      "post" : {
        "tags" : [ "CycleCount" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FinishScanSkuIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DbRecCodeOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/GetIncompleteScans" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "  Retrieves the list of Incomplete Scans\r\nTODO: returns no handler found. Didn't find any usage in step to compare the calls",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/GetIncompleteScans",
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GetIncompleteScansRes"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2012- Error calling SQLGetData<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/StartDisposal" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Generates a new FJDisposal document number and sets status to Open  //ok",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/StartDisposal\r\n    {\r\n        \r\n        \"Type\" : \"12\",\r\n        \"DestinationId\" : \"6\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StartDisposalIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StartDisposalRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"AssociateId\"=\"2006\"\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvProcessSKU" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Updates the database with the item info given //eror id=1",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvProcessSKU\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"Department\" : \"123\",\r\n        \"Sku\" : \"123123123123\",\r\n        \"Description\" : \"test\",\r\n        \"Quantity\" : 1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvProcessSkuIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvGetDocDate" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Retrieves the start date for the FJDamages document number given //works",
        "description" : "Sample request: \r\n\r\n    POST simapi/Damages/RtvGetDocDate\r\n    {\r\n        \"DocumentNum\" : 123\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvGetDocDateIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvGetDocDateRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvDeleteSKU" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Deletes the given SKU based on the qty given //ok",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvDeleteSKU\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"Department\" : \"123\",\r\n        \"Sku\" : \"123123123123\",\r\n        \"Quantity\" : 1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvDeleteSKUIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvCloseCarton" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "     Sets the carton status to Closed. If carton has no items, the carton //error 100 no data in database\r\nrecord is deleted from the db and the output parameter, bPrint\r\nis set to 0. Otherwise, bPrint is set to 1.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvCloseCarton\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"CartonId\" : \"1234\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvCloseCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvCloseCartonRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvCloseDoc" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "     Sets the status of an FJDisposal document to closed. //error 100 close doc\r\nIn case of an empty doc, it will delete the rows from FJDisposals\r\nand also delete the document from the document table.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvCloseDoc\r\n    {\r\n        \"DocumentNum\" : 123\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvCloseDocIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvStartCarton" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets a sequence number and starts a new carton. //1 error",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvStartCarton\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"FromStore\":\"1\",\r\n        \"ToStore\" : \"1\",\r\n        \"Type\" :1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvStartCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvStartCartonRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />\r\n            1 -\r\n            100 -",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvGetDocIdInfo" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets a sequence number and starts a new carton. //ok",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvGetDocIdInfo\r\n    {\r\n        \"CartonNum\" : \"123\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvGetDocIdInfoIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvGetDocIdInfoRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvChangeDocStatus" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Changes the Doc status to open //no data in database",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvChangeDocStatus\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"IApp\" : 0\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvChangeDocStatusIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvValidateCarton" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Checks to see if carton is valid and available. //ok",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvValidateCarton\r\n    {\r\n        \"CartonNum\" : \"123\",\r\n        \"Department\" : \"123\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvValidateCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvValidateCartonRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"CartonNum\"=\"2006\"\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/GetDestinationInfo" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets the destination description for the destination code given. //1502 Error returns during COM interop to ROSS RFControlCOM",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/GetDestinationInfo\r\n    {\r\n        \"DestinationCode\" : 123,\r\n        \"LangId\":1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetDestinationInfoIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDestinationInfoRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DestinationCode\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvGetItemQty" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets the First Scan qty for the item as in the db. //ok",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvGetItemQty\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"Department\": \"123\",\r\n        \"Sku\" : \"123123123123\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvGetItemQtyIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvGetItemQtyRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/OpenForXfer" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "    Generates a new FJDamages document number and sets status to Open //1502 No handler found\r\nTODO: checked the source code on Dev/RFAppLib/FJDamages.cpp, it's writing document number into request parameter N1 instead of response, therefore it will not work as expected",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/OpenForXfer\r\n    {\r\n        \"AssociateId\" : \"123\",\r\n        \"Type\": \"AA\",\r\n        \"CartonId\" : \"123\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpenForXferIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenForXferRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvProcessXfrSKU" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Update the SKU in FJTransferItem table //error 1 Error returns during COM interop to ROSS RFControlCOM\"",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvProcessXfrSKU\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"CartonId\" : \"123\",\r\n        \"Sku\" : \"123123123123\",\r\n        \"SkuDescription\" : \"test\",\r\n        \"Quantity\" : 1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvProcessXfrSKUIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvGetXfrItemQty" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets Xfr Items quantity //ok",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvGetXfrItemQty\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"CartonId\": \"123\",\r\n        \"Sku\" : \"123123123123\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvGetXfrItemQtyIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvGetXfrItemQtyRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=\"2006\"\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/GetApprovedItemQty" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets approved items quantity  //1502 No handler found",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/GetApprovedItemQty\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"CartonId\": \"123\",\r\n        \"Sku\" : \"123\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvGetXfrItemQtyIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvGetXfrItemQtyRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=\"2006\"\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />\r\n            1007- Item not found in POS<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvDeleteXfrSKU" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Delete Xfr Sku //ok",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvDeleteXfrSKU\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"CartonId\": \"123\",\r\n        \"Sku\" : \"123123123123\",\r\n        \"Quantity\":1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvDeleteXfrSKUIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=\"2006\"\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/GetTotalApprovedQty" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets the total qty approved by the DM for the carton. //No handler found",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/GetTotalApprovedQty\r\n    {\r\n        \"DocumentNum\" : 123,\r\n        \"CartonId\": \"123\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetTotalApprovedQtyIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTotalApprovedQtyRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=\"2006\"\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/ValidateDestination" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Checks to see if the destination id entered is present in the Destination table //No handler found",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/ValidateDestination\r\n    {\r\n        \"DestinationId\" : 1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValidateDestinationIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidateDestinationRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DestinationId\"=\"2006\"\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/GetValidCartonInfo" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Retrieves the Doc Id and Carton Id for an open carton //No handler found",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/GetValidCartonInfo",
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetValidCartonInfoRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvGetCartons" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Checks to see if the destination id entered is present in the Destination table //No handler found",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvGetCartons\r\n    {\r\n        \"Department\" : \"1\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvGetCartonsIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvGetCartonsRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"Department\"=\"2006\"\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvGetValidDocInfo" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Checks to see if there are any available unapproved docs",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvGetValidDocInfo",
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvGetValidDocInfoRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            \r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvValidateDept" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Checks to see if the destination id entered is present in the Destination table //No handler found",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvValidateDept\r\n    {\r\n        \"DocumentNum\" : 1,\r\n        \"Department\" : \"1\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvValidateDeptIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvValidateDeptRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"Department\"=\"2006\"\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvGetDeptInfo" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets the dept number for the item no given. //No handler found",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvGetDeptInfo\r\n    {\r\n        \"Sku\" : \"123123123123\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvGetDeptInfoIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvGetDeptInfoRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"Sku\"=\"2006\"\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvGetDocNum" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Uses a document from Document table that is closed but has  atleast one dept not approved",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvGetDocNum",
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvGetDocNumRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            \r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvGetApprovedDeptQty" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets the total DM_Approved_Qty given a dept_id",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvGetApprovedDeptQty\r\n    {\r\n        \"DocumentNum\" : 1,\r\n        \"Department\" : \"1\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvGetApprovedDeptQtyIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvGetApprovedDeptQtyRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/RtvValidateItem" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Validates the item and returns the item description",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/RtvValidateItem\r\n    {\r\n        \"ItemNum\" : 1,\r\n        \"Department\" : \"1\",\r\n        \"DocumentNum\" : \"123\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RtvValidateItemIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns a list of GetIncompleteScansRes of all the incomplete docId and cartonId",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtvValidateItemRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/FJRtvUpdateTrackingNo" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Validates the item and returns the item description",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/FJRtvUpdateTrackingNo\r\n    {\r\n        \"DocId\" : 1,\r\n        \"CartonId\" : \"1\",\r\n        \"TrackingNum\" : \"123\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FjRtvUpdateTrackingNoIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns if update is valid or not",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FjRtvUpdateTrackingNoOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/FJRtvReopenCarton" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Validates the item and returns the item description",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/FJRtvReopenCarton\r\n    {\r\n        \"DocId\" : 1,\r\n        \"CartonId\" : \"1\",\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FjRtvReopenCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/FjRtvReopenDoc" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Validates the item and returns the item description",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/FjRtvReopenDoc\r\n    {\r\n       \"DocId\" : \"1\",\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FjRtvReopenDocIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/FjrtvGetReprintCartons" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/FjrtvGetReprintCartonsOut",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FjrtvGetReprintCartonsOut"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/FjRtvValidateDeptApproval" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Checks to see if the dept id has been approved by DM (ready for scan-out)",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/FjRtvValidateDeptApproval\r\n    {\r\n       \"DocId\" : 1,\r\n       \"DeptId\": 13\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FjRtvValidateDeptApprovalIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FjRtvValidateDeptApprovalOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006- SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/FjRtvGetDeptCode" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets the dept code for the carton as in the db.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/FjRtvGetDeptCode\r\n    {\r\n       CartonId:1234443\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FjRtvGetDeptCodeIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FjRtvGetDeptCodeOut"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2012 - Error calling SQLGetData<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Damages/FjValidateSkuDept" : {
      "post" : {
        "tags" : [ "Damages" ],
        "summary" : "Gets the dept code for the carton as in the db.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Damages/FjValidateSkuDept\r\n    {\r\n       DeptId:1234443\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FjValidateSkuDeptIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FjValidateSkuDeptOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            To generate stub error 2006 send \"DocumentNum\"=2006\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/GetsDefaultDestination" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Get Default DSP destination.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Disposal/GetDefaultDestination\r\n    {\r\n       \"LanguageId\":\"EN\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspGetDefaultDestinationIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DspGetDefaultDestinationOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2652 - Invalid (E_LANGUAGE_CODE_INVALID) <br />\r\n            3034 -'ERROR IN DEFAULT | DESTINATION', '0' <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/SetDestination" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Generates a new Disposal document Id and sets document status to Open",
        "description" : "Sample request:\r\n\r\n    POST simapi/Disposal/SetDestination\r\n    {\r\n       \"DestinationCode\":\"6\",\r\n       \"LanguageId\":\"0\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspSetDestinationIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DspDestinationOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - INPUT_MISSING (E_INPUT_MISSING) <br />\r\n            2652 - Invalid (E_LANGUAGE_CODE_INVALID) <br />\r\n            3032 - ERROR IN DESTINATION <br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/StartDisposalBag" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Generates a new Disposal Bag number and sets ,bag status to PRG (in progress)",
        "description" : "Sample request:\r\n\r\n    POST simapi/Disposal/StartDisposalBag\r\n    {\r\n       \"DocId\": 695,\r\n       \"DestinationCode\": \"04\",\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspStartDisposalBagIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DspStartDisposalBagOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - INPUT_MISSING (E_INPUT_MISSING) <br />\r\n            3032 - ERROR IN DESTINATION <br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/ProcessItem" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Retrieves POS Item Sku and description",
        "description" : "Sample request:\r\n\r\n    POST simapi/Disposal/ProcessItem\r\n    {\r\n       \"DocId\": 4,\r\n       \"BagNumber\": 1,\r\n       \"Sku\":\"410000400951\",\r\n       \"Symbology\":\"1\",\r\n       \"DestinationCode\":\"9\",\r\n       \"SingleSkuType\":\"6\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspProcessItemIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DspProcessItemOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1006 - Invalid SKU <br />\r\n            1007 - Item Not Found <br />\r\n            1018 - INPUT_MISSING (E_INPUT_MISSING) <br />\r\n            2017 - No data exists in database <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/AddItemToBag" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Add un found item to Bag",
        "description" : "Sample request:\r\n\r\n    POST simapi/Disposal/AddItemToBag\r\n    {\r\n       \"DocId\": 2,\r\n       \"BagNumber\": 1,\r\n       \"Sku\":\"410000401439\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspAddItemIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TotalNumberItemsInBag"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - INPUT_MISSING (E_INPUT_MISSING) <br />\r\n            1006 - Invalid SKU format <br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/ChangeItemQuantity" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Change the Quantity of a Disposed item",
        "description" : "Sample request:\r\n\r\n    POST simapi/Disposal/ChangeItemQuantity\r\n    {\r\n       \"DocId\": 602,\r\n       \"BagNumber\": 3,\r\n       \"Sku\":\"410000401439\"\r\n       \"DisplayedQuantity\": 6\r\n       \"ChangeQuantity\": 5\r\n       \"DeleteIndicator\": true\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspChangeItemQuantityIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TotalNumberItemsInBag"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - INPUT_MISSING (E_INPUT_MISSING) <br />\r\n            1006 - Invalid SKU format <br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/FinishDestination" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Close a disposal document",
        "description" : "Sample request:\r\n\r\n    POST simapi/Disposal/FinishDestination\r\n    {\r\n       \"DocId\": 603,\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspFinishDestinationIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - INPUT_MISSING (E_INPUT_MISSING) <br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/FinishBag" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Close a bag",
        "description" : "Sample request:\r\n\r\n    POST simapi/Disposal/FinishBag\r\n    {\r\n       \"DocId\": 150,\r\n       \"BagNumber\":3\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspFinishBag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - INPUT_MISSING (E_INPUT_MISSING) <br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/PrintReport" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Request the print of a Disposal Report",
        "description" : "Sample request:\r\n\r\n    POST simapi/Disposal/PrintReport\r\n    {\r\n       \"DocId\":343,\r\n       \"BagNumber\":5\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspPrintReportIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return True is pass or error if fail"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - INPUT_MISSING (E_INPUT_MISSING) <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/VerifyItemInBag" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Retrieves POS Item Sku and description",
        "description" : "Sample request:\r\n\r\n    POST simapi/Disposal/VerifyItemInBag\r\n    {\r\n       \"DocId\":343,\r\n       \"BagNumber\":3,\r\n       \"Sku\":\"410000400951\",\r\n       \"Symbology\":\"0\"\r\n\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspVerifyItemInBagIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DspVerifyItemInBagOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - INPUT_MISSING (E_INPUT_MISSING) <br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/GetDestinations" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Retrieves the list of destinations in the Destination table which belong\r\nto Disposals(sorted by Destination_Seq)",
        "description" : "Sample request:\r\n\r\n     POST simapi/Disposal/GetDestinations",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DspGetDestinationsOut"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/GetDestinationCount" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Retrieves the count of destinations in the Destination table which belong\r\nto Disposals(sorted by Destination_Seq)",
        "description" : "Sample request:\r\n\r\n     POST simapi/Disposal/GetDestinationCount",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/Ticket" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Set ticket",
        "description" : "Sample request:\r\n\r\n     POST simapi/Disposal/Ticket\r\n     {\r\n        DocId: 2,\r\n        Sku: \"410000401439010399\",\r\n        LabelCount: 1\r\n     }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspTicketIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/GetClassDesc" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Get ClassDesc from BrokenPackMap table",
        "description" : "Sample request:\r\n\r\n     POST simapi/Disposal/GetClassDesc\r\n     {\r\n         \"DeptId\": 5,\r\n         \"Type\": \"4\",\r\n         \"ProcessId\": 34\r\n     }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspGetClassDescIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DspGetClassDescOut"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/GetSingleSku" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Get ClassDesc from BrokenPackMap table",
        "description" : "Sample request:\r\n\r\n     POST simapi/Disposal/GetSingleSku\r\n     {\r\n         \"DeptId\":5,\r\n         \"ProcessId\":4,\r\n         \"Type\": \"34\",\r\n         \"Sequence\":43\r\n     }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspGetSingleSkuIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DspGetSingleSkuOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2004 - DB Execute failed <br />\r\n            2006 - SQLBindParameter() or BindCol() error <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/StartDestination" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "The legacy Disposals app retrieves a list of available disposals from the database for display on the initial Disposals screen.\r\nIt makes 3 calls to get Disposal destination information for display, DSPGetDefaultDestination, DSPgetDestinationCount and DSPGetDestinations.\r\nThe call to DSPGetDestinationCount is only used by STEP for determining how many “pages” of items there are for display.\r\nThis function is not needed by the Android client.\r\nThe “default” destination was only used by the legacy app if the user hit ENTER on the list Destinations without selecting a destination sequence number.\r\nThe android client should not need to call this function either.\r\nThere is an opportunity for an orchestration to open a new Destination and verify it downs not exceed the maximum.This would combine calls to DSPSetDestination and DSPFinishDestination.",
        "description" : "Sample request:\r\n            \r\n     POST simapi/Disposal/StartDestination\r\n     {\r\n         \"DestinationCode\":5,\r\n         \"LanguageId\":4,\r\n     }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspSetDestinationIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DspStartDestinationOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n             POC/RF Error IDs:<br />\r\n                1018 – input missing<br />\r\n                2004 – database execute error<br />\r\n                2006 – database index error<br />\r\n                3032 – error in disposals destination<br />\r\n                10001 – inventory in progress generated by WebAPI, not returned by RFControlCOM<br />\r\n                10002 – exceeded maximum bags for destination generated by WebAPI, not returned by RFControlCOM\r\n                10003 – failed to create Disposal Bag for destination generated by WebAPI, not returned by RFControlCOM",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/CloseBag" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "In the legacy app, when the user chooses to start a new bag, the legacy app checks to see if it has a non-zero DocumentID.\r\nIf it does it calls DSPFinishBag, and UTLPrintReport in succession.\r\nThis new orchestration would call those 2 RFControlCOM functions, returning only a status.",
        "description" : "Sample request:\r\n\r\n     POST simapi/Disposal/CloseBag\r\n     {\r\n        \"DocId\":5,\r\n        \"BagNumber\":4,\r\n     }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspFinishBag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n               1018 – input missing<br />\r\n               2004 – database execute error<br />\r\n               2006 – database index error<br />\r\n               3032 – error in disposals destination<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/PrintLabel" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "Disposals only prints labels for some BrokenPack items and Hazmat items.\r\nTo print a label in the legacy app, the Reticket App is activated to print a ticket and then function DSPTicket is called.\r\nA new orchestration is needed to call UTLPrintLabel and DSPTicket.",
        "description" : "Sample request:\r\n\r\n     POST simapi/Disposal/PrintLabel\r\n     {\r\n        \"DocId\":5,\r\n        \"Sku\": \"410000401439010399\",\r\n        \"LabelCount\": 1\r\n     }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspTicketIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrintLabelObject"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1006 - Invalid SKU format <br />\r\n             1007 - Item not found in POS<br />\r\n             1018 – input missing<br />\r\n             1501 - Memory allocation failed <br />\r\n             2004 – database execute error<br />\r\n             2006 – database index error<br />\r\n             2652 - Invalid (E_LANGUAGE_CODE_INVALID) <br />\r\n             3032 – error in disposals destination<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Disposal/PrintSinglesLabel" : {
      "post" : {
        "tags" : [ "Disposal" ],
        "summary" : "A new orchestration is needed to call DSPGetSingleSku.\r\nto retrieve the SKU for the item.\r\nand then call Disposals/PrintLabel orchestrated function is for the item",
        "description" : "Sample request:\r\n\r\n     POST simapi/Disposal/PrintSinglesLabel\r\n     {\r\n        \"DocId\":5,\r\n        \"LabelCount\":3,\r\n        \"DeptId\": 12,\r\n        \"ProcessId\": 2,\r\n        \"Type\": \"S\",\r\n        \"Sequence\": 12\r\n     }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DspPrintGetSingleSkuIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrintLabelObject"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1002(E_INVALID_LOGIN)<br /> \r\n             1018(E_INPUT_MISSING) <br /> \r\n             3003(E_PRINTER_POWER_ON_NOW) <br /> \r\n             3001(E_PRINTER_REQUEST_FAILED) <br /> \r\n             2006 – database index error <br /> \r\n             2012 – GET DATA ERROR <br /> \r\n             3312 – BP SINGLE SKU NOT FOUND<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/DisposalApproval/GetDisposalApproval" : {
      "post" : {
        "tags" : [ "DisposalApproval" ],
        "summary" : "Rest API to get Disposal Approval info",
        "description" : "Sample request:\r\n\r\n    POST simapi/DisposalApproval/GetDisposalApproval\r\n    {\r\n       \"IsDm\" : false\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetDisposalApprovalIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DisposalApprovalDisplayInfo"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/DisposalApproval/AddDisposalApproval" : {
      "post" : {
        "tags" : [ "DisposalApproval" ],
        "summary" : "Rest API to add Disposal Approval",
        "description" : "Sample request:\r\n\r\n    POST simapi/DisposalApproval/AddDisposalApproval\r\n    {\r\n       \"DocId\" : 658,\r\n       \"BagNumber\": 254,\r\n       \"Sku\" : \"43800034\",\r\n       \"MgrId\": 152,\r\n       \"Qty\": 7,\r\n       \"IsDm\": false\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddDisposalApprovalIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/DisposalApproval/DeleteDisposalApproval" : {
      "post" : {
        "tags" : [ "DisposalApproval" ],
        "summary" : "Rest API to delete Disposal Approval Report",
        "description" : "Sample request:\r\n\r\n    POST simapi/DisposalApproval/DeleteDisposalApproval\r\n    {\r\n        \"DocId\" : 658,\r\n        \"BagNumber\": 254,\r\n        \"Sku\" : \"43800034\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeleteDisposalApprovalIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/DisposalApproval/GetDisposalApprovalReport" : {
      "post" : {
        "tags" : [ "DisposalApproval" ],
        "summary" : "Rest API to get Disposal Approval Report",
        "description" : "Sample request:\r\n\r\n    POST simapi/DisposalApproval/GetDisposalApprovalReport\r\n    {\r\n        \"Sku\" : \"43800034\",\r\n        \"Approval\": true,\r\n        \"DmApproval\" : false,\r\n        \"DocStart\" : \"05/29/2015 05:50 AM\",\r\n        \"DocEnd\" : \"05/29/2015 05:50 AM\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetDisposalApprovalReportIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DisposalApprovalReportInfo"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Item/GetItemInfo" : {
      "post" : {
        "tags" : [ "Item" ],
        "summary" : "Retrieves POS description and price info for an item.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Item/GetItemInfo\r\n    {\r\n       \"Sku\": \"400000219257\",\r\n       \"Symbology\": \"0\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScanItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RossItem"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1006 - Invalid SKU<br />\r\n            1007 - Item not found in POS<br />\r\n            1019 - Invalid Date<br />\r\n            1026 - Audit Count Must Be Greater Than 0<br />\r\n            1501 - Memory allocation failed<br />\r\n            2001 - NULL value where not expected<br />\r\n            2002 - DB connect failed<br />\r\n            2003 - SQL Prepare error<br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter or BindCol error<br />\r\n            2012 - Error calling SQLGetData<br />\r\n            2051 - Could not link to POS interface<br />\r\n            2052 - Error retrieving data from POS<br />\r\n            2053 - Exception thrown in POS interface<br />\r\n            2600 - Barcode Invalid<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Item/GetMarkdownInfo" : {
      "post" : {
        "tags" : [ "Item" ],
        "summary" : "Retrieves item information from POS as needed by the RF and ISP Markdowns applications.",
        "description" : "Sample request:\r\n \r\n     POST simapi/Item/GetMarkdownInfo\r\n         {\r\n             \"ItemIdentifier\": \"400000219257\",\r\n             \"Symbology\": \"0\"\r\n         }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetMarkdownInfoIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MarkdownInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n             POC/RF Error IDs:<br />\r\n            1007- Item not found in POS<br />\r\n            1019- Invalid Date<br />\r\n            1026- Audit Count Must Be|Greater Than 0<br />\r\n            1027- Invalid subcategory <br />\r\n            1501- Memory allocation failed<br />\r\n            2001- NULL value |where not expected<br />\r\n            2002- DB connect failed<br />\r\n            2003- SQL Prepare error<br />\r\n            2004- DB Execute failed<br />\r\n            2006- SQLBindParameter|or BindCol error<br />\r\n            2012- Error calling SQLGetData<br />\r\n            2051- Could not link to|POS interface<br />\r\n            2052- Error|retrieving data|from POS<br />\r\n            2053- Exception thrown|in POS interface<br />\r\n            2600- Barcode Invalid<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Item/AddSkuLog" : {
      "post" : {
        "tags" : [ "Item" ],
        "summary" : "Adding SKU log.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Item/AddSkuLog\r\n        {\r\n            \"ScanType\": \"XX\",\r\n            \"ScanStatus\": \"N\",\r\n            \"Sku\": \"400000219257\",\r\n            \"Quantity\": 1\r\n        }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddSkuLogIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1501 - Memory allocation failed <br />\r\n            2006 - SQLBindParameter|or BindCol error<br />\r\n            2004 - DB Execute failed<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Item/UpdateSkuLogStatus" : {
      "post" : {
        "tags" : [ "Item" ],
        "summary" : "Update SKU log.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Item/AddSkuLog\r\n        {\r\n            \"ScanStatus\": \"N\",\r\n            \"Sku\": \"400000219257\"\r\n        }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSkuLogStatusIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1501 - Memory allocation failed <br />\r\n            2006 - SQLBindParameter|or BindCol error<br />\r\n            2004 - DB Execute failed<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Markdown/StartMkdnDoc" : {
      "post" : {
        "tags" : [ "Markdown" ],
        "summary" : "Generates a new Markdown document number and sets status to Open.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Markdown/StartMkdnDoc\r\n    {\r\n       \"Type\": 0 //Markdown(0) or MgrMarkdown(1)\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarkdownStartIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns new MarkdownDocument number",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MarkdownStartMkdDocOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error. <br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter|or BindCol error. Simulate error on stub with AssociateId=\"2006\"<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Markdown/CloseMkdnDoc" : {
      "post" : {
        "tags" : [ "Markdown" ],
        "summary" : "Sets the status of the given Document number to Closed.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Markdown/CloseMkdnDoc\r\n    {\r\n       \"MarkdownDocId\": 139,\r\n       \"Type\": 0 //Markdown(0) or MgrMarkdown(1)\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarkdownCloseIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter|or BindCol error. Simulate 2006 error on stub with MarkdownDocId=2006.<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Markdown/AddMkdnSku" : {
      "post" : {
        "tags" : [ "Markdown" ],
        "summary" : "Adds the SKU to the MarkdownItem table.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Markdown/AddMkdnSKU\r\n    {\r\n        \"MarkdownDocId\":613,\r\n        \"Sku\" : \"1\",\r\n        \"Description\": \"SKU something\",\r\n        \"SkuType\":1,\r\n        \"Price\": \"22.34\",\r\n        \"OriginalPrice\":\"12.23\",\r\n        \"SubDivision\" : \"12\",\r\n        \"PrtFlag\" :\"1\",\r\n        \"PrintCopies\" : 2 \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarkdownAddMkuIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter|or BindCol error. Simulate 2006 error on stub with MarkdownDocId=\"2006\"<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Markdown/UpdateNotFoundTotal" : {
      "post" : {
        "tags" : [ "Markdown" ],
        "summary" : "Updates the Not Found total for current week and today.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Markdown/UpdateNotFoundTotal",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Markdown/GetMkdnsStatus" : {
      "post" : {
        "tags" : [ "Markdown" ],
        "summary" : "Determines if markdowns (price changes) are loaded and available.\r\nUses the PriceChangeItem and MarkdownAllow tables. Date format: m/d/yyyy",
        "description" : "Sample request:\r\n\r\n    POST simapi/Markdown/GetMkdnsStatus\r\n    {\r\n       \"WeekStartDate\": \"08/12/2019\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarkdownGetMkdnsStatusIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MarkdownGetMkdnsStatusOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1019- Invalid Date<br />\r\n            2006- SQLBindParameter|or BindCol error. Simulate 2006 error on stub with WeekStartDate=\"06/20/1999\"<br />\r\n            2004- DB Execute failed<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Markdown/ProcessMgrMarkdownItem" : {
      "post" : {
        "tags" : [ "Markdown" ],
        "summary" : "Get manager markdown information include manager discount price for 10, 30 and 50 percent.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Markdown/ProcessMgrMarkdownItem\r\n    {\r\n       \"Sku\": \"123123123123\",\r\n       \"Symbology\": \"0\",\r\n       \"MarkdownDocId\": 123  \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarkdownScanItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MgrMarkdown"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1006 - Invalid SKU<br />\r\n            1007 - Item not found in POS<br />\r\n            1019 - Invalid Date<br />\r\n            1026 - Audit Count Must Be Greater Than 0<br />\r\n            1027 - Invalid subcategory <br />\r\n            1501 - Memory allocation failed<br />\r\n            2001 - NULL value where not expected<br />\r\n            2002 - DB connect failed<br />\r\n            2003 - SQL Prepare error<br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter or BindCol error<br />\r\n            2012 - Error calling SQLGetData<br />\r\n            2051 - Could not link to POS interface<br />\r\n            2052 - Error retrieving data from POS<br />\r\n            2053 - Exception thrown in POS interface<br />\r\n            2600 - Barcode Invalid<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Markdown/ProcessMarkdownItemAndPrintLabel" : {
      "post" : {
        "tags" : [ "Markdown" ],
        "summary" : "Combine calls to ITMGetMarkdownInfo, UTLPrintLabel, ITMAddSkuLog, MDAddMkdnSKU, and ITMUpdateSkuLogStatus into one WebAPI call.\r\nA label will only be printed for specific markdown types and price conditions.\r\nThe ProcessMarkdownItemAndPrintLabel API will open new markdown document if parameter MarkdownDocId is zero (0)",
        "description" : "Sample request:\r\n\r\n    POST simapi/Markdown/ProcessMarkdownItemAndPrintLabel\r\n    {\r\n       \"Sku\": \"123123123123\",\r\n       \"Symbology\": \"0\",\r\n       \"MarkdownDocId\": 123  \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarkdownScanItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns request id, with ProcessMarkdownItemAndPrintLabelRes data structure",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MarkdownItemAndPrintLabel"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1006 - Invalid SKU<br />\r\n            1007 - Item not found in POS<br />\r\n            1019 - Invalid Date<br />\r\n            1026 - Audit Count Must Be Greater Than 0<br />\r\n            1027- Invalid subcategory <br />\r\n            1501 - Memory allocation failed<br />\r\n            2001 - NULL value where not expected<br />\r\n            2002 - DB connect failed<br />\r\n            2003 - SQL Prepare error<br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter or BindCol error<br />\r\n            2012 - Error calling SQLGetData<br />\r\n            2051 - Could not link to POS interface<br />\r\n            2052 - Error retrieving data from POS<br />\r\n            2053 - Exception thrown in POS interface<br />\r\n            2600 - Barcode Invalid<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Markdown/ProcessMarkdownItem" : {
      "post" : {
        "tags" : [ "Markdown" ],
        "summary" : "Combine calls to ITMGetMarkdownInfo, UTLPrintLabel, ITMAddSkuLog, MDAddMkdnSKU, and ITMUpdateSkuLogStatus into one WebAPI call.\r\nThe ProcessMarkdownItemAndPrintLabel API will open new markdown document if parameter MarkdownDocId is zero (0)",
        "description" : "Sample request:\r\n\r\n    POST simapi/Markdown/ProcessMarkdownItem\r\n    {\r\n       \"Sku\": \"123123123123\",\r\n       \"Symbology\": \"0\",\r\n       \"MarkdownDocId\": 123  \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarkdownScanItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns request id, with ProcessMarkdownItemRes data structure",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MarkdownItem"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1006 - Invalid SKU<br />\r\n            1007 - Item not found in POS<br />\r\n            1019 - Invalid Date<br />\r\n            1026 - Audit Count Must Be Greater Than 0<br />\r\n            1027- Invalid subcategory <br />\r\n            1501 - Memory allocation failed<br />\r\n            2001 - NULL value where not expected<br />\r\n            2002 - DB connect failed<br />\r\n            2003 - SQL Prepare error<br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter or BindCol error<br />\r\n            2012 - Error calling SQLGetData<br />\r\n            2051 - Could not link to POS interface<br />\r\n            2052 - Error retrieving data from POS<br />\r\n            2053 - Exception thrown in POS interface<br />\r\n            2600 - Barcode Invalid<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Markdown/PrintMarkdownLabel" : {
      "post" : {
        "tags" : [ "Markdown" ],
        "summary" : "Combine calls to ITMAddSkuLog, UTLPrintLabel and ITMUpdateSkuLogStatus into one WebAPI call when the user chooses to print additional labels.\r\nThe API support LabelType:Markdown, PriceAdj, Recall and MgrMarkdown\r\nNotes:\r\n    ScanType: Should hold MarkdownType for labels: Markdown, MgrMarkdown and PriceAdj<br />",
        "description" : "Sample request:\r\n\r\n    POST simapi/Markdown/PrintMarkdownLabel\r\n    {\r\n        \"LabelType\": \"PriceAdj\",\r\n        \"PrintCopies\": 1,\r\n        \"Sku\": \"400000322247\",\r\n        \"Description\": \"14KT LEMON QRZ\",\r\n        \"DivisionNumber\": \"1111\",\r\n        \"DepartmentNumber\": \"1111\",\r\n        \"MarkdownDocId\": 123,\r\n        \"SkuType\": 1,\r\n        \"SubDivision\" : \"23\"\r\n        \"ClassNumber\": \"1234\",\r\n        \"PriceForDisplay\": \"$36.21\",\r\n        \"PriceBarcode\": \"4000003222473621\",\r\n        \"OldPrice\": \"36.21\",\r\n        \"NewPrice\": \"36.21\",\r\n        \"OriginPrice\": \"36.21\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PrintMarkdownLabel"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns request id, with ProcessMarkdownItemAndPrintLabelRes data structure",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrintMarkdownLabel"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1501 - Memory allocation failed <br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Plu/GetOriginalPrice" : {
      "post" : {
        "tags" : [ "Plu" ],
        "summary" : "Get the original price",
        "description" : "Sample request:\r\n\r\n    POST simapi/Plu/GetOriginalPrice\r\n    {\r\n       \"Sku\":\"400029859519\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossPlu"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return double price",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "number",
                  "format" : "double"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Plu/IsRecallItem" : {
      "post" : {
        "tags" : [ "Plu" ],
        "summary" : "check if item is recall",
        "description" : "Sample request:\r\n\r\n    POST simapi/Plu/IsRecallItem\r\n    {\r\n       \"Sku\":\"400029859519\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossPlu"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return double price",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1500 - E_GENERAL_ERROR_BASE<br />\r\n            2002 - Not connected, or connect attempt failed<br />\r\n            2006 -  SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Plu/GetSinglesAreas" : {
      "post" : {
        "tags" : [ "Plu" ],
        "summary" : "Get Singles Areas",
        "description" : "Sample request:\r\n\r\n    POST simapi/Plu/GetSinglesAreas",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PluGetSinglesAreasOut"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1500 -  E_GENERAL_ERROR_BASE<br />\r\n            2002 -  Not connected, or connect attempt failed<br />\r\n            2006 -  SQLBindParameter() or BindCol() error<br />\r\n            2011 -  Generic DB error. See log for details.<br />\r\n            2012 -  Error calling SQLGetData<br />\r\n            3501 -  E_AREA_NAMES_NOT_FOUND<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Plu/GetSinglesDesc" : {
      "post" : {
        "tags" : [ "Plu" ],
        "summary" : "Get List of SinglesDesc Category number can be from 1-7",
        "description" : "Sample request:\r\n\r\n    POST simapi/Plu/GetSinglesDesc\r\n    {\r\n      \"CategoryNo\":\"3\" \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PluGetSinglesDescIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PluGetSinglesDescOut"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1500 -  E_GENERAL_ERROR_BASE<br />\r\n            2002 -  Not connected, or connect attempt failed<br />\r\n            2006 -  SQLBindParameter() or BindCol() error<br />\r\n            2011 -  Generic DB error. See log for details.<br />\r\n            2012 -  Error calling SQLGetData<br />\r\n            3502 -  E_AREA_NAMES_NOT_FOUND<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Plu/PrintSingleLabel" : {
      "post" : {
        "tags" : [ "Plu" ],
        "summary" : "Prints Label receiving only the SKU.\r\nLooks up the item info by calling RtkGetitemInfo, then formats a “PriceAdj” label and Calls UTLPrintLabel to print the label.\r\nReturn status indicating if label print succeeded.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Plu/PrintSingleLabel\r\n    {\r\n        \"Sku\": \"400000322247\",\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossPlu"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrintLabelObject"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1501 - Memory allocation failed <br />\r\n            1006 - Invalid SKU format <br />\r\n            1007 - Item not found in POS<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/StartRecalls" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/StartRecalls\r\n    {\r\n       \"ToStore\": 2,\r\n       \"DestId\": 2\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecStartRecallsIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/ProcessSku" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/ProcessSKU\r\n    {\r\n       \"DocId\": Doc ID ,\r\n       \"CartonId\": Carton id as string ,\r\n       \"Sku\": sku number as string,\r\n       \"Qty\" :  number int \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecProcessSkuIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/DeleteSKU" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/DeleteSKU\r\n    {\r\n       \"DocId\": Doc ID ,\r\n       \"CartonId\": Carton id as string ,\r\n       \"Sku\": sku number as string,\r\n       \"Qty\" :  number int \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecDeleteSkuIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/ValidateSKUToDelete" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/ValidateSKUToDelete\r\n    {\r\n       \"DocId\": Doc ID ,\r\n       \"CartonId\": Carton id as string ,\r\n       \"Sku\": sku number as string,\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecValidateSkuToDeleteIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecValidateSkuToDeleteOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/CloseCarton" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/CloseCarton\r\n    {\r\n       \"DocId\": Doc ID ,\r\n       \"CartonId\": Carton id as string ,\r\n       \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecCloseCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return string of IPrint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecCloseCartonOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/CloseRecalls" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/CloseRecalls\r\n    {\r\n       \"DocId\": Doc ID ,\r\n       \r\n       \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecCloseRecalls"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return string of IPrint"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/StartCarton" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/StartCarton\r\n    {\r\n       \"DocId\": 2 ,\r\n       \"FromStore:\"2\",\r\n       \"ToStore\": \"3\"\r\n       \r\n     \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecStartCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecStartCartonOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/GetListOfCartons" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/GetListOfCartons\r\n    {\r\n       \r\n       \"ToStore\": Store id as int\r\n       \r\n       \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecGetListOfCartonsIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return string of Carton ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecGetListOfCartonsOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/GetXferDate" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/GetXferDate\r\n    {\r\n       \r\n       \"DocId\":134\r\n       \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecGetXferDateIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecGetXferDateOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/ChangeDocStatus" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/ChangeDocStatus\r\n    {\r\n       \r\n       \"DocId\": 134\r\n       \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecGetXferDateIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/ChangeQty" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/ChangeQty\r\n    {\r\n       \r\n       \"DocId\": Store id as int,\r\n       \"CartonId\":\"String Carton Id\",\r\n       \"Sku\":\"String Carton sku\",\r\n       \"Qty\":int \r\n       \r\n       \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecChangeQtyIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : ""
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/GetDefaultDestination" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/GetDefaultDestination\r\n    {\r\n       \r\n       \r\n       \"LanguageId\": 0\r\n       \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecGetDefaultDestinationIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecGetDefaultDestinationOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/GetDestination" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "Get destination description for destination code",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/GetDestination\r\n    {\r\n       \r\n        \"DisposalDestinationCode\":string \r\n        \"LanguageId\":\"lang id as string\"\r\n       \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecGetDestinationIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return list of Destination Description ,Disposal Destination Code(formatted)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecGetDestinationOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 -input missing <br />\r\n            2652 -LANGUAGE_CODE_INVALID<br />\r\n            3032 -DISPOSALS_ERROR_IN_DESTINATION",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/GetCarton" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "Get carton quantity",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/GetCarton\r\n    {\r\n       \r\n       \"DocId\": Store id as int,\r\n       \"CartonId\":\"String Carton Id\",\r\n       \"Sku\":\"String Carton sku\",\r\n       \"Qty\":int \r\n       \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecGetCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return  int",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecGetCartonOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Recalls/GetDestinations" : {
      "post" : {
        "tags" : [ "Recalls" ],
        "summary" : "Get carton quantity",
        "description" : "Sample request:\r\n\r\n    POST simapi/Recalls/GetDestinations",
        "responses" : {
          "200" : {
            "description" : "return List of GetDestinationsResult object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GetDestinationsResult"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error<br />\r\n            2012 - Error calling SQLGetData<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/BeginReceiving" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/BeginReceiving\r\n    {\r\n       ChangeStatus:4,\r\n       OldDocId:655 \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvBeginReceivingIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvBeginReceivingOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1018 - Inout Missing<br />\r\n            1025 - Not Supported now <br />\r\n            2004 - DB Execute failed<br />\r\n            3056 - NOT SUPPORTED NOW(E_RCV_SINGLE_USER_ONLY)\r\n            3057  -MANIFEST COUNT|SCREEN|ALREADY IN USE\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/SetManifestCount" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/SetManifestCount\r\n    {\r\n       DocId:560,\r\n       ManifestCount:32 \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvSetManifestCountIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 -  SQLBindParameter() or BindCol() error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ReceiveCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/ReceiveCarton\r\n    {\r\n       DocId:343,\r\n       CartonId:\"4599456\",\r\n       PartialLabel: \"33456\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvReceiveCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvReceiveCartonOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1005 - INVALID_STORE_NBR<br />\r\n            1021 - INVALID_CARTON_LENGTH<br />\r\n            1023 - INVALID_NUMBER_PAUSED<br />\r\n            1028 - INVALID_CARTON<br />\r\n            2023 - DB_DUPLICATE_DATA<br />\r\n            3011 - RCV_COMINGLED_CARTON<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/AddMisdirectedCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/AddMisdirectedCarton\r\n    {\r\n       DocId:343,\r\n       CartonId:\"23232\",\r\n       Duplicate:  false,\r\n       PartialLabel:34343\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvAddMisdirectedCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvAddMisdirectedCartonOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1005 - INVALID_STORE_NBR<br />\r\n            1021 - INVALID_CARTON_LENGTH<br />\r\n            1023 - INVALID_NUMBER_PAUSED<br />\r\n            1028 - INVALID_CARTON<br />\r\n            2023 - DB_DUPLICATE_DATA<br />\r\n            3011 - RCV_COMINGLED_CARTON<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/AddDuplicateCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/AddDuplicateCarton\r\n    {\r\n       DocId:343,\r\n       CartonId:\"343423\",\r\n       PartialLabel:343432432423\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvAddDuplicateCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvAddDuplicateCartonOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1012 - E_WRONG_TYPE_CARTON<br />\r\n            1028 - E_INVALID_CARTON<br />\r\n            1018 - E_INPUT_MISSING<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ExitCartonReceiving" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/ExitCartonReceiving\r\n    {\r\n       DocId:343,\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvDocId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvExitCartonReceivingOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - E_INPUT_MISSING<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/GetTransferInCartons" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/GetTransferInCartons",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RcvGetTransferInCartonsOut"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ProcessItem" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/ProcessItem\r\n    {\r\n          \t \"DocId\":0,\r\n             \"CartonId\":\"Abc2323\",\r\n             \"SequenceNo\":23,\r\n             \"Sku\":\"42000000\",\r\n             \"Symbology\":\"0\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvProcessItemIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvProcessItemOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />\r\n             1018 - E_INPUT_MISSING<br />\r\n             1006 - E_INVALID_SKU<br />\r\n             1007 - \"E_ITEM_NOT_FOUND<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/VerifyItemInCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/VerifyItemInCarton\r\n    {\r\n          \t \"DocId\":0,\r\n             \"CartonId\":\"Abc2323\",\r\n             \"SequenceNo\":23,\r\n             \"Sku\":\"42000000\",\r\n             \"Symbology\":\"0\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvProcessItemIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvProcessItemOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />\r\n             1018 - INPUT_MISSING<br />\r\n             1006 - INVALID_SKU<br />\r\n             1007 - Item not found in POS<br />\r\n             2655 -  No Sku To Delete<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ChangeItemQuantity" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/ChangeItemQuantity\r\n    {\r\n          \t \"DocId\":0,\r\n             \"CartonId\":\"489\",\r\n             \"SequenceNo\":23,\r\n             \"Sku\":\"42000000\",\r\n             \"OldQuantity\": 5,\r\n             \"NewQuantity\":6,\r\n             \"Delete\":1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvChangeItemQuantityIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvChangeItemQuantityOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2018 - Total qty is negative<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/DeleteCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/DeleteCarton\r\n    {\r\n         \"DocId\":0,\r\n         \"CartonId\":\"489\",\r\n         \"SequenceNo\":23,\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvDeleteCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             1016 - Insufficient|Security Level<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/CloseCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/CloseCarton\r\n    {\r\n          \t \"DocId\":0,\r\n             \"CartonId\":\"489\",\r\n             \"SequenceNo\":23,\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvDeleteCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/OpenCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/OpenCarton\r\n    {\r\n          \t \"DocId\":0,\r\n             \"CartonId\":\"489\",\r\n             \"SequenceNo\":23,\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvDeleteCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/AcceptNotFoundItem" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/AcceptNotFoundItem\r\n    {\r\n          \t \"DocId\":0,\r\n             \"CartonId\":\"92\",\r\n             \"SequenceNo\":23,\r\n             \"Symbology\":\"0\" \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvAcceptNotFoundItemIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvAcceptNotFoundItemOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/CheckCartonForDelete" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Checks cart for existence prior to deletion",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/CheckCartonForDelete\r\n    {\r\n         \"DocId\":0,\r\n         \"CartonId\":\"432323\",\r\n         \"SequenceNo\":23,\r\n         \"CheckSecurity\":3\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvCheckCartonForDeleteIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             1016 - Insufficient|Security Level\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/UpdateInboundSealStatus" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "As described by its name",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/UpdateInboundSealStatus\r\n    {\r\n          \t \"DocId\":0,\r\n             \"SealStatus\":=1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvUpdateSealStatus"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/AddInboundSeal" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Adds the Inbound Truck Seal number to the Receipt Document table",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/AddInboundSeal\r\n    {\r\n         \"DocId\":0,\r\n         \"Seal\":\"3345655\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvProcessSeal"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2004 – DB Execute Failed <br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/AddOutboundSeal" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Adds the Outbound Truck Seal number to the Receipt Document table",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/AddOutboundSeal\r\n    {\r\n         \"DocId\":0,\r\n         \"Seal\": \"434531\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvProcessSeal"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ValidateSeal" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Validates truck Seal Scanned seal should not match any existing inbound or outbound seals",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/ValidateSeal\r\n    {\r\n          \t\"Seal\":\"3349\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvValidateSealIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvValidateSealOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/NeedOutboundSeal" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Checks to see if Outbound Seal Screen needs to be shown",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/NeedOutboundSeal\r\n    {\r\n          \t\"DocId\":\"1\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvDocId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return true false 1 =true 0=false<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvNeedOutboundSealOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/BeginFjReceiving" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Starts Fine Jewelry Receiving manifest document",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/BeginFjReceiving",
        "responses" : {
          "200" : {
            "description" : "return docId<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvDocId"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />\r\n             2027 - Fine Jewelry|Already In Use<br />\r\n             3056 - NOT SUPPORTED NOW<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ScanFjCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Validate carton label length scanned by user",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/ScanFjCarton\r\n    {\r\n        \"DocId\":680,\r\n        \"TempLabelOrCartonId\":\"34334SDR\"\r\n        \"PartialLabel:12323\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvScanFjCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return ScanFjCarton Object <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvScanFjCartonOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1018 - INPUT_MISSING<br />\r\n             2006 - SQLBindParameter() or BindCol() error<br />\r\n             1023 - ERROR<br />\r\n             1021 - Carton Label|Must Be|Sixteen Digits<br />\r\n             1028 - Invalid Carton<br />\r\n             1005 - Invalid Store Number<br />\r\n             2016 - No data in database<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/FjManifestNumber" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Sets Manifest Number scanned by user",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/FjManifestNumber\r\n    {\r\n      \"DocId\":232,\r\n      \"CartonId\":\"232323\",\r\n      \"ManifestNo\": \"333343\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvSetFjManifestNumberIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n             POC/RF Error IDs:<br />\r\n              1018 - INPUT_MISSING<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />\r\n              1023 - Error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ProcessFjItem" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Validates item barcode scanned by user and retrieves description from server",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/ProcessFjItem\r\n    {\r\n      \"DocId\":232,\r\n      \"CartonId\":\"232323\",\r\n      \"Sku\":\"42000000\"\r\n      \"Symbology\":\"0\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvProcessFjItemIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvProcessFjItemOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n             POC/RF Error IDs:<br />\r\n              1006 - Invalid SKU<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/DeleteFjCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Removes Carton Number from document",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/DeleteFjCarton\r\n    {\r\n      \"DocId\":232,\r\n      \"CartonId\": \"232323\",\r\n      \"DeleteAll\":1\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvDeleteFjCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n             POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/CloseFjCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Close Fine Jewelry Carton",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/CloseFjCarton\r\n    {\r\n      \"DocId\":232,\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvFjCarton"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/CompleteFjReceiving" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Complete Fine Jewelry Receiving for document",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/CompleteFjReceiving\r\n    {\r\n      \"DocId\":232,\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvDocId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/GetFjTransferInCartons" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Retrieves Fine Jewelry Transfer Manifest in Cartons",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/GetFjTransferInCartons",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RcvGetFjTransferInCartonsOut"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/OpenFjCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Change the carton status from 10 to 0",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/OpenFjCarton\r\n    {\r\n       \"DocId\":504,\r\n       \"CartonId\": \"2323212321\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvFjCarton"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/CheckForCurrentFjUser" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Check if there is a user already logged in Fine Jewelry receiving",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/CheckForCurrentFjUser",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />\r\n              3056 - NOT SUPPORTED NOW<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/AddDummySku" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Adds “Dummy SKU” to ReceiptItem table",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/AddDummySku\r\n    {\r\n       \"DocId\":504,\r\n       \"CartonId\":\"asdsd\",\r\n       \"Sku\":\"42000000\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvAddDummySkuIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />\r\n              2016 - No data in database<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/TimeoutCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Timeout fires or Gets sequence, description, and SKU based on category number FROM SinglesSkuMap",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/TimeoutCarton\r\n    {\r\n       \"DocId\":504,\r\n       \"CartonId\":\"34\",\r\n       \"SequenceNo\": 5\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvTimeoutCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ReturnCarton" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Adds CoMingled carton to ReturnCarton table",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/ReturnCarton\r\n    {\r\n       \"CartonId\":\"504\",\r\n       \"PartialLabel\":123123,\r\n       \"FjFlag\":5\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvReturnCartonIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/BeginFjHighSec" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Opens a document to begin FJ High Sec",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/BeginFjHighSec\r\n    {\r\n       \"ChangeStatus\":504,\r\n       \"OldDocId\": 459,\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvBeginFjHighSecIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RcvBeginFjHighSecOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ExitFjHighSec" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Exit Procedure for FJ High Sec",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/RcvExitFjHighSecIn\r\n    {\r\n       \"DocId\":3 \r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvDocId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExitFjHighSecOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018 - Invalid Input<br />\r\n              2006 - SQLBindParameter() or BindCol() error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ProcessInboundSeal" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Calls RVCValidateSeal. if seal is valid call AddInboundSeal.  Return parameter IsSealValid",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/ProcessInboundSeal\r\n    {\r\n       \"DocId\":3,\r\n       \"Seal\":\"1\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvProcessSeal"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return IsSealValid(number) 0= not valid, 1 = valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n             1018= Input Missing\r\n             1021= Carton Label Must Be Sixteen Digits\r\n             2004 – DB Execute Failed\r\n             2006 – SQLBindParameter |or BindCol error\r\n             2016= No data in database",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Receive/ProcessOutboundSeal" : {
      "post" : {
        "tags" : [ "Receive" ],
        "summary" : "Calls RVCValidateSeal. if seal is valid call AddInboundSeal.  Return parameter IsSealValid",
        "description" : "Sample request:\r\n\r\n    POST simapi/Receive/ProcessOutboundSeal\r\n    {\r\n       \"DocId\":3,\r\n       \"Seal\":\"13434\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RcvProcessSeal"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return IsSealValid(number) 0= not valid, 1 = valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n              POC/RF Error IDs:<br />\r\n              1018= Input Missing\r\n             1021= Carton Label Must Be Sixteen Digits\r\n            2004 – DB Execute Failed\r\n            2006 – SQLBindParameter |or BindCol error\r\n            2016= No data in database",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Reticket/GetItemInfo" : {
      "post" : {
        "tags" : [ "Reticket" ],
        "summary" : "Retrieves POS Item Information",
        "description" : "Sample request:\r\n\r\n    POST simapi/Reticket/GetItemInfo\r\n    {\r\n        \"Sku\": \"400000109039\"\r\n        \"Symbology\": \"0\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScanItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReticketItemInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2652 - Invalid (E_LANGUAGE_CODE_INVALID) <br />\r\n            1007 - Item not found in POS<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Reticket/PrintReticketLabel" : {
      "post" : {
        "tags" : [ "Reticket" ],
        "summary" : "Prints Label according to markdown type and app making request, the optionally updates the SKU log depending on parameters passed.\r\nReturn status indicating if label print succeeded.\r\nThe API support LabelType:RtktPriceAdj, RtktNoAction, PriceAdj, RtktMarkdown and Recall",
        "description" : "Sample request:\r\n\r\n    POST simapi/Reticket/PrintReticketLabel\r\n    {\r\n        \"LabelType\": \"PriceAdj\",\r\n        \"PrintCopies\": 1,\r\n        \"Sku\": \"400000322247\",\r\n        \"Description\": \"14KT LEMON QRZ\",\r\n        \"DivisionNumber\": \"1111\",\r\n        \"DepartmentNumber\": \"1111\",\r\n        \"UpdateSkuLog\": true,\r\n        \"ScanType\" : \"RM\",\r\n        \"ClassNumber\": \"1234\",\r\n        \"PriceForDisplay\": \"$36.21\",\r\n        \"PriceBarcode\": \"4000003222473621\",\r\n        \"NewPrice\": \"36.21\",\r\n        \"OriginPrice\": \"36.21\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PrintReticketLabel"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrintReticketLabel"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1501 - Memory allocation failed <br />\r\n            2006 - SQLBindParameter|or BindCol error<br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/RfCom/DirectRfControl" : {
      "post" : {
        "tags" : [ "RfCom" ],
        "summary" : "ONLY FOR DEVELOPMENT\r\n Direct execute to RF Com used for remote debug,",
        "description" : "Sample request:\r\n\r\n    POST simapi/RfCom/DirectRfControl",
        "requestBody" : {
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RfComIn"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RfComIn"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RfComIn"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RfComIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/RfCom/BeginEndOfDay" : {
      "post" : {
        "tags" : [ "RfCom" ],
        "summary" : "ONLY FOR DEVELOPMENT\r\nSimulate EndOfDay task start include SignalR notification EndOfDayStarted. Block all WEB API and the HTTP 530 error (Code 3204) will be generated\r\nTo Release from EndOfDay mode call to simapi/RfCom/FinishEndOfDay.",
        "description" : "Sample request:\r\n\r\n    POST simapi/RfCom/BeginEndOfDay",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/RfCom/FinishEndOfDay" : {
      "post" : {
        "tags" : [ "RfCom" ],
        "summary" : "ONLY FOR DEVELOPMENT\r\n Simulate EndOfDay task completed include SignalR notification EndOfDayCompleted. Release all API from HTTP 530 error (Error Code 3204).",
        "description" : "Sample request:\r\n\r\n    POST simapi/RfCom/FinishEndOfDay",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Security/GetPosSecurityLevels" : {
      "post" : {
        "tags" : [ "Security" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Security/GetUserRoles" : {
      "post" : {
        "tags" : [ "Security" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Security/GetUserSecurityLevel" : {
      "post" : {
        "tags" : [ "Security" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Security/SetLastActivityTime" : {
      "post" : {
        "tags" : [ "Security" ],
        "summary" : "Update the last activity time in the RF_Session table.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Security/SetLastActivityTime",
        "responses" : {
          "200" : {
            "description" : "List of with barcode, docId, StockNo"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1004 - Session Not Found<br />\r\n            1501 - Memory allocation failed<br />\r\n            2002 - DB connect failed<br />\r\n            2003 - SQL Prepare error<br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter|or BindCol error'<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Security/IsSessionActive" : {
      "post" : {
        "tags" : [ "Security" ],
        "summary" : "Determines if there is an active, valid session with the given session, associate and terminal IDs.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Security/IsSessionActive",
        "responses" : {
          "200" : {
            "description" : "True: Current user session is valid. False: Current user session not valid anymore.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            1001 - Invalid User<br />\r\n            1004 - Session Not Found<br />\r\n            1018 - Input Missing<br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />\r\n            2012 - Error calling SQLGetData<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Security/LogoffUser" : {
      "post" : {
        "tags" : [ "Security" ],
        "summary" : "Logoff the user by ending the session",
        "description" : "Sample request:\r\n\r\n    POST simapi/Security/LogoffUser",
        "responses" : {
          "200" : {
            "description" : "True: if Current session logoff successful. False if session not valid or not in store.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            1002 - Invalid Login<br />\r\n            1004 - Session Not Found<br />\r\n            2002 - DB connect failed<br />\r\n            1501 - Memory allocation failed<br />\r\n            2003 - SQL Prepare error<br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Store/GetLocalStoreNumber" : {
      "post" : {
        "tags" : [ "Store" ],
        "summary" : "Returns the local store number",
        "description" : "Sample request:\r\n\r\n    POST simapi/Store/GetLocalStoreNumber",
        "responses" : {
          "200" : {
            "description" : "Return to local store number",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2501 - System Parameter|Not Found', '0'<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Store/GetStoreName" : {
      "post" : {
        "tags" : [ "Store" ],
        "summary" : "Given a store number, returns the store object",
        "description" : "Sample request:\r\n\r\n    POST simapi/Store/GetStoreName\r\n    {\r\n      \t\"StoreNumber\":\"8888\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossStoreStoreNumber"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Return to local store object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RossStore"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1005 - Invalid Store Number<br />\r\n            2051 - System Parameter|Not Found, 0 <br />\r\n            2052 - Error (retrieving data from POS)<br />\r\n            2053 - Exception thrown(POS threw an exception)<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Store/GetWarehouseName" : {
      "post" : {
        "tags" : [ "Store" ],
        "summary" : "Given a Warehouse number, returns the store object",
        "description" : "Sample request:\r\n\r\n    POST simapi/Store/GetWarehouseName\r\n    {\r\n      \t\"StoreNumber\":\"8888\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossStoreStoreNumber"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Return Warehouse object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RossStore"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1005 - E_INVALID_STORE_NBR| Invalid Store Number<br />\r\n            2052 - Error|retrieving data|from POS<br />\r\n            2053 - Exception thrown|in POS interface <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Store/GetStoreNameAddrCheck" : {
      "post" : {
        "tags" : [ "Store" ],
        "summary" : "Given a store number, returns the store name and a flag indicating whether the number is valid. Checks Address3 field to determine validity",
        "description" : "Sample request:\r\n\r\n    POST simapi/Store/GetStoreNameAddrCheck\r\n    {\r\n      \t\"StoreNumber\":\"8888\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossStoreStoreNumber"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns the store name and a flag indicating whether the number is valid. Checks Address3 field to determine validity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RossStore"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n             1029 - THE STORE NUMBER|ENTERED IS NOT A|VALID STORE FOR THIS|TRANSFER.\r\n             2053 - Exception thrown|in POS interface<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/GetCartons" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "Retrieves the list of Cartons",
        "description" : "Sample request:\r\n\r\n    POST simapi/Transfer/GetCartons",
        "responses" : {
          "200" : {
            "description" : "Return Document number and Carton number",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RossTransfer"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2003 - SQL Prepare error<br />\r\n            2012 - Error calling SQLGetData<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/GetDocIdInfo" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "Gets the document information pertaining to the carton id given",
        "description" : "Sample request:\r\n\r\n    POST simapi/Transfer/GetDocIdInfo\r\n    {\r\n       \"CartonNumber\" :\"1234567890123456\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferCartonNumber"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Return Document info according the carton number",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RossTransferDocumentNumber"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1502 - No handler found<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/GetDocDate" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "Retrieves the start date for the FJDamages document number given",
        "description" : "Sample request:\r\n\r\n    POST simapi/Transfer/GetDocDate\r\n    {\r\n       \"DocId\" :2\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferDocumentNumber"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Return Document Start Date",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDocDateOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2012 - Error calling SQLGetData<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/ChangeQty" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "Change Qty -As described by its name",
        "description" : "Sample request:\r\n   POST simapi/Transfer/ChangeQty\r\n   {\r\n          \"DocId\":2,\r\n          \"CartonNumber\":\"1234567890123456\",\r\n          \"item\":\"4\",\r\n          \"Qty\":4\r\n   }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferChangeQty"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "void"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/ChangeDocStatus" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "Change Doc Status -As described by its name",
        "description" : "Sample request:\r\n            \r\n   POST simapi/Transfer/ChangeDocStatus\r\n   {\r\n          \"DocId\": 2\r\n   }",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferDocumentNumber"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "void"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />\r\n            100 - No data in database",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/GetDate" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "XFRGetXferDate -As described by its name",
        "description" : "Sample request:\r\n            \r\n   POST simapi/Transfer/GetDate\r\n   {\r\n          \"DocId\": 2\r\n   }",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferDocumentNumber"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return List Of Date time as string",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />\r\n            100 - No data in database",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/GetListOfCartons" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "XFRGetListOfCartons-As described by its name",
        "description" : "Sample request:\r\n            \r\n   POST simapi/Transfer/GetListOfCartons\r\n   {\r\n          \"StoreId\": 221\r\n   }",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferStore"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return List Of Carton",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />\r\n            100 - No data in database",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/StartCarton" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "XFRStartCarton-As described by its name",
        "description" : "Sample request:\r\n            \r\n   POST simapi/Transfer/StartCarton\r\n   {\r\n          \"ToStore\":2,\r\n          \"FromStore\":3,\r\n          \"DocId\":657\r\n   }",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferStartCarton"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return Carton Id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RossTransferStartCartonOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />\r\n            100  - No data in database<br />\r\n            1502 -No handler found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/GetIncompleteTransfers" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "XFRGetIncompleteTransfers-As described by its name",
        "description" : "Sample request:\r\n            \r\n   POST simapi/Transfer/GetIncompleteTransfers",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RossTransferIncompleteTransfersOut"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />\r\n            100  - No data in database<br />\r\n            1502 -No handler found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/StartTransfer" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "StartTransfer-As described by its name",
        "description" : "Sample request:\r\n            \r\n   POST simapi/Transfer/StartTransfer\r\n   {\r\n          \"ToStore\": 343\r\n          \"DocId: 138\r\n          \r\n   }",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "associateNo",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferStartTransfer"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "return the id of the transfer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RossTransferDocumentNumber"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />\r\n            100  - No data in database<br />\r\n            1502 -No handler found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/ProcessSKU" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "XFRProcessSKU-As described by its name",
        "description" : "Sample request:\r\n            \r\n   POST simapi/Transfer/ProcessSKU\r\n   {\r\n          \"DocId\":2,\r\n          \"CartonNumber\":\"1234567890123456\",\r\n          \"Item\":\"0\",\r\n          \"Desc\":\"Desc\",\r\n          \"Qty\":3\r\n          \r\n   }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferProcessSKU"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />\r\n            100  - No data in database<br />\r\n            1502 -No handler found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/ValidateSKUToDelete" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "ValidateSKUToDelete-As described by its name",
        "description" : "Sample request:\r\n            \r\n   POST simapi/Transfer/ValidateSKUToDelete\r\n   {\r\n         \"DbRecCode\":XX888212\r\n         \"CartonNumber\":\"1234567890123456\"\r\n         \"Sku\":400022123212\r\n          \r\n   }",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferValidateSKUToDelete"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "List of valid SKU to delete",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />\r\n            100  - No data in database<br />\r\n            1502 -No handler found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/CloseCarton" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "close carton",
        "description" : "Sample request:\r\n            \r\n   POST simapi/Transfer/CloseCarton\r\n   {\r\n         \"DocId\":606\r\n         \"CartonNumber\":\"40003\"\r\n         \r\n          \r\n   }",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferIncompleteTransfersOut"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloseCartonOut"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />\r\n            100  - No data in database<br />\r\n            1502 -No handler found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Transfer/CloseTransfer" : {
      "post" : {
        "tags" : [ "Transfer" ],
        "summary" : "close Transfer",
        "description" : "Sample request:\r\n            \r\n   POST simapi/Transfer/CloseTransfer\r\n   {\r\n         \"DocId\":606\r\n  }",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossTransferDocumentNumber"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter<br />\r\n            100  - No data in database<br />\r\n            1502 -No handler found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/GetUserMessage" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Public method to retrieve the specified message text from the RFMessages table.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/GetUserMessage\r\n    {\r\n        \"MessageId\" : 2650\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserMessageMessageId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Message text string and Is screen timed display (true) or not (false)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserMessage"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n                2006 - SQLBindParameter error<br />\r\n                2004 - DB Execute failed<br />\r\n                2650 - Message not found<br />\r\n                2652 - Invalid Language\r\n                2012 - Error calling SQLGetData <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/GetDefaultLanguage" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Get Default Language (from token).",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/GetDefaultLanguage",
        "responses" : {
          "200" : {
            "description" : "Default store language, return as string",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2501 - System Parameter<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/GetLanguagePreference" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Get  User Language Preference.(from token)",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/GetLanguagePreference",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/GetSystemParameters" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Get  System Parameters.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/GetSystemParameters\r\n    [\r\n        \"DefaultLanguage\",\r\n        \"Printer\"\r\n    ]",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "List of System Parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2501 - System Parameter<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/GetLoginDate" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Get Login Date.",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/GetLoginDate",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1501 - Memory allocation failed<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/SetApplication" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Sets the application field in the sessions table",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/SetApplication\r\n    {\r\n        \"ApplicationInterfaceName\" : \"Application Name\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossUtilsSetApplication"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />\r\n            2004 - DB Fetch failed<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/SelectNetworkPrinter" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Process the selection of a network printer for",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/SelectNetworkPrinter\r\n    {\r\n        \"PrintSerialNumber\" : \"Serial Number\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossUtilsPrintSerialNumber"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1002 - Invalid Login<br />\r\n            3001 - PRINT REQUEST FAILED<br />\r\n            3003 - POWER PRINTER ON NOW<br />\r\n            3008 - PLEASE BE SURE PRINTER IS TURNED ON<br />\r\n            3010 - INVALID PRINTER SERIAL NUMBER<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/PrintLabel" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Print a label of the specified type",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/PrintLabel\r\n    {\r\n        \"labelType\": \"Markdown\",\r\n        \"labelCount\": \"1\",\r\n        \"parameters\": [\r\n        \"88888888888\",\r\n        \"888888888888888888\",\r\n        \"$8.88\",\r\n        \" \",\r\n        \" \",\r\n        \" \",\r\n        \" \"\r\n        ]\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossUtilsPrintLabel"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1002 - Invalid Login<br />\r\n            1018 - Input Missing<br />\r\n            3003 - POWER PRINTER ON NOW<br />\r\n            3001 - PRINT REQUEST FAILED<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/PrintLabelByType" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Combine calls to ITMAddSkuLog, UTLPrintLabel and ITMUpdateSkuLogStatus into one WebAPI call when the user chooses to print additional labels.\r\nThe API support LabelType:Markdown, PriceAdj, Recall, MgrMarkdown, RtktPriceAdj, RtktNoAction and RtktMarkdown\r\nNotes:\r\n    MarkdownDocId: Applicable for label types: Markdown, MgrMarkdown and PriceAdj\r\n    UpdateSkuLog: Applicable for label types: RtktPriceAdj, RtktNoAction and RtktMarkdown\r\n    ScanType: Should hold MarkdownType for labels: Markdown, MgrMarkdown and PriceAdj\r\n    SkuType: Applicable for label types: Markdown, MgrMarkdown and PriceAdj",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/PrintLabelByType\r\n    {\r\n        \"LabelType\": \"PriceAdj\",\r\n        \"PrintCopies\": 1,\r\n        \"Sku\": \"400000322247\",\r\n        \"Description\": \"14KT LEMON QRZ\",\r\n        \"DivisionNumber\": \"1111\",\r\n        \"DepartmentNumber\": \"1111\",\r\n        \"MarkdownDocId\": 123,\r\n        \"SkuType\": 1,\r\n        \"SubDivision\" : \"23\"\r\n        \"ClassNumber\": \"1234\",\r\n        \"PriceForDisplay\": \"$36.21\",\r\n        \"PriceBarcode\": \"4000003222473621\",\r\n        \"OldPrice\": \"36.21\",\r\n        \"NewPrice\": \"36.21\",\r\n        \"OriginPrice\": \"36.21\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PrintLabelObject"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns request id, with ProcessMarkdownItemAndPrintLabelRes data structure",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrintLabelObject"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            1501 - Memory allocation failed <br />\r\n            2004 - DB Execute failed<br />\r\n            2006 - SQLBindParameter|or BindCol error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/PrintReport" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Print a report of the specified type",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/PrintReport\r\n    {\r\n        \"ReportType\":\"Adv\",\r\n        \"DocId\":2,\r\n        \"Carton\":\"Bag\",\r\n        \"Sku\":\"\",\r\n        \"Approval\":1,\r\n        \"DmApproval\":false,\r\n        \"DocStart\":\"11/17/2019\",\r\n        \"DocEnd\":\"12/17/2019\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossUtilsPrintReport"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2501 - Could not link to|POS interface <br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/CheckPCImportFile" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Check if file exists and contains the start of week date",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/CheckPcImportFile\r\n    {\r\n        \"DayOfWeek\":\"Monday\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossUtilsCheckPCImportFile"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "True: if return value is success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            no error return",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/DownloadPrinterConfig" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Download the Printer Config",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/DownloadPrinterConfig\r\n    {\r\n        \"PrinterVendor\":\"Printer Vendor\"\r\n    }",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RossUtilsDownloadPrinterConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            2501 - System Parameter<br />\r\n            3003 - POWER PRINTER<br />\r\n            3002 - ERROR, PLEASE<br />\r\n            3001 - PRINT REQUEST FAILED<br />\r\n            -1   - General error<br />",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/GetStartDate" : {
      "post" : {
        "tags" : [ "Utils" ],
        "summary" : "Get the start date of the week",
        "description" : "Sample request:\r\n\r\n    POST simapi/Utils/GetStartDate",
        "responses" : {
          "200" : {
            "description" : "GetStartDateRes - which contains start day of the week in StartDate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetStartDateRes"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error<br />\r\n            POC/RF Error IDs:<br />\r\n            no error return",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/simapi/Utils/GetDiscountPrice" : {
      "post" : {
        "tags" : [ "Utils" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "number",
                  "format" : "double"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "405" : {
            "description" : "Method Not Allowed"
          },
          "500" : {
            "description" : "Unexpected Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          },
          "530" : {
            "description" : "Unexpected ROSS POC and RfCOM Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "StartCycleCountIn" : {
        "type" : "object",
        "properties" : {
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "StartCycleCountOut" : {
        "type" : "object",
        "properties" : {
          "bRecCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "ServerError" : {
        "type" : "object",
        "properties" : {
          "RequestId" : {
            "type" : "string",
            "description" : "Unique identifier to represent request in trace log."
          },
          "ErrorId" : {
            "type" : "integer",
            "description" : "Server error id or POC error id."
          },
          "Error" : {
            "type" : "string",
            "description" : "Error message."
          },
          "UserMessage" : {
            "type" : "string",
            "description" : "User error message."
          },
          "Acknowledge" : {
            "type" : "string",
            "description" : "Acknowledge need to add description."
          }
        }
      },
      "ProcessBegEndFixNoIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "begFixtureNo" : {
            "type" : "string"
          },
          "endFixtureNo" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DbRecCodeOut" : {
        "type" : "object",
        "properties" : {
          "dbRecCode" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "ProcessItemIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tagNo" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "symbology" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "ProcessItemOut" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DeleteRestartIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tagNo" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "CloseStockIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "AcceptNotFoundItemIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tagNo" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "symbology" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "GetStockNoOut" : {
        "type" : "object",
        "properties" : {
          "dbRecCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "GetDelFixtureInfoIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tagNo" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "GetDelFixtureInfoOut" : {
        "type" : "object",
        "properties" : {
          "dbRecCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "auditCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "scanCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "ProcessFixAuditCountIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tagNo" : {
            "type" : "string"
          },
          "auditCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "CheckFixtureTagNoIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "begTagNo" : {
            "type" : "string"
          },
          "tagCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "ExistsStockNoOut" : {
        "type" : "object",
        "properties" : {
          "dbRecCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "FinishScanSkuIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stockNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tagNo" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "GetIncompleteScansRes" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "string"
          },
          "cartonNum" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "StartDisposalIn" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "destinationId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "StartDisposalRes" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvProcessSkuIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "department" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetDocDateIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetDocDateRes" : {
        "type" : "object",
        "properties" : {
          "startDate" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvDeleteSKUIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "department" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvCloseCartonIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvCloseCartonRes" : {
        "type" : "object",
        "properties" : {
          "print" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvCloseDocIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvStartCartonIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fromStore" : {
            "type" : "string"
          },
          "toStore" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvStartCartonRes" : {
        "type" : "object",
        "properties" : {
          "cartonNum" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetDocIdInfoIn" : {
        "type" : "object",
        "properties" : {
          "cartonNum" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetDocIdInfoRes" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvChangeDocStatusIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "iApp" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvValidateCartonIn" : {
        "type" : "object",
        "properties" : {
          "cartonNum" : {
            "type" : "string"
          },
          "department" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvValidateCartonRes" : {
        "type" : "object",
        "properties" : {
          "isValid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "GetDestinationInfoIn" : {
        "type" : "object",
        "properties" : {
          "destinationCode" : {
            "type" : "string"
          },
          "langId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "GetDestinationInfoRes" : {
        "type" : "object",
        "properties" : {
          "destinationDesc" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetItemQtyIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "department" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetItemQtyRes" : {
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "OpenForXferIn" : {
        "type" : "object",
        "properties" : {
          "associateId" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "cartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "OpenForXferRes" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvProcessXfrSKUIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "skuDescription" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetXfrItemQtyIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetXfrItemQtyRes" : {
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvDeleteXfrSKUIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "GetTotalApprovedQtyIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "GetTotalApprovedQtyRes" : {
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "ValidateDestinationIn" : {
        "type" : "object",
        "properties" : {
          "destinationId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "ValidateDestinationRes" : {
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "GetValidCartonInfoRes" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonNum" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetCartonsIn" : {
        "type" : "object",
        "properties" : {
          "department" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetCartonsRes" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonNum" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetValidDocInfoRes" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvValidateDeptIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "department" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvValidateDeptRes" : {
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetDeptInfoIn" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetDeptInfoRes" : {
        "type" : "object",
        "properties" : {
          "department" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetDocNumRes" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetApprovedDeptQtyIn" : {
        "type" : "object",
        "properties" : {
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "department" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RtvGetApprovedDeptQtyRes" : {
        "type" : "object",
        "properties" : {
          "qty" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvValidateItemIn" : {
        "type" : "object",
        "properties" : {
          "itemNum" : {
            "type" : "string"
          },
          "department" : {
            "type" : "string"
          },
          "documentNum" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RtvValidateItemRes" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "valid" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "FjRtvUpdateTrackingNoIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "trackingNum" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "FjRtvUpdateTrackingNoOut" : {
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "FjRtvReopenCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "FjRtvReopenDocIn" : {
        "type" : "object",
        "properties" : {
          "documentId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "FjrtvGetReprintCartonsOut" : {
        "type" : "object",
        "properties" : {
          "documentNumber" : {
            "type" : "string"
          },
          "cartonNumber" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "FjRtvValidateDeptApprovalIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "deptId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "FjRtvValidateDeptApprovalOut" : {
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "FjRtvGetDeptCodeIn" : {
        "type" : "object",
        "properties" : {
          "cartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "FjRtvGetDeptCodeOut" : {
        "type" : "object",
        "properties" : {
          "deptCode" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "FjValidateSkuDeptIn" : {
        "type" : "object",
        "properties" : {
          "deptId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "FjValidateSkuDeptOut" : {
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspGetDefaultDestinationIn" : {
        "type" : "object",
        "properties" : {
          "languageId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DspGetDefaultDestinationOut" : {
        "type" : "object",
        "properties" : {
          "destinationCode" : {
            "type" : "string"
          },
          "destinationDescription" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DspSetDestinationIn" : {
        "type" : "object",
        "properties" : {
          "destinationCode" : {
            "type" : "string"
          },
          "languageId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DspDestinationOut" : {
        "type" : "object",
        "properties" : {
          "destinationDescription" : {
            "type" : "string"
          },
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "inventory" : {
            "type" : "boolean"
          },
          "destinationCode" : {
            "type" : "string"
          },
          "nextBagNumber" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspStartDisposalBagIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "destinationCode" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DspStartDisposalBagOut" : {
        "type" : "object",
        "properties" : {
          "bagNumber" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspProcessItemIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bagNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "symbology" : {
            "type" : "string"
          },
          "destinationCode" : {
            "type" : "string"
          },
          "singleSkuType" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DspProcessItemOut" : {
        "type" : "object",
        "properties" : {
          "isFineJewelyItem" : {
            "type" : "boolean"
          },
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "oldSkuQuantity" : {
            "type" : "string"
          },
          "processId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "singleSku" : {
            "type" : "string"
          },
          "departmentNumber" : {
            "type" : "string"
          },
          "priceBarcode" : {
            "type" : "string"
          },
          "priceForDisplay" : {
            "type" : "string"
          },
          "divisionNumber" : {
            "type" : "string"
          },
          "classNumber" : {
            "type" : "string"
          },
          "originPrice" : {
            "type" : "string"
          },
          "newPrice" : {
            "type" : "string"
          },
          "oldPrice" : {
            "type" : "string"
          },
          "printCopies" : {
            "type" : "integer",
            "format" : "int32"
          },
          "printStatus" : {
            "enum" : [ "None", "Printed", "Failed" ],
            "type" : "string"
          },
          "isHazardousWaste" : {
            "type" : "boolean"
          },
          "hazardousWasteBinColor" : {
            "type" : "string"
          },
          "hazardousWasteCodeName" : {
            "type" : "string"
          },
          "totalNumberItemsInBag" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspAddItemIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bagNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "TotalNumberItemsInBag" : {
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "totalNumberItemsInBags" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspChangeItemQuantityIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bagNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "displayedQuantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "changeQuantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "deleteIndicator" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "DspFinishDestinationIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspFinishBag" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bagNumber" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspPrintReportIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bagNumber" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspVerifyItemInBagIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bagNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "symbology" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DspVerifyItemInBagOut" : {
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "totalNumberItemsInBag" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspGetDestinationsOut" : {
        "type" : "object",
        "properties" : {
          "destinationSequence" : {
            "type" : "string"
          },
          "destinationCode" : {
            "type" : "string"
          },
          "destinationDescription" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DspTicketIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "labelCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspGetClassDescIn" : {
        "type" : "object",
        "properties" : {
          "deptId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "processId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspGetClassDescOut" : {
        "type" : "object",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "classDescription" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DspGetSingleSkuIn" : {
        "type" : "object",
        "properties" : {
          "deptId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "processId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "DspGetSingleSkuOut" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DspStartDestinationOut" : {
        "type" : "object",
        "properties" : {
          "destinationCode" : {
            "type" : "string"
          },
          "destinationDescription" : {
            "type" : "string"
          },
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bagNumber" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "PrintLabelObject" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          },
          "priceBarcode" : {
            "type" : "string"
          },
          "priceForDisplay" : {
            "type" : "string"
          },
          "divisionNumber" : {
            "type" : "string"
          },
          "departmentNumber" : {
            "type" : "string"
          },
          "classNumber" : {
            "type" : "string"
          },
          "originPrice" : {
            "type" : "string"
          },
          "newPrice" : {
            "type" : "string"
          },
          "oldPrice" : {
            "type" : "string"
          },
          "labelType" : {
            "type" : "string"
          },
          "printCopies" : {
            "type" : "integer",
            "format" : "int32"
          },
          "scanType" : {
            "type" : "string"
          },
          "skuType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "markdownDocId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "subDivision" : {
            "type" : "string"
          },
          "printStatus" : {
            "enum" : [ "None", "Printed", "Failed" ],
            "type" : "string"
          },
          "updateSkuLog" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "DspPrintGetSingleSkuIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "deptId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "labelCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "processId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "GetDisposalApprovalIn" : {
        "type" : "object",
        "properties" : {
          "isDm" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "DisposalApprovalDisplayInfo" : {
        "type" : "object",
        "properties" : {
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "docId" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "bagNumber" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "AddDisposalApprovalIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bagNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "mgrId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "qty" : {
            "type" : "integer",
            "format" : "int32"
          },
          "isDm" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "DeleteDisposalApprovalIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bagNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "GetDisposalApprovalReportIn" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          },
          "approval" : {
            "type" : "boolean"
          },
          "dmApproval" : {
            "type" : "boolean"
          },
          "docStart" : {
            "type" : "string",
            "format" : "date-time"
          },
          "docEnd" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false
      },
      "DisposalApprovalReportInfo" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string"
          },
          "endDate" : {
            "type" : "string"
          },
          "destinationDescription" : {
            "type" : "string"
          },
          "bagNumber" : {
            "type" : "string"
          },
          "mgrApprovalId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mgrApprovalDate" : {
            "type" : "string"
          },
          "dmApprovalId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dmApprovalDate" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "qty" : {
            "type" : "integer",
            "format" : "int32"
          },
          "itemDescription" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "ScanItem" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          },
          "symbology" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RossItem" : {
        "type" : "object",
        "properties" : {
          "barcode" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "divisionNumber" : {
            "type" : "string"
          },
          "departmentNumber" : {
            "type" : "string"
          },
          "productCode" : {
            "type" : "string"
          },
          "currentPrice" : {
            "type" : "string"
          },
          "skuType" : {
            "enum" : [ "MdCurr", "MdPrev", "MdPrevNotPrint", "PaCurr", "PaPrev", "PaPrevNotPrint", "MgrMd", "NoAction", "NotFound", "Unknown" ],
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "GetMarkdownInfoIn" : {
        "type" : "object",
        "properties" : {
          "itemIdentifier" : {
            "type" : "string"
          },
          "symbology" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "MarkdownInfo" : {
        "type" : "object",
        "properties" : {
          "itemStatus" : {
            "enum" : [ "Ok", "ItemInvalid", "ItemNotFound" ],
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "oldPriceForDisplay" : {
            "type" : "string"
          },
          "newPriceForDisplay" : {
            "type" : "string"
          },
          "originPriceForDisplay" : {
            "type" : "string"
          },
          "newPrice" : {
            "type" : "string"
          },
          "oldPrice" : {
            "type" : "string"
          },
          "originPrice" : {
            "type" : "string"
          },
          "skuType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "divisionName" : {
            "type" : "string"
          },
          "divisionNumber" : {
            "type" : "string"
          },
          "departmentNumber" : {
            "type" : "string"
          },
          "classNumber" : {
            "type" : "string"
          },
          "isRecall" : {
            "type" : "boolean"
          },
          "subDivision" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "AddSkuLogIn" : {
        "type" : "object",
        "properties" : {
          "scanType" : {
            "type" : "string"
          },
          "scanStatus" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "printCopies" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "UpdateSkuLogStatusIn" : {
        "type" : "object",
        "properties" : {
          "scanStatus" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "MarkdownStartIn" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "MarkdownStartMkdDocOut" : {
        "type" : "object",
        "properties" : {
          "markdownDocId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "MarkdownCloseIn" : {
        "type" : "object",
        "properties" : {
          "markdownDocId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "MarkdownAddMkuIn" : {
        "type" : "object",
        "properties" : {
          "markdownDocId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "skuType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "price" : {
            "type" : "string"
          },
          "originalPrice" : {
            "type" : "string"
          },
          "subDivision" : {
            "type" : "string"
          },
          "prtFlag" : {
            "type" : "string"
          },
          "printCopies" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "MarkdownGetMkdnsStatusIn" : {
        "type" : "object",
        "properties" : {
          "weekStartDate" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "MarkdownGetMkdnsStatusOut" : {
        "type" : "object",
        "properties" : {
          "loaded" : {
            "type" : "string"
          },
          "available" : {
            "type" : "string"
          },
          "effectiveDate" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "MarkdownScanItem" : {
        "type" : "object",
        "properties" : {
          "markdownDocId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "symbology" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "MgrMarkdown" : {
        "type" : "object",
        "properties" : {
          "tenPercentOffPrice" : {
            "type" : "string"
          },
          "tenPercentOffPriceBarcode" : {
            "type" : "string"
          },
          "tenPercentOffPriceForDisplay" : {
            "type" : "string"
          },
          "thirtyPercentOffPrice" : {
            "type" : "string"
          },
          "thirtyPercentOffPriceBarcode" : {
            "type" : "string"
          },
          "thirtyPercentOffPriceForDisplay" : {
            "type" : "string"
          },
          "fiftyPercentOffPrice" : {
            "type" : "string"
          },
          "fiftyPercentOffPriceBarcode" : {
            "type" : "string"
          },
          "fiftyPercentOffPriceForDisplay" : {
            "type" : "string"
          },
          "printCopies" : {
            "type" : "integer",
            "format" : "int32"
          },
          "printStatus" : {
            "enum" : [ "None", "Printed", "Failed" ],
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "oldPriceBarcode" : {
            "type" : "string"
          },
          "newPriceBarcode" : {
            "type" : "string"
          },
          "originPriceBarcode" : {
            "type" : "string"
          },
          "oldPrice" : {
            "type" : "string"
          },
          "newPrice" : {
            "type" : "string"
          },
          "originPrice" : {
            "type" : "string"
          },
          "skuType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "subDivision" : {
            "type" : "string"
          },
          "divisionNumber" : {
            "type" : "string"
          },
          "divisionName" : {
            "type" : "string"
          },
          "departmentNumber" : {
            "type" : "string"
          },
          "classNumber" : {
            "type" : "string"
          },
          "newPriceForDisplay" : {
            "type" : "string"
          },
          "oldPriceForDisplay" : {
            "type" : "string"
          },
          "originPriceForDisplay" : {
            "type" : "string"
          },
          "markdownDocId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "markdownType" : {
            "type" : "string"
          },
          "isRecall" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "MarkdownItemAndPrintLabel" : {
        "type" : "object",
        "properties" : {
          "printCopies" : {
            "type" : "integer",
            "format" : "int32"
          },
          "printStatus" : {
            "enum" : [ "None", "Printed", "Failed" ],
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "oldPriceBarcode" : {
            "type" : "string"
          },
          "newPriceBarcode" : {
            "type" : "string"
          },
          "originPriceBarcode" : {
            "type" : "string"
          },
          "oldPrice" : {
            "type" : "string"
          },
          "newPrice" : {
            "type" : "string"
          },
          "originPrice" : {
            "type" : "string"
          },
          "skuType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "subDivision" : {
            "type" : "string"
          },
          "divisionNumber" : {
            "type" : "string"
          },
          "divisionName" : {
            "type" : "string"
          },
          "departmentNumber" : {
            "type" : "string"
          },
          "classNumber" : {
            "type" : "string"
          },
          "newPriceForDisplay" : {
            "type" : "string"
          },
          "oldPriceForDisplay" : {
            "type" : "string"
          },
          "originPriceForDisplay" : {
            "type" : "string"
          },
          "markdownDocId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "markdownType" : {
            "type" : "string"
          },
          "isRecall" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "MarkdownItem" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "oldPriceBarcode" : {
            "type" : "string"
          },
          "newPriceBarcode" : {
            "type" : "string"
          },
          "originPriceBarcode" : {
            "type" : "string"
          },
          "oldPrice" : {
            "type" : "string"
          },
          "newPrice" : {
            "type" : "string"
          },
          "originPrice" : {
            "type" : "string"
          },
          "skuType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "subDivision" : {
            "type" : "string"
          },
          "divisionNumber" : {
            "type" : "string"
          },
          "divisionName" : {
            "type" : "string"
          },
          "departmentNumber" : {
            "type" : "string"
          },
          "classNumber" : {
            "type" : "string"
          },
          "newPriceForDisplay" : {
            "type" : "string"
          },
          "oldPriceForDisplay" : {
            "type" : "string"
          },
          "originPriceForDisplay" : {
            "type" : "string"
          },
          "markdownDocId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "markdownType" : {
            "type" : "string"
          },
          "isRecall" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "PrintMarkdownLabel" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          },
          "markdownDocId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "skuType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "markdownType" : {
            "type" : "string"
          },
          "divisionNumber" : {
            "type" : "string"
          },
          "departmentNumber" : {
            "type" : "string"
          },
          "subDivision" : {
            "type" : "string"
          },
          "classNumber" : {
            "type" : "string"
          },
          "originPrice" : {
            "type" : "string"
          },
          "newPrice" : {
            "type" : "string"
          },
          "oldPrice" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "priceBarcode" : {
            "type" : "string"
          },
          "priceForDisplay" : {
            "type" : "string"
          },
          "printStatus" : {
            "enum" : [ "None", "Printed", "Failed" ],
            "type" : "string"
          },
          "labelType" : {
            "type" : "string"
          },
          "printCopies" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RossPlu" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "PluGetSinglesAreasOut" : {
        "type" : "object",
        "properties" : {
          "categoryNo" : {
            "type" : "string"
          },
          "areaName" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "PluGetSinglesDescIn" : {
        "type" : "object",
        "properties" : {
          "categoryNo" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "PluGetSinglesDescOut" : {
        "type" : "object",
        "properties" : {
          "itemDesc" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecStartRecallsIn" : {
        "type" : "object",
        "properties" : {
          "toStore" : {
            "type" : "integer",
            "format" : "int32"
          },
          "destId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RecProcessSkuIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "qty" : {
            "type" : "integer",
            "format" : "int32"
          },
          "desc" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecDeleteSkuIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "qty" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonQty" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RecValidateSkuToDeleteIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecValidateSkuToDeleteOut" : {
        "type" : "object",
        "properties" : {
          "fetchedData" : {
            "type" : "string"
          },
          "getData" : {
            "type" : "string"
          },
          "dateTime" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecCloseCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RecCloseCartonOut" : {
        "type" : "object",
        "properties" : {
          "print" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecCloseRecalls" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RecStartCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fromStore" : {
            "type" : "string"
          },
          "toStore" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecStartCartonOut" : {
        "type" : "object",
        "properties" : {
          "cartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecGetListOfCartonsIn" : {
        "type" : "object",
        "properties" : {
          "toStore" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RecGetListOfCartonsOut" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string"
          },
          "cartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecGetXferDateIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RecGetXferDateOut" : {
        "type" : "object",
        "properties" : {
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false
      },
      "RecChangeQtyIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "qty" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RecGetDefaultDestinationIn" : {
        "type" : "object",
        "properties" : {
          "languageId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecGetDefaultDestinationOut" : {
        "type" : "object",
        "properties" : {
          "defaultDestinationCode" : {
            "type" : "string"
          },
          "defaultDestinationDescription" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecGetDestinationIn" : {
        "type" : "object",
        "properties" : {
          "disposalDestinationCode" : {
            "type" : "string"
          },
          "languageId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecGetDestinationOut" : {
        "type" : "object",
        "properties" : {
          "destinationDescription" : {
            "type" : "string"
          },
          "disposalDestinationCode" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RecGetCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "qty" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RecGetCartonOut" : {
        "type" : "object",
        "properties" : {
          "totalQuantityInCarton" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "GetDestinationsResult" : {
        "type" : "object",
        "properties" : {
          "destinationSeq" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "destinationId" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "destDesc" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false
      },
      "RcvBeginReceivingIn" : {
        "type" : "object",
        "properties" : {
          "changeStatus" : {
            "type" : "integer",
            "format" : "int32"
          },
          "oldDocId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvBeginReceivingOut" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "manifestCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "actualCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "nextScreen" : {
            "type" : "integer",
            "format" : "int32"
          },
          "date" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvSetManifestCountIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "manifestCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvReceiveCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "partialLabel" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvReceiveCartonOut" : {
        "type" : "object",
        "properties" : {
          "coMingledCarton" : {
            "type" : "integer",
            "format" : "int32"
          },
          "actualCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "integer",
            "format" : "int32"
          },
          "duplicateCarton" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "RcvAddMisdirectedCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "duplicate" : {
            "type" : "boolean"
          },
          "partialLabel" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvAddMisdirectedCartonOut" : {
        "type" : "object",
        "properties" : {
          "actualCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvAddDuplicateCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "partialLabel" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvAddDuplicateCartonOut" : {
        "type" : "object",
        "properties" : {
          "actualCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvDocId" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvExitCartonReceivingOut" : {
        "type" : "object",
        "properties" : {
          "flag" : {
            "type" : "integer",
            "format" : "int32"
          },
          "printFlag" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvGetTransferInCartonsOut" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sequenceNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "originalCartonId" : {
            "type" : "string"
          },
          "formatOriginalCartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvProcessItemIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sequenceNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "symbology" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvProcessItemOut" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvChangeItemQuantityIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sequenceNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          },
          "oldQuantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "newQuantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "delete" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvChangeItemQuantityOut" : {
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvDeleteCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sequenceNo" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvAcceptNotFoundItemIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sequenceNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvAcceptNotFoundItemOut" : {
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvCheckCartonForDeleteIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sequenceNo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "checkSecurity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvUpdateSealStatus" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sealStatus" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvProcessSeal" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seal" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvValidateSealIn" : {
        "type" : "object",
        "properties" : {
          "seal" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvValidateSealOut" : {
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvNeedOutboundSealOut" : {
        "type" : "object",
        "properties" : {
          "needSeal" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvScanFjCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tempLabelOrCartonId" : {
            "type" : "string"
          },
          "partialLabel" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvScanFjCartonOut" : {
        "type" : "object",
        "properties" : {
          "coMingledCarton" : {
            "type" : "integer",
            "format" : "int32"
          },
          "isMisdirected" : {
            "type" : "boolean"
          },
          "isRescan" : {
            "type" : "boolean"
          },
          "cartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvSetFjManifestNumberIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "manifestNo" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvProcessFjItemIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "symbology" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvProcessFjItemOut" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvDeleteFjCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "deleteAll" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvFjCarton" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvGetFjTransferInCartonsOut" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "formatedOriginalCartonId" : {
            "type" : "string"
          },
          "originalCartonId" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvAddDummySkuIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RcvTimeoutCartonIn" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "string"
          },
          "sequenceNo" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvReturnCartonIn" : {
        "type" : "object",
        "properties" : {
          "cartonId" : {
            "type" : "string"
          },
          "partialLabel" : {
            "type" : "integer",
            "format" : "int32"
          },
          "fjFlag" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvBeginFjHighSecIn" : {
        "type" : "object",
        "properties" : {
          "changeStatus" : {
            "type" : "integer",
            "format" : "int32"
          },
          "oldDocId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RcvBeginFjHighSecOut" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "manifestCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "actualCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "nextScreen" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "ExitFjHighSecOut" : {
        "type" : "object",
        "properties" : {
          "printFlag" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "ReticketItemInfo" : {
        "type" : "object",
        "properties" : {
          "sku" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "newPriceForDisplay" : {
            "type" : "string"
          },
          "markdownType" : {
            "type" : "integer",
            "format" : "int32"
          },
          "newPriceBarcode" : {
            "type" : "string"
          },
          "divisionNumber" : {
            "type" : "string"
          },
          "departmentNumber" : {
            "type" : "string"
          },
          "classNumber" : {
            "type" : "string"
          },
          "isRecall" : {
            "type" : "boolean"
          },
          "newPrice" : {
            "type" : "string"
          },
          "origPrice" : {
            "type" : "string"
          },
          "itemStatus" : {
            "enum" : [ "Ok", "ItemInvalid", "ItemNotFound" ],
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "PrintReticketLabel" : {
        "type" : "object",
        "properties" : {
          "scanType" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "newPrice" : {
            "type" : "string"
          },
          "originPrice" : {
            "type" : "string"
          },
          "classNumber" : {
            "type" : "string"
          },
          "divisionNumber" : {
            "type" : "string"
          },
          "departmentNumber" : {
            "type" : "string"
          },
          "priceBarcode" : {
            "type" : "string"
          },
          "priceForDisplay" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "labelType" : {
            "type" : "string"
          },
          "printCopies" : {
            "type" : "integer",
            "format" : "int32"
          },
          "printStatus" : {
            "enum" : [ "None", "Printed", "Failed" ],
            "type" : "string"
          },
          "updateSkuLog" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "RfComIn" : {
        "type" : "object",
        "properties" : {
          "methodName" : {
            "type" : "string"
          },
          "params" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false
      },
      "RossStoreStoreNumber" : {
        "type" : "object",
        "properties" : {
          "storeNumber" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RossStore" : {
        "type" : "object",
        "properties" : {
          "storeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "storeName" : {
            "type" : "string"
          },
          "valid" : {
            "type" : "boolean"
          },
          "warehouseName" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RossTransfer" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonNumber" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RossTransferCartonNumber" : {
        "type" : "object",
        "properties" : {
          "cartonNumber" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RossTransferDocumentNumber" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "GetDocDateOut" : {
        "type" : "object",
        "properties" : {
          "dateTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false
      },
      "RossTransferChangeQty" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "item" : {
            "type" : "string"
          },
          "qty" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RossTransferStore" : {
        "type" : "object",
        "properties" : {
          "storeId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RossTransferStartCarton" : {
        "type" : "object",
        "properties" : {
          "toStore" : {
            "type" : "string"
          },
          "fromStore" : {
            "type" : "string"
          },
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RossTransferStartCartonOut" : {
        "type" : "object",
        "properties" : {
          "cartonNumber" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RossTransferIncompleteTransfersOut" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonNumber" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RossTransferStartTransfer" : {
        "type" : "object",
        "properties" : {
          "toStore" : {
            "type" : "integer",
            "format" : "int32"
          },
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RossTransferProcessSKU" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonNumber" : {
            "type" : "string"
          },
          "item" : {
            "type" : "string"
          },
          "desc" : {
            "type" : "string"
          },
          "qty" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "RossTransferValidateSKUToDelete" : {
        "type" : "object",
        "properties" : {
          "docId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cartonNumber" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "integer",
            "format" : "int32"
          },
          "qty" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "CloseCartonOut" : {
        "type" : "object",
        "properties" : {
          "iPrint" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "UserMessageMessageId" : {
        "type" : "object",
        "properties" : {
          "messageId" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false
      },
      "UserMessage" : {
        "type" : "object",
        "properties" : {
          "messageId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "acknowledge" : {
            "type" : "boolean"
          },
          "text" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RossUtilsSetApplication" : {
        "type" : "object",
        "properties" : {
          "applicationInterfaceName" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RossUtilsPrintSerialNumber" : {
        "type" : "object",
        "properties" : {
          "printSerialNumber" : {
            "type" : "string"
          },
          "printSetupLabel" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "RossUtilsPrintLabel" : {
        "type" : "object",
        "properties" : {
          "labelType" : {
            "type" : "string"
          },
          "labelCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "parameters" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false
      },
      "RossUtilsPrintReport" : {
        "type" : "object",
        "properties" : {
          "reportType" : {
            "type" : "string"
          },
          "documentId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "carton" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "approval" : {
            "type" : "boolean",
            "nullable" : true
          },
          "dmApproval" : {
            "type" : "boolean",
            "nullable" : true
          },
          "docStart" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "docEnd" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "RossUtilsCheckPCImportFile" : {
        "type" : "object",
        "properties" : {
          "dayOfWeek" : {
            "enum" : [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RossUtilsDownloadPrinterConfig" : {
        "type" : "object",
        "properties" : {
          "printerVendor" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "GetStartDateRes" : {
        "type" : "object",
        "properties" : {
          "startDate" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      }
    },
    "securitySchemes" : {
      "BearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}