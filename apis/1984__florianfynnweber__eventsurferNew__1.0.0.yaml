openapi: 3.0.0
info:
  description: |
    This is our Eventsurfer Api
  version: "1.0.0"
  title: Eventsurfer
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/florianfynnweber/eventsurferNew/1.0.0
tags:
  - name: event
    description: Everything about events
  - name: performance
    description: Everything about performances
  - name: location
    description: Everything about locations
  - name: ticket
    description: Everything about tickets
  - name: organization
    description: Everything about organizations
  - name: user
    description: Everything about users

paths:
  /locations:
    post:
      tags:
      - location
      summary: create a new location
      operationId: addLocation
      parameters: 
      - in: query
        name: location
        description: Location obj that needs to be added to the surfer
        required: true
        schema:
          $ref: '#/components/schemas/Location'
      responses:
        200:
          description: ok
          content:
            applications/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                example:
                  id: 1
                  name: White House
        405:
          description: Invalid input
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
      - location
      description: get all locations
      summary: get all locations as list
      operationId: getAllLocations
      responses:
        200:
          description: ok
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/Locations"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /locations/{id}:
    get:
      tags:
      - location
      summary: get information about event
      parameters: 
      - in: path
        name: id
        required: true
        description: get location with
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
              example:
                id: 1
                name: White house
                city: Berlin
                country: Germany
                street_name: lange stra√üe
                street_number: 291
                zip_code: 28192
                state: Berlin
                state_code: 2323
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - location
      summary: update an exist location
      operationId: update existing location
      parameters:
      - in: path
        name: id
        required: true
        description: Id of an existing location
        schema:
          type: integer
          format: int64
      - in: query
        name: location
        description: Updated location object
        required: true
        schema: 
          $ref: '#/components/schemas/Location'
      responses:
        200: 
          description: ok
        404: 
          description: wasn't found
        400: 
          description: invalid resources
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: 
      - location
      operationId: deleteLocation
      parameters: 
      - in: path
        name: id
        description: Id of location
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: ok
        400:
          description: Invalid location id
        404:
          description: Location wasn't found
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    post:
      tags:
        - user
      summary: Create new user
      responses:
        200:
          description: ok
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      tags:
        - user
      description: get Iinfomartion about user
      parameters:
        - name: id
          in: path
          description: "user id"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: ok
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - user
      description: Update existing user
      parameters:
        - name: id
          in: path
          description: "user id"
          required: true
          schema:
            type: integer
        - name: user
          in: query
          description: User informations
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        200:
          description: ok
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - user
      description: Delete User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: ok
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: the user name for login
        required: true
        schema: 
          type: string
      - name: password
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
            example:
              email: bob@example.net
              password: tolles password
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                    format: email
              example:
                id: 1
                name: Bob
                email: bob@example.net
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/logout:
    delete:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events:
    get:
      tags:
        - event
      description: get all events
      responses:
        200:
          description: ok
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/Events"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - event
      description: create new event
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
            example:
              id: 1
              name: "Happy Event"
              start: "2019-09-12"
              stop: "2019-09-13"
              description: "ffdd"
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{id}:
    get:
      operationId: eventsShow
      tags:
        - event
      description: get detailed information
      parameters:
        - name: id
          in: path
          description: event id
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  start:
                    type: string
                  stop:
                    type: string
                  hoster_name:
                    type: string
                  website:
                    type: string
                  description:
                    type: string
                example:
                  id: 1
                  name: Happy Day
                  start: "2019-11-23"
                  stop: "2019-11-25"
                  description: "a happy event"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - event
      parameters:
        - name: id
          in: path
          description: id of event
          required: true
          schema:
            type: integer
        - name: event
          in: query
          description: update event params
          required: true
          schema:
            $ref: "#/components/schemas/Event"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
            example:
              id: 1
              name: "Happy Event"
              start: "2019-09-12"
              stop: "2019-09-13"
              description: "ffdd"
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - event
      description: Delete event
      parameters:
        - name: id
          in: path
          required: true
          description: id of event
          schema:
            type: integer
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{id}/performances:
    get:
      tags:
        - event
      summary: get all performances back
      description: get all performances
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
          200:
            description: ok
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Performances"
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
          default:
            description: Uneexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /events/{id}/locations:
    get:
      tags:
        - event
      summary: get all locations back
      description: get all locations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
          200:
            description: ok
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Locations"
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
          default:
            description: Uneexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /performances:
    get:
      tags:
        - performance
      summary: Get list of Performances
      description: list of all Performacnes
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - performance
      description: create new performance
      summary: create nw performance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Performance"
            example:
              id: 1
              start: "2019-09-12"
              stop: "2019-09-13"
              stop_selling: "2019-09-12"
              price: 2.45
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /performances/{id}:
    get:
      tags:
        - performance
      description: get detailed Information for performance
      summary: show perforamce with id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Performance"
              example:
                id: 1
                start: "2019-09-12"
                stop: "2019-09-13"
                stop_selling: "2019-09-12"
                price: 2.45
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - performance
      description: update location
      summary: update location
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
        - name: performance
          in: query
          required: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Performance"
            example:
              id: 1
              start: "2019-09-12"
              stop: "2019-09-13"
              stop_selling: "2019-09-12"
              price: 2.45
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - performance
      description: delete performance
      summary: delete performance
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /performances/addTickets:
    post:
      tags:
        - performance
      summary: add tickets to performance
      description: add "size" to existing performance 
      parameters:
        - name: size
          in: query
          schema:
            type: integer
          required: true
      responses:
          200:
            description: ok
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
          default:
            description: Uneexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /performances/removeTickets:
    post:
      tags:
        - performance
      summary: remove tickets from performance
      description: remove "size" from existing performance 
      parameters:
        - name: size
          in: query
          schema:
            type: integer
          required: true
      responses:
          200:
            description: ok
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
          default:
            description: Uneexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /tickets:
    get:
      tags: 
        - ticket
      summary: get all tickets
      description: get all tickets
      responses:
          200:
            description: ok
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Tickets"
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
          default:
            description: Uneexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    post:
      tags: 
        - ticket
      summary: create new ticket
      description: create new ticket
      parameters:
        - name: ticket
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Ticket"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ticket"
      responses:
          200:
            description: ok
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
          default:
            description: Uneexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /tickets/{id}/validate:
    post:
      tags:
        - ticket
      summary: validate ticket
      description: validates a ticket by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tickets/{id}/use:
    post:
      tags:
        - ticket
      summary: use ticket
      description: use a ticket by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tickets/{size}:
    post:
      tags:
        - ticket
      summary: Create list of tickets
      description: Create "size" of tickets for performance
      parameters:
        - name: size
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Number of tickets to add to performance
        - name: performance_id
          in: query
          required: true
          schema:
            type: integer
          description: Id of a existing performance
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tickets/{id}:
    get:
      tags:
        - ticket
      summary: show ticket
      description: get ticket with {id}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of ticket
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - ticket
      description: update a existing ticket
      summary: update ticket
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of ticket
        - name: ticket
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Ticket"
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - ticket
      summary: delete ticket
      description: delete ticket by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: id of ticket
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations:
    get:
      tags:
        - organization
      summary: Get list of all organizations
      description: Get list of all organizations
      responses:
        200:
          description: ok
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/Organizations"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - organization
      summary: create new organization
      description: create new organization
      parameters:
        - name: organization
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Organization"
          description: params
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{id}:
    get:
      tags:
        - organization
      summary: show organization
      description: show organization by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: ok
          content:
            applications/json:
              schema:
                $ref: "#/components/schemas/Organization"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - organization
      description: update organization
      summary: update organization
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
        - name: organization
          in: query
          required: true
          schema:
            type: object
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - organization
      summary: delete organization
      description: delete organization by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{id}/users:
    get:
      tags:
        - organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      summary: list of all users
      description: list of users in organisation
      responses:
        200:
          description: ok
          content:
            applications/json:
              schema: 
                $ref: "#/components/schemas/Users"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - organization
      summary: create users
      description: create users
      parameters:
        - name: id
          in: path
          description: id of organization
          required: true
          schema: 
            type: integer
        - name: users
          in: query
          description: User params in list
          required: true
          schema:
            $ref: "#/components/schemas/Users"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        200:
          description: ok
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Uneexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Locations:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Location'
    Location:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          format: string
        address:
          type: string
          format: string
        city:
          type: string
        country:
          type: string
        street_name:
          type: string
        street_number:
          type: string
        zip_code:
          type: string
        state:
          type: string
        state_code:
          type: string
      required:
        - id
        - name
        - city
        - country
        - street_name
        - street_number
        - zip_code
        - state
        - state_code
    Users:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name: 
          type: string
        admin:
          type: boolean
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        organisation_id:
          type: integer
          format: int64
      required:
        - password
        - email
        - admin
    Events:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Event'
    Event:
      type: object
      properties:
        name:
          type: integer
        start:
          type: string
          format: date-time
        stop:
          type: string
          format: date-time
        hoster_name:
          type: string
        website:
          type: string
          format: website
        hotline:
          type: string
        description:
          type: string
        organisation_id:
          type: integer
          format: int64
      required:
        - name
        - start
        - stop
        - description
        - organisation_id
    Tickets:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Ticket'
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
        validate_id: 
          type: string
        performance_id:
          type: integer
          format: int64
      required:
        - performance_id
        - validate_id
    Performances:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Performance'
    Performance:
      type: object
      properties:
        start:
          type: string
          format: date-time
        stop:
          type: string
          format: date-time
        stop_selling:
          type: string
          format: date-time
        event_id:
          type: integer
          format: int64
        location_id:
          type: integer
          format: int64
        number_of_tickets:
          type: integer
          format: int64
        price:
          type: number
          format: float
      required:
        - event_id
        - location_id
        - start
        - stop
        - number_of_tickets
    Organizations:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Organization'
    Organization:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email: 
          type: string
          format: email
      required:
        - name
        - email
      example:
        id: 1
        name: "Happy Organization"
        email: contact@example.net
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:location': modify locations in your account
            'read:location': read your locations
    api_key:
      type: apiKey
      name: api_key
      in: header
  responses:
      NotFound:
        description: The specified resource was not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      Unauthorized:
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'