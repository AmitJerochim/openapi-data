openapi: 3.0.0
info:
  description: Signiant Jet provides API endpoints to manage and transfer content between systems. 
  
  
    For more information about the API, read the [Getting Started guide](https://developer.signiant.com/jet/getting-started.html).
    
    
    **Note**&#58; The Jet API is currently available for **Early Access**. To learn more, contact your Signiant representative.
  version: "0.25.0"
  title: Jet API Early Access
servers: 
  - url: https://platform-api-service.services.cloud.signiant.com
    description: Signiant Jet API Service
security:
  - passwordGrant: []
    
paths:
  /oauth/token:
    post:
      security: 
        - clientCredentials: []
      tags:
        - Authentication
      summary: Generate OAuth access token
      operationId: createToken
      description: |
        In order to use the Jet API you must generate an OAuth access token. 
        
        Tokens require valid account credentials, a `client_id`, and `client_secret`  provided by Signiant.
        
        
          OAuth access tokens expire after 24 hours.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthTokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuthTokenRequest'
        description: |
          Create an OAuth token
      responses:
        '200':
          description: The access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenResponse'
        default:
          description: |
            * **400** - Bad request
            * **401** - Not authorized
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/endpoints:
    get:
      tags:
        - Endpoints
      summary: List all endpoints
      operationId: listEndpoints
      description: |
        Lists all endpoints associated with the account. Endpoints provide creation and activity details, device information, and the `endpointId` required to create jobs.
      responses:
        '200':
          description: The list of endpoints associated with the user's account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointListResponse'
        default:
          description: |
            * **401** - Not authorized
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  
  /v1/jobs:
    post:
      tags:
        - Jobs
      summary: Create a job
      operationId: createJob
      description: Create a new job
      responses:
        '201':
          description: The added job
          
             
             Trigger types are only included in Hot Folder jobs. Triggerless jobs do not inlcude the `triggers` array.
          
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        default:
          description: >
            * **400** - Invalid request

            * **401** - Not authorized

            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateJobRequest'
                - $ref: '#/components/schemas/CreateTriggerlessJobRequest'
            examples:
                Hot Folder:
                  $ref: '#/components/examples/HotFolderJob'
                Triggerless:
                    $ref: '#/components/examples/TriggerlessJob'
        description: |
          The job request body
        required: true
    get:
      tags:
        - Jobs
      summary: List all jobs
      operationId: listJobs
      description: List all jobs associated with the account
      
      
            Trigger types are only included in Hot Folder jobs. Triggerless jobs do not inlcude the `triggers` array.
      responses:
        '200':
          description: The job list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListResponse'
        default:
          description: |
            * **400** - Bad request
            * **401** - Not authorized
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/v1/jobs/{jobId}':
    get:
      tags:
        - Jobs
      summary: View job details
      operationId: getJob
      description: |
        Retrieve a job record.
      parameters:
        - name: jobId
          in: path
          description: |
            The ID of the job to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The specified job. 
          
          
                  Trigger types are only included in Hot Folder jobs. Triggerless jobs do not inlcude the `triggers` array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        default:
          description: |
            * **401** - Not authorized
            * **404** - Job not found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Jobs
      summary: Delete a job
      operationId: deleteJob
      description: |
        Delete a job record.
      parameters:
        - name: jobId
          in: path
          description: |
            The ID of the job to delete.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The job that was deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        '204':
          description: Returned if the job does not exist within the callers account.
        default:
          description: |
            * **401** - Not authorized
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Jobs
      summary: Change job status
      operationId: updateJob
      description: Change a job status. The supported update operations are Pause and Resume.
      parameters:
        - name: jobId
          in: path
          description: |
            The ID of the job to update.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The job has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateJobResponse'
        default:
          description: |
            * **401** - OAuth token validation failure
            * **404** - Job not found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJobRequest'
        description: |
          To pause a job, set the paused flag to be true in the request body.
          To resume a job, set the paused flag to be false in the request body.
  '/v1/jobs/{jobId}/deliveries':
    post:
      tags:
        - Jobs
      summary: File list for a Triggerless Job
      operationId: createJobDelivery
      description: Start a triggerless job by sending a list of files to transfer.
      parameters:
        - name: jobId
          in: path
          description: |
            The transfer `jobId`.
          required: true
          schema:
            type: string
      requestBody:
        description: The list of files to transfer.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobDeliveryRequest'
        required: true
      responses:
        '201':
          description: Details for the created job transfer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateJobDeliveryResponse'
        default:
          description: |
            * **400** - Invalid request
            * **401** - Unauthorized
            * **500** - Internal Server Error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error'

  '/v1/jobs/{jobId}/deliveries/{deliveryId}':
    get:
      tags:
        - Jobs
      summary: Get job delivery
      operationId: getJobDelivery
      description: >
        Retrieve information about  a delivery created for a specific Triggerless Job.
      parameters:
        - name: jobId
          in: path
          description: The delivery's associated `jobId`.
          required: true
          schema:
            type: string
            format: uuid
        - name: deliveryId
          in: path
          description: ID of the delivery to retrieve.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details about the delivery
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JobDelivery'
        default:
          description: |
            * **400** - Invalid request
            * **401** - Unauthorized
            * **404** - Job or delivery not found
            * **500** - Internal Server Error
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error'

  /v1/storageProfiles:
    get:
      tags:
        - Storage Profiles
      summary: List storage profiles
      operationId: listStorageProfiles
      description: Retrieve a list of created storage profiles.
      responses:
        '200':
          description: The list of storage profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageProfileList'
              example:
                -
                 url: file:///path/to/folder
                 endpointId: 11111111-12345-abccd-12345
                 storageProfileId: 22222222-12345-abccd-12345
                 name: Example endpoint
                 lastModifiedOn: '2020-02-20T16:20:31.082Z'
                 createdOn: '2020-02-20T16:19:12.082Z'
                 accountId: 33333333-12345-abccd-12345
                 serviceId: 44444444-12345-abccd-12345
        default:
          description: |
            * **400** - Bad request
            * **401** - OAuth token validation failure
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
             
    post:
      tags:
        - Storage Profiles
      summary: Create storage profile
      operationId: createStorageProfile
      description: Create a storage profile
      requestBody:
        description: The storage profile object to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStorageProfileRequest'
        required: true
      responses:
        '201':
          description: Details for the created storage profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageProfileResponse'
        default:
          description: |
            * **400** - Invalid request
            * **401** - Unauthorized
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/storageProfiles/{storageProfileId}:
    parameters:
      - name: storageProfileId
        in: path
        required: true
        description: The id of the storage profile
        schema:
          type: string
    delete:
      tags:
        - Storage Profiles
      summary: Delete the storage profile
      operationId: deleteStorageProfile
      description: Delete the storage profile if it is not currently used by any jobs.
      responses:
        '200':
          description: The deleted storage profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageProfile'
        '204':
          description: Returned when the storage profile is already deleted.
        default:
          description: |
            * **400** - Bad request
            * **401** - OAuth token validation failure
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  securitySchemes:
    passwordGrant:
      type: oauth2
      description: The OAuth2 password grant token
      flows:
        password:
          tokenUrl: "/oauth/token"
          
    clientCredentials:
      type: http
      scheme: basic
  examples:
    OAuthTokenRequestExample:
      value:
        id: 12345678-abcd-dcba-4321-ab34567890f
        type: local
        relays:
          - relay.example.com
          - relay2.example.com
        status: available
        configuration:
          useMultiplePorts: false
          hostname: server.example.com
          storageServerVersion: 2.9.0
          filePrefix: path/prefix
      summary: Local Storage  
    HotFolderJob:
      value:
        name: Example Hot Folder Job
        actions:
         - type: TRANSFER
           data: 
             source:
               storageProfileId: 11111111-12345-abccd-12345
             destination:
               storageProfileId: 22222222-12345-abccd-12345
           triggers:
           - type: HOT_FOLDER
             events: [hotFolder.files.created]
             data:
               source:
                 storageProfileId: 11111111-12345-abccd-12345
    TriggerlessJob:
      value:
        name: Example Triggerless Job
        actions:
         - type: TRANSFER
           data: 
             source:
              storageProfileId: 11111111-12345-abccd-12345
             destination:
              storageProfileId: 22222222-12345-abccd-12345

  schemas:
    OAuthTokenRequest:
      type: object
      description: The OAuth token request body.
      required:
        - username
        - password
        - grant_type
      properties:
        client_id:
          description: The client ID.
          type: string
          example: a1b2c3d4c5a1b2c3d4c5a1b2c3d4c5a1
        client_secret:
          description: The client secret.
          type: string
          example: a1b2c3d4c5a1b2c3d4c5a1b2c3d4c5a1a1b2c3d4c5a1b2c3d4c5a1b2c3d4c5a1
        username:
          description: Your email address.
          type: string
          format: email
        password:
          description: The Signiant account password associated with the email address.
          type: string
          example: "********"
        grant_type:
          description: The type of OAuth token flow to use.
          type: string
          enum: 
            - password
    
        
    OAuthTokenResponse:
      type: object
      description: The OAuth token response.
      properties:
        access_token:
          description: The access token to use in the Authorization header to enable access to other endpoints with the format <token_type> <access_token>.
          type: string
          format: jwt
          example: "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.pazba9Pj009HgANP4pTCQAHpXNU7pVbjIGff_plktSzsa9rXTGzFngaawzXGEO6Q0Hx5dtGi-dMDlIadV81o3Q"
        token_type:
          description: The type of token issued.
          type: string
          enum:
            - Bearer
        expires_in:
          description: The number of seconds until this token expires. To avoid potential authentication problems, use the same token until it expires before generating a new token.
          type: number
          example: 86400
    UpdateJobRequest:
      type: object
      properties:
        paused:
          type: boolean
          description: >-
            The property of job that states if the job is currently paused or
            not.
          example: true
    JobListResponse:
      type: array
      items:
        $ref: '#/components/schemas/JobResponse'
    JobResponse:
      type: object
      properties:
        accountId:
          type: string
          format: guid
          example: 1234abc-1234-4321-ae9d-0045ceec5021
          description: The account ID that is associated with the job.
        actions:
          type: array
          items:
            $ref: '#/components/schemas/JobActionResponse'
        createdBy:
          type: string
          format: email
          description: The email address associated with the job creator.
          example: user@example.com
        createdOn:
          type: string
          format: date-time
          description: The date the job was created.
          example: '2019-11-08T21:30:28.347Z'
        jobId:
          type: string
          format: guid
        lastModifiedBy:
          type: string
          format: email
          description: The email address associated with the most recent person to modify the job.
          example: user@example.com
        lastModifiedOn:
          type: string
          format: date-time
          description: The date the job was most recently modified.
          example: '2019-11-08T21:30:28.347Z'
        metadata:
          type: object
          properties:
            routeId:
              type: string
              description: The ID of the route used for this job.
              example: 1234abc-1234-4321-ae9d-0045ceec5021
        name:
          type: string
          description: The job name
          example: Example Job
        serviceId:
          type: string
          format: guid
          example: 1234abc-1234-4321-ae9d-0045ce1234561
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/JobTriggersResponse'


        
    UpdateJobResponse:
      type: object
      properties:
        jobId:
          type: string
          format: guid
        name:
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/JobActionResponse'
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/JobTriggersResponse'
        lastModifiedOn:
          type: string
          format: date-time
        accountId:
          type: string
          format: guid
        createdOn:
          type: string
          format: date-time
        serviceId:
          type: string
          format: guid
        paused:
          type: boolean
    JobActionResponse:
      type: object
      properties:
        actionId:
          type: string
          format: guid
          example: 1234abc-1234-4321-ae9d-0045ceec5021
          description: The unique job action ID.
        createdOn:
          type: string
          format: date-time
          example: "2019-11-06T21:30:28.347Z"
        data:
          description: >-
            Data relevant to the job, including source and destination details.
          type: object
          properties:
            destination:
              $ref: '#/components/schemas/StorageProfileResponse'
            source:
              $ref: '#/components/schemas/StorageProfileResponse'
        jobId:
          type: string
          format: guid
          example: 01fedcba-abcd-1234-4331-d72182c496c3
          description: The unique job ID.
        lastModifiedOn:
          type: string
          format: date-time
          description: The date the job was most recently modified.
        nextActionIds:
          type: string
          example: "[]"


        type:
          type: string
          example: TRANSFER
        
    JobTriggersResponse:
      type: object
      properties:
        actions:
          type: array
          items:
            type: string
            format: guid
            example: 1234abc-1234-4321-ae9d-0045ceec5021
            description: The unique action ID.
        createdOn:
          type: string
          format: date-time
          description: The date the job was created
          example: '2019-11-08T21:30:28.347Z'
        data:
          type: object
          description: >-
            A set of properties related to the job type.
          properties:
            source:
              $ref: '#/components/schemas/StorageProfileResponse'
        events:
          type: string
          description: The individual events completed as part of the job.
          example:
            - hotFolder.files.discovered
            - hotFolder.files.created
            - hotFolder.files.modified
            - hotFolder.signature.changed
        jobId:
          type: string
          description: The unique job ID.
          example: 1234abc-1234-4321-ae9d-0045ceec5021
        lastModifiedOn:
          type: string
          format: date-time
          description: The date the job was last modified
        metadata:
          type: object
          properties:
            monitorid:
             type: string
             format: guid
             example: 1234abc-1234-4321-ae9d-0045ceec5021
        triggerId:
          type: string
          format: guid
          example: 1234abc-1234-4321-ae9d-0045ceec5021
        type:
          type: string
          example: HOT_FOLDER
        
        
    StorageProfileResponse:
      type: object
      properties:
        accountId:
          type: string
          description: The account ID associated with the storage profile
          example: 1234abc-1234-4321-ae9d-0045ceec5021
        createdBy:
          type: string
          description: The email address associated with the storage profile creator
          example: user@example.com
        createdByAuthId:
          type: string
          example: 1aaaaabbbbbbbbb2aaaaaaa3bbbbbbb4
          description: An alphanumeric string associated with the email address generated by the application
        createdOn:
          type: string
          format: date-time
          description: The date the storage profile was created
        endpointId:
         type: string
         example: 4321-cba-1234-4321-ae9d-0045ceec5021
        lastModifiedBy:
         type: string
         example: user@example.com
        lastModifiedByAuthId:
          type: string
          example: 1aaaaabbbbbbbbb2aaaaaaa3bbbbbbb4
        lastModifiedOn:
          type: string
          format: date-time        
        name:
          type: string
          example: Example Storage Profile
        serviceId:
          type: string
          format: guid
        storageProfileId:
          type: string
          format: guid
          description: The storage profile ID.
          example: 1234abc-1234-4321-ae9d-0045ceec5021
        type:
          format: string
          description: The endpoint visibility
          example: PRIVATE
        url:
          format: url
          description: The URL leading to the storage profile location
          example: file:///path/to/folder
    CreateStorageProfileRequest:
      type: object
      properties:
        endpointId:
          type: string
          description: The endpointId of the storage profile.
          format: uuid
          example: 11111111-12345-abccd-12345
        url:
          type: string
          description: The file url of the storage profile.
          example: "file:///path/to/folder"
        name:
          type: string
          description: The name of the storage profile.
          example: "Example Profile"
          
        
        
    EndpointListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
    CreateJobRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the job.
          example: Job Name
        actions:
          type: array
          items:
            $ref: '#/components/schemas/CreateTriggeredJobActionRequest'
    CreateTriggerlessJobRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the job.
          example: Job Name
        actions:
          type: array
          items:
            $ref: '#/components/schemas/CreateTriggerlessJobActionRequest'
    CreateTriggerlessJobActionRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - TRANSFER
        data:
          description: >-
            The source and destination storage profiles.
          type: object
          example:
            source:
              url: Source Path
              endpointId: Source Endpoint ID
              name: Source Storage Profile Name
            destination:
              url: Destination Path
              endpointId: Destination Endpoint ID
              name: Destination Storage Profile Name
              type: PRIVATE
    CreateTriggeredJobActionRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - TRANSFER
        data:
          description: >-
            The source and destination storage profiles, trigger, and associated trigger information.
          type: object
          example:
            source:
              url: Source Path
              endpointId: Source Endpoint ID
              name: Source Storage Profile Name
            destination:
              url: Destination Path
              endpointId: Destination Endpoint ID
              name: Destination Storage Profile Name
              type: PRIVATE
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/CreateJobTriggerRequest'
    CreateJobTriggerRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - HOT_FOLDER
        events:
          type: array
          items:
            type: string
          example:
               [hotFolder.files.discovered,
               hotFolder.files.created,
               hotFolder.files.modified,
               hotFolder.signature.changed,]
        data:
          type: object
          example:
            source:

                url: Source Path
                endpointid: Source Endpoint ID
                name: Source Storage Profile Name
    Endpoint:
      type: object
      description: An endpoint.
      properties:
        accountId:
          type: string
          description: The account ID that the endpoint belongs to.
          example: 1234abc5-1234-abcd-9fc0-e29770f55cce
        createdBy:
          type: string
          format: email
          description: The email address associated with the endpoint creator.
          example: user@example.com
        createdOn:
          type: string
          format: date-time
          description: Date the endpoint was created.
          example: '2019-11-08T21:30:28.347Z'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
        endpointId:
          type: string
          description: The endpoint ID.
          example: 9470aea5-abcd-4321-1234-e29770f55cce
        lastModifiedBy:
          type: string
          format: email
          description: The email address associated with the last user to modify the endpoint.
        lastModifiedOn:
          type: string
          format: date-time
          description: Date the endpoint was last modified.
          example: '2019-11-08T21:30:28.347Z'
        name:
          type: string
          description: The endpoint name.
          example: San Francisco Office
        serviceId:
          type: string
          description: The service ID associated with the endpoint.
          example: 090210a5-abcd-41c7-9fc0-e29770f55cce
    Device:
      type: object
      properties:
        accountId:
          description: The associated account identifier.
          type: string
          format: uuid
          example: 1234abc5-1234-abcd-9fc0-e29770f55cce
        activated:
          description: Indicates if the device has been activated.
          type: boolean
          example: true
        activatedOn:
          description: The date and time the device was activated.
          type: string
          format: date-time
          example: '2019-11-08T21:30:28.347Z'  
        connection:
          type: object
          properties:
            publicIp:
              type: string
              description: The public IP associated with the endpoint.
              example: 203.0.113.0
            publicIpFormat:
              type: string
              description: The public IP format.
              example: V4
        createdOn:
          description: The creation date and time for the device.
          type: string
          format: date-time
          example: '2019-11-08T21:30:28.347Z'
        deviceId:
          description: The unique device identifier.
          type: string
          format: uuid
          example: a7434d98-9355-48df-9ef5-466b9065224f
        deviceVersions:
          type: object
          properties:
            MEDIASHUTTLE_STORAGE_SERVER:
              type: string
              description: The SDCX Server Version.
              example: 3.2.3
            signiantCommunicationService:
              type: string
              description: The Signiant Communication Service version.
              example: 1.6.1
        iotConnected:
          description: Indicates if the device is connected to Signiant communication services.
          type: boolean
          example: true
        hardwareId:
          type: string
          description: A unique identifier for the endpoint hardware.
          example: 1234abc-1234-4321-ae9d-0045ceec5021
        keys:
          type: array
          description: >-
            The pkcs8 public keys used to communicate with the device service.
            Does not contain private keys on GET /v1/device/{deviceId}. If
            present, 'security' attribute is not present.
          items:
            $ref: '#/components/schemas/DeviceSecurityKey'   
        lastConnectedOn:
          description: The date and time the device last connected to Signiant communication services.
          type: string
          format: date-time
          example: '2019-11-08T21:30:28.347Z'
        lastDisconnectedOn:
          description: The date and time the device last disconnected from Signiant communication services.
          type: string
          format: date-time
          example: '2019-11-08T21:30:28.347Z'
        lastModifiedOn:
          description: The last modified date and time for the device
          type: string
          format: date-time
          example: '2019-11-08T21:30:28.347Z'     
        location:
          type: object
          description: Information about the server's location, ISP, and network.
        metadata:
          description: Device specific metadata, including OS, hardware, and file system usage details.
          type: object
        name:
          description: The automatically generated device name
          type: string
          example: "MediaShuttle Generated. Tenant ID [ abcdef63823d52b1b52061234567890864eb1234 ]"         
        serviceId:
          description: Associated service identifier.
          type: string
          format: uuid
          example: 12f231fe-1e13-4bad-8a6d-0a81923169b3
        transferIpAddressOverride:
          type: string
          description: The endpoint's custom transfer IP address, if applicable.
          example: 192.0.2.0
        type:
          description: The device type. Because of technology shared between Jet and Media Shuttle, the SDCX server registers as a `MEDIASHUTTLE_STORAGE_SERVER`.
          type: string
          enum:
            - MEDIASHUTTLE_STORAGE_SERVER
       



    DeviceSecurityKey:
      type: object
      properties:
        generatedOn:
          type: string
          format: date-time
          example: '2019-11-08T21:30:28.347Z'
        id:
          type: string
          example: 26c8eac9-b129-abcd-abcd-f3064adc8e75
        publicKey:
          type: string
          example: "-----BEGIN PUBLIC KEY-----\n..."
        registeredOn: 
          type: string
          format: date-time
          example: '2019-11-08T21:30:28.347Z'
    CreateJobDeliveryRequest:
      type: object
      properties:
        objects:
          type: array
          description: The list of objects to transfer.
          minimum: 1
          maximum: 1000
          items:
            $ref: '#/components/schemas/JobDeliveryObject'
    JobDeliveryObject:
      type: object
      description: An file to transfer.
      properties:
        relativePath:
          type: string
          description: The relative path of the object to transfer.
          example: '/example.mp4'
        sizeInBytes:
          type: number
          description: The file size in bytes.
          example: 1000000
      required:
        - relativePath
    CreateJobDeliveryResponse:
      type: object
      properties:
        objects:
          type: array
          description: The list of files to transfer.
          minimum: 1
          maximum: 1000
          items:
            $ref: '#/components/schemas/JobDeliveryObject'
        deliveryId:
          type: string
          format: uuid
          description: The delivery ID for tracking the details of the delivery.
    JobDelivery:
      type: object
      description: Information about a specific delivery.
      properties:
        deliveryId:
          type: string
          format: uuid
          description: The delivery unique identifier.
          example: '1234abc-1234-4321-ae9d-0045ceec5021'
        state:
          type: string
          description: The current transfer status.
          enum:
            - CREATED
            - QUEUED
            - SCHEDULED
            - IN_PROGRESS
            - COMPLETED
            - FAILED
          example: 'CREATED'
        transfers:
          type: array
          description: The transfers included in the delivery.
          items:
            type: object
            properties:
              transferId:
                type: string
                description: The unique identifier of the transfer.
                format: uuid
                example: '1234abc-1234-4321-ae9d-0045dddd5021'
        createdOn:
          description: The date on which the delivery was created.
          type: string
          format: date-time
          example: '2020-09-29T21:30:28.347Z'
        createdByUser:
          type: string
          format: email
          description: The user which initiated the delivery.
          example: 'example@signiant.com'
        lastModifiedOn:
          description: The date on which the delivery was last modified.
          type: string
          format: date-time
          example: '2020-09-29T21:30:28.347Z'
        lastModifiedByUser:
          type: string
          format: email
          description: The user which last updated the delivery.
          example: 'example@signiant.com'
        serviceId:
          type: string
          format: uuid
          description: Service id under which to track the delivery.
          example: '3f86435e-c14f-44d9-8407-ba1f300cce58'
        metadata:
          type: object
          description: >-
            A collection of properties to associate with the delivery.
          properties:
            jobId:
              type: string
              format: uuid
              description: >-
                The unique identifier of the job the delivery was created for.
              example: '91ab4821-9fb7-415d-8cd4-546bd493fb7c'          
    StorageProfileList:
      type: array
      items:
        $ref: '#/components/schemas/StorageProfile'
    StorageProfile:
      type: object
      properties:
        accountId:
          type: string
          format: guid
          example: 11111111-1234-abcd-4321-12345678e088
        createdBy:
          type: string
          example: 'user@example.com'
        createdByAuthId:
          type: string
          example: '1aaaaabbbbbbbbb2aaaaaaa3bbbbbbb4'
        createdOn:
          type: string
          format: date-time
        deleted:
          type: boolean
          example: true
        deletedBy:
          type: string
          example: user@example.com
        deletedByAuthId:
          type: string
          example: '1aaaaabbbbbbbbb2aaaaaaa3bbbbbbb4'
        endpointId:
          type: string
          format: uuid
          example: 11111111-abcd-1234-abcd-123abcdef123  
        lastModifiedBy:
          type: string
          example: user@example.com
        lastModifiedAuthId:
          type: string
          example: '1aaaaabbbbbbbbb2aaaaaaa3bbbbbbb4'
        lastModifiedOn:
          type: string
          format: date-time
        name:
          type: string
          example: Example Endpoint
        serviceId:
          type: string
          format: guid
          example: 11111111-1234-abcd-4321-12345678e088
        storageProfileId:
          type: string
          format: uuid
          example: 11111111-12345-abccd-12345
        traceId:
          type: string
          format: uuid
          example: 11111111-12345-abccd-12345
        type:
          type: string
          example: PRIVATE
        url:
          type: string
          example: 'file:///path/to/folder'
        
        
        
        
    Error:
      type: object
      description: An error that has occurred.
      properties:
        statusCode:
          description: The HTTP status code.
          type: number
          format: int
          example: 500
        error:
          description: >-
            The error code that can be localized to display an appropriate
            message.
          type: string
          example: domain.notFound
        errorMessage:
          description: A detailed message describing the error.
          type: string
          example: Detailed error message