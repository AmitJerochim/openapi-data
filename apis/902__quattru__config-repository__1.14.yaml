openapi: 3.0.0
info:
  description: "DATATRON Config Repository API"
  version: "1.14"
  title: "Config Repository"
tags:
- name: "datatron"
  description: "Datatron resource"
- name: "device"
  description: "Device resource"
- name: "device_type"
  description: "Device type resource"
- name: "device_class"
  description: "Device classes"
- name: "data_point"
  description: "Data point resource"
- name: "machine"
  description: "Machine configuration resource"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    Id:
      type: "object"
      required:
        - "id"
      properties:
        id:
          type: "integer"
          format: "int32"
    CreatedAt:
      type: "object"
      required:
        - "createdAt"
      properties:
        createdAt:
          type: "string"
          format: "date-time"
    DatatronInfo:
      type: "object"
      required:
        - "name"
        - "accountId"
      properties:
        deviceUUID:
          type: "string"
        name:
          type: "string"
        serialNumber:
          type: "string"
        macAddress:
          type: "string"
        notes:
          type: "string"
        make:
          type: "string"
        model:
          type: "string"
        year:
          type: "integer"
          format: "int32"
        imagePath:
          type: "string"
          format: "uri"
        accountId:
          type: "integer"
          format: "int32"
        organizationId:
          type: "integer"
          format: "int32"
        locationId:
          type: "integer"
          format: "int32"
    Datatron:
      allOf:
        - $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/DatatronInfo"
        - $ref: "#/components/schemas/CreatedAt"
    DeviceInfo:
      type: "object"
      required:
        - "name"
        - "deviceTypeId"
      properties:
        datatronId:
          type: "integer"
          format: "int32"
        deviceUUID:
          type: "string"
        serialNumber:
          type: "string"
        name:
          type: "string"
        deviceTypeId:
          type: "integer"
          format: "int32"
        accountId:
          type: "integer"
          format: "int32"
        organizationId:
          type: "integer"
          format: "int32"
        locationId:
          type: "integer"
          format: "int32"
        config:
          type: "object"
    Device:
      allOf:
        - $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/DeviceInfo"
        - $ref: "#/components/schemas/CreatedAt"
    DeviceTypeInfo:
      type: "object"
      required:
        - "name"
        - "make"
        - "model"
        - "deviceClass"
        - "dataPointSchema"
      properties:
        name:
          type: "string"
        make:
          type: "string"
        model:
          type: "string"
        deviceClass:
          type: "string"
          enum: [PLC, AnalogCard, RemoteSensor]
        dataPointSchema:
          type: "object"  # schema json object
        deviceSchema:
          type: "object"
    DeviceType:
      allOf:
        - $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/DeviceTypeInfo"
        - $ref: "#/components/schemas/CreatedAt"
    DataPointInfo:
      type: "object"
      required:
        - "deviceId"
        - "label"
        - "unit"
        - "scalingFactor"
        - "scalingOffset"
        - "enabled"
      properties:
        deviceId:
          type: "integer"
          format: "int32"
        config:
          type: "object"
        unit:
          type: "string"
        label:
          type: "string"
        scalingFactor:
          type: "number"
        scalingOffset:
          type: "number"
        enabled:
          type: "boolean"
    DataPointPath:
        type: "object"
        required:
          - "path"
        properties:
          path:
            type: "object"
            required:
              - "deviceName"
            properties:
              datatronId:
                type: "string"
              datatronCreatedAt:
                type: "string"
                format: "date-time"
              datatronName:
                type: "string"
              deviceId:
                type: "string"
              deviceName:
                type: "string"
              deviceCreatedAt:
                type: "string"
                format: "date-time"
    DataPoint:
      allOf:
        - $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/DataPointInfo"
        - $ref: "#/components/schemas/CreatedAt"
    DataPointGet:
      allOf:
        - $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/DataPointInfo"
        - $ref: "#/components/schemas/CreatedAt"
        - $ref: "#/components/schemas/DataPointPath"
    Machine:
      type: "object"
      required:
        - "code"
        - "config"
      properties:
        code:
          type: "string"
        config:
          type: "object"

    # based on https://zalando.github.io/problem/schema.yaml
    Problem:
      type: "object"
      properties:
        title:
          type: "string"
          description: "Short summary of the problem type"
        status:
          type: "integer"
          format: "int32"
          description: "The HTTP status code for this problem"
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: "A human readable explanation specific to this occurrence of the problem."
          example: "Connection to database timed out"
    Success:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Success message"
        status:
          type: "integer"
          format: "int32"
          description: "The HTTP status code"
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
  responses:
    ServerSuccess:
      description: "Server success"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
    ServerError:
      description: "Server error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"

security:
  - bearerAuth: []

paths:
  /datatrons:
    get:
      summary: "List all datatrons"
      tags:
      - "datatron"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Datatron"
        5XX:
          $ref: "#/components/responses/ServerError"
    post:
      summary: "Create new datatron"
      tags:
      - "datatron"
      requestBody:
        required: true
        description: "Datatron object that needs to be added"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatatronInfo"
      responses:
        201:
          description: "Datatron created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Datatron"
        400:
          description: "Invalid input"
        5XX:
          $ref: "#/components/responses/ServerError"

  /datatrons/{datatron_id}:
    get:
      summary: "Get datatron by id"
      tags:
      - "datatron"
      parameters:
      - name: "datatron_id"
        in: "path"
        description: "ID of datatron"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Datatron"
        404:
          description: "Datatron not found"
        5XX:
          $ref: "#/components/responses/ServerError"
    put:
      summary: "Update datatron"
      tags:
      - "datatron"
      parameters:
      - name: "datatron_id"
        in: "path"
        description: "ID of datatron"
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        required: true
        description: "Datatron object that needs to be updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatatronInfo"
      responses:
        200:
          description: "Datatron updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Datatron"
        400:
          description: "Invalid input"
        404:
          description: "Datatron not found"
        5XX:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: "Delete datatron"
      tags:
      - "datatron"
      parameters:
      - name: "datatron_id"
        in: "path"
        description: "Datatron id to delete"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "Datatron deleted"
          $ref: "#/components/responses/ServerSuccess"
        404:
          description: "Datatron not found"
        5XX:
          $ref: "#/components/responses/ServerError"

  /datatrons/{datatron_id/publish:
    post:
      summary: "Publish Datatron config (to MQTT topic)"
      tags:
      - "datatron"
      parameters:
      - name: "datatron_id"
        in: "path"
        description: "ID of datatron"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "Datatron's configuration published"
          $ref: "#/components/responses/ServerSuccess"
        404:
          description: "Datatron not found"
        5XX:
          $ref: "#/components/responses/ServerError"

  /datatrons/find:
    get:
      summary: "Find datatrons"
      tags:
      - "datatron"
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "uuid"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "account_id"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "organization_id"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "location_id"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Datatron"
        5XX:
          $ref: "#/components/responses/ServerError"

  /devices:
    get:
      summary: "List all devices"
      tags:
      - "device"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Device"
        5XX:
          $ref: "#/components/responses/ServerError"
    post:
      summary: "Create new device"
      tags:
      - "device"
      requestBody:
        required: true
        description: "Device object that needs to be added"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceInfo"
      responses:
        201:
          description: "Device created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        400:
          description: "Invalid input"
        5XX:
          $ref: "#/components/responses/ServerError"

  /devices/{device_id}:
    get:
      summary: "Get one device"
      tags:
      - "device"
      parameters:
        - name: "device_id"
          in: "path"
          description: "ID of device"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        404:
          description: "Device not found"
        5XX:
          $ref: "#/components/responses/ServerError"
    put:
      summary: "Update device"
      tags:
      - "device"
      parameters:
        - name: "device_id"
          in: "path"
          description: "ID of device"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        required: true
        description: "Device object that needs to be updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceInfo"
      responses:
        200:
          description: "Device updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        400:
          description: "Invalid input"
        404:
          description: "Device not found"
        5XX:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: "Delete device"
      tags:
      - "device"
      parameters:
      - name: "device_id"
        in: "path"
        description: "Device id to delete"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "Device deleted"
          $ref: "#/components/responses/ServerSuccess"
        404:
          description: "Device not found"
        5XX:
          $ref: "#/components/responses/ServerError"

  /devices/{device_id/publish:
    post:
      summary: "Publish Device config (to MQTT topic)"
      tags:
      - "device"
      parameters:
      - name: "device_id"
        in: "path"
        description: "ID of device"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "Device configuration published"
          $ref: "#/components/responses/ServerSuccess"
        404:
          description: "Device not found"
        5XX:
          $ref: "#/components/responses/ServerError"

  /devices/{device_id/download:
    post:
      summary: "Download Device config/code"
      tags:
        - "device"
      parameters:
        - name: "device_id"
          in: "path"
          description: "ID of device"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          $ref: "#/components/responses/ServerSuccess"
        400:
          description: "Download option is not implemented for this device type"
          $ref: "#/components/responses/ServerError"
        404:
          description: "Device not found"
        5XX:
          $ref: "#/components/responses/ServerError"

  /devices/find:
    get:
      summary: "Find devices"
      tags:
      - "device"
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "uuid"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "account_id"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "organization_id"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      - name: "location_id"
        in: "query"
        required: false
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Device"
        5XX:
          $ref: "#/components/responses/ServerError"

  /device_types:
    get:
      summary: "List all device types"
      tags:
      - "device_type"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DeviceType"
        5XX:
          $ref: "#/components/responses/ServerError"
    post:
      summary: "Create new device type"
      tags:
      - "device_type"
      requestBody:
        required: true
        description: "DeviceType object that needs to be added"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceTypeInfo"
      responses:
        201:
          description: "Device type created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceType"
        400:
          description: "Invalid input"
        5XX:
          $ref: "#/components/responses/ServerError"

  /device_types/{device_type_id}:
    get:
      summary: "Get one device type"
      tags:
      - "device_type"
      parameters:
        - name: "device_type_id"
          in: "path"
          description: "ID of device type"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceType"
        404:
          description: "Device type not found"
        5XX:
          $ref: "#/components/responses/ServerError"
    put:
      summary: "Update device type"
      tags:
      - "device_type"
      parameters:
        - name: "device_type_id"
          in: "path"
          description: "ID of device type"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        required: true
        description: "Device type object that needs to be updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceTypeInfo"
      responses:
        200:
          description: "Device type updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceType"
        400:
          description: "Invalid input"
        404:
          description: "Device type not found"
        5XX:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: "Delete device type"
      tags:
      - "device_type"
      parameters:
      - name: "device_type_id"
        in: "path"
        description: "Device type id to delete"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "Device type deleted"
          $ref: "#/components/responses/ServerSuccess"
        404:
          description: "Device type not found"
        5XX:
          $ref: "#/components/responses/ServerError"

  /device_classes:
    get:
      summary: "List all device classes"
      tags:
      - "device_class"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
        5XX:
          $ref: "#/components/responses/ServerError"

  /data_points:
    get:
      summary: "List all data points"
      tags:
      - "data_point"
      parameters:
        - name: "is_archived"
          in: "query"
          required: false
          schema:
            type: "boolean"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DataPointGet"
        5XX:
          $ref: "#/components/responses/ServerError"
    post:
      summary: "Create new data point"
      tags:
      - "data_point"
      requestBody:
        required: true
        description: "Data point that needs to be added"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataPointInfo"
      responses:
        201:
          description: "Data point added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataPoint"
        400:
          description: "Invalid input"
        5XX:
          $ref: "#/components/responses/ServerError"

  /data_points/find:
    get:
      summary: "Find data points"
      tags:
      - "data_point"
      parameters:
      - name: "id"
        in: "query"
        schema:
          type: "array"
          items:
            type: "number"
            format: "int32"
          example: "1,2,3"
      - name: "uuid"
        in: "query"
        required: false
        schema:
          type: "string"
          format: "uuid"
      - name: "device_id"
        in: "query"
        required: false
        schema:
          type: "number"
          format: "int32"
      - name: "is_archived"
        in: "query"
        required: false
        schema:
          type: "boolean"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DataPointGet"
        5XX:
          $ref: "#/components/responses/ServerError"

  /data_points/{point_id}:
    get:
      summary: "Get one data point"
      tags:
      - "data_point"
      parameters:
        - name: "point_id"
          in: "path"
          description: "ID of data point"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataPointGet"
        404:
          description: "Data point not found"
        5XX:
          $ref: "#/components/responses/ServerError"
    put:
      summary: "Update data point"
      tags:
      - "data_point"
      parameters:
        - name: "point_id"
          in: "path"
          description: "ID of data point"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        required: true
        description: "Data point object that is updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataPointInfo"
      responses:
        200:
          description: "Data point updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataPoint"
        400:
          description: "Invalid input"
        5XX:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: "Delete data point"
      tags:
      - "data_point"
      parameters:
        - name: "point_id"
          in: "path"
          description: "ID of data point"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "Data point deleted"
          $ref: "#/components/responses/ServerSuccess"
        404:
          description: "Data point not found"
        5XX:
          $ref: "#/components/responses/ServerError"

  /machines:
    get:
      summary: "List all machines"
      tags:
        - "machine"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Machine"
        5XX:
          $ref: "#/components/responses/ServerError"
    post:
      summary: "Create/update machine configuration"
      tags:
        - "machine"
      requestBody:
        required: true
        description: "Machine config to be created / updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Machine"
      responses:
        201:
          description: "Machine added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Machine"
        400:
          description: "Invalid input"
        5XX:
          $ref: "#/components/responses/ServerError"

  /machines/{machine_code}:
    get:
      summary: "Get one machine"
      tags:
        - "machine"
      parameters:
        - name: "machine_code"
          in: "path"
          description: "String code of machine (from dashboard)"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Machine"
        404:
          description: "Machine not found"
        5XX:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: "Delete machine"
      tags:
        - "machine"
      parameters:
        - name: "machine_code"
          in: "path"
          description: "String code of machine (from dashboard)"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "Machine deleted"
          $ref: "#/components/responses/ServerSuccess"
        404:
          description: "Machine not found"
        5XX:
          $ref: "#/components/responses/ServerError"