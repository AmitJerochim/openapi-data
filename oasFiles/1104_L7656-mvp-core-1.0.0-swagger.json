{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/L7656/mvp-core/1.0.0"
  } ],
  "info" : {
    "description" : "This is the API for the core service of LCI MVP Demo",
    "version" : "1.0.0",
    "title" : "LCI MVP Core API",
    "contact" : {
      "email" : "chloe.lo@livingcenterlineinstitute.com"
    }
  },
  "tags" : [ {
    "name" : "auth",
    "description" : "User authentication system"
  }, {
    "name" : "demo",
    "description" : "Demo-only calls"
  }, {
    "name" : "core",
    "description" : "The core LCI system"
  } ],
  "paths" : {
    "/login" : {
      "post" : {
        "tags" : [ "auth" ],
        "security" : [ {
          "BasicAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "login success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "user not authenticated; either the user does not exist, or the password is incorrect"
          },
          "405" : {
            "description" : "bad request"
          }
        }
      }
    },
    "/signup" : {
      "post" : {
        "description" : "Signup a new user",
        "tags" : [ "auth" ],
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SignupRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "signup success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "user not authenticated; either the user does not exist, or the password is incorrect"
          },
          "403" : {
            "description" : "permission denied; the user does not have permission to carry out this operation"
          },
          "405" : {
            "description" : "bad request"
          }
        }
      }
    },
    "/set_password" : {
      "put" : {
        "description" : "Set the password of the user after the first login",
        "tags" : [ "auth" ],
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "set password success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "user not authenticated; either the user does not exist, or the password is incorrect"
          },
          "405" : {
            "description" : "bad request"
          }
        }
      }
    },
    "/logout" : {
      "post" : {
        "tags" : [ "auth" ],
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "logout success"
          },
          "401" : {
            "description" : "user not authenticated; the token has expired"
          }
        }
      }
    },
    "/list_sample_user" : {
      "get" : {
        "description" : "Get a list of sample users including their demographic information",
        "parameters" : [ {
          "in" : "query",
          "name" : "after",
          "schema" : {
            "type" : "integer"
          },
          "description" : "The id of the user from which the query starts"
        }, {
          "in" : "query",
          "name" : "limit",
          "schema" : {
            "type" : "integer"
          },
          "description" : "The numbers of users to return"
        } ],
        "tags" : [ "demo" ],
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SampleUserResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "user not authenticated; the token has expired"
          }
        }
      }
    },
    "/get_sample_data/{userID}" : {
      "get" : {
        "description" : "Get the sample data of the user with the given userID",
        "parameters" : [ {
          "name" : "userID",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "tags" : [ "demo" ],
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SampleDataResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "user not authenticated; the token has expired"
          }
        }
      }
    },
    "/get_max_sample_user_id" : {
      "get" : {
        "description" : "Get the maximum user ID within the simulated sample database",
        "tags" : [ "demo" ],
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "example" : 4575
                }
              }
            }
          },
          "401" : {
            "description" : "user not authenticated; the token has expired"
          }
        }
      }
    },
    "/get_report_request_format" : {
      "get" : {
        "description" : "Get the format of the report request to be sent to the server and also other information necessary to display the input form for the frontend",
        "tags" : [ "core" ],
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportRequestFormatResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "user not authenticated; the token has expired"
          }
        }
      }
    },
    "/generate_report" : {
      "post" : {
        "description" : "Get the report from the KBES with the given data",
        "tags" : [ "core" ],
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GetReportRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "user not authenticated; the token has expired"
          },
          "405" : {
            "description" : "bad request"
          }
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "BearerAuth" : {
        "type" : "http",
        "scheme" : "bearer"
      },
      "BasicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    },
    "schemas" : {
      "SignupRequest" : {
        "type" : "object",
        "required" : [ "email", "name" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "the email of the new user",
            "example" : "someone@email.com"
          },
          "name" : {
            "type" : "string",
            "description" : "the name of the new user",
            "example" : "John Smith"
          }
        }
      },
      "UserResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "the id of the new user",
            "example" : 5
          },
          "email" : {
            "type" : "string",
            "description" : "the email of the new user",
            "example" : "someone@email.com"
          },
          "name" : {
            "type" : "string",
            "description" : "the name of the new user",
            "example" : "John Smith"
          }
        }
      },
      "LoginResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "the id of the token",
            "example" : 5
          },
          "token" : {
            "type" : "string",
            "description" : "the token for authentication",
            "example" : "+He9OZ1MmQ+s6bZ9TX2Upw=="
          },
          "expiresAt" : {
            "type" : "string",
            "description" : "the time at which the token expires and the user will be logged out of the system",
            "example" : "2019-12-19T15:18:39Z"
          },
          "userId" : {
            "type" : "integer",
            "example" : 5
          },
          "userName" : {
            "type" : "string",
            "example" : "John Smith"
          },
          "userPasswordIsSet" : {
            "type" : "boolean",
            "description" : "whether the user has set his/her own password or not",
            "example" : false
          }
        }
      },
      "SampleUserResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "the id of the sample user",
            "example" : 12
          },
          "name" : {
            "type" : "string",
            "description" : "the name of the sample user",
            "example" : "John Appleseed"
          },
          "age" : {
            "type" : "integer",
            "example" : 27
          },
          "gender" : {
            "type" : "integer",
            "description" : "the gender of the user; 1 stands for male and 2 stands for female",
            "example" : 2
          },
          "maritalStatus" : {
            "type" : "integer",
            "description" : "the marital status of the user; 1 stands for single and 2 stands for married",
            "example" : 1
          },
          "educaion" : {
            "type" : "string",
            "example" : "University"
          },
          "region" : {
            "type" : "string",
            "example" : "Hong Kong"
          }
        }
      },
      "SampleDataResponse" : {
        "type" : "object",
        "properties" : {
          "sampleUserID" : {
            "type" : "integer",
            "description" : "the id of the sample user",
            "example" : 12
          },
          "componentID" : {
            "type" : "integer",
            "description" : "the id of the component",
            "example" : 27
          },
          "value" : {
            "type" : "number",
            "description" : "the value of the component of the sample user",
            "example" : 45.23
          },
          "compliance" : {
            "type" : "number",
            "description" : "the probability of the sample user to comply with the recommendation made for this component expressed in a fraction with value ranging from 0 to 1",
            "example" : 0.357
          },
          "importance" : {
            "type" : "number",
            "description" : "how important the sample user consider this component to be for his/her own wellbeing expressed in a fraction with value ranging from 0 to 1",
            "example" : 0.593
          }
        }
      },
      "FormFormat" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "the type of the form input element",
            "example" : "radio"
          },
          "options" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "example" : {
                "1" : "male",
                "2" : "female"
              }
            }
          }
        }
      },
      "DomainResponse" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "the name of the domain",
            "example" : "psychological"
          },
          "components" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "example" : {
                "1" : "bmi",
                "2" : "heart rate variability"
              }
            }
          }
        }
      },
      "SampleUserAttributes" : {
        "type" : "object",
        "additionalProperties" : {
          "$ref" : "#/components/schemas/FormFormat"
        }
      },
      "ReportRequestFormatResponse" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/SampleUserAttributes"
          },
          "data" : {
            "$ref" : "#/components/schemas/DomainResponse"
          }
        }
      },
      "SampleUserData" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "John Appleseed"
          },
          "age" : {
            "type" : "integer",
            "example" : 27
          },
          "gender" : {
            "type" : "integer",
            "example" : 1
          },
          "maritalStatus" : {
            "type" : "integer",
            "example" : 2
          },
          "education" : {
            "type" : "string",
            "example" : "University"
          },
          "region" : {
            "type" : "string",
            "example" : "Hong Kong"
          }
        }
      },
      "ValueWithConfig" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "example" : 45.23
          },
          "importance" : {
            "type" : "number",
            "example" : 0.346
          },
          "compliance" : {
            "type" : "number",
            "example" : 0.724
          }
        }
      },
      "GetReportRequest" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/SampleUserData"
          },
          "data" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/components/schemas/ValueWithConfig"
              }
            }
          }
        }
      },
      "Forecast" : {
        "type" : "object",
        "properties" : {
          "duration" : {
            "type" : "number",
            "description" : "how long the period the forecast is predicting",
            "example" : 5
          },
          "unit" : {
            "type" : "string",
            "description" : "the unit of the forecast duration",
            "example" : "week"
          },
          "improvement" : {
            "type" : "number",
            "description" : "the amount of improvement made by the forecast over the period, expressed in fraction",
            "example" : 0.657
          }
        }
      },
      "Recommendation" : {
        "type" : "object",
        "properties" : {
          "mostUrgentComponentName" : {
            "type" : "string",
            "example" : "bmi"
          },
          "action" : {
            "type" : "string",
            "description" : "an action on the most urgent component to be taken to improve the given domain",
            "example" : "Lower the BMI by losing weight"
          },
          "description" : {
            "type" : "string",
            "description" : "an actionable recommendation in order to carry out the action",
            "example" : "take off the bus or train one stop earlier and walk home"
          },
          "forecast" : {
            "$ref" : "#/components/schemas/Forecast"
          }
        }
      },
      "DomainEvaluation" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "example" : "psychological"
          },
          "confidence" : {
            "type" : "number",
            "description" : "a score representing the centerline status of the given wellness domain ranging from -1.0 to 1.0",
            "example" : -0.456
          },
          "level" : {
            "type" : "string",
            "description" : "the wellness level of the given wellness domain; can be \"under\", \"in\", or \"above\" (the centerline)",
            "example" : "above"
          }
        }
      },
      "ComponentEvaluation" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "description" : "the measurement value of the wellness component",
            "example" : 29.4
          },
          "setPoint" : {
            "type" : "number",
            "description" : "the set point of the wellness component, i.e. the ideal value",
            "example" : 25.0
          },
          "zScore" : {
            "type" : "number",
            "example" : 1.67
          },
          "percentile" : {
            "type" : "number",
            "description" : "the percentile of the given measurement value relative to the population expressed in fraction",
            "example" : 0.789
          },
          "description" : {
            "type" : "string",
            "description" : "the description of the evaluation of the wellness component; for example, \"fine\", \"good\", \"not healthy\", etc.",
            "example" : "fine"
          },
          "level" : {
            "type" : "string",
            "description" : "a description of the level of the measurement value relative to the set point",
            "example" : "high"
          },
          "rank" : {
            "type" : "integer",
            "description" : "the evaluation of the wellness component expressed in an integer score",
            "example" : -1
          },
          "importance" : {
            "type" : "number",
            "description" : "how much contribution a person considers this component can make to the overall wellbeing, expressed as a fraction",
            "example" : 0.234
          },
          "compliance" : {
            "type" : "number",
            "description" : "how likely the person is to follow a recommendation to improve the given wellness component, expressed as a probability",
            "example" : 0.769
          },
          "urgency" : {
            "type" : "number",
            "description" : "a score determining how urgent a component is in the improvement of the given wellness domain",
            "example" : 1.362
          },
          "deviation" : {
            "type" : "number",
            "description" : "the deviation of the raw measurement value of the wellness component from the set point",
            "example" : 4.4
          }
        }
      },
      "Evaluation" : {
        "type" : "object",
        "properties" : {
          "domainEvaluation" : {
            "$ref" : "#/components/schemas/DomainEvaluation"
          },
          "componentEvaluations" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ComponentEvaluation"
            }
          }
        }
      },
      "ReportResponse" : {
        "type" : "object",
        "properties" : {
          "recommendation" : {
            "$ref" : "#/components/schemas/Recommendation"
          },
          "evaluation" : {
            "$ref" : "#/components/schemas/Evaluation"
          }
        }
      }
    }
  }
}