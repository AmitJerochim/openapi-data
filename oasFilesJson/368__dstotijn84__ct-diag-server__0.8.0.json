{"openapi":"3.0.3","info":{"version":"0.8.0","license":{"name":"MIT","url":"https://github.com/dstotijn/ct-diag-server/blob/master/LICENSE"},"title":"ct-diag-server","description":"[![CircleCI](https://circleci.com/gh/dstotijn/ct-diag-server.svg?style=shield)](https://circleci.com/gh/dstotijn/ct-diag-server)\n[![Coverage Status](https://coveralls.io/repos/github/dstotijn/ct-diag-server/badge.svg?branch=master)](https://coveralls.io/github/dstotijn/ct-diag-server?branch=master)\n[![GitHub](https://img.shields.io/github/license/dstotijn/ct-diag-server)](LICENSE)\n[![GoDoc](https://godoc.org/github.com/dstotijn/ct-diag-server?status.svg)](https://godoc.org/github.com/dstotijn/ct-diag-server)\n[![Go Report Card](https://goreportcard.com/badge/github.com/dstotijn/ct-diag-server)](https://goreportcard.com/report/github.com/dstotijn/ct-diag-server)\n\n**ct-diag-server** is an HTTP server written in Go for storing and retrieving\nDiagnosis Keys, as defined in Apple/Google's [draft specification](https://www.apple.com/covid19/contacttracing/)\nof its Contact Tracing Framework. It aims to respect the privacy of its users\nand store only the bare minimum of data needed for anonymous contact tracing.\n\nIn anticipation of the general release of Apple and Google's native APIs (planned\nfor May 2020), this application provides a bare bones implementation for the\nframework's server component: a central repository for submitting Diagnosis Keys\nafter a positive test, and retrieving a collection of all previously submitted\nDiagnosis Keys.","contact":{"name":"David Stotijn","email":"dstotijn@gmail.com"}},"externalDocs":{"url":"https://github.com/dstotijn/ct-diag-server"},"paths":{"/diagnosis-keys":{"get":{"description":"To be used for fetching a list of Diagnosis Keys. A typical client is either a mobile device, or an intermediate platform/server of an app developer, for manual/custom distribution of the payload to clients. In either case, the keyset can be regarded as public; it doesn't contain PII.\n\nThe endpoint supports byte range requests as defined in [RFC 7233](https://tools.ietf.org/html/rfc7233).\nThe `HEAD` method may be used to obtain `Last-Modified` and `Content-Length` headers\nfor cache control purposes.\n\nA `200 OK` response should be expected for normal requests (non-empty and empty),\nand `206 Partial Content` for responses to byte range requests.\nIn case of an empty reply, a `Content-Length: 0` header is written.\n\nA `500 Internal Server Error` response indicates server failure, and warrants a retry\n\nThe HTTP request body should be a bytestream of `1 <= n` Diagnosis Keys, where\n`n` is the max upload batch size configured on the server (default: 14).\nA diagnosis key consists of three parts: the `TemporaryExposureKey` itself (16 bytes), the `RollingStartNumber` (4 bytes, big endian) and the `TransmissionRiskLevel` (1 byte).\nBecause the amount of bytes per Diagnosis Key is fixed, there is no delimiter\n","parameters":[{"in":"query","name":"after","schema":{"type":"string"},"description":"Used for listing diagnosis keys uploaded after the given key. Format: hexadecimal encoding of a Temporary Exposure Key.\nexample: a7752b99be501c9c9e893b213ad82842"}],"responses":{"200":{"description":"Successful response","headers":{"Content-Length":{"description":"Is `n * 21`, where `n` is the amount of found Diagnosis Keys.","schema":{"type":"integer","example":42000}},"Last-Modified":{"description":"The last modified date of the cache.","schema":{"type":"string","example":"Sun, 03 May 2020 13:13:14 GMT"}}},"content":{"application/octet-stream":{"schema":{"type":"string","format":"binary","example":"binarystream"}}}},"206":{"description":"Partial Content","headers":{"Content-Length":{"description":"Is `n * 21`, where `n` is the amount of found Diagnosis Keys.","schema":{"type":"integer","example":42000}},"Last-Modified":{"description":"The last modified date of the cache.","schema":{"type":"string","example":"Sun, 03 May 2020 13:13:14 GMT"}}},"content":{"application/octet-stream":{"schema":{"type":"string","format":"binary","example":"binarystream"}}}},"500":{"description":"Unexpected error","content":{"text/plain; charset=utf-8":{"schema":{"type":"string","example":"Internal Server Error"}}}}}},"post":{"description":"To be used for uploading a set of Diagnosis Keys by a mobile client device.\n**Note:** It's still undecided if this server should authenticate requests. Given the\nwide range of per-country use cases and processes, this is now delegated to the server\noperator to shield this endpoint against unauthorized access, and provide its own\nupstream proxy, e.g. tailored to handle auth-z for health personnel.\n\n\nThe HTTP request body should be a bytestream of `1 <= n` Diagnosis Keys, where\n`n` is the max upload batch size configured on the server (default: 14).\nA diagnosis key consists of two parts: the `TemporaryExposureKey` itself (16 bytes),\nand 2 bytes (big endian) to denote the `ENIntervalNumber` (see above). Because\nthe amount of bytes per diagnosis key is fixed, there is no delimiter.\n\nA `200 OK` response with body `OK` should be expected on successful storage of the\nkeyset in the database.\nA `400 Bad Request` response is used for client errors. A `500 Internal Server Error`\nresponse is used for server errors, and warrants a retry. Error reasons are written\nin a `text/plain; charset=utf-8` response body.\n\nDuplicate keys are silently ignored.","requestBody":{"content":{"application/octet-stream":{"schema":{"type":"string","format":"binary"}}}},"responses":{"200":{"description":"Successful response","content":{"application/octet-stream":{"schema":{"type":"string","format":"binary","example":"binarystream"}}}},"400":{"description":"Client error","content":{"text/plain; charset=utf-8":{"schema":{"type":"string","example":"Invalid Body: unexpected EOF"}}}},"500":{"description":"Unexpected error","content":{"text/plain; charset=utf-8":{"schema":{"type":"string","example":"Internal Server Error"}}}}}}},"/exposure-config":{"get":{"description":"To be used for fetching an [ENExposureConfiguration](https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration) object (see Appleâ€˜s [sample code](https://developer.apple.com/documentation/exposurenotification/building_an_app_to_notify_users_of_covid-19_exposure#3587485) article).","responses":{"200":{"description":"Successful response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExposureConfiguration"}}}}}}},"/health":{"get":{"description":"Health check. To be used for checking if the server is operational.","responses":{"200":{"description":"Successful response","content":{"text/plain; charset=utf-8":{"schema":{"type":"string","example":"OK"}}}}}}}},"components":{"schemas":{"ExposureConfiguration":{"type":"object","properties":{"minimumRiskScore":{"type":"integer","format":"uint8","example":0},"attenuationLevelValues":{"type":"array","items":{"type":"integer","format":"uint8","example":[1,2,3,4,5,6,7,8]}},"attenuationWeight":{"type":"number","format":"double","example":50},"daysSinceLastExposureLevelValues":{"type":"array","items":{"type":"integer","format":"uint8","example":[1,2,3,4,5,6,7,8]}},"daysSinceLastExposureWeight":{"type":"number","format":"double","example":50},"durationLevelValues":{"type":"array","items":{"type":"integer","format":"uint8","example":[1,2,3,4,5,6,7,8]}},"durationWeight":{"type":"number","format":"double","example":50},"transmissionRiskLevelValues":{"type":"array","items":{"type":"integer","format":"uint8","example":[1,2,3,4,5,6,7,8]}},"transmissionRiskWeight":{"type":"number","format":"double","example":50}}}}},"servers":[{"url":"https://ct-diag-server.v0x.nl/"}]}