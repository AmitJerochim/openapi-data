openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  # Investflex Simulation server
  - description: Investflex Simulation Environment
    url: https://apisim.flexscan.com.br
  - description: Development Environment
    url: https://59716e1f.ngrok.io


  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Investflex/algotrading/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Investflex/Iflexapi/1.0.0
info:
  description: |
    **Investflex Algo Trading Platform API**. We describe here all available APIs to allow users the execution of trading algorithms in our Algorithmic Trading platform. 

    All APIs required authentication token to enable its access. Use the **login** API of the **AUTH** section and to generate an authentication token and Authorize the token using the **AUTHORIZE** button.

    Use the **environment dropdown** to select the proper environment on which execute the strategies. _http://api.flexscan.com.br_ simulation environment is selected by default.

  version: "1.0.0"
  title: Investflex Algo Trading Platform API
  contact:
    email: hernan@investflex.com.br
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: AUTH
    description: Apis for Authentication
  - name: ALGOS
    description: Apis for Algorithmic Trading
  - name: ORDERS
    description: Apis for order handler
  - name: POSITIONS
    description: Apis for user position
  - name: MARKETDATA
    description: Apis for Marketdata requests
  - name: WEBHOOKS
    description: Apis to receive Algos events notifications via webhooks
  - name: ADMIN
    description: Apis for users with admin provileges or developers
  - name: SYSADMIN
    description: Apis for System operation and admin

paths:

  /v1/positions:
    get:
      tags: 
        - POSITIONS
      summary: Get position from a account or User. Only positions of orders sent via Flexscan API will be shown here. Order sent through other platforms will not appear here
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: detailed
          schema: 
            type: integer
          description: pass 1 to detailed records
      description: |
        This endpoint return all positions from a user or a set of user, depending of your rule.
      responses:
        "200":
          description: response position record
          content:
            application/json:
              schema:
                type: object
                properties:
                  num_records:
                    type: integer
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/position_record'
                  next_offset:
                    type: integer
                    example: 25
                  next_offset_link:
                    type: string
                    format: url
                    example: 'https://apisim.flexscan.com.br/v1/positions?limit=25&offset=25'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
          
  /v1/positions/{account}:
    get:
      tags: 
        - POSITIONS
      summary: Get position from a account
      
      parameters:
        - in: path
          name: account   # Note the name is the same as in the path
          required: true
          schema:
            type: string
          description: Account that should be filtered
        - in: query
          name: detailed
          schema: 
            type: integer
          description: pass 1 to detailed records
      description: |
        This endpoint return all position from a account.
      responses:
        "200":
          description: response position record
          content:
            application/json:
              schema:
                type: object
                properties:
                  num_records:
                    type: integer
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/position_record'
                  next_offset:
                    type: integer
                    example: 25
                  next_offset_link:
                    type: string
                    format: url
                    example: 'https://apisim.flexscan.com.br/v1/positions/{account}?limit=25&offset=25'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
          
  /v1/cons/positions:
    get:
      tags: 
        - POSITIONS
      summary: Get all consolidated position from a user
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: detailed
          schema: 
            type: integer
          description: pass 1 to detailed records
        - in: query
          name: key
          schema: 
            type: string
          description: | 
            The type of position to be returned. Possible values: key=account; key=asset; key=stype; key=stype_asset 
        - in: query
          name: value
          schema: 
            type: string
          description: |
            Used together with query parameter 'key'. This param is optional. Ex.: key=asset and value=PETR. Ex2.: key=stype and value=PS
      description: |
        This endpoint return all consolidated position from a user or a set of user, depending of your rule.
      responses:
        "200":
          description: response position record
          content:
            application/json:
              schema:
                type: object
                properties:
                  num_records:
                    type: integer
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/position_cons_record'
              
              
                
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"


          
  /v1/orders:
    post:
      tags:
        - ORDERS
      summary: Sends a single order to exchange
      description: |
      
         This endpoint creates a order that works like a singleOrder strategy. You can edit and cancel the orders more easly than using the algos endpoint.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "202":
          description: response create request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'PENDING NEW'
                  id:
                    type: string 
                    example: 'cb14c95c-2394-4d72-90b6-b5ec7c7cea4f'
                  description:
                    type: string
                    example: 'order sent to exec engine. Please check the follow links for order status updates and others actions.'
                  snapshot_url:
                    format: url
                    example: "http://api.flexscan.com.br/v1/algos/6db71f99-4dc8-4d0d-9d75-00cdeb484319"

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    get:
      tags:
        - ORDERS
      summary: Get the last snapshot from all orders
      parameters:
        - in: query
          name: detailed
          schema: 
            type: integer
          description: pass 1 to detailed records
      description: |
      
         This endpoint get the last order snapshot from autenticated users

      responses:
        "200":
          description: response order record
          content:
            application/json:
              schema:
                type: object
                properties:
                  num_records:
                    type: integer
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/order_record'
                  next_offset:
                    type: integer
                    example: 25
                  next_offset_link:
                    type: string
                    format: url
                    example: 'https://apisim.flexscan.com.br/v1/orders?limit=25&offset=25'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
          
          
  /v1/orders/{id}:
  
    get:
      tags:
        - ORDERS
      summary: Get the last snapshot for the passed order id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: detailed
          schema: 
            type: integer
          description: pass 1 to detailed records
      description: |
      
         This endpoint get the last order snapshot for passed id

      responses:
        "200":
          description: response order record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order_record'
                  
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
  
    put:
      tags:
        - ORDERS
      summary: Modify a active order
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        
      description: |
      
         This endpoint modify a order quantity or price or both.
      
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                qtty:
                  type: integer
                  example: 200
                price:
                  type: number
                  format: double
                  example: 25.0
      responses:
        "202":
          description: response replace request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'PENDING REPLACE'
                  id:
                    type: string 
                    example: 'cb14c95c-2394-4d72-90b6-b5ec7c7cea4f'
                  description:
                    type: string
                    example: 'Order replace request was sent to ExecutionEngine. For updated status, use the get endpoint.'
                  links:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/links_get_collection'
                        - $ref: '#/components/schemas/links_get'
                        - $ref: '#/components/schemas/links_put'
                        - $ref: '#/components/schemas/links_delete'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - ORDERS
      summary: Cancel a active order 
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      description: |
      
         This endpoint cancels a actived order

      responses:
        "202":
          description: response cancel request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'PENDING CANCEL'
                  id:
                    type: string 
                    example: 'cb14c95c-2394-4d72-90b6-b5ec7c7cea4f'
                  description:
                    type: string
                    example: 'Cancel request sent to executionEngine. Please check the order status using GET endpoint.'
                  links:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/links_get_collection'
                        - $ref: '#/components/schemas/links_get'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
  
  /v1/orders/filter:
    get:
      tags:
        - ORDERS
      summary: Get filtered orders
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: detailed
          schema: 
            type: integer
          description: pass 1 to detailed records
        - in: query
          name: orderstatus
          schema: 
            type: string
          description: Order status to be filtered; 0=NEW; 1=PARTIALLY_FILLED; 2=FILLED; 4=CANCELED; 5=REPLACED; 8=REJECTED; C=EXPIRED
          
        - in: query
          name: account
          schema: 
            type: string
          description: Account to be filtered
        - in: query
          name: sponsor
          schema: 
            type: string
          description: Sponsor to be filtered
        - in: query
          name: strategyid
          schema: 
            type: string
          description: StrategyId to be filtered
        
      description: |
      
         This endpoint create a filter and returns a list off filterd orders according to passed filter. You can use just a parameter filter or all together, like the example.
    
      responses:
        "200":
          description: response order record
          content:
            application/json:
              schema:
                type: object
                properties:
                  num_records:
                    type: integer
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/order_record'
                  next_offset:
                    type: integer
                    example: 25
                  next_offset_link:
                    type: string
                    format: url
                    example: 'https://apisim.flexscan.com.br/v1/orders/filter?limit=25&offset=25'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/connect/login:
    post:
      tags:
        - AUTH
      summary: Return auth token based on login credentials
      operationId: getAuthToken
      description: |
        Return auth token based on login credentials. Username and password must be informed as params.

        The authentication token will be returned on the response body. Copy this token and paste into the token text input of the **AUTHORIZE** button. Once enable all other APIs will use this token to access services. Token has a limited duration, so if you receive an authorization error afetar a while, repeat this procedure to authenticate with a new token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "6db71f99-4dc8-4d0d-9d75-00cdeb484319"
                    description: |
                      Authentication token

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/webhooks:
    get:
      tags:
        - WEBHOOKS
      summary: Return Webhooks registered for this user
      operationId: getWebhooks
      description: |
        Return all webhooks currently registered for this user
      responses:
        "200":
          $ref: "#/components/schemas/WebhookRecords"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      tags:
        - WEBHOOKS
      summary: Register a new Webhook for this user
      operationId: registerWebhook
      description: |
        Register a new webhook for this User.
        Each user can register up to 100 webhooks. 
        Restriction; only one webhook is allowed for target type and target id, even if the triggers are different
      responses:
        "200":
          $ref: "#/components/schemas/Webhook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Webhook"

    delete:
      tags:
        - WEBHOOKS
      summary: Delete all Webhooks registered for this user
      operationId: delWebhooks
      description: |
        Delete all Webhooks registered for this user
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/webhooks/{webhook_id}:
    get:
      tags:
        - WEBHOOKS
      summary: Return Webhooks registered with the given webhook_id
      operationId: getWebhook
      description: |
        Return Webhooks registered with the given webhook_id for the current user
      parameters:
        - name: webhook_id
          in: path
          description: The webhook identifier
          required: true
          schema:
            $ref: "#/components/schemas/ID_t"
      responses:
        "200":
          $ref: "#/components/schemas/Webhook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

    delete:
      tags:
        - WEBHOOKS
      summary: Delete the Webhook with the given webhook_id
      operationId: delWebhook
      description: |
        Delete the Webhook with the given webhook_id registered for this user
      parameters:
        - name: webhook_id
          in: path
          description: The webhook identifier
          required: true
          schema:
            $ref: "#/components/schemas/ID_t"
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/algos:
    get:
      tags:
        - ALGOS
      summary: Return list of Strategies created during the current day
      operationId: getStrategies
      description: |
        By passing in the appropriate options, you can search for
        available strategies in the system
      parameters:
        - $ref: "#/components/parameters/username_p"
        - $ref: "#/components/parameters/sponsor_p"
        - $ref: "#/components/parameters/status_p"
        - $ref: "#/components/parameters/strategycode_p"
        - $ref: "#/components/parameters/detailed_p"
        - $ref: "#/components/parameters/limit_p"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

    post:
      tags:
        - ALGOS
      summary: Send a new Algo to Execution Server
      operationId: executeStrategy
      description: |
        Send a new Strategy to the Execution Engine for execution. The strategy parameters must be infromed the request body in JSON format. <br><br>

        Select the target strategy parameters on the **Request body** dropdown and fill in with the execution parameters in order to send the strategy to execution. <br><br>

        Some parameters are filled with default values, please chech the consistency of this default values before sending the strategy request. <br><br>

        The stragey codes (that appears after the # on the dropdown values) are <br><br>

        * sorder (Single Order)
        * grddin (Gradiente Linear)
        * grdlin (Gradiente Dinamico)
        * spread (Spreads 2-6 pontas)
        * lgshort (Long & Short)
        * financ (Financiamento)
        * twap (Time Weighting Average Price)
        * pov (Participation of Volume)
        * iceberg (Iceberg Order)
        * boffer (Best Offer)
        * mit (Market If Touch Order)
        * skew (Skew)
        * cvvol (Compra e Venda de Vol)
        * fxorder (Flex Order)
        * sniper (Sniper Order)
        * arbintf (Arbitragem Inteiro Fracionario)

      responses:
        "202":
          description: Item Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "PENDING NEW"
                  desc:
                    type: string
                    example: |
                      Strategy sent to exec engine. Please check the snapshot url for status updates.'
                  snapshot_url:
                    type: string
                    format: url
                    example: "http://api.flexscan.com.br/v1/algos/6db71f99-4dc8-4d0d-9d75-00cdeb484319"
                  ClOrdID:
                    $ref: "#/components/schemas/ID_t"
                  CommandID:
                    $ref: "#/components/schemas/ID_t"

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"

      requestBody:
        content:
          # Workaround to allow polimorphism of body requests in the same endpoint
          # even with the extra #tags after application/json its working on server side
          application/json#sorder:
            schema:
              $ref: "#/components/schemas/ABMessage-sorder"
          application/json#fxorder:
            schema:
              $ref: "#/components/schemas/ABMessage-fxorder"
          application/json#boffer:
            schema:
              $ref: "#/components/schemas/ABMessage-boffer"
          application/json#sniper:
            schema:
              $ref: "#/components/schemas/ABMessage-sniper"
          application/json#mit:
            schema:
              $ref: "#/components/schemas/ABMessage-mit"
          application/json#spread:
            schema:
              $ref: "#/components/schemas/ABMessage-spread"
          application/json#lgshort:
            schema:
              $ref: "#/components/schemas/ABMessage-lgshort"
          application/json#financ:
            schema:
              $ref: "#/components/schemas/ABMessage-financ"
          application/json#grddin:
            schema:
              $ref: "#/components/schemas/ABMessage-grddin"
          application/json#grdlin:
            schema:
              $ref: "#/components/schemas/ABMessage-grdlin"
          application/json#arbintf:
            schema:
              $ref: "#/components/schemas/ABMessage-arbintf"
          application/json#twap:
            schema:
              $ref: "#/components/schemas/ABMessage-twap"
          application/json#pov:
            schema:
              $ref: "#/components/schemas/ABMessage-pov"
          application/json#iceberg:
            schema:
              $ref: "#/components/schemas/ABMessage-iceberg"

        description: Strategy to execute

  /v1/algos/{ClOrdID}:
    get:
      tags:
        - ALGOS
      summary: Return the Algo with the ClOrdID specified
      operationId: getStrategy
      description: Return the Algo with the ClOrdID specified
      parameters:
        - name: ClOrdID
          in: path
          description: The ClOrdID identified the algo to apply the edition to
          required: true
          schema:
            $ref: "#/components/schemas/ID_t"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    put:
      tags:
        - ALGOS
      summary: Send a Algo Edition for a running strategy to Execution Server
      operationId: editStrategy
      description: Send a Algo Edition for a running strategy to modify strategy execution parameters
      parameters:
        - name: ClOrdID
          in: path
          description: The ClOrdID identified the Algo to apply the edition to
          required: true
          schema:
            $ref: "#/components/schemas/ID_t"
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
      requestBody:
        content:
          # Workaround to allow polimorphism of body requests in the same endpoint
          # even with the extra #tags after application/json its working on server side
          application/json#sorder-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-sorder-edit"
          application/json#fxorder-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-fxorder-edit"
          application/json#boffer-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-boffer-edit"
          application/json#sniper-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-sniper-edit"
          application/json#mit-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-mit-edit"
          application/json#spread-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-spread-edit"
          application/json#lgshort-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-lgshort-edit"
          application/json#financ-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-financ-edit"
          application/json#grddin-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-grddin-edit"
          application/json#grdlin-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-grdlin-edit"
          application/json#arbintf-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-arbintf-edit"
          application/json#twap-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-twap-edit"
          application/json#pov-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-pov-edit"
          application/json#iceberg-edit:
            schema:
              $ref: "#/components/schemas/ABMessage-iceberg-edit"

        description: Strategy to execute

  /v1/algos/{ClOrdID}/commands:
    post:
      tags:
        - ALGOS
      summary: Send a Command for a running Algo
      operationId: executeStrategyCommand
      description: Execute Command available for a given algo (cancel, suspend, resume)
      parameters:
        - name: ClOrdID
          in: path
          description: The ClOrdID identified the Algo to apply the command to
          required: true
          schema:
            $ref: "#/components/schemas/ID_t"
        - name: Action
          in: query
          schema:
            type: string
            enum: ["cancel", "suspend", "resume"]
            description: The type of command to execute (note that not all commands could be available for all parameters of strategies)
        - name: Mark
          in: query
          schema:
            type: string
            description: a text or comment to relate to this command
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"


  /v1/commands:
    get:
      tags:
        - ALGOS
      summary: Return the list of all Commands sent
      operationId: getCommands
      description: |
        Return the list all Commands sent for current user
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

    post:
      tags:
        - ALGOS
      summary: Post a command not related with specific strategies
      description: |
        Execute Commands non related with the flow of execution fo an Algo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Command"
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"


  /v1/exchanges:
    get:
      tags:
        - MARKETDATA
      summary: Return list of Exchanges available
      operationId: getExchanges
      description: |
        Return list of Exchanges available for querying

      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}:
    get:
      tags:
        - MARKETDATA
      summary: Return the Exchange with the exchange_id specified
      operationId: getExchange
      description: Return the Exchange with the exchange_id specified
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/symbols:
    get:
      tags:
        - MARKETDATA
      summary: Return the list of symbols available in a given Exchange
      operationId: getExchangeSymbols
      description: Return the list of symbols available in a given Exchange. Can be filtered by SecurityClass
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
        - $ref: "#/components/parameters/securityclass_p"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/holidays:
    get:
      tags:
        - MARKETDATA
      summary: Return the list of holidays for the Exchange
      operationId: getExchangeHolidays
      description: Return the list of holidays for the Exchange
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/params:
    get:
      tags:
        - MARKETDATA
      summary: Return the list of Exchange parameters
      operationId: getExchangeParams
      description: Return the list of Exchange parameters
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/instruments:
    get:
      tags:
        - MARKETDATA
      summary: Return the list of Instrument definitions available in a given Exchange
      operationId: getExchangeInstruments
      description: Return the list of Instrument definitions available in a given Exchange
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
        - $ref: "#/components/parameters/securityclass_p"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/instruments/{symbol}:
    get:
      tags:
        - MARKETDATA
      summary: Return an Instrument identified by symbol
      operationId: getExchangeInstrument
      description: Return the Instrument identified by symbol
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
        - name: symbol
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Symbol_t"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/instruments/{symbol}/snapshot:
    get:
      tags:
        - MARKETDATA
      summary: Return the last quote snapshot from an Instrument defined by symbol
      operationId: getExchangeInstrumentSnapshot
      description: Return the last quote snapshot from an Instrument defined by symbol
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
        - name: symbol
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Symbol_t"
        - $ref: "#/components/parameters/detailed_p"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/instruments/{symbol}/trades:
    get:
      tags:
        - MARKETDATA
      summary: Return the trades for an Instrument defined by symbol
      operationId: getExchangeInstrumentTrades
      description: Return the trades for an Instrument defined by symbol
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
        - name: symbol
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Symbol_t"
        - $ref: "#/components/parameters/limit_p"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/instruments/{symbol}/quotes/last:
    get:
      tags:
        - MARKETDATA
      summary: Return the last quote for an Instrument defined by symbol
      operationId: getExchangeInstrumentLastQuote
      description: Return the last quote for an Instrument defined by symbol
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
        - name: symbol
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Symbol_t"
        - $ref: "#/components/parameters/detailed_p"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/instruments/{symbol}/books/last:
    get:
      tags:
        - MARKETDATA
      summary: Return the last book for an Instrument defined by symbol
      operationId: getExchangeInstrumentLastBook
      description: Return the last book for an Instrument defined by symbol
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
        - name: symbol
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Symbol_t"
      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/instruments/{symbol}/derivatives:
    get:
      tags:
        - MARKETDATA
      summary: Return the list of derivatives Instruments for an Instrument defined by symbol
      operationId: getExchangeInstrumentDerivatives
      description: Return the list of derivatives Instruments trades for an Instrument defined by symbol
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
        - name: symbol
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Symbol_t"
        - name: maturityDate
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/MaturityDate_t"
        - name: initStrike
          description: Strike init interval to filter
          in: query
          required: false
          schema:
            type: number
        - name: endStrike
          description: Strike end interval to filter
          in: query
          required: false
          schema:
            type: number
        - name: securityType
          description: The type of derivatives to filter
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DerivativesSecurityClass_t"
        - $ref: "#/components/parameters/optiontype_p"
        - $ref: "#/components/parameters/detailed_p"

      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/instruments/{symbol}/derivatives.symbols:
    get:
      tags:
        - MARKETDATA
      summary: Return the list of derivatives symbols for an Instrument defined by symbol
      operationId: getExchangeInstrumentDerivativesSymbols
      description: Return the list of derivatives symbols for an Instrument defined by symbol
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
        - name: symbol
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Symbol_t"
        - name: maturityDate
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/MaturityDate_t"
        - name: initStrike
          description: Strike init interval to filter
          in: query
          required: false
          schema:
            type: number
        - name: endStrike
          description: Strike end interval to filter
          in: query
          required: false
          schema:
            type: number
        - name: securityType
          description: The type of derivatives to filter
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/DerivativesSecurityClass_t"
        - $ref: "#/components/parameters/optiontype_p"
        - $ref: "#/components/parameters/detailed_p"

      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /v1/exchanges/{exchange_id}/maturitydates:
    get:
      tags:
        - MARKETDATA
      summary: Return the list of maturity dates of this Exchange for a type of instruments
      operationId: getExchangeMaturityDates
      description: Return the list of maturity dates of this Exchange for a type of instruments
      parameters:
        - name: exchange_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ExchangeID_t"
        - name: securityClass
          description: The type of securities to filter
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SecurityClass_t"

      responses:
        "200":
          $ref: "#/components/responses/OkStrategies"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
          
          
  /v1/calc/mktPriceSpread:
    post:
      tags:
        - CALC
      summary: Return the current market price spread of an operation expressed by Legs
      operationId: mktPriceSpread
      description: Spread is calculated based on the legs market prices, quantities and side

      responses:
        "200":
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: number
                    example: -0.3560

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CalcLegs"

  /v1/calc/mktFinSpread:
    post:
      tags:
        - CALC
      summary: Return the current market financial spread of an operation expressed by Legs
      operationId: mktFinSpread
      description: Spread is calculated based on the legs market prices, quantities and side

      responses:
        "200":
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: number
                    example: -0.3560

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CalcLegs"

  /v1/calc/mktLsPriceRatio:
    post:
      tags:
        - CALC
      summary: Return the Long/Short current market price ratio of a pair of instruments
      operationId: mktLsPriceRatio
      description: Long/Short current market price ratio of a pair of instruments

      responses:
        "200":
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: number
                    example: -0.3560

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LongShortPair"
              
  /v1/calc/mktSlPriceRatio:
    post:
      tags:
        - CALC
      summary: Return the Short/Long current market price ratio of a pair of instruments
      operationId: mktSlPriceRatio
      description: Short/Long current market price ratio of a pair of instruments

      responses:
        "200":
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: number
                    example: -0.3560

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LongShortPair"

  /v1/calc/mktLsPriceDiff:
    post:
      tags:
        - CALC
      summary: Return the Long/Short current market price diff of a pair of instruments
      operationId: mktLsPriceDiff
      description: Long/Short current market price diff of a pair of instruments

      responses:
        "200":
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: number
                    example: -0.3560

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LongShortPair"


  /v1/calc/mktSlPriceDiff:
    post:
      tags:
        - CALC
      summary: Return the Short/Long current market price diff of a pair of instruments
      operationId: mktSlPriceDiff
      description: Short/Long current market price diff of a pair of instruments

      responses:
        "200":
          description: Result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: number
                    example: -0.3560

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LongShortPair"



              
components:
  schemas:
    StrategyRecords:
      type: object
      properties:
        records:
          type: object
          items:
            $ref: "#/components/schemas/Strategy"

    Strategy:
      type: object
      required:
        - StrategyID
        - ClOrdID
      properties:
        ClOrdID:
          $ref: "#/components/schemas/ID_t"
        StrategyID:
          $ref: "#/components/schemas/ID_t"
        Sponsor:
          type: string
          example: "flx"
        Name:
          type: string
          example: "Estrategia tendencia PETR4"
        Accounts:
          type: array
          items:
            type: string
          example: ["88003BVSP", "88004BVSP"]
        Legs:
          type: array
          items:
            $ref: "#/components/schemas/Leg"
        CreateDate:
          type: string
          format: date-time
          example: "2018-08-06 15:03:21"
        TargetStrategy:
          type: integer
          example: 1032
        StrategyCode:
          $ref: "#/components/schemas/StrategyCode_t"
        UserName:
          type: string
          example: "flx_user01"
        ServiceGroup:
          type: string
          example: "default"
        Status:
          type: integer
          example: 7
        LegDesc:
          type: string
          example: "V 100 PETR4 C 100 VALE3"
        CustomParameters:
          type: object
          example:
            "value": "22"
            "EntrancePrice": "8.56"
            "IncrementPriceStepEntrance": "5"
            "IncrementPriceStopGain": "10"
            "InitSuspended": "N"
            "MaximumZeroTimeWindow": "10"
            "NumberOfEntrances": "5"
            "NumberOfMinPriceIncrementsToStart": "5"
            "OrderQuantity": "10"
            "PreservationPercentual": "45"
            "PreservationStartTrigger": "30"
            "PreservationStep": "35"
            "RetroalimentParam1": "5"
            "RetroalimentTimeWindow": "15"
            "RetroalimentType": "1"
            "SendStopLossOnEnd": "Y"
            "StopGainGlobalFinance": "5000"
            "StopLossFinance": "1000"
            "UsePreservation": "Y"
            "UseRetroaliment": "Y"
            "UseSecurityStop": "value"
            "UseStopGainGlobalFinance": "Y"
            "ZerarStopLoss": "Y"


    LongShortPair:
      required:
        - LongSecurityExchange
        - LongSymbol
        - ShortSecurityExchange
        - ShortSymbol

      properties:
        LongSecurityExchange:
          type: string
          example: "XBMF"
        LongSymbol:
          type: string
          example: "PETR4"
        ShortSecurityExchange:
          type: string
          example: "XBMF"
        ShortSymbol:
          type: string
          example: "PETR3"


          
    
    CalcLegs:
      type: object
      properties:
        Legs:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: object
    
            properties:
              LegQuantity:
                type: integer
                example: 100
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"                


    Leg:
      required:
        - LegRefID
      properties:
        ILegAllocAccount:
          type: string
          example: "88004BVSP"
        LegQuantity:
          type: integer
          example: 100
        LegResting:
          type: string
          example: "Y"
        LegSecurityExchange:
          type: string
          example: "XBMF"
        LegSide:
          type: string
          example: "2"
        LegSymbol:
          type: string
          example: "PETR4"

    StrategyParameters:
      type: object
      properties:
        BasketId:
          type: string
          example: "my-basket"
          description: If this strategy is part of a Basket, put the string that identifies the basket on this field
        ExpireDate:
          type: string
          format: date
          example: "20180801"
          description: Not used on this version. All strategy will have expiration date equal to currente day on this version (any value on this field will be ignored)
        Name:
          type: string
          example: "Estrategia com PETR4"
          description: The name of the strategy defined by the user
        InitTime:
          type: string
          format: time
          description: |
            Time the Strategy will start. Strategy will be waiting in SCHEDULED status if InitTIme is ahead of current time or will start imediately if InitTime is behinf current time
          example: "09:00:00"
          default: "09:00:00"
        EndTime:
          type: string
          format: time
          description: |
            The time this strategy will be stopped. Must be greater then InitTime
          example: "17:53:00"
          default: "17:53:00"
        Text:
          type: string
          example: "A comment for my strategy"
      required: ["Name", "InitTime", "EndTime"]
      
    Order:
      type: object
      required:
        - symbol
        - side
        - qtty
        - price
        - ordType
        - account
        - exchange
      properties:
        symbol:
          type: string
          example: "PETR4"
        side:
          type: integer
          enum: [1,2]
          description: |
            1 = BUY 2 = SELL
          example: 1
        qtty:
          type: integer
          minimum: 1
          description: |
            Number of contracts to trade.
          example: 100
        price:
          type: number
          format: double
          minimum: 0.01
          example: 29.35
        ordType:
          type: integer
          enum: [1,2]
          example: 2
          description: 1=MARKET; 2=LIMIT
        account:
          type: string
          example: '2342315'
        exchange:
          type: string
          enum: ['XBSP','XBMF']
          example: 'XBSP'
          description: XBSP=BOVESPA; XBMF=BMF
          
          
    Filter:
      type: object
      minProperties: 1
      maxProperties: 4
      properties:
        orderstatus:
          type: string
          example: "2"
        account:
          type: string
          example: "23423"
        sponsor:
          type: string
          example: "flx"
        strategyid:
          type: string
          example: "332074B02F71EE726F552A2EC287485F"

    Login:
      type: object
      required:
        - user
        - psswd
      properties:
        user:
          type: string
          example: "flx_pro1"
        psswd:
          type: string
          format: password
          example: "123456"

    Command:
      type: object
      required:
        - command
      properties:
        command:
          type: string
          enum: ["pub_snaps", "refresh_snaps"]
          description: |
            The command to execute

    WebhookRecords:
      type: object
      properties:
        records:
          type: object
          items:
            $ref: "#/components/schemas/Webhook"
    Webhook:
      type: object
      properties:
        target:
          type: object
          properties:
            id:
              type: string
              example: account001
              description: |
                Identifier of the webhook target of the webhook
                Input parameter. Must be informed by requester
            type:
              type: string
              example: user
              enum: ["sponsor", "user", "account", "algo"]
              description: |
                The target of the webhook (sponsor, user, account, algo)
                It indicates on which dimension the webhook will be notified
                Input parameter. Must be informed by requester

        url:
          type: string
          format: uri
          example: https://domainname/callback
          description: |
            The address that will be called back when an event for the trigger specified happens
            A POST request will be made with the appropriate object on this url
            Input parameter. Must be informed by requester
        triggers:
          type: array
          items:
            type: string
            enum: ["algo.changed", "algo.all"]
            example: algo.changed
            description: |
              The type of event that will activate the webhook
              Currently supported events are |
                  <algo.changed> will send a snapshot whenever the strategy has some relevant changes (status, qtty executed) 
                  <algo.all> will send a snapshot every time the strategy changes even if no status or exec qtty are changed(can send a huge number of snapshots)
              Input parameter. Must be informed by requester
        remove_previous:
          type: integer
          format: int8
          minimum: 0
          maximum: 1
          default: 0
          description: |
            Forza a remoção de webhooks previos se existirem para este usuário

        created_at:
          type: string
          format: date-time
          example: 2018-08-20 18:00:03
          description: |
            Webhook creation datetime
            Output parameter. Will be generated internally
        created_by:
          type: string
          example: flx_pro1
          description: |
            Username who created the webhook
            Output parameter. Will be generated internally
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: |
            Unique identifier of the webhook
            Output parameter. Will be generated internally
                  

    ABMessage-grddin:
      type: object
      description: |
        Body definition for Gradiente Dinamico Strategy.
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: grddin
          description: Strategy code for Gradiente Dinamico strategy (grddin)
        CustomParameters:
          type: object
          properties:
            EntrancePrice:
              $ref: "#/components/schemas/Price_t"
            NumberOfEntrances:
              type: number
              example: 10
              description: Number of entrance orders to place on order book
            StopLossFinance:
              type: number
              example: 100
            IncrementPriceStopGain:
              type: number
              example: 20
            StopGainGlobalFinance:
              type: number
              example: 1000
            UseStopGainGlobalFinance:
              $ref: "#/components/schemas/BoolFieldY_t"
            SendStopLossOnEnd:
              $ref: "#/components/schemas/BoolFieldY_t"
            UseRetroaliment:
              $ref: "#/components/schemas/BoolFieldY_t"
            RetroalimentType:
              type: number
              example: 5
            RetroalimentTimeWindow:
              type: number
              example: 60
            MaximumZeroTimeWindow:
              type: number
              example: 10
            RetroalimentParam1:
              type: number
              example: 1.0
            NumberOfMinPriceIncrementsToStart:
              type: number
              example: 10
            IncrementPriceStepEntrance:
              type: number
              example: 10
            OrderQuantity:
              type: number
              example: 10
            UsePreservation:
              $ref: "#/components/schemas/BoolFieldY_t"
            PreservationStartTrigger:
              type: number
              example: 10
            PreservationPercentual:
              type: number
              example: 20
            PreservationStep:
              type: number
              example: 20
            ZerarStopLoss:
              $ref: "#/components/schemas/BoolFieldY_t"
            UseSecurityStop:
              $ref: "#/components/schemas/BoolFieldY_t"
            InitSuspended:
              $ref: "#/components/schemas/BoolFieldN_t"
            UseStartWhenCross:
              type: string
              enum: ["Y", "N"]
              example: "Y"
              description: |
                Iniciar ao cruzar
            StartWhenCross:
              type: number
              example: 1.05
            UseStopByPrice:
              type: string
              enum: ["Y", "N"]
              example: "Y"
              description: |
                Stop Loss por preço
            StopByPrice:
              type: number
              example: 1.05
            BypassFirewall:
              type: string
              default: "N"
              example: "N"
          required:
            [
              "EntrancePrice",
              "NumberOfEntrances",
              "StopLossFinance",
              "IncrementPriceStopGain",
              "IncrementPriceStepEntrance",
              "OrderQuantity",
            ]

        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegQuantity:
                type: integer
                example: 100

    ABMessage-grdlin:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: grdlin
          description: Strategy code for Gradiente Linear strategy (grdlin)
        CustomParameters:
          type: object
          properties:
            EntrancePrice:
              $ref: "#/components/schemas/Price_t"
            NumberOfEntrances:
              type: number
              example: 10
            StopLossFinance:
              type: number
              example: 100
            IncrementPriceStopGain:
              type: number
              example: 20
            StopGainGlobalFinance:
              type: number
              example: 1000
            UseStopGainGlobalFinance:
              $ref: "#/components/schemas/BoolFieldY_t"
            SendStopLossOnEnd:
              $ref: "#/components/schemas/BoolFieldY_t"
            NumberOfMinPriceIncrementsToStart:
              type: number
              example: 10
            IncrementPriceStepEntrance:
              type: number
              example: 10
            OrderQuantity:
              type: number
              example: 10
            UsePreservation:
              $ref: "#/components/schemas/BoolFieldY_t"
            PreservationStartTrigger:
              type: number
              example: 10
            PreservationPercentual:
              type: number
              example: 20
            PreservationStep:
              type: number
              example: 20
            ZerarStopLoss:
              $ref: "#/components/schemas/BoolFieldY_t"
            UseSecurityStop:
              $ref: "#/components/schemas/BoolFieldY_t"
            InitSuspended:
              $ref: "#/components/schemas/BoolFieldN_t"
            UseStartWhenCross:
              type: string
              enum: ["Y", "N"]
              example: "Y"
              description: |
                Iniciar ao cruzar
            StartWhenCross:
              type: number
              example: 1.05
            UseStopByPrice:
              type: string
              enum: ["Y", "N"]
              example: "Y"
              description: |
                Stop Loss por preço
            StopByPrice:
              type: number
              example: 1.05
            BypassFirewall:
              type: string
              default: "N"
              example: "N"

          required:
            [
              "EntrancePrice",
              "NumberOfEntrances",
              "StopLossFinance",
              "IncrementPriceStopGain",
              "IncrementPriceStepEntrance",
              "OrderQuantity",
            ]
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegQuantity:
                type: integer
                example: 100

    ABMessage-sorder:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: sorder
          description: Strategy code for Single Order strategy (sorder)

        CustomParameters:
          type: object
          properties:
            PriceLimit:
              type: number
              example: 30.05
              description: Price to place the order

        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegQuantity:
                type: integer
                example: 100
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegOrdType:
                type: string
                enum: ["1", "2"]
                description: |
                  The type of the order

                  * 1 = Market
                  * 2 = Limit

    ABMessage-fxorder:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: fxorder
          description: Strategy code for Flex Order strategy (fxorder)
        CustomParameters:
          type: object
          properties:
            OrderQuantity:
              type: integer
              example: 100
            CustomOrdType:
                type: integer
                enum: [1,2,3,4]
                description: | 
                    1 = MARKET; 2 = START; 3 = STOP; 4 = LIMIT
            StartPriceTrigger:
                type: number
                example: 24
                description: |
                    Preço para envio da ordem de entrada. Deve ser populado quando CustomOrdType é igual a START ou LIMIT.
            EntranceExecPrice:
                type: number
                example: 24
                description: | 
                    Preço executado na ordem de entrada. Deve ser populado quando CustomOrdType é igual a STOP.
            ReversionType:
                type: integer
                enum: [1,2,3]
                description: | 
                    1 = REVERT_ON_ENDTIME_OR_ON_CANCEL; 2 = REVERT_ON_ENDING_AUCTION_OR_ON_CANCEL; 3 = REVERT_JUST_ON_GAIN_OR_LOSS_TRIGGERED
            StopType:
                type: integer        
                enum: [1,2,3]
                description: | 
                    1 = STOP_GAIN_LOSS; 2 = STOP_MOVING; 3 = STOP_PARTIAL
            TriggerEntryType:
                type: number
                enum: [1,2]
                description: | 
                    1 = POINTS; 2 = PERCENTAGE
            StopLoss:
                type: number
                example: 0.10
            StopGain:
                type: number
                example: 0.10
                description: | 
                    Usar apenas quando o parâmetro StopType é igual a 1 = STOP_GAIN_LOSS.
            UseLevel3:
                type: string
                enum: ["Y","N"]
                description: | 
                    Define se deve ser usado dois ou três níveis de parcial do gain.
            StopGainL1:
                type: number
                example: 0.10
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL.
            OrderQuantityL1:
                type: number
                example: 500
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL.
            StopGainL2:
                type: number
                example: 0.11
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL; Deve ter o valor maior do que o gain anterior
            OrderQuantityL2:
                type: number
                example: 300
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL.
            StopGainL3:
                type: number
                example: 0.12
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL e o UseLevel3 for Y; Deve ter o valor maior do que o gain anterior
            OrderQuantityL3:
                type: number
                example: 200
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL e o UseLevel3 for Y;
            BypassFirewall:
                type: string
                default: "N"
                example: "N"

        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object

            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegQuantity:
                type: integer
                example: 100
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegOrdType:
                type: string
                enum: ["1", "2", "3", "S"]
                description: |
                  * 1 = Market
                  * 2 = Limit
                  * 3 = Stop
                  * 4 = Scheduled

    ABMessage-boffer:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: boffer
          description: Strategy code for Best Offer Algo (boffer)

        CustomParameters:
          type: object
          properties:
            PriceLimit:
              type: number
              example: 42.00
              description: Limit Price to place the orders
            InitSuspended:
              $ref: "#/components/schemas/BoolFieldN_t"

        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegQuantity:
                type: integer
                example: 100
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegMaxClipSize:
                type: integer
                description: |
                  The max size (qtty) of each order to send
                example: 100

    ABMessage-sniper:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: sniper
          description: Strategy code for Sniper Algo (sniper)

        CustomParameters:
          type: object
          properties:
            PriceLimit:
              type: number
              example: 42.00
              description: Limit Price to place the orders
            InitSuspended:
              $ref: "#/components/schemas/BoolFieldN_t"

        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegQuantity:
                type: integer
                example: 100
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"

    ABMessage-mit:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: mit
          description: Strategy code for Market if touch Algo (mit)

        CustomParameters:
          type: object
          properties:
            PriceLimit:
              type: number
              example: 42.00
              description: Limit Price to place the orders
            RestingPrice:
              type: number
              example: 12.42
              description: |
                Diferença no preço de apregoamento
            RestingQuantity:
              type: integer
              example: 100
              description: |
                Quantidade de apregoamento
            InitSuspended:
              $ref: "#/components/schemas/BoolFieldN_t"
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegQuantity:
                type: integer
                example: 100
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegMaxClipSize:
                type: integer
                description: |
                  The max size (qtty) of each order to send
                example: 500
              LegMinClipSize:
                type: integer
                description: |
                  The min size (qtty) of each order to send
                example: 100

    ABMessage-spread:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          enum: ["spread", "spread3p", "spread4p"]
          description: |
            This param must be named accordingly with the number of the legs in the strategy: 2 legs = spread; 3 legs = spread3p; 4 legs = spread4p
        CustomParameters:
          type: object
          properties:
            ExecStrategy:
              type: integer
              default: 2
            ExecutionType:
              type: integer
              enum: [0,1]
              description: |
                Type of execution. 0 = Entrada, 1 = Gain/Loss
            ToMarketTriggerValueEnabled:
              type: string
              enum: ["Y", "N"]
              description: |
                If ExecutionType = 1, use "Y", otherwise use default value "N"
            ToMarketTriggerValue:
              type: number
              example: 0.01
              description: |
                If ExecutionType = 1 it's the value of the loss, otherwise it can be ignored. If Trigger = 1, the value accepts floating point numbers, else if Trigger = 11, the value must be only integers
            TriggerValue:
              type: number
              description: |
                If ExecutionType = 1 it's the value of the gain, otherwise if ExecutionType = 0 it's the entrance value. If Trigger = 1, the value accepts floating point numbers, else if Trigger = 11, the value must be only integers
            Trigger:
              type: integer
              enum: [1, 11]
              description: |
                Type of trigger. 1 = Spread, 11 = Dif. Financeiro
            BookDepth:
              type: integer
              minimum: 1
              maximum: 5
              example: 3
            BandPriceRef:
              $ref: "#/components/schemas/BoolFieldN_t"
            BandPriceSymbol:
              $ref: "#/components/schemas/Symbol_t"
            BandPriceExchange:
              $ref: "#/components/schemas/Exchange_t"
            BandPriceHigh:
              type: number
              description: |
                Only if BandPriceRef = "Y"
            BandPriceLow:
              type: number
              description: |
                Only if BandPriceRef = "Y"
            IgnoreOffersLT:
              type: integer
              example: 1
              description: |
                Value must be at least 1, otherwise it will be ignored
            CompensateExec:
              type: integer
              enum: [0, 1, 2]
              example: 2
              description: |
                Type of compensation when unbalanced - 0=No comp, 1=next clip, 2=gradual
            SimulateSniperOnResting:
              $ref: "#/components/schemas/BoolFieldN_t"
            InitSuspended:
              $ref: "#/components/schemas/BoolFieldN_t"
            ExecutionLimit:
              type: integer
              default: 7
              description: |
                Fixed value of 7
            ExecutionLimitValue:
              type: number
              default: 0.0
              description: |
                Fixed value of 0.0
            BypassFirewall:
              type: string
              default: "N"

        StrategyLegs:
          type: array
          description: "The number of items in the Legs array must match the key defined in StrategyCode"
          minItems: 2
          maxItems: 6
          items:
            type: object

            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegQuantity:
                type: integer
                example: 100
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegResting:
                $ref: "#/components/schemas/BoolFieldY_t"
              LegSecurityId:
                type: string
                default: "0"
              LegRefID:
                type: string
              LegRatioQuantity:
                type: number
              LegMaxClipSize:
                type: integer
                minimum: 100
                maximum: 100000
                example: 100
              LegOrdType:
                type: integer
                default: 2
              LegFirstTimeOut:
                type: integer
                minimum: 100
                maximum: 100000
                description: |
                  Time in seconds
              LegRoute:
                type: integer
                default: 1
              

    ABMessage-lgshort:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: lgshort
          description: Strategy code for Long&Short Algo (lgshort)
        CustomParameters:
          type: object
          properties:
            ExecStrategy:
              type: integer
              default: 2
              example: 2
            ExecutionLimit:
              type: integer
              default: 7
              description: |
                Fixed value of 7
            ExecutionLimitValue:
              type: number
              default: 0.0
              description: |
                Fixed value of 0.0
            ExecutionType:
              type: integer
              enum: [0,1]
              description: |
                Type of execution. 0 = Entrada, 1 = Gain/Loss
            ToMarketTriggerValueEnabled:
              type: string
              enum: ["Y", "N"]
              description: |
                If ExecutionType = 1, use "Y", otherwise use default value "N"
            ToMarketTriggerValue:
              type: number
              example: 0.01
              description: |
                If ExecutionType = 1 it's the value of the loss, otherwise it can be ignored. If Trigger = 1, the value accepts floating point numbers, else if Trigger = 11, the value must be only integers
            TriggerValue:
              type: number
              description: |
                If ExecutionType = 1 it's the value of the gain, otherwise if ExecutionType = 0 it's the entrance value. If Trigger = 1, the value accepts floating point numbers, else if Trigger = 11, the value must be only integers
            Trigger:
              type: integer
              enum: [2, 3, 4, 5, 11]
              description: |
                Type of trigger. 
                * 2=ratio,buy/sell, 
                * 3=ratio sell/buy,
                * 4=price diff buy/sell,
                * 5=price diff sell/buy,
                * 11=financeiro
            BookDepth:
              type: integer
              minimum: 1
              maximum: 5
              example: 3
            IgnoreOffersLT:
              type: integer
              example: 1
              description: |
                Value must be at least 1 to be considered, otherwise it will be ignored
            CompensateExec:
              type: integer
              enum: [0, 1, 2]
              example: 2
              description: |
                Type of compensation when unbalanced - 0=No comp, 1=next clip, 2=gradual
            InitSuspended:
              $ref: "#/components/schemas/BoolFieldN_t"

        StrategyLegs:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: object

            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegQuantity:
                type: integer
                example: 100
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegResting:
                $ref: "#/components/schemas/BoolFieldY_t"
              LegMaxClipSize:
                type: integer
                minimum: 100
                maximum: 100000
                example: 100
              LegRoute:
                type: integer
                default: 1
              LegOrdType:
                type: integer
                default: 2
              LegFirstTimeOut:
                type: integer
                minimum: 100
                maximum: 100000
                description: |
                  Time in seconds

    ABMessage-financ:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: financ
          description: Strategy code for Financiamento Algo (financ)
        CustomParameters:
          type: object
          properties:
            ExecStrategy:
              type: integer
              default: 2
              example: 2
            ExecutionLimit:
              type: integer
              default: 7
              example: 7
              description: |
                Fixed value = 7
            ExecutionLimitValue:
              type: number
              default: 0.0
              example: 0.0
              description: |
                Fixed value of 0.0
            ExecutionType:
              type: integer
              enum: [0,1]
              description: |
                Type of execution. 0 = Entrada, 1 = Gain/Loss
            ToMarketTriggerValueEnabled:
              type: string
              enum: ["Y", "N"]
              description: |
                If ExecutionType = 1, use "Y", otherwise use default value "N"
            ToMarketTriggerValue:
              type: number
              example: 0.01
              description: |
                If ExecutionType = 1 it's the value of the loss, otherwise it can be ignored.
            TriggerValue:
              type: number
              description: |
                If ExecutionType = 1 it's the value of the gain, if ExecutionType = 0 it's the entrance value
            Trigger:
              type: integer
              enum: [16]
              description: |
                Type of trigger. 
                * 16=taxa de financiamento
            BookDepth:
              type: integer
              minimum: 1
              maximum: 5
              example: 3
            CompensateExec:
              type: integer
              enum: [0, 1, 2]
              example: 2
              description: |
                Type of compensation when unbalanced - 0=No comp, 1=next clip, 2=gradual
            InitSuspended:
              $ref: "#/components/schemas/BoolFieldN_t"
            BypassFirewall:
              type: string
              default: "N"
            IgnoreOffersLT:
              type: integer
              example: 1
              description: |
                Value must be at least 1 to be considered, otherwise it will be ignored
            SimulateSniperOnResting:
              $ref: "#/components/schemas/BoolFieldN_t"

        StrategyLegs:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: object

            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegQuantity:
                type: integer
                example: 100
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegResting:
                $ref: "#/components/schemas/BoolFieldY_t"
              LegMaxClipSize:
                type: integer
                minimum: 100
                maximum: 100000
                example: 100
              LegRoute:
                type: integer
                default: 1
              LegOrdType:
                type: integer
                default: 2
              LegFirstTimeOut:
                type: integer
                minimum: 100
                maximum: 100000
                description: |
                  Time in seconds

    ABMessage-arbintf:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: arbintf
          description: Arbitragem Inteiro Fracionario Algo (arbintf)
        CustomParameters:
          type: object
          properties:
            Variation:
              type: number
              example: 0.05
            Tunnel:
              type: number
              example: 2.00
            MaxDifSpreadInteiro:
              type: number
              example: 1.00
            TimeOutZeracao:
              type: integer
              example: 15
            SniperType:
              type: integer
              enum: [1, 2, 3]
              description: |
                1=Passivo, 2=Ativo, 3=Ambos
              example: 2
        StrategyLegs:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: object

            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegQuantity:
                type: integer
                example: 100
              LegRatioQuantity:
                type: integer
                example: 1

    ABMessage-twap:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: twap
          description: Time Weighting Average Price
        CustomParameters:
          type: object  
          properties:
            PriceLimit:
              type: number
              example: 24
              description: |
                Limit price, required if LegOrdType = 2
            AgressionLevel:
              type: integer
              enum: [0, 2]
              example: 0
              description: |
                Agression level. 0 = Contra-parte, 2 = Parte
            UsingFinancialVolume:
              type: string
              enum: ["Y", "N"]
              example: "Y"
              description: |
                Flag to use, or don't, financial volume
            MaxFinancialVolume:
              type: number
              example: 100
              description: |
                Financial volume for the strategy, required if UsingFinancialVolume = Y
            LimitByVolume:
              type: string
              enum: ["Y", "N"]
              example: "Y"
              description:
                Flag to limit by volume
            TargetPercent:
              type: number
              example: 10.0
              description: |
                Percentage of participation in the negotiated volume, required if LimitByVolume = Y
            ConsiderCrossOrder:
              type: string
              enum: ["Y", "N"]
              example: "Y"
              description: |
                Consider cross orders? Required if LimitByVolume = Y
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegQuantity:
                type: integer
                example: 100
              LegOrdType:
                type: integer
                enum: [1,2]
                example: 1
                description: |
                  Leg type. 1 = Mercado, 2 = Limite
              LegMaxClipSize:
                type: integer
                minimum: 0
                maximum: 100000
                example: 100
              LegRatioQuantity:
                type: integer
                example: 1
    
    ABMessage-pov:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: pov
          description: Participation of Volume 
        CustomParameters:
          type: object  
          properties:
            TargetPercent:
              type: number
              description: |
                Participation percentage
            ParticipateOwnVolume:
              type: string
              enum: ["Y", "N"]
              example: "Y"
            AggresionLevel:
              type: integer
              enum: [0, 2]
              example: 0
              description:
                Agression level. 0 = Contra-Parte, 2 = Parte
            ConsiderCrossOrder:
              type: string
              enum: ["Y", "N"]
              example: "Y"
            ConsiderCrossOrderNotIntentional:
              type: string
              enum: ["Y", "N"]
              example: "Y"
            ConsiderPriceLimitInVolume:
              type: string
              enum: ["Y", "N"]
              example: "Y"
            PriceLimit:
              type: number
              description: |
                Only if LegOrdType = 2
            InitSuspended:
              $ref: "#/components/schemas/BoolFieldN_t"
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegQuantity:
                type: integer
                example: 100
              LegRoute:
                type: integer
                example: 1
                default: 1
              LegOrdType:
                type: integer
                enum: [1,2]
                example: 1
                description: |
                  Leg type. 1 = Mercado, 2 = Limite
              LegMaxClipSize:
                type: integer
                minimum: 0
                maximum: 100000
                example: 100
              LegFirstTimeOut:
                type: integer
                example: 100
                description:
                  Time in seconds
              LegSecondTimeOut:
                type: integer
                example: 100
                description:
                  Time in seconds

    ABMessage-iceberg:
      type: object
      properties:
        Name:
          $ref: "#/components/schemas/StrategyParameters/properties/Name"
        InitTime:
          $ref: "#/components/schemas/StrategyParameters/properties/InitTime"
        EndTime:
          $ref: "#/components/schemas/StrategyParameters/properties/EndTime"
        ExpireDate:
          $ref: "#/components/schemas/StrategyParameters/properties/ExpireDate"
        Text:
          $ref: "#/components/schemas/StrategyParameters/properties/Text"
        BasketId:
          $ref: "#/components/schemas/StrategyParameters/properties/BasketId"
        StrategyCode:
          type: string
          example: iceberg
          description: Iceberg order
        CustomParameters:
          type: object  
          properties:
            PriceLimit:
              type: number
              example: 24
              description: |
                Price limit
            FixedOpenQuantity:
              type: "string"
              enum: ["Y", "N"]
              example: "Y"
              description: |
                Fixed open quantity?
            InitSuspended:
              $ref: "#/components/schemas/BoolFieldN_t"
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              ILegAllocAccount:
                $ref: "#/components/schemas/Account_t"
              LegSecurityExchange:
                $ref: "#/components/schemas/Exchange_t"
              LegSymbol:
                $ref: "#/components/schemas/Symbol_t"
              LegSide:
                $ref: "#/components/schemas/Side_t"
              LegQuantity:
                type: integer
                example: 100
                description: |
                  Total quantity to be executed
              LegMaxClipSize:
                type: integer
                minimum: 0
                maximum: 100000
                example: 100
                description: |
                  Maximum clip size
    
    ABMessage-grddin-edit:
      type: object
      description: |
        Body definition for Gradiente Dinamico Strategy.
      properties:
        StrategyCode:
          type: string
          example: grddin
          description: Strategy code for Gradiente Dinamico strategy (grddin)
        CustomParameters:
          type: object
          properties:
            EntrancePrice:
              $ref: "#/components/schemas/Price_t"
            NumberOfEntrances:
              type: number
              example: 10
              description: Number of entrance orders to place on order book
            StopLossFinance:
              type: number
              example: 100
            IncrementPriceStopGain:
              type: number
              example: 20
            StopGainGlobalFinance:
              type: number
              example: 1000
            SendStopLossOnEnd:
              $ref: "#/components/schemas/BoolFieldY_t"
            RetroalimentType:
              type: number
              example: 5
            RetroalimentTimeWindow:
              type: number
              example: 60
            MaximumZeroTimeWindow:
              type: number
              example: 10
            RetroalimentParam1:
              type: number
              example: 1.0
            IncrementPriceStepEntrance:
              type: number
              example: 10
            OrderQuantity:
              type: number
              example: 10
            PreservationStartTrigger:
              type: number
              example: 10
            PreservationPercentual:
              type: number
              example: 20
            PreservationStep:
              type: number
              example: 20
            StartWhenCross:
              type: number
              example: 1.05
            UseStopByPrice:
              type: string
              enum: ["Y", "N"]
              example: "Y"
              description: |
                Stop Loss por preço
            StopByPrice:
              type: number
              example: 1.05
            
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              LegRefID:
                type: string

    ABMessage-grdlin-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: grdlin
          description: Strategy code for Gradiente Linear strategy (grdlin)
        CustomParameters:
          type: object
          properties:
            EntrancePrice:
              $ref: "#/components/schemas/Price_t"
            NumberOfEntrances:
              type: number
              example: 10
            StopLossFinance:
              type: number
              example: 100
            IncrementPriceStopGain:
              type: number
              example: 20
            StopGainGlobalFinance:
              type: number
              example: 1000
            UseStopGainGlobalFinance:
              $ref: "#/components/schemas/BoolFieldY_t"
            SendStopLossOnEnd:
              $ref: "#/components/schemas/BoolFieldY_t"
            IncrementPriceStepEntrance:
              type: number
              example: 10
            OrderQuantity:
              type: number
              example: 10
            PreservationStartTrigger:
              type: number
              example: 10
            PreservationPercentual:
              type: number
              example: 20
            PreservationStep:
              type: number
              example: 20
            StartWhenCross:
              type: number
              example: 1.05
            UseStopByPrice:
              type: string
              enum: ["Y", "N"]
              example: "Y"
              description: |
                Stop Loss por preço
            StopByPrice:
              type: number
              example: 1.05
            
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              LegRefID:
                type: string

    ABMessage-sorder-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: sorder
          description: Strategy code for Single Order strategy (sorder)
        CustomParameters:
          type: object
          properties:
            PriceLimit:
              type: number
              example: 30.05
              description: Price to place the order
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              LegQuantity:
                type: integer
                example: 100
              LegOrdType:
                type: string
                enum: [1, 2]
                description: |
                  The type of the order
                  * 1 = Market
                  * 2 = Limit
              LegRefID:
                type: string


    ABMessage-fxorder-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: fxorder
          description: Strategy code for Flex Order strategy (fxorder)
        CustomParameters:
          type: object
          properties:
            StartPriceTrigger:
                type: number
                example: 24
                description: |
                    Preço para envio da ordem de entrada. Deve ser populado quando CustomOrdType é igual a START ou LIMIT.
            StopLoss:
                type: number
                example: 0.10
            StopGain:
                type: number
                example: 0.10
                description: | 
                    Usar apenas quando o parâmetro StopType é igual a 1 = STOP_GAIN_LOSS.
            StopGainL1:
                type: number
                example: 0.10
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL.
            OrderQuantityL1:
                type: number
                example: 500
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL.
            StopGainL2:
                type: number
                example: 0.11
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL; Deve ter o valor maior do que o gain anterior
            OrderQuantityL2:
                type: number
                example: 300
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL.
            StopGainL3:
                type: number
                example: 0.12
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL e o UseLevel3 for Y; Deve ter o valor maior do que o gain anterior
            OrderQuantityL3:
                type: number
                example: 200
                description: | 
                    Deve ser preenchido apenas de o tipo de stop for 3 = STOP_PARTIAL e o UseLevel3 for Y;
            
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              LegRefID:
                type: string

    ABMessage-boffer-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: boffer
          description: Strategy code for Best Offer Algo (boffer)

        CustomParameters:
          type: object
          properties:
            PriceLimit:
              type: number
              example: 42.00
              description: Limit Price to place the orders

        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              LegQuantity:
                type: integer
                example: 100
              LegMaxClipSize:
                type: integer
                description: |
                  The max size (qtty) of each order to send
                example: 100
              LegRefID:
                type: string

    ABMessage-sniper-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: sniper
          description: Strategy code for Sniper Algo (sniper)

        CustomParameters:
          type: object
          properties:
            PriceLimit:
              type: number
              example: 42.00
              description: Limit Price to place the orders

        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              LegQuantity:
                type: integer
                example: 100
              LegRefID:
                type: string

    ABMessage-mit-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: mit
          description: Strategy code for Market if touch Algo (mit)

        CustomParameters:
          type: object
          properties:
            PriceLimit:
              type: number
              example: 42.00
              description: Limit Price to place the orders
            RestingPrice:
              type: number
              example: 12.42
              description: |
                Diferença no preço de apregoamento
            RestingQuantity:
              type: integer
              example: 100
              description: |
                Quantidade de apregoamento
            
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              LegQuantity:
                type: integer
                example: 100
              LegMaxClipSize:
                type: integer
                description: |
                  The max size (qtty) of each order to send
                example: 500
              LegMinClipSize:
                type: integer
                description: |
                  The min size (qtty) of each order to send
                example: 100
              LegRefID:
                type: string

    ABMessage-spread-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          enum: ["spread", "spread3p", "spread4p"]
          description: |
            This param must be named accordingly with the number of the legs in the strategy: 2 legs = spread; 3 legs = spread3p; 4 legs = spread4p
        CustomParameters:
          type: object
          properties:
            ToMarketTriggerValue:
              type: number
              example: 0.01
              description: |
                If ExecutionType = 1 it's the value of the loss, otherwise it can be ignored. If Trigger = 1, the value accepts floating point numbers, else if Trigger = 11, the value must be only integers
            TriggerValue:
              type: number
              description: |
                If ExecutionType = 1 it's the value of the gain, otherwise if ExecutionType = 0 it's the entrance value. If Trigger = 1, the value accepts floating point numbers, else if Trigger = 11, the value must be only integers
            BookDepth:
              type: integer
              minimum: 1
              maximum: 5
              example: 3
            BandPriceHigh:
              type: number
            BandPriceLow:
              type: number
            IgnoreOffersLT:
              type: integer
              example: 1
              description: |
                Value must be at least 1, otherwise it will be ignored
            
        StrategyLegs:
          type: array
          description: "The number of items in the Legs array must match the key defined in StrategyCode"
          minItems: 2
          maxItems: 6
          items:
            type: object
            properties:
              LegQuantity:
                type: integer
                example: 100
              LegResting:
                $ref: "#/components/schemas/BoolFieldY_t"
              LegRefID:
                type: string
              LegMaxClipSize:
                type: integer
                minimum: 100
                maximum: 100000
                example: 100
              LegFirstTimeOut:
                type: integer
                minimum: 100
                maximum: 100000
                description: |
                  Time in seconds
              
    ABMessage-lgshort-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: lgshort
          description: Strategy code for Long&Short Algo (lgshort)
        CustomParameters:
          type: object
          properties:
            ToMarketTriggerValue:
              type: number
              example: 0.01
              description: |
                If ExecutionType = 1 it's the value of the loss, otherwise it can be ignored. If Trigger = 1, the value accepts floating point numbers, else if Trigger = 11, the value must be only integers
            TriggerValue:
              type: number
              description: |
                If ExecutionType = 1 it's the value of the gain, otherwise if ExecutionType = 0 it's the entrance value. If Trigger = 1, the value accepts floating point numbers, else if Trigger = 11, the value must be only integers
            BookDepth:
              type: integer
              minimum: 1
              maximum: 5
              example: 3
            IgnoreOffersLT:
              type: integer
              example: 1
              description: |
                Value must be at least 1 to be considered, otherwise it will be ignored

        StrategyLegs:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: object
            properties:
              LegQuantity:
                type: integer
                example: 100
              LegResting:
                $ref: "#/components/schemas/BoolFieldY_t"
              LegMaxClipSize:
                type: integer
                minimum: 100
                maximum: 100000
                example: 100
              LegFirstTimeOut:
                type: integer
                minimum: 100
                maximum: 100000
                description: |
                  Time in seconds
              LegRefID:
                type: string

    ABMessage-financ-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: financ
          description: Strategy code for Financiamento Algo (financ)
        CustomParameters:
          type: object
          properties:
            ToMarketTriggerValue:
              type: number
              example: 0.01
              description: |
                If ExecutionType = 1 it's the value of the loss, otherwise it can be ignored.
            TriggerValue:
              type: number
              description: |
                If ExecutionType = 1 it's the value of the gain, if ExecutionType = 0 it's the entrance value
            BookDepth:
              type: integer
              minimum: 1
              maximum: 5
              example: 3
            IgnoreOffersLT:
              type: integer
              example: 1
              description: |
                Value must be at least 1 to be considered, otherwise it will be ignored
            
        StrategyLegs:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: object
            properties:
              LegQuantity:
                type: integer
                example: 100
              LegResting:
                $ref: "#/components/schemas/BoolFieldY_t"
              LegMaxClipSize:
                type: integer
                minimum: 100
                maximum: 100000
                example: 100
              LegFirstTimeOut:
                type: integer
                minimum: 100
                maximum: 100000
                description: |
                  Time in seconds
              LegRefID:
                type: string

    ABMessage-arbintf-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: arbintf
          description: Arbitragem Inteiro Fracionario Algo (arbintf)
        CustomParameters:
          type: object
          properties:
            example:
              type: string
              description: |
                Undefined
            
        StrategyLegs:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: object
            properties:
              LegRefID:
                type: string

    ABMessage-twap-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: twap
          description: Time Weighting Average Price
        CustomParameters:
          type: object  
          properties:
            PriceLimit:
              type: number
              example: 24
              description: |
                Limit price, required if LegOrdType = 2
            AgressionLevel:
              type: integer
              enum: [0, 2]
              example: 0
              description: |
                Agression level. 0 = Contra-parte, 2 = Parte
            MaxFinancialVolume:
              type: number
              example: 100
              description: |
                Financial volume for the strategy, required if UsingFinancialVolume = Y
            TargetPercent:
              type: number
              example: 10.0
              description: |
                Percentage of participation in the negotiated volume, required if LimitByVolume = Y
            ConsiderCrossOrder:
              type: string
              enum: ["Y", "N"]
              example: "Y"
              description: |
                Consider cross orders? Required if LimitByVolume = Y

        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              LegQuantity:
                type: integer
                example: 100
              LegOrdType:
                type: integer
                enum: [1,2]
                example: 1
                description: |
                  Leg type. 1 = Mercado, 2 = Limite
              LegMaxClipSize:
                type: integer
                minimum: 0
                maximum: 100000
                example: 100
              LegRefID:
                type: string
                  
    ABMessage-pov-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: pov
          description: Participation of Volume 
        CustomParameters:
          type: object  
          properties:
            example:
              type: string
              description: |
                Undefined            
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              LegRefID:
                type: string

    ABMessage-iceberg-edit:
      type: object
      properties:
        StrategyCode:
          type: string
          example: iceberg
          description: Iceberg order
        CustomParameters:
          type: object  
          properties:
            PriceLimit:
              type: number
              example: 24
              description: |
                Price limit
            
        StrategyLegs:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              LegQuantity:
                type: integer
                example: 100
                description: |
                  Total quantity to be executed
              LegMaxClipSize:
                type: integer
                minimum: 0
                maximum: 100000
                example: 100
                description: |
                  Maximum clip size
              LegRefID:
                type: string
                  
    SystemCommand:
      type: object
      properties:
        Action:
          type: string
          enum: ["PING"]
          description: The type of command to execute

    # Custom data types
    ID_t:
      type: string
      format: uuid
      example: d290f1ee-6c54-4b01-90e6-d701748f0851
    StrategyCode_t:
      type: string
      enum:
        [
          "grddin",
          "grdlin",
          "sorder",
          "spread",
          "lgshort",
          "financ",
          "vwap",
          "twap",
          "pov",
          "iceberg",
          "boffer",
          "mit",
          "peg",
          "skew",
          "cvvol",
        ]
    Account_t:
      type: string
      example: "88004BVSP"
      description: The code of the account to send the order
    Exchange_t:
      type: string
      enum: ["XBSP", "XBMF", "NYSE"]
      example: "XBSP"
      description: The code representing the Exchange
    Side_t:
      type: string
      enum: ["1", "2"]
      example: "1"
      description: |
        The side of the execution
          * 1 = Buy
          * 2 = Sell
    BoolFieldY_t:
      type: string
      enum: ["Y", "N"]
      example: "Y"
    BoolFieldN_t:
      type: string
      enum: ["Y", "N"]
      example: "N"
    Price_t:
      type: number
      example: 3700
    ExchangeID_t:
      description: exchange unique identifier
      type: string
      enum: ["BVMF", "NYSE"]
    SecurityClass_t:
      description: Type of Security
      type: string
      enum:
        [
          "CORP",
          "DTERM",
          "EQUITY",
          "FOPT",
          "FUT",
          "MLEG",
          "SOPT",
          "SPOT",
          "EQUITY:CASH",
          "EQUITY:CS",
          "EQUITY:ETF",
          "EQUITY:FORWARD",
          "EQUITY:INDEX",
          "EQUITY:INDEXOPT",
          "EQUITY:INDEXOPT:CALL",
          "EQUITY:INDEXOPT:PUT",
          "EQUITY:OPT",
          "EQUITY:OPT:CALL",
          "EQUITY:OPT:PUT",
          "EQUITY:OPTEXER",
          "EQUITY:PS",
        ]
    DerivativesSecurityClass_t:
      description: Subset of Type of Derivatives
      type: string
      enum:
        [
          "FOPT",
          "SOPT",
          "CASH",
          "CS",
          "ETF",
          "FORWARD",
          "INDEX",
          "INDEXOPT",
          "OPT",
          "OPTEXER",
          "PS",
        ]
    Symbol_t:
      description: Instrument Symbol
      type: string
      example: "PETR4"
    OptionType_t:
      description: Option types data type
      type: string
      enum: ["call", "put"]
    MaturityDate_t:
      description: MaturityDate data type
      type: string
      format: date
      example: "20180801"

    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    # Schema for OK response body
    Success:
      type: object
      properties:
        message:
          type: string
      required:
        - message
        
    links_get_collection:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'https://apisim.flexscan.com.br/v1/orders{?limit,offset}'
        rel:
          type: string
          example: 'collection'
        type:
          type: string
          example: GET
    
    links_get:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'https://apisim.flexscan.com.br/v1/orders/cb14c95c-2394-4d72-90b6-b5ec7c7cea4f'
        rel:
          type: string
          example: 'self'
        type:
          type: string
          example: GET
    
    links_put:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'https://apisim.flexscan.com.br/v1/orders/cb14c95c-2394-4d72-90b6-b5ec7c7cea4f'
        rel:
          type: string
          example: 'replace'
        type:
          type: string
          example: PUT
          
    links_delete:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'https://apisim.flexscan.com.br/v1/orders/cb14c95c-2394-4d72-90b6-b5ec7c7cea4f'
        rel:
          type: string
          example: 'cancel'
        type:
          type: string
          example: DELETE
          
        
    order_record:
      type: object
      properties:
        strategyId:
          type: string
          example: "BA7F42F6177337ED9E90A9D6BFC745B4"
        account:
          type: string
          example: "flx-1234"
        symbol:
          type: string
          example: "PETR4F"
        price:
          type: string
          example: "15.00000"
        quantity:
          type: string
          example: "100"
        side: 
          type: string
          enum: ['1','2']
          example: "1"
        orderType:
          type: string
          enum: ['1','2']
          example: "2"
          description: "1 = MARKET | 2 = LIMIT"
        orderStatus:
          type: string
          enum: ['0','1','2','4','5','8','C']
          example: "0"
          description: 0=NEW; 1=PARTIALLY_FILLED; 2=FILLED; 4=CANCELLED; 5=REPLACED; 8=REJECTED; C=EXPIRED
        marketOrderId:
          type: string
          example: "179CB0F876CD383841BB36D0E56052D0"
        sendingTime:
          type: string
          example: "20191025-13:05:52.954"
        lastPrice:
          type: string
          example: "nan"
        lastQuantity:
          type: string
          example: "0"
        avgPrice:
          type: string
          example: "nan"
        quantityExecuted:
          type: string
          example: "0"
        quantityRemaining:
          type: string
          example: "100"
        clxRejReason:
          type: string
          example: "0"
        text:
          type: string
          example: ""
        id:
          type: string
          example: "cb14c95c-2394-4d72-90b6-b5ec7c7cea4f"
        
    position_record:
      type: object
      properties:
        account:
          type: string
          example: "flx-12345"
        symbol:
          type: string
          example: "UGPA3"
        asset:
          type: string
          example: "UGPA"
        securityType:
          type: string
          example: "CS"
        openBuyFin:
          type: string
          example: "2936"
        openBuyQtty: 
          type: string
          example: "100"
        avgBuyPx:
          type: string
          example: "16.98"
        grossFin:
          type: string
          example: "125452"
        netFin:
          type: string
          example: "2564258"
        buyQtty:
          type: string
          example: "14500"
        grossQtty:
          type: string
          example: "35682"
        openSellFin:
          type: string
          example: "0"
        openSellPx:
          type: string
          example: "0"
        avgSellPx:
          type: string
          example: "18.98"
        sellQtty:
          type: string
          example: "17552"
    
    position_cons_record:
      type: object
      properties:
        account:
          type: string
          example: "flx-12345"
        symbol:
          type: string
          example: null
        asset:
          type: string
          example: null
        securityType:
          type: string
          example: null
        openBuyFin:
          type: string
          example: "2936"
        openBuyQtty: 
          type: string
          example: "100"
        avgBuyPx:
          type: string
          example: null
        grossFin:
          type: string
          example: "125452"
        netFin:
          type: string
          example: "2564258"
        buyQtty:
          type: string
          example: "14500"
        grossQtty:
          type: string
          example: "35682"
        openSellFin:
          type: string
          example: "0"
        openSellPx:
          type: string
          example: "0"
        avgSellPx:
          type: string
          example: null
        sellQtty:
          type: string
          example: "17552"
    

  parameters:
    username_p:
      in: query
      name: UserName
      description: Filter results by UserName (ignored for non Admin users)
      required: false
      schema:
        type: string
    sponsor_p:
      in: query
      name: Sponsor
      description: Filter results by Sponsor (ignored for non Admin users)
      required: false
      schema:
        type: string
    status_p:
      in: query
      name: Status
      description: Filter results by status of the strategies.  0 = NEW, 1 = WAITING_APPROVAL, 2 = SCHEDULED, 3 = RUNNING, 4 = UNBALANCED, 5 = FINISHED, 6 = CANCELING, 7 = CANCELED, 8 = SUSPENDING, 9 = SUSPENDED, 10 = PENDINGNEW
      required: false
      schema:
        type: integer
        format: int8
        description: blabla
        minimum: 0
        maximum: 10
    strategycode_p:
      in: query
      name: StrategyCode
      description: Filter results by Strategy type
      required: false
      schema:
        $ref: "#/components/schemas/StrategyCode_t"
    securityclass_p:
      in: query
      name: securityClass
      description: Filter results by securityClass
      required: false
      schema:
        $ref: "#/components/schemas/SecurityClass_t"
    optiontype_p:
      in: query
      name: optionType
      description: ption Type parameter
      required: false
      schema:
        $ref: "#/components/schemas/OptionType_t"

    detailed_p:
      in: query
      name: detailed
      description: Retrieve detailed (1) or compact (0) data
      schema:
        type: integer
        format: int8
        minimum: 0
        maximum: 1
        default: 0
    limit_p:
      in: query
      name: limit
      description: maximum number of records to return
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 50000
        default: 25

  responses:
    OkResponse:
      description: Request successfully processed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
    OkStrategies:
      description: search results matching criteria
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StrategyRecords"
    Accepted:
      description: Item Accepted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
        

    # 1) Define the security scheme type (HTTP bearer)
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
# 2) Apply the security globally to all operations
security:
  - bearerAuth: [] # use the same name as above