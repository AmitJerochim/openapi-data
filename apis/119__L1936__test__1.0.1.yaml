openapi: 3.0.0 
info:
  description: >-
    The EventLink API is a REST API which can be used to get event data through
    json-encoded responses. It can be accessed through
    https://api.eventlink.me/.
  version: "1.0.1"
  title: EventLink API
  contact:
    email: zhuoling.zhou@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: public
    description: access to non-critical endpoints
paths:
  /events:
    get:
      tags:
        - public
      summary: retrieve events from database
      operationId: events
      description: >-
        By passing in the appropriate options, you can retrieve different sets of
        events.
      parameters:
        - in: query
          name: uni
          description: Specify which uni the events will be taken from
          schema:
            type: string
            enum: [unsw]
          required: true
        - in: query
          name: category
          description: Only include events with the specified category
          schema:
            type: string
            enum: [art, causes, comedy, crafts, dance, drinks, film, fitness, food, games, gardening, health, home, literature, music, networking, party, religion, shopping, sports, theater, wellness, other, unspecified, online, free]
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The number of events to skip before starting to collect the result set.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The maximum number of events to return. Set to 0 for unlimited.
        - in: query
          name: society_id
          schema:
            type: string
          description: Only collect events which are hosted by a specific society
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [time_start, time_finish]
            default: time_start
          description: Specify whether to sort the events by their starting time or their finishing time.
        - in: query
          name: include_previous
          schema:
            type: integer
            enum: [0, 1]
            default: 0
          description: Specify whether or not to include already started events. 0 for all events including those which have already started and 1 for events that have not started.
        - in: query
          name: query_string
          schema:
            type: string
          description: Only includes a event if either title or description contains the given query string.

      responses:
        "200":
          description: events which match criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "400":
          description: bad input parameter
  /event:
    get:
      tags:
        - public
      summary: Retrieve a single event given it's id and uni
      operationId: event
      parameters: 
        - in: query
          name: uni
          schema:
            type: string
            enum: ["unsw"]
          description: Specify which uni the events will be taken from
          required: true
        - in: query
          name: id
          schema:
            type: string
          description: The id of the event
          required: true
          
      responses:
        "200":
          description: An event from the matching id and uni
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: bad input parameter

  /societies:
    get:
      tags:
        - public
      summary: retrieve societies of a chosen uni from the database
      description: Retrieve an array of societies
      operationId: societies
      parameters:
        - in: query
          name: uni
          schema:
            type: string
            enum: ["unsw"]
          description: Specify which uni the events will be taken from.
          required: true
        - in: query
          name: query_string
          schema:
            type: string
          description: Only includes a society if either name or description contains the given query string.
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The number of events to skip before starting to collect the result set.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 0
            default: 0
          description: The maximum number of events to return. Set to 0 for unlimited.
      responses:
        "200":
          description: An array of societies from the specified uni
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Society"
        "400":
          description: bad input parameter  

  /society:
    get:
      tags:
        - public
      summary: retrieve a society given it's id
      operationId: society
      parameters:
        - in: query
          name: id
          schema: 
            type: string
          required: true
  
      responses:
        "200":
          description: A society from the specified id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Society"
        "400":
          description: bad input parameter 
  
  /last-updated:
    get:
      tags:
        - public
      summary: Get the time last updated for that particular uni.
      operationId: last-updated
      parameters: 
        - in: query
          name: uni
          schema:
            type: string
            enum: ["unsw"]
          required: true
      
      responses:
        "200":
          description: Returns the time last updated
          content:
            application/json:
              schema:
                type: string
                format: date-time
                example: "17:23 22/03/2020"
        "400":
          description: bad input parameter 
          
  /feedback:
    post:
      tags:
        - public
      summary: Send feedback to discord and email.
      description: Send the feedback to the public discord and a copy of this feedback to the LinkUp email.
      operationId: feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                feedback:
                  type: string
                  description: "Feedback has to be less than 1990 characters."
                  maximum: 1990

              required: 
                - feedback
            examples:
              example1:
                summary: Send some feedback
                value: 
                  feedback: "You guys are doing great!"
      responses:
        "200":
          description: Returns if operation was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_success:
                    type: boolean
                required:
                  - is_success
              example:
                is_success: true
              
        "400":
          description: bad input parameter 
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_success:
                    type: boolean
                  reason:
                    type: string
                required:
                  - is_success
              example:
                is_success: false
                reason: "feedback is more than 1990 characters"
          
servers:
  - url: "https://api.eventlink.me"

components:
  schemas:
    Event:
      type: object
      required:
        - id
        - url
        - title
        - time_start
        - time_finish
        - description
        - location
        - host_name
        - host_url
        - host_image
        - hosts
        - image_url
        - category
        - categories
      properties:
        id:
          type: string
          example: "198258394844193"
        url:
          type: string
          format: url
          example: "https://www.facebook.com/events/198258394844193/"
        title:
          type: string
          example: "Professionalism with Marc Chee [Livestream]"
        time_start:
          type: string
          format: "ISO 8601"
          example: "2020-03-25T11:00:00"
        time_finish:
          type: string
          format: "ISO 8601"
          example: "2020-03-25T13:00:00"
        description:
          type: string
          example: "Marc Chee is presenting a lecture on Professionalism for COMP1511 students in Week 6. However, it is open and applicable to EVERYONE!!! With over two decades of experience in computing, be sure to come and learn from the very best! All you have to do is come to CLB 7 at 11 am on Wednesday Week 6 and take a seat! See you there!\n\nDue to the COVID-19 situation, this event will now be live streamed and will not take place in person.\n\n---------- EVENT DETAILS ----------\nWHEN: 11 am - 1pm Wednesday, 25th March\nWHERE: ONLINE\nWHO: CSESoc members (Especially useful for COMP1511 students!)"
        location:
          type: string
          example: 'ONLINE'
        host_name:
          type: array
          items:
            type: string
            example: ["CSESoc UNSW"]
          deprecated: true
        host_url:
          type: array
          items:
            type: string
            example: ["https://www.facebook.com/csesoc/"]
          deprecated: true
        host_image:
          type: array
          items:
            type: string
            example: ["https://cdn.eventlink.me/society/csesoc.jpg"]
          deprecated: true
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/Society'
        image_url:
          type: string
          format: url
          example: "https://cdn.eventlink.me/event/198258394844193.jpg"
        category:
          type: string
          example: "Other"
          deprecated: true
        categories:
          type: array
          items:
            type: string
            example: ["Other", "Online", "Free"]

    Society:
      type: object
      required:
        - id
        - name
        - url
        - image
      properties:
        id:
          type: string
          example: "csesoc"
        name:
          type: string
          example: "CSESoc UNSW"
        url:
          type: string
          format: url
          example: "https://www.facebook.com/csesoc/"
        image:
          type: string
          format: url
          example: "https://cdn.eventlink.me/society/csesoc.jpg"
