penapi: 3.0.0
info:
  title: API for interacting with and implementing a service in the Distributed GED
  description: GEDService REST API
  contact:
    email: guenole.de-cadoudal@ca-cib.com
  license:
    name: CACIB
    url: https://ca-cib.com
  version: 1.1.2
servers:
- url: https://virtserver.swaggerhub.com/guenoledc/GEDService/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:8800
  description: dev service
tags:
- name: init
  description: Initialization functions
- name: objects
  description: Interacting with objects (ie documents)
- name: signed-url
  description: enables the handling of signed url to access a document without authentication
paths:
  /info:
    get:
      tags:
      - init
      description: get the unique id of this service and can be extended for basic
        infos
      responses:
        "200":
          description: The service id as a string, normally a uuid id a good practice
            but the cller should not try to interpret the id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "500":
          description: internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /updates:
    post:
      tags:
      - objects
      summary: list new available objects
      description: "By passing the appropriate fields you can get \nthe list of changes\
        \ for a given user\n"
      operationId: getUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUpdate'
      responses:
        "200":
          description: last result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceObjectUpdate'
        "206":
          description: partial result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceObjectUpdate'
        "400":
          description: invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /objects:
    get:
      tags:
      - objects
      parameters:
      - name: uri
        in: "path"
        description: the unique name of the resource or object
        required: true
        schema:
          type: string
          example: path/to/resource
      responses:
        "200":
          description: the binary result forming the object readable stream
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /signed-urls:
    put:
      tags:
      - signed-url
      summary: Transform the provided payload into a signed JWT with the private key
        of the service
      description: provide the url payload to request the service to sign this as
        a jwt. It will create a jwt to be added to a dedicated url. This jwt will
        then be decoded by the GED distributed service to see if user still has access
        to that resource before granting access to the jwt carrier. Service can add
        additional fields in the jwt payload.
      operationId: signUrl
      requestBody:
        description: the minimum payload that must be contained in the result jwt.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedUrlPayload'
      responses:
        "200":
          description: the encoded jwt
          content:
            text/plain:
              schema:
                type: string
                description: the jwt as in format as defined in https://tools.ietf.org/html/rfc7519
                example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWwiOiJ0b3RvQHRlc3QuY29tIiwic3ViIjoiMTZmM2UwODUtNTU4MS00NWE4LTgwOTMtMzUxN2MyOGU4OTIxIiwic3ZjIjoiZmQ1YWFhYjEtYThkNC00ODg5LWJhMDAtZDQ4NzVlMjYwMzZiIiwidXJpIjoiaGVsbG8vdGhlL3dvcmxkIiwiaWF0IjoxNTcyMjA5MTQ2fQ.AuRthBWn2FLO8sfgrZw_XK4Fn02UOIsfjswedCY26QeZl90Aq0dOO94FqXyWQKxLFed6Q--9k9ItXl108MITYL5imruJ7ufogKt4kCUkCxt8AqffkvSziPiSoOcupkL5LcrqVTyzJSOyHnnUMXPIJIn4rzffHe2ZwrdumAW3gZE
        "400":
          description: invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          example: NOT-VALID
        message:
          type: string
          example: request parameters are not valid
    EndUser:
      required:
      - email
      - id
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
    Tag:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: TagName
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    ServiceObject:
      required:
      - uri
      type: object
      properties:
        uri:
          type: string
          description: the uri can be a human readable identifier or not. In the latter
            case the end user cannot have a human readable version of the document
            and it is necessary to add an information. Please refer to tag semantic
            proposal.
          example: /path1/path11/resource.pdf
        meta:
          $ref: '#/components/schemas/ServiceObject_meta'
    ServiceObjectUpdate:
      required:
      - asOf
      - objects
      type: object
      properties:
        asOf:
          type: string
          description: The implementer must return the ISO-GMT date time format of
            when the response was made and that reflects the reality in the underlying
            service. For instance, if the API is responding with data that may not
            be completely up to date (in case of eventually consistent architecture)
            it is important for the GED service to know the date-time of validity
            of the response
          format: ISO-GMT
        objects:
          type: array
          items:
            $ref: '#/components/schemas/ServiceObject'
        hasMoreState:
          type: string
          example: AnyStateDataThatMakesSenseForYourService
        resetIndex:
          type: boolean
          description: service sets this flag to true when it needs to have the user
            index fully reconstructed (new sets of rights, new doc structure ...).
            In this instance, the caller will ignore all other returned values, clear
            the index and request a new index construction.
          default: false
    GetUpdate:
      required:
      - maxRecords
      - since
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/EndUser'
        since:
          type: string
          format: ISO-GMT
        maxRecords:
          type: string
          format: number
        hasMoreState:
          type: string
          example: AnyStateDataReturnedFromAPreviousCall
    ServiceObject_meta:
      type: object
      properties:
        mediaType:
          type: string
          example: application/pdf
        created:
          type: string
          format: ISO-GMT
        version:
          type: string
          description: free format that can be displayed to a user.
          example: nnnn
        versionDate:
          type: string
          format: ISO-GMT
        deleted:
          type: string
          description: If set with a date, the caller should not display that object
            to the user after that date. It is like removing the object.
          format: ISO-GMT
        size:
          type: string
          description: size in byte of the file.
          format: ISO-GMT
        tags:
          type: array
          description: "An array of Tag structure. The first level must follow the\
            \ proposed semantic to allow all services to expose common informations\
            \ that may contain several values. Additional Semantic can be added at\
            \ top level by the services as long as they are prefixed by the service\
            \ name (eg PITCH.xxx)\nThis is the proposed top level tag semantic for\
            \ the name field\n- \"COMMON.HR_NAME\" : The Human Readable name of the\
            \ document or object. The default value is the first sub tag name. If\
            \ alternative language version can be specified, the subsequent tag name\
            \ in the array will contain the language (eg 'en' or 'fr') \n- \"COMMON.HR_DESCRIPTION\"\
            \ : The Human Readable additional description of the document, following\
            \ the same structure as HR_NAME\n- \"COMMON.AUTHOR\" : The First and Last\
            \ Name of the document author if available.\n"
          example:
          - name: COMMON.HR_NAME
            tags:
            - name: Pr√©sentation d'acquisition pour Tiffany le 12 mars 2019
              tags:
              - name: en
                tags:
                - name: Tiffany acquisition presentation March 12th 2019
          - name: COMMON.AUTHOR
            tags:
            - name: Johnny Depp
          items:
            $ref: '#/components/schemas/Tag'
    SignedUrlPayload:
      required:
      - eml
      - sub
      - svc
      - uri
      type: object
      properties:
        eml:
          type: string
          description: the email of the the user that authorized accesing that document
          format: email
          example: guenoledc@yahoo.fr
        svc:
          type: string
          description: the service unique id that provide this document
          format: uuid
          example: 1bd4d17b-062c-4365-9e16-9ac0aee2f660
        sub:
          type: string
          description: the user unique id that authorized accessing that document
          format: uuid
          example: 185b0649-9731-4e8a-8157-ca79a6d34349
        uri:
          type: string
          description: the resource uri within the service (svc)
          example: /some/path/to/resource.pdf
        exp:
          type: number
          description: the number of secs since 1970-1-1 after which the token becomes
            invalid. When absent, the token is always valid
          example: 1572209146
    inline_response_200:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 6a34447a-f85c-48d8-a399-a6c263caf7bc
        pubkey:
          type: string
          format: PEM
          example: |
            -----BEGIN RSA PUBLIC KEY-----
            MIGJAoGBAKa+tfoOnW3K72whjSVS2nxiQNWO1glr+RjY5gomDgB9KII9jnOiBFwV
            Pza2BggWsiOdRIqDTXhbbS+pnSG/09etTLF8mwNsm5LYGp73Jmxfqa8562Zc6mmn
            OWNXURd3VmxxmFeaQpcenGmns0A6tcUphlw9+KQrVGHnJe1jqCB5AgMBAAE=
            -----END RSA PUBLIC KEY-----