openapi: 3.0.0
info:
  version: 1.0.0
  title: Password Service API 
  description: Password service API. Distributed Systems project Mark Ndipenoch - G00352031.

paths:
  /users:
    get:
      description: Returns a list of users
      responses:
        '200':
          description: Successfully returned a list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  user_name:
                    type: string
                  user_email:
                    type: string
                  hashed_Password:
                    type: string
                  salt:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string

    post:
      description: Update user details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully updated a user
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
    
                  

  /users/{id}:
    get:
      description: Obtain information about a user from his or her unique id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          
      responses:
        '200':
          description: Successfully returned a user
          content:
            application/json and application/xml:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  user_name:
                    type: string
                  user_email:
                    type: string
                  hashed_Password:
                    type: string
                  salt:
                    type: string
                
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object 
                properties:           
                  message:
                    type: string
                    
    put:
      description: Create a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully create a user
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                    
    delete:
      description: Delete a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
    
      responses:
        '200':
          description: Successfully delete a user
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
                    
                    
                    
                    
  /users/login:
    post:
      description: User login
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully login a user
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string

                    
components:
  schemas:
    User:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer
        user_Name:
            type: string
        user_Email:
            type: string
        user_password:
            type: string
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ndipenoch/Password-Service-Api/1.0.0
