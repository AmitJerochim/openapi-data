penapi: 3.0.0
info:
  title: 'ALO.ai API'
  description: 'The Official ALO.ai Developer API'
  version: "1.0.4"
  
servers:
  - url: https://api.alo.ai/v1
    description: ALO API Endpoint

tags:
  - name: Boards
    description: ALO Boards
  - name: Board Columns
    description: ALO Board Column Definitions
  - name: Board Rows
    description: ALO Board Row Entries
  - name: Messages
    description: ALO Communication Messages
  - name: Channels
    description: ALO Communication Channels
  - name: Users
    description: ALO Users

paths:
  /channels:
    get:
      tags:
        - Channels
      summary: List all team channels.
      description: Returns a list of all team-related channels
      responses:
        '200':
          description: A JSON array of channel definitions
          content:
            application/json:
              schema:
                type: object
                properties:
                  channels:
                    $ref: '#/components/schemas/Channels'
  /boards:
    get:
      tags:
        - Boards
      summary: List all team boards.
      description: Returns all boards defined for your Team.
      responses:
        '200':
          description: A JSON array of board definitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boards'
    post:
      tags:
        - Boards
      summary: Creates a new board.
      description: Creates a new board for your team.
      requestBody:
        description: Information about the board to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Board/properties/name'
                real_time_client_updates:
                  $ref: '#/components/schemas/Board/properties/real_time_client_updates'
              required:
                - name
      responses:
        '201':
          description: JSON object of the newly created board.
          content:
            application/json:
              schema:
                type: object
                properties:
                  board:
                    $ref: '#/components/schemas/Board'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
  /boards/{id}:
    parameters:
      - $ref: '#/components/parameters/board_id'
    patch:
      tags:
        - Boards
      summary: Edit a board.
      description: Edit the name of a board.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Board/properties/name'
                real_time_client_updates:
                  $ref: '#/components/schemas/Board/properties/real_time_client_updates'
      responses:
        '200':
          description: JSON object of the updated board.
    delete:
      tags:
        - Boards
      summary: Delete a board.
      description: This will delete a board, including its columns and rows.
      responses:
        '200':
          description: The Board ID that was deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Board/properties/id'
        '404':
          $ref: '#/components/responses/NotFound'
  /boards/{id}/columns:
    parameters:
      - $ref: '#/components/parameters/board_id'
    get:
      tags:
        - Board Columns
      summary: List all column definitions for a board
      description: >
        Returns all of the column definitions for a specific board.
      responses:
        '200':
          description: JSON array of column definition objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  columns:
                    $ref: '#/components/schemas/BoardColumns'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Board Columns
      summary: Set the column definitions of a board.

      description: >
        Set board column definitions.
        All column definitions must be defined in a single request.
        Pass an empty array to erase all column definitions.
      requestBody:
        required: true
        description: >
          Column definitions.
          At least one column definition must be of type `id`
        content:
          application/json:
            schema:
              type: object
              properties:
                columns:
                  type: array
                  items:
                    $ref: '#/components/schemas/BoardColumn'
      responses:
        '200':
          description: >
            The list of column definitions with ids
          content:
            application/json:
              schema:
                type: object
                properties:
                  columns:
                    $ref: '#/components/schemas/BoardColumns'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /boards/{id}/rows:
    parameters:
      - $ref: '#/components/parameters/board_id'
    get:
      tags:
        - Board Rows
      summary: List all rows for a board.
      responses:
        '200':
          description: The list of rows, containing a JSON array of row entries.
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/BoardRow'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Board Rows
      summary: Append rows to a board.
      requestBody:
        required: true
        description: A JSON Array of row entries. Column properties not specified will be left blank for the row.
        content:
          application/json:
            schema:
              type: object
              properties:
                rows:
                  type: array
                  items:
                    type: object
                    properties:
                      properties:
                        type: array
                        items:
                          $ref: '#/components/schemas/BoardRowProperties'
      responses:
        '201':
          description: The successfully created row entry.
          content:
            application/json:
              schema:
                type: object
                properties:
                  row:
                    $ref: '#/components/schemas/BoardRow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Board Rows
      summary: Delete all rows for a board
      responses:
        '200':
          description: Confirmation that all of the rows were deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /boards/{id}/rows/{row_id}:
    parameters:
      - $ref: '#/components/parameters/board_id'
      - $ref: '#/components/parameters/row_id'
    put:
      tags:
        - Board Rows
      summary: Replace an existing Board Row with new properties
      requestBody:
        required: true
        description: An array of row properties. Column properties not specified will be left blank for the row.
        content:
          application/json:
            schema:
              type: object
              properties:
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/BoardRowProperties'
      responses:
        '200':
          description: The updated Row object
          content:
            application/json:
              schema:
                type: object
                properties:
                  row:
                    $ref: '#/components/schemas/BoardRow'
    delete:
      tags:
        - Board Rows
      summary: Delete a row from a board
      responses:
        '200':
          description: The Row ID that was successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/BoardRow/properties/id'
        '404':
          $ref: '#/components/responses/NotFound'
  /users:
    get:
      tags:
        - Users
      summary: List all team users.
      description: The list of active users on your team
      responses:
        '200':
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    $ref: '#/components/schemas/Users'
  /messages:
    post:
      tags:
        - Messages
      summary: Publish a message.
      description: Publish a message to a specific channel.
      requestBody:
        required: true
        description: Information about the message, required to publish.
        content:
          application/json:
            schema:
              type: object
              properties:
                html:
                  $ref: '#/components/schemas/Message/properties/html'
                channel_id:
                  $ref: '#/components/schemas/Message/properties/channel_id'
                task:
                  type: boolean
                  example: true
                  default: false
                task_assign_user_id:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - html
                - channel_id
                
      responses:
        '200':
          description: The message was successfully published. The ID is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Message/properties/id'
                
security:
  - ApiKeyAuth: []

components:
  schemas:
    Boards:
      type: array
      items:
        $ref: '#/components/schemas/Board'
    BoardColumns:
      type: array
      items:
        $ref: '#/components/schemas/BoardColumn'
    Board:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: My First Board
        real_time_client_updates:
          type: boolean
          default: true
          example: true
          description: Turn this OFF before a large import to prevent the
            client from receiving too many real time updates. Not doing this may
            degrade user experience of the app during an import.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    BoardColumn:
      type: object
      properties:
        property_name:
          type: string
          example: address
          description: The unique identifier of a column, used to reference the column when adding rows.
        display_name:
          type: string
          example: Work Address
          description: The column display name.
        type:
          type: string
          enum:
            - text
            - number
            - datetime
            - date
            - time
            - currency
            - hashtag
            - id
          description: >
            The column type - used for rendering, filtering, and sorting:
            
            * `text` - string/text values
            
            * `number` - non-currency numbers/decimals
            
            * `datetime` - date and time
            
            * `date` - date only
            
            * `time` - time only
            
            * `currency` - number values represented as U.S. Dollars
            
            * `id` - unique identifier 
            
            * `boolean` - t or f (true or false)
            
            * `hashtag` - text values you want to autocomplete and reference in COMMS

      required:
        - property_name
        - display_name
        - type
    BoardRow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        properties:
          type: array
          items:
            $ref: '#/components/schemas/BoardRowProperties'
        created_at:
          type: string
          format: date-time
    BoardRowProperties:
      type: object
      properties:
        property_name:
          type: string
          example: address
          description: The property_name of the column that the value corresponds to.
        value:
          type: string
          example: 1600 Amphitheatre Parkway
          description: The string representation of a property value. 
    Channels:
      type: array
      items:
        $ref: '#/components/schemas/Channel'
    Channel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: General
          description: The channel name.
        intercom:
          type: boolean
          example: false
          description: Denotes if the channel is an intercom style communication channel.
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        channel_id:
          type: string
          format: uuid
        html:
          type: string
          format: html
          example: <p>Hello, World!</p>
        created_at:
          type: string
          format: date-time
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: johndoe@example.com
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    Success:
      type: object
      properties:
        success:
          type: string
          example: "OK"
      required:
        - success
  responses:
    Success:
      description: Operation successful
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    board_id:
      name: id
      in: path
      description: Board ID
      required: true
      schema:
        type: string
        format: uuid
    row_id:
      name: row_id
      in: path
      description: Row ID
      required: true
      schema:
        type: string
        format: uuid
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY