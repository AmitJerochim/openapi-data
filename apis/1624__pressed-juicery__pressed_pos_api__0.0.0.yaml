openapi: 3.0.0
servers:
  - description: Pressed API 
    url: https://api.pressedjuicery.com
info:
  version: "0.0.0"
  title: Pressed API
  description: All calls use bearer authentication.
  contact:
    email: webdevelopment@pressedjuicery.com
  license:
    name: Copyright Â© 2019 Pressed Juicery, Inc. All rights reserved.

paths:
  /pos/users:
    get:
      operationId: findUser
      summary: Search for a Pressed Juicery loyalty user
      description: Search for a loyalty user using their card number or phone number. Only one user will be returned. If no users are found, we will return `null`.
      parameters:
        - in: query
          name: search
          description: values will be stripped of non-numeric characters
          required: true
          schema:
            type: string
            
      responses:
        '400':
          description: 'error object'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '200':
          description: a `User` object or `null` if no user is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                
  /pos/transactions:
    post:
      operationId: createTransaction
      summary: Record a POS transaction
      description: Record a completed POS transaction. This call is used to redeem coupons and record earning and redemption of loyalty points.<br><br>The goal of this endpoint is to record the transaction from the point of view of the POS. We attempt to save the data regardless of its validity. It is the responsibility of the caller to ensure that the data is accurate.<br><br>Note that we log inconsistencies in the data for later review, but we do our best to return a success response. An example of inconsistent data is when the sum of `lineItem` totals don't match the transaction `subTotal`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosTransaction'
        description: POS transaction to add
      responses:
        '400':
          description: 'error object'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '200':
          description: Transaction created
          content:
            application/json:
              schema:
                type: object
                properties:
                  tranasctionId:
                    type: string
        
  /pos/payment:
    post:
      operationId: createPayment
      summary: Charge a vip user's loyalty card
      description: Deducts funds from a vip user's loyalty balance. If their loyalty balance is insufficient, we will charge their vaulted credit card for the difference.<br><br>Only use if `user.currentTier === 'vip'`. Otherwise, an error will be returned.
      requestBody:
        content:
          application/json:
             schema:
                type: object
                properties:
                  userId:
                    type: string
                  amount:
                    type: number
      responses:
        '400':
          description: Payment failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '200':
          description: Payment authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  tranasctionId:
                    type: string
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: user_123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        phone:
          type: string
          example: 5555551234
        isPhoneVerified:
          type: boolean
          example: true
        cardNumber:
          type: string
          example: 123456789
        birthday:
          type: string
          example: 2/10 
        currentTier:
          type: string
          enum: [vip, elite, insider, legacy]
          example: vip 
        pointBalance:
          type: number
          example: 186
        dollarBalance:
          type: number
          example: 10.42
        coupons:
          type: array
          items:
            $ref: '#/components/schemas/Coupon'
            
    Coupon:
      type: object
      properties:
        id:
          type: string
          example: coupon_123
        name:
          type: string
          example: Free Shot
        quantityAvailable:
          type: number
          example: 1
        type:
          type: string
          example: freeItem
        eliglbleProducts:
          type: array
          items:
            type: string
            example: shots
        
    Error:
      type: object
      properties:
        key:
          type: array
          items:
            type: string
            example: Error message
      
    Discount:
      type: object
      properties:
        id:
          type: string
          example: promotion_123
        type:
          type: string
          example: promotion
        name:
          type: string
          example: 4 for $20
        amount:
          type: number
          example: 6.00
          
    Modifiers:
      type: object
      properties:
        groupName:
          type: string
        name:
          type: string
        price:
          type: number
      example:
        - groupName: toppings
          name: marshmallows
          price: 0
        - groupName: toppings
          name: chocolate chips
          price: 0
        - groupName: toppings
          name: gummy bears
          price: 0
        - groupName: toppings
          name: cacao drizzle
          price: 0.50
          
    LineItem:
      type: object
      properties:
        productName:
          type: string
          example: Vanilla Freeze - Size 1
        quantity:
          type: number
          example: 4
        price:
          type: number
          example: 6.50
        total:
          type: number
          example: 22.00
          description: ((price + modifiers.price) * quantity) - discount.amount
        sku:
          type: string
          example: 1001
        modifiers:
          type: array
          items:
            $ref: '#/components/schemas/Modifiers'
        discount:
          $ref: '#/components/schemas/Discount'
    PaymentMethod:
      type: object
      properties:
        type:
          type: string
          enum: [cash, member, credit card, gift card]
          example: member
        amount:
          type: number
          example: 26.51
        reference:
          type: string
          example: payment_123
          description: processor transaction id or null
    Cashier:
      type: object
      properties:
        id:
          type: string
          example: cashier_123
        name:
          type: string
          example: John Doe
          
    PosTransaction:
      type: object
      properties:
        userId:
          type: string
          example: user_123
        storeId:
          type: string
          example: store_123
        posTransactionId:
          type: string
          example: 8239020482902
        subtotal: 
          type: number
          example: 22.00
        taxes:
          type: number
          example: 1.98
        bottleDeposit:
          type: number
          example: 0.00
        total:
          type: number
          example: 18.98
        cashier:
          $ref: '#/components/schemas/Cashier'
        paymentMethod:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        discounts: 
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: coupon_456
              type:
                type: string
                example: coupon
              name:
                type: string
                example: $5 off of pickup
              amount:
                type: number
                example: 5
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        
  securitySchemes:
    bearerAuth:           
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
