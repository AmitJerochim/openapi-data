openapi: 3.0.0
servers:
  - description: 'Google Cloud Functions'
    url: https://asia-northeast1-sentinel-236417.cloudfunctions.net/v2
info:
  description: |
    Some port of this document still needs to improve.
  title: Smart farm
  version: "2"
  
tags:
  - name: topic
  - name: feed
  - name: user
  
paths:
  /users:
    get:
      tags: 
        - user
      summary: Get all users in the system
      responses:
       '200':
        description: ''
    post:
      tags: 
      - user
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              
      responses:
        '201':
          description: ''
  /users/{userId}:
    get:
      tags: 
      - user
      summary: Get a single user
      parameters: 
      - in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - user
      summary: Update an existing user
      parameters: 
      - in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
    delete:
      tags:
      - user
      summary: Delete an existing user
      parameters: 
      - in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
  /topics:
    get:
      summary: Get all topics in the system
      operationId: getAllTopics
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        '401':
          $ref: '#/components/responses/Unauthorized'

      tags:
        - topic
    post:
      summary: Create a new topic
      operationId: createTopic
      requestBody:
        description: Topic to add to the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        201:
          description: Topic created
        '401':
          $ref: '#/components/responses/Unauthorized'
        400:
          description: Bad request. "name" and "schema" are required.
        409:
          description: Duplicated topic name.
          
      tags: 
        - topic
  /topics/{topic_name}:
    get: 
      summary: Get a single topic
      operationId: getTopicByName
      tags: 
        - topic
      parameters: 
        - $ref: '#/components/parameters/topicNameParam'
      responses:
        '200':
          description: Topic response
        '404':
          $ref: '#/components/responses/NotFound'
          
          
    delete:
      tags: 
        - topic
      summary: Delete a single topic along with its feeds.
      operationId: deleteTopicByName
      parameters: 
        - $ref: '#/components/parameters/topicNameParam'
      responses:
        200:
          description: Topic deleted
        '403':
          $ref: '#/components/responses/Forbidden'
        404:
          description: A specified topic is not found.
          
  /topics/{topic_name}/feeds:
    get:
      tags:
        - feed
      description: Get a bunch of recent feeds in a specified topic name.
      parameters: 
        - $ref: '#/components/parameters/topicNameParam'
      responses:
        200:
          description: A bunch of recent feeds
        404:
          description: A topic with specified name is not found.
        
    post:
      tags:
        - feed
      description: Add a new feed to a specified topic name.
      parameters: 
        - $ref: '#/components/parameters/topicNameParam'
      requestBody:
        description: A given feed, mustn't contain attributes name "_id" and "_ts".
        content:
          application/json:
            schema:
              type: object
              example: 
                room_name: 'bedroom'
                temperature: 25.0
          
      responses:
        201:
          description: A new feed added.
        400:
          description: Bad request. Attributes in a request body must be match to the created topic and mustn't contain key "_id" and "_ts" .
        403:
          $ref: '#/components/responses/Forbidden'
          
  /datasets:

    get:
      tags:
      - dataset
      description: Get all auxiliary datasets in the system
      responses:
        200:
          description: ''
    post:
      tags:
      - dataset
      description: Create a new auxiliary dataset
      requestBody:
        required: true
        content:
          application:json:
            schema:
              $ref: '#/components/schemas/Dataset'
        
      responses:
        400:
          description: ''
        201:
          description: ''
          
  /datasets/{datasetId}:
    get:
      tags:
      - dataset
      parameters: 
      - in: path
        name: datasetId
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
        404:
          description: ''
    put:
      tags:
      - dataset
      parameters: 
      - in: path
        name: datasetId
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
        404:
          description: ''
    delete:
      tags:
      - dataset
      parameters: 
      - in: path
        name: datasetId
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
        404:
          description: ''
          
  /farms:
    get:
      tags:
      - farm
      description: Get all farms in the system
      responses:
        200:
          description: ''
    post:
      tags: 
      - farm
      description: Create a new farm
      responses:
        201:
          description: ''
        400:
          description: ''
        403:
          description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
  /farms/{farmId}:
    get:
      tags:
      - farm
      description: Get an existing farm
      parameters: 
      - in: path
        name: farmId
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
        404:
          description: 'Farm not found'
    put:
      tags:
      - farm
      description: Update an existing farm
      parameters: 
      - in: path
        name: farmId
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
        400:
          description: ''
        404:
          description: 'Farm not found'
    delete:
      tags:
      - farm
      description: Delete an existing farm
      parameters: 
      - in: path
        name: farmId
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
        404:
          description: 'Farm not found'
  /farms/{farmId}/batches:
    get:
      tags:
      - batch
      description: Get all batches in the specified farm.
      parameters: 
      - $ref: '#/components/parameters/farmIdParam'
      responses:
        200:
          description: ''
        404:
          description: 'Farm not found'
    post:
      tags:
      - batch
      description: Create a new batch in the specified farm.
      parameters:
      - $ref: '#/components/parameters/farmIdParam'
      responses:
        201:
          description: ''
        400:
          description: ''
        404:
          description: 'Farm not found'
  /farms/{farmId}/batches/{batchId}:
    get:
      tags:
      - batch
      description: Get an existing batch in the specified farm
      parameters:
      - $ref: '#/components/parameters/farmIdParam'
      - $ref: '#/components/parameters/batchIdParam'
      responses:
        200:
          description: ''
        404:
          description: 'Farm or batch is not found'
    put:
      tags:
      - batch
      description: Update an existing batch in the specified farm
      parameters:
      - $ref: '#/components/parameters/farmIdParam'
      - $ref: '#/components/parameters/batchIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                farmId:
                  type: string
                batchId:
                  type: string
      responses:
        200:
          description: ''
        400:
          description: ''
        404:
          description: 'Farm or batch is not found'
    delete:
      tags:
      - batch
      description: Delete an existing batch in the specified farm
      parameters:
      - $ref: '#/components/parameters/farmIdParam'
      - $ref: '#/components/parameters/batchIdParam'
      responses:
        200:
          description: ''
        404:
          description: 'Farm or batch is not found'
          
  /tokens:
    get:
      tags: 
      - token
      description: Get all tokens in the system
      responses:
        200:
          description: ''
    post:
      tags:
      - token
      description: Create a new token
      responses:
        201:
          description: ''
        400:
          description: ''
  /tokens/{tokenId}:
    get:
      tags:
      - token
      description: Get a new token
      responses:
        200:
          description: ''
        404:
          description: ''
      parameters: 
        - in: path
          name: tokenId
          required: true
          schema:
            type: string
      
    delete:
      tags:
      - token
      description: Delete an existing token
      parameters: 
      - in: path
        name: tokenId
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
        404:
          description: ''
          
  /permission:
    get:
      tags:
      - permission
      description: Get all permissions in the system
      responses:
        200:
          description: ''
    post:
      tags:
      - permission
      description: Grant a new permission for specified topic and user.
      requestBody:
        $ref: '#/components/requestBodies/PermissionBody'
      responses:
        201:
          description: ''
        400:
          description: ''
  /permissions/{permissionId}:
    get:
      tags:
      - permission
      parameters:
      - $ref: '#/components/parameters/permissionIdParam'
      responses:
        200:
          description: ''
        404:
          description: Permission is not found
    delete:
      description: Revoke an existing permission
      tags:
      - permission
      parameters:
      - $ref: '#/components/parameters/permissionIdParam'
      responses:
        200:
          description: ''
        404:
          description: Permission not found
          
  /feedbacks:
    get:
      tags:
      - feedback
      description: Get all feedbacks in the system
      responses:
        200:
          description: ''
    post:
      tags:
      - feedback
      description: Create a new feedback
      requestBody:
        $ref: '#/components/requestBodies/FeedbackBody'
      responses:
        201:
          description: ''
        400:
          description: ''
  /feedbacks/{feedbackId}:
    get:
      tags:
      - feedback
      description: Get an existing feedback
      parameters:
      - $ref: '#/components/parameters/feedbackIdParam'
      responses:
        200:
          description: ''
        404:
          description: 'Feedback not found'
    put:
      tags:
      - feedback
      description: Update an existing feedback
      parameters:
      - $ref: '#/components/parameters/feedbackIdParam'
      requestBody:
        $ref: '#/components/requestBodies/FeedbackBody'
      responses:
        200:
          description: ''
        400:
          description: ''
        404:
          description: 'Feedback not found'
    delete:
      parameters:
      - $ref: '#/components/parameters/feedbackIdParam'
      description: Remove an existing feedback
      tags:
      - feedback
      responses:
        200:
          description: ''
        404:
          description: 'Feedback not found'
          
            
      
security:
  - bearerAuth: [] 
  
components:
  requestBodies:
    PermissionBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Permission'
    FeedbackBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Feedback'
  responses:
    NotFound:
      description: The specified resource was not found
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
  schemas:
    Permission:
      type: object
      required: 
      - topicKey
      - userId
      - action
      properties:
        topicKey:
          type: string
        userId:
          type: string
        action:
          type: string
        
    Dataset:
      type: object
      required:
      - datasetId
      properties:
        datasetId:
          type: string
        ownerId:
          type: string
    User:
      type: object
      required: 
      - email
      properties:
        email:
          type: string

    Topic:
      type: object
      required:
        - name
        - schema
      properties:
        name:
          type: string
          description: Unique name of the topic
          format: alphabet_with_numberic_on_snake_case
          example: my_example_topic_1
        schema:
          description: Schema of the topic
          type: string
          format: key:value of attributes separate with comma
          example: temperature:numeric,room_name:string
    Feedback:
      type: object
      required:
      - feedbackId
      - url
      properties:
        feedbackId:
          type: string
        url:
          type: string

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes


  parameters:
    feedbackIdParam:
      name: feedbackId
      required: true
      in: path
      schema:
        type: string
        
    permissionIdParam:
      name: permissionId
      required: true
      in: path
      schema:
        type: string
        
    farmIdParam:
      name: farmId
      in: path
      required: true
      schema:
        type: string
        
    batchIdParam:
      name: batchId
      in: path
      required: true
      schema:
        type: string
        
    topicNameParam:
      name: topic_name
      in: path
      description: A specified topic name
      required: true
      schema:
        type: string
