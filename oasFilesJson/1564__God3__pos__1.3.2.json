{"openapi":"3.0.0","info":{"description":"An API that can be used to connect a POS system to Godo","version":"1.3.2","title":"Godo POS API","contact":{"email":"itsupport@godo.is"}},"tags":[{"name":"Get","description":"Get operations"},{"name":"Post","description":"Post operations"}],"paths":{"/connect":{"post":{"tags":["Post"],"summary":"Returns an authentication token.","operationId":"connect","description":"The token retrieved from the function is added to the X-Auth-Token header and is required to authenticate all requests to the API. The token has a lifetime of one hour, after one hour the token becomes invalid.\n","responses":{"200":{"description":"Authentication token","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthenticationToken"}}}},"406":{"description":"Failed to authenticate, username or password is invalid"}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Credentials"}}},"description":"Post username and password to retrieve authentication token."}}},"/charges/{propId}/{bookId}":{"post":{"tags":["Post"],"summary":"Adds charges to a booking.","parameters":[{"in":"path","name":"propId","required":true,"schema":{"type":"number","example":123},"description":"The ID of the property that the booking belongs to"},{"in":"path","name":"bookId","required":true,"schema":{"type":"number","example":7654321},"description":"The ID of the booking that the charge is to be added to"},{"in":"header","name":"X-Auth-Token","description":"The token string from the connect function response","schema":{"$ref":"#/components/schemas/AuthenticationToken"}}],"operationId":"charges","description":"Charges are added to a booking\n","responses":{"200":{"description":"Charges were added to the booking, multiple charges can be added with a single call. A unique reference for this request is returned which can be used to trace errors.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChargeReference"}}}},"401":{"description":"Failed to authenticate, token is invalid."}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Charges"}}},"description":"Credit charges should be passed with a negative price value and not a negative quantity value. Charges with a negative quantity value are interpreted as payments inside of Godo. If a charge (or payment) has a invoiceeId value of null, it's not assigned to any invoicee. If you want to assign the charge/payment to a specific invoicee set the invoiceeId field using one of the invoiceeId values you got from the /booking call."}}},"/charges/split/{propId}/{bookId}":{"post":{"tags":["Post"],"summary":"Adds split charges and payments to booking","parameters":[{"in":"path","name":"propId","required":true,"schema":{"type":"number","example":123},"description":"The ID of the property that the booking belongs to"},{"in":"path","name":"bookId","required":true,"schema":{"type":"number","example":7654321},"description":"The ID of the booking that the charge is to be added to"},{"in":"header","name":"X-Auth-Token","description":"The token string from the connect function response","schema":{"$ref":"#/components/schemas/AuthenticationToken"}}],"operationId":"splitCharges","description":"Split charges are added to a booking. This can be used for example if one customer pays for the drinks in the POS system and another one pays for the food, also in the POS system.\n","responses":{"200":{"description":"Charges were added to the booking, multiple charges can be added with a single call. A unique reference for this request is returned which can be used to trace errors.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChargeReference"}}}},"401":{"description":"Failed to authenticate, token is invalid."}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SplitCharges"}}},"description":"Credit charges should be passed with a negative price value and not a negative quantity value. Charges with a negative quantity value are interpreted as payments inside of Godo. If a charge (or payment) has a invoiceeId value of null, it's not assigned to any invoicee (unless autoAssignCustomers is set to true). If you want to assign the charge/payment to a specific invoicee set the invoiceeId field using one of the invoiceeId values you got from the /booking call. <b> Split charges </b> are sorted by a unique key (invoice number). For each payment that is made in the POS system there should be an array with a key (which can be the invoice number or any other reference) and containing a list of the invoice lines that were paid for, along with a payment line for the amount that was paid. If the overwriteBooking parameter is set to true, the invoice lines in the booking will be replaced with the ones you send. If the autoAssignCustomers parameter is set to true, all charges with invoiceeId null will be automatically assigned invoiceeIds. This is done so that the payment split looks correct inside of Godo. If invoiceHasBeenCreated is set to true then Godo will not be able to send an invoice for these lines (in order to prevent duplicate invoices)."}}},"/unit/{propId}/{roomId}/{unitId}":{"post":{"tags":["Post"],"summary":"Changes a units status","description":"Changes the status of a unit (f.ex. from \"clean\" to \"dirty\")\n","parameters":[{"in":"path","name":"propId","required":true,"schema":{"type":"number","example":1234},"description":"The ID of the property that the unit belongs to"},{"in":"path","name":"roomId","required":true,"schema":{"type":"number","example":12345},"description":"The ID of the room that the unit belongs to"},{"in":"path","name":"unitId","required":true,"schema":{"type":"number","example":1},"description":"The ID of the unit. If a room has units [102, 103] then the id of unit 102 would be 1."},{"in":"header","name":"X-Auth-Token","description":"The token string from the connect function response","schema":{"$ref":"#/components/schemas/AuthenticationToken"}}],"operationId":"unit","responses":{"200":{"description":"Unit status was changed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SuccessResponse"}}}},"401":{"description":"Failed to authenticate, token is invalid."}},"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UnitStatus"}}},"description":"Pass the status that you want the unit to have. This status must be predefined in the system. For example if you pass in the status dirty then that status must be listed in the system."}}},"/booking/{propId}/{roomId}/{unitName}":{"get":{"tags":["Get"],"summary":"Finds a booking","description":"Finds the booking that contains this unit\n","parameters":[{"in":"path","name":"propId","required":true,"schema":{"type":"number","example":123},"description":"The ID of the property that the room belongs to"},{"in":"path","name":"roomId","required":true,"schema":{"type":"number","example":354},"description":"The ID of the room type of the unit"},{"in":"path","name":"unitName","required":true,"schema":{"type":"string","example":101},"description":"The name of the unit that the guest is staying in"},{"in":"query","name":"includeInvoice","required":true,"schema":{"type":"boolean","example":true},"description":"Whether or not to include invoice lines in the response"},{"in":"header","name":"X-Auth-Token","description":"The token string from the connect function response","schema":{"$ref":"#/components/schemas/AuthenticationToken"}}],"operationId":"booking","responses":{"200":{"description":"Booking object was successfully fetched. Invoice lines that have type >= 200 are payments. Other invoice lines are charges.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Booking"}}}},"400":{"description":"PropertyID or roomID are invalid."},"401":{"description":"Failed to authenticate, token is invalid."},"404":{"description":"Unit name does not exist for this room."},"409":{"description":"Duplicate unitName for this room (e. room 1234 has two units called 201)."}}}},"/rooms/{propId}":{"get":{"tags":["Get"],"summary":"Returns all rooms for this property","description":"Returns all rooms for this property\n","parameters":[{"in":"path","name":"propId","required":true,"schema":{"type":"number","example":123},"description":"The ID of the property that the rooms belong to"},{"in":"header","name":"X-Auth-Token","description":"The token string from the connect function response","schema":{"$ref":"#/components/schemas/AuthenticationToken"}}],"operationId":"rooms","responses":{"200":{"description":"The list of rooms was successfully fetched","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Rooms"}}}},"401":{"description":"Failed to authenticate, token is invalid."},"500":{"description":"Unexpected error occurred."}}}}},"servers":[{"url":"www.api.godo.is/pos","description":"Production server"}],"components":{"schemas":{"Credentials":{"required":["username","password"],"properties":{"username":{"type":"string","example":"user1"},"password":{"type":"string","example":"password123"}}},"Charges":{"properties":{"reference":{"type":"string","example":"YOUR_REFERENCE"},"invoiceNumber":{"type":"string","example":1234},"charges":{"type":"array","items":{"$ref":"#/components/schemas/Charge"}}}},"SplitCharges":{"properties":{"reference":{"type":"string","example":"YOUR_REFERENCE"},"overwriteBooking":{"type":"boolean","example":true},"autoAssignCustomers":{"type":"boolean","example":true},"invoiceHasBeenCreated":{"type":"boolean","example":true},"invoices":{"type":"array","items":{"$ref":"#/components/schemas/Charges"}}}},"Charge":{"required":["qty","price","description","productId","isCredit","discount","chargeId"],"properties":{"qty":{"type":"number","example":2},"price":{"type":"number","example":1300},"description":{"type":"string","example":"Heineken 33cl"},"productId":{"type":"string","example":"C2300"},"vatRate":{"type":"number","example":11},"invoiceeId":{"type":"number","example":9340},"isCredit":{"type":"boolean","example":false},"discount":{"type":"number","example":35},"chargeId":{"type":"number","example":4234124}}},"InvoiceLine":{"required":["invoiceId","description","price","qty","status","type","type2","vatRate","invoiceeId","currency","billable"],"properties":{"invoiceId":{"type":"number","example":19398764},"description":{"type":"string","example":"Heineken 33cl"},"price":{"type":"number","example":1300},"qty":{"type":"number","example":2},"status":{"type":"string","example":"C2300"},"type":{"type":"number","example":6},"type2":{"type":"number","example":0},"vatRate":{"type":"number","example":11},"invoiceeId":{"type":"number","example":9340},"currency":{"type":"string","example":"ISK"},"invoiceSent":{"type":"boolean","example":true},"amount":{"type":"number","example":2600},"billable":{"type":"boolean","example":false}}},"UnitStatus":{"required":["status"],"properties":{"status":{"type":"string","example":"dirty"}}},"Booking":{"properties":{"bookId":{"type":"number","example":7654321},"guestFirstName":{"type":"string","example":"John"},"guestLastName":{"type":"string","example":"Doe"},"checkIn":{"type":"string","example":"2019-02-13"},"checkOut":{"type":"string","example":"2019-08-24"},"invoiceLines":{"type":"array","items":{"$ref":"#/components/schemas/InvoiceLine"}}}},"Rooms":{"type":"array","items":{"$ref":"#/components/schemas/Room"}},"Room":{"properties":{"roomId":{"type":"number","example":354},"unitNames":{"type":"array","items":{"$ref":"#/components/schemas/UnitName"}}}},"UnitName":{"type":"string","example":"201"},"AuthenticationToken":{"description":"The token that was retreieved with the connect function","properties":{"token":{"type":"string","example":"B7kd7mHLjbk9EUUMMR0mY6IV2KkhMxa0"}}},"ChargeReference":{"description":"A unique reference for the charges that were made","type":"object","properties":{"reference":{"type":"string","example":"36ae656d-ff73-4bc3-83ac-8b8f2a805431"}}},"SuccessResponse":{"description":"A response message when the call was successfull","type":"object","properties":{"message":{"type":"string","example":"Sucessfully changed status"}}}}}}