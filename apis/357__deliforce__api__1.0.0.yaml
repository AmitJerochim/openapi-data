openapi: 3.0.0
servers:
  - description: Deliforce API
    url: https://api.deliforce.io/

info:
  description: |
    # Introduction
      * The **Deliforce API** is a **RESTful** web service for developers to programmatically interact with Deliforce’s data and real-time delivery management functionality.
      
      * Every bit of data exchanged between clients and the API is **JSON** over HTTPS. Note that we will only accept **application/json** as content type and that the request body, if relevant, must be JSON-encoded.
      
      * The base URL for the Deliforce API is **https://api.deliforce.io/**
      
      * All parameters, where relevant, are required unless otherwise specified in the description.
    
      * Deliforce API uses key based authentication method. You can get a key from settings(Login<Settings<Developer<Developer API) in your Deliforce account or [Click here](https://app.deliforce.io/settings/api) to get API key from Deliforce application.
      
      * If you have any questions about using the API, want to share some feedback, or have come across a bug you'd like to report, write us an email at [support@deliforce.io](mailto:support@deliforce.io) or [submit a request](https://deliforce.zendesk.com/hc/en-us/requests/new) through our support center.
      
    ---
    
    # Common codes
      When something is wrong with a request, the API will respond with a non-`200` status code in the response. To help you better understand the problem, where possible, the API overloads a number of different error codes so your application logic has as much visibility as possible into what has gone wrong.
      
     `500` -- SERVER_ERROR <br>
     `403` -- AUTH <br>
     `400` -- BAD_REQUEST <br>
     `406` -- EMAIL_INVALID <br>
     `407` -- PHONE_INVALID <br>
     `408` -- PASSWORD_INVALID <br>
     `409` -- NAME_INVALID <br>
     `405` -- INVALID_INPUT <br>
     `412` -- BUSINESS_TYPE_REQUIRED <br>
     `200` -- SUCCESS <br>
     `501` -- TRANSACTION_FAILURE <br>
     `410` -- ADDRESS_INVALID <br>
     `411` -- DATE_REQUIRED <br>
     `413` -- END_DATE_LESSER_START <br>
     `414` -- START_LESSER_THAN_CURRENT <br>
     `415` -- TEAM_MANDATORY <br>
     `420` -- DUPLICATE_DRIVER_NAME_AND_EMAIL <br>
     `416` -- TEAM_MANDATORY <br>
     `421` -- DUPLICTE_EMAIL <br>
     `422` -- DUPLICATE_PHONE <br>
     `425` -- INVALID_PHONE_OR_EMAIL <br>
     `417` -- DUPLICATE_TEAM_NAME <br>
     `418` -- INVALID_TEAMNAME  <br>
     `419` -- TEAM_HAS_DRIVER <br>
     `423` -- DUPLICTE_EMAIL <br>
     `424` -- DUPLICATE_PHONE <br>
     `426` -- INVALID_PHONE_OR_EMAIL <br> 
      
    ---
    # Status of tasks
     <table>
                      <tr>
                        <th>Status</th>
                        <th>Value</th> 
                        <th>Description</th>
                      </tr>
                      <tr>
                        <td>Unassigned</td>
                        <td>1</td>
                        <td>Task not assigned to any driver</td>
                      </tr>
                       <tr>
                        <td>Assigned</td>
                        <td>2</td>
                        <td>Task assigned to driver</td>
                      </tr>
                       <tr>
                        <td>Accepted</td>
                        <td>3</td>
                        <td>Task accepted by driver</td>
                      </tr>
                        <tr>
                        <td>Started</td>
                        <td>4</td>
                        <td>Task is started by driver</td>
                      </tr>
                       <tr>
                        <td>In-progress</td>
                        <td>5</td>
                        <td>Task in progress</td>
                      </tr>
                       <tr>
                        <td>Success</td>
                        <td>6</td>
                        <td>Task completed successfully</td>
                      </tr>
                       <tr>
                        <td>Fail</td>
                        <td>7</td>
                        <td>Task Failed</td>
                      </tr>
                        <tr>
                        <td>Declined</td>
                        <td>8</td>
                        <td>Task declined by driver</td>
                      </tr>
                      <tr>
                        <td>Cancelled</td>
                        <td>9</td>
                        <td>Task cancelled by driver</td>
                      </tr>
                    </table>
                  
    ---
    # Webhook task status
     <table>
                      <tr>
                        <th>Trigger</th>
                        <th>Trigger Name</th> 
                      </tr>
                      <tr>
                        <td>1</td>
                        <td>taskUnassigned</td>
                      </tr>
                      <tr>
                        <td>2</td>
                        <td>taskAssigned</td>
                      </tr>
                      <tr>
                        <td>3</td>
                        <td>taskAccepted</td>
                      </tr>
                      <tr>
                        <td>4</td>
                        <td>taskStarted</td>
                      </tr>
                      <tr>
                        <td>5</td>
                        <td>taskArrived</td>
                      </tr>
                      <tr>
                        <td>6</td>
                        <td>taskCompleted</td>
                      </tr>
                      <tr>
                        <td>7</td>
                        <td>taskFailed</td>
                      </tr>
                      <tr>
                        <td>8</td>
                        <td>taskDeclined</td>
                      </tr>
                      <tr>
                        <td>9</td>
                        <td>taskCancelled</td>
                      </tr>
                      <tr>
                        <td>10</td>
                        <td>taskAcknowledge</td>
                      </tr>
                      <tr>
                        <td>13</td>
                        <td>taskDeleted</td>
                      </tr>
                      <tr>
                        <td>18</td>
                        <td>taskUpdated</td>
                      </tr>
                    </table>
                    
    ---
  version: "1.0.0"
  title: Deliforce API
  
tags:
  - name: Team
    description: A team includes a group of drivers and managers that work as one entity.
  - name: Driver
    description: A driver are the members of an organization who perform actions via the Deliforce mobile applications.
  - name: Customer
    description: A customer is an organization’s recipient and a target for a task, that is, whom the task is being delivered to.
  - name: Manager
    description: A manager are the members of an organization who controls or administering an organization or group of staff.
  - name: Task
    description: A task represents unit of work, defined by one destination and one customer, that admin creats and assign to driver for completion.
  - name: Webhook
    description: A webhooks make it possible for your application to be notified of important system events, as soon as these take place within deliforce application.
 
paths:
  /team:
    get:
      tags:
        - Team
      summary: This API is used to get the information of all the teams with paginaion.
      operationId: teamGet
      parameters:
        - name: apiKey
          in: header
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: Records of the requested page to be displayed
          required: true
          schema:
            type: number
            minimum: 1
        - in: query
          name: limit
          description: Number of records to limit for a page
          required: true
          schema:
            type: number
            minimum: 1
        - in: query
          name: teamIds
          description: Specify the Id(Login<Teams<ID) of the team to be fetched
          schema:
            type: array
            items:
                    type: string
      responses:
        '200':
          description: Fetched records successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/teamGet'
        '400':
          description: Bad input parameter
    delete:
      tags:
        - Team
      summary: This API is used to delete a team.
      operationId: teamDelete
      parameters:
        - name: apiKey
          in: header
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: teamId
          description: Specify the team id(Login<Teams<ID) to delete a team.
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: Team is deleted successfully
        '400':
          description: Bad input parameter
    post:
      tags:
        - Team
      summary: This API is used to create a team.
      operationId: teamPost
      parameters:
        - name: apiKey
          in: header
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team is created successfully
        '400':
          description: Bad input parameter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/teamPost'
    put:
      tags:
        - Team
      summary: This API is used to update a team.
      operationId: teamPut
      parameters:
        - name: apiKey
          in: header
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team is updated successfully
        '400':
          description: Bad input parameter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/teamPut' 
  /driver:
    get:
      tags:
        - Driver
      summary: This API is used to fetch all drivers in your organization.
      operationId: driverGet
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: Records of the requested page to be displayed
          required: true
          schema:
            type: number
            minimum: 1
        - in: query
          name: limit
          description: Number of records to limit for a page.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: driverIds
          description: Specify Id(Login<Drivers<DRIVER ID) of the driver to be fetched.
          required: false
          schema:
            type: array
            items: 
              type: string
        - in: query
          name: latitude
          description: Specify latitude and longitude to fetch driver based on it.
          schema:
            type: string
            minimum: 1
        - in: query
          name: longitude
          description: Specify latitude and longitude to fetch driver based on it.
          schema:
            type: string
            minimum: 1
        
        - in: query
          name: driverStatus
          description:  fetching drivers based on drivers status.
          schema:
            type: string
            minimum: 1    
      responses:
        '200':
          description: Fetched driver successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/driverGet'
        '400':
          description: bad input parameter
    delete:
      tags:
        - Driver
      summary: This API is used to delete driver from your organization.
      operationId: driverDelete
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: driverId
          description: Specify Id(Login<Drivers<DRIVER ID) of the driver to remove from your organization.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Driver is deleted successfully.
        '400':
          description: Bad input parameter
    post:
      tags:
        - Driver
      summary: This API is used to register driver to your organization.
      operationId: driverPost
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Driver is created successfully
        '400':
          description: Bad input parameter
      requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/driverPost'
    put:
      tags:
        - Driver
      summary: This API is used to update information of the manager.
      operationId: driverPut
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Driver updated successfully
        '400':
          description: Bad input parameter
      requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/driverPut'
  /driver/statusupdate:
    put:
      tags: 
        - Driver
      summary: This API is used to update driver status of the driver
      operationId: driverStatusUpdate
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Driver status updated successfully
        '400':
          description: Bad input parameter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/driverStatusUpdate'
  /manager:
    get:
      tags:
        - Manager
      summary: This API is used to get the manager details.
      operationId: managerGet
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: Records of the requested page to be. displayed
          required: true
          schema:
            type: number
            minimum: 1
        - in: query
          name: limit
          description: Number of records to limit for a page.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: managerIds
          description: Specify the Id(Login<Manager<MANAGER ID) of the manager to be fetched.
          schema:
            type: array
            items:
                    type: string
      responses:
        '200':
          description: Fetched manager records successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/managerGet'
        '400':
          description: Bad input parameter.
    delete:
      tags:
        - Manager
      summary: This API is used to delete a manager.
      operationId: managerDelete
      parameters:
        - name: apiKey
          in: header
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: managerId
          description: Specify the Id(Login<Manager<MANAGER ID) of the manager to be fetched.
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: Manager is deleted successfully.
        '400':
          description: Bad input parameter
    post:
      tags:
        - Manager
      summary: This API is used to create a manager.
      operationId: managerPost
      parameters:
        - name: apiKey
          in: header
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Manager is created successfully.
        '400':
          description: Bad input parameter.
        '401':
          description: Unauthorized 
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/managerPost'
  /customer:
    get:
      tags:
        - Customer
      summary: This API is used to get the customer details.
      operationId: customerGet
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: Records of the requested page to be displayed.
          required: true
          schema:
            type: number
            minimum: 1
        - in: query
          name: limit
          description: Number of records to limit for a page
          required: true
          schema:
            type: number
            minimum: 1
        - in: query
          name: customerIds
          description: Specify the Id(Login<Customers<CUSTOMER ID) of the customer to get their details.
          schema:
            type: number
            minimum: 1
      responses:
        '200':
          description: Fetched customer details successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerGet'
        '400':
          description: bad input parameter
    delete:
      tags:
        - Customer
      summary: This API is used to delete the customer.
      operationId: customerDelete
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: customerId
          description: Specify Id(Login<Customers<CUSTOMER ID) of the customer to be deleted
          required: true
          schema:
              type: string
      responses:
        '200':
          description: Customer is deleted Successfully
        '400':
          description: Bad input parameter
    post:
      tags:
        - Customer
      summary: This API is used to add customer.
      operationId: customerPost
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer is created successfully
        '400':
          description: Bad input parameter
      requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/customerPost'
    put:
      tags:
        - Customer
      summary: This API is used to update the details of the customer.
      operationId: customerPut
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer updated successfully
        '400':
          description: Bad input parameter
      requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/customerPut'
  /customer/customersearchbyname:
    get:
      tags:
        - Customer
      summary: This API is used to fetch for a customer using his/her name.
      operationId: customerGetByName
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: name
          description: Specify name(Login<Customers<CUSTOMERS) of the customer to be fetched from the record.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Fetched customer by name successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerGetByName'
        '400':
          description: Bad input parameter
  /customer/customersearchbyphone:
    get:
      tags:
        - Customer
      summary: This API is used to fetch customer by phone
      operationId: customerGetByPhone
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: phone
          description: Specify phone number(Login<Customers<PHONE) of the customer to be fetched from the record
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Fetched customer by phone number successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customerGetByPhone'
        '400':
          description: Bad input parameter        
  /task:
    get:
      tags:
        - Task
      summary: This API is used to get the task details.
      operationId: taskget
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: Records of the requested page to be. displayed.
          required: true
          schema:
            type: number
            minimum: 1
        - in: query
          name: limit
          description: Number of records to limit for a page.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: startDate
          description: Specify from date of the task to be fetched
          schema:
            type: string
        - in: query
          name: endDate
          description: Specify end date of the task to be fetched
          schema:
            type: string
        - in: query
          name: timezone
          description: Specify timezone of the region
          required: true
          schema:
            type: string
        - in: query
          name: taskIds
          description: Speicfy Id(Login<Dashboard<Tasks<TASK ID) of the task to be displayed.
          schema:
            type: array
            items:
              type: string
        - in: query
          name: statusFilter
          description: Speicfy Id(Login<Dashboard<Tasks<Status) of the task to be displayed.
          schema:
            type: array
            items:
              type: number
      responses:
        '200':
          description: Fetched task records successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/taskGet'
        '400':
          description: Bad input parameter
    delete:
      tags:
        - Task
      summary: This API is used to delete the task.
      operationId: taskDelete
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: taskId
          description: Specify the Id(Login<Dashboard<Tasks<TASK ID) of the task to be deleted.
          required: true
          schema:
              type: string
      responses:
        '200':
          description: Task is deleted successfully
        '400':
          description: Bad input parameter
    post:
      tags:
        - Task
      summary: This API is used to create a task.
      operationId: taskAdding
      parameters:
        - name: apiKey
          in: header
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task is created successfully
        '400':
          description: Bad input parameter
        '401':
          description: Unauthorized  
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/taskPost' 
    put:
      tags:
        - Task
      summary: This API is used to update the details of the task.
      operationId: taskEditing
      parameters:
        - name: apiKey
          in: header
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task is updated successfully
        '400':
          description: Bad input parameter
        '401':
          description: Unauthorized  
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/taskPut'   
  /task/orderid:
    get:
      tags:
        - Task
      summary: This API is used to fetch the record using orderId.
      operationId: taskGetByOrderId
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: orderId
          required: true
          description: Specify order Id(Login<Dashboard<Tasks<ORDER ID) to be fetched.
          schema:
            type: string
      responses:
        '200':
          description: Fetched task by orderId successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/taskGetByOrderId'
        '400':
          description: Bad input parameter
          
  /task/tasklog:
    get:
      tags:
        - Task
      summary: This API is used to fetch the History of task.
      operationId: taskLog
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: taskId
          description: Specify the Id(Login<tasks<ID) of the task history to be fetched
          schema:
            type: string
            items:
                    type: string
      responses:
        '200':
          description: Fetched list of status successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/taskLogGet'
        '400':
          description: Bad input parameter           
  /task/taskid:
    get:
      tags:
        - Task
      summary: This API is used to fetch the task details based on task Id.
      operationId: taskGetByTaskId
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: taskId
          required: true
          description: Specify the Id(Login<Dashboard<Tasks<TASK ID) of the task to be fetched.
          schema:
            type: string
      responses:
        '200':
          description: Fetched record based on taskId successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/taskGetByTaskId'
        '400':
          description: Bad input parameter
  /task/getstatuslist:
    get:
      tags:
        - Task
      summary: This API is used to fetch the list of status.
      operationId: taskGetStatusList
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Fetched list of status successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/taskGetStatusList'
        '400':
          description: Bad input parameter
  /task/taskstatus:
    get:
      tags:
        - Task
      summary: This API is used to fetch the particular task status.
      operationId: taskGetStatus
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - in: query
          name: taskId
          required: true
          description: Specify the Id(Login<Dashboard<Tasks<TASK ID) of the task to be fetched.
          schema:
            type: string
      responses:
        '200':
          description: Fetched list of status successfully
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/SingletaskStatusGet'
        '400':
          description: Bad input parameter
          
  /task/updatetaskstatus:
    post:
      tags:
        - Task
      summary: This API is used to uodate the task status.
      operationId: updateTaskStatus
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated task status successfully
        '400':
          description: Bad input parameter
      requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/taskStatusUpdate'
  /task/assigntask:
    post:
      tags:
        - Task
      summary: This API is used to get the assign the task
      operationId: assignTask
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task is updated successfully to the driver
        '400':
          description: Bad input parameter
      requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/assignTask'
  /task/pickupanddeliverytask:
    post:
      tags:
        - Task
      summary: This API is used to get the assign pick and delivery task to the same driver.
      operationId: pickupanddeliverytask
      parameters:
        - in: header
          name: apiKey
          description: API key can be generated from Settings (Login>Settings>Developer>Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task is updated successfully to the driver
        '400':
          description: Bad input parameter
      requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/pickupanddeliverytask'
             
          
             
  /webhook:
    get:
      tags:
        - Webhook
      summary: This API is used to fetch all the webhooks of particular user.
      operationId: webhookGet
      parameters:
        - name: apiKey
          in: header
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
        - name: webhookIds
          in: query
          description: Specify webhookId to fetch the particular webhook
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Fetched webhooks successfully
        '400':
          description: Bad input parameter
    post:
      tags:
        - Webhook
      summary: This API is used to create a webhook for the user
      operationId: webhookPost
      parameters:
        - name: apiKey
          in: header
          description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Webhook is created successfully
        '400':
          description: Bad input parameter
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhookPost'
    delete:
     tags:
       - Webhook 
     summary: This API is used to delete the webhook from the system.
     operationId: webhookDelete
     parameters:
       - name: apiKey
         in: header
         description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
         required: true
         schema:
           type: string
       - in: query
         name: webhookId
         description: Specify the Id(Login<settings<Webhook<WEBHOOK ID) of the webhook to be deleted.
         required: true
         schema:
           type: string
     
     responses:
       '200':
         description: Webhook is deleted successfully
       '400':
         description: Bad input parameter
    put:
     tags:
       - Webhook
     summary: This API is used to update the webhook details
     operationId: webhookPut
     description: Upadting a team
     parameters:
       - name: apiKey
         in: header
         description: API key can be generated from Settings (Login<Settings<Developer<Developer API) in your Deliforce account.
         required: true
         schema:
           type: string
     responses:
       '200':
         description: Webhook updated successfully
       '400':
         description: Bad input parameter
       
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/webhookPut'
components:
  schemas:
    teamGet:
      type: object
      required:
        - teamName
        - teamId
        - notes
        - accuracy
      properties:
        teamName:
          type: string
          format: uuid
          example: Team A
        teamId:
          type: string
          format: uuid
          example: '123456'
        accuracy:
          type: integer
          format: int32
          example: 1
        notes:
          type: string
          format: uuid
          example: Team for food delivery
        driverDetails:
          $ref: '#/components/schemas/driverDetails'
    driverDetails:
      properties:
        name:
          type: string
          example: Driver
        assignTeam:
          type: string
          format: url
          example: '548759'
        phone:
          type: string
          example: '+91 8547896585'
      type: object
    teamPost:
      type: object
      required:
        - teamName
      properties:
        teamName:
          type: string
          example: Factory team 
        accuracy:
          type: number
          example: 1
        notes:
          type: string
          example: Team for food delivery
    teamPut:
      type: object
      required:
        - teamId
      properties:
        teamId:
          type: string
          example: '46599876'
        teamName:
          type: string
          example: Team A
        accuracy:
          type: number
          example: 1
        notes:
          type: string
          example: Team for grocery delivery
    driverGet:
      type: object
      required:
        - name
        - phone
        - teamName
      properties:
        name:
          type: string
          example: Driver
        lastName:
          type: string
          example: '1'
        phone:
          type: string
          example: '+91 8073072320'
        assignTeam:
          type: string
          example: '4567'
        notes:
          type: string
          example: 'This is notes'
        driverStatus:
          type: number
          example: 1
        driverId:
          type: string
          example: "87894678"
        email:
          type: string
          example: 'email@gmail.com'
    driverPost:
     type: object
     required:
       - name
       - phone
       - password
       - assignTeam
     properties:
        name:
         type: string
         example: Driver A
        email:
         type: string
         example: email@gmail.com
        password:
         type: string
         example: Driver@123
        lastName:
          type: string
          example: last Name
        notes:
          type: string
          example: This is notes
        transportDesc:
          type: string
          example: Car
        kolor:
          type: string
          example: Red
        licencePlate:
          type: string
          example: KA-09
        phone:
         type: string
         example: '+91 9066359086'
        assignTeam:
         type: string
         example: "15245"        
        settings:
            $ref: '#/components/schemas/settings'
    driverPut:
     type: object
     required:
       - name
       - phone
       - password
       - assignTeam
       - driverId
     properties:
        name:
         type: string
         example: Driver A
        email:
         type: string
         example: email@gmail.com
        password:
         type: string
         example: Driver@123
        lastName:
          type: string
          example: last Name
        notes:
          type: string
          example: This is notes
        transportDesc:
          type: string
          example: Car
        kolor:
          type: string
          example: Red
        licencePlate:
          type: string
          example: KA-09
        phone:
         type: string
         example: '+91 9066359086'
        driverId:
          type: string
          example: '65465488'
        assignTeam:
         type: string
         example: "15245"        
        settings:
            $ref: '#/components/schemas/settings'
    driverStatusUpdate:
      type: object
      required:
        - driverId
        - driverStatus
      properties:
        latitude:
          type: string
          example: "12.35647"
        longitude:
          type: string
          example: "72.35647"
        driverStatus:
          type: number
          example: 1
        driverId:
          type: string
          example: "55223447"
        isLogOut:
          type: boolean
          example: false
        address:
          type: string
          example: "Nextbrain Technologies, #44, 2nd floor, 1st cross, 2nd main, Prasanth extension, Whitefield, Bengaluru, Karnataka 560066"
    settings:
      type: object
      properties:
        transportType:
          type: number
          example: 1
        ringtone:
          type: number
          example: 1
        vibration:
          type: number
          example: 1
        repeat:
          type: boolean
          example: false
        language:
          type: number
          example: 1
        navigation:
          type: number
          example: 1
        mapStyle:
          type: number
          example: 1
        showTraffic:
          type: boolean
          example: false
        powerSavingModel:
          type: boolean
          example: false
        navigationHelper:
          type: boolean
          example: false
    permissions:
      type: object
      properties:
        allowAccessToUnassigned:
          type: boolean
          example: false
        allowCreateTask:
          type: boolean
          example: false 
        allowEditTask:
          type: boolean
          example: false 
        allowAddDriver:
          type: boolean
          example: false   
    managerGet:
     type: object
     required:
       - name
       - phone
       - password
       - email
     properties:
        name:
         type: string
         example: Manager A
        managerId:
         type: string
         example: Manager A
        email:
         type: string
         example: email@gmail.com
        password:
         type: string
         example: Driver@123
        lastName:
          type: string
          example: last Name
        phone:
         type: string
         example: '+91 9066359086'
        teams:
            $ref: '#/components/schemas/teamsArray' 
        permissions:
            $ref: '#/components/schemas/permissions'
    managerPost:
     type: object
     required:
       - name
       - phone
       - password
       - email
     properties:
        name:
         type: string
         example: Manager A
        email:
         type: string
         example: email@gmail.com
        password:
         type: string
         example: Driver@123
        lastName:
          type: string
          example: last Name
        phone:
         type: string
         example: '+91 9066359086'
        teams:
            $ref: '#/components/schemas/teamsArray' 
        permissions:
            $ref: '#/components/schemas/permissions'
    teamsArray:
      type: array
      description: maximum number of records to return
      items:
        type: string  
      example: [123456]
    pricingOrEarningRulesArray:
      type: array
      description: pricing or earning rule ID
      items:
        type: string
      example: ["13609572","13605723"]
    imagesArray:
      type: array
      description: Name of the image in string format
      items:
        type: string  
      example: ["someimageurl.jpg"] 
    templateArray:
      type: array
      description: Custome fields
      items:
        $ref: '#/components/schemas/customField1'
      
    customField1:
      type: object
      properties:
        fieldName:
          type: string
          example: name
        fieldValue:
          type: string
          example: this is text
        dataType:
          type: string
          example: text
        order:
          type: number
          example: 0
    
    pickupArray:
      type: array
      description: pickup task
      items:
        $ref: "#/components/schemas/pickup"
        
    deliveryArray:
      type: array
      description: pickup task
      items:
        $ref: "#/components/schemas/delivery"
    
    pickup:
      type: object
      required:
        - name
        - phone
        - date
        - endDate
        - address
        - manual
      properties:
        name:
         type: string
         example: Manager A
        email:
         type: string
         example: email@gmail.com
        date:
         type: string
         example: "2019-01-11T08:02:32.830Z"
        lastName:
          type: string
          example: last 
        endDate:
          type: string
          example: "2019-01-11T08:02:32.830Z"  
        address:
          type: string
          example: "Lourdu Nagar Rd, Lourdu Nagar, Swathantra Nagar, Krishnarajapura, Bengaluru, Karnataka 560049, India"  
        phone:
         type: string
         example: '+91 9066359086'
        isPickup:
         type: boolean
         example: true
        orderId:
         type: string
         example: '6359086'
        description:
          type: string
          example: 'creating task'
        latitude:
          type: string
          example: '72.00000'
        longitude:
          type: string
          example: '12.434534'
        templateName:
          type: string
          example: 'food delivery'
        pricingOrEarningRules:
          $ref: '#/components/schemas/pricingOrEarningRulesArray'
        images:
          $ref: '#/components/schemas/imagesArray' 
        templateData:
          $ref: '#/components/schemas/templateArray'
    
    delivery:
      type: object
      required:
        - name
        - phone
        - date
        - endDate
        - address
        - manual
      properties:
        name:
         type: string
         example: Manager A
        email:
         type: string
         example: email@gmail.com
        date:
         type: string
         example: "2019-01-11T08:02:32.830Z"
        lastName:
          type: string
          example: last 
        endDate:
          type: string
          example: "2019-01-11T08:02:32.830Z"  
        address:
          type: string
          example: "Lourdu Nagar Rd, Lourdu Nagar, Swathantra Nagar, Krishnarajapura, Bengaluru, Karnataka 560049, India"  
        phone:
         type: string
         example: '+91 9066359086'
        isPickup:
         type: boolean
         example: false
        orderId:
         type: string
         example: '6359086'
        description:
          type: string
          example: 'creating task'
        latitude:
          type: string
          example: '72.00000'
        longitude:
          type: string
          example: '12.434534'
        templateName:
          type: string
          example: 'food delivery'
        pricingOrEarningRules:
          $ref: '#/components/schemas/pricingOrEarningRulesArray'
        images:
          $ref: '#/components/schemas/imagesArray' 
        templateData:
          $ref: '#/components/schemas/templateArray'
      
    customerGet:
      type: object
      required:
        - apiKey
        - limit
        - page
      properties:
        apiKey:
          type: string
          example: bFbFbbFbFbYGNFTSwlegKwDaFbFa2ToNtNzVCQMfLxHCt5aFaFamcH9iqoWUxZ1aFaFaESezx6mVgaZS7AcFcAc
        limit:
          type: number
          example: 10
        page:
          type: number
          example: 1
    customerPost:
     type: object
     required:
       - apiKey
       - name
       - phone
       - address
     properties:
        name:
         type: string
         example: Akshay
        phone:
         type: string
         example: '+91 8073072358'
        email:
          type: string
          example: 'email@gmail.com'
        address:
          type: string
          example: 'banglore, India'
        latitude:
          type: string
          example: '72.23234'
        longitude:
          type: string
          example: '12.32432'
    customerPut:
     type: object
     required:
       - name
       - phone
       - address
       - customerId
     properties:
        name:
         type: string
         example: customer
        email:
         type: string
         example: email@gmail.com
        address:
          type: string
          example: banglore, India
        phone:
         type: string
         example: '+91 9066359086'
        customerId:
          type: string
          example: '65465488'
        latitude:
          type: string
          example: '72.23234'
        longitude:
          type: string
          example: '12.32432'
    customerGetByName:
      type: object
      required:
        - apiKey
        - name
      properties:
        apiKey:
          type: string
          example: bFbFbbFbFbYGNFTSwlegKwDaFbFa2ToNtNzVCQMfLxHCt5aFaFamcH9iqoWUxZ1aFaFaESezx6mVgaZS7AcFcAc
        name:
          type: string
          example: 'kruthika'
    customerGetByPhone:
      type: object
      required:
        - apiKey
        - name
      properties:
        apiKey:
          type: string
          example: bFbFbbFbFbYGNFTSwlegKwDaFbFa2ToNtNzVCQMfLxHCt5aFaFamcH9iqoWUxZ1aFaFaESezx6mVgaZS7AcFcAc
        phone:
          type: string
          example: '+91 8073072356'
    pickupanddeliverytask:
      type: object
      required:
        - manual
        - timezone
        - teamId
        - pickup
        - delivery
      properties:
        teamId:
          type: string
          example: "6798"
        timezone:
          type: string
          example: "Asia/Calcutta"
        manual:
         type: boolean
         example: true
        driverId:
          type: string
          example: "6798234"
        pickup:
          $ref: '#/components/schemas/pickupArray'
        delivery:
          $ref: '#/components/schemas/deliveryArray'

    taskPost:
     type: object
     required:
       - name
       - phone
       - date
       - endDate
       - address
       - manual
       - businessType
     properties:
        name:
         type: string
         example: Manager A
        email:
         type: string
         example: email@gmail.com
        date:
         type: string
         example: "2019-01-11T08:02:32.830Z"
        lastName:
          type: string
          example: last 
        endDate:
          type: string
          example: "2019-01-11T08:02:32.830Z"  
        address:
          type: string
          example: "Lourdu Nagar Rd, Lourdu Nagar, Swathantra Nagar, Krishnarajapura, Bengaluru, Karnataka 560049, India"  
        phone:
         type: string
         example: '+91 9066359086'
        isPickup:
         type: boolean
         example: true
        manual:
         type: boolean
         example: true
        businessType:
         type: number
         example: 1
        orderId:
         type: string
         example: '6359086'
        timezone:
         type: string
         example: 'Asia/Calcutta' 
        driverId:
         type: string
         example: '5247858'
        teamId:
         type: string
         example: '2003'
        description:
          type: string
          example: 'creating task'
        latitude:
          type: string
          example: '72.00000'
        longitude:
          type: string
          example: '12.434534'
        templateName:
          type: string
          example: 'food delivery'
        pricingOrEarningRules:
            $ref: '#/components/schemas/pricingOrEarningRulesArray'
        images:
            $ref: '#/components/schemas/imagesArray' 
        templateData:
            $ref: '#/components/schemas/templateArray' 
    taskPut:
     type: object
     required:
       - name
       - phone
       - date
       - endDate
       - address
       - manual
       - businessType
     properties:
        taskId:
         type: string
         example: "5485965"
        name:
         type: string
         example: Manager A
        email:
         type: string
         example: email@gmail.com
        date:
         type: string
         example: "2019-01-11T08:02:32.830Z"
        lastName:
          type: string
          example: last 
        endDate:
          type: string
          example: "2019-01-11T08:02:32.830Z"  
        address:
          type: string
          example: "Lourdu Nagar Rd, Lourdu Nagar, Swathantra Nagar, Krishnarajapura, Bengaluru, Karnataka 560049, India"  
        phone:
         type: string
         example: '+91 9066359086'
        isPickup:
         type: boolean
         example: true
        taskStatus:
          type: number
          example: 2
        manual:
         type: boolean
         example: true
        businessType:
         type: number
         example: 1
        orderId:
         type: string
         example: '6359086'
        timezone:
         type: string
         example: 'Asia/Calcutta' 
        driverId:
         type: string
         example: '5247858' 
        teamId:
         type: string
         example: '6358'
        description:
          type: string
          example: 'creating task'
        latitude:
          type: string
          example: '72.00000'
        longitude:
          type: string
          example: '12.434534'
        images:
            $ref: '#/components/schemas/imagesArray' 
        templateName:
          type: string
          example: 'food delivery'
        pricingOrEarningRules:
            $ref: '#/components/schemas/pricingOrEarningRulesArray'
        templateData:
            $ref: '#/components/schemas/templateArray'
    taskGet:
      type: object
      required:
        - apiKey
        - limit
        - page
        - startDate
        - endDate
      properties:
        apiKey:
          type: string
          example: bFbFbbFbFbYGNFTSwlegKwDaFbFa2ToNtNzVCQMfLxHCt5aFaFamcH9iqoWUxZ1aFaFaESezx6mVgaZS7AcFcAc
        limit:
          type: number
          example: 10
        page:
          type: number
          example: 1
        startDate:
          type: string
          example: '2019-02-06T07:41:31.126Z'
        taskIds:
          type: array
          items:
            type: string
            example: '87954687'
        statusFilter:
          type: array
          items:
            type: number
            example: 1
    taskGetByOrderId:
      type: object
      required:
        - apiKey
        - orderId
      properties:
        apiKey:
          type: string
          example: bFbFbbFbFbYGNFTSwlegKwDaFbFa2ToNtNzVCQMfLxHCt5aFaFamcH9iqoWUxZ1aFaFaESezx6mVgaZS7AcFcAc
        orderId:
          type: string
          example: '87954687'
    taskGetByTaskId:
      type: object
      required:
        - apiKey
        - taskId
      properties:
        apiKey:
          type: string
          example: bFbFbbFbFbYGNFTSwlegKwDaFbFa2ToNtNzVCQMfLxHCt5aFaFamcH9iqoWUxZ1aFaFaESezx6mVgaZS7AcFcAc
        taskId:
          type: string
          example: '87954687'
    taskGetStatusList:
      type: object
      required:
        - apiKey
        - taskId
      properties:
        apiKey:
          type: string
          example: bFbFbbFbFbYGNFTSwlegKwDaFbFa2ToNtNzVCQMfLxHCt5aFaFamcH9iqoWUxZ1aFaFaESezx6mVgaZS7AcFcAc
    
    taskLogGet:
      type: object
      required:
        - taskId
      properties:
        taskId:
          type: string
          example: "1245785"
          
    SingletaskStatusGet:
      type: object
      required:
       - taskStatus
      properties:
        taskStatus:
          type: integer
          example: 2       
            
    taskStatusUpdate:
     type: object
     required:
       - businessType
       - taskId
       - taskStatus
     properties:
        businessType:
         type: number
         example: 1
        taskId:
         type: string
         example: '78895464'
        taskStatus:
          type: number
          example: 2
    assignTask:
     type: object
     required:
       - driverId
       - taskId
       - taskStatus
     properties:
        driverId:
         type: string
         example: '45678952'
        taskId:
         type: string
         example: '73072358'
        taskStatus:
          type: number
          example: 1
    webhookPost:
      type: object
      required:
        - url
        - trigger
        - name
        - triggerName
      properties:
        url:
          type: string
          example: https://api.deliforce.url
        trigger:
          type: number
          example: 4
        webhookName:
          type: string
          example: task started
        triggerName:
          type: string
          example: taskStarted
    webhookPut:
      type: object
      required:
        - webhookId
      properties:
        webhookId:
          type: string
          example: '56485972'
        webhookName:
          type: string
          example: task complete
        url:
          type: string
          example: https://api.deliforce.url1