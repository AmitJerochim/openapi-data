openapi: 3.0.0
info:
  version: 1.0.0
  title: V4-Users-API
  description: description
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/ITBoost3/admin/1.0.0
- url: "https://api.itboost.com/{basePath}"
  variables:
    basePath:
      default: /users
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
x-amazon-apigateway-request-validator: all

paths:
  /auth:
    post:
      tags:
        - Authentication
      summary: User authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userName
                - password
                - subDomain
              properties:
                userName:
                  type: string
                password:
                  type: string
                subDomain:
                  type: string
                ldap:
                  type: boolean
              additionalProperties: false
      parameters:
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: data found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  orgName:
                    type: string
                  token:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  companyLogo:
                    type: string
                  picture:
                    type: string
                  role:
                    type: object
                    properties:
                      roleId:
                        type: integer
                      roleName:
                        type: string
                  userType:
                    type: string
        400:
          description:  not found
        204:
          description: Content not found
        404:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/auth'
        httpMethod: POST
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
               method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
  /sso:
    post:
      tags:
        - Authentication
      summary: User authentication SSO
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                RelayState:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: data found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/sso'
        httpMethod: POST
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
               method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
  /forgotPassword:
    post:
      tags:
        - Authentication
      summary: User Forget Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userEmail
                - subDomain
              properties:
                userEmail:
                  type: string
                subDomain:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: data found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'deleted successfully'
                  success:
                    type: boolean
                    example: true
        400:
          description:  not found
        204:
          description: Content not found
        404:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/forgotPassword'
        httpMethod: POST
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
               method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
  /logout:
    post:
      tags:
        - Authentication
      summary: User logout
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: query
          name: allSessions
          schema:
            type: string
      responses:
        200:
          description: user logout successfully
          headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: "string"
                      Access-Control-Allow-Methods:
                        schema:
                          type: "string"
                      Access-Control-Allow-Headers:
                        schema:
                          type: "string"
        400:
          description:  not found
        204:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/logout'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.querystring.allSessions: method.request.querystring.allSessions
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
  /generate-code:
    get:
      tags:
        - Authentication
      summary: Get 2FA code
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ascii:
                      type: string
                    hex:
                      type: string
                    base32:
                      type: string
                    otpauth_url:
                      type: string
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/generate-code'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
  /save-code:
    post:
      tags:
        - Authentication
      summary: Save 2FA code
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ascii:
                  type: string
                hex:
                  type: string
                base32:
                  type: string
                otpauth_url:
                  type: string
                code:
                  type: string
                googleAuth:
                  type: boolean
              additionalProperties: false
        required: true
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'deleted successfully'
                  success:
                    type: boolean
                    example: true
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/save-code'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
  /2FA/auth:
    post:
      tags:
        - Authentication with 2FA
      summary: Login with 2FA
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                code:
                  type: string
                sessionIndex:
                  type: string
              additionalProperties: false
        required: true
      parameters:
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  orgName:
                    type: string
                  token:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  companyLogo:
                    type: string
                  picture:
                    type: string
                  role:
                    type: object
                    properties:
                      roleId:
                        type: integer
                      roleName:
                        type: string
                  userType:
                    type: string
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/2FA/auth'
        httpMethod: POST
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
  /sso-assert:
    post:
      tags:
        - Authentication with 2FA
      summary: Login with 2FA
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
        302:
          description: "302 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
            Location:
              content:
                application/json:
                  schema:
                    type: "string"
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/sso-assert'
        httpMethod: POST
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Location: "integration.response.body.location"

  /company/redirect/testing/url:
    post:
      summary: Redirect
      parameters: []
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
        302:
          description: "302 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
            Location:
              content:
                application/json:
                  schema:
                    type: "string"
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/company/redirect/testing/url'
        httpMethod: POST
        responses:
          default:
            statusCode: "302"
            responseParameters:
              method.response.header.Location: "integration.response.body.location"
              method.response.header.Access-Control-Allow-Origin: "'*'"


  /login/redirect/{subDomain}:
    get:
      tags:
        - Authentication with 2FA
      summary: Login with 2FA
      parameters:
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: subDomain
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/login/redirect/{subDomain}'
        httpMethod: GET
        requestParameters:
          integration.request.path.subDomain: method.request.path.subDomain
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        
  /profile:
    get:
      tags:
        - Users
      summary: Get users profile
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  userName:
                    type: string
                  phoneOffice:
                    type: string
                  phoneMobile:
                    type: string
                  gender:
                    type: string
                  timezone:
                    type: string
                  theme:
                    type: string
                  inactiveFlag:
                    type: boolean
                  firstLoginFlag:
                    type: boolean
                  userPhoto:
                    type: string
                  picMode:
                    type: string
                  isActive:
                    type: boolean
                  SC:
                    type: object
                  address:
                    type: string
                  dateFormat:
                    type: string
        400:
          description:  not found
        204:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/profile'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    put:
      tags:
        - Users
      summary: Update users profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                SC:
                  type: object
                lastName:
                  type: string
                language:
                  type: string
                phoneMobile:
                  type: string
                phoneOffice:
                  type: string
                address:
                  type: string
                dob:
                  type: string
                gender:
                  type: string
                timezone:
                  type: string
                dateFormat:
                  type: string
                timeFormat:
                  type: string
                picMode:
                  type: string
                theme:
                  type: string
                userPhoto:
                  type: string
              additionalProperties: false
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  orgId:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  userName:
                    type: string
                  phoneMobile:
                    type: string
                  inactiveFlag:
                    type: boolean
                  firstLoginFlag:
                    type: boolean
                  isActive:
                    type: boolean
        400:
          description:  not found
        204:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/profile'
        httpMethod: PUT
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    patch:
      tags:
        - Users
      summary: Update users password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  orgId:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  userName:
                    type: string
                  phoneMobile:
                    type: string
                  inactiveFlag:
                    type: boolean
                  firstLoginFlag:
                    type: boolean
                  isActive:
                    type: boolean
        400:
          description:  not found
        204:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/profile'
        httpMethod: PATCH
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

  /list:
    get:
      tags:
        - Users
      summary: Get users list
      parameters:
        - in: query
          name: pageNo
          schema:
            type: number
          required: false
        - in: query
          name: pageSize
          schema:
            type: integer
          required: false
        - in: query
          name: order
          schema:
            type: string
          required: false
        - in: query
          name: sortBy
          schema:
            type: string
          required: false
        - in: query
          name: fields
          schema:
            type: object
          required: false
        - in: query
          name: conditions
          schema:
            type: object
          required: false
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    firstName:
                      type: string
                    lastName:
                      type: string
                    userName:
                      type: string
                    phoneOffice:
                      type: string
                    phoneMobile:
                      type: string
                    gender:
                      type: string
                    timezone:
                      type: string
                    theme:
                      type: string
                    inactiveFlag:
                      type: boolean
                    firstLoginFlag:
                      type: boolean
                    userPhoto:
                      type: string
                    picMode:
                      type: string
                    isActive:
                      type: boolean
                    SC:
                      type: object
                    address:
                      type: string
                    dateFormat:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/list'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.querystring.pageNo: method.request.querystring.pageNo
          integration.request.querystring.pageSize: method.request.querystring.pageSize
          integration.request.querystring.order: method.request.querystring.order
          integration.request.querystring.sortBy: method.request.querystring.sortBy
          integration.request.querystring.fields: method.request.querystring.fields
          integration.request.querystring.conditions: method.request.querystring.conditions
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

  /group/list:
    get:
      tags:
        - Users
      summary: Get users group list
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userGroupId:
                      type: string
                    updatedAt:
                      type: string
                    createdAt:
                      type: string
                    name:
                      type: string
                    ITBUpdatedBy:
                      type: string
                    uuid:
                      type: string
                    ITBLastUpdated:
                      type: string
                    userUuids:
                      type: array
                      items:
                        type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/group/list'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []


  /metadata/{type}:
    get:
      tags:
        - Users
      summary: Get users metadata list
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: type
          schema:
            type: string
            enum: ['navbar', 'watchList', 'menu', 'status', 'terms', 'favCompanies']
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/metadata/{type}'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.type: method.request.path.type
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    put:
      tags:
        - Users
      summary: Update users metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                watchList:
                  type: array
                  items:
                    type: string
                favCompanies:
                  type: array
                  items:
                    type: string
                menu:
                  type: array
                  items:
                    type: object
                status:
                  type: boolean
                terms:
                  type: object
                firstLoginFlag:
                  type: boolean
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: type
          schema:
            type: string
          required: true
        - in: query
          name: setForAll
          schema:
            type: boolean
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/metadata/{type}'
        httpMethod: PUT
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.type: method.request.path.type
          integration.request.querystring.setForAll: method.request.querystring.setForAll
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []


  /filters:
    get:
      tags:
        - Users
      summary: Get users filters
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    startDate:
                      type: string
                    endDate:
                      type: string
                    status:
                      type: string
                    board:
                      type: string
                    resources:
                      type: string
                    companies:
                      type: string
                    tags:
                      type: string
                    responses:
                      type: object
                      properties:
                        happy:
                          type: boolean
                        poor:
                          type: boolean
                        neutral:
                          type: boolean

        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/filters'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    post:
      tags:
        - Users
      summary: Add users filters
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                startDate:
                  type: string
                endDate:
                  type: string
                status:
                  type: string
                board:
                  type: string
                resources:
                  type: string
                companies:
                  type: string
                tags:
                  type: string
                responses:
                  type: object
                  properties:
                    happy:
                      type: boolean
                    poor:
                      type: boolean
                    neutral:
                      type: boolean
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: added successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/filters'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

  /tour:
    get:
      tags:
        - Users
      summary: Get tour
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  isCompanyLogoAdded:
                    type: boolean
                  isAvatarAdded:
                    type: boolean
                  isUserCreated:
                    type: boolean
                  isRoleCreated:
                    type: boolean
                  isCustomAssetCreated:
                    type: boolean
                  isAdvanceSettingReviewed:
                    type: boolean
                  isNotificationSetup:
                    type: boolean
                  isIntegrationSetup:
                    type: boolean
                  isSyncStatusChecked:
                    type: boolean
                  isCompanyMapped:
                    type: boolean
                  isConfigurationAdded:
                    type: boolean
                  isPasswordTypeCreated:
                    type: boolean
                  completionPercentage:
                    type: integer
        400:
          description:  not found
        204:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/tour'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    put:
      tags:
        - Users
      summary: update user tour
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                createCustomTemplates:
                  type: boolean
                completionPercentage:
                  type: integer
                skipIntegrations:
                  type: boolean
                setupNotifications:
                  type: boolean
                reviewAdvanceSettings:
                  type: boolean
                passwordTypeFlag:
                  type: boolean
                configurationTypeCategoryMapping:
                  type: boolean
                ticketMapping:
                  type: boolean
                companyMapping:
                  type: boolean
                createAndInvite:
                  type: boolean
                personalAvatar:
                  type: boolean
              additionalProperties: false
        required: true
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: updated successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        400:
          description:  not found
        204:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/tour'
        httpMethod: PUT
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
  /roles:
    get:
      tags:
        - Users
      summary: Get user roles
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  roleId:
                    type: integer
                  name:
                    type: string
                  uuid:
                    type: string
        400:
          description:  not found
        204:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/roles'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
  /sendInvite:
    post:
      tags:
        - Users
      summary: send user an invite via email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                mobilePhone:
                  type: string
                officePhone:
                  type: string
                userName:
                  type: string
                address:
                  type: string
                dateOfBirth:
                  type: string
                gender:
                  type: string
                cwControlUsername:
                  type: string
                cwControlPassword:
                  type: string
                cwControlGroup:
                  type: string
                dateFormat:
                  type: string
                timeFormat:
                  type: string
                timezone:
                  type: string
                avatarId:
                  type: integer
                dob:
                  type: string
                userType:
                  type: string
                SC:
                  type: object
                role:
                  type: object
                status:
                  type: string
              additionalProperties: false      
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: successfully sent
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success:
                    type: boolean

        400:
          description:  not found
        204:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
  /:
    post:
      tags:
        - Users
      summary: Update users navbar information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                mobilePhone:
                  type: string
                officePhone:
                  type: string
                userName:
                  type: string
                address:
                  type: string
                dateOfBirth:
                  type: string
                gender:
                  type: string
                cwControlUsername:
                  type: string
                cwControlPassword:
                  type: string
                cwControlGroup:
                  type: string
                dateFormat:
                  type: string
                timeFormat:
                  type: string
                timezone:
                  type: string
                avatarId:
                  type: integer
                dob:
                  type: string
                userType:
                  type: string
                SC:
                  type: object
                role:
                  type: object
              additionalProperties: false
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: Content updated successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
        400:
          description:  not found
        204:
          description: Content updated successfully
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    patch:
      tags:
        - Users
      summary: Update users navbar information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                navbar:
                  type: object
                  properties:
                    status:
                      type: boolean
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: Content updated successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
        400:
          description:  not found
        204:
          description: Content updated successfully
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users'
        httpMethod: PATCH
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
  /versionForFooter:
    get:
      tags:
        - Users
      summary: Get app versions
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentVersion:
                    type: string
                  currentVersionLink:
                    type: string
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/versionForFooter'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
  /activity/exportlist:
    get:
      tags:
        - Activities
      summary: Get users menu items
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: query
          name: pageNo
          schema:
            type: number
          required: false
        - in: query
          name: pageSize
          schema:
            type: integer
          required: false
        - in: query
          name: order
          schema:
            type: string
          required: false
        - in: query
          name: sortBy
          schema:
            type: string
          required: false
        - in: query
          name: fields
          schema:
            type: object
          required: false
        - in: query
          name: conditions
          schema:
            type: object
          required: false
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/activity/exportlist'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.querystring.pageNo: method.request.querystring.pageNo
          integration.request.querystring.pageSize: method.request.querystring.pageSize
          integration.request.querystring.order: method.request.querystring.order
          integration.request.querystring.sortBy: method.request.querystring.sortBy
          integration.request.querystring.fields: method.request.querystring.fields
          integration.request.querystring.conditions: method.request.querystring.conditions
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    post:
      tags:
        - Activities
      summary: Get all activity export list
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  type: object
                limit:
                  type: integer
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/activity/exportlist'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []


  /menu/{companyId}:
    get:
      tags:
        - Users
      summary: Get users menu
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: companyId
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    menuItems:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                          icon:
                            type: string
                          route:
                            type: string
                          name:
                            type: string
                          menuId:
                            type: string
                          count:
                            type: string
                          permissions:
                            type: array
                            items:
                              type: string
                    _id:
                      type: string
                    name:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/menu/{companyId}'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.companyId: method.request.path.companyId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []


  /check/configuration/{machine}:
    get:
      tags:
        - Users
      summary: Get users menu
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: machine
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
                    sessionsId:
                      type: string
                    defaultGroup:
                      type: string
                    SCMachineFound:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/check/configurations/{machine}'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.machine: method.request.path.machine
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

  /screenconnect/connection/{machine}:
    get:
      tags:
        - Users
      summary: Get users menu
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: machine
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    CustomPropertyValues:
                      type: string
                    GuestLoggedOnUserName:
                      type: string
                    GuestOperatingSystemName:
                      type: string
                    scNewAppURL:
                      type: string
                    scLaunchAppURL:
                      type: string
                    scDownloadAppURL:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/screenconnect/connection/{machine}'
        httpMethod: GET
        requestParameters:
          integration.request.header.userAgent: context.identity.userAgent
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.machine: method.request.path.machine
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

  /menuItems:
    get:
      tags:
        - Users
      summary: Get users menu items
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userMenu:
                    type: object
                  assetData:
                    type: array
                    items:
                      type: object
                  orgConfigTypes:
                    type: array
                    items:
                      type: object
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/menuItems'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,PATCH,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /uploads/s3/{companyId}/{assetType}/{assetId}/{fileName}:
    get:
      tags:
        - Users
      summary: Get attachment doc upload data
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: companyId
          schema:
            type: string
          required: true
        - in: path
          name: assetType
          schema:
            type: string
          required: true
        - in: path
          name: assetId
          schema:
            type: string
          required: true
        - in: path
          name: fileName
          schema:
            type: string
          required: true
        - in: query
          name: mimeType
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    path:
                      type: string
                    filename:
                      type: string
                    destination:
                      type: string
                    mimetype:
                      type: string
                    originalname:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/uploads/s3/{companyId}/{assetType}/{assetId}/{fileName}'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.companyId: method.request.path.companyId
          integration.request.path.assetType: method.request.path.assetType
          integration.request.path.assetId: method.request.path.assetId
          integration.request.path.fileName: method.request.path.fileName
          integration.request.querystring.mimeType: method.request.querystring.mimeType
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

  /uploads/s3/global/{assetType}/{assetId}/{fileName}:
    get:
      tags:
        - Users
      summary: Get global attachment doc upload data
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: assetType
          schema:
            type: string
          required: true
        - in: path
          name: assetId
          schema:
            type: string
          required: true
        - in: path
          name: fileName
          schema:
            type: string
          required: true
        - in: query
          name: mimeType
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    path:
                      type: string
                    filename:
                      type: string
                    destination:
                      type: string
                    mimetype:
                      type: string
                    originalname:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/uploads/s3/global/{assetType}/{assetId}/{fileName}'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.assetType: method.request.path.assetType
          integration.request.path.assetId: method.request.path.assetId
          integration.request.path.fileName: method.request.path.fileName
          integration.request.querystring.mimeType: method.request.querystring.mimeType
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []


  /cwauth:
    get:
      tags:
        - Users
      summary: Get users CW auth
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: "string"
                      Access-Control-Allow-Methods:
                        schema:
                          type: "string"
                      Access-Control-Allow-Headers:
                        schema:
                          type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  companyId:
                    type: string
                  url:
                    type: string
        400:
          description:  not found
        204:
          description: Content not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/cwauth/data'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                            method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    options:
          responses:
            200:
              description: "200 response"
              headers:
                Access-Control-Allow-Origin:
                  schema:
                    type: "string"
                Access-Control-Allow-Methods:
                  schema:
                    type: "string"
                Access-Control-Allow-Headers:
                  schema:
                    type: "string"
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Empty"
          x-amazon-apigateway-integration:
            responses:
              default:
                statusCode: "200"
                responseParameters:
                  method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                  method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
                  method.response.header.Access-Control-Allow-Origin: "'*'"
            passthroughBehavior: "when_no_match"
            requestTemplates:
              application/json: "{\"statusCode\": 200}"
            type: "mock"

  /roles/list:
    get:
      tags:
        - Users
      summary: Get users roles list
      parameters:
        - in: query
          name: pageNo
          schema:
            type: number
          required: false
        - in: query
          name: pageSize
          schema:
            type: integer
          required: false
        - in: query
          name: order
          schema:
            type: string
          required: false
        - in: query
          name: sortBy
          schema:
            type: string
          required: false
        - in: query
          name: fields
          schema:
            type: object
          required: false
        - in: query
          name: conditions
          schema:
            type: object
          required: false
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    roleId:
                      type: integer
                    name:
                      type: string
                    uuid:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/roles/list'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,PATCH,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /countryList:
    get:
      tags:
        - Users
      summary: Get country list
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    countryId:
                      type: integer
                    countryName:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/countryList'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /terms:
    put:
      tags:
        - Users
      summary: Update user terms
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: updated successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "updated successfully"
                  success:
                    type: boolean
                    example: true
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/users/terms'
        httpMethod: PUT
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,PATCH,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /uploads/s3:
    delete:
      tags:
        - Users
      summary: Delete image
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: query
          name: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: deleted successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: string
                  filename:
                    type: string
                  destination:
                    type: string
                  mimetype:
                    type: string
                  originalname:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/uploads/s3'
        httpMethod: DELETE
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.querystring.path: method.request.querystring.path
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /autotask/url:
    get:
      tags:
        - Users
      summary: Get autotask URL
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    url:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/autotask/url'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /esb/integrations:
    get:
      tags:
        - Users
      summary: Get ESB integration
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    url:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/esb/integrations'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
        
  /screenconnect/activity/{companyId}/{configurationId}:
    post:
      tags:
        - Users
      summary: Add screen activity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                serverMachine:
                  type: string
                group:
                  type: string
                companyName:
                  type: string
              additionalProperties: false
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: companyId
          schema:
            type: string
          required: true
        - in: path
          name: configurationId
          schema:
            type: string
          required: true
      responses:
        200:
          description: added successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminUrl}/screenconnect/activity/{companyId}/{configurationId}'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.companyId: method.request.path.companyId
          integration.request.path.configurationId: method.request.path.configurationId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
        
components:
  schemas:
    Empty:
      type: "object"
  securitySchemes:
    api_key:
      type: apiKey
      name: x-api-key
      in: header
    token-authorizer:
      type: apiKey
      name: token
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri: arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:711644918579:function:V4-service-dev-validateUser/invocations
        authorizerCredentials: 'arn:aws:iam::711644918579:role/cf2'
        identitySource: method.request.header.token
x-amazon-apigateway-documentation:
  version: 1.0.3
  documentationParts:
    - location:
        type: API
      properties:
        description: API description
        info:
          description: API info description 4
          version: API info version 3
    - location:
        type: METHOD
        method: GET
      properties:
        description: Method description.
    - location:
        type: RESPONSE
        method: GET
        statusCode: "200"
      properties:
        description: 200 response