openapi: 3.0.0
info:
  title: yReceipts EPOS APIs
  description: >
    Welcome to the yReceipts Developer Portal.


    yReceipts provides a digital receipt service and integrated marketing engine
    to deliver bespoke receipts with targeted contextual advertising, customer
    feedback and social media links from any point of sale device.


    You can learn more about the product at
    [www.yreceipts.com](https://www.yreceipts.com).


    This document outlines options for Retailers and Point of Sale partners to
    integrate with the service by posting a receipt to the yReceipts gateway.


    Receipts are sent to the gateway URL as HTTPS POST requests with an XML body
    from where the digital receipt can be distributed (via yReceipts or
    nominated ESPs) and the captured transactional and customer data transferred
    to nominated databases.


    ## Before You Get Started

    Please note the words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in [RFC
    2119](https://www.ietf.org/rfc/rfc2119.txt).


    Please familiarise yourself with the following before reading this
    documentation:


    * [Extensible Markup Language (XML) 1.0 (Fifth
    Edition)](https://www.w3.org/TR/xml/)

    * [Uniform Resource Locators (URL)](https://tools.ietf.org/html/rfc1738)

    * [OpenAPI
    Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)


    ## Integration Process

    A common process an EPOS integration is as follows:


    1. The EPOS partner requests sandbox access from
    [yReceipts](mailto:support@yreceipts.com?subject=Sandbox%20access%20for%20new%20API%20integration).

    1. The EPOS partner completes the integration.

    1. yReceipts requests the EPOS partner to put through a set of test
       transactions.
    1. yReceipts reviews the test transactions and requests the EPOS partner
       to make any necessary corrections.
    1. yReceipts provides production access credentials.


    ### Integration Review


    For final review of the yReceipts integration, we ask that you provide us

    with the following:


    1. A series of sample transactions following the table below. Please ensure
    a variety of email-only, paper-only, and email +paper receipt transactions
    is processed.

    1. A test of the offline mode functionality using the following steps:
        * Disconnect the POS device from the internet.
        * Process a transaction as normal.
        * Wait for a minimum of 10 minutes.
        * Reconnect the POS device to the internet.
    1. Sample logs showing the following:
        * No plain-text PII is logged.
        * The logs for a set of successful API calls.
        * The logs for a set of unsuccessful API calls.
    1. Comprehensive Videos and Screenshots of the UI interface and user journey
       showing:
        * Paper-Only Transaction.
        * Email-Only Transaction.
          - Please enter a syntactically invalid email address to show
            the syntax error indication mechanism.
          - Please enter a syntactically valid but non-existent email address
            to demonstrate feedback from the Email Validation API.
        * Paper and Email Transaction.

    We ask that each of these items is treated as wholly separate to aid

    in testing/debugging and avoid any instance where an issue may be obscured.


    |         |                            |            |               
    |             |              |

    |---------|----------------------------|------------|----------------|-------------|--------------|

    | Test ID | # of different items       | QTY        | Discount       |
    Return      | Tender       |

    | 1       | 1                          | 1x         |               
    |             | Cash         |

    | 2       | 2                          | 1x, 2x     |               
    |             | Card         |

    | 3       | 1                          | 2x         | Basket Level  
    |             | Voucher      |

    | 4       | 3                          | 1x, 1x, 2x | Item Level    
    |             | Cheque       |

    | 5       | 1                          | 1x         | Price Override
    |             | Cash & Card  |

    | 6       | 2                          | 1x, 2x     | Basket Level   | Item
    Level  | Any other    |

    | 7       | 1                          | 1x         |                | Full
    Basket | Store Credit |

    | 8       | 2                          | 1x, 2x     |                | Item
    Level  | Gift Voucher |


    |        
    |                                                                                      
    |

    |---------|---------------------------------------------------------------------------------------|

    | 9       | Refund and new purchase with lower value (customer exchanging
    for a lower price item) |

    | 10      | Full exchange of
    products                                                             |

    | 11      | Issue of Credit
    note                                                                  |

    | 12      | Reprinted receipt (from any of the transactions
    above)                                |

    | 14      | Void
    transaction                                                                     
    |

    | 15      | Tax-free
    transaction                                                                 
    |



    ## UX

    A common process flow for an integrated POS is as follows:


    1. Following a completed transaction and before a receipt is printed, a
    ‘Receipt Options’ dialogue box is opened with three options: `Email`, 
    `Print` and `Email & Print`.

       yReceipts advises to also include an option to collect consent for personal data use at this stage of the POS process.
    1. If `Email` is selected, a new `Customer Identification` dialogue is
    opened containing the user’s email if looked up in a CRM or a blank text box
    if the user is unidentified.
        1. Once the customer’s email address has been entered, an XML receipt document is posted as below.
    1. If `Email & Print` is selected the `Customer Identification` dialogue box
    is opened and a paper receipt is printed.
        1. Once a customer’s email address is entered an XML receipt document is posted as below.
    1. If `Print` is selected the `Receipt Options` dialogue is closed and a
    paper receipt is printed.


    ## API Security

    To authorize requests sent to the server a header MUST be added to the HTTP
    request as shown below:


    ```

    POST /receipts/ HTTP/1.1

    Host: yreceipts-sandbox.appspot.com

    Authorization: yReceipts MTE5MDA4OmVjLTFhMmI2ODg1M2Y2Yg==

    ```


    The authorization key (in the example `MTE5MDA4OmVjLTFhMmI2ODg1M2Y2Yg==`)
    will be provided by yReceipts.


    _All requests MUST be sent over HTTPS to ensure the confidentiality of the
    API key and PII._


    ## Standards


    The yReceipts system is based on a number of international standards to
    facilitate ease of deployment and wide compatibility.


    ### HTTP over TLS (HTTPS)


    The yReceipts gateway fully supports the newest stable versions of
    [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) and
    [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security).


    This ensures the highest level of security and compatibility with a wide
    range HTTPS clients.


    ### Receipt Format


    The yReceipts gateway accepts data in an XML format based on the
    [Association for Retail Technology Standards
    (ARTS)](https://en.wikipedia.org/wiki/Association_for_Retail_Technology_Standards)
    Digital Receipt format (2002 version).


    This ensures a high level of compatibility with a wide range of third party
    systems, such as EPOS.


    ### Currency Format (`@Currency`)


    Currency codes supplied to the yReceipts gateway MUST follow [ISO
    4217](https://en.wikipedia.org/wiki/ISO_4217).


    This is required to format currencies on the email receipts and produce
    accurate reports.


    Valid examples:


    *   GBP

    *   USD


    Invalid examples:


    *   £

    *   US$


    ### Language and Territory Format (`<Locale>`)


    Language and territory identifiers for the yReceipts gateway MUST be in the
    [locale](https://en.wikipedia.org/wiki/Locale_(computer_software)) format
    defined by [ISO/IEC 15897](https://en.wikipedia.org/wiki/ISO/IEC_15897).
    Both the language and territory components MUST be supplied. The codeset
    component is not supported because UTF-8 is used exclusively. The modifier
    component is not supported. This format is strict in that a capitalisation
    error would make the value invalid.


    This is required to format dates, currencies, etc as well as apply an
    appropriate translation to the email receipts.


    Valid examples:


    *   en\_GB (**En**glish in **G**reat **B**ritain)

    *   fr\_FR (**Fr**ench in **Fr**ance)

    *   nl\_BE (Dutch/**N**ether**l**andish in **Be**lgium AKA Flemish)


    Invalid examples:


    * EN\_gb (incorrect capitalisation)

    * en-GB (dash instead of underscore)

    * en\_GB.UTF-8 (codeset component not supported)

    * en\_IE@euro (modifier component not supported)


    ### Time Zone Format (`<TimeZone>`)


    Time zone information for the yReceipts gateway MUST be in the [IANA Time
    Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
    format.


    This is required to display the correct time information on the email
    receipts as well as producing accurate performance reports.


    Valid examples:


    * Europe/London

    * Australia/Sydney


    Invalid examples:


    * Paris

    * UTC+01:00


    ## Datetime Format


    All datetime values MUST follow the [ISO
    8601](https://en.wikipedia.org/wiki/ISO_8601) format.


    Valid examples:


    * 2019-10-07T08:10:43+00:00

    * 2018-01-28T15:56:24+05:00


    Invalid examples:


    * 2019-10-07T08:10:43+25:00 (unexpected UTC offset)

    * 2018-28-01T15:56:24 (missing UTC offset)

    * 2019/10/07 08.10.43+25.00 (invalid separators)

    * 28-01-2018T15:56:24+05:00 (invalid order)


    ## Posting a Receipt


    The yReceipts gateway accepts messages in the Hypertext Transfer Protocol
    posted to this URL:


    * Sandbox

      `https://yreceipts-sandbox.appspot.com/receipts/?email_address=shopper%40example.com&unique_id=90358df5-83b3-47c9-8dd5-564d91418f05&qpt=0`

    * Production - US Region

      `https://www.yreceipts.com/receipts/?email_address=shopper%40example.com&unique_id=90358df5-83b3-47c9-8dd5-564d91418f05&qpt=0`

    * Production - EU Region

      `https://yreceipts-prod-uk.appspot.com/receipts/?email_address=shopper%40example.com&unique_id=90358df5-83b3-47c9-8dd5-564d91418f05&qpt=0`

    The receipt SHALL be emailed to the email address specified in the query
    string field 'email_address' (e.g. `&email_address=shopper%40example.com`).
    The email address MUST be [syntactically
    valid](https://stackoverflow.com/a/2049510/784331). The `unique_id` field
    MUST contain a random globally unique identifier, such as a version 4 UUID,
    linked to that receipt only.


    If the receipt isn’t posted immediately (e.g. because of the till being
    offline), a `qpt` query string field (stating, in _milliseconds_, how long
    the receipt waited before being posted MUST be provided.


    When reposting a receipt (e.g. due to the till being offline, a failure, or
    a timeout) [exponential
    backoff](https://cloudplatform.googleblog.com/2016/11/how-to-avoid-a-self-inflicted-DDoS-Attack-CRE-life-lessons.html)
    MUST be used.


    The receipt MUST be sent as an HTTP POST request. Posting the receipt will
    trigger the parsing of the message payload which if successful will return a
    '200 OK' status. A capture of a receipt being posted is shown below
    (shortened for brevity). Special XML characters `&`, `<`, and `>` _in the
    character data_ MUST be encoded as `&amp;`, `&lt;`, and `&gt;` respectively.
    Please see the example below.


    ```

    POST
    /receipts/?email_address=shopper%40example.com&unique_id=90358df5-83b3-47c9-8dd5-564d91418f05&qpt=0
    HTTP/1.1

    Host: yreceipts-sandbox.appspot.com

    <Receipt>
        <Device>
            <DeviceID>EasyPos_0014_005_2</DeviceID>
            <TransactionNumber>34</TransactionNumber>
        </Device>
        <DateTime>2013-03-15T10:05:15+00:00</DateTime>
        <TransactionID>001010003420130315</TransactionID>
        <TransactionDetail>
            <Operator>
                <AssociateID>Test Associate ID</AssociateID>
                <AssociateName>Test AssociateName</AssociateName>
            </Operator>
            <SaleItem>
                <Text>Notepad &amp; Pen Set &lt;clearance&gt;</Text>
                <POSItemID>TestItemID</POSItemID>
                <Quantity>3</Quantity>
                <UnitPrice>3</UnitPrice>
                <Amount>9</Amount>
                <ListPrice>9</ListPrice>
            </SaleItem>
            <Tender>
                <Text>Cash</Text>
                <Amount>10</Amount>
            </Tender>
            <Subtotal>
                <Text>Subtotal</Text>
                <Amount>11</Amount>
            </Subtotal>
            <Total>
                <Text>Subtotal</Text>
                <Amount>9</Amount>
            </Total>
        </TransactionDetail>
    </Receipt>

    ```


    The response provided by the server is shown below. Both the HTTP request
    (URL + headers + body) and the HTTP response (status code + headers + body)
    MUST be logged to allow for debugging if necessary.


    ```

    HTTP/1.1 200 OK

    Content-Type: text/html; charset=utf-8

    Cache-Control: no-cache

    Expires: Fri, 01 Jan 1990 00:00:00 GMT

    Date: Sat, 01 May 2010 00:44:46 GMT

    Server: Google Frontend

    X-XSS-Protection: 0

    x-yreceipts-document-key: **<receipt key>**

    Transfer-Encoding: chunked


    A receipt was posted successfully from Test Store to shopper@example.com

    ReceiptPosted

    ```


    **You MUST NOT post any placeholder or default data, such as a nought. Such
    data may be interpreted by our system as real data and be presented to the
    end user.**


    When posting an email receipt, you MUST indicate whether the corresponding
    paper receipt was printed out or suppressed by appending `&email_only=false`
    or `&email_only=true` respectively to the URL.


    Standard HTTP status codes are in use: if the receipt is parsed successfully
    and the receipt email is sent to the consumer, a 2xx status is returned. If
    parsing the receipt fails or the receipt cannot be sent, the response will
    be a 4xx or a 5xx. In either case, the client software MUST print a paper
    receipt as a fall-back. On 5xx errors, the request SHOULD be queued and
    retried after 30 minutes and then in an exponential manner (after 60, 120,
    240, ... minutes). It's recommended to permanently fail after two days if
    the receipt keeps failing. Queued receipts MUST be sent with either a `qpt`
    query string field to indicate when the transaction took place.


    Our gateway performs numerous checks upon receiving a receipt payload, such
    as validating the XML contents, email address, and any keys; spam prevention
    checks; and transaction integrity checks. Depending on the complexity of the
    payload and the circumstances, this may take a number of seconds. Due to
    that, API calls to our gateway MUST be asynchronous so that the UI thread in
    the client will not be blocked.


    ### Non-Email Receipts


    If the customer doesn't opt for an email receipt, the receipt SHOULD still
    be posted to yReceipts for reporting purposes. The receipt is posted in the
    manner described above, except the email address in the query string MUST be
    paper_chosen@yreceipts.com (i.e.
    `&email_address=paper_chosen%40yreceipts.com`).


    ### Gift Receipts


    To issue a digital gift receipt, i.e. a receipt without any amounts or
    payment information, in addition to the transactional receipt, append
    `&gift_receipt=true` to the URL. The gift receipt will be emailed to the
    recipient of the transactional receipt separately so that they can easily
    forward it to the giftee.


    It is also possible to issue a gift receipt, or multiple gift receipts, out
    of a subset of sale items. Please get in touch with us if you’d like to use
    this service.


    ### Testing in Production


    Test receipts in the production environment MUST include a test="true"
    attribute for the Receipt tag:


    `<Receipt test="true">`


    However, this MUST NOT be used in non-production environments, e.g. the
    sandbox.


    ### Handling Errors


    If a 5xx error or a timeout occurs, the receipt MUST be re-posted in the
    manner described above.


    422 errors indicate a permanent failure (e.g. syntax errors), in which case
    the receipt MUST NOT be reposted.


    ### Automatic Creation and Updating of Business Locations


    To facilitate easy deployment, there is a mechanism to automatically create
    or update stores based on information contained in the XML payload.


    The structure of the data stored is Company → Store → Till and this is
    reflected in the required hierarchical DeviceID format:


    `POSProvider_CompanyID_LocationID_DeviceID`


    For companies with multiple country locations, a CompanyCountryID can be
    added:


    `POSProvider_CompanyID_CompanyCountryID_LocationID_DeviceID`


    An example is shown below. Underscores are used to separate the identifiers
    so cannot be used within them. Any identifiers found existing in the
    database will be updated with new data while new identifiers will be added
    as new Companies, Stores or Tills. The identifiers MUST be alphanumeric.


    `<DeviceID>EasyPos_0014_005_2<DeviceID>`


    Or with an additional country code:


    `<DeviceID>EasyPos_0014_0014DE_005_2<DeviceID>` for customer 0014 in
    Germany, store 5, till 2


    The Issuer tag is the __organisation (group)__ details. Continuing the
    example above, the below XML would create/update a company with the
    following properties within the yReceipts system.


    ```

    <Issuer>
        <Name>Toys for Kids Head Office</Name>
        <Address>
            <Street1>Park Street</Street1>
            <City>London</City>
            <State></State>
            <PostalCode>SE1 9DY</PostalCode>
        </Address>
        <Email>toysforkids@example.com</Email>
        <Locale>en_GB</Locale>
        <TimeZone>Europe/London</TimeZone>
        <TaxID>VAT 123456789</TaxID>
    </Issuer>

    ```


    The Location tag refers to the __individual store__ within the organisation.
    The following example would create/update a store entity with the following
    properties. The Name tag MUST include the entire store name along with any
    brand names, as it’ll be displayed throughout your email receipts verbatim.


    ```

    <Location>
        <Name>Toys for Kids Covent Garden</Name>
        <Address>
            <Street1>Upper Street</Street1>
            <City>London</City>
            <State></State>
            <PostalCode>N1 1QN</PostalCode>
        </Address>
        <Telephone>020 888 888</Telephone>
        <Email>covent@example.com</Email>
        <Locale>en_GB</Locale>
        <TimeZone>Europe/London</TimeZone>
    </Location>

    ```


    ### Customer Data


    Additional information about the customer, such as their location, phone
    number, and marketing opt-in MAY be included in the Recipient tag.


    Special email addresses, such as `paper_chosen@yreceipts.com`, MUST NOT be
    included in the Recipient tag.


    ## Amount Normalization


    Summation of receipt amounts MUST adhere to the following standard:


    ```

    Transaction Detail:
        Sale Items:
            List Price = Unit Price * Quantity
            Amount = List Price + Item Discount
            Discount Reduction Percent = 100 * Discount Amount / List Price
            Tax Rate = 100 * Tax Amount / Sale Item Amount
        Transaction Taxes:
            Gross Taxed Amount = Taxable Amount + Amount
            Tax Rate = 100 * Amount / Taxable Amount
        Subtotal = Sale Items
        Total = Tenders = Sale Items + Transaction Discounts
    ```


    ## Optional Requests On Data Capture Screen


    Optional value-add services can be integrated into the data capture screen
    on the till. Common services include the below (non-exhaustive list).


    ### Email Address Validation


    Before a receipt is posted, any new email addresses SHOULD be validated with
    yReceipts' email validation API. This is to ensure deliverability and email
    reputation. The email address MUST be syntactically valid.


    **Please note this service needs to be configured by yReceipts. Please get
    in touch with your account manager before using this API endpoint.**


    Request example:


    ```

    GET
    /email_address/shopper%40example.com/status?device_key=EasyPos_0014_005_2
    HTTP/1.1

    Host: yreceipts-sandbox.appspot.com

    Authorization: yReceipts MTE5MDA4OmVjLTFhMmI2ODg1M2Y2Yg==

    ```


    Response example:

    ```

    {
        status: "unreachable",
        permanent_blacklist: false,
        code: "CLAIMED_INVALID",
        complained: false,
        blacklisted: false,
        protected: false,
        reachable: false,
        message: "The email address was deemed invalid by a validation service.",
        bounced: false,
        email_address: "shopper@example.com",
        syntactically_correct: true
    }

    ```


    If the status reads unreachable as in the example above, the receipt MUST
    NOT be posted; instead, an error message MUST be displayed to the operator.
    The message specified in the response MAY be displayed. A custom message MAY
    also be displayed. The following error codes may be returned:

    * CLAIMED\_VALID - The email address was deemed valid by a partner
    validation service.

      Default message: _The email address was deemed valid by a validation service._
    * CLAIMED\_INVALID - The email address was deemed invalid by a partner
    validation service.

      Default message: _The email address was deemed invalid by a validation service._
    * BOUNCE - The email address has recently caused a hard bounce.

      Default message: _The email address has recently caused a bounce._
    * SOFT\_BOUNCE - The email address has recently caused a soft bounce.

      Default message: _The email account is not accepting email messages._
    * MULTI\_BOUNCE - The email address has caused multiple hard bounces and
    therefore has been permanently blacklisted.

      Default message: _The email address has caused multiple bounces._
    * ACCOUNT\_BAN - The email address has been manually marked as
    undeliverable, e.g. at the customer’s request.

      Default message: _The customer has requested not to receive email receipts._
    * COMPLAINT - The customer has complained about an email receipt.

      Default message: _The customer has complained about receiving spam emails._
    * PROTECTED - The yReceipts system is not allowed to send email to this
    email address. Please note this is a rarely used internal feature and can be
    treated the same as ACCOUNT_BAN from your point of view.

      Default message: _The customer has requested not to receive email receipts._

    If it is not possible to implement the API in such a way that an error
    message is displayed to the operator before concluding a transaction, then
    this API MUST NOT be used. This API MAY be used during a transaction only
    and MAY NOT be used in the background (e.g. during post-processing of a
    transaction or server-side).


    An option to manually override the validation result, e.g. when the customer
    confirms the email address is correct, MUST be implemented.


    In case the device is offline, requests to this API MUST time out promptly
    so as not to prevent the transaction from being concluded.


    Our gateway performs numerous checks upon receiving a validation request,
    such as DNS and protocol-level verification. Depending on the servers of the
    email address being validated, this may take a number of seconds. Due to
    that, email validation API calls MUST be asynchronous so that the UI thread
    in the client will not be blocked/frozen.


    #### Email address validation in other environments


    The email address validation API may be used in other environments to ensure
    a consistent end-user experience.


    Recommended email validation flow for e-commerce platforms and web
    front-ends:


    1. The user enters a syntactically valid email address.

    1. An AJAX call is sent to the validation API.

    1. If the entered email address is deemed invalid by the validation API, the
    user is required to enter an email address again.
        * If the same email address is entered, the user is allowed to proceed.
        * If another email address is entered, the process is repeated from point 2.

    Please note the email validation API MUST NOT be used with syntactically
    incorrect email addresses.


    __Please note any requests to the email validation API MUST be performed
    server-side to protect the confidentiality of the auth key.__


    ### Customer look-up using partial credit card information


    Before the data capture screen appears on the till, a request can be
    executed which will use the token or the combination of the last four
    digits, expiry date (if available) and card type to look up and present a
    customer profile of a returning customer who has used the same card before.
    For multiple matches, yReceipts will present up to 20 results.


    Please get in touch with your yReceipts account manager if you'd like to use
    this service.


    ## Resending Email Receipts


    If an email receipt is not delivered to the recipient - for example, because
    of a typo in the recipient’s email address - the yReceipts system has the
    ability to resend it to another email address. Such requests MUST NOT be
    enqueued, MUST NOT be triggered automatically (i.e. MUST be triggered by an
    explicit user action only), and the result MUST be presented to the user
    immediately.


    **Please note this service needs to be configured by yReceipts. Please get
    in touch with your yReceipts account manager before using this API
    endpoint.**


    Request example:


    ```

    POST /datahub/resend_receipt.json?device_key=EasyPos_0014_005_2 HTTP/1.1

    Host: yreceipts-sandbox.appspot.com


    {
        "receiptKey": "ahBzfnlyZWNdgdfhjrZWNlaXB0GICAiPyDpLcKDA",
        "emailAddress": "shopper@example.com"
    }

    ```


    Success will be indicated by a 200 response.


    Please refer to the `Posting a Receipt` section for obtaining the receipt

    (document) key.


    ## Data Transfer to Nominated Databases


    ### Webhooks


    Any request MAY result in a webhook post. A webhook is attached to a store
    or company and will post the entire or a subset of receipt and customer data
    to third parties. One common use case for real-time webhooks is posting the
    email addresses of shoppers who have opted in to receive additional
    information from the issuing merchant to a CRM database. Data can be posted
    to any nominated databases.


    Custom service integrations are encouraged, so please feel free to contact
    yReceipts for any additional webhook requirements. There is no client-side
    implementation for these to work.


    ### Additional Transfer Methods


    Where databases don't support web services you can contact yReceipts to
    discuss your specific requirements.
  contact:
    name: yReceipts
    url: 'https://www.yreceipts.com'
    email: support+api@yreceipts.com
  version: 1.0.2
servers:
  - url: 'https://yreceipts-sandbox.appspot.com'
    description: Sandbox
  - url: 'https://yreceipts-prod-uk.appspot.com'
    description: Production (EU Region)
  - url: 'https://www.yreceipts.com'
    description: Production (US Region)
security:
  - ApiKeyAuth: []
tags:
  - name: Receipts
    description: Digital receipt service.
    externalDocs:
      description: Support
      url: 'https://support.yreceipts.com'
  - name: Email Address
    description: Email address validation service.
    externalDocs:
      description: Support.
      url: 'https://support.yreceipts.com'
paths:
  /receipts/:
    post:
      tags:
        - Receipts
      summary: Post a digital receipt record and email it to a shopper.
      description: >
        When reposting a receipt (e.g. due to the till being offline, a failure,
        or a timeout) exponential backoff MUST be used.
      operationId: postReceipt
      parameters:
        - name: email_address
          in: query
          description: >-
            The email address to send the digital receipt to. If paper is being
            printed the email address should be paper_chosen@yreceipts.com to
            ensure the reporting data is correct.
          required: true
          style: form
          explode: true
          schema:
            type: string
          example: john@example.com
        - name: sms_number
          in: query
          description: |
            An SMS phone number to send the digital receipt to.

            This feature is not enabled by default. Please get in touch
            with your yReceipts account manger to use it.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: unique_id
          in: query
          description: >-
            The `unique_id` field MUST contain a random globally unique
            identifier, such as a version 4 UUID, linked to that receipt only.
          required: true
          style: form
          explode: true
          schema:
            type: string
          example: b457edb9-2f85-4343-aefb-77a70ce15492
        - name: qpt
          in: query
          description: >-
            Queue Processing Time. If the receipt isn’t posted immediately (e.g.
            because of the till being offline) a `qpt` query string field
            (stating, in milliseconds, how long the receipt waited before being
            posted) MUST be provided.
          required: true
          style: form
          explode: true
          schema:
            type: number
          example: 954963
        - name: email_only
          in: query
          description: >-
            When posting an email receipt, you MUST indicate whether the
            corresponding paper receipt was printed out or suppressed by
            appending `&email_only=false` or `&email_only=true` respectively to
            the URL.
          required: true
          style: form
          explode: true
          schema:
            type: boolean
            enum:
              - false
              - true
          example: true
        - name: gift_receipt
          in: query
          description: >-
            To issue a digital gift receipt, i.e. a receipt without any amounts
            or payment information, in addition to the transactional receipt,
            append `&gift_receipt=true` to the URL. The gift receipt will be
            emailed to the recipient of the transactional receipt separately so
            that they can easily forward it to the giftee. It is also possible
            to issue a gift receipt, or multiple gift receipts, out of a subset
            of sale items. Please get in touch with us if you’d like to use this
            service.
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            enum:
              - false
              - true
          example: false
      requestBody:
        description: >-
          The transactional and customer information associated with the
          receipt.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Receipt'
        required: true
      responses:
        '200':
          description: OK. A receipt will be sent to the provided shopper.
          headers:
            x-yreceipts-document-key:
              description: The primary key of the stored receipt.
              style: simple
              explode: false
              schema:
                type: string
            x-yreceipts-customer-key:
              description: The primary key of the stored customer.
              style: simple
              explode: false
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
                example: >
                  A receipt was posted successfully from Test Store to
                  shopper@example.com

                  ReceiptPosted.
        '400':
          description: >-
            Bad Data. For example, missing recipient information. In 4xx return,
            the client software MUST print a paper receipt as a fall-back.
          content:
            text/plain:
              schema:
                type: string
                example: There was a problem. Please print a paper receipt.
        '401':
          description: Missing or malformed API key.
          content:
            text/plain:
              schema:
                type: string
                example: No authorization key was provided.
        '403':
          description: Access denied.
          content:
            text/plain:
              schema:
                type: string
                example: >-
                  The provided authorization key does not have access to this
                  resource.
        '500':
          description: >-
            Server Error. On 5xx errors, the request SHOULD be queued and
            retried after 30 minutes and then in an exponential manner (after
            60, 120, 240, ... minutes). It is recommended to permanently fail
            after two days if the receipt keeps failing. Queued receipts MUST be
            sent with a `qpt` query string field to indicate when the
            transaction took place.
          content:
            text/plain:
              schema:
                type: string
                example: Server Error.
  '/email_address/{email}/status':
    get:
      tags:
        - Email Address
      summary: Validate new customer email address.
      description: >
        This should be done before a receipt is posted to ensure deliverability
        and email reputation. The email address MUST be syntactically valid.


        ## Valid email address example

        Request:

        ```

        GET
        /email_address/valid_email%40example.com/status?device_key=EasyPos_0014_005_2
        HTTP/1.1

        Host: yreceipts-sandbox.appspot.com

        Authorization: yReceipts MTE5MDA4OmVjLTFhMmI2ODg1M2Y2Yg==

        ```


        Response:

        ```

        {
          status: "reachable",
          permanent_blacklist: false,
          code: "CLAIMED_VALID",
          blacklisted: false,
          protected: false,
          complained: false,
          reachable: true,
          message: "The email address was deemed valid by a validation service.",
          bounced: false,
          email_address: "valid_email@example.com",
          syntactically_correct: true
        }

        ```


        ## Invalid email address example


        Request:

        ```

        GET
        /email_address/invalid_email%40example.cm/status?device_key=EasyPos_0014_005_2
        HTTP/1.1

        Host: yreceipts-sandbox.appspot.com

        Authorization: yReceipts MTE5MDA4OmVjLTFhMmI2ODg1M2Y2Yg==

        ```


        Response:

        ```

        {
          status: "unreachable",
          permanent_blacklist: false,
          code: "CLAIMED_INVALID",
          blacklisted: false,
          protected: false,
          complained: false,
          reachable: false,
          message: "The email address was deemed invalid by a validation service.",
          bounced: false,
          email_address: "invalid_email@example.cm",
          syntactically_correct: true
        }

        ```
      operationId: getEmailAddressStatus
      parameters:
        - name: email
          in: path
          description: The email address to be validated.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: john@example.com
        - name: device_key
          in: query
          description: Hierarchical identifier of the device.
          required: true
          style: form
          explode: true
          schema:
            type: string
          example: POSprovider_FashionAvenue_FashionAvenueGB_002_01
      responses:
        '200':
          description: JSON document outlining the deliverability of the email address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidationResponse'
        '401':
          description: Missing or malformed API key.
          content:
            text/plain:
              schema:
                type: string
                example: No authorization key was provided.
        '403':
          description: Access denied.
          content:
            text/plain:
              schema:
                type: string
                example: >-
                  The provided authorization key does not have access to this
                  resource.
  /datahub/resend_receipt.json:
    post:
      tags:
        - Receipts
      summary: Resend a digital receipt.
      operationId: resendReceipt
      parameters:
        - name: device_key
          in: query
          description: Hierarchical identifier of the device.
          required: true
          style: form
          explode: true
          schema:
            type: string
          example: POSprovider_FashionAvenue_FashionAvenueGB_002_01
      requestBody:
        description: JSON document outlining the details of the receipt to be resent.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendReceiptRequest'
        required: true
      responses:
        '200':
          description: OK. The receipt will be resent to the provided shopper.
        '400':
          description: 'Bad Request. For example, a malformed payload.'
        '401':
          description: Missing or malformed API key.
          content:
            text/plain:
              schema:
                type: string
                example: No authorization key was provided.
        '403':
          description: Access denied.
          content:
            text/plain:
              schema:
                type: string
                example: >-
                  The provided authorization key does not have access to this
                  resource.
components:
  schemas:
    ResendReceiptRequest:
      required:
        - emailAddress
        - receiptKey
      type: object
      properties:
        receiptKey:
          pattern: '\b[\w-]+\b'
          type: string
          description: The primary key of the receipt.
          example: ahBzfnlyZWNdgdfhjrZWNlaXB0GICAiPyDpLcKDA
        emailAddress:
          type: string
          description: The email address being queried.
          example: john@example.com
    EmailValidationResponse:
      required:
        - email_address
        - message
        - reachable
        - status
        - syntactically_correct
      type: object
      properties:
        status:
          type: string
          description: >-
            Decision on whether the email address is currently reachable or
            unreachable.
          example: unreachable
          enum:
            - unreachable
            - reachable
            - invalid
            - unknown
        permanent_blacklist:
          type: boolean
          description: Indicates if the email address is permanently blacklisted.
          example: false
          enum:
            - false
            - true
        code:
          type: string
          description: >
            * `CLAIMED_VALID` - The email address was deemed valid by a partner
            validation service.

            * `CLAIMED_INVALID` - The email address was deemed invalid by a
            partner validation service.

            * `BOUNCE` - The email address has recently caused a hard bounce.

            * `SOFT_BOUNCE` - The email address has recently caused a soft
            bounce.

            * `MULTI_BOUNCE` - The email address has caused multiple hard
            bounces and therefore has been permanently blacklisted.

            * `ACCOUNT_BAN` - The email address has been manually marked as
            undeliverable, e.g. at the customer’s request.

            * `COMPLAINT` - The customer has complained about an email receipt.

            * `PROTECTED` - The yReceipts system is not allowed to send email to
            this email address. Please note this is a rarely used internal
            feature and may be treated the same as ACCOUNT_BAN.
          example: CLAIMED_INVALID
          enum:
            - CLAIMED_INVALID
            - CLAIMED_VALID
            - BOUNCE
            - SOFT_BOUNCE
            - MULTI_BOUNCE
            - ACCOUNT_BAN
            - COMPLAINT
            - PROTECTED
        blacklisted:
          type: boolean
          description: Indicates if the email address is temporarily blacklisted.
          example: false
          enum:
            - false
            - true
        protected:
          type: boolean
          description: Indicates if the email address is protected.
          example: false
          enum:
            - false
            - true
        reachable:
          type: boolean
          description: Indicates if the email address is reachable.
          example: false
          enum:
            - false
            - true
        message:
          type: string
          description: Response message.
          example: The email address was deemed invalid by a validation service.
        bounced:
          type: boolean
          description: Indicates if the email address has recently caused a bounce.
          example: false
          enum:
            - false
            - true
        complained:
          type: boolean
          description: Indicates if the customer has flagged the service as spam.
          example: false
          enum:
            - false
            - true
        email_address:
          type: string
          description: The email address being queried.
          example: john@example.com
        syntactically_correct:
          type: boolean
          description: Indicates if the email address is syntactically correct.
          example: true
          enum:
            - false
            - true
    Receipt:
      required:
        - Currency
        - DateTime
        - Device
        - HeaderText
        - Issuer
        - Location
        - Transaction
        - TransactionDetail
        - TransactionID
      type: object
      properties:
        Currency:
          description: >-
            The currency used for the transaction as defined by [ISO
            4217](https://en.wikipedia.org/wiki/ISO_4217).
          example: GBP
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'
        Transaction:
          type: boolean
          description: >-
            Indicates if the payload contains transactional data (`true`) or
            customer data only (`false`).
          example: true
          xml:
            attribute: true
        Issuer:
          required:
            - Email
            - TaxID
            - Telephone
          description: Information about the brand.
          example:
            Name: Fashion Avenue
            Locale: en_GB
            TimeZone: Europe/London
            TaxID: 947 2957 89
            Address:
              Street1: 73 Holborn Lane
              City: London
              County: Greater London
              State: England
              PostalCode: E12 3PT
              Country: United Kingdom
            Telephone: 02079460547
            Email: customer.service@fashionavenue.co.uk
          allOf:
            - $ref: '#/components/schemas/BusinessLocation'
        Location:
          description: |
            Information about the store where this transaction took place.
          example:
            Name: Fashion Avenue Oxford Street
            Locale: en_GB
            TimeZone: Europe/London
            TaxID: 947 2957 89
            Address:
              Street1: Oxford Street
              City: London
              County: Greater London
              State: England
              PostalCode: W1D 1BS
              Country: United Kingdom
            Telephone: 020 7946 0999
            Email: customer.service@fashionavenue.co.uk
          allOf:
            - $ref: '#/components/schemas/BusinessLocation'
        Device:
          $ref: '#/components/schemas/Receipt_Device'
        Recipient:
          example:
            ContactName:
              Title: Mr
              FirstName: Anthony
              LastName: O'Brien
            Address:
              Street1: 20 Guild Street
              City: London
              County: Greater London
              State: England
              PostalCode: E13 8UH
              Country: United Kingdom
            Telephone: 07700 900 876
            Email: anthony.obrien@example.com
            MarketingSubscriptionStatus: 1
            ReasonCode: Graduation shopping
            PartyID: 3405d39f-ec9e-41d7-8a27-61c018b34768
            Gender: Male
            DateOfBirth: '1992-09-26'
            LanguageCode: xho
            NationalID: A1234567890Z
          allOf:
            - $ref: '#/components/schemas/Person'
            - type: object
              properties:
                MarketingSubscriptionStatus:
                  description: |
                    The customer's new subscription status.
                    * -1 - keep as is
                    * 0 - unsubscribe
                    * 1 - subscribe
                  allOf:
                    - $ref: '#/components/schemas/NullableBoolean'
                ReasonCode:
                  type: string
                  description: Reason for the store visit.
                  example: Graduation shopping
                PartyID:
                  type: string
                  description: The unique identifier for the customer.
                  example: 3405d39f-ec9e-41d7-8a27-61c018b34768
                Gender:
                  type: string
                  description: The preferred gender of the customer.
                  example: Male
                DateOfBirth:
                  pattern: '\b\d{4}-\d{2}-\d{2}\b'
                  type: string
                  description: The date of birth for the customer.
                  format: date
                  example: '1992-09-26'
                LanguageCode:
                  pattern: '\b[a-z]{3}\b'
                  type: string
                  description: |
                    The preferred language of the customer in ISO 639-2 format.
                  example: xho
                NationalID:
                  type: string
                  description: |
                    Government-issued personal identification number.

                    Please note this is the ID of the individual rather than
                    any of their documents.
                  example: A1234567890Z
        DateTime:
          pattern: '\b\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[\+\-]\d{2}:\d{2}\b'
          type: string
          description: Date and time of the transaction.
          format: date-time
          example: '2019-09-18T09:17:26Z'
        TransactionID:
          pattern: \c+
          type: string
          description: |
            A globally unique transaction identifier, typically the barcode.
          example: 00201836755180919
        RetailReference:
          $ref: '#/components/schemas/Receipt_RetailReference'
        RawReceiptText:
          type: string
          description: |
            The text of the corresponding paper receipt.
          example: |
            Fashion Avenue
            Oxford Street
            London, W1D 1BS
            Telephone: 020 7946 0999

            VAT No: 947 2957 89

            EXCHANGE

            *** Online Order to Home ***
            Order No: ABO74927947365
            Customer: Anthony O'Brien
            Customer Post Code: E13 8UH

            Delivery Information
            Mr Anthony O'Brien
            20 Guild Street
            London, E13 8UH
            07700 900 876

            Salesperson: David H - 84936

            Item/Style      Qty     Price       Total
            ### Return items
            8402383035     -1       £16.99     -£16.99
            WHITE BUTTON UP S/N 7349504867
            20.00% VAT: £2.83
            Reason: FAULTY

            Refund Total:                      -£16.99
            ### End of return items

            8493067349     1       £16.99      £13.59
            BLUE T-SHIRT XL S/N 5937603478
            0.00% VAT: £0
            20% Discount Promotion    Savings: £3.40

            7593057302     2       £19.99      £39.98
            STONEWASH JEANS 32 S/N 7592375039
            5.00% VAT: £1.90

            8375017394     1       £10.00      £8.00
            DRESS SOCKS x3 SIZE 9 S/N 8405693876
            20.00% VAT: £1.33
            20% Discount Promotion    Savings: £2.00

            1057920583     1       £10.00      £10.00
            GREEN T-SHIRT L S/N 4360968236
            PRICE OVERRIDE ORIG £16.99
            20.00% VAT: £1.67
            -------------------------------------------
            Tax Rate      Taxable Amount     Tax Amount
            VAT 0.0%          £13.59           £0.00
            VAT 5.00%         £38.08           £1.90
            VAT 20.00%        £0.84            £0.17

            Subtotal:                          £54.58

            DISCOUNT 10.00%                    £5.46
            Reason: 10% STUDENT

            TOTAL:                             £49.12
            Total Savings:                     £10.86

            Cash                               £30.00
            Cash Change                        £0.88

            VisaDebit                          £20.00

            PLEASE DEBIT MY ACCOUNT AS SHOWN
            Card No. ************9489
            Merchant Number: ***73927
            Auth. No. 943656
            App. Label: VISA DEBIT
            Terminal ID: ****9487
            Token: 378495aaayfjhen0347
            Cardholder PIN Verified

            Store: 002      Till: 01      Tran: 836755
            Date: 18/09/19  Time: 09:17   Oper: Toby - 90456

            Barcode 00201836755180919

            Transaction Ref: #002/01/836755

            Item(s) Sold: 5
            Item(s) Returned: 1

            Flight Code: ZH9068
            Origin Airport: LHR
            Destination Airport: SZX

            Customer Copy

            Please retain your receipt.
            If you are not 100% satisfied with your
            purchase, you can return the product and
            get a full refund or exchange the product
            for another one, be it similar or not.
            You can return a product for up to 30 days
            from the date you purchased it.

            Thank you for being part of the
            Fashion Avenue VIP Club.
            Account: 9385729064
            Points Earned: 40
            New balance: 180
        HeaderText:
          type: string
          description: Top-level header of the transaction.
          example: EXCHANGE
          enum:
            - Sale
            - Exchange
            - Return
        HeaderInfo:
          type: string
          description: |
            Additional information printed above the sale block.

            This MUST NOT include information already present in other fields,
            such as the store address.
          example: |
            *** Online Order to Home ***
            Order No: ABO74927947365
            Customer: Anthony O'Brien
            Customer Post Code: E13 8UH
        FooterInfo:
          type: string
          description: |
            Additional information printed below the sale block.

            This MUST NOT include information already present in other fields,
            such as the returns policy.
          example: |
            Flight Code: ZH9068
            Origin Airport: LHR
            Destination Airport: SZX
        Footer:
          $ref: '#/components/schemas/Receipt_Footer'
        StampDutyApplied:
          type: boolean
          description: |
            Indicates if the transaction was subject to a stamp duty.
          example: false
        Reason:
          type: string
          description: Reason for the puchase.
          example: Graduation shopping
        AdditionalReceipts:
          $ref: '#/components/schemas/Receipt_AdditionalReceipts'
        TransactionDetail:
          $ref: '#/components/schemas/TransactionDetail'
        ConsumerIdentification:
          $ref: '#/components/schemas/Receipt_ConsumerIdentification'
      description: The top-level container housing all receipt data.
    TransactionDetail:
      title: TransactionDetail
      required:
        - Operator
        - Total
      type: object
      properties:
        CustomerOrderTransaction:
          $ref: '#/components/schemas/TransactionDetail_CustomerOrderTransaction'
        Operator:
          description: The person operating the POS device.
          example:
            AssociateID: 90456
            Name: Toby
          allOf:
            - $ref: '#/components/schemas/Associate'
        Salesperson:
          description: |
            The salesperson associated with the specific sale if different
            from the operator.
          example:
            AssociateID: 84936
            Name: David H
          allOf:
            - $ref: '#/components/schemas/Associate'
        SaleItem:
          type: array
          description: |
            All products covered in the transaction, whether purchased,
            returned, or exchanged.
          example:
            - Header: '### Return items'
              Footer: ''
              Text: BUTTON UP
              Position: 1
              POSItemID: 8402383035
              ItemAlternateID: ''
              CatalogItemID: ''
              Quantity: -1
              UnitPrice: 16.99
              Amount: -16.99
              ListPrice: -16.99
              DepartmentID: Formal
              SerialNumber: 7349504867
              ItemDiscount:
                Amount: ''
                Text: ''
                ReductionPercent: ''
              Tax:
                Amount: 2.83
                TaxableAmount: 14.16
                TaxRate: 20
                TaxCode: VAT
              SalesPerson:
                AssociateID: 84936
                Name: David H
              SizeCode: ''
              ColorCode: WHITE
              FullText: |
                8402383035 -1 £16.99 -£16.99
                WHITE BUTTON UP S/N 7349504867
                Reason: FAULTY
            - Header: ''
              Footer: ''
              Text: T-SHIRT
              Position: 3
              POSItemID: 8493067349
              ItemAlternateID: ''
              CatalogItemID: ''
              Quantity: 1
              UnitPrice: 16.99
              Amount: 13.59
              ListPrice: 16.99
              DepartmentID: Casual
              SerialNumber: 5937603478
              ItemDiscount:
                Amount: 3.4
                Text: Promotion
                ReductionPercent: 20
              Tax:
                Amount: 0
                TaxableAmount: 13.59
                TaxRate: 0
                TaxCode: VAT
              SalesPerson:
                AssociateID: 84936
                Name: David H
              SizeCode: XL
              ColorCode: BLUE
              FullText: |
                8493067349 1 £16.99 £13.59
                BLUE T-SHIRT XL S/N 5937603478
                0.00% VAT: £0
                20% Discount Savings: £3.40
            - Header: ''
              Footer: ''
              Text: JEANS
              Position: 4
              POSItemID: 7593057302
              ItemAlternateID: ''
              CatalogItemID: ''
              Quantity: 2
              UnitPrice: 19.99
              Amount: 39.98
              ListPrice: 39.98
              DepartmentID: Casual
              SerialNumber: 7592375039
              ItemDiscount:
                Amount: ''
                Text: ''
                ReductionPercent: ''
              Tax:
                Amount: 1.9
                TaxableAmount: 38.08
                TaxRate: 5
                TaxCode: VAT
              SalesPerson:
                AssociateID: 84936
                Name: David H
              SizeCode: 32
              ColorCode: STONEWASH
              FullText: |
                7593057302 2 £19.99 £39.98
                STONEWASH JEANS 32 S/N 7592375039
                5.00% VAT: £1.90
            - Header: ''
              Footer: ''
              Text: DRESS SOCKS
              Position: 5
              POSItemID: 8375017394
              ItemAlternateID: ''
              CatalogItemID: ''
              Quantity: 1
              UnitPrice: 10
              Amount: 8
              ListPrice: 10
              DepartmentID: Formal
              SerialNumber: 8405693876
              ItemDiscount:
                Amount: 2
                Text: Promotion
                ReductionPercent: 20
              Tax:
                Amount: 1.33
                TaxableAmount: 6.67
                TaxRate: 20
                TaxCode: VAT
              SalesPerson:
                AssociateID: 84936
                Name: David H
              SizeCode: SIZE 9
              ColorCode: ''
              FullText: |
                8375017394 1 £10.00 £8.00
                DRESS SOCKS x3 SIZE 9 S/N 8405693876
                20.00% VAT: £1.33
                20% Discount Savings: £2.00
            - Header: ''
              Footer: ''
              Text: T-SHIRT
              Position: 6
              POSItemID: 1057920583
              ItemAlternateID: ''
              CatalogItemID: ''
              Quantity: 1
              UnitPrice: 10
              Amount: 10
              ListPrice: 10
              DepartmentID: Casual
              SerialNumber: 4360968236
              ItemDiscount:
                Amount: 6.99
                Text: PRICE OVERRIDE ORIG £16.99
                ReductionPercent: ''
              Tax:
                Amount: 1.67
                TaxableAmount: 8.33
                TaxRate: 20
                TaxCode: VAT
              SalesPerson:
                AssociateID: 84936
                Name: David H
              SizeCode: L
              ColorCode: GREEN
              FullText: |
                1057920583 1 £10.00 £10.00
                GREEN T-SHIRT L S/N 4360968236
                PRICE OVERRIDE ORIG £16.99
                20.00% VAT: £1.67
          items:
            $ref: '#/components/schemas/SaleItem'
        Subtotal:
          required:
            - Amount
          type: object
          description: The gross item total before any basket-level discounts.
          example:
            Header: ''
            Footer: ''
            Text: Subtotal
            Amount: 54.58
            Position: 10
          allOf:
            - $ref: '#/components/schemas/TransactionDetailElement'
        Discount:
          type: array
          description: Basket level discounts applied to the transaction.
          example:
            - Header: ''
              Footer: 'Reason: 10% STUDENT'
              Text: DISCOUNT 10.00%
              Amount: 5.46
              Position: 11
              ReductionPercent: 10
          items:
            $ref: '#/components/schemas/Discount'
        Total:
          required:
            - Amount
          type: object
          description: The final transaction total as presented to the customer.
          example:
            Header: ''
            Footer: ''
            Text: TOTAL
            Amount: 49.12
            AmountText: £49.12
            Position: 12
            ItemCount: 4
          allOf:
            - $ref: '#/components/schemas/TransactionDetailElement'
            - type: object
              properties:
                ItemCount:
                  type: integer
                  description: The sum of sale item quantities.
        OtherTotal:
          type: array
          description: |
            A representation of partial or non-item totals that apply to
            the receipt.
          example:
            - Header: ''
              Footer: '### End of return items'
              Text: Refund Total
              Amount: -16.99
              Position: 2
              TotalType: ItemSubtotal
            - Header: ''
              Footer: ''
              Text: Total Savings
              Amount: 10.86
              Position: 13
              TotalType: DiscountTotal
          items:
            $ref: '#/components/schemas/OtherTotal'
        Tax:
          type: array
          description: |
            A representation of all tax totals, groupped by the tax rate, that
            apply to the receipt.
          example:
            - TaxAuthorityID: HMRC
              Header: ''
              Footer: ''
              Text: VAT
              Amount: 0
              Position: 7
              TaxableAmount: 13.59
              TaxRate: 0
              GrossTaxedAmount: 13.59
            - TaxAuthorityID: HMRC
              Header: ''
              Footer: ''
              Text: VAT
              Amount: 1.9
              Position: 8
              TaxableAmount: 38.08
              TaxRate: 5
              GrossTaxedAmount: 39.98
            - TaxAuthorityID: HMRC
              Header: ''
              Footer: ''
              Text: VAT
              Amount: 0.17
              Position: 9
              TaxableAmount: 0.84
              TaxRate: 20
              GrossTaxedAmount: 18
          items:
            $ref: '#/components/schemas/Tax'
        Tender:
          type: array
          description: Receipt tenders.
          example:
            - Header: ''
              Footer: ''
              Text: Cash
              Amount: 30
              Position: 14
              Credit:
                CardType: ''
                AccountNumber: ''
                CardExpiration: ''
                CardHolderName: ''
                CardSlip: ''
              Coupon:
                CouponID: ''
            - Header: ''
              Footer: ''
              Text: Cash Change
              Amount: 0.88
              Position: 15
              Credit:
                CardType: ''
                AccountNumber: ''
                CardExpiration: ''
                CardHolderName: ''
                CardSlip: ''
              Coupon:
                CouponID: ''
            - Header: ''
              Footer: ''
              Text: Visa Debit
              Amount: 20
              Position: 16
              Credit:
                CardType: Visa Debit
                AccountNumber: '************9489'
                CardExpiration: 07/23
                CardHolderName: John Smith
                CardSlip: |
                  PLEASE DEBIT MY ACCOUNT AS SHOWN
                  Card No. ************9489
                  Merchant Number: ***73927
                  Auth. No. 943656
                  App. Label: VISA DEBIT
                  Terminal ID: ****9487
                  Token: 378495aaayfjhen0347
                  Cardholder PIN Verified
              Coupon:
                CouponID: ''
          items:
            $ref: '#/components/schemas/Tender'
      description: Information specific to the transaction.
    Party:
      title: Party
      type: object
      properties:
        Address:
          $ref: '#/components/schemas/Address'
        Telephone:
          title: Telephone
          type: string
          description: The telephone number associated with the party.
          example: +44 1234 567 890
        Email:
          type: string
          description: The email address associated with the party.
          format: email
          example: shopper@yreceipts.com
      description: A generalised representation of a party.
    BusinessLocation:
      title: BusinessLocation
      required:
        - Address
        - Locale
        - Name
        - TimeZone
      allOf:
        - type: object
          properties:
            Name:
              type: string
              description: The name of the company/store.
              example: Fashion Avenue
            Locale:
              allOf:
                - $ref: '#/components/schemas/Locale'
            TimeZone:
              allOf:
                - $ref: '#/components/schemas/TimeZone'
            TaxID:
              type: string
              description: The unique tax identifier for the organization.
              example: '123456789'
        - $ref: '#/components/schemas/Party'
    Person:
      description: A generalised representation of an individual.
      allOf:
        - type: object
          properties:
            ContactName:
              type: object
              description: The name of the Person.
              oneOf:
                - type: object
                  properties:
                    Title:
                      type: string
                      description: The title of the Person.
                      example: Dr
                    FirstName:
                      type: string
                      description: The first name of the Person.
                      example: Doo
                    LastName:
                      type: string
                      description: The last name of the Person.
                      example: Little
                - type: object
                  properties:
                    Name:
                      type: string
                      description: |
                        The full name of the Person as a single string.
                      example: Mr Harry Granger
        - $ref: '#/components/schemas/Party'
    Associate:
      title: Associate
      required:
        - AssociateID
        - Name
      type: object
      properties:
        AssociateID:
          type: string
          description: The unique identifier for the associate.
          example: 1234A
        Name:
          type: string
          description: |
            The first name of the associate.

            This field must not contain the last name of the associate.
          example: Hoight
    TransactionDetailElement:
      required:
        - Text
      type: object
      properties:
        Header:
          type: string
          description: >
            Any relevant information that appears  above, but separate, to the
            element.
          example: Transaction Detail Header
        Footer:
          type: string
          description: >
            Any relevant information that appears  below, but separate, to the
            element.
          example: Transaction Detail Footer
        Text:
          type: string
          description: |
            The title of the element as to be shown on the customer receipt.
          example: Element Title
        Amount:
          $ref: '#/components/schemas/Amount'
        Position:
          type: integer
          description: |
            The position of the element in relation to all the other elements.
          example: 2
    NullableBoolean:
      type: boolean
      description: >
        A boolean value that can take a third value (-1) representing no change
        or an unknown value.
      example: false
      enum:
        - false
        - false
        - false
    Amount:
      type: number
      properties:
        AmountText:
          type: string
          description: |
            The string representation of the Amount as 
            to be shown on the customer receipt.

            This needs to take localisation into account.
          example: '23.39'
          xml:
            attribute: true
      description: A generalized monetary amount attribute.
      example: 23.39
    PercentageAmount:
      maximum: 100
      minimum: 0
      type: number
      properties:
        AmountText:
          type: string
          xml:
            attribute: true
      description: A generalized percentage amount attribute
      example: 34
    SaleItem:
      title: SaleItem
      required:
        - Amount
        - POSItemID
        - Quantity
        - Text
        - UnitPrice
      type: object
      properties:
        POSItemID:
          type: string
          description: Primary POS Item ID (e.g. SKU ID) of the SaleItem
          example: 57920583X
        ItemAlternateID:
          type: string
          description: Secondary POSItemID of the SaleItem.
          example: 1233454X
        CatalogItemID:
          type: string
          description: 'Global Item ID of the SaleItem, such as its GTIN.'
          example: 4657574X
        Quantity:
          type: integer
          properties:
            AmountText:
              description: |
                The string representation of the quantity as 
                to be shown on the customer receipt.

                This needs to take localisation into account.
              example: '1'
              xml:
                attribute: true
          description: |
            The quantity/number of the item line.
          example: 1
          oneOf:
            - type: integer
            - type: number
        UnitPrice:
          type: number
          properties:
            AmountText:
              description: >
                The string representation of the UnitPrice as  to be shown on
                the customer receipt.
              example: 23.54
              xml:
                attribute: true
          description: The price of a single unit of the SaleItem.
          example: 23.54
        Amount:
          type: number
          properties:
            AmountText:
              description: >
                The string representation of the Amount as  to be shown on the
                customer receipt.
              example: 64.64
              xml:
                attribute: true
          description: |
            The total price (extended amount) of the given line item.

            `UnitPrice*Quantity + ItemDiscount`
          example: 64.64
        ListPrice:
          description: |
            The price of all the items on the line before any discounts.

            `UnitPrice*Quantity`
          example: 45.45
          allOf:
            - $ref: '#/components/schemas/Amount'
        DepartmentID:
          type: string
          description: >
            The identifier for the department that the SaleItem  is included
            under.
          example: Casual
        SerialNumber:
          type: string
          description: |
            A unique code, such as IMEI or MAC to identify an *individual item*.

            For example, two Blue 97GB yPhone L handsets would each have
            a different serial number but the same PosItemID.
          example: '7349504867'
        ItemDiscount:
          $ref: '#/components/schemas/SaleItem_ItemDiscount'
        Tax:
          $ref: '#/components/schemas/SaleItem_Tax'
        Salesperson:
          description: The salesperson for the given SaleItem.
          allOf:
            - $ref: '#/components/schemas/Associate'
        SizeCode:
          type: string
          description: The SizeCode for the given SaleItem.
          example: XL
        ColorCode:
          type: string
          description: The ColourCode for the given SaleItem.
          example: Blue
        FullText:
          type: string
          description: |
            The description of the item as to be shown on the customer receipt.
          example: Big Blue Thing
      description: >
        An individual item line (whether sold, returned, or exchanged) processed
        in the transaction.
      allOf:
        - $ref: '#/components/schemas/TransactionDetailElement'
    Discount:
      title: Discount
      required:
        - Amount
        - ReductionPercent
        - Text
      type: object
      properties:
        ReductionPercent:
          type: number
          description: Percentage amount of the discount.
          example: 10
      description: A generalised representation of a basket-level discount.
      example: 11.01
      allOf:
        - $ref: '#/components/schemas/TransactionDetailElement'
    Tender:
      title: Tender
      required:
        - Amount
        - TenderType
        - Text
      type: object
      properties:
        TenderType:
          title: TenderType
          type: string
          description: Type of the tender
          example: Cash
          xml:
            attribute: true
          enum:
            - Cash
            - CashChange
            - Cheque
            - CreditCard
            - Debit
            - CustomerAccount
            - ChequeCard
            - GiftCertificate
            - TravelersCheque
            - Coupon
            - FoodStamp
            - WICCheque
            - PurchaseOrder
        Credit:
          $ref: '#/components/schemas/PaymentCard'
        Coupon:
          $ref: '#/components/schemas/Coupon'
      description: A generalised representation of a tender (payment).
      allOf:
        - $ref: '#/components/schemas/TransactionDetailElement'
    OtherTotal:
      required:
        - Amount
        - Text
        - TotalType
      type: object
      properties:
        TotalType:
          type: string
          description: The type of the total being represented.
          example: TaxExcludedTotal
          xml:
            attribute: true
          enum:
            - TaxExcludedTotal
            - ItemSubtotal
            - TenderTotal
            - DiscountTotal
            - FeeTotal
            - TaxTotal
      description: >
        A generalised total used to represent partial or non-item totals that
        apply to the receipt.
      allOf:
        - $ref: '#/components/schemas/TransactionDetailElement'
    PaymentCard:
      title: PaymentCard
      required:
        - AccountNumber
        - CardExpirationDate
      type: object
      properties:
        CardType:
          type: string
          description: The type (network) of the card used for payment.
          example: Visa
        AccountNumber:
          type: string
          description: The *masked* card number or the token of the card.
          example: 1111********9876
        CardExpirationDate:
          type: string
          description: The expiration date of the card.
          example: 07/20
        CardHolderName:
          type: string
          description: The name of the card holder
          example: Elmo McSesame
        CardSlip:
          type: string
          description: The full card slip as shown on the payment receipt.
          example: |
            PLEASE DEBIT MY ACCOUNT AS SHOWN
            Card No. ************9489
            Merchant Number: ***73927
            Auth. No. 943656
            App. Label: VISA DEBIT
            Terminal ID: ****9487
            Token: 378495aaayfjhen0347
            Cardholder PIN Verified
      description: Information about the bank card used for payment.
    Coupon:
      title: Coupon
      required:
        - CouponID
      type: object
      properties:
        CouponID:
          type: string
          description: The unique identifier of the coupon or voucher used.
          example: SAVE25
      description: Details of a coupon or voucher if used.
    Tax:
      title: Tax
      required:
        - Amount
        - TaxRate
      type: object
      properties:
        TaxAuthorityType:
          title: TaxAuthority
          type: string
          description: Authority type of the tax.
          example: National
          enum:
            - National
            - State
            - County
            - City
        TaxAuthorityID:
          type: string
          description: The identifier for the Tax Authority.
          example: HMRC
          xml:
            attribute: true
            wrapped: false
        TaxableAmount:
          description: The amount to be taxed.
          allOf:
            - $ref: '#/components/schemas/Amount'
        TaxRate:
          description: The rate of tax represented as a percentage.
          example: 20
          allOf:
            - $ref: '#/components/schemas/PercentageAmount'
        GrossTaxedAmount:
          description: The total amount after tax.
          allOf:
            - $ref: '#/components/schemas/Amount'
      description: >
        A representation of all tax totals, groupped by the tax rate, that apply
        to the receipt.
      allOf:
        - $ref: '#/components/schemas/TransactionDetailElement'
    CurrencyCode:
      pattern: '\b[A-Z]{3}\b'
      type: string
      description: >-
        A currency code as defined by [ISO
        4217](https://en.wikipedia.org/wiki/ISO_4217)
      example: GBP
      xml:
        attribute: true
      enum:
        - ADP
        - AED
        - AFA
        - AFN
        - ALK
        - ALL
        - AMD
        - ANG
        - AOA
        - AOK
        - AON
        - AOR
        - ARA
        - ARL
        - ARM
        - ARP
        - ARS
        - ATS
        - AUD
        - AWG
        - AZM
        - AZN
        - BAD
        - BAM
        - BAN
        - BBD
        - BDT
        - BEC
        - BEF
        - BEL
        - BGL
        - BGM
        - BGN
        - BGO
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOL
        - BOP
        - BOV
        - BRB
        - BRC
        - BRE
        - BRL
        - BRN
        - BRR
        - BRZ
        - BSD
        - BTN
        - BUK
        - BWP
        - BYB
        - BYN
        - BYR
        - BZD
        - CAD
        - CDF
        - CHE
        - CHF
        - CHW
        - CLE
        - CLF
        - CLP
        - CNH
        - CNX
        - CNY
        - COP
        - COU
        - CRC
        - CSD
        - CSK
        - CUC
        - CUP
        - CVE
        - CYP
        - CZK
        - DDM
        - DEM
        - DJF
        - DKK
        - DOP
        - DZD
        - ECS
        - ECV
        - EEK
        - EGP
        - ERN
        - ESA
        - ESB
        - ESP
        - ETB
        - EUR
        - FIM
        - FJD
        - FKP
        - FRF
        - GBP
        - GEK
        - GEL
        - GHC
        - GHS
        - GIP
        - GMD
        - GNF
        - GNS
        - GQE
        - GRD
        - GTQ
        - GWE
        - GWP
        - GYD
        - HKD
        - HNL
        - HRD
        - HRK
        - HTG
        - HUF
        - IDR
        - IEP
        - ILP
        - ILR
        - ILS
        - INR
        - IQD
        - IRR
        - ISJ
        - ISK
        - ITL
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRH
        - KRO
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LTL
        - LTT
        - LUC
        - LUF
        - LUL
        - LVL
        - LVR
        - LYD
        - MAD
        - MAF
        - MCF
        - MDC
        - MDL
        - MGA
        - MGF
        - MKD
        - MKN
        - MLF
        - MMK
        - MNT
        - MOP
        - MRO
        - MRU
        - MTL
        - MTP
        - MUR
        - MVP
        - MVR
        - MWK
        - MXN
        - MXP
        - MXV
        - MYR
        - MZE
        - MZM
        - MZN
        - NAD
        - NGN
        - NIC
        - NIO
        - NLG
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEI
        - PEN
        - PES
        - PGK
        - PHP
        - PKR
        - PLN
        - PLZ
        - PTE
        - PYG
        - QAR
        - RHD
        - ROL
        - RON
        - RSD
        - RUB
        - RUR
        - RWF
        - SAR
        - SBD
        - SCR
        - SDD
        - SDG
        - SDP
        - SEK
        - SGD
        - SHP
        - SIT
        - SKK
        - SLL
        - SOS
        - SRD
        - SRG
        - SSP
        - STD
        - STN
        - SUR
        - SVC
        - SYP
        - SZL
        - THB
        - TJR
        - TJS
        - TMM
        - TMT
        - TND
        - TOP
        - TPE
        - TRL
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UAK
        - UGS
        - UGX
        - USD
        - USN
        - USS
        - UYI
        - UYP
        - UYU
        - UYW
        - UZS
        - VEB
        - VEF
        - VES
        - VND
        - VNN
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XBA
        - XBB
        - XBC
        - XBD
        - XCD
        - XDR
        - XEU
        - XFO
        - XFU
        - XOF
        - XPD
        - XPF
        - XPT
        - XRE
        - XSU
        - XTS
        - XUA
        - XXX
        - YDD
        - YER
        - YUD
        - YUM
        - YUN
        - YUR
        - ZAL
        - ZAR
        - ZMK
        - ZMW
        - ZRN
        - ZRZ
        - ZWD
        - ZWL
        - ZWR
    Locale:
      pattern: '\b[a-z]{2,3}_(.{2,4}_)*[A-Z]{2,}\b'
      type: string
      description: >
        A locale code as defined by  [ISO/IEC
        15897](https://en.wikipedia.org/wiki/ISO/IEC_15897).
      example: en_GB
      enum:
        - af_NA
        - af_ZA
        - agq_CM
        - ak_GH
        - am_ET
        - ar_AE
        - ar_BH
        - ar_DJ
        - ar_DZ
        - ar_EG
        - ar_EH
        - ar_ER
        - ar_IL
        - ar_IQ
        - ar_JO
        - ar_KM
        - ar_KW
        - ar_LB
        - ar_LY
        - ar_MA
        - ar_MR
        - ar_OM
        - ar_PS
        - ar_QA
        - ar_SA
        - ar_SD
        - ar_SO
        - ar_SS
        - ar_SY
        - ar_TD
        - ar_TN
        - ar_YE
        - as_IN
        - asa_TZ
        - ast_ES
        - az_Cyrl_AZ
        - az_Latn_AZ
        - bas_CM
        - be_BY
        - bem_ZM
        - bez_TZ
        - bg_BG
        - bm_ML
        - bn_BD
        - bn_IN
        - bo_CN
        - bo_IN
        - br_FR
        - brx_IN
        - bs_Cyrl_BA
        - bs_Latn_BA
        - ca_AD
        - ca_ES
        - ca_ES_VALENCIA
        - ca_FR
        - ca_IT
        - ccp_BD
        - ccp_IN
        - ce_RU
        - ceb_PH
        - cgg_UG
        - chr_US
        - ckb_IQ
        - ckb_IR
        - cs_CZ
        - cu_RU
        - cy_GB
        - da_DK
        - da_GL
        - dav_KE
        - de_AT
        - de_BE
        - de_CH
        - de_DE
        - de_IT
        - de_LI
        - de_LU
        - dje_NE
        - dsb_DE
        - dua_CM
        - dyo_SN
        - dz_BT
        - ebu_KE
        - ee_GH
        - ee_TG
        - el_CY
        - el_GR
        - en_AE
        - en_AG
        - en_AI
        - en_AS
        - en_AT
        - en_AU
        - en_BB
        - en_BE
        - en_BI
        - en_BM
        - en_BS
        - en_BW
        - en_BZ
        - en_CA
        - en_CC
        - en_CH
        - en_CK
        - en_CM
        - en_CX
        - en_CY
        - en_DE
        - en_DG
        - en_DK
        - en_DM
        - en_ER
        - en_FI
        - en_FJ
        - en_FK
        - en_FM
        - en_GB
        - en_GD
        - en_GG
        - en_GH
        - en_GI
        - en_GM
        - en_GU
        - en_GY
        - en_HK
        - en_IE
        - en_IL
        - en_IM
        - en_IN
        - en_IO
        - en_JE
        - en_JM
        - en_KE
        - en_KI
        - en_KN
        - en_KY
        - en_LC
        - en_LR
        - en_LS
        - en_MG
        - en_MH
        - en_MO
        - en_MP
        - en_MS
        - en_MT
        - en_MU
        - en_MW
        - en_MY
        - en_NA
        - en_NF
        - en_NG
        - en_NL
        - en_NR
        - en_NU
        - en_NZ
        - en_PG
        - en_PH
        - en_PK
        - en_PN
        - en_PR
        - en_PW
        - en_RW
        - en_SB
        - en_SC
        - en_SD
        - en_SE
        - en_SG
        - en_SH
        - en_SI
        - en_SL
        - en_SS
        - en_SX
        - en_SZ
        - en_TC
        - en_TK
        - en_TO
        - en_TT
        - en_TV
        - en_TZ
        - en_UG
        - en_UM
        - en_US
        - en_US_POSIX
        - en_VC
        - en_VG
        - en_VI
        - en_VU
        - en_WS
        - en_ZA
        - en_ZM
        - en_ZW
        - es_AR
        - es_BO
        - es_BR
        - es_BZ
        - es_CL
        - es_CO
        - es_CR
        - es_CU
        - es_DO
        - es_EA
        - es_EC
        - es_ES
        - es_GQ
        - es_GT
        - es_HN
        - es_IC
        - es_MX
        - es_NI
        - es_PA
        - es_PE
        - es_PH
        - es_PR
        - es_PY
        - es_SV
        - es_US
        - es_UY
        - es_VE
        - et_EE
        - eu_ES
        - ewo_CM
        - fa_AF
        - fa_IR
        - ff_Latn_BF
        - ff_Latn_CM
        - ff_Latn_GH
        - ff_Latn_GM
        - ff_Latn_GN
        - ff_Latn_GW
        - ff_Latn_LR
        - ff_Latn_MR
        - ff_Latn_NE
        - ff_Latn_NG
        - ff_Latn_SL
        - ff_Latn_SN
        - fi_FI
        - fil_PH
        - fo_DK
        - fo_FO
        - fr_BE
        - fr_BF
        - fr_BI
        - fr_BJ
        - fr_BL
        - fr_CA
        - fr_CD
        - fr_CF
        - fr_CG
        - fr_CH
        - fr_CI
        - fr_CM
        - fr_DJ
        - fr_DZ
        - fr_FR
        - fr_GA
        - fr_GF
        - fr_GN
        - fr_GP
        - fr_GQ
        - fr_HT
        - fr_KM
        - fr_LU
        - fr_MA
        - fr_MC
        - fr_MF
        - fr_MG
        - fr_ML
        - fr_MQ
        - fr_MR
        - fr_MU
        - fr_NC
        - fr_NE
        - fr_PF
        - fr_PM
        - fr_RE
        - fr_RW
        - fr_SC
        - fr_SN
        - fr_SY
        - fr_TD
        - fr_TG
        - fr_TN
        - fr_VU
        - fr_WF
        - fr_YT
        - fur_IT
        - fy_NL
        - ga_IE
        - gd_GB
        - gl_ES
        - gsw_CH
        - gsw_FR
        - gsw_LI
        - gu_IN
        - guz_KE
        - gv_IM
        - ha_GH
        - ha_NE
        - ha_NG
        - haw_US
        - he_IL
        - hi_IN
        - hr_BA
        - hr_HR
        - hsb_DE
        - hu_HU
        - hy_AM
        - id_ID
        - ig_NG
        - ii_CN
        - is_IS
        - it_CH
        - it_IT
        - it_SM
        - it_VA
        - ja_JP
        - jgo_CM
        - jmc_TZ
        - jv_ID
        - ka_GE
        - kab_DZ
        - kam_KE
        - kde_TZ
        - kea_CV
        - khq_ML
        - ki_KE
        - kk_KZ
        - kkj_CM
        - kl_GL
        - kln_KE
        - km_KH
        - kn_IN
        - ko_KP
        - ko_KR
        - kok_IN
        - ks_IN
        - ksb_TZ
        - ksf_CM
        - ksh_DE
        - ku_TR
        - kw_GB
        - ky_KG
        - lag_TZ
        - lb_LU
        - lg_UG
        - lkt_US
        - ln_AO
        - ln_CD
        - ln_CF
        - ln_CG
        - lo_LA
        - lrc_IQ
        - lrc_IR
        - lt_LT
        - lu_CD
        - luo_KE
        - luy_KE
        - lv_LV
        - mas_KE
        - mas_TZ
        - mer_KE
        - mfe_MU
        - mg_MG
        - mgh_MZ
        - mgo_CM
        - mi_NZ
        - mk_MK
        - ml_IN
        - mn_MN
        - mr_IN
        - ms_BN
        - ms_MY
        - ms_SG
        - mt_MT
        - mua_CM
        - my_MM
        - mzn_IR
        - naq_NA
        - nb_NO
        - nb_SJ
        - nd_ZW
        - nds_DE
        - nds_NL
        - ne_IN
        - ne_NP
        - nl_AW
        - nl_BE
        - nl_BQ
        - nl_CW
        - nl_NL
        - nl_SR
        - nl_SX
        - nmg_CM
        - nn_NO
        - nnh_CM
        - nus_SS
        - nyn_UG
        - om_ET
        - om_KE
        - or_IN
        - os_GE
        - os_RU
        - pa_Arab_PK
        - pa_Guru_IN
        - pl_PL
        - ps_AF
        - ps_PK
        - pt_AO
        - pt_BR
        - pt_CH
        - pt_CV
        - pt_GQ
        - pt_GW
        - pt_LU
        - pt_MO
        - pt_MZ
        - pt_PT
        - pt_ST
        - pt_TL
        - qu_BO
        - qu_EC
        - qu_PE
        - rm_CH
        - rn_BI
        - ro_MD
        - ro_RO
        - rof_TZ
        - ru_BY
        - ru_KG
        - ru_KZ
        - ru_MD
        - ru_RU
        - ru_UA
        - rw_RW
        - rwk_TZ
        - sah_RU
        - saq_KE
        - sbp_TZ
        - sd_PK
        - se_FI
        - se_NO
        - se_SE
        - seh_MZ
        - ses_ML
        - sg_CF
        - shi_Latn_MA
        - shi_Tfng_MA
        - si_LK
        - sk_SK
        - sl_SI
        - smn_FI
        - sn_ZW
        - so_DJ
        - so_ET
        - so_KE
        - so_SO
        - sq_AL
        - sq_MK
        - sq_XK
        - sr_Cyrl_BA
        - sr_Cyrl_ME
        - sr_Cyrl_RS
        - sr_Cyrl_XK
        - sr_Latn_BA
        - sr_Latn_ME
        - sr_Latn_RS
        - sr_Latn_XK
        - sv_AX
        - sv_FI
        - sv_SE
        - sw_CD
        - sw_KE
        - sw_TZ
        - sw_UG
        - ta_IN
        - ta_LK
        - ta_MY
        - ta_SG
        - te_IN
        - teo_KE
        - teo_UG
        - tg_TJ
        - th_TH
        - ti_ER
        - ti_ET
        - tk_TM
        - to_TO
        - tr_CY
        - tr_TR
        - tt_RU
        - twq_NE
        - tzm_MA
        - ug_CN
        - uk_UA
        - ur_IN
        - ur_PK
        - uz_Arab_AF
        - uz_Cyrl_UZ
        - uz_Latn_UZ
        - vai_Latn_LR
        - vai_Vaii_LR
        - vi_VN
        - vun_TZ
        - wae_CH
        - wo_SN
        - xh_ZA
        - xog_UG
        - yav_CM
        - yo_BJ
        - yo_NG
        - yue_Hans_CN
        - yue_Hant_HK
        - zgh_MA
        - zh_Hans_CN
        - zh_Hans_HK
        - zh_Hans_MO
        - zh_Hans_SG
        - zh_Hant_HK
        - zh_Hant_MO
        - zh_Hant_TW
        - zu_ZA
    TimeZone:
      pattern: '\b\w{2,}\/\S{2,}\b'
      type: string
      description: >
        A timezone as defined by  [IANA Time Zone Database
        Format](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
      example: Europe/London
      enum:
        - Africa/Abidjan
        - Africa/Accra
        - Africa/Addis_Ababa
        - Africa/Algiers
        - Africa/Asmara
        - Africa/Asmera
        - Africa/Bamako
        - Africa/Bangui
        - Africa/Banjul
        - Africa/Bissau
        - Africa/Blantyre
        - Africa/Brazzaville
        - Africa/Bujumbura
        - Africa/Cairo
        - Africa/Casablanca
        - Africa/Ceuta
        - Africa/Conakry
        - Africa/Dakar
        - Africa/Dar_es_Salaam
        - Africa/Djibouti
        - Africa/Douala
        - Africa/El_Aaiun
        - Africa/Freetown
        - Africa/Gaborone
        - Africa/Harare
        - Africa/Johannesburg
        - Africa/Juba
        - Africa/Kampala
        - Africa/Khartoum
        - Africa/Kigali
        - Africa/Kinshasa
        - Africa/Lagos
        - Africa/Libreville
        - Africa/Lome
        - Africa/Luanda
        - Africa/Lubumbashi
        - Africa/Lusaka
        - Africa/Malabo
        - Africa/Maputo
        - Africa/Maseru
        - Africa/Mbabane
        - Africa/Mogadishu
        - Africa/Monrovia
        - Africa/Nairobi
        - Africa/Ndjamena
        - Africa/Niamey
        - Africa/Nouakchott
        - Africa/Ouagadougou
        - Africa/Porto-Novo
        - Africa/Sao_Tome
        - Africa/Timbuktu
        - Africa/Tripoli
        - Africa/Tunis
        - Africa/Windhoek
        - America/Adak
        - America/Anchorage
        - America/Anguilla
        - America/Antigua
        - America/Araguaina
        - America/Argentina/Buenos_Aires
        - America/Argentina/Catamarca
        - America/Argentina/ComodRivadavia
        - America/Argentina/Cordoba
        - America/Argentina/Jujuy
        - America/Argentina/La_Rioja
        - America/Argentina/Mendoza
        - America/Argentina/Rio_Gallegos
        - America/Argentina/Salta
        - America/Argentina/San_Juan
        - America/Argentina/San_Luis
        - America/Argentina/Tucuman
        - America/Argentina/Ushuaia
        - America/Aruba
        - America/Asuncion
        - America/Atikokan
        - America/Atka
        - America/Bahia
        - America/Bahia_Banderas
        - America/Barbados
        - America/Belem
        - America/Belize
        - America/Blanc-Sablon
        - America/Boa_Vista
        - America/Bogota
        - America/Boise
        - America/Buenos_Aires
        - America/Cambridge_Bay
        - America/Campo_Grande
        - America/Cancun
        - America/Caracas
        - America/Catamarca
        - America/Cayenne
        - America/Cayman
        - America/Chicago
        - America/Chihuahua
        - America/Coral_Harbour
        - America/Cordoba
        - America/Costa_Rica
        - America/Creston
        - America/Cuiaba
        - America/Curacao
        - America/Danmarkshavn
        - America/Dawson
        - America/Dawson_Creek
        - America/Denver
        - America/Detroit
        - America/Dominica
        - America/Edmonton
        - America/Eirunepe
        - America/El_Salvador
        - America/Ensenada
        - America/Fort_Wayne
        - America/Fortaleza
        - America/Glace_Bay
        - America/Godthab
        - America/Goose_Bay
        - America/Grand_Turk
        - America/Grenada
        - America/Guadeloupe
        - America/Guatemala
        - America/Guayaquil
        - America/Guyana
        - America/Halifax
        - America/Havana
        - America/Hermosillo
        - America/Indiana/Indianapolis
        - America/Indiana/Knox
        - America/Indiana/Marengo
        - America/Indiana/Petersburg
        - America/Indiana/Tell_City
        - America/Indiana/Vevay
        - America/Indiana/Vincennes
        - America/Indiana/Winamac
        - America/Indianapolis
        - America/Inuvik
        - America/Iqaluit
        - America/Jamaica
        - America/Jujuy
        - America/Juneau
        - America/Kentucky/Louisville
        - America/Kentucky/Monticello
        - America/Knox_IN
        - America/Kralendijk
        - America/La_Paz
        - America/Lima
        - America/Los_Angeles
        - America/Louisville
        - America/Lower_Princes
        - America/Maceio
        - America/Managua
        - America/Manaus
        - America/Marigot
        - America/Martinique
        - America/Matamoros
        - America/Mazatlan
        - America/Mendoza
        - America/Menominee
        - America/Merida
        - America/Metlakatla
        - America/Mexico_City
        - America/Miquelon
        - America/Moncton
        - America/Monterrey
        - America/Montevideo
        - America/Montreal
        - America/Montserrat
        - America/Nassau
        - America/New_York
        - America/Nipigon
        - America/Nome
        - America/Noronha
        - America/North_Dakota/Beulah
        - America/North_Dakota/Center
        - America/North_Dakota/New_Salem
        - America/Ojinaga
        - America/Panama
        - America/Pangnirtung
        - America/Paramaribo
        - America/Phoenix
        - America/Port-au-Prince
        - America/Port_of_Spain
        - America/Porto_Acre
        - America/Porto_Velho
        - America/Puerto_Rico
        - America/Rainy_River
        - America/Rankin_Inlet
        - America/Recife
        - America/Regina
        - America/Resolute
        - America/Rio_Branco
        - America/Rosario
        - America/Santa_Isabel
        - America/Santarem
        - America/Santiago
        - America/Santo_Domingo
        - America/Sao_Paulo
        - America/Scoresbysund
        - America/Shiprock
        - America/Sitka
        - America/St_Barthelemy
        - America/St_Johns
        - America/St_Kitts
        - America/St_Lucia
        - America/St_Thomas
        - America/St_Vincent
        - America/Swift_Current
        - America/Tegucigalpa
        - America/Thule
        - America/Thunder_Bay
        - America/Tijuana
        - America/Toronto
        - America/Tortola
        - America/Vancouver
        - America/Virgin
        - America/Whitehorse
        - America/Winnipeg
        - America/Yakutat
        - America/Yellowknife
        - Antarctica/Casey
        - Antarctica/Davis
        - Antarctica/DumontDUrville
        - Antarctica/Macquarie
        - Antarctica/Mawson
        - Antarctica/McMurdo
        - Antarctica/Palmer
        - Antarctica/Rothera
        - Antarctica/South_Pole
        - Antarctica/Syowa
        - Antarctica/Vostok
        - Arctic/Longyearbyen
        - Asia/Aden
        - Asia/Almaty
        - Asia/Amman
        - Asia/Anadyr
        - Asia/Aqtau
        - Asia/Aqtobe
        - Asia/Ashgabat
        - Asia/Ashkhabad
        - Asia/Baghdad
        - Asia/Bahrain
        - Asia/Baku
        - Asia/Bangkok
        - Asia/Beirut
        - Asia/Bishkek
        - Asia/Brunei
        - Asia/Calcutta
        - Asia/Choibalsan
        - Asia/Chongqing
        - Asia/Chungking
        - Asia/Colombo
        - Asia/Dacca
        - Asia/Damascus
        - Asia/Dhaka
        - Asia/Dili
        - Asia/Dubai
        - Asia/Dushanbe
        - Asia/Gaza
        - Asia/Harbin
        - Asia/Hebron
        - Asia/Ho_Chi_Minh
        - Asia/Hong_Kong
        - Asia/Hovd
        - Asia/Irkutsk
        - Asia/Istanbul
        - Asia/Jakarta
        - Asia/Jayapura
        - Asia/Jerusalem
        - Asia/Kabul
        - Asia/Kamchatka
        - Asia/Karachi
        - Asia/Kashgar
        - Asia/Kathmandu
        - Asia/Katmandu
        - Asia/Khandyga
        - Asia/Kolkata
        - Asia/Krasnoyarsk
        - Asia/Kuala_Lumpur
        - Asia/Kuching
        - Asia/Kuwait
        - Asia/Macao
        - Asia/Macau
        - Asia/Magadan
        - Asia/Makassar
        - Asia/Manila
        - Asia/Muscat
        - Asia/Nicosia
        - Asia/Novokuznetsk
        - Asia/Novosibirsk
        - Asia/Omsk
        - Asia/Oral
        - Asia/Phnom_Penh
        - Asia/Pontianak
        - Asia/Pyongyang
        - Asia/Qatar
        - Asia/Qyzylorda
        - Asia/Rangoon
        - Asia/Riyadh
        - Asia/Saigon
        - Asia/Sakhalin
        - Asia/Samarkand
        - Asia/Seoul
        - Asia/Shanghai
        - Asia/Singapore
        - Asia/Taipei
        - Asia/Tashkent
        - Asia/Tbilisi
        - Asia/Tehran
        - Asia/Tel_Aviv
        - Asia/Thimbu
        - Asia/Thimphu
        - Asia/Tokyo
        - Asia/Ujung_Pandang
        - Asia/Ulaanbaatar
        - Asia/Ulan_Bator
        - Asia/Urumqi
        - Asia/Ust-Nera
        - Asia/Vientiane
        - Asia/Vladivostok
        - Asia/Yakutsk
        - Asia/Yekaterinburg
        - Asia/Yerevan
        - Atlantic/Azores
        - Atlantic/Bermuda
        - Atlantic/Canary
        - Atlantic/Cape_Verde
        - Atlantic/Faeroe
        - Atlantic/Faroe
        - Atlantic/Jan_Mayen
        - Atlantic/Madeira
        - Atlantic/Reykjavik
        - Atlantic/South_Georgia
        - Atlantic/St_Helena
        - Atlantic/Stanley
        - Australia/ACT
        - Australia/Adelaide
        - Australia/Brisbane
        - Australia/Broken_Hill
        - Australia/Canberra
        - Australia/Currie
        - Australia/Darwin
        - Australia/Eucla
        - Australia/Hobart
        - Australia/LHI
        - Australia/Lindeman
        - Australia/Lord_Howe
        - Australia/Melbourne
        - Australia/NSW
        - Australia/North
        - Australia/Perth
        - Australia/Queensland
        - Australia/South
        - Australia/Sydney
        - Australia/Tasmania
        - Australia/Victoria
        - Australia/West
        - Australia/Yancowinna
        - Brazil/Acre
        - Brazil/DeNoronha
        - Brazil/East
        - Brazil/West
        - Canada/Atlantic
        - Canada/Central
        - Canada/East-Saskatchewan
        - Canada/Eastern
        - Canada/Mountain
        - Canada/Newfoundland
        - Canada/Pacific
        - Canada/Saskatchewan
        - Canada/Yukon
        - Chile/Continental
        - Chile/EasterIsland
        - Europe/Amsterdam
        - Europe/Andorra
        - Europe/Athens
        - Europe/Belfast
        - Europe/Belgrade
        - Europe/Berlin
        - Europe/Bratislava
        - Europe/Brussels
        - Europe/Bucharest
        - Europe/Budapest
        - Europe/Busingen
        - Europe/Chisinau
        - Europe/Copenhagen
        - Europe/Dublin
        - Europe/Gibraltar
        - Europe/Guernsey
        - Europe/Helsinki
        - Europe/Isle_of_Man
        - Europe/Istanbul
        - Europe/Jersey
        - Europe/Kaliningrad
        - Europe/Kiev
        - Europe/Lisbon
        - Europe/Ljubljana
        - Europe/London
        - Europe/Luxembourg
        - Europe/Madrid
        - Europe/Malta
        - Europe/Mariehamn
        - Europe/Minsk
        - Europe/Monaco
        - Europe/Moscow
        - Europe/Nicosia
        - Europe/Oslo
        - Europe/Paris
        - Europe/Podgorica
        - Europe/Prague
        - Europe/Riga
        - Europe/Rome
        - Europe/Samara
        - Europe/San_Marino
        - Europe/Sarajevo
        - Europe/Simferopol
        - Europe/Skopje
        - Europe/Sofia
        - Europe/Stockholm
        - Europe/Tallinn
        - Europe/Tirane
        - Europe/Tiraspol
        - Europe/Uzhgorod
        - Europe/Vaduz
        - Europe/Vatican
        - Europe/Vienna
        - Europe/Vilnius
        - Europe/Volgograd
        - Europe/Warsaw
        - Europe/Zagreb
        - Europe/Zaporozhye
        - Europe/Zurich
        - Indian/Antananarivo
        - Indian/Chagos
        - Indian/Christmas
        - Indian/Cocos
        - Indian/Comoro
        - Indian/Kerguelen
        - Indian/Mahe
        - Indian/Maldives
        - Indian/Mauritius
        - Indian/Mayotte
        - Indian/Reunion
        - Mexico/BajaNorte
        - Mexico/BajaSur
        - Mexico/General
        - Pacific/Apia
        - Pacific/Auckland
        - Pacific/Chatham
        - Pacific/Chuuk
        - Pacific/Easter
        - Pacific/Efate
        - Pacific/Enderbury
        - Pacific/Fakaofo
        - Pacific/Fiji
        - Pacific/Funafuti
        - Pacific/Galapagos
        - Pacific/Gambier
        - Pacific/Guadalcanal
        - Pacific/Guam
        - Pacific/Honolulu
        - Pacific/Johnston
        - Pacific/Kiritimati
        - Pacific/Kosrae
        - Pacific/Kwajalein
        - Pacific/Majuro
        - Pacific/Marquesas
        - Pacific/Midway
        - Pacific/Nauru
        - Pacific/Niue
        - Pacific/Norfolk
        - Pacific/Noumea
        - Pacific/Pago_Pago
        - Pacific/Palau
        - Pacific/Pitcairn
        - Pacific/Pohnpei
        - Pacific/Ponape
        - Pacific/Port_Moresby
        - Pacific/Rarotonga
        - Pacific/Saipan
        - Pacific/Samoa
        - Pacific/Tahiti
        - Pacific/Tarawa
        - Pacific/Tongatapu
        - Pacific/Truk
        - Pacific/Wake
        - Pacific/Wallis
        - Pacific/Yap
        - US/Alaska
        - US/Aleutian
        - US/Arizona
        - US/Central
        - US/East-Indiana
        - US/Eastern
        - US/Hawaii
        - US/Indiana-Starke
        - US/Michigan
        - US/Mountain
        - US/Pacific
        - US/Pacific-New
        - US/Samoa
    Receipt_Device:
      required:
        - DeviceID
        - TransactionNumber
      type: object
      properties:
        DeviceID:
          type: string
          description: >
            Hierarchical identifier of the device. Defined as:

            `POSProvider_CompanyID_LocationID_DeviceID`.


            For companies with multiple country locations a
            CustomerCompanyCountryID can be added:

            `POSProvider_CompanyID_CompanyCountryID_LocationID_DeviceID`.
          example: POSprovider_FashionAvenue_FashionAvenueGB_002_01
        TransactionNumber:
          type: integer
          description: Device internal transaction count.
          example: 836755
        TransactionFiscalNumber:
          type: string
          description: >-
            A unique fiscal number identifying the transaction as generated by
            government mandated fiscal printers in certain countries.
          example: b3a09b52-7c87-4014-a496-4c7a53cf9125-ff
      description: |
        Information about the specific device/till/register used to process
        the given transaction.
    Receipt_RetailReference:
      properties:
        Text:
          type: string
          description: >
            Retailer's transaction identifier if different from that generated
            by the device.
          example: '#002/01/836755'
    Receipt_Footer:
      properties:
        Text:
          type: string
          description: |
            The returns policy and any other related information.

            This MUST NOT include information already present in other fields,
            such as loyalty information.
          example: |
            Please retain your receipt.
            If you are not 100% satisfied with your
            purchase, you can return the product and
            get a full refund or exchange the product
            for another one, be it similar or not.
            You can return a product for up to 30 days
            from the date you purchased it.

            Thank you for being part of the
            Fashion Avenue VIP Club.
    Receipt_AdditionalReceipts:
      properties:
        VATRefund:
          type: boolean
          description: |
            Indicates if the customer wishes to receive a VAT refund receipt.
          example: true
    Receipt_ConsumerIdentification_LoyaltyAccount:
      type: object
      properties:
        CustomerID:
          type: string
          description: |
            The unique identifier for the customers loyalty account.
          example: '9385729064'
      description: |
        The customer's loyalty information looked up based on another
        piece of information.
    Receipt_ConsumerIdentification:
      properties:
        PotentialEmailAddress:
          type: string
          description: |
            Suggested/prepopulated (but not necessarily final) email address
            of the customer.
          example: antonyobein@example.com
        EmailSubscription:
          description: |
            The customer's subscription status *prior* to this transaction.
            * -1 - unknown
            * 0 - unsubscribed
            * 1 - subscribed
          example: -1
          allOf:
            - $ref: '#/components/schemas/NullableBoolean'
        EmailDeliverability:
          description: |
            The deliverability of the customer's email address.
            * -1 - unknown
            * 0 - confirmed undeliverable
            * 1 - confirmed deliverable
          example: -1
          allOf:
            - $ref: '#/components/schemas/NullableBoolean'
        LoyaltyAccount:
          $ref: '#/components/schemas/Receipt_ConsumerIdentification_LoyaltyAccount'
      description: |
        This section contains information looked-up in databases,
        whether external or internal, etc. Please do not use this section
        for information about the customer obtained during
        the transaction.
    TransactionDetail_CustomerOrderTransaction_LoyaltyAccount_LoyaltyProgram:
      properties:
        Points:
          type: number
          properties:
            Type:
              type: string
              description: |
                The loyalty action that the points are 
                adjusted against.
              example: PointsEarned
              xml:
                attribute: true
              enum:
                - Balance
                - Credited
                - PointsEarned
                - Assigned
                - TotalRedeemed
                - PointsAdjustment
          description: A numeric representation of loyalty points.
          example: 40
    TransactionDetail_CustomerOrderTransaction_LoyaltyAccount:
      properties:
        CustomerID:
          type: string
          description: |
            The unique identifier for the customer loyalty account.
          example: '9385729064'
        LoyaltyProgram:
          $ref: >-
            #/components/schemas/TransactionDetail_CustomerOrderTransaction_LoyaltyAccount_LoyaltyProgram
    TransactionDetail_CustomerOrderTransaction:
      type: object
      properties:
        OrderNumber:
          type: string
          description: A unique identifier for the customer order.
          example: ABO74927947365
        ShipTo:
          type: object
          description: The shipping information for the customer order.
          example:
            ContactName:
              Title: Mr
              FirstName: Anthony
              LastName: O'Brien
              Name: ''
            Address:
              Street1: 20 Guild Street
              City: London
              County: Greater London
              State: England
              PostalCode: E13 8UH
              Country: United Kingdom
            Telephone: 07700 900 876
            Email: anthony.obrien@example.com
            Notes: Leave with neighbour at door 21 if not home
          allOf:
            - $ref: '#/components/schemas/Person'
            - type: object
              properties:
                Notes:
                  type: string
                  description: |
                    Any additional information about the customer order.
                  example: Leave behind plant pot if no one is home.
        LoyaltyAccount:
          $ref: >-
            #/components/schemas/TransactionDetail_CustomerOrderTransaction_LoyaltyAccount
      description: The information for the customer order.
    Address:
      type: object
      properties:
        Street1:
          type: string
          description: The first line of the party's address.
          example: 1901 London Road
        City:
          type: string
          description: The city of the party's address.
          example: London
        County:
          type: string
          description: The county of the party's address.
          example: Greater London
        State:
          type: string
          description: The state of the party's address.
          example: Alaska
        PostalCode:
          type: string
          description: >
            The postcode of the party's address taking the form of  a postcode,
            PIN, ZIP Code, etc.
          example: SW1A 1AA
        Country:
          type: string
          description: The country in which the address is located.
          example: United Kingdom
      description: The address of the party.
    SaleItem_ItemDiscount:
      type: object
      properties:
        Amount:
          $ref: '#/components/schemas/Amount'
        Text:
          type: string
          description: |
            The discount text as to be shown on the customer receipt.
          example: Promotion
        ReductionPercent:
          type: number
          description: The percentage amount of the discount.
          example: 5
      description: The discount applied specifically to the line item.
      example: '3.34'
    SaleItem_Tax:
      required:
        - Amount
        - TaxRate
      type: object
      properties:
        Amount:
          description: The tax amount on the individual item line.
          allOf:
            - $ref: '#/components/schemas/Amount'
        TaxableAmount:
          description: The net (before tax) amount.
          allOf:
            - $ref: '#/components/schemas/Amount'
        TaxRate:
          description: |
            The percentage amount of tax paid on an individual item line.
          allOf:
            - $ref: '#/components/schemas/PercentageAmount'
        TaxCode:
          type: string
          description: >
            A tax code representing the tax information for the given  SaleItem
            under the region of sale.
          example: VAT
      description: The tax for the individual item line.
      example: '4.41'
  responses:
    '401':
      description: Missing or malformed API key.
      content:
        text/plain:
          schema:
            type: string
            example: No authorization key was provided.
    '403':
      description: Access denied.
      content:
        text/plain:
          schema:
            type: string
            example: >-
              The provided authorization key does not have access to this
              resource.
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      description: >
        To authorize requests sent to the server a header MUST be added to the
        HTTP request such as:

        `yReceipts MTE5MDA4OmVjLTFhMmI2ODg1M2Y2Yg==`
      name: Authorization
      in: header