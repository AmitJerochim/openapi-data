openapi: 3.0.0

servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/konoma/akb-onboarding-majority/1.2
  - url: 'https://sample-api.com/api'
  
info:
  description: ASB API specification for AKB majority onboarding
  version: "1.5"
  title: AKB onboarding for majorities
  contact:
    email: patrick.nick@konoma.ch
tags:
  - name: process
  - name: config
  
paths:
  /digitalid/:digitalId:
    servers:
      - url: 'https://sample-api.com/api/onboarding/majority/v1'
    get:
      description: Verifies if a digital ID (A/P number) exists
      tags: 
        - process
      parameters: 
        - $ref: '#/components/parameters/digitalIdParam'
        - $ref: '#/components/parameters/apiKeyParam'
      responses:
        200:
          description: Returns the status of the digital id. 200 is only returned in case of an existing digital id. Otherwise a 404 returned is returned. 
          content:
            application/json:
              schema:
                properties:
                  status:
                    description: Status of the digital id.
                    type: string
                    enum:
                      - exists
                      - completed
        404: 
          $ref: '#/components/responses/Error404'
        500: 
          $ref: '#/components/responses/Error500'
    
  /digitalid/:digitalid/dataform:
    servers:
      - url: 'https://sample-api.com/api/onboarding/majority/v1'
    post:
      description: Endpoint to submit the onboarding client data. An onboarding process will be initiated in Swisscom DIS. 
      tags: 
        - process
      parameters:
        - $ref: '#/components/parameters/digitalIdParam'
        - $ref: '#/components/parameters/apiKeyParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataFormResult'
      responses:
        200:
          description: Submit successful, process initiated
          content:
            application/json:
              schema:
                properties:
                  redirectUrl:
                    description: The URL which can be used to redirect the user to the DIS system.
                    type: string
              example:
                redirectUrl: 'http://diis.swisscom.com/test/id=123123123131'
        422:
          description: The indicates if the service considers the transfered data as invalid in regard to content (not form). Can be used for different validation errors that lead to the service refusing the current request.
          content:
            application/json:
              schema:
                properties:
                  validationType: 
                    description: Describes the section that is considered to be invalid
                    type: string
                    enum:
                      - addressOfResidence
                      - birthdate
                      - aiaFatcaViolation
                      - other
                  validationMessage:
                    description: Provides additional validation error information, if such are available.
                    type: string
              example:
                validationType: addressOfResidence
                validationMessage: 'The validation of the address of residence failed.'
                    
        500: 
          $ref: '#/components/responses/Error500'
      
  /transaction/:transactionId:
    servers:
      - url: 'https://sample-api.com/api/onboarding/majority/v1'
    get:
      description: Checks if a transaction exists and if it was finished successfully.
      tags: 
        - process
      parameters:
        - $ref: '#/components/parameters/transactionIdParam'
        - $ref: '#/components/parameters/apiKeyParam'
      responses:
        204:
          description: Transaction was finished successfully.
        404:
          description: Transaction does not exist or failed. A user will always see the same error page anyway.
        500: 
          $ref: '#/components/responses/Error500'
  
  /country:
    get:
      description: Get configured list of all available countries with translated country names.
      tags: 
        - config
      parameters:
        - $ref: '#/components/parameters/languageParam'
        - $ref: '#/components/parameters/apiKeyParam'
      responses:
        200:
          description: Country list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
              example:
                - countryCode: at
                  name: Ã–sterreich
                - countryCode: de
                  name: Deutschland
                - countryCode: ch
                  name: Schweiz
                - countryCode: fr
                  name: Frankreich
                - countryCode: it
                  name: Italien
                - countryCode: se
                  name: Schweden
                - countryCode: li
                  name: Lichtenstein
        404:
          description: Transaction does not exist or failed. A user will always see the same error page anyway.
        500: 
          $ref: '#/components/responses/Error500'
            
        
        
components:
  parameters:
    digitalIdParam:
      name: digitalId
      in: path
      description: A or P number of client
      required: true
      schema:
        $ref: '#/components/schemas/DigitalId'
    transactionIdParam:
      name: transactionId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/TransactionId'
    languageParam:
      name: lang
      in: query
      description: Language code to translate according to ISO-639-1
      schema:
        type: string
    apiKeyParam:
      name: akbKey
      in: query
      description: The API Key used to access the API
      required: true
      schema:
        type: string
      
  
  responses:
    Error400:
      description: Bad request. The request is invalid.
    Error404:
      description: Item not found.
    Error500:
      description: An unexpected error occured
      
  schemas:
    Address:
      description: Address object
      properties:
        street: 
          type: string
        streetNumber:
          type: string
        zipCode:
          type: string
        city:
          type: string
        country: 
          type: string
    BeneficialOwnerAnswer:
      type: string
      enum:
        - yes
        - no
        - dont_know
        
    ContactType:
      type: string
      enum: 
        - mail
        - email
        
    Country:
      description: A configured country
      properties:
        countryCode:
          type: string
          description: "Country code according to ISO 3166-1 alpha-2 code."
        name:
          type: string
          description: Country name

    DataFormResult:
      description: Each entry represents a submitted form from the onboarding form.
      properties:
        isBeneficialOwner:
          $ref: '#/components/schemas/BeneficialOwnerAnswer'
        salutation:
          $ref: '#/components/schemas/Salutation'
          nullable: false
        firstname:
          type: string
          description: Firstname of the client
          nullable: false
        lastname:
          type: string
          description: Lastname of the client
          nullable: false
        birthdate:
          type: string
          description: Client birthdate, formatted according to **ISO-8601**.
          nullable: false
        nationality:
          type: string
          description: Nationality of the client
          nullable: false
        addressOfResidence:
          allOf:
            - $ref: '#/components/schemas/Address'
            - nullable: true
        ignoreAddressValidationError:
          type: boolean
          nullable: false
          description: True if the client wishes is sure that his address is valid and wishes to continue with the onboarding process with the given address 
        email:
          type: string
          description: Email address on which the client might be contacted
          nullable: false
        mobilePhone:
          type: string
          description: Mobile phone number of the client. The frontend ensure that it is in th format "+{countrycode}{phonenumber}". Spaces are removed from the number. The validation only checks that neither the typical invalid numbers '+0041...' or '+41079...' are used and that the total length doesn't exceed 33 characters.
          nullable: false
        contactType:
          allOf:
            - $ref: '#/components/schemas/ContactType'
            - nullable: true
        createEbanking:
          type: boolean
          nullable: false
          description: True if a client would like to use the ebanking.
        clientIpAddress: 
          type: string
          nullable: false
          description: The client IP address as received by the webserver.
        usCitizen: 
          type: boolean
          nullable: false
          description: Specifies if the user is a USA citizen
        usPlaceOfBirth: 
          type: boolean
          nullable: false
          description: Specifies if the user is born in the USA
        usResidencePermit: 
          type: boolean
          nullable: false
          description: Specifies if the user is has a permit of residence in the USA
        usDomicile: 
          type: boolean
          nullable: false
          description: Specifies if the users domicile is the USA
        usReasons: 
          type: boolean
          nullable: false
          description: Specifies if there are any other reasons that would categorize the user to have a tax liability in the USA
        usPerson: 
          type: boolean
          nullable: false
          description: Confirmation that the user is not considered an US-Person in the sense of US right
        taxDomicile:
          type: string
          nullable: false
          description: The tax domicile (country iso code) of the user. Currently only CH is considered acceptable
        
    DigitalId:
      description: Digital id (pseudonym) for a AKB client.
      properties:
        anumber:
          type: string
          description: A or P number of client
          
    Salutation:
      type: string
      enum:
        - mr
        - mrs
        
    Transaction:
      description: For each started onboarding, a transaction is generated.
      properties: 
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        status:
          $ref: '#/components/schemas/TransactionStatus'
    
    TransactionId:
      description: ID which represents an onboarding transaction. With this number, it is possible to backtrace an onboarding process accross the different systems.
      type: string
      nullable: false
          
    TransactionStatus:
      type: string
      enum: 
        - pending
        - successful
        - failed
        
    User:
      description: A user object. For data protection reasons, the client application doesn't fetch any user data.
