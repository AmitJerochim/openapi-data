openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: API in HEROKU
    url: https://sleepy-harbor-89351.herokuapp.com/
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/CaioCS100/school/1.0.0
info:
  description: This is a school API
  version: "1.0.0"
  title: School API
  contact:
    email: caio.cesar.s100@gmail.com
    name: Caio Cesar Silva
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Login
    description: Authentication handling
  - name: Students
    description: Operations about students
  - name: Address
    description: Operations about address
  - name: Phones
    description: Operations about phones
paths:
  /auth:
     post:
      tags: 
        - Login
      summary: Create a new Student Login
      description: This request add a new Student Login in system
      requestBody:
        required: true
        description: Login object that needs to be added to the system.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Student Login Created
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
              examples:
                Sucess Sign up:
                  $ref: '#/components/examples/success_sign'
        '422':
          description: Student login errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
              examples:
                Error Sign up blank form request:
                  $ref: '#/components/examples/error_sign_up_blank_form_request'
                Email already exist:
                  $ref: '#/components/examples/error_login_email_already_exist'
                Error sign up blank data:
                  $ref: '#/components/examples/error_login_blank_data'
                Error sign up short password:
                  $ref: '#/components/examples/error_login_short_password'
        '500':
          description: Unexpected Error
  /auth/sign_in:
    post:
      tags: 
        - Login
      summary: Student login
      description: this request realize student login
      requestBody:
        description: Login object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
            examples:
              Login example:
                $ref: '#/components/examples/login'
      responses:
        '200':
          description: ok
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
              examples:
                Student Session:
                  $ref: '#/components/examples/login_session'
        '401':
          description: Invalid login credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
              examples:
                Student incorrect login:
                  $ref: '#/components/examples/incorrect_login'
        '500':
          description: Unexpected Error
  /students:
    post:
      tags: 
        - Students
      summary: create a new student
      description: This request create a new student in system
      parameters: 
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      requestBody:
        required: true
        description: Student object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            examples:
              Create new student:
                $ref: '#/components/examples/create_new_student'
      responses:
        '201':
          description: Student created
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                Student created:
                  $ref: '#/components/examples/show_student'
        '401':
          description: Student not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '422':
          description: Student errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                Student errors:
                  $ref: '#/components/examples/errors'
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
        '500':
          description: Unexpected Error
    get:
      tags: 
        - Students
      summary: show all students
      description: This request show all students in system
      parameters: 
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
        - in: query
          name: page%5Bnumber%5D
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
            example: 2
        - in: query
          name: page%5Bsize%5D
          description: The numbers of items to return
          schema:
            type: integer
          example: 3
      responses:
        '200':
          description: Students found
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                Show all students:
                  $ref: '#/components/examples/show_all_students'
        '401':
          description: Student not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '500':
          description: Unexpected Error
  /students/{studentId}:
    get:
      tags: 
        - Students
      summary: show one student
      description: This request shows one student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      responses:
        '200':
          description: Students found
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                Show one student:
                  $ref: '#/components/examples/show_one_student'
        '401':
          description: Student not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: This Student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '500':
          description: Unexpected Error
    put:
      tags: 
        - Students
      summary: update an existing student
      description: This request will update an existing student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      requestBody:
        required: true
        description: Student object that needs to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            examples: 
              Update Student:
                $ref: '#/components/examples/update_student'
      responses:
        '200':
          description: Student updated
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                Student Updated:
                  $ref: '#/components/examples/show_student'
        '401':
          description: Student not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: This Student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '422':
          description: Student errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                Student errors:
                  $ref: '#/components/examples/errors'
                Update blank form request:
                  $ref: '#/components/examples/error_update_student_blank_data'
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
        '500':
          description: Unexpected Error
    patch:
      tags: 
        - Students
      summary: update an existing student
      description: This request will update an existing student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      requestBody:
        required: true
        description: Student object that needs to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            examples: 
              Update Student:
                $ref: '#/components/examples/update_student'
      responses:
        '200':
          description: Student updated
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                Student Updated:
                  $ref: '#/components/examples/show_student'
        '401':
          description: Student not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: This Student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '422':
          description: Student errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                Student errors:
                  $ref: '#/components/examples/errors'
                Update blank form request:
                  $ref: '#/components/examples/error_update_student_blank_data'
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
        '500':
          description: Unexpected Error
    delete:
      tags: 
        - Students
      summary: delete an existing student
      description: This request will delete an existing student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      responses:
        '204':
          description: Student deleted
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
        '401':
          description: Student not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: This Student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '500':
          description: Unexpected Error
  /students/{studentId}/address:
    get:
      tags: 
        - Address
      summary: show the address related with student
      description: This request shows the address related with student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      responses:
        '200':
          description: Address found
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                Show Address:
                  $ref: '#/components/examples/show_address'
                Show Empty Address:
                  $ref: '#/components/examples/show_empty_address'
        '401':
          description: Student not authenticated
          content:
            application/json:
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: Student does not have a address or student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '500':
          description: Unexpected Error
    post:
      tags: 
       - Address
      summary: create the address related with student
      description: This request creates the address related with student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      requestBody:
        required: true
        description: Address Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
            examples:
              Create Address:
                $ref: '#/components/examples/create_address'
      responses:
        '201':
          description: Address created
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              examples:
                Show Address:
                  $ref: '#/components/examples/show_address'
        '401':
          description: Student not authenticated
          content:
            application/json:
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: This Student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '422':
          description: Address errors
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                Address Errors:
                  $ref: '#/components/examples/errors'
        '500':
          description: Unexpected Error
    put:
      tags: 
        - Address
      summary: update an existing address related with student
      description: This request will update an existing address related with student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
            examples:
              Update Address:
                $ref: '#/components/examples/update_address'
      responses:
        '200':
          description: Address updated
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              examples:
                Show Address:
                  $ref: '#/components/examples/show_address'
        '401':
          description: Student not authenticated
          content:
            application/json:
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: Student does not have a address or student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '422':
          description: Address errors
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                Address Errors:
                  $ref: '#/components/examples/errors'
        '500':
          description: Unexpected Error
    patch:
      tags: 
        - Address
      summary: update an existing address related with student
      description: This request will update an existing address related with student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
            examples:
              Update Address:
                $ref: '#/components/examples/update_address'
      responses:
        '200':
          description: Address updated
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              examples:
                Show Address:
                  $ref: '#/components/examples/show_address'
        '401':
          description: Student not authenticated
          content:
            application/json:
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: Student does not have a address or student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '422':
          description: Address errors
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
              examples:
                Address Errors:
                  $ref: '#/components/examples/errors'
        '500':
          description: Unexpected Error
  /students/{studentId}/address/{id}:
    delete:
      tags: 
        - Address
      summary: delete an existing address related with student
      description: This request will delete an existing address related with student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: path
          name: id
          description: Address id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      responses:
        '204':
          description: Address deleted
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
        '401':
          description: Student not authenticated
          content:
            application/json:
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: Student does not have a address or student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '500':
          description: Unexpected Error
  /students/{studentId}/phones:
    get:
      tags: 
        - Phones
      summary: show all the phones related with student
      description: This request shows all the phones related with student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      responses:
        '200':
          description: Phones found
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
              examples:
                Show Phones:
                  $ref: '#/components/examples/show_all_phones'
                Show Empty Address:
                  $ref: '#/components/examples/show_empty_phones'
        '401':
          description: Student not authenticated
          content:
            application/json:
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: No have phones related with student or student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '500':
          description: Unexpected Error
  /students/{studentId}/phone:
    post:
      tags: 
        - Phones
      summary: Create a single phone related with student
      description: This request create a single phone related with student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      requestBody:
        required: true
        description: Phone Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phone'
            examples:
              Create phone:
                $ref: '#/components/examples/create_phone'
      responses:
        '201':
          description: Phone Created
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
              examples:
                Show Phones:
                  $ref: '#/components/examples/show_all_phones'
        '401':
          description: Student not authenticated
          content:
            application/json:
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: Student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '422':
          description: Phones errors
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
              examples:
                Phones Errors:
                  $ref: '#/components/examples/errors'
        '500':
          description: Unexpected Error
    put:
      tags: 
        - Phones
      summary: Update a single phone related with student
      description: This request update a single phone related with student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      requestBody:
        required: true
        description: Phone Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phone'
            examples:
              Update phone:
                $ref: '#/components/examples/update_phone'
      responses:
        '200':
          description: Phone Created
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
              examples:
                Show Phones:
                  $ref: '#/components/examples/show_all_phones'
        '401':
          description: Student not authenticated
          content:
            application/json:
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: No have phones related with student or student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '422':
          description: Phones errors
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
              examples:
                Phones Errors:
                  $ref: '#/components/examples/errors'
        '500':
          description: Unexpected Error
    patch:
      tags: 
        - Phones
      summary: Update a single phone related with student
      description: This request update a single phone related with student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      requestBody:
        required: true
        description: Phone Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phone'
            examples:
              Update phone:
                $ref: '#/components/examples/update_phone'
      responses:
        '200':
          description: Phone Created
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
              examples:
                Show Phones:
                  $ref: '#/components/examples/show_all_phones'
        '401':
          description: Student not authenticated
          content:
            application/json:
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: No have phones related with student or student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '422':
          description: Phones errors
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
              examples:
                Phones Errors:
                  $ref: '#/components/examples/errors'
        '500':
          description: Unexpected Error
  /students/{studentId}/phone/{id}:
    delete:
      tags: 
        - Phones
      summary: delete an existing phone related with student
      description: This request will delete an existing phone related with student
      parameters: 
        - in: path
          name: studentId
          description: Student id
          required: true
          schema:
            type: integer
            example: 1
        - in: path
          name: id
          description: Phone id
          required: true
          schema:
            type: integer
            example: 1
        - in: header
          name: access-token
          description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request
          required: true
          schema:
            type: string
            example: "C6H-wh0BrUU-9BMloTv9Pg"
        - in: header
          name: token-type
          description: a type of token
          required: true
          schema:
            type: string
            example: 'Bearer'
        - in: header
          name: client
          description: This enables the use of multiple simultaneous sessions on different clients.
          required: true
          schema:
            type: string
            example: 'Qs3YmCkugLi9W5lALCdbhQ'
        - in: header
          name: uid
          description: A unique value that is used to identify the student.
          required: true
          schema:
            type: string
            example: 'student@student.com'
      responses:
        '204':
          description: Phone deleted
          headers:
            access-token:
              $ref: '#/components/headers/access-token'
            token-type:
              $ref: '#/components/headers/token-type'
            client:
              $ref: '#/components/headers/client'
            expiry:
              $ref: '#/components/headers/expiry'
            uid:
              $ref: '#/components/headers/uid'
        '401':
          description: Student not authenticated
          content:
            application/json:
              examples:
                Student not authenticated:
                  $ref: '#/components/examples/user_not_authenticated'
        '404':
          description: No have phones related with student or student does not exist
          content:
            application/json:
              examples:
                Student not found:
                  $ref: '#/components/examples/student_not_found'
        '500':
          description: Unexpected Error
components:
  schemas:
    Login:
      type: object
      required: 
        - email
        - password
      properties:
        uid:
          type: string
          description: A unique value that is used to identify the login.
          readOnly: true
        id:
          type: integer
          description: user code
          readOnly: true
        email:
          type: string
          description: User email
        provider:
          type: string
          description: provider name when the student do the login
          readOnly: true
        allow_password_change:
          type: boolean
          description: A boolean value that indicates if the student login was changed your password
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: the data-time when the login was created
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: the data-time when the login was updated
          readOnly: true
        password:
          type: string
          minLength: 6
          description: User password
          writeOnly: true
    Student:
      type: object
      required: 
        - name
        - father-name
        - mother-name
        - birth-date
      properties:
        id:
          type: integer
          description: student code
          example: 1
          minimum: 1
          readOnly: true
        name:
          type: string
          description: student name
          example: Arthur Cormier
        father-name:
          type: string
          description: student's father name
          example: Casey O'Kon
        mother-name:
          type: string
          description: student's mother name
          example: Luisa Langosh
        birth-date:
          type: string
          format: date
          description: student birthdate
          example: "2000-10-07"
        image:
          type: string
          description: student image
          example: "https://image.shutterstock.com/image-photo/portrait-female-college-student-smiling-600w-462360148.jpg"
    Address:
      type: object
      required: 
        - cep
        - street
        - number
        - city
        - uf
      properties:
        id:
          type: integer
          description: address code
          example: 1
          minimum: 1
          readOnly: true
        cep:
          type: string
          description: building cep
        street:
          type: string
          description: building street
          example: Av. Fernades Lima
        number:
          type: integer
          description: building number 
          example: 42
        city:
          type: string
          description: name of the city where the address is located
          example: Maceió
        uf:
          type: string
          description: Address uf
          example: AL
        complement:
          type: string
          description: Address complement
          example: In front of the hospital
    Phone:
      type: object
      required:
        - number
        - number-owner
      properties:
        id:
          type: integer
          description: address code
          example: 1
          minimum: 1
          readOnly: true
        number:
          type: string
          description: phone number
          example: (82) 99999 - 9999 
        number-owner:
          type: string
          description: owner number
          example: Father
  examples:
    success_sign:
      value: 
        status: success
        data:
            uid: student@student.com
            id: 1
            email: student@student.com
            provider: email
            allow_password_change: false
            created_at: '2020-01-16T19:15:37.782Z'
            updated_at: "2020-01-16T19:15:38.347Z"
    error_sign_up_blank_form_request:
      value: 
        success: false
        errors: [Please submit proper sign up data in request body.]
        status: error
    error_login_email_already_exist:
      value: 
        status: error
        data:
            id: null
            provider: email
            uid: ""
            allow_password_change: false
            email: student@student.com
            created_at: null
            updated_at: null
        errors:
          email: [has already been taken]
          full_messages: [Email has already been taken]
    error_login_blank_data:
      value: 
        status: error
        data:
            id: null
            provider: email
            uid: ""
            allow_password_change: false
            email: ""
            created_at: null
            updated_at: null
        errors:
          password: [can't be blank]
          email: [can't be blank]
          full_messages: ["Password can't be blank", "Email can't be blank"]
    error_login_short_password:
      value: 
        status: error
        data:
            id: null
            provider: email
            uid: ""
            allow_password_change: false
            name: null
            nickname: null
            image: null
            email: student@student.com
            created_at: null
            updated_at: null
        errors:
          password: ["is too short (minimum is 6 characters)"]
          full_messages: ["Password is too short (minimum is 6 characters)"]
    login:
      value:
        email: student@student.com
        password: '123456'
    login_session:
      value:
        id: 1
        email: student@student.com
        provider: email
        uid: student@student.com
        allow_password_change: false
    incorrect_login:
      value:
        success: false
        errors: [Invalid login credentials. Please try again.]
    user_not_authenticated:
      value: 
        errors: ["You need to sign in or sign up before continuing."]
    errors:
      value:
        errors: [ 
          { id: "name", detail: "Name is required" }
        ]
    show_all_students:
      value: 
        data: [
          {  
            id: 1,
            type: students,
            attributes: {
              name: Arthur Cormier II,
              father-name: Casey O'Kon,
              mother-name: Luisa Langosh I,
              birth-date: 2000-10-07,
              image: null,
            },
            relationships: {
              address: {
                data: {
                  id: 1,
                  type: addresses
                },
                links: {
                  related: "/students/1/address"
                }
              },
              phones: {
                data: [
                  {
                    id: 1,
                    type: "phones"
                  },
                  {
                    id: 2,
                    type: "phones"
                  }
                ],
                links: {
                  related: "/students/1/phones"
                }
              }
            },
            links: {
              self: "/students/3"
            }
          }
        ]
        links:
          self: "http://localhost:3000/students/?page%5Bnumber%5D=2&page%5Bsize%5D=3"
          first: "http://localhost:3000/students/?page%5Bnumber%5D=2&page%5Bsize%5D=3"
          prev: null
          next: "http://localhost:3000/students/?page%5Bnumber%5D=2&page%5Bsize%5D=3"
          last: "http://localhost:3000/students/?page%5Bnumber%5D=2&page%5Bsize%5D=3"
    show_one_student:
      value:
        data:
          id: 1
          type: students
          attributes:
            name: Arthur
            father-name: "Pai do Arthur"
            mother-name: "Mãe do Arthur"
            birth-date: "2000-10-07"
            image: null
          relationships:
            address:
              data:
                id: 1
                type: addresses
              links:
                related: "/students/1/address"
            phones:
              data: [
                {
                  id: 1,
                  type: phones
                },
                {
                  id: 4,
                  type: phones
                }
              ]
              links:
                related: "/students/1/phones"
          links:
            self: "/students/1"
    create_new_student:
      value: 
        data:
          type: students
          attributes:
            name: Arthur Cormier II
            "father-name": Casey O'Kon
            "mother-name": Luisa Langosh I
            "birth-date": "2000-10-07"
            image: "https://image.shutterstock.com/image-photo/portrait-female-college-student-smiling-600w-462360148.jpg"
    show_student:
      value: 
        data:
          id: 1
          type: "students"
          attributes:
            name: Arthur Cormier II
            "father-name": Casey O'Kon
            "mother-name": Luisa Langosh I
            "birth-date": "2000-10-07"
            image: "https://image.shutterstock.com/image-photo/portrait-female-college-student-smiling-600w-462360148.jpg"
          relationships:
            address:
              data: null
              links:
                related: "/students/1/address"
            phones:
              data: []
              links:
                related: "/students/1/phones"
          links:
            self: "/students/1"
    update_student:
      value: 
        data:
          id: 1
          type: students
          attributes:
            name: João
            "father-name": "José"
            "mother-name": "Maria"
            "birth-date": "1999-07-18"
            image: "http://example.com/images/student.png"
    error_update_student_blank_data:
      value: 
        errors: "Please submit proper sign up data in request body."
    student_not_found:
      value: 
        error: "Couldn't find Student with 'id'=11"
    show_address:
      value:
        data:
          id: 1
          type: addresses
          attributes:
            cep: 57055000
            street: Av. Fernandes Lima
            number: 3
            city: Maceió
            uf: AL
            complement: é uma avenida
          relationships:
            student:
              data:
                id: 1
                type: students
              links:
                related: "/students/1"
    show_empty_address:
      value: {}
    create_address:
      value: 
        data:
          type: addresses
          attributes:
            cep: 57055000
            street: Av. Fernandes Lima
            number: 3
            city: Maceió
            uf: AL
            complement: é uma avenida
    update_address:
      value: 
        data:
          id: 1
          type: addresses
          attributes:
            cep: 57055000
            street: Av. Fernandes Lima
            number: 3
            city: Maceió
            uf: AL
            complement: é uma avenida
    show_all_phones:
      value: 
        data: [
          {
            id: 1,
            type: phones,
            attributes: {
              number: (82) 99999 - 9999,
              number-owner: Father
            },
            relationships: {
              student: {
                data: {
                  id: 1,
                  type: students
                },
                links: {
                  related: "/students/1"
                }
              }
            }
          }
        ]
    show_empty_phones:
      value:
        data: []
    create_phone:
      value: 
        data:
          type: phones
          attributes:
            number: (82) 99999 - 9999
            "number-owner": Mother
    update_phone:
      value: 
        data:
          id: 1
          type: phones
          attributes:
            number: (82) 99999 - 9999,
            "number-owner": Mother
  headers:
    access-token:
      description: This serves as the student's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request.
      schema:
        type: string
        example: 'C6H-wh0BrUU-9BMloTv9Pg'
    token-type:
      description: a type of token
      schema:
        type: string
        example: 'Bearer'
    client:
      description: This enables the use of multiple simultaneous sessions on different clients.
      schema:
        type: string
        example: 'Qs3YmCkugLi9W5lALCdbhQ'
    expiry:
      description: The date at which the current session will expire
      schema:
        type: integer
        example: 1580304682
    uid:
      description: A unique value that is used to identify the student.
      schema:
        type: string
        example: 'student@student.com'