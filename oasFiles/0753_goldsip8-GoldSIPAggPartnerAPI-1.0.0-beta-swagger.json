{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "1.0.0-beta",
    "title" : "Dvara Smart Gold - Aggregator Partner APIs"
  },
  "paths" : {
    "/partners/{partnerCode}/customers" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "Add new customers",
        "operationId" : "addCustomers",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid Partner code supplied"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to add customer due to internal error"
          },
          "200" : {
            "description" : "Customer added successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object",
                    "description" : "Name value pair of input customer id with status object for each customer sent in the request.",
                    "properties" : {
                      "id" : {
                        "type" : "string",
                        "description" : "internal id of the customer"
                      },
                      "status" : {
                        "type" : "string",
                        "enum" : [ "success", "failed" ]
                      },
                      "error" : {
                        "type" : "string",
                        "description" : "Error details"
                      }
                    },
                    "example" : {
                      "id" : "2305fb48-4362-4da9-aaf0-f3554765a2eb",
                      "status" : "success"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer is added",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "Customer", "Agent", "Branch" ],
        "summary" : "Get list of customers with various filter and sort criterias, including agent and branch",
        "operationId" : "getCustomers",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to get customers due to internal error"
          },
          "200" : {
            "description" : "Customer list returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Customer"
                  },
                  "description" : "array of customers"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner for whom customer list is returned",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agentId",
          "in" : "query",
          "description" : "unique external id of the agent whose customer list is returned",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "branchId",
          "in" : "query",
          "description" : "unique external id of the branch whose customer list is returned",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "location",
          "in" : "query",
          "description" : "customer location filter, returns customer for this location",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sipPastDueDate",
          "in" : "query",
          "description" : "filter to get only those customers whose SIP is past due date",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "upcomingSIPPeriod",
          "in" : "query",
          "description" : "filter to get only those customers whose SIP due date within upcomingSIPPeriod weeks",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "result set limit, if not provided default 25 is used",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "sort column and sort order, + is ascending, - is descending. Default sort order is +name",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "+name", "-name", "+center", "-center", "+dob", "-dob" ]
          }
        } ]
      }
    },
    "/partners/{partnerCode}/customers/{custId}" : {
      "put" : {
        "tags" : [ "Customer" ],
        "summary" : "Update a customer",
        "operationId" : "updateCustomer",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to update customer due to internal error"
          },
          "200" : {
            "description" : "Customer updated successfully"
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer is updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer being updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Customer" ],
        "summary" : "Do partial updates on a Customer using valid JSON Patch requests structures",
        "operationId" : "updateCustomerPartial",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to update customer due to internal error"
          },
          "200" : {
            "description" : "Customer updated successfully"
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer is updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer being updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchRequest"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "Get a customer",
        "operationId" : "getCustomer",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to find a customer due to internal error"
          },
          "200" : {
            "description" : "Customer data returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer details are requested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer being requested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ]
      }
    },
    "/partners/{partnerCode}/customers/{custId}/uploaddoc" : {
      "post" : {
        "tags" : [ "Customer", "Upload" ],
        "summary" : "Authorize secure upload of a customer's binary document such a photograpgh, or identification proof scan to the storage.  These uploads are a two step process.  In the first step an authorization is completed. On successful authorization caller will receive an upload endpoint (URL).  A 'PUT' operation is expected to this URL with the file binary data.\nWe highly recommend using the client library (uploadclient.js) for uploads.  If you are rolling your own upload routine using this API the following parameter is important.\nUploadDocRequest.type should be 'CUSTOMER_DOC'",
        "operationId" : "uploadCustomerDoc",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to upload image due to internal error"
          },
          "200" : {
            "description" : "Image uploaded successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UploadDocResponse"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer requesting image upload",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UploadDocRequest"
              }
            }
          }
        }
      }
    },
    "/partners/{partnerCode}/customers/{custId}/passbook" : {
      "get" : {
        "tags" : [ "Customer", "Bullion", "Passbook" ],
        "summary" : "Get a customer Passbook",
        "operationId" : "getCustomerPassbook",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to find a customer passbook due to internal error"
          },
          "200" : {
            "description" : "Customer passbook returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BullionPassbook"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer passbok details are requested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer requesting passbook",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ]
      }
    },
    "/partners/{partnerCode}/agents" : {
      "post" : {
        "tags" : [ "Agent" ],
        "summary" : "Add new agents",
        "operationId" : "addAgents",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to add agent due to internal error"
          },
          "200" : {
            "description" : "Agent added successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object",
                    "description" : "Name value pair of input agent id with status object for each agent sent in the request.",
                    "properties" : {
                      "id" : {
                        "type" : "string",
                        "description" : "internal id of the agent"
                      },
                      "status" : {
                        "type" : "string",
                        "enum" : [ "success", "failed" ]
                      },
                      "error" : {
                        "type" : "string",
                        "description" : "Error details"
                      }
                    },
                    "example" : {
                      "status" : "failed",
                      "error" : "Agent BMFIBR002AG018 exists. Skipping"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "Unique code of the Partner whose agent is added",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Agent"
                }
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "Agent" ],
        "summary" : "Get list of agents",
        "operationId" : "getAgents",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to get agents due to internal error"
          },
          "200" : {
            "description" : "Agent list returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Agent"
                  },
                  "description" : "array of Agents"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner for whom agent list is returned",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "extBranchId",
          "in" : "query",
          "description" : "external branch identifier to limit agents to a specifc branch",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ]
      }
    },
    "/partners/{partnerCode}/agents/{agentId}/uploaddoc" : {
      "post" : {
        "tags" : [ "Agent", "Upload" ],
        "summary" : "Authorize secure upload of a agent's binary document such a photograpgh, or identification proof scan to the storage.  These uploads are a two step process.  In the first step an authorization is completed. On successful authorization caller will receive an upload endpoint (URL).  A 'PUT' operation is expected to this URL with the file binary data.\nWe highly recommend using the client library (uploadclient.js) for uploads.  If you are rolling your own upload routine using this API the following parameter is important.\nUploadDocRequest.type should be 'AGENT_DOC'",
        "operationId" : "uploadAgentDoc",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Agent not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to upload image due to internal error"
          },
          "200" : {
            "description" : "Image uploaded successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UploadDocResponse"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agentId",
          "in" : "path",
          "description" : "unique external id of the agent requesting image upload",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UploadDocRequest"
              }
            }
          }
        }
      }
    },
    "/partners/{partnerCode}/agents/{agentId}" : {
      "put" : {
        "tags" : [ "Agent" ],
        "summary" : "Update an agent",
        "operationId" : "updateAgent",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Agent not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to update agent due to internal error"
          },
          "200" : {
            "description" : "Agent updated successfully"
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "Unique code of the Partner whose agent is updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agentId",
          "in" : "path",
          "description" : "Unique external agent id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Agent"
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Agent" ],
        "summary" : "Do partial updates on an Agent using valid JSON Patch requests structures",
        "operationId" : "updateAgentPartial",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Agent not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to update agent due to internal error"
          },
          "200" : {
            "description" : "Agent updated successfully"
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "Unique code of the Partner whose agent is updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agentId",
          "in" : "path",
          "description" : "Unique external agent id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchRequest"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "Agent" ],
        "summary" : "Get an agent",
        "operationId" : "getAgent",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Agent not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to get agent due to internal error"
          },
          "200" : {
            "description" : "Agent returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Agent"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "Unique code of the Partner whose agent is requested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agentId",
          "in" : "path",
          "description" : "Unique external agent id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ]
      }
    },
    "/partners/{partnerCode}/branches" : {
      "post" : {
        "tags" : [ "Branch" ],
        "summary" : "Add new branches",
        "operationId" : "addBranches",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to add branch due to internal error"
          },
          "200" : {
            "description" : "Branch added successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object",
                    "description" : "Name value pair of input branch id with status object for each branch sent in the request.",
                    "properties" : {
                      "id" : {
                        "type" : "string",
                        "description" : "internal id of the branch"
                      },
                      "status" : {
                        "type" : "string",
                        "enum" : [ "success", "failed" ]
                      },
                      "error" : {
                        "type" : "string",
                        "description" : "Error details"
                      }
                    },
                    "example" : {
                      "id" : "2305fb48-4362-4da9-aaf0-f3554765a2eb",
                      "status" : "success"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose branch is added",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Branch"
                }
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "Branch" ],
        "summary" : "Get list of branches for a given partner",
        "operationId" : "getBranches",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to get branches due to internal error"
          },
          "200" : {
            "description" : "Branch list returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Branch"
                  },
                  "description" : "array of branches"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose branch is added",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ]
      }
    },
    "/partners/{partnerCode}/branches/{branchId}/uploaddoc" : {
      "post" : {
        "tags" : [ "Branch", "Upload" ],
        "summary" : "Authorize secure upload of a branch's binary document such an identification proof scan to the storage.  These uploads are a two step process.  In the first step an authorization is completed. On successful authorization caller will receive an upload endpoint (URL).  A 'PUT' operation is expected to this URL with the file binary data.\nWe highly recommend using the client library (uploadclient.js) for uploads.  If you are rolling your own upload routine using this API the following parameter is important.\nUploadDocRequest.type should be 'BRANCH_DOC'",
        "operationId" : "uploadBranchDoc",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Branch not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to upload image due to internal error"
          },
          "200" : {
            "description" : "Image uploaded successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UploadDocResponse"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "branchId",
          "in" : "path",
          "description" : "unique external id of the branch requesting image upload",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UploadDocRequest"
              }
            }
          }
        }
      }
    },
    "/partners/{partnerCode}/branches/{branchId}" : {
      "put" : {
        "tags" : [ "Branch" ],
        "summary" : "Update a branch",
        "operationId" : "updateBranch",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Branch not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to update branch due to internal error"
          },
          "200" : {
            "description" : "Branch updated successfully"
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose branch is updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "branchId",
          "in" : "path",
          "description" : "unique external branch id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Branch"
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Branch" ],
        "summary" : "Do partial updates on a Branch using valid JSON Patch requests structures",
        "operationId" : "updateBranchPartial",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Branch not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to update branch due to internal error"
          },
          "200" : {
            "description" : "Branch updated successfully"
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose branch is updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "branchId",
          "in" : "path",
          "description" : "unique external branch id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchRequest"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "Branch" ],
        "summary" : "get a branch",
        "operationId" : "getBranch",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Branch not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to get branch due to internal error"
          },
          "200" : {
            "description" : "Branch returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Branch"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose branch is updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "branchId",
          "in" : "path",
          "description" : "unique external branch id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ]
      }
    },
    "/partners/{partnerCode}/customers/{custId}/bullions" : {
      "get" : {
        "tags" : [ "Customer", "Bullion" ],
        "summary" : "Get all bullions available to a customer",
        "operationId" : "getBullions",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to find bullions due to internal error"
          },
          "200" : {
            "description" : "Bullion list for customer returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Bullion"
                  },
                  "description" : "array of available and configured Bullion"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer is requesting Bullions",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer who is requesting Bullions",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ]
      }
    },
    "/partners/{partnerCode}/customers/{custId}/orderinvoice/{id}" : {
      "get" : {
        "tags" : [ "Customer", "Order", "Invoice" ],
        "summary" : "Get the URL from which an appropriate INVOICE / ADVANCE RECEIPT PDF document for the order Can be downloaded.",
        "operationId" : "GetCustomerOrderInvoice",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to fetch invoice due to internal error"
          },
          "200" : {
            "description" : "Invoice document available for download.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DownloadResponse"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer is adding buy order",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer whose buy order is being added",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique order ID returned by the system at the time of order submission.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ]
      }
    },
    "/partners/{partnerCode}/customers/{custId}/instantorders/buy" : {
      "post" : {
        "tags" : [ "Customer", "Instant Order" ],
        "summary" : "Post a new instant bullion buy order.",
        "operationId" : "addInstantBullionBuyOrder",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to add instant buy order due to internal error"
          },
          "200" : {
            "description" : "Instant Buy Order added for Customer successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InstantOrderResponse"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer is adding buy order",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer whose buy order is being added",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InstantBuyOrderRequest"
              }
            }
          }
        }
      }
    },
    "/partners/{partnerCode}/customers/{custId}/instantorders/sell" : {
      "post" : {
        "tags" : [ "Customer", "Instant Order" ],
        "summary" : "Post a new instant bullion sell order.",
        "operationId" : "addInstantBullionSellOrder",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to add instant sell order due to internal error"
          },
          "200" : {
            "description" : "Instant Sell Order added for Customer successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InstantOrderResponse"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer is adding sell order",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer whose sell order is being added",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InstantSellOrderRequest"
              }
            }
          }
        }
      }
    },
    "/partners/{partnerCode}/customers/{custId}/instantorders/{instantOrderId}" : {
      "get" : {
        "tags" : [ "Customer", "Instant Order" ],
        "summary" : "Get details of a particular instant order for a customer",
        "operationId" : "getInstantOrderDetails",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer/Order not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to find instant order details of the customer due to internal error"
          },
          "200" : {
            "description" : "Customer instant order details returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InstantOrderResponse"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer's order details are requested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer whose order details are being requested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "instantOrderId",
          "in" : "path",
          "description" : "unique internal instant order id of the customer",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ]
      }
    },
    "/partners/{partnerCode}/customers/{custId}/instantorders/list" : {
      "post" : {
        "tags" : [ "Customer", "Instant Order" ],
        "summary" : "Get instant bullion orders for a customer.",
        "operationId" : "getInstantBullionOrders",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to get list of customer instant orders due to internal error"
          },
          "200" : {
            "description" : "List of instant orders returned for Customer successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InstantOrderResponse"
                  }
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer's order details are requested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer whose order details are being requested",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderType",
          "in" : "query",
          "description" : "Optional filter to get orders for a given order type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "buy", "sell" ]
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Optional filter to get orders for a given order status",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "new", "inprogress", "complete", "cancelled" ]
          }
        }, {
          "name" : "bullionName",
          "in" : "query",
          "description" : "Optional filter to get orders for a given bullion by providing unique bullion name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "bullionId",
          "in" : "query",
          "description" : "Optional filter to get orders for a given bullion and purity by providing unique bullion identifier",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Optional filter to get orders where order date is on or after startDate",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Optional filter to get orders where order date is on or before endDate",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "result set limit, if not provided default 25 is used",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "offset for result set, if not provided default 0 is used i.e. results are returned from begining.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "sort column and sort order, + is ascending, - is descending. Default sort order is -orderDate",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "-orderDate", "+orderDate", "-customerName", "+customerName", "-amount", "+amount", "-weight", "+weight" ]
          }
        } ]
      }
    },
    "/partners/{partnerCode}/customers/{custId}/instantorders/cancel" : {
      "post" : {
        "tags" : [ "Customer", "Instant Order" ],
        "summary" : "Cancel an instant order using unique Order ID.  Cancellation may be rejected as per the buisiness rules specific to the order type.",
        "operationId" : "cancelInstantCustomerOrder",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Customer not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to cancel instant order due to internal error"
          },
          "200" : {
            "description" : "Order Cancelled"
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the Partner whose customer is cancelling the order",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer whose customer is cancelling the order",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderCancellationRequest"
              }
            }
          }
        }
      }
    },
    "/partners/{partnerCode}/customers/{custId}/loans" : {
      "post" : {
        "tags" : [ "Loan", "Customer" ],
        "summary" : "Adds a loan request for a customer",
        "operationId" : "addLoanRequest",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to add customer loan due to internal error"
          },
          "200" : {
            "description" : "Loan request added for customer successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoanResponse"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the MFI Partner reuqesting for the customer data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer whose loan request is being added",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoanRequest"
              }
            }
          }
        }
      }
    },
    "/partners/{partnerCode}/customers/{custId}/loans/{loanId}" : {
      "get" : {
        "tags" : [ "Loan", "Customer" ],
        "summary" : "Returns the details of a loan request for a customer",
        "operationId" : "getLoanRequestDetails",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Loan Request not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to retrieve customer loan request due to internal error"
          },
          "200" : {
            "description" : "Loan request details returned for customer successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoanResponse"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the MFI Partner reuqesting for the customer data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer whose loan request is being queried",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "loanId",
          "in" : "path",
          "description" : "unique id of the loan request of a customer.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ]
      },
      "post" : {
        "tags" : [ "Loan", "Customer" ],
        "summary" : "Updates the status of loan request for a customer",
        "operationId" : "updateloanRequestStatus",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner/Loan Request not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to retrieve customer loan request due to internal error"
          },
          "200" : {
            "description" : "Loan request status updated successfully"
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the MFI Partner reuqesting for the customer data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "custId",
          "in" : "path",
          "description" : "unique external id of the customer whose loan request is being updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "loanId",
          "in" : "path",
          "description" : "unique id of the loan request of a customer.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Updated status of the loan request",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "confirmed", "cancelled" ]
          }
        }, {
          "name" : "statusUpdateReason",
          "in" : "query",
          "description" : "Reason for updating the status",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ]
      }
    },
    "/partners/{partnerCode}/findcustomer" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "Finds a unique customer matching the customer criteria provided in the request. System looks through all the customers across partners, and returns a uniquely matching record.",
        "operationId" : "findCustomer",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Invalid data provided"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unauthorized access"
          },
          "404" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Partner not found"
          },
          "500" : {
            "$ref" : "#/components/responses/ErrorResponse",
            "description" : "Unable to find a customer due to internal error"
          },
          "200" : {
            "description" : "Matched customer data returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerSearchResponse"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "partnerCode",
          "in" : "path",
          "description" : "unique code of the MFI Partner reuqesting for the customer data.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerSearchRequest"
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "responses" : {
      "ErrorResponse" : {
        "description" : "Error occured while processing the request",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas" : {
      "DownloadResponse" : {
        "description" : "Returns a temporary download URL that can be used to fetch a file uploade earlier.",
        "additionalProperties" : false,
        "properties" : {
          "redirect_url" : {
            "type" : "string",
            "description" : "A fully qualified short lived HTTPS url from which you can download the file."
          },
          "status" : {
            "type" : "string",
            "description" : "OK represents success",
            "enum" : [ "OK", "KO" ]
          }
        }
      },
      "UploadDocResponse" : {
        "description" : "Returns pre approved upload endpoint (URL) and the fixed file fetch endpoint  (URL) for the request.  Each authorization is valid only for a fixed time.  You are expected to use the upload endpoint to complete the upload request.  The expiry timign is also returned through this response.\n* You must also save the file fetch URL in your system if you are planning to read this uploaded file in the future.",
        "additionalProperties" : false,
        "properties" : {
          "ContentType" : {
            "type" : "string",
            "description" : "The deduced Content-Type for the file upload in a standard MIME format (eg. image/jpeg ).  You are expected to use the same string as Content-Type header while uploading the file."
          },
          "valid_for_seconds" : {
            "type" : "integer",
            "description" : "The validity in seconds for the authorized upload endpoint to receive PUT request with file binary data."
          },
          "uploadId" : {
            "type" : "string",
            "description" : "unique id of the upload transaction.  May be used in the future for fetching uploaded file back."
          },
          "uploadurl" : {
            "type" : "string",
            "description" : "A fully qualified HTTPS url that can be used in a PUT request to upload a file."
          },
          "fetchurl" : {
            "type" : "string",
            "description" : "A relative url to read the uploaded file AFTER succesfully uploading the file using 'uploadurl'.  This data should be saved in your system if you plan to fetch this uploaded file back.  The returnd URL will be of one of the followign formats - /customer/uploaded/12345 - /branches/uploaded/12345 - /agents/uploaded/12345 To fetch the file back upload URL need to be prefcixed with partner identification. For example */partners/AB04*/customer/uploaded/12345 is a commplete fetch URL."
          }
        }
      },
      "UploadDocRequest" : {
        "description" : "Parameters for authorizing an upload of a document/file/image to secure storage.",
        "additionalProperties" : false,
        "required" : [ "type", "filename" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Identifies the upload document type.",
            "enum" : [ "CUSTOMER_DOC", "BRANCH_DOC", "AGENT_DOC" ]
          },
          "filename" : {
            "type" : "string",
            "description" : "The name of the file you want to upload.  The extension of the filename will be used to guess Content-Type."
          }
        }
      },
      "PatchRequest" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PatchDocument"
        }
      },
      "PatchDocument" : {
        "description" : "A JSONPatch document as defined by RFC 6902",
        "additionalProperties" : false,
        "required" : [ "op", "path" ],
        "properties" : {
          "op" : {
            "type" : "string",
            "description" : "The operation to be performed",
            "enum" : [ "add", "remove", "replace", "move" ]
          },
          "path" : {
            "type" : "string",
            "description" : "A JSON-Pointer"
          },
          "value" : {
            "type" : "object",
            "description" : "The value to be used within the operations."
          },
          "from" : {
            "type" : "string",
            "description" : "A string containing a JSON Pointer value."
          }
        }
      },
      "Customer" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "id", "extCustomerId", "name", "dob", "phone", "address", "idProof", "gender", "fatherName", "centerName", "maritalStatus", "localLanguage", "branchId" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "extCustomerId" : {
            "type" : "string"
          },
          "branchId" : {
            "type" : "string",
            "description" : "external id of partner branch"
          },
          "agentId" : {
            "type" : "string",
            "description" : "external id of partner agent"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "dob" : {
            "type" : "string",
            "format" : "date"
          },
          "gender" : {
            "type" : "string",
            "description" : "customer gender, supported values are Male(m), Female(f) and Others(o)",
            "enum" : [ "m", "f", "o" ]
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "email" : {
            "type" : "string",
            "format" : "email"
          },
          "phone" : {
            "$ref" : "#/components/schemas/Phone"
          },
          "photo" : {
            "$ref" : "#/components/schemas/Image"
          },
          "fatherName" : {
            "$ref" : "#/components/schemas/Name"
          },
          "maritalStatus" : {
            "type" : "string",
            "description" : "marital status of the customer",
            "enum" : [ "single", "married", "widowed", "divorced", "separated" ]
          },
          "spouseName" : {
            "description" : "mandatory when marital status is married",
            "$ref" : "#/components/schemas/Name"
          },
          "idProof" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IdProof"
            }
          },
          "kycReference" : {
            "type" : "string",
            "description" : "unique KYC reference number or unique extid of customer if kyc ref is not provided"
          },
          "gstNumber" : {
            "type" : "string",
            "description" : "gst number of the customer"
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccount"
          },
          "centerName" : {
            "type" : "string"
          },
          "localLanguage" : {
            "type" : "string",
            "description" : "two letter language code as per ISO 639-1 (https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)"
          },
          "localName" : {
            "type" : "string",
            "description" : "name in local language script"
          },
          "nominee" : {
            "$ref" : "#/components/schemas/PersonalContact"
          },
          "familyMembers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PersonalContact"
            }
          },
          "giftContacts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PersonalContact"
            }
          }
        }
      },
      "Branch" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "extBranchId", "name", "branchType", "communicationAddress", "gstNumber", "phone", "bankAccount", "branchManager" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "internal branch id"
          },
          "extBranchId" : {
            "type" : "string",
            "description" : "external branch id"
          },
          "branchType" : {
            "type" : "string",
            "enum" : [ "district", "zonal", "state", "regional" ],
            "description" : "branch categorization"
          },
          "name" : {
            "type" : "string",
            "description" : "name of the branch"
          },
          "communicationAddress" : {
            "$ref" : "#/components/schemas/BusinessAddress"
          },
          "quarterlyVaultChargesInINR" : {
            "type" : "number",
            "format" : "float",
            "description" : "quarterly vault charges for the branch"
          },
          "gstNumber" : {
            "type" : "string",
            "description" : "gst number of the branch in case the branch is outside of partner registsred office state"
          },
          "phone" : {
            "type" : "string",
            "description" : "branch offic phone number, 10 digit integer, not starting with zero"
          },
          "branchManager" : {
            "$ref" : "#/components/schemas/LightBusinessContact"
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccount"
          }
        }
      },
      "AgentNameId" : {
        "type" : "object",
        "required" : [ "extAgentId", "name" ],
        "properties" : {
          "extAgentId" : {
            "type" : "string",
            "description" : "external agent id"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          }
        }
      },
      "Agent" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "id", "extAgentId", "extBranchId", "name", "phone", "email" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true,
            "description" : "internal agent id"
          },
          "extAgentId" : {
            "type" : "string",
            "description" : "external agent id"
          },
          "extBranchId" : {
            "type" : "string",
            "description" : "external branch id"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "dob" : {
            "type" : "string",
            "format" : "date"
          },
          "gender" : {
            "type" : "string",
            "description" : "agent gender, supported values are Male(m), Female(f) and Others(o)",
            "enum" : [ "m", "f", "o" ]
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "email" : {
            "type" : "string",
            "format" : "email"
          },
          "phone" : {
            "$ref" : "#/components/schemas/Phone"
          },
          "maritalStatus" : {
            "type" : "string",
            "description" : "marital status of the agent",
            "enum" : [ "single", "married", "widowed", "divorced", "separated" ]
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccount"
          },
          "spouseDetails" : {
            "$ref" : "#/components/schemas/LightPersonalContact"
          },
          "type" : {
            "type" : "string",
            "description" : "experienced, high performer, average",
            "enum" : [ "average", "highperformer", "experienced" ]
          }
        }
      },
      "IdProof" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "id", "documentId" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "documentId" : {
            "type" : "string"
          },
          "documentImage" : {
            "$ref" : "#/components/schemas/Image"
          },
          "documentType" : {
            "type" : "string",
            "description" : "Passport, Driving License, Pan, Voter ID Card, NREGA Card",
            "enum" : [ "passport", "drivingLicense", "pan", "voterCard", "nregaCard" ]
          },
          "issueDate" : {
            "type" : "string",
            "format" : "date"
          },
          "validUntil" : {
            "type" : "string",
            "format" : "date"
          }
        }
      },
      "BankAccount" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "id", "accountNumber", "ifsc", "accountName", "bankName", "branchName" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "accountNumber" : {
            "type" : "string"
          },
          "ifsc" : {
            "type" : "string"
          },
          "accountName" : {
            "type" : "string"
          },
          "bankName" : {
            "type" : "string"
          },
          "branchName" : {
            "type" : "string"
          }
        }
      },
      "Contact" : {
        "type" : "object",
        "required" : [ "id", "name" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "extId" : {
            "type" : "string"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "dob" : {
            "type" : "string",
            "format" : "date"
          },
          "gender" : {
            "type" : "string",
            "description" : "contact gender, supported values are Male(m), Female(f) and Others(o)",
            "enum" : [ "m", "f", "o" ]
          }
        }
      },
      "PersonalContact" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Contact"
        }, {
          "type" : "object",
          "required" : [ "relation", "phone" ],
          "properties" : {
            "relation" : {
              "type" : "string",
              "description" : "relation with the person with whom this contact is associated - spouse, parent, child, sibling etc"
            },
            "email" : {
              "type" : "string",
              "format" : "email"
            },
            "phone" : {
              "$ref" : "#/components/schemas/Phone"
            },
            "address" : {
              "$ref" : "#/components/schemas/Address"
            }
          }
        } ]
      },
      "LightPersonalContact" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Contact"
        }, {
          "type" : "object",
          "properties" : {
            "relation" : {
              "type" : "string",
              "description" : "relation with the person with whom this contact is associated - spouse, parent, child, sibling etc"
            },
            "email" : {
              "type" : "string",
              "format" : "email"
            },
            "phone" : {
              "$ref" : "#/components/schemas/Phone"
            },
            "address" : {
              "$ref" : "#/components/schemas/Address"
            }
          }
        } ]
      },
      "BusinessContact" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Contact"
        }, {
          "type" : "object",
          "required" : [ "role", "type", "isPrimary", "email", "phone" ],
          "properties" : {
            "role" : {
              "type" : "string",
              "description" : "role in the business organization"
            },
            "type" : {
              "type" : "string",
              "description" : "decision maker, influencer, accounts, ops"
            },
            "escalationLevel" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "escalation level, starting from 1"
            },
            "isPrimary" : {
              "type" : "boolean",
              "default" : false,
              "description" : "if the contact is a primary contact"
            },
            "email" : {
              "type" : "string",
              "format" : "email"
            },
            "phone" : {
              "$ref" : "#/components/schemas/BusinessPhone"
            },
            "address" : {
              "$ref" : "#/components/schemas/BusinessAddress"
            }
          }
        } ]
      },
      "LightBusinessContact" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Contact"
        }, {
          "type" : "object",
          "required" : [ "email", "phone" ],
          "properties" : {
            "email" : {
              "type" : "string",
              "format" : "email"
            },
            "phone" : {
              "$ref" : "#/components/schemas/BusinessPhone"
            },
            "address" : {
              "$ref" : "#/components/schemas/BusinessAddress"
            }
          }
        } ]
      },
      "Name" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "first", "last" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "first" : {
            "type" : "string"
          },
          "middle" : {
            "type" : "string"
          },
          "last" : {
            "type" : "string"
          }
        }
      },
      "BusinessPhone" : {
        "type" : "object",
        "required" : [ "id", "mobile", "landline" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "mobile" : {
            "type" : "string"
          },
          "alternateMobile" : {
            "type" : "string"
          },
          "landline" : {
            "type" : "string"
          },
          "whatsapp" : {
            "type" : "string"
          },
          "boardNumber" : {
            "type" : "string"
          },
          "extension" : {
            "type" : "string"
          }
        }
      },
      "Phone" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "id", "mobile" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "mobile" : {
            "type" : "string"
          },
          "alternateMobile" : {
            "type" : "string"
          },
          "landline" : {
            "type" : "string"
          },
          "whatsapp" : {
            "type" : "string"
          }
        }
      },
      "BusinessAddress" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "id", "unitNumber", "streetName", "district", "pinCode", "state", "country", "stdCode" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "unitNumber" : {
            "type" : "string"
          },
          "streetName" : {
            "type" : "string"
          },
          "area" : {
            "type" : "string"
          },
          "cityOrVillage" : {
            "type" : "string"
          },
          "postOffice" : {
            "type" : "string"
          },
          "nearByPoliceStation" : {
            "type" : "string"
          },
          "district" : {
            "type" : "string"
          },
          "pinCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "state" : {
            "type" : "string",
            "description" : "Codes as per ISO 3166 for India - https://www.iso.org/obp/ui/#iso:code:3166:IN",
            "enum" : [ "IN-AN", "IN-AP", "IN-AR", "IN-AS", "IN-BR", "IN-CH", "IN-CT", "IN-DN", "IN-DD", "IN-DL", "IN-GA", "IN-GJ", "IN-HR", "IN-HP", "IN-JK", "IN-JH", "IN-KA", "IN-KL", "IN-LD", "IN-MP", "IN-MH", "IN-MN", "IN-ML", "IN-MZ", "IN-NL", "IN-OR", "IN-PY", "IN-PB", "IN-RJ", "IN-SK", "IN-TN", "IN-TG", "IN-TR", "IN-UP", "IN-UT", "IN-WB" ]
          },
          "stdCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "landmark" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          }
        }
      },
      "Address" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "id", "houseNumber", "streetName", "district", "pinCode", "state", "country", "stdCode" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "houseNumber" : {
            "type" : "string"
          },
          "streetName" : {
            "type" : "string"
          },
          "area" : {
            "type" : "string"
          },
          "cityOrVillage" : {
            "type" : "string"
          },
          "postOffice" : {
            "type" : "string"
          },
          "district" : {
            "type" : "string"
          },
          "pinCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "state" : {
            "type" : "string",
            "description" : "Codes as per ISO 3166 for India - https://www.iso.org/obp/ui/#iso:code:3166:IN",
            "enum" : [ "IN-AN", "IN-AP", "IN-AR", "IN-AS", "IN-BR", "IN-CH", "IN-CT", "IN-DN", "IN-DD", "IN-DL", "IN-GA", "IN-GJ", "IN-HR", "IN-HP", "IN-JK", "IN-JH", "IN-KA", "IN-KL", "IN-LD", "IN-MP", "IN-MH", "IN-MN", "IN-ML", "IN-MZ", "IN-NL", "IN-OR", "IN-PY", "IN-PB", "IN-RJ", "IN-SK", "IN-TN", "IN-TG", "IN-TR", "IN-UP", "IN-UT", "IN-WB" ]
          },
          "stdCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "landmark" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          }
        }
      },
      "Purity" : {
        "type" : "object",
        "required" : [ "displayValue", "value" ],
        "properties" : {
          "displayValue" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "Bullion" : {
        "type" : "object",
        "required" : [ "id", "bullionName", "purity" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "bullionName" : {
            "type" : "string",
            "enum" : [ "Gold", "Silver", "Platinum" ]
          },
          "bullionShortName" : {
            "type" : "string"
          },
          "purity" : {
            "$ref" : "#/components/schemas/Purity"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "available", "unAvailable" ]
          }
        }
      },
      "OrderCancellationRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "cancellationreason" : {
            "type" : "string"
          }
        },
        "required" : [ "id", "cancelreason" ]
      },
      "BaseOrder" : {
        "type" : "object",
        "required" : [ "bullionRateId", "agent" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "ordernumber" : {
            "type" : "string",
            "readOnly" : true,
            "description" : "A unique human readable number to identify an order in communications. Not usable as parameter in any GET requests."
          },
          "customerId" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "agent" : {
            "$ref" : "#/components/schemas/AgentNameId"
          },
          "bullion" : {
            "$ref" : "#/components/schemas/Bullion"
          },
          "bullionRateId" : {
            "type" : "string"
          },
          "weightInGm" : {
            "type" : "number",
            "format" : "float"
          },
          "rateInrPerGm" : {
            "type" : "number",
            "format" : "float"
          },
          "taxRates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxRate"
            }
          },
          "orderTotalValueInr" : {
            "type" : "number",
            "format" : "float"
          },
          "requestDate" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true,
            "description" : "order initiated Date"
          },
          "completionDate" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true,
            "description" : "order completion Date"
          },
          "status" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "new", "inprogress", "complete", "cancelled" ]
          }
        }
      },
      "BuyOrder" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseOrder"
        }, {
          "type" : "object",
          "required" : [ "buyType" ],
          "properties" : {
            "buyType" : {
              "type" : "string",
              "enum" : [ "FixedWeight", "FixedAmount" ]
            },
            "isExternalSIP" : {
              "type" : "boolean",
              "description" : "Indicates if the buy order is a part of an external sip managed by the partner."
            }
          }
        } ]
      },
      "SellOrder" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseOrder"
        }, {
          "type" : "object",
          "required" : [ "sellType", "payoutMode" ],
          "properties" : {
            "sellType" : {
              "type" : "string",
              "enum" : [ "Regular", "Emergency" ]
            },
            "payoutMode" : {
              "type" : "string",
              "enum" : [ "Bank", "Cash" ]
            }
          }
        } ]
      },
      "BullionPassbook" : {
        "type" : "object",
        "required" : [ "lastOrder", "bullionHoldings" ],
        "properties" : {
          "lastOrder" : {
            "anyOf" : [ {
              "$ref" : "#/components/schemas/BuyOrder"
            }, {
              "$ref" : "#/components/schemas/SellOrder"
            } ]
          },
          "bullionHoldings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BullionHolding"
            }
          }
        }
      },
      "BullionHolding" : {
        "type" : "object",
        "required" : [ "bullion", "balanceInGms", "lastOrder", "orderList" ],
        "properties" : {
          "bullion" : {
            "$ref" : "#/components/schemas/Bullion"
          },
          "balanceInGms" : {
            "type" : "number",
            "format" : "float"
          },
          "lastOrder" : {
            "anyOf" : [ {
              "$ref" : "#/components/schemas/BuyOrder"
            }, {
              "$ref" : "#/components/schemas/SellOrder"
            } ]
          },
          "orderList" : {
            "type" : "array",
            "items" : {
              "anyOf" : [ {
                "$ref" : "#/components/schemas/BuyOrder"
              }, {
                "$ref" : "#/components/schemas/SellOrder"
              } ]
            }
          }
        }
      },
      "Image" : {
        "type" : "object",
        "required" : [ "id", "uri" ],
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "uri" : {
            "type" : "string"
          }
        }
      },
      "TaxRate" : {
        "type" : "object",
        "required" : [ "taxName", "taxCode", "taxRatePercent" ],
        "properties" : {
          "taxName" : {
            "type" : "string",
            "example" : "gst, cess etc"
          },
          "taxCode" : {
            "type" : "string",
            "example" : "igst, sgst, cgst, utst etc"
          },
          "taxRatePercent" : {
            "type" : "number",
            "format" : "float"
          },
          "taxAmount" : {
            "readOnly" : true,
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "EventUpdates" : {
        "type" : "object",
        "required" : [ "eventTimestamp", "eventDetails" ],
        "properties" : {
          "eventTimestamp" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventDetails" : {
            "type" : "string"
          }
        }
      },
      "Error" : {
        "type" : "object",
        "required" : [ "code", "message" ],
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "InstantBuyOrderRequest" : {
        "additionalProperties" : false,
        "type" : "object",
        "required" : [ "bullion", "orderTotalValueInr" ],
        "properties" : {
          "agent" : {
            "$ref" : "#/components/schemas/AgentNameId"
          },
          "bullion" : {
            "$ref" : "#/components/schemas/Bullion"
          },
          "orderTotalValueInr" : {
            "type" : "number",
            "format" : "float"
          },
          "isExternalSIP" : {
            "type" : "boolean",
            "description" : "Indicates if the buy order is a part of an external sip managed by the partner."
          }
        }
      },
      "InstantSellOrderRequest" : {
        "type" : "object",
        "required" : [ "bullion", "sellType", "payoutMode" ],
        "properties" : {
          "agent" : {
            "$ref" : "#/components/schemas/AgentNameId"
          },
          "bullion" : {
            "$ref" : "#/components/schemas/Bullion"
          },
          "sellType" : {
            "type" : "string",
            "enum" : [ "FixedWeight", "FixedAmount" ],
            "description" : "Mandatory and indicates if the bullion to be sold is by fixed weight or for fixed value."
          },
          "weightInGm" : {
            "type" : "number",
            "format" : "float",
            "description" : "Mandatory when the sellType is FixedWeight"
          },
          "orderTotalValueInr" : {
            "type" : "number",
            "format" : "float",
            "description" : "Mandatory when the sellType is FixedAmount"
          },
          "payoutMode" : {
            "type" : "string",
            "enum" : [ "Bank", "Cash" ]
          }
        }
      },
      "InstantOrderResponse" : {
        "type" : "object",
        "required" : [ "id", "ordernumber" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "ordernumber" : {
            "type" : "string",
            "description" : "A unique human readable number to identify an instant order in communications. Not usable as parameter in any GET requests."
          },
          "orderType" : {
            "type" : "string",
            "enum" : [ "buy", "sell" ]
          },
          "sellType" : {
            "type" : "string",
            "enum" : [ "FixedWeight", "FixedAmount" ],
            "description" : "Available for sell orders only"
          },
          "customerId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "agent" : {
            "$ref" : "#/components/schemas/AgentNameId"
          },
          "bullion" : {
            "$ref" : "#/components/schemas/Bullion"
          },
          "weightInGm" : {
            "type" : "number",
            "format" : "float",
            "description" : "For sell orders available when the sellType if FixedWeight, or after the order is executed. For buy orders available when the order is executed"
          },
          "rateInrPerGm" : {
            "type" : "number",
            "format" : "float",
            "description" : "Available when the order is executed"
          },
          "taxRates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxRate"
            },
            "description" : "Available when the order is executed"
          },
          "orderTotalValueInr" : {
            "type" : "number",
            "format" : "float",
            "description" : "For buy orders always available, for sell orders available when the order is executed or when the sellType is FixedAmount"
          },
          "requestDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "order initiated Date"
          },
          "completionDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Order completion Date, available when the order is executed"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "new", "complete", "cancelled" ]
          },
          "payoutMode" : {
            "type" : "string",
            "enum" : [ "Bank", "Cash" ],
            "description" : "Available for sell orders"
          },
          "isExternalSIP" : {
            "type" : "boolean",
            "description" : "Optional attribute for buy orders."
          }
        }
      },
      "CustomerSearchRequest" : {
        "type" : "object",
        "required" : [ "name", "dob", "gender", "idProof" ],
        "properties" : {
          "name" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "Name of the customer"
          },
          "dob" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of birth of the customer"
          },
          "gender" : {
            "type" : "string",
            "enum" : [ "m", "f", "o" ],
            "description" : "customer gender, supported values are Male(m), Female(f) and Others(o)"
          },
          "idProof" : {
            "$ref" : "#/components/schemas/IdProof"
          }
        }
      },
      "CustomerSearchResponse" : {
        "type" : "object",
        "required" : [ "id", "name", "dob", "gender", "idProof" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Unique ID of the customer"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "Name of the customer"
          },
          "dob" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of birth of the customer"
          },
          "gender" : {
            "type" : "string",
            "enum" : [ "m", "f", "o" ],
            "description" : "customer gender, supported values are Male(m), Female(f) and Others(o)"
          },
          "idProof" : {
            "$ref" : "#/components/schemas/IdProof"
          }
        }
      },
      "LoanRequest" : {
        "type" : "object",
        "required" : [ "customerId", "bullion", "lienType", "customerConsentDoc" ],
        "properties" : {
          "customerId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Unique ID of the customer"
          },
          "bullion" : {
            "$ref" : "#/components/schemas/Bullion"
          },
          "lienType" : {
            "type" : "string",
            "enum" : [ "FixedWeight", "FixedAmount" ],
            "description" : "Mandatory and indicates if the lien is on a fixed bullion weight or fixed amount"
          },
          "lienWeightInGm" : {
            "type" : "number",
            "format" : "float",
            "description" : "Mandatory when the lienType is FixedWeight"
          },
          "lienAmountInr" : {
            "type" : "number",
            "format" : "float",
            "description" : "Mandatory when the lienType is FixedAmount"
          },
          "customerConsentDoc" : {
            "$ref" : "#/components/schemas/UploadedDocument"
          }
        }
      },
      "LoanResponse" : {
        "type" : "object",
        "required" : [ "loanId", "customerId", "bullion", "lienType" ],
        "properties" : {
          "loanId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Unique ID of the customer"
          },
          "customerId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Unique ID of the customer"
          },
          "bullion" : {
            "$ref" : "#/components/schemas/Bullion"
          },
          "lienType" : {
            "type" : "string",
            "enum" : [ "FixedWeight", "FixedAmount" ],
            "description" : "Mandatory and indicates if the lien is on a fixed bullion weight or fixed amount"
          },
          "lienWeightInGm" : {
            "type" : "number",
            "format" : "float",
            "description" : "Mandatory when the lienType is FixedWeight"
          },
          "lienAmountInr" : {
            "type" : "number",
            "format" : "float",
            "description" : "Mandatory when the lienType is FixedAmount"
          },
          "customerConsentDoc" : {
            "$ref" : "#/components/schemas/UploadedDocument"
          },
          "requestDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Loan request date"
          },
          "confirmationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Loan confirmed date, available when the loan is confirmed"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "requested", "confirmed", "cancelled" ]
          }
        }
      },
      "UploadedDocument" : {
        "type" : "object",
        "required" : [ "uploadId", "fetchurl" ],
        "properties" : {
          "uploadId" : {
            "type" : "string",
            "description" : "Unique id of the uploaded document returned by uploaddocument api."
          },
          "fetchurl" : {
            "type" : "string",
            "description" : "A relative url to read the uploaded file after uploa"
          }
        }
      }
    }
  }
}