openapi: 3.0.0

info:
  version: '1.0.0'
  title: 'Artist API'
  description: 'A simple API to illustrate OpenAPI concepts, made by Erin'

servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/erin0823/artist-api/1.0.0
  # - url: https://example.io/v1
    
security:
# Basic authentication
  - BasicAuth: []

paths:
  /artists:
    get:
     description: Returns a list of artists
    # Query Parameters appear at the end of a URL following a question mark
     parameters:
          # click this link to go to definition
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/PageOffset'
        # Made these into reusable query parameters 
        # - name: limit
        #   in: query
        #   description: Limits the number of items on a page
        #   schema:
        #     type: integer
        # - name: offset
        #   in: query
        #   description: Specifies the page number of the artists to be displayed
        #   schema:
        #     type: integer
     responses:
        '200':
          description: Successfully returned a list of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
                  # Made all of these deets into reusable component
                  # type: object
                  # required:
                  #   - username
                  # properties:
                  #   artist_name:
                  #     type: string
                  #   artist_genre:
                  #     type: string
                  #   albums_recorded:
                  #     type: integer
                  #   username:
                  #     type: string
        '400':
          $ref: '#/components/responses/400Error'
          # Made this into reusable 400Error response
          # description: Invalid request
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:   
          #         message:
          #           type: string
    post:
      description: Lets a user post a new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      responses:
        '200':
          description: Successfully created a new artist

        '400':
          $ref: '#/components/responses/400Error' 
                    
  # Return a specific artistâ€™s information based on the username provided. Path parameters (username in this case) have to be mandatorily described in the parameters object under the method.
  /artists/{username}:
    get:
      description: Obtain information about an artist from his or her unique username
      parameters:
        - name: username
          in: path
          # Path parameters have to have a true property set to the required parameter, for the spec to be valid.
          required: true
          schema:
            type: string
          
      responses:
        '200':
          description: Successfully returned an artist
          content:
            application/json:
              schema:
                type: object
                properties:
                  artist_name:
                    type: string
                  artist_genre:
                    type: string
                  albums_recorded:
                    type: integer
                
        '400':
          $ref: '#/components/responses/400Error'

# Define reusable components here and then reference them in individual endpoints
# Refer to components documentation here: https://swagger.io/docs/specification/components/?_ga=2.257628611.939545578.1578957638-983167459.1578618797 
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      
  # Schemas can contain various data models consumed and returned by the API.
  schemas:
    Artist:
      type: object
      required:
        - username
      properties:
        artist_name:
          type: string
        artist_genre:
            type: string
        albums_recorded:
            type: integer
        username:
            type: string

  parameters:
    PageLimit:
      name: limit
      in: query
      description: Limits the number of items on a page
      schema:
        type: integer
      
    PageOffset:
      name: offset
      in: query
      description: Specifies the page number of the artists to be displayed
      schema:
        type: integer

  responses:
    400Error:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object 
            properties:
              message:
                type: string
