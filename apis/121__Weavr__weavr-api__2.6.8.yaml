openapi: "3.0.1"
info:
  title: "Weavr API"
  description: "Weavr API"
  contact:
    name: "Weavr"
    url: "http://weavr.io"
  version: "2.6.8"
servers:
- url: "https://build.weavr.io/app/api"
paths:
  /auth/lost_password/validate:
    post:
      tags:
      - "Auth"
      operationId: "auth_lost_password_validate"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LostPasswordValidateRequest"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LostPasswordContinueConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /auth/lost_password/start:
    post:
      tags:
      - "Auth"
      operationId: "auth_lost_password_start"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LostPasswordStartRequest"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LostPasswordStartConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /auth/lost_password/resume:
    post:
      tags:
      - "Auth"
      operationId: "auth_lost_password_resume"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LostPasswordContinueRequest"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LostPasswordContinueConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /auth/logout:
    post:
      tags:
      - "Auth"
      description: "logs out the session identified by the token in the Authorization\
        \ header"
      operationId: "auth_logout"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      responses:
        204:
          description: "Success - No Content"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /auth/login_with_password:
    post:
      tags:
      - "Auth"
      description: "Given the correct credentials, will return a token to be used\
        \ as Authorization for other secured operations"
      operationId: "auth_login_with_password"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginWithPasswordRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginWithPasswordConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /passwords/identities/{identity_id}/create:
    post:
      tags:
      - "Passwords"
      description: "Create a Password Identity for an Auth Session Identity and link\
        \ it to the Password Profile that its Auth Session Identity Profile extends.\
        \ One Password Identity can only be linked to one Password Profile, but many\
        \ Password Identities can be linked to the same Password Profile. A Password\
        \ Identity is required to be able to create and update passwords for credentials\
        \ it owns. The Password Configuration used for the creation and update of\
        \ passwords for such credentials is read from the Password Profile linked\
        \ to the Password Identity.\n"
      operationId: "passwords_identities_identity_id_create"
      parameters:
      - name: "identity_id"
        in: "path"
        description: "The ID of the Password Identity, which is the same as the ID\
          \ of an Auth Session Identity."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePasswordIdentityRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordIdentity"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePasswordIdentityConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /passwords/{credential_id}/{version}/expire:
    post:
      tags:
      - "Passwords"
      description: "Expire the identified Password Version. Once expired, a Password\
        \ Version is no longer usable. An update operation must be called so that\
        \ a new Password Version is created for the credential which can be used for\
        \ authentication purposes.\n"
      operationId: "passwords_credential_id_version_expire"
      parameters:
      - name: "version"
        in: "path"
        description: "A specific Password Version for the credential identified by\
          \ the credential_id path parameter. If the latest Password Version is not\
          \ known, use the get operation on the /passwords/{credential_id} resource.\n"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int32"
      - name: "credential_id"
        in: "path"
        description: "The credential ID"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordInfo"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /passwords/{credential_id}/update:
    post:
      tags:
      - "Passwords"
      description: "Update the password for the credential identified by the credential_id\
        \ path parameter. The value for the new password must satisfy all the restrictions\
        \ imposed by the Password Profile linked to the Password Identity that this\
        \ credential belongs to.\n"
      operationId: "passwords_credential_id_update"
      parameters:
      - name: "credential_id"
        in: "path"
        description: "The credential ID"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordInfo"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePasswordConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /passwords/{credential_id}/create:
    post:
      tags:
      - "Passwords"
      description: "Create a new password for the credential identified by the credential_id\
        \ path parameter. Passwords are identified by the ID of their credential.\
        \ The value for the new password must satisfy all the restrictions imposed\
        \ by the Password Profile linked to the Password Identity that this credential\
        \ belongs to. Therefore before attempting to create new passwords make sure\
        \ that the Auth Session Identity Profile to which the credential's identity\
        \ belongs is extended by creating a Password Profile for it and the Identity\
        \ owning the credential is linked to this Password Profile by creating a new\
        \ Password Identity for it.\n"
      operationId: "passwords_credential_id_create"
      parameters:
      - name: "credential_id"
        in: "path"
        description: "The credential ID"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePasswordRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordInfo"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /passwords/validate:
    post:
      tags:
      - "Passwords"
      description: "Check and validate a password."
      operationId: "passwords_validate"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidatePasswordRequest"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidatePasswordConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /corporates/{id}/users/mobile/send_verification_code:
    post:
      tags:
      - "Corporates"
      description: "Generates a random code and sends it to the user via text message\
        \ (SMS).  On the Build Environment, this is set to \"1111\"."
      operationId: "corporates_id_users_mobile_send_verification_code"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendMobileRequest0"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendMobileRequestConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /corporates/{id}/users/mobile/verify:
    post:
      tags:
      - "Corporates"
      description: "Verification of the user's mobile number.  The randomly generated\
        \ code sent to the user via text message using /mobile/send_verification_code\
        \ is submitted here to verify the user's mobile number.  This is needed as\
        \ part of the verification process for basic due diligence."
      operationId: "corporates_id_users_mobile_verify"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyMobileRequest1"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /corporates/{id}/users/{user_id}/get:
    post:
      tags:
      - "Corporates"
      description: "Retrieve the corporate identity user identified by the user id\
        \ path parameter"
      operationId: "corporates_id_users_user_id_get"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorporateUser"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /corporates/{id}/users/{user_id}/update:
    post:
      tags:
      - "Corporates"
      description: "Update details for a user - title, name, surname, email, etc"
      operationId: "corporates_id_users_user_id_update"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCorporateUserRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorporateUser"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateCorporateUserConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /corporates/{id}/users/_/create:
    post:
      tags:
      - "Corporates"
      description: "Creates a user linked to the Corporate Identity.  Users have access\
        \ to all cards of the corporate."
      operationId: "corporates_id_users_user_id_create"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCorporateUserRequest"
        required: true
      responses:
        200:
          description: "Success"
          headers:
            create-id:
              $ref: "#/components/headers/create-id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorporateUser"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCorporateUserConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /corporates/{id}/users/email/send_verification_code:
    post:
      tags:
      - "Corporates"
      description: "On calling this method, an email is sent directly to the Consumer\
        \ with a link including  a randomly generated verification code.  On clicking\
        \ the link, the recipient will be  redirected to your website.  This email\
        \ can be customised with your brand - contact us  for assistance.  The verification\
        \ code must then be submitted to /email/verify.  The URL  link in the email\
        \ can be updated in the Configuration section of the Innovator Portal.\n"
      operationId: "corporates_id_users_email_send_verification_code"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendEmailRequest1"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /corporates/{id}/users/email/verify:
    post:
      tags:
      - "Corporates"
      description: "Verification of the user's email address.  The randomly generated\
        \ code sent to the user using /email/send_verification_code is submitted here\
        \ to verify the email address.  This is needed as part of the verification\
        \ process for basic due diligence."
      operationId: "corporates_id_users_email_verify"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailRequest1"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyEmailRequestConflict1"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /corporates/{id}/users/get:
    post:
      tags:
      - "Corporates"
      description: "Fetches all the users of the corporate, including the ROOT user\
        \ and all other users."
      operationId: "corporates_id_users_get"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CorporateUsersFilter"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CorporateUsers"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /corporates/{id}/invites/consume:
    post:
      tags:
      - "Corporates"
      description: "Consume an invite."
      operationId: "corporates_id_invites_consume"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConsumeCorporateUserInviteRequest"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumeCorporateUserInviteConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /corporates/{id}/invites/validate:
    post:
      tags:
      - "Corporates"
      description: "Validate an invite's nonce - useful to avoid having the user fill\
        \ in a form only to be held by a nonce-related validation issue (eg. expired)."
      operationId: "corporates_id_invites_validate"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateCorporateUserInviteRequest"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /corporates/{id}/get:
    post:
      tags:
      - "Corporates"
      description: "Fetch the details of the corporate which matches the id path parameter"
      operationId: "corporates_id_get"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Corporate"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /corporates/{id}/update:
    post:
      tags:
      - "Corporates"
      description: "Update details (name, supportEmail,etc. ) of a corporate"
      operationId: "corporates_id_update"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCorporateRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Corporate"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /corporates/_/create:
    post:
      tags:
      - "Corporates"
      description: "Create a corporate identity for a business customer.  The information\
        \ provided must be accurate as it will be passed on for KYB verification with\
        \ our partner.  Incorrect information may incur a re-processing fee."
      operationId: "corporates_id_create"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCorporateRequest"
        required: true
      responses:
        200:
          description: "Success"
          headers:
            create-id:
              $ref: "#/components/headers/create-id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Corporate"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCorporateConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /consumers/{id}/mobile/send_verification_code:
    post:
      tags:
      - "Consumers"
      description: "Generates a random code and sends it to the user via text message\
        \ (SMS).  On the Build Environment, this is set to \"1111\"."
      operationId: "consumers_id_mobile_send_verification_code"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendMobileRequest1"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendMobileRequestConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /consumers/{id}/mobile/verify:
    post:
      tags:
      - "Consumers"
      description: "To verify the Consumer's mobile number, submit the verification\
        \ code received by Consumer via text message (SMS).  To generate and send\
        \ a new verification code, use /mobile/send_verification_code"
      operationId: "consumers_id_mobile_verify"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyMobileRequest0"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /consumers/{id}/kyc/start:
    post:
      tags:
      - "Consumers"
      description: "Start the KYC full due diligence process.  Returns a token/URL\
        \ used to redirect the user to initiate document collection process."
      operationId: "consumers_id_kyc_start"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitFullKycProcessResponse"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitFullKycError"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /consumers/{id}/email/send_verification_code:
    post:
      tags:
      - "Consumers"
      description: "On calling this method, an email is sent directly to the Consumer\
        \ with a link including  a randomly generated verification code.  On clicking\
        \ the link, the recipient will be  redirected to your website.  This email\
        \ can be customised with your brand - contact us  for assistance.  The verification\
        \ code must then be submitted to /email/verify.  The URL  link in the email\
        \ can be updated in the Configuration section of the Innovator Portal.\n"
      operationId: "consumers_id_email_send_verification_code"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendEmailRequest0"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /consumers/{id}/email/verify:
    post:
      tags:
      - "Consumers"
      description: "To verify the Consumer's email address, submit the verification\
        \ code Consumer received via email.\n"
      operationId: "consumers_id_email_verify"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailRequest0"
        required: true
      responses:
        204:
          description: "Success - No Content"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyEmailRequestConflict0"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /consumers/{id}/get:
    post:
      tags:
      - "Consumers"
      description: "Fetch the details of the consumer linked with the id path parameter.\
        \  The KYC status for the consumer is included in the response to indicate\
        \ what KYC steps are needed."
      operationId: "consumers_id_get"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consumer"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /consumers/{id}/update:
    post:
      tags:
      - "Consumers"
      description: "Update details (email, mobile number, etc...) of the Consumer\
        \ Identity with the given ID."
      operationId: "consumers_id_update"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateConsumerRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consumer"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateConsumerConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /consumers/_/create:
    post:
      tags:
      - "Consumers"
      description: "Create a Consumer Identity to represent a Consumer.  The information\
        \ provided must be accurate as it will be passed on for KYC verification with\
        \ our partner.  Incorrect information may incur a re-processing fee."
      operationId: "consumers_id_create"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateConsumerRequest"
        required: true
      responses:
        200:
          description: "Success"
          headers:
            create-id:
              $ref: "#/components/headers/create-id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consumer"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateConsumerConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /managed_accounts/get:
    post:
      tags:
      - "Managed Accounts"
      description: "Returns all the managed accounts linked to the Authorisation Token,\
        \ and which match the given criteria (if any)"
      operationId: "managed_accounts_get"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ManagedAccountsFilter"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedAccounts"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_accounts/{id}/unfreeze:
    post:
      tags:
      - "Managed Accounts"
      description: "Unfreezes a managed account. The block type is automatically set\
        \ to USER."
      operationId: "managed_accounts_id_unfreeze"
      parameters:
      - name: "id"
        in: "path"
        description: "The managed account instance identified by the given ID."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedAccount"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnfreezeManagedAccountConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_accounts/{id}/statement/get:
    post:
      tags:
      - "Managed Accounts"
      description: "Returns a list of transactions against this managed account, with\
        \ the matching criteria (if any)"
      operationId: "managed_accounts_id_statement_get"
      parameters:
      - name: "id"
        in: "path"
        description: "The managed account instance identified by the given ID."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatementRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statement"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatementConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_accounts/{id}/remove:
    post:
      tags:
      - "Managed Accounts"
      description: "Sets a managed account as inactive. Unlike block, this action\
        \ is not reversible."
      operationId: "managed_accounts_id_remove"
      parameters:
      - name: "id"
        in: "path"
        description: "The managed account instance identified by the given ID."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedAccount"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveManagedAccountConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_accounts/{id}/get:
    post:
      tags:
      - "Managed Accounts"
      description: "Returns all the details of the managed account which matches id"
      operationId: "managed_accounts_id_get"
      parameters:
      - name: "id"
        in: "path"
        description: "The managed account instance identified by the given ID."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedAccount"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_accounts/{id}/update:
    post:
      tags:
      - "Managed Accounts"
      description: "Update the friendly name for the managed account"
      operationId: "managed_accounts_id_update"
      parameters:
      - name: "id"
        in: "path"
        description: "The managed account instance identified by the given ID."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateManagedAccountRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedAccount"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateManagedAccountConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_accounts/{id}/destroy:
    post:
      tags:
      - "Managed Accounts"
      description: "Please use remove api."
      operationId: "managed_accounts_id_destroy"
      parameters:
      - name: "id"
        in: "path"
        description: "The managed account instance identified by the given ID."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyManagedAccountRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedAccount"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestroyManagedAccountConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      deprecated: true
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_accounts/_/create:
    post:
      tags:
      - "Managed Accounts"
      description: "Creates a managed account for a Corporate or Consumer Identity,\
        \ which is linked to a Managed Account Profile.  Profiles determine restrictions\
        \ for linked entities. Returns full details of the created managed account."
      operationId: "managed_accounts_id_create"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateManagedAccountRequest"
        required: true
      responses:
        200:
          description: "Success"
          headers:
            create-id:
              $ref: "#/components/headers/create-id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedAccount"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateManagedAccountConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_accounts/{id}/freeze:
    post:
      tags:
      - "Managed Accounts"
      description: "Freezes a managed account. The block type is automatically set\
        \ to USER."
      operationId: "managed_accounts_id_freeze"
      parameters:
      - name: "id"
        in: "path"
        description: "The managed account instance identified by the given ID."
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedAccount"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FreezeManagedAccountConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_cards/get:
    post:
      tags:
      - "Managed Cards"
      description: "Returns all the cards linked to the Authorisation Token."
      operationId: "managed_cards_get"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ManagedCardsFilter"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedCards"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_cards/{id}/unfreeze:
    post:
      tags:
      - "Managed Cards"
      description: "Unfreezes a managed card. The block type is automatically set\
        \ to USER."
      operationId: "managed_cards_id_unfreeze"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedCard"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnfreezeManagedCardConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_cards/{id}/statement/get:
    post:
      tags:
      - "Managed Cards"
      description: "Returns a list of transactions against this managed card, with\
        \ the matching criteria (if any)"
      operationId: "managed_cards_id_statement_get"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatementRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statement"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatementConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_cards/{id}/remove:
    post:
      tags:
      - "Managed Cards"
      description: "Sets a managed card as inactive. Unlike block, this action is\
        \ not reversible."
      operationId: "managed_cards_id_remove"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedCard"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveManagedCardConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_cards/{id}/get:
    post:
      tags:
      - "Managed Cards"
      description: "Returns all the card details of the card - balances, brand, card\
        \ number, cvv, expiry date, status, etc…"
      operationId: "managed_cards_id_get"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedCard"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_cards/{id}/update:
    post:
      tags:
      - "Managed Cards"
      description: "Update the friendly name for the managed card"
      operationId: "managed_cards_id_update"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateManagedCardRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedCard"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateManagedCardConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_cards/{id}/destroy:
    post:
      tags:
      - "Managed Cards"
      description: "Please use remove api."
      operationId: "managed_cards_id_destroy"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestroyManagedCardRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedCard"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestroyManagedCardConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      deprecated: true
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_cards/_/create:
    post:
      tags:
      - "Managed Cards"
      description: "Creates a managed card (virtual card) for the consumer or corporate\
        \ identity which is linked to a Managed Cards Profile.  Profiles determine\
        \ restrictions for linked entities. Returns full details of the created managed\
        \ card."
      operationId: "managed_cards_id_create"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateManagedCardRequest"
        required: true
      responses:
        200:
          description: "Success"
          headers:
            create-id:
              $ref: "#/components/headers/create-id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedCard"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateManagedCardConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /managed_cards/{id}/freeze:
    post:
      tags:
      - "Managed Cards"
      description: "Freezes a managed card. The block type is automatically set to\
        \ USER."
      operationId: "managed_cards_id_freeze"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagedCard"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FreezeManagedCardConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /transfers/get:
    post:
      tags:
      - "Transfers"
      description: "Retrieves all the transfer transactions linked to the Authorisation\
        \ Token."
      operationId: "transfers_get"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransfersFilter"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transfers"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /transfers/{id}/get:
    post:
      tags:
      - "Transfers"
      description: "Retrieve the transfer transaction identified by the given ID."
      operationId: "transfers_id_get"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transfer"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /transfers/_/execute:
    post:
      tags:
      - "Transfers"
      description: "Transfers funds between instruments (i.e. managed accounts and\
        \ managed cards) of the same Identity (Consumer or Corporate).  A transfer\
        \ is linked to a Transfer Profile which determines the restrictions on the\
        \ transfer.  Returns full details of the created transaction."
      operationId: "transfers_id_execute"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransferRequest"
        required: true
      responses:
        200:
          description: "Success"
          headers:
            create-id:
              $ref: "#/components/headers/create-id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transfer"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTransferConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /send/get:
    post:
      tags:
      - "Send"
      description: "Retrieves all the send transactions linked to the Authorisation\
        \ Token."
      operationId: "send_get"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendsFilter"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sends"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /send/{id}/get:
    post:
      tags:
      - "Send"
      description: "Retrieve the send transaction identified by the given ID."
      operationId: "send_id_get"
      parameters:
      - name: "id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Send"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /send/_/execute:
    post:
      tags:
      - "Send"
      description: "Sends funds between instruments (i.e. managed accounts and managed\
        \ cards) of different Identities (Consumer or Corporate).  A send is linked\
        \ to a Send Profile (configured in the Innovator Portal) which determines\
        \ the restrictions on the send.  Returns full details of the created transaction."
      operationId: "send_id_execute"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSendRequest"
        required: true
      responses:
        200:
          description: "Success"
          headers:
            create-id:
              $ref: "#/components/headers/create-id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Send"
        409:
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSendConflict"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
components:
  schemas:
    LostPasswordValidateRequest:
      required:
      - "email"
      - "nonce"
      type: "object"
      properties:
        email:
          type: "string"
          x-fieldValidation: "required"
        nonce:
          type: "string"
          x-fieldValidation: "required"
    LostPasswordContinueConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/LostPasswordContinueConflictErrorCode"
    LostPasswordContinueConflictErrorCode:
      type: "string"
      enum:
      - "PASSWORD_ALREADY_USED"
      - "PASSWORD_TOO_SHORT"
      - "PASSWORD_TOO_LONG"
      - "PASSWORD_TOO_SIMPLE"
      - "PASSWORD_INCORRECT"
    ClientInvalidRequest:
      type: "object"
      properties:
        message:
          maxLength: 255
          type: "string"
          description: "When present helps to identify and fix the problem."
          x-fieldValidation: "size(_,255)"
        validation:
          allOf:
          - $ref: "#/components/schemas/MessageValidation"
          - description: "Description of fields which were invalid."
    MessageValidation:
      type: "object"
      properties:
        invalid:
          type: "boolean"
        fields:
          type: "array"
          items:
            $ref: "#/components/schemas/FieldValidationErrors"
    FieldValidationErrors:
      type: "object"
      properties:
        name:
          type: "string"
        errors:
          type: "array"
          items:
            $ref: "#/components/schemas/FieldValidation"
    FieldValidation:
      type: "object"
      properties:
        type:
          $ref: "#/components/schemas/FieldValidationType"
        params:
          type: "array"
          items:
            type: "string"
    FieldValidationType:
      type: "string"
      enum:
      - "REQUIRED"
      - "HAS_TEXT"
      - "REQUIRES"
      - "SIZE"
      - "RANGE"
      - "IN"
      - "NOT_IN"
      - "REGEX"
      - "EXACTLY"
      - "AT_LEAST"
      - "AT_MOST"
      - "ALL_OR_NONE"
    DefaultError:
      type: "object"
      properties:
        message:
          maxLength: 255
          type: "string"
          description: "When present helps to identify and fix the problem."
          x-fieldValidation: "size(_,255)"
      description: "A default error model in case of errors other than 400, 409 or\
        \ 504."
    LostPasswordStartRequest:
      required:
      - "email"
      type: "object"
      properties:
        email:
          type: "string"
          x-fieldValidation: "required"
    LostPasswordStartConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/LostPasswordStartConflictErrorCode"
    LostPasswordStartConflictErrorCode:
      type: "string"
      enum:
      - "MULTIPLE_ACCOUNTS_FOUND"
    LostPasswordContinueRequest:
      required:
      - "email"
      - "nonce"
      - "password"
      type: "object"
      properties:
        email:
          type: "string"
          x-fieldValidation: "required"
        nonce:
          type: "string"
          x-fieldValidation: "required"
        password:
          allOf:
          - $ref: "#/components/schemas/SensitiveString"
          - description: "The actual password value."
            x-fieldValidation: "required"
    SensitiveString:
      type: "object"
      properties:
        value:
          maxLength: 255
          type: "string"
          x-fieldValidation: "size(_,255)"
    LoginWithPasswordRequest:
      required:
      - "code"
      - "password"
      type: "object"
      properties:
        code:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\\
            .[a-zA-Z0-9_-]+)*$"
          type: "string"
          description: "Username."
          x-fieldValidation: "required size(_,50) regex(^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\
            /=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$)"
        password:
          maxLength: 100
          type: "string"
          description: "User password."
          format: "password"
          x-fieldValidation: "required has_text size(_,100) "
    LoginResult:
      type: "object"
      properties:
        token:
          type: "string"
          description: "A token to be used in the Authorization header for secured\
            \ operations."
        programmeId:
          type: "integer"
          description: "The ID of the configured Programme that represents the Application."
          format: "int64"
        credential:
          $ref: "#/components/schemas/TypeId"
        identity:
          $ref: "#/components/schemas/TypeId"
    TypeId:
      required:
      - "id"
      - "type"
      type: "object"
      properties:
        type:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "required size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        id:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
    LoginWithPasswordConflict:
      type: "object"
      properties:
        code:
          $ref: "#/components/schemas/LoginWithPasswordConflictErrorCode"
    LoginWithPasswordConflictErrorCode:
      type: "string"
      enum:
      - "FAILED_LOGIN"
      - "EXPIRED_PASSWORD"
    CreatePasswordIdentityRequest:
      required:
      - "profileId"
      type: "object"
      properties:
        profileId:
          type: "integer"
          description: "The ID of an existing Password Profile to which to link the\
            \ new Password Identity. The configuration defined by the identified Password\
            \ Profile will be used when creating and updating passwords for credentials\
            \ linked to this new Password Identity."
          format: "int64"
          x-fieldValidation: "required"
      description: "The request parameters with which a new Password Identity can\
        \ be created and linked to an existing Password Profile."
    PasswordIdentity:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "The ID of the Password Identity which must be the same as\
            \ the Auth Session Identity that is extended."
          format: "int64"
        profileId:
          type: "integer"
          description: "The ID of an existing Password Profile that extends an Auth\
            \ Session Identity Profile from which the Auth Session Identity corresponding\
            \ to this entity is created."
          format: "int64"
      description: "A Password Identity is an extension of an Auth Session Identity\
        \ and must have the same ID. Credentials that belong to Auth Session Identities\
        \ which are not extended by the Password service are not allowed to create\
        \ and update passwords. Note that a Password Identity can only be linked to\
        \ one Password Profile, but multiple Password Identities can be linked to\
        \ the same Password Profile."
    CreatePasswordIdentityConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/CreatePasswordIdentityConflictErrorCode"
    CreatePasswordIdentityConflictErrorCode:
      type: "string"
      enum:
      - "UNRESOLVED_PASSWORD_PROFILE"
      - "PASSWORD_PROFILE_ALREADY_CREATED"
    PasswordInfo:
      required:
      - "credentialId"
      - "credentialType"
      - "identityId"
      type: "object"
      properties:
        credentialId:
          type: "integer"
          description: "The ID of the credential owning this password."
          format: "int64"
          x-fieldValidation: "required"
        credentialType:
          type: "string"
          description: "The type of the credential owning this password."
          x-fieldValidation: "required"
        version:
          minimum: 0
          exclusiveMinimum: false
          type: "integer"
          description: "The password version. The initial value upon password creation\
            \ is zero. This value is incremented everytime the credential's password\
            \ is updated."
          format: "int32"
          x-fieldValidation: "range(0,_)"
        identityId:
          type: "integer"
          description: "The ID of the identity to which the credential owning this\
            \ password belongs."
          format: "int64"
          x-fieldValidation: "required"
        expiryDate:
          minimum: 0
          exclusiveMinimum: false
          type: "integer"
          description: "A millisecond timestamp indicating when this password version\
            \ will expire. If 0, then this password will not expire."
          format: "int64"
          x-fieldValidation: "range(0,_)"
        expiryNotificationDate:
          minimum: 0
          exclusiveMinimum: false
          type: "integer"
          description: "Expiry notification not yet supported."
          format: "int64"
          x-fieldValidation: "range(0,_)"
      description: "Information about a particular version of a password."
    UpdatePasswordRequest:
      required:
      - "oldPassword"
      - "password"
      type: "object"
      properties:
        password:
          allOf:
          - $ref: "#/components/schemas/SensitiveString"
          - description: "The updated password value."
            x-fieldValidation: "required"
        oldPassword:
          allOf:
          - $ref: "#/components/schemas/SensitiveString"
          - description: "The old password value. Must match the credential's existing\
              \ password."
            x-fieldValidation: "required"
      description: "The request parameters with which an existing password can be\
        \ updated. The updated password must satisfy all the update restrictions imposed\
        \ by the corresponding Password Profile configuration for the type of credential\
        \ owning the password."
    UpdatePasswordConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/UpdatePasswordConflictErrorCode"
      description: "A conflict error that may arise when updating an existing Password."
    UpdatePasswordConflictErrorCode:
      type: "string"
      enum:
      - "PASSWORD_ALREADY_USED"
      - "PASSWORD_TOO_SHORT"
      - "PASSWORD_TOO_LONG"
      - "PASSWORD_TOO_SIMPLE"
      - "PASSWORD_INCORRECT"
    CreatePasswordRequest:
      required:
      - "credentialType"
      - "identityId"
      - "password"
      type: "object"
      properties:
        credentialType:
          type: "string"
          description: "The type of the credential for which a new password will be\
            \ created."
          x-fieldValidation: "required"
        identityId:
          type: "integer"
          description: "The ID of the identity owning the credential for which a new\
            \ password will be created."
          format: "int64"
          x-fieldValidation: "required"
        password:
          allOf:
          - $ref: "#/components/schemas/SensitiveString"
          - description: "The actual password value."
            x-fieldValidation: "required"
      description: "The request parameters with which a new password is created for\
        \ a credential. The new password will have an initial version of 0 and must\
        \ satisfy any restrctions imposed by the credential type configuration of\
        \ the Password Profile linked to the given identity ID."
    PasswordConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/PasswordConflictErrorCode"
      description: "A conflict error that may arise when creating a new Password."
    PasswordConflictErrorCode:
      type: "string"
      enum:
      - "UNRESOLVED_IDENTITY"
      - "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE"
      - "PASSWORD_TOO_SHORT"
      - "PASSWORD_TOO_LONG"
      - "PASSWORD_TOO_SIMPLE"
      - "PASSWORD_KEY_ALREADY_IN_USE"
      - "PASSWORD_ALREADY_CREATED"
    ValidatePasswordRequest:
      required:
      - "credentialType"
      - "identityProfileId"
      - "password"
      type: "object"
      properties:
        identityProfileId:
          type: "integer"
          description: "The ID of the identity profile for which given password will\
            \ be validated."
          format: "int64"
          x-fieldValidation: "required"
        credentialType:
          type: "string"
          description: "The type of the credential for which given password will be\
            \ validated."
          x-fieldValidation: "required"
        password:
          allOf:
          - $ref: "#/components/schemas/SensitiveString"
          - description: "The actual password value."
            x-fieldValidation: "required"
    ValidatePasswordConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/ValidatePasswordConflictErrorCode"
      description: "A conflict error that may arise when creating a new Password."
    ValidatePasswordConflictErrorCode:
      type: "string"
      enum:
      - "UNRESOLVED_IDENTITY"
      - "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE"
      - "PASSWORD_TOO_SHORT"
      - "PASSWORD_TOO_LONG"
      - "PASSWORD_TOO_SIMPLE"
    SendMobileRequest0:
      required:
      - "mobileCountryCode"
      - "mobileNumber"
      type: "object"
      properties:
        mobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          description: "The user's mobile number (excluding country code) being verified"
          x-fieldValidation: "required size(1,15) regex(^[0-9]+$)"
        mobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          description: "The country code of the user's mobile number being verified\
            \ (e.g. +44)"
          x-fieldValidation: "required size(1,6)"
    SendMobileRequestConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/SendMobileRequestConflictErrorCode"
    SendMobileRequestConflictErrorCode:
      type: "string"
      enum:
      - "INVALID_NONCE_OR_MOBILE"
      - "INVALID_FORMAT_MOBILE_OR_COUNTRY_CODE"
      - "INSUFFICIENT_FUNDS"
      - "SYSTEM_ERROR"
    VerifyMobileRequest1:
      required:
      - "mobileCountryCode"
      - "mobileNumber"
      - "nonce"
      type: "object"
      properties:
        mobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          description: "The user's mobile number (excluding country code) being verified"
          x-fieldValidation: "required size(1,15) regex(^[0-9]+$)"
        mobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          description: "The country code of the user's mobile number being verified\
            \ (e.g. +44)"
          x-fieldValidation: "required size(1,6)"
        nonce:
          maxLength: 6
          minLength: 4
          type: "string"
          description: "A randomly generated one-time code sent to the user via text\
            \ message (SMS) used to verify the user's mobile number"
          x-fieldValidation: "required size(4,6)"
    VerificationConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/VerificationConflictErrorCode"
    VerificationConflictErrorCode:
      type: "string"
      enum:
      - "INVALID_NONCE_OR_EMAIL"
      - "INVALID_NONCE_OR_MOBILE"
      - "INSUFFICIENT_FUNDS"
      - "SYSTEM_ERROR"
    CorporateUser:
      required:
      - "companyPosition"
      - "email"
      - "id"
      - "identity"
      - "mobileCountryCode"
      - "mobileNumber"
      - "name"
      - "secretType"
      - "surname"
      - "title"
      - "type"
      - "username"
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
        type:
          allOf:
          - $ref: "#/components/schemas/CorporateUserType"
          - x-fieldValidation: "required"
        identity:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        username:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\\
            .[a-zA-Z0-9_-]+)*$"
          type: "string"
          x-fieldValidation: "required size(_,50) regex(^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\
            /=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$)"
        title:
          maxLength: 50
          type: "string"
          x-fieldValidation: "required has_text size(_,50)"
        name:
          maxLength: 100
          type: "string"
          x-fieldValidation: "required has_text size(_,100)"
        surname:
          maxLength: 100
          type: "string"
          x-fieldValidation: "required has_text size(_,100)"
        email:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          x-fieldValidation: "required size(_,255) regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        secretType:
          allOf:
          - $ref: "#/components/schemas/SecretType"
          - x-fieldValidation: "required"
        active:
          type: "boolean"
        companyPosition:
          maxLength: 100
          minLength: 1
          type: "string"
          x-fieldValidation: "required size(1,100)"
        mobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          x-fieldValidation: "required size(1,6)"
        mobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          x-fieldValidation: "required size(1,15) regex(^[0-9]+$)"
    CorporateUserType:
      type: "string"
      enum:
      - "ROOT"
      - "USER"
    SecretType:
      required:
      - "firstSecretType"
      type: "object"
      properties:
        firstSecretType:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          description: "The type of the first secret"
          format: "password"
          x-fieldValidation: "required size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        secondSecretType:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          format: "password"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
      description: "Determines what authentication methods should be used.  In general,\
        \ this should have firstSecretType set to *passwords*. In the future will\
        \ allow for secondary authentication mechanisms."
    UpdateCorporateUserRequest:
      type: "object"
      properties:
        title:
          maxLength: 50
          type: "string"
          description: "The title for the user (Mr, Mrs, etc...)"
          x-fieldValidation: "has_text size(_,50)"
        name:
          maxLength: 100
          type: "string"
          description: "The first name of the user"
          x-fieldValidation: "has_text size(_,100)"
        surname:
          maxLength: 100
          type: "string"
          description: "The last name of the user"
          x-fieldValidation: "has_text size(_,100)"
        email:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          description: "The email address of the user"
          x-fieldValidation: "size(_,255) has_text regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        mobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          description: "The mobile number of the user, excluding country code"
          x-fieldValidation: "size(1,15) regex(^[0-9]+$)"
        mobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          description: "The country code for the user's mobile number (e.g. +44)"
          x-fieldValidation: "size(1,6)"
        secretType:
          $ref: "#/components/schemas/SecretType"
        companyPosition:
          maxLength: 100
          minLength: 1
          type: "string"
          description: "The user's position/role in the company"
          x-fieldValidation: "has_text size(1,100)"
    UpdateCorporateUserConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/UpdateCorporateUserConflictErrorCode"
    UpdateCorporateUserConflictErrorCode:
      type: "string"
      enum:
      - "EMAIL_NOT_UNIQUE"
    CreateCorporateUserRequest:
      required:
      - "companyPosition"
      - "email"
      - "mobileCountryCode"
      - "mobileNumber"
      - "name"
      - "secretType"
      - "surname"
      - "title"
      - "type"
      - "username"
      type: "object"
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/CorporateUserType"
          - x-fieldValidation: "required not_in(ROOT)"
        username:
          maxLength: 50
          minLength: 1
          type: "string"
          description: "The usernames used by the user to log in to the system"
          x-fieldValidation: "required has_text size(1,50)"
        title:
          maxLength: 50
          type: "string"
          description: "The title for the user (Mr, Mrs, etc...)"
          x-fieldValidation: "required has_text size(_,50)"
        name:
          maxLength: 100
          type: "string"
          description: "The first name of the user"
          x-fieldValidation: "required has_text size(_,100)"
        surname:
          maxLength: 100
          type: "string"
          description: "The last name of the user"
          x-fieldValidation: "required has_text size(_,100)"
        email:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          description: "The email address of the user"
          x-fieldValidation: "required size(_,255) regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        secretType:
          allOf:
          - $ref: "#/components/schemas/SecretType"
          - x-fieldValidation: "required"
        active:
          type: "boolean"
          description: "Ignore field"
        companyPosition:
          maxLength: 100
          minLength: 1
          type: "string"
          description: "The position/role of the user in the company"
          x-fieldValidation: "required size(1,100)"
        mobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          description: "The country code of the user's mobile number (e.g. +44)"
          x-fieldValidation: "required size(1,6)"
        mobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          description: "The mobile number of the user, exlcuding country code"
          x-fieldValidation: "required size(1,15) regex(^[0-9]+$)"
    CreateCorporateUserConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/CreateCorporateUserConflictErrorCode"
    CreateCorporateUserConflictErrorCode:
      type: "string"
      enum:
      - "SECRET_TYPE_NOT_SUPPORTED_BY_PROFILE"
      - "USERNAME_NOT_UNIQUE"
      - "EMAIL_NOT_UNIQUE"
    SendEmailRequest1:
      required:
      - "emailAddress"
      type: "object"
      properties:
        emailAddress:
          maxLength: 255
          minLength: 6
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
          type: "string"
          description: "The email address being verified"
          x-fieldValidation: "required regex(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$)\
            \ size(6,255)"
    VerifyEmailRequest1:
      required:
      - "emailAddress"
      - "nonce"
      type: "object"
      properties:
        emailAddress:
          maxLength: 255
          minLength: 6
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
          type: "string"
          description: "The user's email address being verified"
          x-fieldValidation: "required regex(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$)\
            \ size(6,255)"
        nonce:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\\
            .[a-zA-Z0-9_-]+)*$"
          type: "string"
          description: "The randomly generated one-time use code used to verify the\
            \ user's email address"
          x-fieldValidation: "required size(_,50) regex(^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\
            /=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$)"
    VerifyEmailRequestConflict1:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/VerifyEmailRequestConflictErrorCode0"
    VerifyEmailRequestConflictErrorCode0:
      type: "string"
      enum:
      - "INVALID_NONCE_OR_EMAIL"
    CorporateUsersFilter:
      type: "object"
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        type:
          $ref: "#/components/schemas/CorporateUserType"
        username:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\\
            .[a-zA-Z0-9_-]+)*$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\
            /=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$)"
        email:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          x-fieldValidation: "size(_,255) regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        active:
          $ref: "#/components/schemas/NullableBoolean"
    Paging:
      type: "object"
      properties:
        offset:
          minimum: 0
          exclusiveMinimum: false
          type: "integer"
          format: "int32"
          x-fieldValidation: "range(0,_)"
        limit:
          maximum: 100
          exclusiveMaximum: false
          minimum: 1
          exclusiveMinimum: false
          type: "integer"
          format: "int32"
          x-fieldValidation: "range(1,100)"
    NullableBoolean:
      type: "string"
      description: "A boolean whose default value is 'unset' instead of false/true.\
        \ Allows distinction between unset and true/false"
      enum:
      - "TRUE"
      - "FALSE"
    CorporateUsers:
      type: "object"
      properties:
        user:
          type: "array"
          items:
            $ref: "#/components/schemas/CorporateUser"
        count:
          type: "integer"
          description: "Total number of records (excluding limit)"
          format: "int32"
        responseCount:
          type: "integer"
          description: "Total number of records returned in this response"
          format: "int32"
    ConsumeCorporateUserInviteRequest:
      required:
      - "emailAddress"
      - "nonce"
      - "password"
      type: "object"
      properties:
        emailAddress:
          maxLength: 255
          minLength: 6
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
          type: "string"
          description: "The user's email address being verified"
          x-fieldValidation: "required regex(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$)\
            \ size(6,255)"
        nonce:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\\
            .[a-zA-Z0-9_-]+)*$"
          type: "string"
          description: "The randomly generated one-time use code used to verify the\
            \ user's email address"
          x-fieldValidation: "required size(_,50) regex(^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\
            /=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$)"
        password:
          allOf:
          - $ref: "#/components/schemas/SensitiveString"
          - description: "The actual password value."
            x-fieldValidation: "required"
    ConsumeCorporateUserInviteConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/ConsumeCorporateUserInviteConflictErrorCode"
    ConsumeCorporateUserInviteConflictErrorCode:
      type: "string"
      enum:
      - "INVALID_NONCE_OR_EMAIL"
      - "PASSWORD_ALREADY_USED"
      - "UNRESOLVED_IDENTITY"
      - "PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE"
      - "PASSWORD_TOO_SHORT"
      - "PASSWORD_TOO_LONG"
      - "PASSWORD_TOO_SIMPLE"
      - "PASSWORD_KEY_ALREADY_IN_USE"
    ValidateCorporateUserInviteRequest:
      required:
      - "emailAddress"
      - "nonce"
      type: "object"
      properties:
        emailAddress:
          maxLength: 255
          minLength: 6
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
          type: "string"
          description: "The user's email address being verified"
          x-fieldValidation: "required regex(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$)\
            \ size(6,255)"
        nonce:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\\
            .[a-zA-Z0-9_-]+)*$"
          type: "string"
          description: "The randomly generated one-time use code used to verify the\
            \ user's email address"
          x-fieldValidation: "required size(_,50) regex(^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\
            /=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$)"
    Corporate:
      required:
      - "acceptedTerms"
      - "companyBusinessAddress"
      - "companyRegistrationAddress"
      - "companyRegistrationDate"
      - "companyRegistrationNumber"
      - "companyRegistrationTimestamp"
      - "companyType"
      - "creationTimestamp"
      - "id"
      - "name"
      - "profileId"
      - "registrationCountry"
      - "supportEmail"
      type: "object"
      properties:
        id:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - description: "The Corporate Id"
            x-fieldValidation: "required"
        profileId:
          type: "integer"
          description: "The Corporate Profile ID for this corporate"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          description: "Ignore Field"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        name:
          maxLength: 100
          type: "string"
          description: "The registered company name"
          x-fieldValidation: "required has_text size(_,100)"
        companyType:
          allOf:
          - $ref: "#/components/schemas/CorporateCompanyType"
          - description: "The type of company"
            x-fieldValidation: "required"
        supportEmail:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          description: "A contact address for the company - may be an individual or\
            \ a mailing list"
          x-fieldValidation: "required size(_,255) regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        active:
          type: "boolean"
          description: "Ignore Field"
        creationTimestamp:
          type: "integer"
          description: "The time when this corporate was created on the platform.\
            \ Epoch timestamp using millisecond precision."
          format: "int64"
          x-fieldValidation: "required"
        verifications:
          type: "array"
          description: "Ignore Field"
          items:
            maxLength: 50
            pattern: "^[a-zA-Z0-9_-]+$"
            type: "string"
          x-valuesValidation: "required size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        companyRegistrationNumber:
          maxLength: 20
          minLength: 1
          type: "string"
          description: "The company's registration number"
          x-fieldValidation: "required size(1,20)"
        companyRegistrationAddress:
          maxLength: 150
          minLength: 1
          type: "string"
          description: "The company's registration address"
          x-fieldValidation: "required size(1,150)"
        companyBusinessAddress:
          maxLength: 150
          minLength: 1
          type: "string"
          description: "The company's business address"
          x-fieldValidation: "required size(1,150)"
        registrationCountry:
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
          type: "string"
          description: "The company's country of registration"
          x-fieldValidation: "required size(2,2) regex([A-Z]+)"
        companyRegistrationTimestamp:
          type: "integer"
          description: "Deprecated field - please use company_registration_date. Epoch\
            \ timestamp using millisecond precision."
          format: "int64"
          deprecated: true
          x-fieldValidation: "required"
        companyRegistrationDate:
          type: "integer"
          description: "The company's registration date. Epoch timestamp using millisecond\
            \ precision."
          format: "int64"
          x-fieldValidation: "required"
        acceptedTerms:
          type: "boolean"
          description: "Indicates that the company has accepted the terms and conditions"
          x-fieldValidation: "required"
        kyb:
          allOf:
          - $ref: "#/components/schemas/CorporateKybStatus"
          - description: "The KYB status of the corporate account."
        baseCurrency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          description: "The default currency of the corporate"
          x-fieldValidation: "size(3,3) regex([A-Z]*)"
    CorporateCompanyType:
      type: "string"
      enum:
      - "SOLE_TRADER"
      - "LLC"
    CorporateKybStatus:
      type: "object"
      properties:
        rootEmailVerified:
          type: "boolean"
          description: "A flag denoting whether the email address is verified for\
            \ the root corporate user."
        rootMobileVerified:
          type: "boolean"
          description: "A flag denoting whether the mobile number is verified for\
            \ the root corporate user."
        directorsVerified:
          allOf:
          - $ref: "#/components/schemas/KybStatus"
          - description: "The status of the Directors Verification Check for the corporate\
              \ entity."
        UBOsVerified:
          allOf:
          - $ref: "#/components/schemas/KybStatus"
          - description: "The status of the UBOs Verification Check for the corporate\
              \ entity."
        basicCompanyChecksVerified:
          allOf:
          - $ref: "#/components/schemas/KybStatus"
          - description: "The status of the Basic Company Verification Checks for\
              \ the corporate entity."
        fullCompanyChecksVerified:
          allOf:
          - $ref: "#/components/schemas/KybStatus"
          - description: "The status of the Full Company Verification Checks for the\
              \ corporate entity."
        enhancedCompanyChecksVerified:
          allOf:
          - $ref: "#/components/schemas/KybStatus"
          - description: "The status of the Enhanced Company Verification Checks for\
              \ the corporate entity."
        allowedLimit:
          allOf:
          - $ref: "#/components/schemas/CurrencyAmount"
          - description: "The allowed funding limit for the corporate given the current\
              \ KYB Status."
        remainingLimit:
          allOf:
          - $ref: "#/components/schemas/CurrencyAmount"
          - description: "The remaining funding limit for the corporate given the\
              \ current KYB Status. This is the difference between the allowedLimit\
              \ amount and the total number of funding balance movements."
    KybStatus:
      type: "string"
      enum:
      - "NOT_STARTED"
      - "INITIATED"
      - "APPROVED"
      - "REJECTED"
    CurrencyAmount:
      required:
      - "currency"
      type: "object"
      properties:
        currency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          description: "The currency ISO-4217 code, i.e. a three letter uppercase\
            \ code, such as GBP, EUR, USD."
          x-fieldValidation: "required size(3,3) regex([A-Z]*)"
        amount:
          type: "integer"
          description: "The monetary amount, scaled to the lowest denomination of\
            \ the currency. For example, an amount of 1000 for a EUR currency is actually\
            \ 1000 Euro cents, i.e. EUR 10.00."
          format: "int64"
      description: "A message representing a monetary amount in a particular currency."
    UpdateCorporateRequest:
      type: "object"
      properties:
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          description: "Ignore Field"
          x-fieldValidation: "has_text size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        name:
          maxLength: 50
          type: "string"
          description: "The registered name of the company"
          x-fieldValidation: "has_text size(_,50)"
        supportEmail:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          description: "A general email address that can be used to contact the company\
            \ - may be an individual's email address or a mailing list"
          x-fieldValidation: "has_text size(_,255) regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        companyType:
          allOf:
          - $ref: "#/components/schemas/CorporateCompanyType"
          - description: "Supported company types - if company type is not listed,\
              \ then this is not supported"
        companyRegistrationNumber:
          maxLength: 20
          minLength: 1
          type: "string"
          description: "The copmany registration number"
          x-fieldValidation: "has_text size(1,20)"
        companyRegistrationAddress:
          maxLength: 150
          minLength: 1
          type: "string"
          description: "The company's registered address"
          x-fieldValidation: "has_text size(1,150)"
        companyBusinessAddress:
          maxLength: 150
          minLength: 1
          type: "string"
          description: "The company's business address"
          x-fieldValidation: "has_text size(1,150)"
        registrationCountry:
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
          type: "string"
          description: "The country of company registration - using ISO 3166 alpha-2"
          x-fieldValidation: "size(2,2) has_text regex([A-Z]+)"
        companyRegistrationTimestamp:
          type: "integer"
          description: "Deprecated field - please use company_registration_date. Epoch\
            \ timestamp using millisecond precision."
          format: "int64"
          deprecated: true
        companyRegistrationDate:
          type: "integer"
          description: "The registration date of the company. Epoch timestamp using\
            \ millisecond precision."
          format: "int64"
    CreateCorporateRequest:
      required:
      - "acceptedTerms"
      - "companyBusinessAddress"
      - "companyName"
      - "companyRegistrationAddress"
      - "companyRegistrationNumber"
      - "companyType"
      - "ipAddress"
      - "profileId"
      - "registrationCountry"
      - "rootCompanyPosition"
      - "rootEmail"
      - "rootMobileCountryCode"
      - "rootMobileNumber"
      - "rootName"
      - "rootSecretType"
      - "rootSurname"
      - "rootTitle"
      - "rootUsername"
      - "supportEmail"
      type: "object"
      properties:
        profileId:
          type: "integer"
          description: "The profile Id is available in the Innovator Portal and linked\
            \ to the Corporate Identity Profile"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          description: "Ignore field"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        companyName:
          maxLength: 100
          type: "string"
          description: "The registered name of the company"
          x-fieldValidation: "required has_text size(_,100)"
        companyType:
          allOf:
          - $ref: "#/components/schemas/CorporateCompanyType"
          - description: "Supported company types - if company type is not listed,\
              \ then this is not supported"
            x-fieldValidation: "required"
        supportEmail:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          description: "A general email address that can be used to contact the company\
            \ - may be an individual's email address or a mailing list"
          x-fieldValidation: "required size(_,255) regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        active:
          type: "boolean"
          description: "Ignore field"
        rootUsername:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\\
            .[a-zA-Z0-9_-]+)*$"
          type: "string"
          description: "This is the username of the main user/owner for the corporate\
            \ (the root user)"
          x-fieldValidation: "required size(_,50) regex(^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\
            /=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$)"
        rootTitle:
          maxLength: 50
          type: "string"
          description: "The title for the root user (Mr, Mrs, etc...)"
          x-fieldValidation: "required has_text size(_,50)"
        rootName:
          maxLength: 100
          type: "string"
          description: "The first name of the root user"
          x-fieldValidation: "required has_text size(_,100)"
        rootSurname:
          maxLength: 100
          type: "string"
          description: "The last name of the root user"
          x-fieldValidation: "required has_text size(_,100)"
        rootEmail:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          description: "The email address of the root user - must be a valid email\
            \ as will need to be verified as part of due diligence process"
          x-fieldValidation: "required size(_,255) regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        rootSecretType:
          allOf:
          - $ref: "#/components/schemas/SecretType"
          - x-fieldValidation: "required"
        companyRegistrationNumber:
          maxLength: 20
          minLength: 1
          type: "string"
          description: "The company registration number"
          x-fieldValidation: "required size(1,20)"
        companyRegistrationAddress:
          maxLength: 150
          minLength: 1
          type: "string"
          description: "The company registered address"
          x-fieldValidation: "required size(1,150)"
        companyBusinessAddress:
          maxLength: 150
          minLength: 1
          type: "string"
          description: "The company business address"
          x-fieldValidation: "required size(1,150)"
        registrationCountry:
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
          type: "string"
          description: "The country of company registration - using ISO 3166 alpha-2"
          x-fieldValidation: "required size(2,2) regex([A-Z]+)"
        companyRegistrationTimestamp:
          type: "integer"
          description: "Deprecated field - please use company_registration_date. Epoch\
            \ timestamp using millisecond precision."
          format: "int64"
          deprecated: true
        companyRegistrationDate:
          type: "integer"
          description: "The registration date of the company. Epoch timestamp using\
            \ millisecond precision."
          format: "int64"
        acceptedTerms:
          type: "boolean"
          description: "Must be set to *true* to indicate that the root user has accepted\
            \ the terms and conditions"
          x-fieldValidation: "required"
        ipAddress:
          maxLength: 15
          minLength: 5
          type: "string"
          description: "The IP address of the root user doing the registration"
          x-fieldValidation: "required size(5,15)"
        rootCompanyPosition:
          maxLength: 100
          minLength: 1
          type: "string"
          description: "The company position of the root user (e.g. CEO, Product Manager,\
            \ etc..)"
          x-fieldValidation: "required size(1,100)"
        rootMobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          description: "The country code of the root user's mobile number (e.g. +44)"
          x-fieldValidation: "required size(1,6)"
        rootMobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          description: "The mobile number of the root user, excluding country code"
          x-fieldValidation: "required size(1,15) regex(^[0-9]+$)"
        baseCurrency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          description: "The default currency of the corporate"
          x-fieldValidation: "size(3,3) regex([A-Z]*)"
      x-messageValidation: "exactly(1,company_registration_timestamp,company_registration_date)"
    CreateCorporateConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/CreateCorporateConflictErrorCode"
    CreateCorporateConflictErrorCode:
      type: "string"
      enum:
      - "PROFILE_NOT_FOUND"
      - "PROFILE_INACTIVE"
      - "MODEL_CONSTRAINTS_VIOLATED"
      - "ROOT_USERNAME_NOT_UNIQUE"
      - "ROOT_EMAIL_NOT_UNIQUE"
      - "UNSUPPORTED_CURRENCY"
    SendMobileRequest1:
      required:
      - "mobileCountryCode"
      - "mobileNumber"
      type: "object"
      properties:
        mobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          description: "The mobile number to be verified (excluding country code)"
          x-fieldValidation: "required size(1,15) regex(^[0-9]+$)"
        mobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          description: "The mobile number country code (e.g. +44)"
          x-fieldValidation: "required size(1,6)"
    VerifyMobileRequest0:
      required:
      - "mobileCountryCode"
      - "mobileNumber"
      - "nonce"
      type: "object"
      properties:
        mobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          description: "The mobile number to be verified (excluding country code)"
          x-fieldValidation: "required size(1,15) regex(^[0-9]+$)"
        mobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          description: "The mobile number country code (e.g. +44)"
          x-fieldValidation: "required size(1,6)"
        nonce:
          maxLength: 6
          minLength: 4
          type: "string"
          description: "A randomly generated one-time code"
          x-fieldValidation: "required size(4,6)"
    InitFullKycProcessResponse:
      required:
      - "redirectUrl"
      type: "object"
      properties:
        redirectUrl:
          type: "string"
          description: "Redirect Consumer to this URL for KYC verification"
          x-fieldValidation: "required has_text"
    InitFullKycError:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/InitFullKycErrorErrorCode"
    InitFullKycErrorErrorCode:
      type: "string"
      enum:
      - "SPI_ERROR"
      - "INSUFFICIENT_FUNDS"
      - "SYSTEM_ERROR"
    SendEmailRequest0:
      required:
      - "emailAddress"
      type: "object"
      properties:
        emailAddress:
          maxLength: 255
          minLength: 6
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
          type: "string"
          description: "The email address to be verified"
          x-fieldValidation: "required regex(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$)\
            \ size(6,255)"
    VerifyEmailRequest0:
      required:
      - "emailAddress"
      - "nonce"
      type: "object"
      properties:
        emailAddress:
          maxLength: 255
          minLength: 6
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
          type: "string"
          description: "The email address being verified"
          x-fieldValidation: "required regex(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$)\
            \ size(6,255)"
        nonce:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\\
            .[a-zA-Z0-9_-]+)*$"
          type: "string"
          description: "The randomly generated one-time code"
          x-fieldValidation: "required size(_,50) regex(^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\
            /=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$)"
    VerifyEmailRequestConflict0:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/VerifyEmailRequestConflictErrorCode1"
    VerifyEmailRequestConflictErrorCode1:
      type: "string"
      enum:
      - "INVALID_NONCE_OR_EMAIL"
    Consumer:
      required:
      - "creationTimestamp"
      - "email"
      - "id"
      - "mobileCountryCode"
      - "mobileNumber"
      - "name"
      - "profileId"
      - "surname"
      type: "object"
      properties:
        id:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - description: "The Consumer Id"
            x-fieldValidation: "required"
        profileId:
          type: "integer"
          description: "The Consumer Profile ID for this consumer"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          description: "Ignore field"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        name:
          maxLength: 100
          type: "string"
          description: "The first name of the Consumer"
          x-fieldValidation: "required has_text size(_,100)"
        surname:
          maxLength: 100
          type: "string"
          description: "The last name of the Consumer"
          x-fieldValidation: "required has_text size(_,100)"
        email:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          description: "The email address of the Consumer"
          x-fieldValidation: "required size(_,255) regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        active:
          type: "boolean"
          description: "Ignore Field"
        creationTimestamp:
          type: "integer"
          description: "The time when this Consumer was created on the platform. Epoch\
            \ timestamp using millisecond precision."
          format: "int64"
          x-fieldValidation: "required"
        mobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          description: "The country code of the Consumer's mobile number (e.g. +44)"
          x-fieldValidation: "required size(1,6)"
        mobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          description: "The mobile number of the Consumer (excluding country code)"
          x-fieldValidation: "required size(1,15) regex(^[0-9]+$)"
        kyc:
          allOf:
          - $ref: "#/components/schemas/ConsumerKycStatus"
          - description: "The KYC status of the consumer."
        baseCurrency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          description: "The default currency of the consumer"
          x-fieldValidation: "size(3,3) regex([A-Z]*)"
    ConsumerKycStatus:
      type: "object"
      properties:
        emailVerified:
          type: "boolean"
          description: "A flag denoting whether the email address is verified for\
            \ the consumer."
        mobileVerified:
          type: "boolean"
          description: "A flag denoting whether the mobile number is verified for\
            \ the consumer."
        isPep:
          allOf:
          - $ref: "#/components/schemas/KycBasicChecksStatus"
          - description: "The status of the PEP Check for the consumer."
        isSanctioned:
          allOf:
          - $ref: "#/components/schemas/KycBasicChecksStatus"
          - description: "The status of the Sanctions Check for the consumer."
        fullDueDiligence:
          allOf:
          - $ref: "#/components/schemas/KycFullChecksStatus"
          - description: "The status of the Full Due Diligence Check for the consumer."
        enhancedDueDiligence:
          allOf:
          - $ref: "#/components/schemas/KycFullChecksStatus"
          - description: "The status of the Enhanced Due Diligence Check for the consumer."
        allowedLimit:
          allOf:
          - $ref: "#/components/schemas/CurrencyAmount"
          - description: "The allowed funding limit for the consumer given the current\
              \ KYC Status."
        remainingLimit:
          allOf:
          - $ref: "#/components/schemas/CurrencyAmount"
          - description: "The remaining funding limit for the consumer given the current\
              \ KYC Status. This is the difference between the allowedLimit amount\
              \ and the total number of funding balance movements."
    KycBasicChecksStatus:
      type: "string"
      enum:
      - "CHECK_NOT_STARTED"
      - "YES"
      - "NO"
    KycFullChecksStatus:
      type: "string"
      enum:
      - "NOT_STARTED"
      - "INITIATED"
      - "APPROVED"
      - "REJECTED"
    UpdateConsumerRequest:
      type: "object"
      properties:
        name:
          maxLength: 100
          type: "string"
          description: "The first name of the Consumer"
          x-fieldValidation: "has_text size(_,100)"
        surname:
          maxLength: 100
          type: "string"
          description: "The last name of the Consumer"
          x-fieldValidation: "has_text size(_,100)"
        email:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          description: "The email address of the Consumer"
          x-fieldValidation: "size(_,255) regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        mobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          description: "The country code of the Consumer's mobile number (e.g. +44)"
          x-fieldValidation: "size(1,6)"
        mobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          description: "The mobile number of the Consumer - excluding country code"
          x-fieldValidation: "size(1,15) regex(^[0-9]+$)"
    UpdateConsumerConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/UpdateConsumerConflictErrorCode"
    UpdateConsumerConflictErrorCode:
      type: "string"
      enum:
      - "CONSUMER_VERIFIED"
    CreateConsumerRequest:
      required:
      - "credentialCode"
      - "email"
      - "mobileCountryCode"
      - "mobileNumber"
      - "name"
      - "profileId"
      - "secretType"
      - "surname"
      type: "object"
      properties:
        profileId:
          type: "integer"
          description: "The profile Id is available in the Innovator Portal and linked\
            \ to the Consumer Identity Profile"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          description: "Ignore field"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        name:
          maxLength: 100
          type: "string"
          description: "The first name of the Consumer"
          x-fieldValidation: "required has_text size(_,100)"
        surname:
          maxLength: 100
          type: "string"
          description: "The last name of the Consumer"
          x-fieldValidation: "required has_text size(_,100)"
        email:
          maxLength: 255
          pattern: "^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$"
          type: "string"
          description: "The email address of the Consumer"
          x-fieldValidation: "required size(_,255) regex(^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9-]+(?:\\\
            .[a-zA-Z0-9-]+)*$)"
        credentialCode:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\\
            .[a-zA-Z0-9_-]+)*$"
          type: "string"
          description: "The username of the Consumer"
          x-fieldValidation: "required size(_,50) regex(^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\
            /=?^_|~-]+@[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*$)"
        mobileCountryCode:
          maxLength: 6
          minLength: 1
          type: "string"
          description: "The country code of the Consumer's mobile number (e.g. +44)"
          x-fieldValidation: "required size(1,6)"
        mobileNumber:
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
          type: "string"
          description: "The mobile number of the Consumer - excluding country code"
          x-fieldValidation: "required size(1,15) regex(^[0-9]+$)"
        secretType:
          allOf:
          - $ref: "#/components/schemas/SecretType"
          - x-fieldValidation: "required"
        baseCurrency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          description: "The default currency of the consumer"
          x-fieldValidation: "size(3,3) regex([A-Z]*)"
    CreateConsumerConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/CreateConsumerConflictErrorCode"
    CreateConsumerConflictErrorCode:
      type: "string"
      enum:
      - "PROFILE_NOT_FOUND"
      - "PROFILE_INACTIVE"
      - "MODEL_CONSTRAINTS_VIOLATED"
      - "EMAIL_NOT_UNIQUE"
      - "UNSUPPORTED_CURRENCY"
    ManagedAccountsFilter:
      type: "object"
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        profileId:
          type: "integer"
          format: "int64"
        owner:
          $ref: "#/components/schemas/TypeId"
        friendlyName:
          maxLength: 50
          minLength: 1
          type: "string"
          x-fieldValidation: "has_text size(1,50)"
        active:
          $ref: "#/components/schemas/NullableBoolean"
        currency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          x-fieldValidation: "size(3,3) regex([A-Z]*)"
        createdFrom:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
        createdTo:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
          x-fieldValidation: "exc_range(created_from, _)"
        hasPending:
          type: "boolean"
          description: "Filter managed accounts which have a pending balance."
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
    ManagedAccounts:
      type: "object"
      properties:
        account:
          type: "array"
          items:
            $ref: "#/components/schemas/ManagedAccount"
        count:
          type: "integer"
          description: "Total number of records (excluding limit)"
          format: "int32"
        responseCount:
          type: "integer"
          description: "Total number of records returned in this response"
          format: "int32"
        action:
          type: "array"
          description: "The actions that can be performed on this particular resource\
            \ instance."
          items:
            $ref: "#/components/schemas/ManagedAccountsAction"
    ManagedAccount:
      required:
      - "creationTimestamp"
      - "currency"
      - "friendlyName"
      - "id"
      - "owner"
      - "profileId"
      type: "object"
      properties:
        id:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        profileId:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        owner:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        friendlyName:
          maxLength: 50
          minLength: 1
          type: "string"
          x-fieldValidation: "required has_text size(1,50)"
        active:
          type: "boolean"
        currency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          x-fieldValidation: "required size(3,3) regex([A-Z]*)"
        balances:
          $ref: "#/components/schemas/ManagedInstrumentBalances"
        state:
          $ref: "#/components/schemas/InstrumentState"
        creationTimestamp:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
          x-fieldValidation: "required"
        action:
          type: "array"
          description: "The actions that can be performed on this particular resource\
            \ instance."
          items:
            $ref: "#/components/schemas/ManagedAccountAction"
        bankAccountDetails:
          allOf:
          - $ref: "#/components/schemas/BankAccountDetails"
          - description: "The bank account details to be used when loading funds to\
              \ this managed account."
    ManagedInstrumentBalances:
      type: "object"
      properties:
        availableBalance:
          type: "integer"
          format: "int64"
        actualBalance:
          type: "integer"
          format: "int64"
    InstrumentState:
      type: "object"
      properties:
        blockTypes:
          type: "object"
          additionalProperties:
            type: "integer"
            format: "int32"
          x-key$ref: "#/components/schemas/InstrumentStateBlockType"
          x-keysValidation: "required"
          x-valuesValidation: "required"
        destroyType:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
    InstrumentStateBlockType:
      type: "string"
      enum:
      - "VELOCITY"
      - "USER"
      - "ACCOUNT"
      - "ADMIN"
    ManagedAccountAction:
      type: "string"
      enum:
      - "UPDATE"
      - "BLOCK"
      - "UNBLOCK"
      - "DESTROY"
    BankAccountDetails:
      type: "object"
      properties:
        beneficiary:
          type: "string"
        address:
          type: "string"
        beneficiaryBank:
          type: "string"
        bankIdentifierCode:
          type: "string"
        iban:
          type: "string"
        paymentReference:
          type: "string"
          description: "A reference required by the partner bank to execute a load\
            \ on this managed account."
    ManagedAccountsAction:
      type: "string"
      enum:
      - "CREATE"
    UnfreezeManagedAccountConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/UnfreezeManagedAccountConflictErrorCode"
    UnfreezeManagedAccountConflictErrorCode:
      type: "string"
      enum:
      - "INSTRUMENT_NOT_FROZEN"
    StatementRequest:
      type: "object"
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        orderByTimestamp:
          $ref: "#/components/schemas/OrderType"
        fromTimestamp:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
        toTimestamp:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
          x-fieldValidation: "exc_range(from_timestamp,_)"
        showFundMovementsOnly:
          type: "boolean"
    OrderType:
      type: "string"
      enum:
      - "ASC"
      - "DESC"
    Statement:
      type: "object"
      properties:
        entry:
          type: "array"
          items:
            $ref: "#/components/schemas/StatementEntry"
        count:
          type: "integer"
          description: "Total number of records (excluding limit)"
          format: "int32"
        responseCount:
          type: "integer"
          description: "Total number of records returned in this response"
          format: "int32"
    StatementEntry:
      required:
      - "currency"
      - "txId"
      type: "object"
      properties:
        txId:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        originalAmount:
          $ref: "#/components/schemas/CurrencyAmount"
        forexRate:
          $ref: "#/components/schemas/ScaledAmount"
        currency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          x-fieldValidation: "required size(3,3) regex([A-Z]*)"
        adjustment:
          type: "integer"
          format: "int64"
        balanceAfter:
          type: "integer"
          format: "int64"
        fee:
          type: "object"
          additionalProperties:
            type: "integer"
            format: "int64"
          x-keyType: "string"
        processedTimestamp:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
        additionalFields:
          type: "object"
          additionalProperties:
            type: "string"
          description: "A Map of additional fields. Possible values include fee information"
          x-keyType: "string"
    ScaledAmount:
      type: "object"
      properties:
        value:
          type: "integer"
          format: "int64"
        scale:
          maximum: 127
          exclusiveMaximum: false
          minimum: -128
          exclusiveMinimum: false
          type: "integer"
          format: "int32"
          x-fieldValidation: "range(-128,127)"
      description: "A floating point number, represented as a value and its scale.\
        \ Its actual value can be obtained using the equation: value * pow(10, -scale)."
    StatementConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/StatementConflictErrorCode"
    StatementConflictErrorCode:
      type: "string"
      enum:
      - "INSTRUMENT_NOT_FOUND"
    RemoveManagedAccountConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/RemoveManagedAccountConflictErrorCode"
    RemoveManagedAccountConflictErrorCode:
      type: "string"
      enum:
      - "BALANCE_NOT_ZERO"
      - "INSTRUMENT_ALREADY_REMOVED"
    UpdateManagedAccountRequest:
      required:
      - "friendlyName"
      type: "object"
      properties:
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        friendlyName:
          maxLength: 50
          minLength: 1
          type: "string"
          x-fieldValidation: "required has_text size(1,50)"
    UpdateManagedAccountConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/UpdateManagedAccountConflictErrorCode"
    UpdateManagedAccountConflictErrorCode:
      type: "string"
      enum:
      - "FRIENDLY_NAME_NOT_UNIQUE"
    DestroyManagedAccountRequest:
      type: "object"
      properties:
        destroyType:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
    DestroyManagedAccountConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/DestroyManagedAccountConflictErrorCode"
    DestroyManagedAccountConflictErrorCode:
      type: "string"
      enum:
      - "BALANCE_NOT_ZERO"
      - "INSTRUMENT_ALREADY_DESTROYED"
    CreateManagedAccountRequest:
      required:
      - "currency"
      - "friendlyName"
      - "owner"
      - "profileId"
      type: "object"
      properties:
        profileId:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        owner:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - description: "The ID and type of the identity that owns this instrument."
            x-fieldValidation: "required"
        friendlyName:
          maxLength: 50
          minLength: 1
          type: "string"
          x-fieldValidation: "required has_text size(1,50)"
        currency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          x-fieldValidation: "required size(3,3) regex([A-Z]*)"
    CreateManagedAccountConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/CreateManagedAccountConflictErrorCode"
    CreateManagedAccountConflictErrorCode:
      type: "string"
      enum:
      - "PROFILE_NOT_FOUND"
      - "PROFILE_INACTIVE"
      - "MODEL_CONSTRAINTS_VIOLATED"
      - "OWNER_NOT_FOUND"
      - "FRIENDLY_NAME_NOT_UNIQUE"
      - "CURRENCY_NOT_SUPPORTED_BY_PROFILE"
      - "PROVIDER_NOT_SUPPORTED_BY_PROFILE"
      - "INSUFFICIENT_FUNDS"
      - "SYSTEM_ERROR"
      - "INSTRUMENT_NOT_FOUND"
    FreezeManagedAccountConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/FreezeManagedAccountConflictErrorCode"
    FreezeManagedAccountConflictErrorCode:
      type: "string"
      enum:
      - "INSTRUMENT_ALREADY_FROZEN"
    ManagedCardsFilter:
      type: "object"
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        profileId:
          type: "integer"
          format: "int64"
        owner:
          $ref: "#/components/schemas/TypeId"
        friendlyName:
          maxLength: 50
          minLength: 1
          type: "string"
          x-fieldValidation: "has_text size(1,50)"
        active:
          $ref: "#/components/schemas/NullableBoolean"
        currency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          x-fieldValidation: "size(3,3) regex([A-Z]*)"
        type:
          $ref: "#/components/schemas/CardType"
        cardBrand:
          $ref: "#/components/schemas/CardBrand"
        cardNumberFirstSix:
          maxLength: 6
          minLength: 6
          pattern: "^[0-9]*$"
          type: "string"
          description: "Between one and six of the first digits in the card number."
          x-fieldValidation: "size(6,6) regex([0-9]*)"
        cardNumberLastFour:
          maxLength: 4
          minLength: 4
          pattern: "^[0-9]*$"
          type: "string"
          description: "Between one and four of the last digits in the card number."
          x-fieldValidation: "size(4,4) regex([0-9]*)"
        expiryMmyy:
          type: "string"
          description: "The end date of this card, in MM/YY format."
        createdFrom:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
        createdTo:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
          x-fieldValidation: "exc_range(created_from, _)"
        hasPending:
          type: "boolean"
          description: "Filter managed cards which have a pending balance."
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
    CardType:
      type: "string"
      enum:
      - "VIRTUAL"
      - "PLASTIC"
    CardBrand:
      type: "string"
      enum:
      - "AMEX"
      - "CHINAUNIONPAY"
      - "DINERS"
      - "DISCOVER"
      - "JCB"
      - "MASTERCARD"
      - "MAESTRO"
      - "SOLO"
      - "VISA"
      - "VISADEBIT"
      - "VISAELECTRON"
      - "VISAPURCHASING"
      - "VERVE"
      - "UATP"
    ManagedCards:
      type: "object"
      properties:
        card:
          type: "array"
          items:
            $ref: "#/components/schemas/ManagedCard"
        count:
          type: "integer"
          description: "Total number of records (excluding limit)"
          format: "int32"
        responseCount:
          type: "integer"
          description: "Total number of records returned in this response"
          format: "int32"
        action:
          type: "array"
          description: "The actions that can be performed on this particular resource\
            \ instance."
          items:
            $ref: "#/components/schemas/ManagedCardsAction"
    ManagedCard:
      required:
      - "cardBrand"
      - "cardLevelClassification"
      - "creationTimestamp"
      - "currency"
      - "expiryPeriodMonths"
      - "friendlyName"
      - "id"
      - "nameOnCard"
      - "owner"
      - "profileId"
      - "renewalType"
      - "type"
      type: "object"
      properties:
        id:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        profileId:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        owner:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        friendlyName:
          maxLength: 50
          minLength: 1
          type: "string"
          x-fieldValidation: "required has_text size(1,50)"
        active:
          type: "boolean"
        currency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          x-fieldValidation: "required size(3,3) regex([A-Z]*)"
        balances:
          $ref: "#/components/schemas/ManagedInstrumentBalances"
        state:
          $ref: "#/components/schemas/InstrumentState"
        type:
          allOf:
          - $ref: "#/components/schemas/CardType"
          - x-fieldValidation: "required"
        cardBrand:
          allOf:
          - $ref: "#/components/schemas/CardBrand"
          - x-fieldValidation: "required"
        cardNumber:
          maxLength: 24
          type: "string"
          x-fieldValidation: "has_text size(_,24)"
        cvv:
          maxLength: 24
          type: "string"
          x-fieldValidation: "has_text size(_,24)"
        cardNumberFirstSix:
          maxLength: 6
          minLength: 6
          pattern: "^[0-9]*$"
          type: "string"
          description: "First six digits of the card number."
          x-fieldValidation: "size(6,6) regex([0-9]*)"
        cardNumberLastFour:
          maxLength: 4
          minLength: 4
          pattern: "^[0-9]*$"
          type: "string"
          description: "Last four digits of the card number."
          x-fieldValidation: "size(4,4) regex([0-9]*)"
        nameOnCard:
          maxLength: 27
          type: "string"
          x-fieldValidation: "required has_text size(_,27)"
        startMmyy:
          maxLength: 4
          minLength: 4
          pattern: "^[0-9]*$"
          type: "string"
          description: "The start date of this card, in MM/YY format."
          x-fieldValidation: "size(4,4) regex([0-9]*)"
        expiryMmyy:
          type: "string"
          description: "The end date of this card, in MM/YY format."
        cardLevelClassification:
          allOf:
          - $ref: "#/components/schemas/CardLevelClassification"
          - x-fieldValidation: "required"
        expiryPeriodMonths:
          maximum: 120
          exclusiveMaximum: false
          minimum: 1
          exclusiveMinimum: false
          type: "integer"
          format: "int32"
          x-fieldValidation: "required range(1,120)"
        renewalType:
          allOf:
          - $ref: "#/components/schemas/CardRenewalType"
          - x-fieldValidation: "required"
        creationTimestamp:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
          x-fieldValidation: "required"
        action:
          type: "array"
          description: "The actions that can be performed on this particular resource\
            \ instance."
          items:
            $ref: "#/components/schemas/ManagedCardAction"
        cardholderMobileNumber:
          maxLength: 20
          minLength: 5
          pattern: "^\\+[0-9]+$"
          type: "string"
          description: "The mobile number including country code of the card holder\
            \ needed for 3DS challenge"
          x-fieldValidation: "size(5, 20) regex(^\\+[0-9]+$)"
    CardLevelClassification:
      type: "string"
      enum:
      - "CONSUMER"
      - "CORPORATE"
    CardRenewalType:
      type: "string"
      enum:
      - "AUTO_RENEW"
      - "ASK"
      - "NO_RENEW"
    ManagedCardAction:
      type: "string"
      enum:
      - "UPDATE"
      - "BLOCK"
      - "UNBLOCK"
      - "DESTROY"
    ManagedCardsAction:
      type: "string"
      enum:
      - "CREATE"
    UnfreezeManagedCardConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/UnfreezeManagedCardConflictErrorCode"
    UnfreezeManagedCardConflictErrorCode:
      type: "string"
      enum:
      - "INSTRUMENT_NOT_FROZEN"
    RemoveManagedCardConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/RemoveManagedCardConflictErrorCode"
    RemoveManagedCardConflictErrorCode:
      type: "string"
      enum:
      - "BALANCE_NOT_ZERO"
      - "INSTRUMENT_ALREADY_REMOVED"
    UpdateManagedCardRequest:
      type: "object"
      properties:
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        friendlyName:
          maxLength: 50
          minLength: 1
          type: "string"
          x-fieldValidation: "has_text size(1,50)"
        cardholderMobileNumber:
          maxLength: 20
          minLength: 5
          pattern: "^\\+[0-9]+$"
          type: "string"
          description: "The mobile number including country code of the card holder\
            \ needed for 3DS challenge"
          x-fieldValidation: "size(5, 20) regex(^\\+[0-9]+$)"
    UpdateManagedCardConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/UpdateManagedCardConflictErrorCode"
    UpdateManagedCardConflictErrorCode:
      type: "string"
      enum:
      - "FRIENDLY_NAME_NOT_UNIQUE"
      - "INSTRUMENT_DESTROYED"
    DestroyManagedCardRequest:
      type: "object"
      properties:
        destroyType:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
    DestroyManagedCardConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/DestroyManagedCardConflictErrorCode"
    DestroyManagedCardConflictErrorCode:
      type: "string"
      enum:
      - "BALANCE_NOT_ZERO"
      - "INSTRUMENT_ALREADY_DESTROYED"
    CreateManagedCardRequest:
      required:
      - "currency"
      - "friendlyName"
      - "nameOnCard"
      - "owner"
      - "profileId"
      type: "object"
      properties:
        profileId:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        owner:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - description: "The ID and type of the identity that owns this instrument."
            x-fieldValidation: "required"
        friendlyName:
          maxLength: 50
          minLength: 1
          type: "string"
          x-fieldValidation: "required has_text size(1,50)"
        currency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          x-fieldValidation: "required size(3,3) regex([A-Z]*)"
        nameOnCard:
          maxLength: 27
          minLength: 1
          type: "string"
          x-fieldValidation: "required has_text size(1,27)"
        cardholderMobileNumber:
          maxLength: 20
          minLength: 5
          pattern: "^\\+[0-9]+$"
          type: "string"
          description: "The mobile number including country code of the card holder\
            \ needed for 3DS challenge"
          x-fieldValidation: "size(5, 20) regex(^\\+[0-9]+$)"
    CreateManagedCardConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/CreateManagedCardConflictErrorCode"
    CreateManagedCardConflictErrorCode:
      type: "string"
      enum:
      - "PROFILE_NOT_FOUND"
      - "PROFILE_INACTIVE"
      - "MODEL_CONSTRAINTS_VIOLATED"
      - "OWNER_NOT_FOUND"
      - "FRIENDLY_NAME_NOT_UNIQUE"
      - "CURRENCY_NOT_SUPPORTED_BY_PROFILE"
      - "PROVIDER_NOT_SUPPORTED_BY_PROFILE"
      - "INSUFFICIENT_FUNDS"
      - "SYSTEM_ERROR"
      - "INSTRUMENT_NOT_FOUND"
    FreezeManagedCardConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/FreezeManagedCardConflictErrorCode"
    FreezeManagedCardConflictErrorCode:
      type: "string"
      enum:
      - "INSTRUMENT_ALREADY_FROZEN"
    TransfersFilter:
      type: "object"
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        profileId:
          type: "integer"
          format: "int64"
        instrumentId:
          $ref: "#/components/schemas/TypeId"
        state:
          $ref: "#/components/schemas/TransferState"
        createdFrom:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
        createdTo:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
          x-fieldValidation: "exc_range(created_from, _)"
        transactionId:
          type: "array"
          items:
            type: "integer"
            format: "int64"
    TransferState:
      type: "string"
      enum:
      - "INITIALISED"
      - "COMPLETED"
      - "REJECTED"
      - "FAILED"
    Transfers:
      type: "object"
      properties:
        transfer:
          type: "array"
          items:
            $ref: "#/components/schemas/Transfer"
        count:
          type: "integer"
          description: "Total number of records (excluding limit)"
          format: "int32"
        responseCount:
          type: "integer"
          description: "Total number of records returned in this response"
          format: "int32"
        action:
          type: "array"
          description: "The actions that can be performed on this particular resource\
            \ instance."
          items:
            $ref: "#/components/schemas/TransfersAction"
    Transfer:
      required:
      - "creationTimestamp"
      - "destination"
      - "destinationAmount"
      - "id"
      - "profileId"
      - "source"
      - "state"
      type: "object"
      properties:
        id:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        profileId:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        source:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        destination:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        destinationAmount:
          allOf:
          - $ref: "#/components/schemas/CurrencyAmount"
          - x-fieldValidation: "required"
        state:
          allOf:
          - $ref: "#/components/schemas/TransferState"
          - x-fieldValidation: "required"
        creationTimestamp:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
          x-fieldValidation: "required"
        conflict:
          $ref: "#/components/schemas/CreateTransferConflictErrorCode"
      x-messageValidation: ""
    CreateTransferConflictErrorCode:
      type: "string"
      enum:
      - "NO_ERROR"
      - "PROFILE_INACTIVE"
      - "MODEL_CONSTRAINTS_VIOLATED"
      - "DENIED_BY_INTERCEPTOR"
      - "DENIED_BY_INSTRUMENT"
      - "DENIED_BY_FOREX_TRADE"
      - "CURRENCY_MISMATCH"
      - "ACCOUNT_BLOCKED"
      - "INSUFFICIENT_FUNDS"
      - "SYSTEM_ERROR"
      - "SOURCE_NOT_FOUND"
      - "DESTINATION_NOT_FOUND"
    TransfersAction:
      type: "string"
      enum:
      - "CREATE"
    CreateTransferRequest:
      required:
      - "destination"
      - "destinationAmount"
      - "profileId"
      - "source"
      type: "object"
      properties:
        profileId:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        source:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        destination:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        destinationAmount:
          allOf:
          - $ref: "#/components/schemas/CurrencyAmount"
          - x-fieldValidation: "required"
    CreateTransferConflict:
      type: "object"
      properties:
        errorCode:
          $ref: "#/components/schemas/CreateTransferConflictErrorCode"
    SendsFilter:
      type: "object"
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        profileId:
          type: "integer"
          format: "int64"
        instrumentId:
          $ref: "#/components/schemas/TypeId"
        state:
          $ref: "#/components/schemas/SendState"
        createdFrom:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
        createdTo:
          type: "integer"
          description: "Epoch timestamp using millisecond precision."
          format: "int64"
          x-fieldValidation: "exc_range(created_from, _)"
        transactionId:
          type: "array"
          items:
            type: "integer"
            format: "int64"
    SendState:
      type: "string"
      enum:
      - "INITIALISED"
      - "COMPLETED"
      - "REJECTED"
      - "FAILED"
    Sends:
      type: "object"
      properties:
        send:
          type: "array"
          items:
            $ref: "#/components/schemas/Send"
        count:
          type: "integer"
          description: "Total number of records (excluding limit)"
          format: "int32"
        responseCount:
          type: "integer"
          description: "Total number of records returned in this response"
          format: "int32"
        action:
          type: "array"
          description: "The actions that can be performed on this particular resource\
            \ instance."
          items:
            $ref: "#/components/schemas/SendsAction"
    Send:
      required:
      - "creationTimestamp"
      - "destination"
      - "destinationAmount"
      - "id"
      - "profileId"
      - "source"
      - "state"
      type: "object"
      properties:
        id:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        profileId:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        source:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        destination:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        destinationAmount:
          allOf:
          - $ref: "#/components/schemas/CurrencyAmount"
          - x-fieldValidation: "required"
        state:
          allOf:
          - $ref: "#/components/schemas/SendState"
          - x-fieldValidation: "required"
        creationTimestamp:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
        conflict:
          $ref: "#/components/schemas/CreateSendConflictErrorCode"
      x-messageValidation: ""
    CreateSendConflictErrorCode:
      type: "string"
      enum:
      - "PROFILE_INACTIVE"
      - "MODEL_CONSTRAINTS_VIOLATED"
      - "DENIED_BY_INTERCEPTOR"
      - "DENIED_BY_INSTRUMENT"
      - "DENIED_BY_FOREX_TRADE"
      - "CURRENCY_MISMATCH"
      - "ACCOUNT_BLOCKED"
      - "SOURCE_NOT_FOUND"
      - "DESTINATION_NOT_FOUND"
    SendsAction:
      type: "string"
      enum:
      - "CREATE"
    CreateSendRequest:
      required:
      - "destination"
      - "destinationAmount"
      - "profileId"
      - "source"
      type: "object"
      properties:
        profileId:
          type: "integer"
          format: "int64"
          x-fieldValidation: "required"
        tag:
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
          type: "string"
          x-fieldValidation: "size(_,50) regex(^[a-zA-Z0-9_-]+$)"
        source:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        destination:
          allOf:
          - $ref: "#/components/schemas/TypeId"
          - x-fieldValidation: "required"
        destinationAmount:
          allOf:
          - $ref: "#/components/schemas/CurrencyAmount"
          - x-fieldValidation: "required"
    CreateSendConflict:
      required:
      - "errorCode"
      type: "object"
      properties:
        errorCode:
          allOf:
          - $ref: "#/components/schemas/CreateSendConflictErrorCode"
          - x-fieldValidation: "required"
  parameters:
    call-ref:
      name: "call-ref"
      in: "header"
      description: "A call reference generated by the caller and unique to the caller\
        \ to provide correlation between the caller and system"
      required: false
      style: "simple"
      explode: false
      schema:
        type: "string"
    programme-key:
      name: "programme-key"
      in: "header"
      required: true
      style: "simple"
      explode: false
      schema:
        type: "string"
  headers:
    create-id:
      description: "The generated id for the call"
      required: true
      style: "simple"
      explode: false
      schema:
        type: "string"
  securitySchemes:
    API_Secret_Key:
      type: "apiKey"
      description: "The API Secret Key - available from the Configuration area of\
        \ the Innovator Portal"
      name: "programme-key"
      in: "header"
    Auth_Token:
      type: "http"
      description: "Authorization Token returned by login - example format: e6YrWi53lW0Bb6TbBL4ADA=="
      scheme: "bearer"
      bearerFormat: "JWT"