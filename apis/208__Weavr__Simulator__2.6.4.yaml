--
openapi: "3.0.1"
info:
  title: "Weavr Simulator"
  description: "This is a Simulator API which is only available on the Weavr Build\
    \ Environment"
  contact:
    name: "Weavr"
    url: "http://weavr.io"
  version: "2.6.4"
servers:
- url: "https://build.weavr.io/simulate/api"
paths:
  /accounts/deposit:
    post:
      tags:
      - "Accounts"
      description: "This tool is used to simulate deposits into managed accounts.\
        \ Provide bank details for the deposit and the transaction will be processed\
        \ through the system."
      operationId: "accounts_deposit"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepositRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DepositResponse"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /cards/purchase:
    post:
      tags:
      - "Cards"
      description: "Simulate card purchases. Provide card details and transaction\
        \ amount and the transaction will be processed through the system."
      operationId: "cards_purchase"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PurchaseRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseResponse"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /consumers/{consumer_id}/verify:
    post:
      tags:
      - "Consumers"
      description: "Fully verify a consumer identity. Will set emailVerified, mobileVerified,\
        \ isPep (as false), isSanctioned (as false) and fullDueDiligence (as APPROVED)."
      operationId: "consumers_consumer_id_verify"
      parameters:
      - name: "consumer_id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        204:
          description: "Success - No Content"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /corporates/{corporate_id}/verify:
    post:
      tags:
      - "Corporates"
      description: "Fully verify a corporate identity. Will set rootEmailVerified,\
        \ rootMobileVerified, directorsVerified, UBOsVerified, basicCompanyChecksVerified\
        \ and fullCompanyChecksVerified"
      operationId: "corporates_corporate_id_verify"
      parameters:
      - name: "corporate_id"
        in: "path"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - $ref: "#/components/parameters/call-ref"
      responses:
        204:
          description: "Success - No Content"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /secure_session/anon_tokenize:
    post:
      tags:
      - "Secure Session"
      description: "Given a map (key, detokenized), tokenizes and returns map<key,\
        \ tokenized> (only temporary tokenization is allowed, tokens are created without\
        \ owner)"
      operationId: "secure_session_anon_tokenize"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimulateTokenizeRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimulateTokenizeResponse"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - API_Secret_Key: []
  /secure_session/detokenize:
    post:
      tags:
      - "Secure Session"
      description: "Given a token, returns detokenized data (if token is valid and\
        \ secure session is authenticated with the owner of the token, otherwise 404\
        \ is returned)"
      operationId: "secure_session_detokenize"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimulateDetokenizeRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimulateDetokenizeResponse"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
  /secure_session/tokenize:
    post:
      tags:
      - "Secure Session"
      description: "Given a map (key, detokenized), tokenizes and returns map<key,\
        \ tokenized> (tokens are created with owner)"
      operationId: "secure_session_tokenize"
      parameters:
      - $ref: "#/components/parameters/call-ref"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimulateTokenizeRequest"
        required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimulateTokenizeResponse"
        400:
          description: "Invalid Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInvalidRequest"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
      security:
      - Auth_Token: []
        API_Secret_Key: []
components:
  schemas:
    DepositRequest:
      required:
      - "depositAmount"
      - "iban"
      type: "object"
      properties:
        iban:
          type: "string"
          description: "The iban of the account where the funds should be deposited\
            \ to."
          x-fieldValidation: "required has_text"
        paymentReference:
          type: "string"
          description: "The payment reference is needed to identify which account,\
            \ in cases where the same iban is used"
        depositAmount:
          allOf:
          - $ref: "#/components/schemas/CurrencyAmount"
          - description: "The amount of the deposit"
            x-fieldValidation: "required"
    CurrencyAmount:
      required:
      - "currency"
      type: "object"
      properties:
        currency:
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
          type: "string"
          description: "The currency ISO-4217 code, i.e. a three letter uppercase\
            \ code, such as GBP, EUR, USD."
          x-fieldValidation: "required size(3,3) regex([A-Z]*)"
        amount:
          type: "integer"
          description: "The monetary amount, scaled to the lowest denomination of\
            \ the currency. For example, an amount of 1000 for a EUR currency is actually\
            \ 1000 Euro cents, i.e. EUR 10.00."
          format: "int64"
      description: "A message representing a monetary amount in a particular currency."
    DepositResponse:
      type: "object"
      properties:
        code:
          $ref: "#/components/schemas/DepositResponseDepositResponseCode"
    DepositResponseDepositResponseCode:
      type: "string"
      enum:
      - "COMPLETED"
      - "DENIED_ACCOUNT_NOT_FOUND"
      - "DENIED_AMOUNT_NOT_POSITIVE"
      - "DENIED_CURRENCY_NOT_ACCOUNT_CURRENCY"
      - "DENIED_OTHER"
    ClientInvalidRequest:
      type: "object"
      properties:
        message:
          maxLength: 255
          type: "string"
          description: "When present helps to identify and fix the problem."
          x-fieldValidation: "size(_,255)"
        validation:
          allOf:
          - $ref: "#/components/schemas/MessageValidation"
          - description: "Description of fields which were invalid."
    MessageValidation:
      type: "object"
      properties:
        invalid:
          type: "boolean"
        fields:
          type: "array"
          items:
            $ref: "#/components/schemas/FieldValidationErrors"
    FieldValidationErrors:
      type: "object"
      properties:
        name:
          type: "string"
        errors:
          type: "array"
          items:
            $ref: "#/components/schemas/FieldValidation"
    FieldValidation:
      type: "object"
      properties:
        type:
          $ref: "#/components/schemas/FieldValidationType"
        params:
          type: "array"
          items:
            type: "string"
    FieldValidationType:
      type: "string"
      enum:
      - "REQUIRED"
      - "HAS_TEXT"
      - "REQUIRES"
      - "SIZE"
      - "RANGE"
      - "IN"
      - "NOT_IN"
      - "REGEX"
      - "EXACTLY"
      - "AT_LEAST"
      - "AT_MOST"
      - "ALL_OR_NONE"
    DefaultError:
      type: "object"
      properties:
        message:
          maxLength: 255
          type: "string"
          description: "When present helps to identify and fix the problem."
          x-fieldValidation: "size(_,255)"
      description: "A default error model in case of errors other than 400, 409 or\
        \ 504."
    PurchaseRequest:
      required:
      - "cardNumber"
      - "cvv"
      - "expiryDate"
      - "merchantName"
      - "transactionAmount"
      type: "object"
      properties:
        cardNumber:
          type: "string"
          description: "The 16-digit card number. No spaces."
          x-fieldValidation: "required has_text"
        cvv:
          type: "string"
          description: "The 3-digit cvv"
          x-fieldValidation: "required has_text"
        expiryDate:
          type: "string"
          description: "The expiry date in format MMYY"
          x-fieldValidation: "required has_text"
        merchantName:
          type: "string"
          description: "The merchant name"
          x-fieldValidation: "required has_text"
        transactionAmount:
          allOf:
          - $ref: "#/components/schemas/CurrencyAmount"
          - description: "The amount of the purchase"
            x-fieldValidation: "required"
    PurchaseResponse:
      type: "object"
      properties:
        code:
          $ref: "#/components/schemas/PurchaseResponsePurchaseResponseCode"
    PurchaseResponsePurchaseResponseCode:
      type: "string"
      enum:
      - "APPROVED"
      - "DENIED_NOT_ENOUGH_FUNDS"
      - "DENIED_CARD_NOT_FOUND"
      - "DENIED_INCORRECT_CVV"
      - "DENIED_CARD_EXPIRY"
      - "DENIED_AMOUNT_NOT_POSITIVE"
      - "DENIED_OTHER"
    SimulateTokenizeRequest:
      required:
      - "values"
      type: "object"
      properties:
        values:
          minProperties: 1
          type: "object"
          additionalProperties:
            $ref: "#/components/schemas/SimulateTokenizeValue"
          x-keyType: "string"
          x-fieldValidation: "required"
          x-keysValidation: "has_text"
          x-valuesValidation: "required"
    SimulateTokenizeValue:
      required:
      - "field"
      - "value"
      type: "object"
      properties:
        value:
          type: "string"
          x-fieldValidation: "required has_text"
        field:
          allOf:
          - $ref: "#/components/schemas/Field"
          - x-fieldValidation: "required"
    Field:
      type: "string"
      enum:
      - "PASSWORD"
      - "PASSWORD_NUMERIC"
      - "CARD_NUMBER"
      - "CVV"
    SimulateTokenizeResponse:
      required:
      - "tokens"
      type: "object"
      properties:
        tokens:
          minProperties: 1
          type: "object"
          additionalProperties:
            type: "string"
          x-keyType: "string"
          x-fieldValidation: "required"
          x-keysValidation: "required has_text"
          x-valuesValidation: "required has_text"
    SimulateDetokenizeRequest:
      required:
      - "field"
      - "token"
      type: "object"
      properties:
        token:
          type: "string"
          x-fieldValidation: "required has_text"
        field:
          allOf:
          - $ref: "#/components/schemas/Field"
          - x-fieldValidation: "required"
    SimulateDetokenizeResponse:
      required:
      - "value"
      type: "object"
      properties:
        value:
          type: "string"
          x-fieldValidation: "required has_text"
  parameters:
    call-ref:
      name: "call-ref"
      in: "header"
      description: "A call reference generated by the caller and unique to the caller\
        \ to provide correlation between the caller and system"
      required: false
      style: "simple"
      explode: false
      schema:
        type: "string"
    programme-key:
      name: "programme-key"
      in: "header"
      required: true
      style: "simple"
      explode: false
      schema:
        type: "string"
  headers:
    create-id:
      description: "The generated id for the call"
      required: true
      style: "simple"
      explode: false
      schema:
        type: "string"
  securitySchemes:
    API_Secret_Key:
      type: "apiKey"
      description: "The API Secret Key - available from the Configuration area of\
        \ the Innovator Portal"
      name: "programme-key"
      in: "header"
    Auth_Token:
      type: "http"
      description: "Authorization Token returned by login - example format: e6YrWi53lW0Bb6TbBL4ADA=="
      scheme: "bearer"
      bearerFormat: "JWT"