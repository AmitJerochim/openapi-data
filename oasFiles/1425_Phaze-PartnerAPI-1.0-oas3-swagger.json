{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "Phaze API",
    "version" : "1.0-oas3",
    "title" : "Partner API",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags" : [ {
    "name" : "partners",
    "description" : "Operations available to regular developers"
  } ],
  "paths" : {
    "/brands/countries" : {
      "get" : {
        "tags" : [ "partners" ],
        "summary" : "Country list",
        "operationId" : "listBrandCountries",
        "description" : "Retrieve list of countries that we have brands/giftcards for",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/Signature"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "example" : [ "Argentina", "Australia", "Canada", "New Zealand", "UK", "USA" ],
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/brands/country/{country}" : {
      "get" : {
        "tags" : [ "partners" ],
        "summary" : "Retrieves supported brands",
        "operationId" : "listBrands",
        "description" : "Retrieves the list of brands (gift cards) filtered by country name. \n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/Signature"
        }, {
          "in" : "path",
          "name" : "country",
          "description" : "Should be equal to one of the countries returned by /brands/countries, or \"ALL\" to get brands for every country.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of giftcard brands in a specific country",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Brands"
                  }, {
                    "$ref" : "#/components/schemas/PaginationResponse"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid country code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{id}" : {
      "get" : {
        "tags" : [ "partners" ],
        "summary" : "Retrieve singular brand",
        "operationId" : "getBrand",
        "description" : "Retrieves a single brand (gift card).",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/currency"
        }, {
          "$ref" : "#/components/parameters/Signature"
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The productId field from a given brand",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Brand details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Brand"
                }
              }
            }
          },
          "400" : {
            "description" : "Requested currency is not supported",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Product by the given ID is not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict in resolving currency data sources for your account, or resolving the currency of a giftcard brand. If this error occurs, reach out to support.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/purchase" : {
      "post" : {
        "tags" : [ "partners" ],
        "summary" : "Purchase a gift card",
        "operationId" : "purchase",
        "description" : "Note that the orderId must be unique. Requests with existing orderId will be rejected. This mechanism is designed to prevent duplicate orders in case of network error.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/Signature"
        } ],
        "requestBody" : {
          "description" : "Body parameters describing the giftcard to purchase",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurchaseIn"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Result of giftcard purchase",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionPurchaseResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Duplicate orderId, insufficient balance, product id does not exist, product does not have the denomination (price)  specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Account currency is not supported by the connected data sources, product (gift card) currency is not supported, account does not reference currency data sources, or account references unknown data sources.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid body parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/topups/operators/:id" : {
      "get" : {
        "tags" : [ "partners" ],
        "summary" : "Mobile topup carrier, in currency",
        "description" : "Get a single operator with the face value(s) of the top up. Can specify a currency to convert from the operator's currency into a desired amount.",
        "operationId" : "getOperatorFaceValue",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/Signature"
        }, {
          "$ref" : "#/components/parameters/currency"
        }, {
          "in" : "path",
          "name" : "id",
          "description" : "The operatorId field from a given Operator",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of operators",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Operator"
                }
              }
            }
          }
        }
      }
    },
    "/topups/operators/country/:country" : {
      "get" : {
        "tags" : [ "partners" ],
        "summary" : "Mobile topup carriers",
        "description" : "List operators for mobile topups, for a given country.",
        "operationId" : "listOperators",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/CurrentPage"
        }, {
          "$ref" : "#/components/parameters/PerPage"
        }, {
          "$ref" : "#/components/parameters/Signature"
        }, {
          "in" : "path",
          "name" : "country",
          "description" : "Must be a valid ISO two digit country code",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of operators",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/PaginationResponse"
                  }, {
                    "type" : "object",
                    "properties" : {
                      "country" : {
                        "type" : "string",
                        "description" : "Country code based on ISO 3166 format",
                        "example" : "CA"
                      },
                      "operators" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/Operator"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          }
        }
      }
    },
    "/topups/purchase" : {
      "post" : {
        "tags" : [ "partners" ],
        "summary" : "Purchase a mobile topup",
        "operationId" : "purchaseTopup",
        "description" : "Note that the orderId must be unique. Requests with existing orderId will be rejected. This mechanism is designed to prevent duplicate orders in case of network error.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/Signature"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TopupPurchase"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Result of purchase",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionPurchaseResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Duplicate orderId, insufficient balance, operator id does not exist, operator does not support the amount  specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Account currency is not supported by the connected data sources, operator currency is not supported, account does not reference currency data sources, or account references unknown data sources.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid body parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions" : {
      "get" : {
        "tags" : [ "partners" ],
        "summary" : "Returns the list of past transactions",
        "operationId" : "listTransactions",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/CurrentPage"
        }, {
          "$ref" : "#/components/parameters/PerPage"
        }, {
          "$ref" : "#/components/parameters/Signature"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of past transactions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Transactions"
                  }, {
                    "$ref" : "#/components/schemas/PaginationResponse"
                  } ]
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks" : {
      "get" : {
        "tags" : [ "partners" ],
        "summary" : "Returns list of registered webhooks",
        "operationId" : "listWebhooks",
        "description" : "List current webhooks registered",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/Signature"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of registered webhooks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "result" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Webhook"
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "partners" ],
        "summary" : "Create a new webhook",
        "operationId" : "createWebhook",
        "description" : "Creates a webhook for the given URL. The URL provided to this endpoint should accept POST requests of application/json type. The URL must be unique (i.e. more than one webhook cannot be created for the same URL).\nThe updated transaction data will be passed. This webhook fires whenever the status of a transaction changes.\n",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/Signature"
        } ],
        "responses" : {
          "200" : {
            "description" : "Created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400" : {
            "description" : "Duplicate URL",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "url", "api_key", "authorization_header_name" ],
                "properties" : {
                  "url" : {
                    "type" : "string",
                    "description" : "The URL of the API for us to send status updates to when a transaction status changes. The URL should accept POST requests",
                    "example" : "https://api.partner.com/api/phaze-webhook"
                  },
                  "apiKey" : {
                    "type" : "string",
                    "description" : "The API key to use"
                  },
                  "authorizationHeaderName" : {
                    "type" : "string",
                    "description" : "The name of the header that will be used to pass the API key in the request to the webhook",
                    "example" : "Authorization"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{id}" : {
      "delete" : {
        "tags" : [ "partners" ],
        "summary" : "Delete a given webhook",
        "operationId" : "deleteWebhook",
        "description" : "Deletes a webhook by its id",
        "parameters" : [ {
          "$ref" : "#/components/parameters/APIKey"
        }, {
          "$ref" : "#/components/parameters/Signature"
        }, {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "description" : "The id of the webhook",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad Request('This account has no existing webhook with that id')"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    }
  },
  "servers" : [ {
    "url" : "https://api.sandbox.phaze.io"
  }, {
    "url" : "https://api.phaze.io"
  } ],
  "components" : {
    "parameters" : {
      "APIKey" : {
        "name" : "API-Key",
        "description" : "Either the sandbox or production API Key, depending on base URL",
        "in" : "header",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "083da80d2c6243ae987210b1f21d721b"
        }
      },
      "currency" : {
        "name" : "currency",
        "description" : "The currency to respond with for denomination values",
        "in" : "query",
        "schema" : {
          "type" : "string",
          "example" : "ETH"
        }
      },
      "PerPage" : {
        "name" : "perPage",
        "in" : "query",
        "schema" : {
          "type" : "number",
          "example" : 10
        }
      },
      "CurrentPage" : {
        "name" : "currentPage",
        "in" : "query",
        "schema" : {
          "type" : "number",
          "example" : 1
        }
      },
      "FromDate" : {
        "name" : "fromDate",
        "in" : "query",
        "schema" : {
          "type" : "string",
          "example" : "2019-01-15 18:15:39.063"
        }
      },
      "ToDate" : {
        "name" : "toDate",
        "in" : "query",
        "schema" : {
          "type" : "string",
          "example" : "2019-01-15 18:15:39.063"
        }
      },
      "Signature" : {
        "name" : "signature",
        "in" : "header",
        "description" : "Encoded URL & request body + secret to verify. Use a sha256 hash on the request details. The hash should contain:\n```javascript var hash = sha256(`${requestMethod}${requestPath}${requestSecrety}${requestBody}`) ```\n\nExample:\n```javascript\nconst requestMethod = 'GET'\nconst url = '/transactions?per_page=20&current_page=1'\nconst signature = sha256(`${requestMethod}${url}${requestSecret}`)\n// for a post request\nconst requestMethod = 'POST'\nconst url = '/webhooks'\nconst body = {\n  url: 'https://mydomain.com/api/phaze-webhook',\n  apiKey: 'abc123',\n  authorizationHeaderName: 'Authorization'\n}\nconst signature = sha256(`${requestMethod}${url}${requestSecret}${JSON.stringify(body)}`)\n```\n\nThe JSON body should not have any whitespace. JSON.stringify trims whitespace, and that's how the Phaze backend is verifying the signature.\n\nThe request secret can be retrieved from the admin panel. The body for a POST or PUT request should be converted into a string, and whitespace should be removed.\n\nIf the path has any spaces in it, they should not be encoded when creating the signature.\n",
        "schema" : {
          "type" : "string",
          "example" : "bd210c1753675d426384de1449328b525f21510f93b95379fe9111c0bbcb68b1"
        }
      }
    },
    "schemas" : {
      "ErrorResponse" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "example" : "This error occurred"
          }
        }
      },
      "PaginationResponse" : {
        "type" : "object",
        "required" : [ "totalCount", "currentPage", "perPage" ],
        "properties" : {
          "currentPage" : {
            "type" : "number",
            "example" : 1
          },
          "perPage" : {
            "type" : "number",
            "example" : 10
          },
          "totalCount" : {
            "type" : "number",
            "example" : 50
          }
        }
      },
      "Webhook" : {
        "type" : "object",
        "required" : [ "id", "url", "apiKey", "authorizationHeaderName" ],
        "properties" : {
          "id" : {
            "type" : "number",
            "example" : 1
          },
          "accountId" : {
            "type" : "number",
            "description" : "The account/partner the webhook belongs to",
            "example" : 1
          },
          "url" : {
            "type" : "string",
            "description" : "The URL of the API for us to send status updates to when a transaction status changes. The URL should accept POST requests",
            "example" : "https://api.partner.com/api/phaze-webhook"
          },
          "apiKey" : {
            "type" : "string",
            "description" : "The API key to use"
          },
          "authorizationHeaderName" : {
            "type" : "string",
            "description" : "The name of the header that will be used to pass the API key in the request to the webhook",
            "example" : "Authorization"
          },
          "created_at" : {
            "type" : "string",
            "example" : "2019-01-15T18:15:39.063Z"
          },
          "updated_at" : {
            "type" : "string",
            "example" : "2019-01-15T18:15:39.063Z"
          }
        }
      },
      "Brands" : {
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "Country name for brands",
            "example" : "CA"
          },
          "brands" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Brand"
            }
          }
        }
      },
      "Brand" : {
        "properties" : {
          "brandName" : {
            "type" : "string",
            "description" : "Human readable name of the brand",
            "example" : "Amazon.ca"
          },
          "countryName" : {
            "type" : "string",
            "description" : "Country code based on ISO 3166 format",
            "example" : "CA"
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency the denominations are presented in",
            "example" : "CAD"
          },
          "denominations" : {
            "type" : "array",
            "description" : "List of voucher values for purchase",
            "items" : {
              "type" : "string"
            },
            "example" : [ 5, 10, 25, 50, 100, 250, 500 ]
          },
          "productId" : {
            "type" : "number",
            "description" : "Unique ID of the brand, use this code for /purchase API call",
            "example" : 12321
          },
          "productImage" : {
            "type" : "string",
            "description" : "url of an image for the product",
            "example" : "https://res.cloudinary.com/dyyjph6kx/image/upload/gift_vouchers/phpNzrB40_wfqxzv.jpg"
          }
        }
      },
      "PurchaseIn" : {
        "type" : "object",
        "required" : [ "orderId", "productId", "price" ],
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "A unique string to identify this transaction",
            "example" : "autotest0001"
          },
          "productId" : {
            "type" : "number",
            "description" : "The productId returned by /brands/country API",
            "example" : 23
          },
          "price" : {
            "type" : "string",
            "description" : "The denomination of the gift card",
            "example" : 10.0
          },
          "externalUserId" : {
            "type" : "string",
            "description" : "Optional field to tie the transaction to a given user",
            "example" : "abc123efg"
          }
        }
      },
      "TopupPurchase" : {
        "type" : "object",
        "required" : [ "orderId", "operatorId", "amount" ],
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "A unique string to identify this order",
            "example" : "autotest0001"
          },
          "operatorId" : {
            "type" : "string",
            "description" : "The operatorId returned by /topups/operators/country API",
            "example" : 55
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount of the topup. Needs to match what amounts the operator as available.",
            "example" : 20.99
          },
          "externalUserId" : {
            "type" : "string",
            "description" : "Optional field to tie the transaction to a given user",
            "example" : "abc123efg"
          },
          "recipientPhoneNumber" : {
            "type" : "string",
            "description" : "The phone number of who will receive the topup. Should lead with a + sign. Include the 1 for Canadian & US phone numbers",
            "example" : "+14163970816"
          },
          "recipientPhoneCountryCode" : {
            "type" : "string",
            "description" : "The country code for the phone number",
            "example" : "CA"
          }
        }
      },
      "Transactions" : {
        "type" : "object",
        "required" : [ "result" ],
        "properties" : {
          "result" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Transaction"
            }
          }
        }
      },
      "TransactionPurchaseResponse" : {
        "properties" : {
          "id" : {
            "type" : "number",
            "description" : "Identifier for the transaction, internal to Phaze",
            "example" : 1
          },
          "accountId" : {
            "type" : "number",
            "description" : "The account id this transaction belongs to",
            "example" : 203
          },
          "productId" : {
            "type" : "string",
            "description" : "The 'product_id' specified in /purchase API",
            "example" : "amazonca"
          },
          "productName" : {
            "type" : "string",
            "description" : "The product name from the gift card"
          },
          "orderId" : {
            "type" : "string",
            "description" : "Unique order ID that was supplied to /purchase as 'orderId'",
            "example" : "autotest0001"
          },
          "externalUserId" : {
            "type" : "string",
            "description" : "The 'userId' that was set when purchased. Can be null",
            "example" : "abcdefg123"
          },
          "voucherDiscountPercent" : {
            "type" : "number",
            "description" : "The percentage of discount applied to the product from the vendor."
          },
          "currencyPaid" : {
            "type" : "string",
            "description" : "The currency type that was used to pay for this order",
            "example" : "BTC"
          },
          "price" : {
            "type" : "number",
            "description" : "The denomination of the gift card in cents",
            "example" : 1000
          },
          "fxRate" : {
            "type" : "number",
            "description" : "The transaction exchange rate",
            "example" : 0.015
          },
          "currencyConversions" : {
            "type" : "object",
            "description" : "The conversion rates used in calculating the cost of the transaction",
            "example" : "{\n  \"USDCAD\": 1.315  \n}"
          },
          "total" : {
            "type" : "number",
            "description" : "The sum of price and fee",
            "example" : 1050
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the transaction",
            "enum" : [ "pending", "failed" ]
          },
          "responseData" : {
            "type" : "object",
            "description" : "Response data, will be empty until the transaction is processed",
            "example" : "{}"
          },
          "requestData" : {
            "type" : "object",
            "description" : "Extra parameters captured depending on the type of purchase. Where phone number is stored for mobile topups",
            "example" : "{\n  \"recipientPhoneNumber\": \"+14163970816\",\n  \"recipientPhoneCountryCode\": \"CA\"\n}"
          },
          "voucherCurrency" : {
            "type" : "string",
            "description" : "The currency the product/voucher is in.",
            "example" : "CAD"
          },
          "commission" : {
            "type" : "number",
            "description" : "The amount of commission earned for your account from this transaction",
            "example" : 2.75
          },
          "error" : {
            "type" : "string",
            "description" : "The error message if the transaction failed. May be a stringified array, or a simple string",
            "example" : "[\"error one\", \"error two\"]"
          },
          "created_at" : {
            "type" : "string",
            "description" : "Timestamp of the moment the giftcard was purchased",
            "example" : "2019-01-15T18:15:39.063Z"
          },
          "updated_at" : {
            "type" : "string",
            "example" : "2019-01-15T18:15:39.063Z"
          }
        }
      },
      "Transaction" : {
        "properties" : {
          "id" : {
            "type" : "number",
            "description" : "Identifier for the transaction, internal to Phaze",
            "example" : 1
          },
          "accountId" : {
            "type" : "number",
            "description" : "The account id this transaction belongs to",
            "example" : 203
          },
          "productId" : {
            "type" : "string",
            "description" : "The 'product_id' specified in /purchase API",
            "example" : "amazonca"
          },
          "productName" : {
            "type" : "string",
            "description" : "The product name from the gift card"
          },
          "orderId" : {
            "type" : "string",
            "description" : "Unique order ID that was supplied to /purchase as 'orderId'",
            "example" : "autotest0001"
          },
          "externalUserId" : {
            "type" : "string",
            "description" : "The 'userId' that was set when purchased. Can be null",
            "example" : "abcdefg123"
          },
          "voucherDiscountPercent" : {
            "type" : "number",
            "description" : "The percentage of discount applied to the product from the vendor."
          },
          "currencyPaid" : {
            "type" : "string",
            "description" : "The currency type that was used to pay for this order",
            "example" : "BTC"
          },
          "price" : {
            "type" : "number",
            "description" : "The denomination of the gift card in cents",
            "example" : 1000
          },
          "fxRate" : {
            "type" : "number",
            "description" : "The transaction exchange rate",
            "example" : 0.015
          },
          "currencyConversions" : {
            "type" : "object",
            "description" : "The conversion rates used in calculating the cost of the transaction",
            "example" : "{\n  \"USDCAD\": 1.315  \n}"
          },
          "total" : {
            "type" : "number",
            "description" : "The sum of price and fee",
            "example" : 1050
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the transaction",
            "enum" : [ "pending", "failed", "processed" ]
          },
          "responseData" : {
            "type" : "object",
            "description" : "Response data captured from the successful purchase",
            "example" : "Gift card purchase: {\n  \"success\": 1,\n  \"order_id\": \"ORD123\",\n  \"vouchers\" : [\n    {\n      \"code\": \"DEMO CODE\",\n      \"pin\": \"DEMO PIN\",\n      \"validity_date\": \"1970-01-01\",\n      \"amount\": \"500\"\n    }  \n  ] \n}\nMobile topup: {\n  \"transactionId\": 282571,\n  \"operatorTransactionId\": 578458945,\n  \"customIdentifier\": \"fduif0-43844-djdsdiu-3223\",\n  \"recipientPhone\": \"14388352599\",\n  \"countryCode\": \"CA\",\n  \"operatorId\": 62,\n  \"operatorName\": \"Rogers PIN Canada\",\n  \"discount\": 0.26,\n  \"discountCurrencyCode\": \"USD\",\n  \"requestedAmount\": 8.55,\n  \"requestedAmountCurrencyCode\": \"USD\",\n  \"deliveredAmount\": 11.13,\n  \"deliveredAmountCurrencyCode\": \"CAD\",\n  \"transactionDate\": \"2020-01-31 10:40:16\"\n  \"pinDetail\": {\n    \"serial\": \"846574\",\n    \"info1\": \"DIAL *611\",\n    \"info2\": \"DIAL *611\",\n    \"info3\": \"DIAL *611\",\n    \"value\": null,\n    \"code\": \"773709732479946\",\n    \"ivr\": \"1-888-888-8888\",\n    \"validity\": \"90 days\"\n  }\n}"
          },
          "requestData" : {
            "type" : "object",
            "description" : "Extra parameters captured depending on the type of purchase. Where phone number is stored for mobile topups",
            "example" : "{\n  \"recipientPhoneNumber\": \"+14163970816\",\n  \"recipientPhoneCountryCode\": \"CA\"\n}"
          },
          "voucherCurrency" : {
            "type" : "string",
            "description" : "The currency the product/voucher is in.",
            "example" : "CAD"
          },
          "commission" : {
            "type" : "number",
            "description" : "The amount of commission earned for your account from this transaction",
            "example" : 2.75
          },
          "error" : {
            "type" : "string",
            "description" : "The error message if the transaction failed. May be a stringified array, or a simple string",
            "example" : "[\"error one\", \"error two\"]"
          },
          "created_at" : {
            "type" : "string",
            "description" : "Timestamp of the moment the giftcard was purchased",
            "example" : "2019-01-15T18:15:39.063Z"
          },
          "updated_at" : {
            "type" : "string",
            "example" : "2019-01-15T18:15:39.063Z"
          }
        }
      },
      "Operator" : {
        "type" : "object",
        "properties" : {
          "operatorId" : {
            "type" : "number",
            "example" : 1
          },
          "name" : {
            "type" : "string",
            "example" : "Telus"
          },
          "denominationType" : {
            "type" : "string",
            "description" : "The type of denominations for this operator. For RANGED, an number between fields minAmount & maxAmount can be used. For FIXED, a number from the fixedAmounts array should be used.",
            "enum" : [ "RANGE", "FIXED" ]
          },
          "destinationCurrencyCode" : {
            "type" : "string",
            "description" : "The currency code for the operator",
            "example" : "CAD"
          },
          "destinationCurrencySymbol" : {
            "type" : "string",
            "description" : "The symbol used to represent the operator's currency",
            "example" : "$"
          },
          "minAmount" : {
            "type" : "number",
            "example" : 1.0
          },
          "maxAmount" : {
            "type" : "number",
            "example" : 100.0
          },
          "country" : {
            "type" : "object",
            "properties" : {
              "isoName" : {
                "type" : "string",
                "example" : "CA"
              },
              "name" : {
                "type" : "string",
                "example" : "Canada"
              }
            }
          },
          "logoUrls" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "example" : "https://s3.amazon.com/logo.png"
            }
          },
          "fixedAmounts" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "example" : 10
            }
          }
        }
      }
    }
  }
}