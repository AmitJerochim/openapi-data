openapi: 3.0.0
servers:                                                 
  - description: 'Algopix API'
    url: https://api.algopix.com/v3
info:
  contact:
    email: 'support@algopix.com'
    name: 'Algopix Support'
  description: 'This is a sample Algopix server API  supporting the Product Data Enhancment API (beta). You can find out more about Algopix at [Algopix.com](http://algopix.com). This API will allow you send GTIN, ASIN or AID and recieve all the availible attributes regarding it'
  version: "1.0"
  title: Product Data Enhancment 
  termsOfService: 'https://algopix.com/policies'
paths:
  /product/enhancement/async:
    get:
      tags:
        - Request for a product 
      summary: 'Send GTIN,ASIN or AID to look for.'
      operationId: search
      security:
        - apiKey: []
          appId: []   # <-- no leading dash (-)
      responses:
        '200':
          description: 'Successful operation. The data contains metadata regarding the query that has been sent and includes request Id. The request Id will be useful when calling GetReadyReasults, as it links between the query that has been sent to the result'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseRequest'
        '400':
          description: 'Invalid identifier. Algopix support 12 or 13 GTINs, or AID (Algopix unique identifier)'
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          description: 'Request throttled.'
        '500':
          description: 'Oops, something went wrong.'
      parameters:
        - name: identifier
          in: query
          description: 'A identifier to send through the API. Algopix supports GTIN in 12 or 13 digit format, ASIN and AID (Algopix identifier)'
          schema:
            type: string
          required: true
        - name: markets
          in: query
          description: 'Comma-delimited market list to search for market specific data. In this version,Algopix supports Amazon_US and eBay_US markets'
          required: false
          schema:
              type: string
              default: amazon_us
  /product/enhancement/getReadyResults:
    get:
      tags:
        - Get ready results
      summary: 'Fetch ready results.'
      operationId: Get
      security:
        - apiKey: []
          appId: []   # <-- no leading dash (-)
      responses:
        '200':
          description: 'Successful operation. The data contains up to 10 products in each call. Each product (result) is assigned with metadata and request id- representing the call that has been made in order to retrieve it whie calling product/attributes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          description: 'Request throttled.'
        '500':
          description: 'Oops, something went wrong.'
components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-KEY
    appId:
      type: apiKey
      in: header
      name: X-APP-ID
  responses:
    UnauthorizedError:
      description: 'API key or App ID is missing or invalid.'
      # headers:
      #   WWW_Authenticate:
      #     schema:
      #       type: string
  schemas:
    ApiResponseRequest:
      type: object
      properties:
        timestamp:
          type: integer
          description: 'The number of seconds passed since epoch, representing the time this response was produced.'
        status:
          type: string
          enum:
            - SUCCESS
            - ERROR
            - WARNING
        statusMessage:
          type: string
        statusCode:
          type: integer
          description: 'Application level status code.'
        requestId: 
          type: string
          description: "Requset ID that represents the current API call"
      
    ApiResponse:
      type: object
      properties:
        timestamp:
          type: integer
          description: 'The number of seconds passed since epoch, representing the time this response was produced.'
        status:
          type: string
          enum:
            - SUCCESS
            - ERROR
            - WARNING
        statusMessage:
          type: string
        statusCode:
          type: integer
          description: 'Application level status code.'
        requestId: 
          type: string
          description: "Requset ID that represents the current API call"
        result:
          type: array
          items: 
            $ref: '#/components/schemas/Result'
        asyncApiStatus: 
            $ref: '#/components/schemas/AsyncApiStatus'
        
    Result:
      type: object
      properties:
        timestamp:
          type: integer
          description: 'The number of seconds passed since epoch, representing the time this response was produced.'
        status:
          type: string
          enum:
            - SUCCESS
            - ERROR
            - WARNING
        statusMessage:
          type: string
        statusCode:
          type: integer
          description: 'Application level status code.'
        requestId: 
          type: string
          description: "Requset ID that represents the parameters that have been sent (the request ID from 'Request for a category') and the result that has recieved"
        result:
          $ref: '#/components/schemas/Product'
      
    Product:
      type: object
      properties:
          aid:
            type: string
            description: Algopix product identifier
          brand:
            description: 'The brand name (if available).'
            type: string
          model:
            description: 'The item model (if available).'
            type: string
          color:
            description: 'The item color (if available).'
            type: string
          description:
            description: 'The item description (if available).'
            type: string
          itemDimensions:
            $ref: '#/components/schemas/Dimensions'
          packageDimensions:
            $ref: '#/components/schemas/Dimensions'
          algopixValidatedAttributes:
            type: object
            description: "All the attributes a product has, such as color, label etc"
            items:
              $ref: '#/components/schemas/AlgopixValidatedAttributes'
          marketplacesData:
            $ref: '#/components/schemas/MarketplacesData'
            
    Dimensions:
      type: object
      description: "Container for Height, Length, Weight, and Width."
      properties:
        width:
          $ref: '#/components/schemas/MeasuredValue'
        length:
          $ref: '#/components/schemas/MeasuredValue'
        height:
          $ref: '#/components/schemas/MeasuredValue'
        weight:
          $ref: '#/components/schemas/MeasuredValue'
          
    MeasuredValue:
      type: object
      properties:
        value:
          type: number
        unit:
          description: 'Type of measured unit'
          oneOf:
            - $ref: '#/components/schemas/LengthUnit'
            - $ref: '#/components/schemas/WeightUnit'
      required: ['unit']
      
    LengthUnit:
      type: string
      enum:
        - INCH
        - CM
        
    WeightUnit:
      type: string
      enum:
        - OUNCE
        - POUND

    SpecialUnitType:
      type: object
      properties:
        value:
          type: string
        unitType: 
          type: string
          
    AlgopixValidatedAttributes:
      type: object
      description: "All the availible attributes a product has and that were verified by Algopix"
      properties:
        actors:
          type: array
          items:
            type: string
        artist:
          type: string
        aspectRatio: 
          type: string
        audienceRating:
          type: string
        authors: 
          type: array
          items:
            type: string
        backFinding:
          type: string
        bandMaterialType:
          type: string
        blurayReigon:
          type: string
        chainType:
          type: string
        claspType:
          type: string
        cpuManafacturer: 
          type: string
        cpuSpeed: 
            $ref: '#/components/schemas/SpecialUnitType'
        cpuType:
          type: string
        contributors:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              role: 
                type: string
        directors: 
          type: array
          items:
            type: string
        displaySize:
            $ref: '#/components/schemas/SpecialUnitType'
        edition:
          type: string
        episodeSequence:
          type: string
        esrbAgeRating:
          type: string
        flavor:
          type: string
        format:
          type: string
        gemType:
          type: array
          items:
            type: string
        genere:
          type: string
        golfClubFlex:
          type: string
        golfClubLoft:
          $ref: '#/components/schemas/SpecialUnitType'
        handOrientation:
          type: string
        hardDiskInterface:
          type: string
        hardDiskSize: 
          $ref: '#/components/schemas/SpecialUnitType'
        hardwarePlatform:
          type: string
        hazardousMaterialType:
          type: string
        adultProduct: 
          type: boolean
        autographed: 
          type: boolean
        memorabilia: 
          type: boolean 
        issuesPerYear:
          type: string
        itemPartNumber:
          type: string
        label:
          type: string
        contentLanguages:
          type: array
          items:
            type: object
            properties:
              languageName:
                type: string
              type: 
                type: string #Yaniv- enum?
        legalDisclaimer:
          type: string
        manafacturer: 
          type: string
        manufacturerMaximumAge:
          $ref: '#/components/schemas/SpecialUnitType'
        manufacturerMinimumAge:
          $ref: '#/components/schemas/SpecialUnitType'
        manufacturerPartsWarrantyDescription:
          type: string
        materialType:
          type: array
          items:
            type: string
        maximumResolution: #Yaniv- this is the name of the value?
            $ref: '#/components/schemas/SpecialUnitType'
        metalStamp:
          type: string
        metalType:
          type: string
        model: 
          type: string
        numberOfDiscs:
          type: integer
        numberOfIssues:
          type: integer
        numberOfItems:
          type: integer
        numberOfPages:
          type: integer
        numberOfTracks:
          type: integer
        operatingSystems:
          type: array
          items:
            type: string
        opticalZoom:
          $ref: '#/components/schemas/SpecialUnitType'
        partNumber:
          type: string
        pegiRating: 
          type: string
        platform: 
          type: array
          items:
            type: string
        processorCount:
          type: integer
        publicationDate:
          type: string
        publisher:
          type: string
        releaseDate:
          type: string
        ringSize:
          type: string
        runningTime:
            $ref: '#/components/schemas/SpecialUnitType'
        shaftMaterial:
          type: string
        scent:
          type: string
        seasonSequence:
          type: string
        seikodoProductCode:
          type: string
        size: 
          type: string
        sizePerPearl:
          type: string
        studio:
          type: string
        subscriptionLength:
           $ref: '#/components/schemas/SpecialUnitType'
        systemMemorySize:
          type: string
        theatricalReleaseDate: #Yaiv- this is the name? 
          type: string
        totalDiamondWeight:
           $ref: '#/components/schemas/SpecialUnitType'
        totalGemWeight:
          $ref: '#/components/schemas/SpecialUnitType'
        
        warranty:
          type: string
        lang:
          type: string 
    
    MarketplaceData:
      type: object
      description: "All availible data points from a specific marketplace (e.g, AMAZON_US) "
      properties:
        title:
          type: string
        features:
          type: array
          items:
            type: string
        productDescription:
          type: string
        productDetails:
          type: object
          
    MarketplacesData:
      type: object
      properties:
        EBAY_US:
          $ref: '#/components/schemas/MarketplaceData'
        AMAZON_US:
          $ref: '#/components/schemas/MarketplaceData'

    AsyncApiStatus: 
      type: object
      properties: 
        resultsReadyCount: 
          type: number
        pendingRequestCount:
          type: number
