{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "REST API for Workflix",
    "version" : "1.1"
  },
  "paths" : {
    "/login" : {
      "post" : {
        "tags" : [ "login" ],
        "summary" : "Is used for login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "email", "password" ],
                "properties" : {
                  "email" : {
                    "type" : "string",
                    "example" : "ek@gmx.net"
                  },
                  "password" : {
                    "type" : "string",
                    "example" : 123456789
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "token", "userId" ],
                  "properties" : {
                    "token" : {
                      "type" : "string"
                    },
                    "userId" : {
                      "type" : "string",
                      "example" : "58c120552c94decf6cf3b701"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input"
          },
          "401" : {
            "description" : "could not authorize user with this credentials"
          }
        }
      },
      "delete" : {
        "tags" : [ "login" ],
        "summary" : "Logs the user out",
        "responses" : {
          "200" : {
            "description" : "operation successfull"
          },
          "400" : {
            "description" : "invalid request"
          },
          "404" : {
            "description" : "not login found"
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Lists all users",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "succesfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "users", "paging" ],
                  "properties" : {
                    "users" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/User"
                      }
                    },
                    "paging" : {
                      "$ref" : "#/components/schemas/Paging"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}" : {
      "parameters" : [ {
        "name" : "userId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "58c120552c94decf6cf3b701"
        }
      } ],
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Finds user by id",
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid user id"
          },
          "404" : {
            "description" : "user not found"
          }
        }
      }
    },
    "/users/{creationKey}" : {
      "parameters" : [ {
        "name" : "creationKey",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "a1b2c3d4"
        }
      } ],
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Validates the creation of a user by a key received by mail",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "email", "password" ],
                "properties" : {
                  "email" : {
                    "type" : "string",
                    "example" : "mail@qplix.com"
                  },
                  "password" : {
                    "type" : "string",
                    "example" : "password123"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "newId" ],
                  "properties" : {
                    "newId" : {
                      "type" : "string",
                      "example" : "58c120552c94decf6cf3b701"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid key or invalid input"
          },
          "404" : {
            "description" : "key not found"
          }
        }
      }
    },
    "/userCreationRequests" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Creates a new user creation request and sendy a mail with registration key",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "email" ],
                "properties" : {
                  "email" : {
                    "type" : "string",
                    "example" : "mail@qplix.com"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid input"
          },
          "404" : {
            "description" : "no such qplix user"
          }
        }
      }
    },
    "/userRoles" : {
      "get" : {
        "tags" : [ "user roles" ],
        "summary" : "Lists all user roles",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "roles", "paging" ],
                  "properties" : {
                    "roles" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/UserRole"
                      }
                    },
                    "paging" : {
                      "$ref" : "#/components/schemas/Paging"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid page"
          },
          "404" : {
            "description" : "page not found"
          }
        }
      },
      "post" : {
        "tags" : [ "user roles" ],
        "summary" : "Creats a new user role",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserRole"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "newId" ],
                  "properties" : {
                    "newId" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input"
          }
        }
      }
    },
    "/userRoles/{userRoleId}" : {
      "parameters" : [ {
        "name" : "userRoleId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      } ],
      "patch" : {
        "tags" : [ "user roles" ],
        "summary" : "Updates a user role by id",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserRole"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid id or invalid input"
          },
          "404" : {
            "description" : "user role not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user roles" ],
        "summary" : "Delets a user role by id",
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid id"
          },
          "404" : {
            "description" : "user role not found or user role could not be deleted becuase it is designated as responsible in an active (not deleted) process template"
          }
        }
      }
    },
    "/userRoles/{userRoleId}/members/{memberId}" : {
      "parameters" : [ {
        "name" : "userRoleId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      }, {
        "name" : "memberId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "58c120552c94decf6cf3b701"
        }
      } ],
      "put" : {
        "tags" : [ "user roles" ],
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "newId" ],
                  "properties" : {
                    "newId" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid user role id or invalid member id"
          },
          "404" : {
            "description" : "user role or member not found"
          },
          "409" : {
            "description" : "membership already exists"
          }
        }
      },
      "delete" : {
        "tags" : [ "user roles" ],
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid user role id or invalid member id"
          },
          "404" : {
            "description" : "membership not found"
          }
        }
      }
    },
    "/processGroups" : {
      "get" : {
        "tags" : [ "process groups" ],
        "summary" : "Lists all process groups",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "groups", "paging" ],
                  "properties" : {
                    "groups" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/ProcessGroup"
                      }
                    },
                    "paging" : {
                      "$ref" : "#/components/schemas/Paging"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid page"
          },
          "404" : {
            "description" : "page not found"
          }
        }
      },
      "post" : {
        "tags" : [ "process groups" ],
        "summary" : "Creates a new process group",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProcessGroup"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "newId" ],
                  "properties" : {
                    "newId" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input"
          }
        }
      }
    },
    "/processGroups/{processGroupId}" : {
      "parameters" : [ {
        "name" : "processGroupId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ],
      "patch" : {
        "tags" : [ "process groups" ],
        "summary" : "Updates a process group by id",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProcessGroup"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid id or invalid input"
          },
          "404" : {
            "description" : "process group not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "process groups" ],
        "summary" : "Delets a process group by id",
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid id"
          },
          "404" : {
            "description" : "process group not found"
          }
        }
      }
    },
    "/processGroups/{groupId}/members/{memberId}" : {
      "parameters" : [ {
        "name" : "groupId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      }, {
        "name" : "memberId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "58c120552c94decf6cf3b701"
        }
      } ],
      "put" : {
        "tags" : [ "process groups" ],
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "newId" ],
                  "properties" : {
                    "newId" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid group id or invalid member id"
          },
          "404" : {
            "description" : "group or member not found"
          },
          "409" : {
            "description" : "membership already exists"
          }
        }
      },
      "delete" : {
        "tags" : [ "process groups" ],
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid group id or invalid member id"
          },
          "404" : {
            "description" : "membership not found"
          }
        }
      }
    },
    "/processTemplates" : {
      "get" : {
        "tags" : [ "process templates" ],
        "summary" : "Lists all process templates",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "templates", "paging" ],
                  "properties" : {
                    "templates" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/ProcessTemplateMasterData"
                      }
                    },
                    "paging" : {
                      "$ref" : "#/components/schemas/Paging"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid page"
          },
          "404" : {
            "description" : "page not found"
          }
        }
      },
      "post" : {
        "tags" : [ "process templates" ],
        "summary" : "Creates a new process template",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProcessTemplate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "newId" ],
                  "properties" : {
                    "newId" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input"
          }
        }
      }
    },
    "/processTemplates/{processTemplateId}" : {
      "parameters" : [ {
        "name" : "processTemplateId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ],
      "get" : {
        "tags" : [ "process templates" ],
        "summary" : "Finds process template by id",
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProcessTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid id"
          },
          "404" : {
            "description" : "process template not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "process templates" ],
        "summary" : "Updates a process template by id",
        "description" : "The behavior in case of the alteration of an process template depends on the usage of the process template for the creation of processes. If the process template is not used yet for the creation of a process it is really altered. If the process template is already in use then the whole process template will be copied and the former version will be hided.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProcessTemplate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfull operation. Note that newId is null if the process template was really updated and therefore no new id was created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "newId" ],
                  "properties" : {
                    "newId" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid id or invalid input"
          },
          "404" : {
            "description" : "template not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "process templates" ],
        "summary" : "Deletes a process template by id",
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid id"
          },
          "404" : {
            "description" : "template not found"
          }
        }
      }
    },
    "/processes" : {
      "get" : {
        "tags" : [ "processes" ],
        "summary" : "Lists all processes",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "example" : "running"
          },
          "description" : "Limits the result to processes with the given status. Could be added multiple times. In this case all given statuses are considered."
        }, {
          "name" : "processGroupId",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "description" : "Limits the result to processes belonging to the specified process group. Could be added multiple times. In this cas all specified process groups are considered."
        }, {
          "name" : "involving",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "example" : "58c120552c94decf6cf3b701"
          },
          "description" : "Limits the result to processes of interesst for the specified user. Could NOT be added multiple times."
        } ],
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "processes", "paging" ],
                  "properties" : {
                    "processes" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/ProcessMasterData"
                      }
                    },
                    "paging" : {
                      "$ref" : "#/components/schemas/Paging"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid query"
          }
        }
      },
      "post" : {
        "tags" : [ "processes" ],
        "summary" : "Creates a new process",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProcessMasterData"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "newId" ],
                  "properties" : {
                    "newId" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input"
          }
        }
      }
    },
    "/processes/{processId}" : {
      "parameters" : [ {
        "name" : "processId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ],
      "get" : {
        "tags" : [ "processes" ],
        "summary" : "Finds a process by id",
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Process"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid id"
          },
          "404" : {
            "description" : "process not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "processes" ],
        "summary" : "Updates a process by id",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "title", "description", "deadline" ],
                "properties" : {
                  "title" : {
                    "type" : "string",
                    "example" : "Ein neuer Titel"
                  },
                  "description" : {
                    "type" : "string",
                    "example" : "Eine neue Beschreibung. Villeicht ist sie ja aussagekräftiger als die Alte."
                  },
                  "deadline" : {
                    "type" : "string",
                    "example" : "2019-12-30T13:35:39.357Z"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid process id or invalid input"
          },
          "404" : {
            "description" : "process not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "processes" ],
        "summary" : "Aborts a running process",
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid id"
          },
          "404" : {
            "description" : "running process not found"
          }
        }
      }
    },
    "/tasks/{taskId}/assignments/{assigneeId}" : {
      "parameters" : [ {
        "name" : "taskId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      }, {
        "name" : "assigneeId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      } ],
      "put" : {
        "tags" : [ "tasks" ],
        "summary" : "Creates a new assignment",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "immediateClosing" ],
                "properties" : {
                  "immediateClosing" : {
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "newId" ],
                  "properties" : {
                    "newId" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid task id or invalid assignee id or invalid input"
          },
          "404" : {
            "description" : "task or assignee not found"
          },
          "409" : {
            "description" : "assignment already exists"
          }
        }
      },
      "patch" : {
        "tags" : [ "tasks" ],
        "summary" : "Closes a assignment by its task id and its assignee id",
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid task id or invalid assignee id"
          },
          "404" : {
            "description" : "task assignment not found"
          },
          "409" : {
            "description" : "task or task assignment is already closed"
          }
        }
      },
      "delete" : {
        "tags" : [ "tasks" ],
        "summary" : "Deletes a assginment by its task id and its assignee id",
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid task id or invalid assignee id"
          },
          "404" : {
            "description" : "task assignment not found"
          },
          "409" : {
            "description" : "task or task assignment is already closed"
          }
        }
      }
    },
    "/tasks/{taskId}/comments" : {
      "parameters" : [ {
        "name" : "taskId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      } ],
      "post" : {
        "tags" : [ "tasks" ],
        "summary" : "Creates a new comment to a task",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaskComment"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "required" : [ "newId" ],
                  "properties" : {
                    "newId" : {
                      "type" : "integer",
                      "format" : "int64"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid task id or invalid input"
          },
          "404" : {
            "description" : "task not found"
          }
        }
      }
    },
    "/tasks/comments/{commentId}" : {
      "parameters" : [ {
        "name" : "commentId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "integer",
          "format" : "int64"
        }
      } ],
      "patch" : {
        "tags" : [ "tasks" ],
        "summary" : "Updates a task comment by id",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "content" ],
                "properties" : {
                  "content" : {
                    "type" : "string",
                    "example" : "Manchmal ändert man seine Meinung"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid task comment id or invalid input"
          },
          "404" : {
            "description" : "task comment not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "tasks" ],
        "summary" : "Deletes a task comment by id",
        "responses" : {
          "200" : {
            "description" : "successfull operation"
          },
          "400" : {
            "description" : "invalid task comment id"
          },
          "404" : {
            "description" : "task comment not found"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "User" : {
        "type" : "object",
        "required" : [ "id", "name", "displayname", "email" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "58c120552c94decf6cf3b701"
          },
          "name" : {
            "type" : "string",
            "example" : "Marvin Brieger"
          },
          "displayname" : {
            "type" : "string",
            "example" : "MB"
          },
          "email" : {
            "type" : "string",
            "example" : "mail@marvinbrieger.de"
          },
          "userRoleIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            },
            "readOnly" : true
          },
          "processGroupIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            },
            "readOnly" : true
          }
        }
      },
      "UserRole" : {
        "type" : "object",
        "required" : [ "name", "description" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "example" : "Buchhalter"
          },
          "description" : {
            "type" : "string",
            "example" : "Eine Beschreibung"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "12-04-2019 13:44:12",
            "readOnly" : true
          },
          "memberIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            },
            "readOnly" : true
          }
        }
      },
      "ProcessGroup" : {
        "type" : "object",
        "required" : [ "title", "description", "ownerId" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int",
            "readOnly" : true
          },
          "title" : {
            "type" : "string",
            "example" : "Extorel"
          },
          "description" : {
            "type" : "string",
            "example" : "Eine Erklärung"
          },
          "ownerId" : {
            "type" : "string",
            "example" : "58c120552c94decf6cf3b701"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "12-04-2019 13:44:12",
            "readOnly" : true
          },
          "membersIds" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "example" : "58c120552c94decf6cf3b701"
            },
            "readOnly" : true
          }
        }
      },
      "ProcessTemplateMasterData" : {
        "type" : "object",
        "required" : [ "title", "description", "durationLimit", "ownerId" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "title" : {
            "type" : "string",
            "example" : "Report Freigabe"
          },
          "description" : {
            "type" : "string",
            "example" : "Workflow zur Freigabe eines Reports"
          },
          "durationLimit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ownerId" : {
            "type" : "string",
            "example" : "58c120552c94decf6cf3b701"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "12-04-2019 13:44:12",
            "readOnly" : true
          },
          "process_count" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "running_processes" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "deleted" : {
            "type" : "boolean",
            "readOnly" : true
          }
        }
      },
      "ProcessTemplate" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProcessTemplateMasterData"
        } ],
        "required" : [ "taskTemplates" ],
        "properties" : {
          "taskTemplates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaskTemplate"
            }
          }
        }
      },
      "TaskTemplate" : {
        "type" : "object",
        "required" : [ "id", "responsibleUserRoleId", "name", "description", "estimatedDuration", "durationLimit", "necessaryClosings", "predecessors" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "responsibleUserRoleId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "example" : "Korrektur"
          },
          "description" : {
            "type" : "string",
            "format" : "int64"
          },
          "estimatedDuration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "durationLimit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "necessaryClosings" : {
            "type" : "integer",
            "format" : "int64"
          },
          "predecessors" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "ProcessMasterData" : {
        "type" : "object",
        "required" : [ "starterId", "processGroupId", "processTemplateId", "title", "description", "deadline" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "starterId" : {
            "type" : "string",
            "example" : "58c120552c94decf6cf3b701"
          },
          "processGroupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "processTemplateId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string",
            "example" : "Report Januar"
          },
          "description" : {
            "type" : "string",
            "example" : "Der Report muss bitte bis Ende Janaur fertiggestellt werden"
          },
          "deadline" : {
            "type" : "string",
            "example" : "12-04-2019 13:44:12"
          },
          "status" : {
            "type" : "string",
            "example" : "running",
            "enum" : [ "RUNNING", "CLOSED", "ABORTED" ],
            "readOnly" : true
          },
          "startedAt" : {
            "type" : "string",
            "example" : "12-04-2019 13:44:12",
            "readOnly" : true
          },
          "progress" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          }
        }
      },
      "Process" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProcessMasterData"
        } ],
        "required" : [ "tasks" ],
        "properties" : {
          "tasks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          }
        }
      },
      "Task" : {
        "type" : "object",
        "required" : [ "id", "taskId", "status", "comments", "assignments" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "taskTemplateId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "example" : "CLOSED",
            "enum" : [ "BLOCKED", "RUNNING", "CLOSED" ]
          },
          "comments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaskComment"
            }
          },
          "assignments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaskAssignment"
            }
          }
        }
      },
      "TaskAssignment" : {
        "type" : "object",
        "required" : [ "assigneeId", "createdAt", "doneAt" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "assigneeId" : {
            "type" : "string",
            "example" : "58c120552c94decf6cf3b701"
          },
          "closed" : {
            "type" : "boolean"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "12-04-2019 13:44:12"
          },
          "doneAt" : {
            "type" : "string",
            "example" : "12-04-2019 13:44:12"
          }
        }
      },
      "TaskComment" : {
        "type" : "object",
        "required" : [ "creatorId", "content" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "creatorId" : {
            "type" : "string",
            "example" : "58c120552c94decf6cf3b701"
          },
          "content" : {
            "type" : "string",
            "example" : "Doch kein kleiner Hinweis"
          },
          "createdAt" : {
            "type" : "string",
            "example" : "12-04-2019 13:44:12",
            "readOnly" : true
          }
        }
      },
      "Paging" : {
        "type" : "object",
        "required" : [ "previous", "next", "last" ],
        "properties" : {
          "previous" : {
            "type" : "integer",
            "format" : "int64"
          },
          "next" : {
            "type" : "integer",
            "format" : "int64"
          },
          "last" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      }
    }
  }
}