openapi: 3.0.1
info:
  version: "0.0.5"
  title: Maester
  description: Service for storage and retrieval of data objects

components:
  securitySchemes:
    JWT:
      description: JWT token passed to sailor from outside (e.g. env var), which contains flowId, workspaceId, contractId
      type: http
      scheme: bearer
      bearerFormat: JWT
    ServiceAccount:
      description: Service account credentials
      type: http
      scheme: basic

  schemas:
    ObjectId:
      type: string
    MutableBucket:
      type: object
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/ObjectId'
        closed:
          type: boolean
        externalId:
          type: string
    Bucket:
      allOf:
      - $ref: '#/components/schemas/MutableBucket'
      - type: object
        required:
          - id
          - createdAt
        properties:
          id:
            type: string
          createdAt:
            type: string
            format: date-time
    Meta:
      type: object
      required: 
        - page
        - perPage
        - total
        - totalPages
      properties:
        page:
          type: integer
          minimum: 0
        perPage:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0
          


  parameters:
    ObjectId:
      name: id
      description: Object identifier
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ObjectId'
    BucketId:
      name: id
      description: Bucket identifier
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ObjectId'
    PageSize:
      name: page[size]
      description: Amount of items per page
      in: query
      required: false
      schema: 
        type: integer
    PageNumber:
      name: page[number]
      description: Number of pages to display
      in: query
      required: false
      schema: 
        type: integer
    ExternalId:
      name: externalId
      description: External id
      in: query
      required: false
      schema: 
        type: string

  examples:
    json:
      summary: 'json object'
      value: '{ "some": "json" }'
    xml:
      summary: 'xml object'
      value: '<xml>some</xml>'
    text:
      summary: 'plain text'
      value: 'plain text'
    csv:
      summary: 'csv structure'
      value: 'c,s,v'
    tsv:
      summary: 'tsv structure'
      value: "t\t\ts\tv"
    binary:
      summary: 'binary data'
      value: BINARY DATA

  requestBodies:
    Object:
      required: true
      content:
        'application/json':
          schema:
            type: object
          example:
            $ref: '#/components/examples/json/value'
        'application/xml':
          example:
            $ref: '#/components/examples/xml/value'
        'text/plain':
          example:
            $ref: '#/components/examples/text/value'
        'text/csv':
          example:
            $ref: '#/components/examples/csv/value'
        'text/tsv':
          example:
            $ref: '#/components/examples/tsv/value'
        'application/octet-stream':
          example:
            $ref: '#/components/examples/binary/value'
        
        'multipart/form-data':
          schema:
            type: object
            properties:
              bucketId:
                type: array
                items:
                  type: string
              ttl:
                type: integer
              content:
                type: string
                format: binary
    MutableBucket:
      required: true
      content: 
        'application/json':
          schema:
            $ref: '#/components/schemas/MutableBucket'
              

  responses:
    ObjectNotFound:
      description: 'Object not found'
    TooManyObjectRequests:
      description: 'Too many objects requests'
    ObjectTooLarge:
      description: 'Object too large'
    BucketNotFound:
      description: 'Bucket not found'
  headers:
    ObjectTTL:
      description: 'Object TTL in ms'
      schema:
        description: Object TTL in ms
        type: integer
    ObjectLength:
      description: Object length in bytes
      schema:
        type: integer

security:
  - JWT: []
tags:
  - name: objects
    description: Objects storage
  - name: buckets
    description: Buckets management
      
paths:

  /objects/:
    post:
      summary: 'Insert a new object'
      tags:
        - objects
      description: 'Insert a new object'
      requestBody:
        $ref: '#/components/requestBodies/Object'
      responses:
        '201':
          description: Successfully created an object
        '404':
          $ref: '#/components/responses/ObjectNotFound'
        '429':
          $ref: '#/components/responses/TooManyObjectRequests'
        '409':
          description: 'Object already exists'
        '415':
          description: 'Object type not supported or missing'
        '413':
          $ref: '#/components/responses/ObjectTooLarge'
    get:
      summary: 'Get multiple objects by ids'
      tags:
        - objects
      description: 'Returns objects for given ids'
      parameters:
        - in: query
          name: id
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
            minItems: 1
      responses:
        '200':
          headers:
            'X-TTL':
              $ref: '#/components/headers/ObjectTTL'
            'Content-Length':
              $ref: '#/components/headers/ObjectLength'
          description: Successfully got an object
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: object
              example: [
                  $ref: '#/components/examples/json/value',
                  $ref: '#/components/examples/xml/value'
                ]
        '206':
          headers:
            'X-TTL':
              $ref: '#/components/headers/ObjectTTL'
            'Content-Length':
              $ref: '#/components/headers/ObjectLength'
          description: Successfully got a part of object
          content:
            'text/plain':
              example:
                $ref: '#/components/examples/text/value'
            'text/csv':
              example:
                $ref: '#/components/examples/csv/value'
            'text/tsv':
              example:
                $ref: '#/components/examples/tsv/value'
            'application/octet-stream':
              example:
                $ref: '#/components/examples/binary/value'
        '404':
          $ref: '#/components/responses/ObjectNotFound'
        '429':
          $ref: '#/components/responses/TooManyObjectRequests'
  /objects/{id}:

    put:
      summary: 'Update an object'
      tags:
        - objects
      description: 'Updates an object with given id'
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      requestBody:
        $ref: '#/components/requestBodies/Object'
      responses:
        '200':
          description: Successfully created an object
        '404':
          $ref: '#/components/responses/ObjectNotFound'
        '429':
          $ref: '#/components/responses/TooManyObjectRequests'
        '409':
          description: 'Object already exists'
        '415':
          description: 'Object type not supported or missing'
        '413':
          $ref: '#/components/responses/ObjectTooLarge'
    delete:
      summary: 'Delete an object'
      tags:
        - objects
      description: 'Delete an object with given id'
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Successfully deleted an object
        '404':
          $ref: '#/components/responses/ObjectNotFound'
        '429':
          $ref: '#/components/responses/TooManyObjectRequests'
          
  /buckets/:
    get:
      summary: 'Get buckets'
      tags:
        - buckets
      description: 'Returns multiple buckets'
      parameters:
        - $ref: '#/components/parameters/ExternalId'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          description: 'Buckets successfully returned'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bucket'
                  meta:
                    $ref: '#/components/schemas/Meta'
                    
        '404':
          $ref: '#/components/responses/BucketNotFound'
    post:
      summary: 'Create a new bucket'
      tags:
        - buckets
      description: 'Creates a new bucket'
      requestBody:
        $ref: '#/components/requestBodies/MutableBucket'
      responses:
        '201':
          description: Successfully created a bucket
  /buckets/{id}:
    get:
      summary: 'Get a bucket by id'
      tags:
        - buckets
      description: 'Returns a bucket with given id'
      parameters:
        - $ref: '#/components/parameters/BucketId'
      responses:
        '200':
          description: 'Bucket successfully returned'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Bucket'
        '404':
          $ref: '#/components/responses/BucketNotFound'
    patch:
      summary: 'Update a bucket'
      tags:
        - buckets
      description: 'Update a bucket with given id'
      parameters:
        - $ref: '#/components/parameters/BucketId'
      requestBody:
        $ref: '#/components/requestBodies/MutableBucket'
      responses:
        '200':
          description: 'Updated bucket'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Bucket'
        '404':
          $ref: '#/components/responses/BucketNotFound'
    delete:
      summary: 'Delete a bucket'
      tags:
        - buckets
      description: 'Delete a bucket with given id'
      parameters:
        - $ref: '#/components/parameters/BucketId'
      responses:
        '200':
          description: Successfully deleted bucket with given id
        '404':
          $ref: '#/components/responses/BucketNotFound'
