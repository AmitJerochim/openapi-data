openapi: 3.0.0
info:
  version: 1.0.0
  title: V4-Domain-API
  description: description
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/ITBoost3/Domain-Tracker/1.0.0
- url: "https://api.itboost.com/{basePath}"
  variables:
    basePath:
      default: /trackers
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
x-amazon-apigateway-request-validator: all

paths:

  /company/{companyId}/whois:
    get:
      tags:
        - Domain Trackers
      summary: Get domain trackers
      parameters:
        - in: query
          name: pageNo
          schema:
            type: string
        - in: path
          name: companyId
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validString"
          required: false
        - in: query
          name: order
          schema:
            type: string
        - in: query
          name: sortBy
          schema:
            type: string
            format: string
        - in: query
          name: fields
          schema:
            type: array
            items:
              type: string
        - in: query
          name: conditions
          schema:
            type: array
            items:
              type: string
              format: uuid
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: data found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                    userPermission:
                      type: object
                    ITBSSLLabId:
                      type: integer
                    website:
                      type: string
                    alt_id:
                      type: string
                    ITBCompanyId:
                      type: integer
                    companyUuid:
                      type: string
                    companyName:
                      type: object
                    ipAddress:
                      type: string
                    serverName:
                      type: string
                    status:
                      type: string
                    grade:
                      type: string
                    hostStartTime:
                      type: string
                    key:
                      type: object
                    altNames:
                      type: object
                    commanNames:
                      type: object
                    subject:
                      type: string
                    notBefore:
                      type: string
                    notAfter:
                      type: string
                    issuerSubject:
                      type: string
                    sigAlg:
                      type: string
                    validationType:
                      type: string
                    ITBLastUpdated:
                      type: string
                    ITBUpdatedBy:
                      type: string
                    ssl_updatedAt:
                      type: string
                    certs:
                      type: object
                    expiryResponseSent:
                      type: boolean
                    customPort:
                      type: boolean
                    searchTags:
                      type: object
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/company/{companyId}/whois'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.companyId: method.request.path.companyId
          integration.request.querystring.pageNo: method.request.querystring.pageNo
          integration.request.querystring.pageSize: method.request.querystring.pageSize
          integration.request.querystring.order: method.request.querystring.order
          integration.request.querystring.sortBy: method.request.querystring.sortBy
          integration.request.querystring.fields: method.request.querystring.fields
          integration.request.querystring.conditions: method.request.querystring.conditions
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    post:
      tags:
        - Domain Trackers
      summary: Store domain tracker
      parameters:
        - in: path
          name: companyId
          schema:
            type: string
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userPermission:
                  type: array
                  items:
                    type: object
                domainName:
                  type: string
                ITBCompanyId:
                  type: integer
                companyName:
                  type: string
                searchTags:
                  type: array
                  items:
                    type: string
                identifier:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: data stored successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                required:
                  - operationType
                properties:
                  operationType:
                    type: string
                  userPermission:
                    type: array
                    items:
                      type: object
                  ITBSSLLabId:
                    type: integer
                  website:
                    type: string
                  syncCronOperation:
                    type: string
                  alt_id:
                    type: string
                  ITBCompanyId:
                    type: integer
                  companyUuid:
                    type: string
                  companyName:
                    type: object
                  ipAddress:
                    type: string
                  serverName:
                    type: string
                  status:
                    type: string
                  grade:
                    type: string
                  hostStartTime:
                    type: string
                  key:
                    type: object
                  altNames:
                    type: object
                  commanNames:
                    type: object
                  subject:
                    type: string
                  notBefore:
                    type: string
                  notAfter:
                    type: string
                  issuerSubject:
                    type: string
                  sigAlg:
                    type: string
                  sha1Hash:
                    type: string
                  pinSha256:
                    type: string
                  validationType:
                    type: string
                  createdBy:
                    type: string
                  ITBLastUpdated:
                    type: string
                  ITBUpdatedBy:
                    type: string
                  ssl_updatedAt:
                    type: string
                  certs:
                    type: object
                  expiryResponseSent:
                    type: boolean
                  customPort:
                    type: boolean
                  searchTags:
                    type: object
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/company/{companyId}/whois'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.companyId: method.request.path.companyId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []

    delete:
      tags:
        - Domain Trackers
      summary: Bulk delete domain Tracker
      parameters:
        - in: query
          name: whoIsIdsArray
          schema:
            type: array
            items:
              type: string
        - in: path
          name: companyId
          schema:
            type: string
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
      responses:
        200:
          description: deleted successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'deleted successfully'
                  success:
                    type: boolean
                    example: true
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/company/{companyId}/whois'
        httpMethod: DELETE
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.companyId: method.request.path.companyId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /company/{companyId}/whois/{id}:
    get:
      tags:
        - Domain Trackers
      summary: Get domain trackers by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: path
          name: companyId
          schema:
            type: string
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
      responses:
        200:
          description: data found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                required:
                  - operationType
                properties:
                  userPermission:
                    type: object
                  ITBSSLLabId:
                    type: integer
                  website:
                    type: string
                  alt_id:
                    type: string
                  ITBCompanyId:
                    type: integer
                  companyUuid:
                    type: string
                  companyName:
                    type: object
                  ipAddress:
                    type: string
                  serverName:
                    type: string
                  status:
                    type: string
                  grade:
                    type: string
                  hostStartTime:
                    type: string
                  key:
                    type: object
                  altNames:
                    type: object
                  commanNames:
                    type: object
                  subject:
                    type: string
                  notBefore:
                    type: string
                  notAfter:
                    type: string
                  issuerSubject:
                    type: string
                  sigAlg:
                    type: string
                  validationType:
                    type: string
                  ITBLastUpdated:
                    type: string
                  ITBUpdatedBy:
                    type: string
                  ssl_updatedAt:
                    type: string
                  certs:
                    type: object
                  expiryResponseSent:
                    type: boolean
                  customPort:
                    type: boolean
                  searchTags:
                    type: object
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/company/{companyId}/whois/{id}'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.companyId: method.request.path.companyId
          integration.request.path.id: method.request.path.id
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    patch:
      tags:
        - Domain Trackers
      summary: Update Domain Tracker
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: path
          name: companyId
          schema:
            type: string
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userPermission:
                  type: array
                  items:
                    type: object
                searchTags:
                  type: array
                  items:
                    type: string
                expiryDate:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: updated successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/company/{companyId}/whois/{id}'
        httpMethod: PATCH
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.companyId: method.request.path.companyId
          integration.request.path.id: method.request.path.id
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    delete:
      tags:
        - Domain Trackers
      summary: Delete Domain Tracker
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: path
          name: companyId
          schema:
            type: string
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
      responses:
        200:
          description: deleted successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'deleted successfully'
                  success:
                    type: boolean
                    example: true
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/company/{companyId}/whois/{id}'
        httpMethod: DELETE
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.companyId: method.request.path.companyId
          integration.request.path.id: method.request.path.id
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,PATCH,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/{whoisId}/notes:
    get:
      tags:
        - Domain Trackers
      summary: Get Domain Trackers Notes
      parameters:
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: data found successfully
          headers:
                      Access-Control-Allow-Origin:
                        schema:
                          type: "string"
                      Access-Control-Allow-Methods:
                        schema:
                          type: "string"
                      Access-Control-Allow-Headers:
                        schema:
                          type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    modalFlag:
                      type: boolean
                    priority:
                      type: string
                    date:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/notes'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    post:
      tags:
        - Domain Trackers
      summary: Store domain trackers notes
      parameters:
        - in: path
          name: whoisId
          schema:
            type: string
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                modalFlag:
                  type: boolean
                priority:
                  type: string
                date:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: domain tackers notes stored successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                  modalFlag:
                    type: boolean
                  priority:
                    type: string
                  date:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/notes'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/{whoisId}/linkedItem:
    get:
      tags:
        - Domain Trackers
      summary: Get Domain Trackers linkedItem
      parameters:
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: data found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  relatedAsset:
                    type: string
                  relatedAssetPath:
                    type: string
                  relatedAssetId:
                    type: string
                  relatedAssetName:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/linkedItem'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    post:
      tags:
        - Domain Trackers
      summary: Store domain trackers linkedItem
      parameters:
        - in: path
          name: whoisId
          schema:
            type: string
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                relatedAsset:
                  type: string
                relatedAssetPath:
                  type: string
                relatedAssetId:
                  type: string
                relatedAssetName:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: domain tackers linkedItem stored successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                properties:
                  relatedAsset:
                    type: string
                  relatedAssetPath:
                    type: string
                  relatedAssetId:
                    type: string
                  relatedAssetName:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/linkedItem'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/{whoisId}/passwords:
    get:
      tags:
        - Domain Trackers
      summary: Get Domain Trackers password
      parameters:
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: data found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    passwordName:
                      type: string
                    userName:
                      type: string
                    password:
                      type: string
                    ITBLastUpdated:
                      type: string
                    ITBUpdatedBy:
                      type: string
                    server:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/passwords'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    post:
      tags:
        - Domain Trackers
      summary: Store domain trackers password
      parameters:
        - in: path
          name: whoisId
          schema:
            type: string
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordName:
                  type: string
                userName:
                  type: string
                password:
                  type: string
                ITBLastUpdated:
                  type: string
                ITBUpdatedBy:
                  type: string
                server:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: domain tackers password stored successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                properties:
                  passwordName:
                    type: string
                  userName:
                    type: string
                  password:
                    type: string
                  ITBLastUpdated:
                    type: string
                  ITBUpdatedBy:
                    type: string
                  server:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/passwords'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/{whoisId}/attachments:
    get:
      tags:
        - Domain Trackers
      summary: Get Domain Trackers attachment
      parameters:
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: data found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    fieldname:
                      type: string
                    originalname:
                      type: string
                    mimetype:
                      type: string
                    destination:
                      type: string
                    filename:
                      type: string
                    path:
                      type: string
                    size:
                      type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/attachments'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    post:
      tags:
        - Domain Trackers
      summary: Store domain trackers attachment
      parameters:
        - in: path
          name: whoisId
          schema:
            type: string
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                filename:
                  type: string
                destination:
                  type: string
                mimetype:
                  type: string
                originalname:
                  type: string
                fieldname:
                  type: string
                size:
                  type: integer
              additionalProperties: false
      responses:
        200:
          description: domain attachment password stored successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                properties:
                  fieldname:
                    type: string
                  uuid:
                    type: string
                  originalname:
                    type: string
                  mimetype:
                    type: string
                  destination:
                    type: string
                  filename:
                    type: string
                  path:
                    type: string
                  size:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/attachments'
        httpMethod: POST
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/{whoisId}/notes/{noteId}:
    delete:
      tags:
        - Domain Trackers
      summary: Delete quick note
      parameters:
        - in: path
          name: noteId
          schema:
            type: string
          required: true
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: notes deleted successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example:
                      "deleted successfully"
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/notes/{noteId}'
        httpMethod: DELETE
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
          integration.request.path.noteId: method.request.path.noteId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    put:
      tags:
        - Domain Trackers
      summary: Update quick note
      parameters:
        - in: path
          name: noteId
          schema:
            type: string
          required: true
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                modalFlag:
                  type: boolean
                priority:
                  type: string
                date:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: notes updated successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                properties:
                  description:
                    type: string
                  modalFlag:
                    type: boolean
                  priority:
                    type: string
                  date:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/notes/{noteId}'
        httpMethod: PUT
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
          integration.request.path.noteId: method.request.path.noteId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/{whoisId}/linkedItem/{linkedItemId}:
    delete:
      tags:
        - Domain Trackers
      summary: Delete quick linkeditem
      parameters:
        - in: path
          name: linkedItemId
          schema:
            type: string
          required: true
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: linkeditem deleted successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example:
                      "deleted successfully"
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/linkedItem/{linkedItemId}'
        httpMethod: DELETE
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
          integration.request.path.linkedItemId: method.request.path.linkedItemId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    put:
      tags:
        - Domain Trackers
      summary: Update quick linkeditem
      parameters:
        - in: path
          name: linkedItemId
          schema:
            type: string
          required: true
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                relatedAsset:
                  type: string
                relatedAssetPath:
                  type: string
                relatedAssetId:
                  type: string
                relatedAssetName:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: linkedItem updated successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                properties:
                  relatedAsset:
                    type: string
                  relatedAssetPath:
                    type: string
                  relatedAssetId:
                    type: string
                  relatedAssetName:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/linkedItem/{linkedItemId}'
        httpMethod: PUT
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
          integration.request.path.linkedItemId: method.request.path.linkedItemId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/{whoisId}/passwords/{passwordId}:
    delete:
      tags:
        - Domain Trackers
      summary: Delete quick passwords
      parameters:
        - in: path
          name: passwordId
          schema:
            type: string
          required: true
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: password deleted successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example:
                      "deleted successfully"
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/passwords/{passwordId}'
        httpMethod: DELETE
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
          integration.request.path.passwordId: method.request.path.passwordId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    put:
      tags:
        - Domain Trackers
      summary: Update quick passwords
      parameters:
        - in: path
          name: passwordId
          schema:
            type: string
          required: true
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordName:
                  type: string
                userName:
                  type: string
                password:
                  type: string
                ITBLastUpdated:
                  type: string
                ITBUpdatedBy:
                  type: string
                server:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: password updated successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                  modalFlag:
                    type: boolean
                  priority:
                    type: string
                  date:
                    type: string
                  startDate:
                    type: string
                  summary:
                    type: string
                  endDate:
                    type: string
                  createdBy:
                    type: string
                  noteType:
                    type: string
                  deleteFlag:
                    type: string
                  deletedBy:
                    type: string
                  editedBy:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/passwords/{passwordId}'
        httpMethod: PUT
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
          integration.request.path.passwordId: method.request.path.passwordId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/{whoisId}/attachments/{attachmentId}:
    delete:
      tags:
        - Domain Trackers
      summary: Delete quick attachments
      parameters:
        - in: path
          name: attachmentId
          schema:
            type: string
          required: true
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: attachments deleted successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example:
                      "deleted successfully"
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/attachments/{attachmentId}'
        httpMethod: DELETE
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
          integration.request.path.attachmentId: method.request.path.attachmentId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []

    put:
      tags:
        - Domain Trackers
      summary: Update quick attachments
      parameters:
        - in: path
          name: attachmentId
          schema:
            type: string
          required: true
        - in: path
          name: whoisId
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fieldname:
                  type: string
                originalname:
                  type: string
                mimetype:
                  type: string
                destination:
                  type: string
                filename:
                  type: string
                path:
                  type: string
                size:
                  type: string
              additionalProperties: false
      responses:
        200:
          description: attachment updated successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  fieldname:
                    type: string
                  originalname:
                    type: string
                  mimetype:
                    type: string
                  destination:
                    type: string
                  filename:
                    type: string
                  path:
                    type: string
                  size:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/{whoisId}/attachments/{attachmentId}'
        httpMethod: PUT
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
          integration.request.path.attachmentId: method.request.path.attachmentId
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
        passthroughBehavior: never
        requestTemplates:
          application/json: ''
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/reverse/{whoisId}/linkedItem/{relatedAssetId}/{relatedAsset}:

    delete:
      tags:
        - Domain Trackers
      summary: Deleted reverse linkeditem
      parameters:
        - in: path
          name: relatedAsset
          required: true
          schema:
            type: string
        - in: path
          name: relatedAssetId
          required: true
          schema:
            type: string
        - in: path
          name: whoisId
          required: true
          schema:
            type: string
        - in: header
          name: token
          required: true
          schema:
            type: string
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: deleted successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'deleted successfully'
                  success:
                    type: boolean
                    example: true
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/reverse/{whoisId}/linkedItem/{relatedAssetId}/{relatedAsset}'
        httpMethod: DELETE
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.whoisId: method.request.path.whoisId
          integration.request.path.relatedAssetId: method.request.path.relatedAssetId
          integration.request.path.relatedAsset: method.request.path.relatedAsset
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/company/{companyId}/domain/{id}/{command}:
    get:
      tags:
        - Domain Trackers
      summary: Get mxtoolbox data
      parameters:
        - in: path
          name: companyId
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/validAlphaNumericWithDash"
          required: true
        - in: path
          name: command
          schema:
            type: string
          required: true
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      responses:
        200:
          description: data found successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/company/{companyId}/domain/{id}/{command}'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.companyId: method.request.path.companyId
          integration.request.path.id: method.request.path.id
          integration.request.path.command: method.request.path.command
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /whois/bulkrefresh:
    put:
      tags:
        - Domain Trackers
      summary: Bulk Refresh
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                searchTags:
                  type: array
                  items:
                    type: string
                domainName:
                  type: array
                  items:
                    type: string
              additionalProperties: false
      responses:
        200:
          description: bulk domain updated successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
        400:
          description:  not found
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.sslUrl}/whois/bulkrefresh'
        httpMethod: PUT
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.roleName: context.authorizer.roleName
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
      security:
        - api_key: []
        - token-authorizer: []
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PATCH,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: x-api-key
      in: header
    token-authorizer:
      type: apiKey
      name: token
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri: arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:711644918579:function:V4-service-dev-validateUser/invocations
        authorizerCredentials: 'arn:aws:iam::711644918579:role/cf2'
        identitySource: method.request.header.token
  schemas:
    Empty:
      type: object
    validString:
      minLength: 1
      pattern: "^(?! |.* $)[A-Za-z]+$"
      type: "string"
    validAlphaNumericWithDash:
      minLength: 1
      pattern: "^[a-zA-Z0-9]+(?:-?[a-zA-Z0-9]+)+$"
      type: "string"