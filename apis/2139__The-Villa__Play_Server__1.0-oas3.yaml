openapi: 3.0.0
info:
  title: Village Co - Play Server
  version: "1.0-oas3"
  description: |
    This is the Village Co Play Server API.
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: tech@thevillageco.com.au
  license:
    name: UNLICENSED
    url: ''
servers:
  - url: 'https://api.thevillageco.com.au/api/{APIKEY}'
    description: Production Play Server
    variables:
      APIKEY:
        default: unknown
        description: Access API Key
  - url: 'https://staging.thevillageco.com.au/api/{APIKEY}'
    description: Staging Play Server
    variables:
      APIKEY:
        default: unknown
        description: Access API Key
paths:
  /api/login:
    post:
      requestBody:
        description: Credentials
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  format: string
                  type: string
                  example: peter.pan@neverland.com
                password:
                  format: string
                  type: string
                  example: C@pntH00k
      tags:
        - Auth
      responses:
        '200':
          description: Operation complete succesfully
      summary: Login
      description: >-
        This endpoint allows administrative users to login and retreive their
        session auth cookie. This is used when elevated permissions are
        required. Standard clients don't need this session cookie.
  /api/logout:
    get:
      tags:
        - Auth
      responses:
        '200':
          description: Operation complete succesfully
      summary: Logout
      description: >-
        This endpoint allows clients to logout and release their session auth
        cookie.
  /content/currentRelease:
    get:
      tags:
        - Content
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'
      summary: Get the current content release
      description: >-
        This endpoint returns the current content release available for
        download. The response contains the URL's for all the content.
  /content:
    get:
      tags:
        - Content
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Content'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
      summary: Index all content
      description: Returns all content objects
  '/content/get/{contentID}':
    get:
      tags:
        - Content
      parameters:
        - name: contentID
          description: ID of the content
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Get a content by ID [NOT IMPLEMENTED]'
      description: Returns a specific content object based on the ID provided
  '/content/update/{contentID}':
    post:
      tags:
        - Content
      parameters:
        - name: contentID
          description: ID of the Content
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Update a content [NOT IMPLEMENTED]'
      description: Retrieve and update fields on a specified content
  '/content/delete/{contentID}':
    delete:
      tags:
        - Content
      parameters:
        - name: contentID
          description: ID of the Content
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a content [NOT IMPLEMENTED]'
      description: Delete the specified content
  /deployment:
    get:
      tags:
        - Deployments
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deployment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
        - VCDRole: []
      summary: Index all deployments
      description: Returns all deployment objects
  '/deployment/get/{deploymentID}':
    get:
      tags:
        - Deployments
      parameters:
        - name: deploymentID
          description: ID of the deployment
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Get a deployment by ID [NOT IMPLEMENTED]'
      description: Returns a specific deployment object based on the ID provided
  /deployment/add:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deployment'
      tags:
        - Deployments
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Add a new deployment [NOT IMPLEMENTED]'
      description: Insert a new deployment object into database
  '/deployment/update/{deploymentID}':
    post:
      tags:
        - Deployments
      parameters:
        - name: deploymentID
          description: ID of the deployment
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Update a deployment [NOT IMPLEMENTED]'
      description: Retrieve and update fields on a specified deployment
  '/deployment/delete/{deploymentID}':
    delete:
      tags:
        - Deployments
      parameters:
        - name: deploymentID
          description: ID of the deployment
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a item [NOT IMPLEMENTED]'
      description: Delete the specified item
  /deployment/create:
    post:
      tags:
        - Deployments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deployment'
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: string
      security:
        - GODRole: []
        - VCARole: []
        - VCDRole: []
      summary: Generate deployment keys
      description: Create a specified quantity of deployment keys
  /deployment/validate:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deploymentKey:
                  type: string
                serialnumber:
                  type: string
                supportID:
                  type: string
      tags:
        - Deployments
      parameters:
        - name: deploymentID
          description: ID of the deployment
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  response:
                    type: string
                  deviceID:
                    type: string
                  serialnumber:
                    type: string
                  venueID:
                    type: string
                  apiKey:
                    type: string
                  sceneURL:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          content:
            '*/*':
              schema:
                type: object
                properties:
                  message:
                    type: string
                  location:
                    type: string
          description: Invalid deployment key or key is already in use
      summary: Validate a deployment
      description: Retrieve and update fields on a specified deployment
  /device:
    get:
      tags:
        - Devices
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
        - VCDRole: []
      summary: Index all devices
      description: Returns all device objects
  '/device/get/{deviceID}':
    get:
      tags:
        - Devices
      parameters:
        - name: deviceID
          description: ID of the device
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
        - VCDRole: []
      summary: Get a device by ID
      description: Returns a specific device object based on the ID provided
  '/device/update/{deviceID}':
    post:
      tags:
        - Devices
      parameters:
        - name: deviceID
          description: ID of the device
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Update a device [NOT IMPLEMENTED]'
      description: Retrieve and update fields on a specified device
  '/device/delete/{deviceID}':
    delete:
      tags:
        - Devices
      parameters:
        - name: deviceID
          description: ID of the Device
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a device [NOT IMPLEMENTED]'
      description: Delete the specified device
  /item:
    get:
      tags:
        - Items
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Index all items
      description: Returns all item objects
  '/item/get/{itemID}':
    get:
      tags:
        - Items
      parameters:
        - name: itemID
          description: ID of the item
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Get a item by ID
      description: Returns a specific item object based on the ID provided
  /item/add:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      tags:
        - Items
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Add a new item
      description: Insert a new item object into database
  '/item/update/{itemID}':
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      tags:
        - Items
      parameters:
        - name: itemID
          description: ID of the item
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Update a item
      description: Retrieve and update fields on a specified item
  '/item/delete/{itemID}':
    delete:
      tags:
        - Items
      parameters:
        - name: itemID
          description: ID of the item
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a item [NOT IMPLEMENTED]'
      description: Delete the specified item
  /log:
    get:
      tags:
        - Logs
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      security:
        - GODRole: []
      summary: 'Index all logs [NOT IMPLEMENTED]'
      description: Returns all log objects
  '/log/get/{logID}':
    get:
      tags:
        - Logs
      parameters:
        - name: logID
          description: ID of the log
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      security:
        - GODRole: []
      summary: 'Get a log by ID [NOT IMPLEMENTED]'
      description: Returns a specific log object based on the ID provided.
  /log/add:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Log'
      tags:
        - Logs
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Log'
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: Add a new log
      description: Insert a new log object into database
  '/log/update/{logID}':
    post:
      tags:
        - Logs
      parameters:
        - name: logID
          description: ID of the log
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Update a log [NOT IMPLEMENTED]'
      description: Retrieve and update fields on a specified log
  '/log/delete/{logID}':
    delete:
      tags:
        - Logs
      parameters:
        - name: logID
          description: ID of the Log
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a log [NOT IMPLEMENTED]'
      description: Delete the specified log
  /meal:
    get:
      tags:
        - Meals
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Meal'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Index all meals
      description: Returns all meal objects
  '/meal/get/{mealID}':
    get:
      tags:
        - Meals
      parameters:
        - name: mealID
          description: ID of the meal
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Meal'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Get a meal by ID
      description: Returns a specific meal object based on the ID provided
  /meal/add:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
      tags:
        - Meals
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Meal'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Add a new meal
      description: Insert a new meal object into database
  '/meal/update/{mealID}':
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
      tags:
        - Meals
      parameters:
        - name: mealID
          description: ID of the Meal
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/Meal'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Update a meal
      description: Retrieve and update fields on a specified meal
  '/meal/delete/{mealID}':
    delete:
      tags:
        - Meals
      parameters:
        - name: mealID
          description: ID of the Meal
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a meal [NOT IMPLEMENTED]'
      description: Delete the specified meal
  /menu:
    get:
      tags:
        - Menus
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Menu'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Index all menus
      description: Returns all menu objects
  '/menu/get/{menuID}':
    get:
      tags:
        - Menus
      parameters:
        - name: menuID
          description: ID of the menu
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Menu'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Get a menu by ID
      description: Returns a specific menu object based on the ID provided
  /menu/add:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
      tags:
        - Menus
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Menu'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Add a new menu
      description: Insert a new menu object into database
  '/menu/update/{menuID}':
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
      tags:
        - Menus
      parameters:
        - name: menuID
          description: ID of the Menu
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/Menu'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Update a menu
      description: Retrieve and update fields on a specified menu
  '/menu/delete/{menuID}':
    delete:
      tags:
        - Menus
      parameters:
        - name: menuID
          description: ID of the Menu
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a menu [NOT IMPLEMENTED]'
      description: Delete the specified menu
  /order:
    get:
      tags:
        - Orders
      parameters:
        - name: venue
          description: Venue ID filter. Does nothing for VenueV user.
          schema:
            format: ObjectID
            type: string
          in: query
        - name: startDate
          description: Starting search date filter
          schema:
            format: Date
            type: string
          in: query
        - name: endDate
          description: Ending search date filter
          schema:
            format: Date
            type: string
          in: query
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VenueVRole: []
      summary: Index all orders or orders for a venue
      description: >-
        Returns all order objects based on filter or all orders for a venue for
        VenueV only users
  '/order/get/{orderID}':
    get:
      tags:
        - Orders
      parameters:
        - name: orderID
          description: ID of the order
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Get a order by ID
      description: Returns a specific order object based on the ID provided.
  /order/add:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      tags:
        - Orders
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VenueVRole: []
      summary: Add a new order
      description: Insert a new order object into database
  '/order/update/{orderID}':
    post:
      tags:
        - Orders
      parameters:
        - name: orderID
          description: ID of the Order
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Update a order [NOT IMPLEMENTED]'
      description: Retrieve and update fields on a specified order
  '/order/delete/{orderID}':
    delete:
      tags:
        - Orders
      parameters:
        - name: orderID
          description: ID of the Order
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a order [NOT IMPLEMENTED]'
      description: Delete the specified order
  '/order/poll/{venueID}':
    get:
      tags:
        - Orders
      parameters:
        - name: venueID
          description: ID of the venue
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: Index all orders for a venue
      description: Returns all order objects for a venue
  /order/poll:
    get:
      tags:
        - Orders
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      summary: Index all orders for a users venue
      description: >-
        Returns all order objects for a venue based on the venue attached to the
        user
  '/order/validate/{tagID}':
    get:
      tags:
        - Orders
      parameters:
        - name: tagID
          description: ID of the tag
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: Validate whether a tag is assigned
      description: Validate if the tag that is passed is currently assigned to an order
  '/order/fulfill/{orderID}':
    get:
      tags:
        - Orders
      parameters:
        - name: orderID
          description: ID of the order
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: Complete an order
      description: Mark an order as complete and fulfilled
  /payment:
    get:
      tags:
        - Payments
      parameters:
        - name: venue
          description: Venue ID filter. Does nothing for VenueV user.
          schema:
            format: ObjectID
            type: string
          in: query
        - name: startDate
          description: Starting search date filter
          schema:
            format: Date
            type: string
          in: query
        - name: endDate
          description: Ending search date filter
          schema:
            format: Date
            type: string
          in: query
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCFRole: []
        - VenueVRole: []
      summary: Index all payment or payment for a venue
      description: >-
        Returns all payment objects based on filter or all payment for a venue
        for VenueV only users
  '/payment/get/{paymentID}':
    get:
      tags:
        - Payments
      parameters:
        - name: paymentID
          description: ID of the payment
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Get a payment by ID [NOT IMPLEMENTED]'
      description: Returns a specific payment object based on the ID provided.
  /payment/add:
    post:
      tags:
        - Payments
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Add a new payments [NOT IMPLEMENTED]'
      description: Insert a new payments object into database
  '/payment/update/{paymentID}':
    post:
      tags:
        - Payments
      parameters:
        - name: paymentID
          description: ID of the Payment
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Update a payment [NOT IMPLEMENTED]'
      description: Retrieve and update fields on a specified payment
  '/payment/delete/{paymentID}':
    delete:
      tags:
        - Payments
      parameters:
        - name: paymentID
          description: ID of the Payment
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a payment [NOT IMPLEMENTED]'
      description: Delete the specified payment
  /release:
    get:
      tags:
        - Releases
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      security:
        - GODRole: []
      summary: 'Index all release [NOT IMPLEMENTED]'
      description: Returns all release objects
  '/release/get/{releaseID}':
    get:
      tags:
        - Releases
      parameters:
        - name: releaseID
          description: ID of the subscriber
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      security:
        - GODRole: []
      summary: 'Get a release by ID [NOT IMPLEMENTED]'
      description: Returns a specific release object based on the ID provided.
  /release/add:
    post:
      tags:
        - Releases
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      security:
        - GODRole: []
      summary: 'Add a new release [NOT IMPLEMENTED]'
      description: Insert a new release object into database
  '/release/update/{releaseID}':
    post:
      tags:
        - Releases
      parameters:
        - name: releaseID
          description: ID of the release
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Update a release [NOT IMPLEMENTED]'
      description: Retrieve and update fields on a specified release
  '/release/delete/{releaseID}':
    delete:
      tags:
        - Releases
      parameters:
        - name: releaseID
          description: ID of the Release
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a release [NOT IMPLEMENTED]'
      description: Delete the specified release
  /release/currentRelease:
    get:
      tags:
        - Releases
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Release'
        '401':
          $ref: '#/components/responses/Unauthorized'
      summary: Get current release
      description: Returns current release
  /subscriber:
    get:
      tags:
        - Subscribers
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Index all subscribers [NOT IMPLEMENTED]'
      description: Returns all subscribers objects
  '/subscriber/get/{subscriberID}':
    get:
      tags:
        - Subscribers
      parameters:
        - name: subscriberID
          description: ID of the subscriber
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Get a subscriber by ID [NOT IMPLEMENTED]'
      description: Returns a specific subscriber object based on the ID provided.
  /subscriber/add:
    post:
      tags:
        - Subscribers
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Add a new subscriber [NOT IMPLEMENTED]'
      description: Insert a new subscriber object into database
  '/subscriber/update/{subscriberID}':
    post:
      tags:
        - Subscribers
      parameters:
        - name: subscriberID
          description: ID of the Subscriber
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Update a subscriber [NOT IMPLEMENTED]'
      description: Retrieve and update fields on a specified subscriber
  '/subscriber/delete/{subscriberID}':
    delete:
      tags:
        - Subscribers
      parameters:
        - name: subscriberID
          description: ID of the Subscriber
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a subscriber [NOT IMPLEMENTED]'
      description: Delete the specified subscriber
  /tag:
    get:
      tags:
        - Tags
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
        - VCDRole: []
      summary: Index all tags
      description: Returns all tag objects
  '/tag/get/{tagID}':
    get:
      tags:
        - Tags
      parameters:
        - name: tagID
          description: ID of the tag
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Get a tag by ID [NOT IMPLEMENTED]'
      description: Returns a specific tag object based on the ID provided.
  /tag/add:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      tags:
        - Tags
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
        - VCDRole: []
      summary: Add a new tag
      description: Insert a new tag object into database
  '/tag/update/{tagID}':
    post:
      tags:
        - Tags
      parameters:
        - name: tagID
          description: ID of the Tag
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Update a tag [NOT IMPLEMENTED]'
      description: Retrieve and update fields on a specified tag
  '/tag/delete/{tagID}':
    delete:
      tags:
        - Tags
      parameters:
        - name: tagID
          description: ID of the Tag
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      summary: 'Delete a tag [NOT IMPLEMENTED]'
      description: Delete the specified tag
  /tag/bulk/add:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
      tags:
        - Tags
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
        - VCDRole: []
      summary: Add multiple new tags
      description: Insert new tag objects into database
  /user:
    get:
      tags:
        - Users
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
      summary: Index all users
      description: Returns all user objects
  '/user/get/{userID}':
    get:
      tags:
        - Users
      parameters:
        - name: userID
          description: ID of the user
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Get a user by ID
      description: Returns a specific user object based on the ID provided.
  /user/add:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      tags:
        - Users
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
      summary: Add a new user
      description: Insert a new user object into database
  '/user/update/{userID}':
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      tags:
        - Users
      parameters:
        - name: userID
          description: ID of the User
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
      summary: Update a user
      description: Retrieve and update fields on a specified user
  '/user/delete/{userID}':
    delete:
      tags:
        - Users
      parameters:
        - name: userID
          description: ID of the User
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      security:
        - GODRole: []
        - VCARole: []
      summary: 'Delete a user [NOT IMPLEMENTED]'
      description: Delete the specified user
  /venue:
    get:
      tags:
        - Venues
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Human readable response status
                  message:
                    type: string
                    description: Reponse message
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Venue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
        - VCDRole: []
        - VCFRole: []
      summary: Index all venues
      description: Returns all venue objects
  '/venue/get/{venueID}':
    get:
      tags:
        - Venues
      parameters:
        - name: venueID
          description: ID of the Venue
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Venue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
        - VCDRole: []
        - VCFRole: []
      summary: Get a venue by ID
      description: Returns a specific venue object based on the ID provided.
  '/venue/getMenu/{venueID}':
    get:
      tags:
        - Venues
        - Menus
      parameters:
        - name: venueID
          description: ID of the venue
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
      summary: Get the Menu for the Venue
      description: Returns a list of ObjectIDs of the meals in the menu.
  /venue/add:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
      tags:
        - Venues
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Venue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
      summary: Add a new venue
      description: Insert a new venue object into database
  '/venue/update/{venueID}':
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
      tags:
        - Venues
      parameters:
        - name: venueID
          description: ID of the Venue
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/Venue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
      summary: Update a venue
      description: Retrieve and update fields on a specified venue
  '/venue/delete/{venueID}':
    delete:
      tags:
        - Venues
      parameters:
        - name: venueID
          description: ID of the Venue
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '404':
          $ref: '#/components/responses/NotImplemented'
      security:
        - GODRole: []
        - VCARole: []
      summary: 'Delete a venue [NOT IMPLEMENTED]'
      description: Delete the specified venue
  '/venue/cards/{venueID}':
    get:
      tags:
        - Venues
      parameters:
        - name: venueID
          description: ID of the Venue
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/Venue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
      summary: Index cards for venue
      description: Get all credit cards for a specified venue
    post:
      tags:
        - Venues
      parameters:
        - name: venueID
          description: ID of the Venue
          schema:
            format: ObjectID
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Operation complete succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/Venue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - GODRole: []
        - VCARole: []
      summary: Add credit card to venue
      description: Add a new credit card to a specified venue
components:
  schemas:
    Error:
      required:
        - status
        - message
      type: object
      properties:
        title:
          type: string
        status:
          description: Human readable response description code
          type: string
        message:
          type: string
    Order:
      type: object
      properties:
        _id:
          format: ObjectID
          type: string
        deviceID:
          $ref: '#/components/schemas/Device'
        venueID:
          $ref: '#/components/schemas/Venue'
        meal:
          $ref: '#/components/schemas/Meal'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        content:
          $ref: '#/components/schemas/Content'
        charToken:
          type: string
        tagID:
          type: string
        state:
          type: string
          enum:
            - order_placed
            - fulfilled
            - stale
          default: order_placed
    Content:
      type: object
      properties:
        _id:
          format: ObjectID
          type: string
        name:
          format: string
          type: string
          example: Warrior
        description:
          format: string
          type: string
          example: basic Warrior with Armour
        release:
          format: ObjectID
          type: string
          example: 5c6603b442f8e979102af4a9
        obj:
          format: string
          type: string
          example: 'https://storage.googleapis.com/assets/obj-123xx.obj'
        mtl:
          format: string
          type: string
          example: 'https://storage.googleapis.com/assets/mtl-123xxx.mtl'
        created_at:
          format: DateTime
          type: string
          example: '2019-02-14T02:48:07.823Z'
        updated_at:
          format: DateTime
          type: string
          example: '2019-02-14T02:48:07.823Z'
    Deployment:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        deploymentKey:
          format: string
          type: string
          example: bg2znO
        serialnumber:
          format: string
          type: string
          example: 181dde8a
      required:
        - deploymentKey
        - serialnumber
    APIKey:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        apiKey:
          type: string
        status:
          type: string
        deviceID:
          $ref: '#/components/schemas/Device'
        userID:
          $ref: '#/components/schemas/User'
        venueID:
          $ref: '#/components/schemas/Venue'
    Device:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        status:
          type: string
          default: disabled
        deviceID:
          type: string
        supportID:
          type: string
        IMEI:
          type: string
        serialNumber:
          type: string
        venueID:
          $ref: '#/components/schemas/Venue'
        deviceStatus:
          type: string
          default: offline
        deviceType:
          type: string
        notes:
          type: string
        apiKey:
          $ref: '#/components/schemas/APIKey'
    Item:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        name:
          type: string
        description:
          type: string
        category:
          type: string
        imageURI:
          type: string
        status:
          type: string
        global:
          type: boolean
        owner:
          $ref: '#/components/schemas/Venue'
    Log:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        title:
          type: string
        description:
          type: string
        stackTrace:
          type: string
        type:
          type: string
        time:
          type: string
        user:
          type: string
        serialNumber:
          type: string
    Meal:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        name:
          type: string
        description:
          type: string
        imageURI:
          type: string
        stages:
          type: object
          properties:
            '1':
              type: array
              items:
                $ref: '#/components/schemas/Item'
            '2':
              type: array
              items:
                $ref: '#/components/schemas/Item'
            '3':
              type: array
              items:
                $ref: '#/components/schemas/Item'
            '4':
              type: array
              items:
                $ref: '#/components/schemas/Item'
            '5':
              type: array
              items:
                $ref: '#/components/schemas/Item'
            '6':
              type: array
              items:
                $ref: '#/components/schemas/Item'
            '7':
              type: array
              items:
                $ref: '#/components/schemas/Item'
            '8':
              type: array
              items:
                $ref: '#/components/schemas/Item'
        global:
          type: boolean
        owner:
          $ref: '#/components/schemas/Venue'
        status:
          type: string
    Menu:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        name:
          type: string
        description:
          type: string
        meals:
          $ref: '#/components/schemas/Meal'
        global:
          type: boolean
        owner:
          $ref: '#/components/schemas/Venue'
        status:
          type: string
        sceneURL:
          type: string
    Payment:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        card:
          $ref: '#/components/schemas/Card'
        venue:
          $ref: '#/components/schemas/Venue'
        providerRefId:
          type: string
        transactionAmount:
          type: number
        merchantFee:
          type: number
        settledAt:
          type: string
        receiptNo:
          type: string
        executedBy:
          type: string
      required:
        - card
        - venue
        - providerRefId
        - transactionAmount
        - merchantFee
        - executedBy
    Release:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        name:
          type: string
        isCurrent:
          type: boolean
    Tag:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        tagID:
          type: string
      required:
        - tagID
    User:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        thiswontbeherelong:
          type: string
    Subscriber:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        email:
          type: string
        subscribedTo:
          type: string
      required:
        - email
        - subscribedTo
    Card:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        providerRefId:
          type: string
        lastFourDigits:
          type: string
        cardholderName:
          type: string
        expiry:
          type: object
          properties:
            month:
              type: string
              minLength: 2
              maxLength: 2
            year:
              type: string
              minLength: 2
              maxLength: 2
        cardType:
          type: string
          enum:
            - mastercard
            - visa
        venue:
          $ref: '#/components/schemas/Payment'
      required:
        - providerRefId
    Venue:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        name:
          type: string
        description:
          type: string
        contact:
          type: object
          properties:
            name:
              type: string
            phone:
              type: string
            email:
              type: string
              format: email
        location:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
            address:
              type: string
            city:
              type: string
            state:
              type: string
              enum:
                - NSW
                - QLD
                - VIC
                - SA
                - WA
                - ACT
                - NT
                - TAS
            postcode:
              type: number
            region:
              type: string
        abn:
          type: number
        menu:
          $ref: '#/components/schemas/Menu'
        payments:
          $ref: '#/components/schemas/Payment'
        primaryCard:
          $ref: '#/components/schemas/Card'
        status:
          type: string
          enum:
            - pending
            - enabled
            - disabled
        plan:
          type: string
          enum:
            - unassigned
            - base
        creditCardToken:
          type: string
        nextChargeAt:
          type: string
          format: date
  responses:
    Unauthorized:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized. You must be authenticated to access this resource.
    Forbidden:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden. Insufficient permissions to access this resource.
    NotFound:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found. Resource not found or route is not defined.
    NotImplemented:
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
      description: Route is not implemented
  securitySchemes:
    GODRole:
      type: http
      scheme: basic
    VCARole:
      type: http
      scheme: basic
    VCFRole:
      type: http
      scheme: basic
    VCDRole:
      type: http
      scheme: basic
    VenueERole:
      type: http
      scheme: basic
    VenueVRole:
      type: http
      scheme: basic
tags:
  - name: Auth
    description: All things Auth
  - name: Content
    description: All things content
  - name: Deployments
    description: All things deployments
  - name: Orders
    description: All things orders
  - name: Devices
    description: All things devices
  - name: Items
    description: All things items
  - name: Logs
    description: All things logs
  - name: Meals
    description: All things meals
  - name: Menus
    description: All things menus
  - name: Releases
    description: All things releases
  - name: Users
    description: All things users
  - name: Venues
    description: All things venues
  - name: APIKeys
    description: All things API keys
  - name: Payments
    description: All things payments
  - name: Subscribers
    description: All things subscribers
  - name: Tags
    description: All things tags