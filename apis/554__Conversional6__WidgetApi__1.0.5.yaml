openapi: 3.0.0
info:
  description: Endpoints for using the Conversional frontend widget. Please use the default API keys to authorize and test the endpoints
  version: "1.0.5"
  title: Conversional Widget API
  contact:
    email: support@conversional.de
tags:
  - name: Journey
    description: Endpoints for initializing and controlling the journey.
  - name: Questionnaire
    description: Questionnaire related endpoints.
  - name: Result
    description: Endpoints to display and interact with results or content.
    
servers:
  - url: https://testing.roomtailors.de/api/2.0/
    description: Testing API
    variables:
      apiKey:
        default: V8Ryk0XMZQ3XlyoCePAjZo9cVDTN9s55AXDVXBHWrKTNjhpx7ZQ6n0jjEc7O
  - url: https://staging.roomtailors.de/api/2.0/
    description: Staging API
    variables:
      apiKey:
        default: RhzXDgMoyw6eihjd8wu4zSVJF2kbBvGtNfrrweQ5KWj2eCfn8JrICnsiqMt1
  - url: https://api.conversional.de/2.0/
    description: Production API

security:
  - ApiKeyAuth: [] 
  
paths:
  # Journey endpoints
  '/journeys/{id}':
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - Journey
      summary: Sends journey configuration. This is the initial call to the API to decide if the widget is active or not.
      responses:
        '200':
          description: Contains overall widget confiugraton object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      configuration:
                        $ref: '#/components/schemas/Configuration'
                        
  # Questionnaire endpoints
  '/questionnaires/{id}':
    parameters:
      - $ref: "#/components/parameters/id"
    get: 
      tags:
        - Questionnaire
      summary: Provide a configuration for this questionnaire.
      responses:
        '200': 
          description: Questionnaire configuration values.
          content: 
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/abTest'
                  - $ref: '#/components/schemas/Questionnaire'
  '/questionnaires':
    post:
      tags: 
        - Questionnaire
      summary: Submit answers to a questionnaire to create a result and receive the token. Submitting multiple identical requests to this endpoint from the same IP will not create a new result to avoid spamming the database.
      parameters:
        - name: testmode
          in: query
          required: false
          schema:
            type: boolean
          description: If set to true, created record will be deleted at latest 24 hours after creation.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answers'
      responses:
        '200':
          description: Successfully created new result.
          content: 
            application/json:
              schema:
                example:
                  data: 
                    token: "m0VynYE"
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
        '400':
          description: Bad request. Usually in case of invalid data. 
        '500':
          description: Internal error.
        '404':
          description: Questionnaire id not found.
          
  # Result and content endpoints
  # todo: no correct format yet! Missing first level
  '/results/{token}':
    get:
      tags:
        - Result
      summary: Get the result view. This is a usually long and complex object. The request should be used sparingly.
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        '200':
          description: Result found and returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      abTest:
                        $ref: '#/components/schemas/abTest'
                      content: 
                        type: object
                        properties:
                          root:
                            $ref: '#/components/schemas/Builder'
                      profile:
                        $ref: '#/components/schemas/Style'
                      customer:
                        $ref: '#/components/schemas/Customer'
                      template:
                        type: string
                        description: Selection of the core template. Not used anymore
                      config:
                        $ref: '#/components/schemas/Configuration'
                    
  '/serviceRequests/{serviceName}':
    post:
      tags:
        - Result
      summary: Create a new service request by sending a payload to the right endpoint.
      parameters:
        - $ref: "#/components/parameters/serviceName"
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              description: Can have any payload. Required payloads may differ based on the called service.
              type: object
              properties:
                additionalProperties:
                  type: string
      responses:
        '200':
          description: Service request was successfully created. This usually involes sending the request to a responsible person to act on it.
          
            
  /locations:
    get:
      tags:
        - Result
      summary: Returns a list of locations for this journey.
      parameters:
        - name: token
          in: query
          required: true
          description: Token of the result
          schema:
            type: string
        - name: close_to
          in: query
          required: false
          description: Postal code or address that should be used to only return the 5 closest locations.
          schema:
            type: string
      responses:
        '404':
          description: Could not find journey related to provided token. Usually if result is no longer available.
          content: 
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  message: 
                    type: string
                    example: No result with token ABCDEF8 found.      
        '400': 
          description: Address could not be transformed into a valid geo code.
          content: 
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  message: 
                    type: string
                    example: Could not translate address 'address' into coordinates.
        '500':
          description: No projects found. Internal configuration error.
          content: 
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  message: 
                    type: string
                    example: No projects found for journey 11.
        '200':    
          description: An array of locations and project_ids to populate Timekit. Response can be empty, if no locations were close.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Locations'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: apiKey
  schemas:
  
    # Error objects
    Error:
      type: object
      required:
        - type
        - code
        - message
      properties:
        type: 
          type: string
          description: Name of the exception object
          example: UnauthorizedException
        code:
          type: number
          description: HTTP status code
          example: 401
        message: 
          type: string
          example: API Key authorization process with key failed. Invalid key.
        error_user_message:
          type: string
          description: User-readable and localized error message.
          example: Sorry, your credentials are not valid.
        error_user_title:
          type: string
          description: User-readable and localized error title.
          example: Login Failed
        error_code_internal:
          type: string
          description: Internal error code to specify the type of error. Internal codes are documented to be a reliable way to handle the error in the frontend.
          example: 4001
  
    # High level objects
    Locations:
      type: object
      properties:
        data:
          type: object
          description: Contains all locations. The key is the Timekit project id, the value is the location name to be displayed.
          additionalProperties:
            type: string
          example: 
            data: 
              929403ff-3e0c-4691-b112-08de2cb2e66: Stetten - Teststra√üe 1, 70001  Stetten
              7ff2311-3e0c-4691-b112-08de2cb2e66e: Beuren - Gummersweg 99, 70199 Beuren
    Answers:
      type: object
      properties:
        data:
          type: object
          properties:
            Id: 
              type: integer
              description: Id of the submitted questionnaire.
            Answers: 
              type: object
              description: Key value pairs with question_id (as string) and answer value as string or array of strings.
              additionalProperties: 
                type: string
              example: 
                "38": ">12 qm"
                "39": "U-K√ºche"
            Customer:
              $ref: '#/components/schemas/CustomerSignup'
            ServiceRequest:
              description: If key is included, a service request will be automatically created (even if no values under this key are present).
              additionalProperties:
                type: string
                description: Can have any number of key-value pairs that serve as payload of the service request. 
      example:
        data:
          Id: '4'
          Answers:
            '1':
              - '46'
              - '43'
              - '42'
            '5': pets
            '9': low_ceiling
            '17': female
          Customer:
            firstname: test
            email: nnn32nn@conversional.de
          meta:
            something: true
        
    CustomerSignup:
      type: object
      properties:
        firstname:
          type: string
        email:
          type: string
          format: email
        gender:
          enum:
            - m
            - f
          type: string
        password:
          type: string
          format: password
        lastname:
          type: string
          
        additionalProperties:
          type: string
    Builder:
      type: object
      properties:
        Content:
          $ref: '#/components/schemas/BuilderContent'
        Children:
          $ref: '#/components/schemas/BuilderChildren'
    Configuration:
      type: object
      required: [base_url, theme]
      properties:
        base_url: 
          type: string
          description: URL of the main installation location. Default redirect route to re-display the widget to users.
        theme:
          type: object
          properties:
            additionalProperties:
              type: string
        callToAction:
          type: object
          properties:
            loader:
              $ref: '#/components/schemas/Loader'
            exitIntent:
              oneOf:
                - $ref: '#/components/schemas/ExitIntentString'
                - $ref: '#/components/schemas/ExitIntentObject'
            exitIntentMobile:
              $ref: '#/components/schemas/ExitIntentMobile'
        tracking:
          type: object
          properties:
            tool:
              type: string
              enum:
                - gtag
                - ga
                - gtm
              description: Which pre-installed tracking solution is used on the partner's page.
            events:
              type: array
              items:
                $ref: '#/components/schemas/TrackingEvent'
        mouseTracking:
          type: boolean
          description: Enable mouse tracking tool to replay user sessions.
        blackList:
          $ref: '#/components/schemas/urlFilter'
        whiteList:
          $ref: '#/components/schemas/urlFilter'
        
    Questionnaire:
      type: object
      properties:
        Questionnaire:
          type: object
          properties:
            Question:
              type: array
              items:
                $ref: '#/components/schemas/Question'
            id: 
              type: string # should be integer
            Closure:
              oneOf:
                - $ref: '#/components/schemas/Closure'
                - $ref: '#/components/schemas/Builder'
            Configuration:
              $ref: '#/components/schemas/QuestionnaireConfiguration'
            Intro:
              description: Is either an HTML string or a Builder Object
              oneOf:
                - $ref: '#/components/schemas/htmlString'
                - $ref: '#/components/schemas/Builder'
    Question: 
      type: object
      properties:
        Option:
          type: array
          items:
            $ref: '#/components/schemas/Option'
        id:
          type: string
          description: Is always a number, should be integer.
        title:
          type: string
          description: Usually single word headline
        type:
          type: string
          description: Name of the component, that should be used to render this questions.
        question:
          type: string
          description: question text
        multiple: 
          type: boolean
          description: True if multiple answers are allowed
        description:
          type: string
          description: Advice how to answer the question
        required:
          type: boolean
          description: True, if question must be answered
        min:
          type: string
          description: Is always an integer value. Minimal answers required.
        max:
          type: string
          description: Is always an integer value. Maximum answers allowed
        show:
          type: string
          description: Empty or show condition of this question. Sytax is 'A' + questionId + ';==' + value
          example: "A18;=='wohnzimmer' || A18;==undefined"
      example:
        - id: "39"
          title: "Kitchen form"
          type: "ImageMultiCheck"
          question: "Pick the form of your kitchen"
          multiple: false
          description: "Select a single option"
          required: true
          min: "1"
          max: "1"
          show: ""
    Option:
      type: object
      properties: 
        id:
          type: string
          description: String, usually integer value
        label:
          type: string
          description: Text to be displayed to the end user
        value: 
          type: string
          description: Will be stored when selected
        reference:
          type: string
          description: Internal linked asset id, can be ignored.
        question_id:
          type: string
          description: ID of the question it belongs to
        image:
          type: string
          pattern: 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'
          description: URL of the related image file.
        properties: 
          type: object
          description: Properties to specify, depends on the type of question.
      example:
        - id: "283"
          label: "Einzeilig"
          value: "K√ºchenzeile"
          reference: "1349"
          question_id: "39"
          image: "https://api.conversional.de/files/filestore/file/1349/GenF2einzeilig.jpg"
    Closure: 
      type: object
      properties:
        id:
          type: string
        hashId:
          type: string
        fields: 
          type: array
          items:
            $ref: '#/components/schemas/ClosureField'
    ClosureField:
      type: object
      required: [name, label, required, type, questionnaire_id]
      properties:
        name:
          description: Field name, used as key for this value
          type: string
          example: Firstname
        label:
          type: string
          description: Field description, usually shown in the placeholder
          example: Ihr Vorname
        required:
          type: boolean
          description: If set to true, will lead to server-sided validation errors.
        type:
          type: string
          description: Input type of the field.
          example: text
        icon: 
          type: string
          description: URL of the image
          pattern: 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'
        image: 
          type: string
          description: URL of the image
          pattern: 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'
        questionnaire_id:
          type: string
    QuestionnaireConfiguration:
      type: object
      properties:
        logo:
          type: string
          pattern: 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'
          description: Image URL
        title: 
          type: string
          description: Headline of the questionnaire
        subtitle:
          type: string
          
    # Builder Configuration
    BuilderChildren:
      type: object
      properties:
        additionlProperties:
          $ref: '#/components/schemas/BuilderContent'
    BuilderContent:
      type: object
      properties:
        id:
          type: string
        componentKey:
          type: string
          description: Identifier of the component. Potentially necessary for identifying and triggering components from outside.
        format:
          type: string
          enum:
            - html
            - component
            - markdown
          description: Defines which paradigm is used for rendering. Other component formats are deprecated.
        type:
          type: string
          description: Type of the element with its format paradigm. In case of HTML this is the tag, e.g. h3, h2, p. In case of component this is the name of the component, e.g. IconGrid, Flexbox etc.
        props:
          $ref: '#/components/schemas/BuilderContentProps'
    BuilderContentProps:
      type: object
      description: Allowed props depend on the component and can have various types and formats.
      properties:
        styles:
          $ref: '#/components/schemas/BuilderContentStyles'
        additionalProperties:
          type: string
    BuilderContentStyles:
      type: object
      description: CSS in React style. General styles are always applied but can be overwritten by desktop or mobile styles.
      properties:
        general:
          $ref: '#/components/schemas/style'
        desktop: 
          $ref: '#/components/schemas/style'
        mobile:
          $ref: '#/components/schemas/style'
      example:
        - styles:
          general:
            right: 65
            bottom: 8
          mobile:
            backgroundColor: 'green'

    # Journey Configuration
    ExitIntentString:
      type: string
      description: Exit intent image URL
    ExitIntentObject:
      type: object
      properties:
        image:
          type: string
          description: URL
        backdrop:
          type: string
          description: Valid CSS color value
          example:
            - '#EFEFEF'
            - 'rgba(240,240,0,0.5)'
    ExitIntentMobile:
      type: object
      required: [buttonText, leadText]
      properties:
        buttonText:
          type: string
        leadText:
          type: string
        style:
          $ref: '#/components/schemas/style'
      example:
        - buttonText: 'Start Advisor'
          leadText: 'You did not find your kitchen yet?'
          styles: 
            desktop: 
              fontSize: 15
    Loader:
      type: object
      properties:
        labelReady:
          type: string
          description: Text after the questionnaire has been answered.
        labelQuestionnaire:
          type: string
          description: Text before the questionnaire has been answered.
        position:
          description: Pre-defined positions to re-locate the launcher element
          type: string
          enum:
            - left
        styles:
          $ref: '#/components/schemas/BuilderContentStyles'
    TrackingEvent:
      type: object
      description: Criteria for filtering tracking events. Usually all filters must be met to track an event.
      properties: 
        category: 
          type: string
        action: 
          type: string
        label:
          type: string
    Style:
      type: object
      description: Processed values from the questionnaire. The key is the proerty, the value is an array of values, usually either the single- or multi selected. 
      properties:
        additionalProperties:
          type: array
          items:
            type: string
      example:
        - farbe:
          - dark
          - colorful
        - material:
          - wood
          - granit
    Customer:
      type: object
      description: Customer profile data. As opposed to the Style, the customer profile usually remains the same across different results (e.g. by answering a questionnaire multiple times). Contains values like phone number etc.
      properties:
        email:
          type: string
          format: mail
        firstname:
          type: string
        firstname_genitive:
          type: string
          description: Firstname in the second form.
        gender: 
          type: string
          enum:
            - m
            - f
            - ''
        active:
          type: boolean
        alias:
          $ref: '#/components/parameters/token'
    
    # Primitive, single line parameters
    abTest:
      type: string
      pattern: '^[a-zA-Z0-9]{8}}$'
      example: gx0YM01R
    htmlString:
      type: string
      example: <div><p><b>In 8 Schritten zu Ihrer Traumk√ºche!</b></p><p>Fragen beantworten und pers√∂nliche <br>Empfehlungen erhalten.</p><br></div></div><div class=\"rt-intro-background\"></div>
    style:
      type: object
      description: React-friendly style attribute
      properties:
        additionalProperties:
          type: string
    urlFilter: 
      oneOf:
        - $ref: '#/components/schemas/urlFilterString'
        - $ref: '#/components/schemas/urlFilterArray'
    urlFilterString:
      type: string
      description: Regular expression to filter URLs
    urlFilterArray:
      type: array
      items:
        $ref: '#/components/schemas/urlFilterString'
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: number
        default: 7
    token:
      name: token
      in: path
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{6-8}}$'
        example: gx0YM01R
    serviceName:
      name: serviceName
      in: path
      required: true
      schema:
        type: string
        enum:
          - callback
          - callbackFromLocation
