openapi: 3.0.0


servers:
  - url: 'https://cms.parkingdetection.com/api/public'

  
info:
  description: |
    
    # General information
    
    ## Authentication
    
    HTTP bearer authentication (a.k.a. token authentication) is used,
    i.e. API key obtained from Parking Detection team must be present in the HTTP authorization header:
    
    `Authorization: Bearer <API key>`
    
    ## Request reponses
    
    Currently, the response content type (if any) is always `application/json`
    or `image/jpeg` (only for camera frames).
    
    Newer version of the API may be running on the server at the given URL address(es).
    If so, the protocol should be backward-compatible but there may be:
    - additional properties in any returned JSON object,
    - additional optional request parameters and
    - error codes and error messages may differ.
    
    HTTP status codes are always set in HTTP response header.
    * `200` is returned in most cases when a **request was successfully processed**.
      In case of `GET` requests the response body always contains only the requested data.
    * `4xx` codes are returned when the server was **unable to successfully process a request**
      and there is **no problem on the server side**.
      In that case an array of one or more `Error` objects is present in the response body.
      _(See the Models section of this document)_
    * `5xx` codes are returned when there is some **problem on the server side**.
      No response body is usually present in that case (occasionally an `Error` array may be present in the future versions, though).
    
    
    
  version: "0.4.3"
  title: Parking Detection public API
  
  
# tags:
#   - name: admins
#     description: Secured Admin-only calls
#   - name: developers
#     description: Operations available to regular developers


security:
  - HttpApiKey: []




paths:


  /parkinglots:
    get:
      # tags:
      #   - developers
      summary: Get a list of parking lots available to the token bearer
      operationId: parkinglots
      responses:
        200:
          description: OK (available parking lots returned)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkingLotInfo'
        401:
          $ref: '#/components/responses/Unauthorized'
                
        500:
          $ref: '#/components/responses/InternalError'
        
          
          
  /parkinglotDetails:
    get:
      summary: Get "static" details of a parking lot
      parameters:
        - in: query
          name: parkingLotID
          required: true
          schema:
            type: integer
            example: 1
        - in: query
          name: includeGateways
          description: |-
            Indicates whether a list of parking lot's gateways (including their cameras)
            shall be included in response.
            Default is `false`.
          schema:
            type: boolean
        - in: query
          name: includeRules
          schema:
            type: boolean
          description: 
            Indicates whether a list of parking lot's rules shall be included in response.
            Use `/occupancy` method with `includeRules` param to get
            parking places <-> rules associations and evaluations.
            Default is `false`.
        - in: query
          name: includeParkingPlaces
          schema:
            type: boolean
          description:
            Indicates whether a list of parking lot places' details shall be included in response.
            Default is `false`.
        - in: query
          name: includeLocation
          schema:
            type: boolean
          description:
            Indicates whether parking lot's geo location coordinates shall be included in response.
            When combined with `includeParkingPlaces`,
            the coordinates will also be provided for each parking place.
            Default is `false`.
            
        - in: query
          name: includeZones
          schema:
            type: boolean
          description:
            Indicates whether parking zones on the parking lot shall be included in response.
            Default is `false`
            
        - in: query
          name: includeMonitors
          schema:
            type: boolean
          description:
            Indicates whether parking lot's monitors shall be included in response.
            Default is `false`
          
      responses:
        200: 
          description: |-
            Details of a parking lot and optionally it's gateways.
            
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkingLotDetails'
                example:
                  name: "Copenhagen - Jeudan Parking"
                  description: "This is an example description"
                  gateways:
                  - uuid: "000007684321"
                    isOnline: false
                    cameras:
                    - uuid: "000007684321_e56a809f3c66"
                      isOnline: true
                      number: 1
                    - uuid: "000007684321_78ffc984fcab"
                      isOnline: false
                      number: 2
                  rules:
                    - id: 1
                      name: "Max 2 hours - weekend"
                      daysOfWeek: [false, false, false, false, false, true, true]
                      sinceDayTime: "16:33:00"
                      untilDayTime: "18:00:00"
                      isActive: false
                      type: "MaximumTimeOfStay"
                      rule:
                        maxSeconds: 7200
                    - id: 2
                      name: "Trucks and buses only - work days"
                      daysOfWeek: [true, true, true, true, true, false, false]
                      sinceDayTime: "07:00:00"
                      untilDayTime: "17:00:00"
                      isActive: true
                      type: "VehicleType"
                      rule:
                        vehicleTypes: ["HeavyVehicle", "Bus"]
                  parkingPlaces:
                    - id: 1003
                      number: 104
                      latitude: null
                      longitude: null
                      description: "Boss place"
                  monitors:
                    - id: 1
                      name: "Unusual low number of vehicles"
                      daysOfWeek: [true, true, true, true, true, true, true]
                      sinceDayTime: "08:00:00"
                      untilDayTime: "18:00:00"
                      isActive: false
                      type: "Threshold"
                      details:
                        thresholdType: "Less"
                        states: ["Occupied"]
                        threshold: 5
                  latitude: 44.4657467
                  longitude: 75.5646432
                  zones:
                    - id: 10001
                      number: 1
                      segments: [1,2,3]
                      
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/ParkingLotNotFound'
        500:
          $ref: '#/components/responses/InternalError'
                 
                 
                  
  /occupancy:
    get:
      summary: |-
        Get occupancy state at a given point in time (i.e. parking lot's dynamic data).
        The occupancy state is returned only for non-zone parking places. To get occupancy in
        parking zones use "/zones".
      operationId: occupancy
      parameters:
        - in: query
          name: parkingLotID
          required: true
          schema:
            type: integer
            example: 42
        - in: query
          name: time
          required: false
          schema:
            type: string
            format: dateTime
            example: '2018-01-01T00:00:00Z'
          description:
            Date and Time ISO string in UTC (i.e. YYYY-MM-DDTHH:MM:SSZ eg. 2018-01-01T00:00:00Z).
            Another formats may be accepted too (undefined behaviour).
            Current occupancy data are returned when the parameter is not present.
        - in: query
          name: includeRules
          required: false
          schema:
            type: boolean
          description: 
            If `true` then `rules` array will be added to each parking place.
            Each item of the array contains rule ID
            (see `/parkinglotDetails` method with `includeRules` param)
            and rule evaluation.
            Default is `false`.
            Must not be combined with `time` parameter.
      responses:
        200:
          description: List of parking places with their occupancy state
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OccupancyResponsePlace'
                  
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/ParkingLotNotFound'
        500:
          $ref: '#/components/responses/InternalError'
         
  /zones:
    get:
      summary: Gets vehicles parked inside a parking zone on given parking lot.
      description: |-
        **What is parking zone?**
      
        - `Parking zone` is a parking area on a parking lot without distinctive parking spots so
          a vehicle can park anywhere within the parking zone.
        - The parking zone is divided into smaller pieces called `segments`. These are used for detection of position of parked vehicles by determining which segments are occupied.
        - The list of parking zones on parking lot can be obtained from `/parkinglotdetails` with `includeZones` parameter set to `true`.
          
      
        **Return value**
        
        - List of vehicles parked in parking zone(s) on parking lot `parkingLotId`.
        
      parameters:
        - in: query
          name: parkingLotId
          required: true
          example: 1
          schema:
            type: integer
        - in: query
          name: includeSegments
          example: false
          description: |-
            Indicates whether or not should segments occupied by car be included in response.
            Default is `false`.
          schema:
            type: boolean
        - in: query
          name: includeZoneIds
          example: false
          description: |-
            Indicates whether or not should parking zone IDs occupied by car be included 
            in response. Default is `false`.
          schema:
            type: boolean
      
      responses:
        200:
          description: List of vehicles parked inside a zone(s)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkingZoneVehicle'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalError'
          
  /monitors:
    get:
      summary: Returns states of the monitors watching parking lot.
      description: |-
        **Monitors** watch parking places on parking lot. 
        Each monitor can be set to watch for certain condition.
        When the condition is met, monitor raises warning.
        
        As an example, suppose that we want to be warned when there is a problem with detection.
        We can set monitor to count number of parking places in `Unknown` state.
        We can further set the condition for warning to `greater than 5` which means
        that if the number of `Unknown` parking places on the parking lot is greater than 5,
        the monitor is in warning state.
        
      parameters:
        - in: query
          name: parkingLotId
          required: true
          example: 1
          schema:
            type: integer

      responses:
        200:
          description: List of monitor states on the parking lot
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MonitorState'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalError'     
         
          
  /cameraframe:
    get:
      summary: Gets a camera's frame (image).
      description: |
        **Background**
        
        - The server first needs to receive the image from a gateway
          in order to be able to serve it to the API client.
        - The gateway may not be transmitting camera frames at the time of the request,
          thus the server may not have the image at the time of the request.
        - Transmitting an image from a gateway takes some time.
        
        **Usage**
        
        - Each `cameraframe` request requests a gateway to start transmitting
          the images to the server for some time.
        - Each valid `cameraframe` request provides meta information about
          the camera's current state and its frame currently available to the server
          in **headers** or **JSON object in the response body**.
        - **Plus:**
            - `cameraframe` with no parameters gets whatever image
              the server has at the time of the request (if any)
              **plus meta information in its headers**.
            - `newerThan` parameter restricts the positive response only for frames
              **strictly newer** than given point in time.
            - `infoOnly` parameter tells the server to only provide **JSON with 
              meta-information instead of an image**.
              Must not be combined with `newerThan` parameter.
        - See the parameters, `200` response and `404` response descriptions for more details.
        
        **The proposed approach** for getting a sequance of most recent frames
        1. First, request `cameraframe` with no `newerThan` set.
           The server initiates gateway-server image transfer and returns whatever image it has
           (or `404` code if no frame was cached yet).
        2. Repeat the requests periodically (say each 1-3 seconds) but this time with `newerThan` set to  the `Capture-Time` header of the last received camera frame
           (set in its HTTP header if the response was `200`).
           Thus `200` status with newer image or `404` status should be returned every time.
           
        **Alternative approach**
        1. Request `cameraframe` with no `newerThan` set.
        2. Repeatedly (say each 1-3 seconds) query the server using `infoOnly`
           parameter.
        3. If the server has a newer image than the client,
           request `cameraframe` without the `infoOnly` parameter
           (`newerThan` is not needed either).
        
      parameters:
        - in: query
          name: uuid
          required: true
          example: "00000fff8941_7812cc54ffca"
          schema:
            type: string
            
        - in: query      
          name: newerThan
          description: |-
            UTC DateTime (in ISO format).
            
            If not given, any available frame (if any) is returned.
            
            If given and the cached frame is newer than `newerThan` then full frame data are sent. 
            
            If the cached frame was captured before newerThan then `404` is returned (see below).
            
          example: "2018-01-01T00:00:00.000Z"
          schema:
            type: string
            format: dateTime
            
        - in: query
          name: infoOnly
          description: |
            Return JSON meta information instead of an image.
            Must not be combined with `newerThan` parameter.
          schema:
            type: boolean
    
      responses:
        200: 
          description: |-
            Binary data of the frame with meta-information in an HTTP header
            
            OR meta-information JSON object.
          headers:
            Capture-Time:
              schema:
                type: string
                format: dateTime
              description: |
                [date-time] Frame capture date and time in UTC in ISO format,
                e.g.: 2018-01-01T00:00:00.000Z.
                Not set if infoOnly = true.
                
            Camera-Online:
              schema:
                type: boolean
              description: |
                [true/false]
                Indicates whether camera was on-line during the request.
                If so, the frame-update request was sent to the camera.
                Not set if infoOnly = true.
                
          content: 
            image/jpeg:
              schema:
                type: string
                format: binary
                example:
                  "<binary-data-of-the-image>"
            application/json:
              schema:
                $ref: '#/components/schemas/CameraFrameInfo'
                  
        400:
          $ref: '#/components/responses/BadInputFormat'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Not Found (camera not found / frame not currently available)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CameraFrame404'
                example:
                  - status: 404
                    message: "No camera frame available"
                    details:
                      type: FrameNotAvailable
                      lastFrameUpdateTime: null
                      isOnline: true
        500:
          $ref: '#/components/responses/InternalError'
      
  /globalParkingLots:
    get:
      summary: Gets parking lot information and occupancy information together
      parameters:
        - in: query
          name: parkingLotIds
          required: true
          example: "1,2,3"
          schema:
            type: string
            
      responses:
        200:
          description: List of parking lots with parking places including occupancy state.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GlobalParkingLot'
        400:
          $ref: '#/components/responses/BadInputFormat'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/OneOfParkingLotsNotFound'
        500:
          $ref: '#/components/responses/InternalError'
  
  
  /globalGroups:
    get:
      summary: |- 
        Returns list of parking place groups on parking lots
      parameters:
        - in: query
          name: parkingLotIds
          required: true
          example: "1,2,3"
          schema:
            type: string
            
      responses:
        200:
          description: The list of groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GlobalParkingPlaceGroup'
        400:
          $ref: '#/components/responses/BadInputFormat'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/OneOfParkingLotsNotFound'
        500:
          $ref: '#/components/responses/InternalError'
          
          
  /globalUnits:
    get:
      summary: |- 
        Returns list of hardware units on parking lots
      parameters:
        - in: query
          name: parkingLotIds
          required: true
          example: "1,2,3"
          schema:
            type: string
            
      responses:
        200:
          description: The list of hardware units.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gateways:
                      type: array
                      items:
                        $ref: '#/components/schemas/GlobalUnit'
                    cameras:
                      type: array
                      items:
                        $ref: '#/components/schemas/GlobalCamera'
                    detectionUnits:
                      type: array
                      items:
                        $ref: '#/components/schemas/GlobalDetectionUnit'
        400:
          $ref: '#/components/responses/BadInputFormat'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/OneOfParkingLotsNotFound'
        500:
          $ref: '#/components/responses/InternalError'
          
          
components:


  responses:
  
    BadRequest:
      description: Bad request (one or more parameters have invalid format)
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
            example:
              - status: 400
                message: "Invalid  or missing param: parkingLotID"
  
    BadInputFormat:
      description: Bad request (one or more parameters have invalid format)
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
            example:
              - status: 400
                message: "Invalid or missing param: ...."
                  
    Unauthorized:
      description: Unauthorized (missing or invalid API key)
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
            example:
              - status: 401
                message: "Invalid API key: <api-key>"
                
    ParkingLotNotFound:
      description: Not found (parking lot does not exist or is not accessible by the token bearer)
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
            example:
              - status: 404
                message: |-
                  Parking lot with ID=25 does not exist or is not available for the provided API key.
    
    OneOfParkingLotsNotFound:
      description: One of the parking lots specified in input parameter was not found.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Error'
            example:
              - status: 404
                message: 'Parking lot with ID=2 was not found'      
                
    InternalError:
      description: Internal server error


  schemas:
  
    Error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
        message:
          type: string
        details:
          type: object 
          
    CameraFrame404:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          required:
            - details
          properties:
            details:
              allOf:
                - type: object
                  properties:
                    type:
                      type: string
                      enum: [CameraNotFound | FrameNotAvailable]
                      example: "FrameNotAvailable"
                - $ref: '#/components/schemas/CameraFrameInfo'
                  
    CameraFrameInfo:
      type: object
      required:
        - type
      properties:
        lastFrameUpdateTime:
          type: string
          format: dateTime
          description: |-
            Time of the latest frame available to the server.
            
            Only present if `type` = `"FrameNotAvailable"`.
            
            `null` if there is no frame available to the server.
          example: null
        isOnline:
          type: boolean
          description: |-
            Is the camera on-line?
            
            Only present if `type` = `"FrameNotAvailable"`.
          example: true
      
    CameraFrame404Type:
      type: string
      enum: [CameraNotFound | FrameNotAvailable]
  
    ParkingLotInfo:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          example: 42
        name:
          type: string
          example: 'Parking lot name'
          
          
    ParkingZoneInfo:
      type: object
      properties:
        id:
          type: number
          description: Unique ID of the parking zone within the system.
          example: 10001
        number:
          type: number
          description: Unique identifier of a parking zone within the parking lot.
          example: 1
        segments:
          type: array
          description: List of parking places (referenced by their numbers) associated with the parking zone.
          items:
            type: integer
          example: [1,2,3]
          
          
    ParkingZoneVehicle:
      type: object
      properties:
        vehicleType:
          type: string
          $ref: '#/components/schemas/VehicleType'
        since:
          type: string
          description: when was the vehicle parked
          format: dateTime
          example: '2018-01-01T00:00:00.000+01:00'
        segments:
          type: array
          description: |-
            segments occupied by car as list of parking places referenced by its `number`.
          items:
            type: integer
          example: [1,2,3]
        zoneIDs:
          type: array
          description: IDs of parking zones occupied by the car
          items:
            type: integer
          example: [10001,10002]
      
      
    OccupancyResponsePlace:
      allOf:
        - $ref: '#/components/schemas/ParkingPlaceInfo'
        - type: object
          properties:
            state:
              type: string
              $ref: '#/components/schemas/OccupancyState'
            time:
              type: string
              format: dateTime
              description: Date and time ISO string in the parking lot's timezone.
              example: '2018-01-01T00:00:00.000+01:00'
            rules:
              type: array
              items:
                type: object
                description: The list of rules that are applied on the parking place 
                properties:
                  id:
                    type: integer
                    description: ID of the rule
                  isViolated:
                    type: boolean
                    description: Indicates whether the rule is violated for the parking place
              example:
                - id: 1
                  isViolated: true
            
    VehicleType:
      type: string
      description: the type of the vehicle
      enum: [Car, MediumVehicle, HeavyVehicle, Bus, Motorbike, Bike]
      example: Car
            
    OccupancyState:
      type: string
      enum: [Free, Car, MediumVehicle, HeavyVehicle, Bus, Motorbike, Bike, Unspecified]
      description: |-
        If the parking place's state is neither `Free` nor `Unknown` then it is occupied.
        
        The state is `Unknown` if the Parking Detection system is unable
        to provide any occupancy information.
        
        The state is `Unspecified` if the Parking Detection system evaluated it as occupied
        but was unable to recognize any of the supported vehlicle types.
      example: Car
      
    MaxTimeOfStayRule:
      type: object
      description: A type of rule that limits the stay on parking place for given time.
      properties:
        maxSeconds: 
          type: integer
          description: A maximum duration (in seconds) for which it is possible to stay at a parking place.
          example: 7200
          
    VehicleTypeRule:
      type: object
      description: A type of rule that limits what category of vehicle can park at given place.
      properties:
        vehicleTypes:
          type: array
          example: [HeavyVehicle, Bus]
          description: |-
            An array of vehicle categories that are allowed to park on a place.
          items:
            $ref: '#/components/schemas/VehicleType'
    
    ParkingLotDetails:
      type: object
      required:
        - description
        - name
      properties:
        name:
          type: string
          description: Name of the parking lot
        description:
          type: string
          description: Description of the parking lot
        gateways:
          type: array
          description: List of gateways of the parking lot
          items:
            type: object
            properties:
              uuid: 
                type: string
                description: UUID of the gateway
                example: "000000007f8c1f15"
              isOnline:
                type: boolean
                description: Online status of the gateway
              latitude:
                type: number
                nullable: true
              longitude:
                type: number
                nullable: true
              cameras:
                type: array
                description: List of cameras connected to the gateway
                items:
                  type: object
                  properties:
                    uuid:
                      type: string
                      description: UUID of the camera
                      example: "000000007f8c1f15_e1507dd71cee"
                    isOnline:
                      type: boolean
                      description: Online status of the camera
                    latitude:
                      type: number
                      nullable: true
                    longitude:
                      type: number
                      nullable: true
                    number: 
                      type: integer
                      description: Camera number
                      example: 1
        rules:
          type: array
          description: The set of rules applied to the parking lot
          items:
            type: object
            properties:
              id:
                type: integer
                description: ID of the rule
              name:
                type: string
                description: Name of the rule
              daysOfWeek:
                type: array
                description: 
                  Days of the week starting with Monday.
                  `true` for the days in which the rule is active.
                items:
                  type: boolean
              sinceDayTime:
                type: string
                format: dateTime
                example: "16:42:00"
                description: 
                  The time of a day before which the rule is inactive.
                  `null` if there is no time-of-a-day constraint for a rule to be active.
              untilDayTime:
                type: string
                format: dateTime
                example: "17:42:00"
                description: 
                  The time of a day after which the rule is inactive.
                  `null` if there is no time-of-a-day constraint for a rule to be active.
              isActive:
                type: boolean
                description: Indicates whether the rule is currently active (in effect)
              type:
                type: string
                description: Type of the rule
              rule:
                type: object
                description: Specific details of the rule
                oneOf:
                  - $ref: '#/components/schemas/MaxTimeOfStayRule'
                  - $ref: '#/components/schemas/VehicleTypeRule'
        monitors:
          type: array
          description: The array of monitors watching the parking lot
          items:
            type: object
            properties:
              id:
                type: integer
                description: ID of the monitor
              name:
                type: string
                description: Name of the monitor
              daysOfWeek:
                type: array
                description: 
                  Days of the week starting with Monday.
                  `true` for the days in which the monitor is active.
                items:
                  type: boolean
              sinceDayTime:
                type: string
                format: dateTime
                example: "16:42:00"
                description: 
                  The time of a day before which the monitor is inactive.
                  `null` if there is no time-of-a-day constraint for a monitor to be active.
              untilDayTime:
                type: string
                format: dateTime
                example: "17:42:00"
                description: 
                  The time of a day after which the monitor is inactive.
                  `null` if there is no time-of-a-day constraint for a monitor to be active.
              isActive:
                type: boolean
                description: Indicates whether the monitor is currently active (in effect)
              type:
                type: string
                description: Type of the monitor
                enum: [Threshold]
              details:
                type: object
                description: Specific details of the monitor
                oneOf:
                  - $ref: '#/components/schemas/ThresholdMonitorDetails'
        parkingPlaces:
          type: array
          description: Array of parking lot's (non-zone) parking places with their details
          items:
            type: object
            properties:
              id: 
                type: integer
                description: ID of the parking place
              number:
                type: integer
                description: Unique number of the parking place in parking lot scope.
              description:
                type: string
              latitude:
                type: number
                description: 
                  Latitude coordinate of the parking place in WGS-84
              longitude:
                type: number
                description: 
                  Longitude coordinate of the parking place in WGS-84
        latitude:
          type: number
          description: 
            Latitude coordinate of the parking lot in WGS-84
        longitude:
          type: number
          description: 
            Longitude coordinate of the parking lot in WGS-84
        zones:
          type: array
          items:
            $ref: '#/components/schemas/ParkingZoneInfo'
  
    
    MonitorState:
      type: object
      properties:
        id: 
          type: integer
          description: The ID of monitor
        warning:
          type: boolean
          description: Indicates whether the monitors condition is met.
  
    
    ThresholdMonitorDetails:
      type: object
      properties:
        thresholdType:
          type: string
          enum: [Less,Greater]
        states:
          type: array
          items:
            type: string
            enum: [Occupied, Free, Unknown]
        threshold:
          type: integer
    

    ParkingPlaceInfo:
      type: object
      properties:
        id:
          type: integer
          example: 13007
        number:
          type: integer
          example: 7
    
    
    GlobalParkingPlaceGroup:
      type: object
      properties:
        id:
          type: integer
          description: ID of the group
        parkingLotId:
          type: integer
          description: ID of a parking lot which the group belongs
        name:
          type: string
          description: Name of the group
        occupied:
          type: integer
          description: Number of occupied parking places in the group 
        free:
          type: integer
          description: Number of free parking places in the group 
        unknown:
          type: integer
          description: Number of unknown parking places in the group 
    
    
    GlobalUnit:
      type: object
      properties:
        uuid:
          type: string
          description: Identifier of the unit
        parkingLotId:
          type: integer
          description: ID of the parking lot where the unit operates
        state:
          type: string
          enum: [OK, Warning, Error]
        stateMsg:
          type: string
          description: Detailed description of the unit state
        lastStatusUpdate:
          type: string
          format: dateTime
          description: The last time when the unit communicated with CMS
          example: '2018-01-01T00:00:00.000+01:00'
          
          
    GlobalDetectionUnit:
      type: object
      properties:
        uuid:
          type: string
          description: Identifier of the unit
        parkingLotIds:
          type: array
          description: Parking lots where the unit operates
          items:
            type: integer
        state:
          type: string
          enum: [OK, Warning, Error]
        stateMsg:
          type: string
          description: Detailed description of the unit state
        lastStatusUpdate:
          type: string
          format: dateTime
          description: The last time when the unit communicated with CMS
          example: '2018-01-01T00:00:00.000+01:00'
    
    
    GlobalCamera:
      allOf:
        - $ref: '#/components/schemas/GlobalUnit'
        - type: object
          properties:
            lastImageReceivedCMS:
              type: string
              format: dateTime
              description: The last time when CMS received image from the camera
              example: '2018-01-01T00:00:00.000+01:00'
            lastImageReceivedDetectionUnit:
              type: string
              format: dateTime
              description: The last time when detection unit received image from the camera
              example: '2018-01-01T00:00:00.000+01:00'
            lastDetection:
              type: string
              format: dateTime
              description: The last time when detection happened on the camera
              example: '2018-01-01T00:00:00.000+01:00'
    
    
    GlobalParkingPlace:
      allOf:
        - $ref: '#/components/schemas/ParkingPlaceInfo'
        - type: object
          properties:
            state:
              $ref: '#/components/schemas/OccupancyState'
            since:
              type: string
              format: dateTime
              description: DateTime since the parking place is in current state (in the parking lot's timezone).
              example: '2018-01-01T00:00:00.000+01:00'
            parkingPlaceGroupIds:
              type: array
              description: 'IDs of groups which the parking place is part of'
              items:
                type: integer
    
    GlobalParkingLot:
      type: object
      properties:
        parkingLotId:
          type: integer
          description: The parking lot ID
        name:
          type: string
          description: Name of the parking lot
        description:
          type: string
          description: The description of the parking lot
        parkingPlaces:
          type: array
          description: Array of parking lot's parking places including their occupancy state
          items:
            $ref: '#/components/schemas/GlobalParkingPlace'
              
  securitySchemes:
    HttpApiKey:
      type: http
      scheme: bearer