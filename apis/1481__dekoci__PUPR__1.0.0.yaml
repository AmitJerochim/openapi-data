openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/dekoci/PUPR/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: http://api.cahayaalam19.com/api/v1
info:
  description: Simple API for PUPR
  version: "1.0.0"
  title: PUPR API
  contact:
    email: dekocianthony@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: house
    description: All about house API
  - name: user
    description: Handle user credentials
  - name: address
    description: Get province and city
  - name: profile
    description: Get user detail and update job / personal
  - name: bookmark
    description: Set favorite house or unfavorite house
paths:
  /province:
    get:
      tags:
        - address
      summary: get all province
      operationId: getAllProvince
      description: |
        Get all province
      responses:
        '200':
          description: search results matching criteria
        '400':
          description: bad input parameter
  /city:
    get:
      tags:
        - address
      summary: get all city
      operationId: getAllCity
      description: |
        Get all province
      parameters:
        - in: query
          name: province
          description: province name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
        '400':
          description: bad input parameter
          
  /profile/detail:
    get:
      tags:
        - profile
      summary: get user profile detail
      operationId: getUserProfileDetail
      description: |
        Get userr profile detail
      responses:
        '200':
          description: search results matching criteria
        '400':
          description: bad input parameter
  /profile/myjob/update:
    post:
      tags:
        - profile
      summary: update user job 
      operationId: updateUserJob
      description: |
        Update user job
      responses:
        '200':
          description: search results matching criteria
        '400':
          description: bad input parameter
  /profile/mypersonal/update:
    post:
      tags:
        - profile
      summary: update user personal
      operationId: updateUserPersonal
      description: |
        Update user personal
      responses:
        '200':
          description: search results matching criteria
        '400':
          description: bad input parameter
  /bookmark/list:
    get:
      tags:
        - bookmark
      summary: get list bookmarked user
      operationId: getListBookmarked
      description: |
        Get list bookmarked user
      responses:
        '200':
          description: search results matching criteria
        '400':
          description: bad input parameter
  /bookmark/add:
    post:
      tags:
        - bookmark
      summary: bookmark house
      operationId: bookmarkHouse
      description: |
        Bookmark house
      responses:
        '200':
          description: search results matching criteria
        '400':
          description: bad input parameter
  /bookmark/remove:
    post:
      tags:
        - bookmark
      summary: unbookmark house
      operationId: unbookmarkHouse
      description: |
        Unbookmark house
      responses:
        '200':
          description: search results matching criteria
        '400':
          description: bad input parameter      
  /house/search:
    get:
      tags:
        - house
      summary: searches house
      operationId: searchHouse
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - in: query
          name: q
          description: query to search city or province
          required: false
          schema:
            type: string
        - in: query
          name: price
          description: example '100000000,150000000'
          schema:
            type: string
            format: int32
            minimum: 0
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchHouse'
        '400':
          description: bad input parameter
  /house/detail:
    get:
      tags:
        - house
      summary: searches house
      operationId: getDetailHouse
      description: |
        Get detail house by id
      parameters:
        - in: query
          name: id
          description: house id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchHouse'
        '400':
          description: bad input parameter
          
  /register:
    post:
      tags:
        - user
      summary: register new user
      operationId: registerUser
      description: |
        Register new user
      parameters:
        - in: query
          name: phone
          description: phone number
          required: true
          schema:
            type: string
        - in: query
          name: email
          description: user email
          required: true
          schema:
            type: string
        - in: query
          name: password 
          description: password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegisterUser'
        '400':
          description: bad input parameter
  /login:
    post:
      tags:
        - user
      summary: login user to get token
      operationId: loginUser
      description: |
        Login user
      parameters:
        - in: query
          name: email
          description: user email
          required: true
          schema:
            type: string
        - in: query
          name: password 
          description: password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoginUser'
        '400':
          description: bad input parameter
  /logout:
    post:
      tags:
        - user
      summary: logout user with token
      operationId: logoutUser
      description: |
        Logout user
      parameters:
        - in: query
          name: token
          description: user token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogoutUser'
        '400':
          description: bad input parameter
components:
  schemas:
    LogoutUser:
      type: object
      required:
        - status
        - data
        - meta
      properties:
        status:
          $ref: '#/components/schemas/StatusSuccessLogout'
        data: 
          type: string
          example: []
    LoginUser:
      type: object
      required:
        - status
        - data
        - meta
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data: 
          $ref: '#/components/schemas/SuccessLogin'
    RegisterUser:
      type: object
      required:
        - status
        - data
        - meta
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data: 
          $ref: '#/components/schemas/DataUser'
    SearchHouse:
      type: object
      required:
        - status
        - name
        - manufacturer
        - releaseDate
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/DataHouse'
    DataHouse:
      required:
        - id
        - name
        - province
        - city
        - district
        - sub_district
        - address
        - postal_code
        - photo_1,
        - max_price,
        - bedroom
        - bathroom
      properties:
        id:
          type: integer
          example: 38
        name:
          type: string
          example: 'Perumahan Graha Palm Asri'
        province: 
          type: string
          example: 'Sumatera Barat'
        city:
          type: string
          example: 'KOTA SOLOK'
        district:
          type: string
          example: 'Lubuk Sikarah'
        sub_district:
          type: string
          example: ''
        address:
          type: string
          example: 'Jl.manunggal,parak anau,rt 003,rw 002,kelurahan tanah garam'
        postal_code:
          type: string
          example: '27312'
        photo_1:
          type: string
          example: 'http://rumahsubsidi.pu.go.id//datamining/perumahan/'
        max_price:
          type: string
          example: '140000000'
        bedroom:
          type: integer
          example: 2
        bathroom:
          type: integer
          example: 1
    DataUser:
      required:
        - email
        - phone_number
        - status
        - created_at
        - updated_by
        - updated_at
        - created_by
        - id
      properties:
        email:
          type: string
          example: 'jhon@deo.com'
        phone_number:
          type: string
          example: '0215666183'
        status:
          type: string
          example: 'registered'
        created_by:
          type: string
          example: 'user'
        updated_by:
          type: string
          example: 'user'
        created_at:
          type: string
          example: '2019-12-08 18:07:17'
        updated_at:
          type: string
          example: '2019-12-08 18:07:17'
        id:
          type: integer
          example: 2
    SuccessLogin:
      required:
        - data
      properties:
        token:
          type: string
          example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9hcGkuY2FoYXlhYWxhbTE5LmNvbVwvYXBpXC92MVwvbG9naW4iLCJpYXQiOjE1NzU4MjkxODEsImV4cCI6MTU3NTgzMjc4MSwibmJmIjoxNTc1ODI5MTgxLCJqdGkiOiJJaXo2WldLcGwyQnBkd3NrIiwic3ViIjoyLCJwcnYiOiI4N2UwYWYxZWY5ZmQxNTgxMmZkZWM5NzE1M2ExNGUwYjA0NzU0NmFhIn0.VMX3tU2yocjuZVZHIaCDQ8bee8QywAWyTFpEgyzQ6-4'
    StatusSuccessLogout:
      required:
        - error
        - message
        - code
      properties:
        error:
          type: boolean
          example: false
        message: 
          type: string
          example: 'User logged out successfully'
        code: 
          type: integer
          example: 200
    Status:
      required:
        - error
        - message
        - code
      properties:
        error:
          type: boolean
          example: false
        message:
          type: string
          example: ''
        code:
          type: integer
          example: 200
      type: object
