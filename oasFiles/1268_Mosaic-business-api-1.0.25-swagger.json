{
  "openapi" : "3.0.0",
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/Mosaic/business-api/1.0.25"
  } ],
  "info" : {
    "description" : "microservice api wrapper around the business library",
    "version" : "1.0.25",
    "title" : "Business API",
    "contact" : {
      "email" : "engineering@joinmosaic.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "paths" : {
    "/addresses/{id}" : {
      "get" : {
        "summary" : "finds an address by ID",
        "description" : "Returns a address entity based on an ID",
        "operationId" : "findAddressById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "address identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Address" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found address entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Address"
                }
              }
            }
          },
          "400" : {
            "description" : "The address ID is missing or outside of a valid range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "An address does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/events" : {
      "post" : {
        "tags" : [ "Event Processing" ],
        "summary" : "Publishes an event",
        "description" : "DO NOT USE - STUB ONLY",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/EventRequest"
        },
        "responses" : {
          "204" : {
            "description" : "The event was successfully published"
          },
          "400" : {
            "description" : "Invalid event",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/events/publish/{eventName}" : {
      "post" : {
        "tags" : [ "Event Processing" ],
        "summary" : "Publishes an event",
        "description" : "Publishes an event. The below events are supported\n- CreditReviewEvent\n",
        "operationId" : "publishEvent",
        "parameters" : [ {
          "name" : "eventName",
          "in" : "path",
          "description" : "The name of the event to publish, case insensitive.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The event was successfully published"
          },
          "400" : {
            "description" : "The event name is invalid, or the request body doesn't match the event model expected. See the API description for event models supported and their schema.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "An expected error occured",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "minProperties" : 1,
                "maxProperties" : 8,
                "example" : {
                  "opportunityId" : 6,
                  "creditDecisionId" : 4,
                  "decision" : "Pending"
                }
              }
            }
          },
          "description" : "The event object. The schema much match model for the eventName provided.\n",
          "required" : true
        }
      }
    },
    "/eligible-lender/findEligibleLenders" : {
      "post" : {
        "tags" : [ "EligibleLender" ],
        "summary" : "Find eligible lender",
        "description" : "Find if eligible lender exist with given eligible lender data",
        "operationId" : "findEligibleLender",
        "responses" : {
          "200" : {
            "description" : "responds with the appropriate eligible lender",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Lender"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "There was an error with the request body params",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error indicating that entity could not be created, due to repeated oppId and/or credit app id most likely."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EligibleLenderRequest"
              }
            }
          },
          "description" : "an eligible lender data object",
          "required" : true
        }
      }
    },
    "/finance-calculator/monthly-payment" : {
      "post" : {
        "tags" : [ "FinanceCalculator" ],
        "summary" : "Calculates monthly payment",
        "description" : "Runs a goal seek algorithm to calculate the monthly payment for a loan.",
        "operationId" : "calculateMonthlyPayment",
        "parameters" : [ {
          "name" : "loanStartDate",
          "in" : "query",
          "description" : "The start date of the loan.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "principal",
          "in" : "query",
          "description" : "The principal amount of the loan.",
          "required" : true,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "totalPeriodsMonths",
          "in" : "query",
          "description" : "The desired number of loan periods (months) over the life of the loan.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "periodRatePercentage",
          "in" : "query",
          "description" : "Interest rate of the loan",
          "required" : true,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "hasAchDiscount",
          "in" : "query",
          "description" : "Whether the loan has a discount for paying by ACH.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "format" : "true or false"
          }
        }, {
          "name" : "monthlyPaymentDollars",
          "in" : "query",
          "description" : "The monthly payment for the loan before the reamortization event, if one exists for the loan. This value is ignored on the calculate monthly payment endpoint.",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "reamortizedMonthlyPaymentDollars",
          "in" : "query",
          "description" : "The monthly payment for the loan after the reamortization event, if one exists for the loan. This value is ignored on the calculate monthly payment endpoint.",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "reamortizationPeriod",
          "in" : "query",
          "description" : "The number of months before the loan is reamortized.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "promoPeriodLength",
          "in" : "query",
          "description" : "The number of months of the interest free promotional period for same as cash loans.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "defermentPeriods",
          "in" : "query",
          "description" : "The number of months before between origination and when the first payment is due.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "responds with the appropriate calculations in a FinanceCalculatorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FinanceCalculatorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "There was an error performing the calculations.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/finance-calculator/payoff-date" : {
      "post" : {
        "tags" : [ "FinanceCalculator" ],
        "summary" : "Calculates payoff date.",
        "description" : "Runs a simple amortization algorithm to find the payoff date given a monthly payment and other loan parameters.",
        "operationId" : "calculatePayoffDate",
        "parameters" : [ {
          "name" : "loanStartDate",
          "in" : "query",
          "description" : "The start date of the loan.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "principal",
          "in" : "query",
          "description" : "The principal amount of the loan.",
          "required" : true,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "totalPeriodsMonths",
          "in" : "query",
          "description" : "The desired number of loan periods (months) over the life of the loan.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "periodRatePercentage",
          "in" : "query",
          "description" : "Interest rate of the loan",
          "required" : true,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "hasAchDiscount",
          "in" : "query",
          "description" : "Whether the loan has a discount for paying by ACH.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "format" : "true or false"
          }
        }, {
          "name" : "monthlyPaymentDollars",
          "in" : "query",
          "description" : "The desired monthly payment for the loan before the reamortization event, if one exists for the loan.",
          "required" : true,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "reamortizedMonthlyPaymentDollars",
          "in" : "query",
          "description" : "The desired monthly payment for the loan after the reamortization event, if one exists for the loan.",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "reamortizationPeriod",
          "in" : "query",
          "description" : "The number of months before the loan is reamortized.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "promoPeriodLength",
          "in" : "query",
          "description" : "The number of months of the interest free promotional period for same as cash loans.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "defermentPeriods",
          "in" : "query",
          "description" : "The number of months before between origination and when the first payment is due.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "responds with the appropriate calculations in a FinanceCalculatorResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FinanceCalculatorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "There was an error performing the calculations.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/finance-calculator/amortization-schedule" : {
      "post" : {
        "tags" : [ "FinanceCalculator" ],
        "summary" : "Generates the amortization schedule for the loan.",
        "description" : "Runs a simple amortization algorithm to generate the payment schedule for the loan.",
        "operationId" : "calculateAmortizationSchedule",
        "parameters" : [ {
          "name" : "loanStartDate",
          "in" : "query",
          "description" : "The start date of the loan.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "principal",
          "in" : "query",
          "description" : "The principal amount of the loan.",
          "required" : true,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "totalPeriodsMonths",
          "in" : "query",
          "description" : "The desired number of loan periods (months) over the life of the loan.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "periodRatePercentage",
          "in" : "query",
          "description" : "Interest rate of the loan",
          "required" : true,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "hasAchDiscount",
          "in" : "query",
          "description" : "Whether the loan has a discount for paying by ACH.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "format" : "true or false"
          }
        }, {
          "name" : "monthlyPaymentDollars",
          "in" : "query",
          "description" : "The desired monthly payment for the loan before the reamortization event, if one exists for the loan.",
          "required" : true,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "reamortizedMonthlyPaymentDollars",
          "in" : "query",
          "description" : "The desired monthly payment for the loan after the reamortization event, if one exists for the loan.",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "reamortizationPeriod",
          "in" : "query",
          "description" : "The number of months before the loan is reamortized.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "promoPeriodLength",
          "in" : "query",
          "description" : "The number of months of the interest free promotional period for same as cash loans.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "defermentPeriods",
          "in" : "query",
          "description" : "The number of months before between origination and when the first payment is due.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "responds with amortization schedule in a FinanceCalculatorAmortizationTable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FinanceCalculatorAmortizationTable"
                }
              }
            }
          },
          "404" : {
            "description" : "There was an error performing the calculations.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/finance-calculator/truth-in-lending" : {
      "post" : {
        "tags" : [ "FinanceCalculator" ],
        "summary" : "Generates TILA information",
        "description" : "Calculates data for the Truth In Lending Act disclosure.",
        "operationId" : "calculateTruthInLendingData",
        "parameters" : [ {
          "name" : "loanAmount",
          "in" : "query",
          "description" : "The prinicipal of the loan.",
          "required" : true,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "estLoanStartDate",
          "in" : "query",
          "description" : "Estimated start date of the loan.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "productId",
          "in" : "query",
          "description" : "Loan product id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "rate",
          "in" : "query",
          "description" : "Interest rate of the loan",
          "required" : true,
          "schema" : {
            "type" : "number",
            "format" : "float"
          }
        }, {
          "name" : "lenderId",
          "in" : "query",
          "description" : "Lender for the loan in question. Different lenders currently have different interest day count types.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "responds with the appropriate calculations in a LoanCalculatorV3Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoanCalculatorV3Response"
                }
              }
            }
          },
          "404" : {
            "description" : "There was an error performing the calculations.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/healthcheck" : {
      "get" : {
        "description" : "Returns a status of 200 if the server is up ",
        "operationId" : "HealthCheck",
        "tags" : [ "Health" ],
        "responses" : {
          "200" : {
            "description" : "empty response"
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/version" : {
      "get" : {
        "description" : "Returns build information and version of the app and some of its dependencies",
        "operationId" : "BuildInformation",
        "tags" : [ "Health" ],
        "responses" : {
          "200" : {
            "description" : "build informaton",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "https://api.swaggerhub.com/domains/Mosaic/Health/1.0.0#/definitions/BuildInfoApp"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/version/dependencies" : {
      "get" : {
        "description" : "Returns build information and version of registered dependencies",
        "operationId" : "DependenciesBuildInformation",
        "tags" : [ "Health" ],
        "responses" : {
          "200" : {
            "description" : "dependencies build information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "https://api.swaggerhub.com/domains/Mosaic/Health/1.0.0#/definitions/BuildInfoLib"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/version/dependencies/{library}" : {
      "get" : {
        "description" : "Returns build information and version of a specific library",
        "operationId" : "LibraryBuildInformation",
        "parameters" : [ {
          "name" : "library",
          "in" : "path",
          "description" : "library name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Health" ],
        "responses" : {
          "200" : {
            "description" : "library build informaton",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "https://api.swaggerhub.com/domains/Mosaic/Health/1.0.0#/definitions/BuildInfoLib"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identity/findByCreditApplicationId/{id}" : {
      "get" : {
        "summary" : "finds identity by credit application ID",
        "description" : "Returns an identity with ssn and date of birth based on an credit application ID",
        "operationId" : "findIdentityByCreditApplicationId",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "credit application identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Identity" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found identity entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          },
          "400" : {
            "description" : "The credit application ID is missing or outside of a valid range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A credit application does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loans/{id}" : {
      "get" : {
        "summary" : "finds a loan object by ID",
        "description" : "Returns a loan object based on an ID",
        "operationId" : "findLoanById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "loan identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Loan" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found loan object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Loan"
                }
              }
            }
          },
          "400" : {
            "description" : "The loan ID is missing or outside of a valid range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A loan does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loans/findByIds/" : {
      "post" : {
        "summary" : "finds loans by IDs",
        "description" : "finds loan objects based on a collection of IDs. Duplicate IDs will be ignored",
        "operationId" : "findLoansByIds",
        "tags" : [ "Loan" ],
        "responses" : {
          "200" : {
            "description" : "A collection of zero or more loan object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Loan"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid json.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IdsRequest"
              }
            }
          },
          "description" : "a list of loan ids",
          "required" : true
        }
      }
    },
    "/loans/findByLoanAgreementId/{id}" : {
      "get" : {
        "summary" : "finds a loan by loan agreement ID",
        "description" : "Returns a loan object based on an ID",
        "operationId" : "findLoanByLoanAgreementId",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "loan agreement identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Loan" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found loan object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Loan"
                }
              }
            }
          },
          "400" : {
            "description" : "The loan agreement ID is missing or outside of a valid range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A loan does not exist for the loan agreement ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loans/findByLoanAgreementIds/" : {
      "post" : {
        "summary" : "finds loans by loan agreement IDs",
        "description" : "finds loan objects based on a collection of loan agreement IDs. Duplicate IDs will be ignored",
        "operationId" : "findLoansByLoanAgreementIds",
        "tags" : [ "Loan" ],
        "responses" : {
          "200" : {
            "description" : "A collection of zero or more loan object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Loan"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid json.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/IdsRequest"
        }
      }
    },
    "/loans/{servicer}/documents/by-loan-id/{loanId}" : {
      "get" : {
        "summary" : "Finds active documents URLs",
        "description" : "Returns a list of active documents URLs for a given Loan and LoanServicer",
        "operationId" : "findLoanDocuments",
        "parameters" : [ {
          "name" : "loanId",
          "in" : "path",
          "description" : "Identifier of the Loan",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "servicer",
          "in" : "path",
          "description" : "Loan servoicer name (Mosaic, DCU, etc.)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ttl",
          "in" : "query",
          "description" : "Time to live",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Loan" ],
        "responses" : {
          "200" : {
            "description" : "Responds with a list of DocumentResponse",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Servicer could not be parsed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Loan servicer ID did not match any Servicer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loan-agreements/{id}" : {
      "get" : {
        "summary" : "finds a loan agreement by ID",
        "description" : "Returns a loan agreement based on an ID",
        "operationId" : "findLoanAgreementById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "loan agreement identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "LoanAgreement" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found  loan agreement entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoanAgreement"
                }
              }
            }
          },
          "400" : {
            "description" : "The loan agreement ID is missing or outside of a valid range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A loan agreement does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loan-agreements/{id}/eSignUrl" : {
      "post" : {
        "summary" : "gets the eSignature URL for a loan agreement",
        "description" : "Returns a loan agreement eSignature URL based on an ID and role provided",
        "operationId" : "eSignUrlForRole",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "loan agreement identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "LoanAgreement" ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/LoanAgreementSignatureUrlRequest"
        },
        "responses" : {
          "200" : {
            "description" : "responds with the found  loan agreement entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoanAgreement"
                }
              }
            }
          },
          "400" : {
            "description" : "The loan agreement ID is missing or outside of a valid range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A loan agreement does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loan-agreements/{id}/completeCounterSign" : {
      "put" : {
        "summary" : "Countersigns loan agreement if possible",
        "description" : "Tries to countersign given loan agreement and returns most updated information after doing so",
        "operationId" : "completeCounterSign",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "loan agreement identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "LoanAgreement" ],
        "responses" : {
          "200" : {
            "description" : "Responds with the most up to date loan agreement information after trying to countersign",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoanAgreement"
                }
              }
            }
          },
          "404" : {
            "description" : "A loan agreement does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loan-agreements/findByIds/" : {
      "post" : {
        "summary" : "finds a list of loan agreements by IDs",
        "description" : "finds loan agreement objects based on a collection of IDs. Duplicate IDs will be ignored",
        "operationId" : "findLoanAgreementsByIds",
        "tags" : [ "LoanAgreement" ],
        "responses" : {
          "200" : {
            "description" : "A collection of zero or more loan agreement objects",
            "content" : {
              "text/plain; charset=utf-8" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid json.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A credit application does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loan-agreements/findByCreditApplicationId/{id}" : {
      "get" : {
        "summary" : "finds a loan agreement by Credit application ID",
        "description" : "Returns a loan agreement based on an credit application ID",
        "operationId" : "findLoanAgreementByCreditApplicationId",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "credit application identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "LoanAgreement" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found loan agreement entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoanAgreement"
                }
              }
            }
          },
          "400" : {
            "description" : "The credit application ID is missing or outside of a valid range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A credit application does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loan-agreements/findByCreditApplicationIds/" : {
      "post" : {
        "summary" : "find a loan agreement by credit application IDs",
        "description" : "finds loan agreement objects based on a collection of credit application IDs. Duplicate IDs will be ignored",
        "operationId" : "findLoanAgreementsByCreditApplicationIds",
        "tags" : [ "LoanAgreement" ],
        "responses" : {
          "200" : {
            "description" : "A collection of zero or more loan object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LoanAgreement"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid json.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/IdsRequest"
        }
      }
    },
    "/loan-agreements/findActiveByAddressOrIdentity/" : {
      "post" : {
        "summary" : "finds a list of countersigned, active loan agreement by address or identity",
        "description" : "Returns a list of countersigned, active loan agreement based on address or identity",
        "operationId" : "findActiveByAddressOrIdentity",
        "tags" : [ "LoanAgreement" ],
        "responses" : {
          "200" : {
            "description" : "responds with the list of loan agreement entities",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LoanAgreement"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressIdentityCreditAppRequest"
              }
            }
          },
          "description" : "an Address/Identity object",
          "required" : true
        }
      }
    },
    "/loan-agreements/findExposureByAddressAndIdentity/" : {
      "post" : {
        "summary" : "finds the total exposure for loan agreement by address or identity",
        "description" : "Returns the total exposure based on address or identity",
        "operationId" : "findExposureByAddressAndIdentity",
        "tags" : [ "LoanAgreement" ],
        "responses" : {
          "200" : {
            "description" : "the total exposure",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "exposure" : {
                      "type" : "integer",
                      "description" : "total exposure",
                      "example" : 10000
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressIdentityCreditAppRequest"
              }
            }
          },
          "description" : "an Address/Identity object",
          "required" : true
        }
      }
    },
    "/loan-agreements" : {
      "post" : {
        "summary" : "create a loan agreement",
        "description" : "create a loan agreement for a given opportunity Id and link to the provided user ID.",
        "operationId" : "createLoanAgreement",
        "tags" : [ "LoanAgreement" ],
        "responses" : {
          "200" : {
            "description" : "A loan object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LoanAgreement"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid json.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "uuid, oportunity not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/LoanAgreementRequest"
        }
      }
    },
    "/loan-products/{id}" : {
      "get" : {
        "summary" : "finds a loan product by ID",
        "description" : "Returns a loan product entity including tiers based on an ID",
        "operationId" : "findLoanProductById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "loan product identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Loan Product" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found loan product entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoanProduct"
                }
              }
            }
          },
          "400" : {
            "description" : "The loan product ID is missing or outside of a valid range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A loan product does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loan-products/findByIds/" : {
      "post" : {
        "summary" : "finds loan products by IDs",
        "description" : "finds loan objects based on a collection of IDs. Duplicate IDs will be ignored",
        "operationId" : "findLoanProductsByIds",
        "tags" : [ "Loan Product" ],
        "responses" : {
          "200" : {
            "description" : "A collection of zero or more loan product objects",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LoanProduct"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid json.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IdsRequest"
              }
            }
          },
          "description" : "a list of loan product ids",
          "required" : true
        }
      }
    },
    "/loan-products/findActiveByBranchId/{branchId}" : {
      "get" : {
        "summary" : "finds loan products by branch ID",
        "description" : "Returns a list of loan product entity including tiers based on an ID",
        "operationId" : "findActiveByBranchId",
        "parameters" : [ {
          "name" : "branchId",
          "in" : "path",
          "description" : "branch identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Loan Product" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found loan product entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LoanProduct"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loan-products/findByTierId/{tierId}" : {
      "get" : {
        "summary" : "finds a loan product by Tier ID",
        "description" : "Returns a loan product entity including tiers based on an ID",
        "operationId" : "findLoanProductByTierId",
        "parameters" : [ {
          "name" : "tierId",
          "in" : "path",
          "description" : "tier identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Loan Product" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found loan product entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LoanProduct"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/mail/sendBorrowerEmail" : {
      "post" : {
        "summary" : "Send a generic email to a borrower with opportunity created",
        "description" : "Sends an email to a borrower",
        "operationId" : "sendBorrowerEmail",
        "tags" : [ "Mail Service" ],
        "responses" : {
          "200" : {
            "description" : "responds with and email entity id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SendBorrowerEmailResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad input data."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SendBorrowerEmailRequest"
              }
            }
          },
          "description" : "email data to create",
          "required" : true
        }
      }
    },
    "/opportunities" : {
      "post" : {
        "summary" : "creates an opportunity",
        "description" : "Creates an opportunity",
        "operationId" : "createOpportunityById",
        "tags" : [ "Opportunity" ],
        "responses" : {
          "200" : {
            "description" : "responds with id of the new opportunity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpportunityCreateResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad input data."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpportunityCreateRequest"
              }
            }
          },
          "description" : "opportunity data to create",
          "required" : true
        }
      }
    },
    "/opportunities/{opportunityId}" : {
      "get" : {
        "summary" : "finds an opportunity by ID",
        "description" : "Returns an opportunity object based on an ID",
        "operationId" : "findOpportunityById",
        "parameters" : [ {
          "name" : "opportunityId",
          "in" : "path",
          "description" : "opportunity identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Opportunity" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found opportunity object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Opportunity"
                }
              }
            }
          },
          "404" : {
            "description" : "An opportunity does not exist for the ID specified."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "updates an opportunity by ID",
        "description" : "Updates an opportunity object based on an ID",
        "operationId" : "updateOpportunityById",
        "parameters" : [ {
          "name" : "opportunityId",
          "in" : "path",
          "description" : "opportunity identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Opportunity" ],
        "responses" : {
          "200" : {
            "description" : "responds with result of true if successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpportunityUpdateResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad input data."
          },
          "404" : {
            "description" : "An opportunity does not exist for the ID specified."
          },
          "422" : {
            "description" : "An input provided cannot be processed, e.g. opportunity status name not recognized"
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpportunityUpdateRequest"
              }
            }
          },
          "description" : "opportunity data to update",
          "required" : true
        }
      }
    },
    "/opportunities/{opportunityId}/change-order" : {
      "post" : {
        "summary" : "Creates home improvement change order",
        "description" : "Creates home improvement change order by opportunity id.",
        "operationId" : "createHomeImprovementChangeOrderByOpportunityId",
        "parameters" : [ {
          "name" : "opportunityId",
          "in" : "path",
          "description" : "opportunity identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Opportunity" ],
        "responses" : {
          "200" : {
            "description" : "responds with modified opportunity object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Opportunity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/opportunities/{opportunityId}/loan-product" : {
      "put" : {
        "summary" : "updates an opportunity's loan product",
        "description" : "Updates an opportunity's loan product",
        "operationId" : "updateOpportunityLoanProductById",
        "parameters" : [ {
          "name" : "opportunityId",
          "in" : "path",
          "description" : "opportunity identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Opportunity" ],
        "responses" : {
          "200" : {
            "description" : "responds with result of true if successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpportunityLoanProductUpdateResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad input data."
          },
          "404" : {
            "description" : "An opportunity does not exist for the ID specified."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpportunityLoanProductUpdateRequest"
              }
            }
          },
          "description" : "opportunity loan product data to update",
          "required" : true
        }
      }
    },
    "/opportunities/{opportunityId}/emails" : {
      "get" : {
        "summary" : "finds emails associated with an opportunity by ID",
        "description" : "Returns a list of Email objects based for the specified opportunity",
        "operationId" : "findEmailsByOpportunityId",
        "parameters" : [ {
          "name" : "opportunityId",
          "in" : "path",
          "description" : "opportunity identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Opportunity" ],
        "responses" : {
          "200" : {
            "description" : "responds with a list of email objects",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Email"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/opportunities/{opportunityId}/advance" : {
      "post" : {
        "summary" : "Advances the opportunity to the next logical status",
        "description" : "Given an opportunity indicated by the opportunityId, transition the opportunity to the next logical status",
        "operationId" : "advanceOpportunity",
        "parameters" : [ {
          "name" : "opportunityId",
          "in" : "path",
          "description" : "opportunity identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Opportunity" ],
        "responses" : {
          "200" : {
            "description" : "responds with new opportunity status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "requested to advance an opportunity did not succeed because one of the transition rules failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/opportunities/{opportunityId}/final-credit-application-submission" : {
      "post" : {
        "summary" : "Records that the opportunity has signed its loan agreement and so has submitted its final credit application",
        "description" : "Record in the opportunity_credit_application table that",
        "operationId" : "submitFinalApplication",
        "parameters" : [ {
          "name" : "opportunityId",
          "in" : "path",
          "description" : "opportunity identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Opportunity" ],
        "responses" : {
          "200" : {
            "description" : "Empty body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "request to record final submission of an opportunity did not succeed for some reason",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/opportunities/{opportunityId}/link-credit-application" : {
      "post" : {
        "description" : "Create and return an opportunity credit application entity",
        "operationId" : "createOpportunityCreditApplication",
        "parameters" : [ {
          "name" : "opportunityId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Opportunity" ],
        "responses" : {
          "200" : {
            "description" : "responds with newly created OpportunityCreditApplication entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpportunityCreditApplicationResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Server error indicating that entity could not be created, due to repeated oppId and/or credit app id most likely."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OpportunityCreditApplicationCreateRequest"
              }
            }
          },
          "description" : "a request object containing opportunity id, credit disclosure type, credit application id, consent time, lender disclosure type",
          "required" : true
        }
      }
    },
    "/opportunities/is-web-bank-eligible/{opportunityType}/{channelPartnerId} " : {
      "get" : {
        "description" : "Validate is a opportunity applies for web bank",
        "operationId" : "isEligibleForWebbank",
        "parameters" : [ {
          "name" : "opportunityType",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "Unspecified", "HomeSolarLoan", "HomeImprovementLoan", "PointOfSaleHomeSolarLoan", "PointOfSaleHomeImprovementLoan" ]
          }
        }, {
          "name" : "channelPartnerId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Opportunity" ],
        "responses" : {
          "200" : {
            "description" : "responds with verification about if the opportunity apply for web bank",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "Server error indicating that entity could not be validated."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/origination-events/findByIds" : {
      "post" : {
        "summary" : "Find origination events by id.",
        "description" : "Find origination events by id.",
        "operationId" : "origination-events/findByIds",
        "tags" : [ "OriginationEvent" ],
        "responses" : {
          "default" : {
            "description" : "List of origination events.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OriginationEventResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SeqUuid"
              }
            }
          },
          "description" : "Origination event ids",
          "required" : true
        }
      }
    },
    "/origination-events/findByDateCreatedAndType" : {
      "post" : {
        "summary" : "Find origination events by date created and type.",
        "description" : "Find origination events by date created and type.",
        "operationId" : "origination-events/findByDateCreatedAndType",
        "tags" : [ "OriginationEvent" ],
        "responses" : {
          "default" : {
            "description" : "List of origination events.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OriginationEventResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FindByDateCreatedAndTypeRequest"
              }
            }
          },
          "required" : true
        }
      }
    },
    "/partners/{id}" : {
      "get" : {
        "summary" : "finds a partner by ID",
        "description" : "Returns a partner entity based on an ID",
        "operationId" : "findPartnerById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "partner identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Partner" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found partner entity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Partner"
                }
              }
            }
          },
          "400" : {
            "description" : "The partner ID is missing or outside of a valid range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A partner does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/partners/findByIds/" : {
      "post" : {
        "summary" : "find partners by IDs",
        "description" : "finds partners based on a collection of IDs. Duplicate IDs will be ignored.",
        "operationId" : "findPartnersByIds",
        "tags" : [ "Partner" ],
        "responses" : {
          "200" : {
            "description" : "A collection of zero or more partner objects.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Partner"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "partner IDs are missing or outside of a valid range.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IdsRequest"
              }
            }
          },
          "description" : "a list of partner ids",
          "required" : true
        }
      }
    },
    "/partnerLogin/{id}" : {
      "get" : {
        "summary" : "finds a partner login by  ID",
        "description" : "Returns a partner login object based on an ID",
        "operationId" : "findPartnerLoginById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "partner login identifier",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "tags" : [ "Partner Login" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found partner login object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PartnerLogin"
                }
              }
            }
          },
          "404" : {
            "description" : "A salesrep does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects" : {
      "post" : {
        "summary" : "creates a project",
        "description" : "Creates a project",
        "operationId" : "create",
        "tags" : [ "Project" ],
        "responses" : {
          "200" : {
            "description" : "responds with id of the new project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectIdResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad input data."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProjectCreateRequest"
              }
            }
          },
          "description" : "project data needed to create",
          "required" : true
        }
      }
    },
    "/projects/{id}" : {
      "delete" : {
        "summary" : "deletes a project",
        "description" : "Deletes a project, which really is updating the status of the project to cancelled",
        "operationId" : "updateProjectStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "project identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Project" ],
        "responses" : {
          "200" : {
            "description" : "responds with id and status id of project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad input data."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/find/{id}" : {
      "get" : {
        "summary" : "Find projects by id",
        "description" : "Finds project with a given id",
        "operationId" : "Find",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "project id identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "integer"
          }
        } ],
        "tags" : [ "Project" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found project object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A project does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/findByOpportunityId/{id}" : {
      "get" : {
        "summary" : "Find projects with Opportunity",
        "description" : "Finds projects assigned to opportunity IDs",
        "operationId" : "FindByOpportunityId",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "opportunity id identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "integer"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by type, multiple filter with OR condition\n\n0 Unspecified\n\n1 SolarSystem\n\n2 Roofing\n\n3 Windows\n\n4 Doors\n\n5 HVAC\n\n20 Other",
          "example" : 5,
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Filter by status, multiple filter with OR condition,\n\n\n0 New\n\n10 Approved\n\n20 Equipment Submitted\n\n30 Equipment Approved\n\n40 Installation Complete\n\n50 Installation Confirmed\n\n60 Inspection Complete\n\n70 Final Confirmation\n\n99 Cancelled\n\n100 Unspecified",
          "example" : 100,
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          }
        } ],
        "tags" : [ "Project" ],
        "responses" : {
          "200" : {
            "description" : "A collection of zero or more project objects.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ProjectResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/complete" : {
      "post" : {
        "summary" : "submits install complete for a project (update status and send email)",
        "description" : "Submits instal complete for a project (update status and send email)",
        "operationId" : "submitInstallComplete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "project identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Project" ],
        "responses" : {
          "200" : {
            "description" : "responds with id of project",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectIdResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Bad input data; project could not be updated to install complete."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/confirm" : {
      "post" : {
        "summary" : "submits install confirmed for a project",
        "description" : "Submits install confirmed for a project",
        "operationId" : "submitInstallConfirmed",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "project identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Project" ],
        "responses" : {
          "200" : {
            "description" : "responds with id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectIdResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Bad input data; project could not be updared to install confirmed."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/install-complete-email" : {
      "post" : {
        "summary" : "sends the install complete email for a project",
        "description" : "Sends the install complete email for a project",
        "operationId" : "sendInstallCompleteEmail",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "project identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Project" ],
        "responses" : {
          "200" : {
            "description" : "responds with id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectIdResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Bad input data; project could not be updared to install confirmed."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/update-status-to-complete" : {
      "post" : {
        "summary" : "updates the status to install complete for a project",
        "description" : "Updates the status to install complete for a project",
        "operationId" : "updateProjectToInstallComplete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "project identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Project" ],
        "responses" : {
          "200" : {
            "description" : "responds with id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectIdResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Bad input data; project could not be updared to install confirmed."
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/unifiedLogin/authenticate/partner" : {
      "post" : {
        "tags" : [ "Unified Login" ],
        "summary" : "authenticates partner login",
        "description" : "authenticates partner login",
        "operationId" : "authenticatePartnerLogin",
        "responses" : {
          "200" : {
            "description" : "A unified login object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UnifiedLogin"
                }
              }
            }
          },
          "default" : {
            "description" : "responds with the status code in the message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnifiedLoginAuthenticatePartnerRequest"
              }
            }
          },
          "description" : "the email, password, and ipList of user to be authenticated",
          "required" : true
        }
      }
    },
    "/urls/residential/credit/upload-proof/:opportunityId" : {
      "get" : {
        "summary" : "Get upload proof URL for given opportunity",
        "description" : "Get upload proof URL for given opportunity",
        "operationId" : "uploadProofPage",
        "parameters" : [ {
          "name" : "opportunityId",
          "in" : "path",
          "description" : "opportunity identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Url" ],
        "responses" : {
          "200" : {
            "description" : "responds with a URL response object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Url"
                }
              }
            }
          },
          "404" : {
            "description" : "Either the channel partner or opportunity entity do not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users" : {
      "post" : {
        "summary" : "Creates a user",
        "description" : "Creates a user, This method will be used to generate a User in order to create a loan agreement.",
        "operationId" : "createUser",
        "tags" : [ "User" ],
        "responses" : {
          "200" : {
            "description" : "responds with the new User object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserCreateResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad input data. Language not allowed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserCreateRequest"
              }
            }
          },
          "description" : "the email, password, language",
          "required" : true
        }
      }
    },
    "/aan-notifications" : {
      "post" : {
        "summary" : "Create aan notifications",
        "description" : "Creates aan notification, This method will be used to generate a aan notification for opportunities.",
        "operationId" : "CreateAanNotifications",
        "tags" : [ "AanNotification" ],
        "responses" : {
          "200" : {
            "description" : "responds with a list of opportunity ids of success aan notifications created and a list with the failures",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AanNotificationsCreateResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AanNotificationCreateRequest"
                }
              }
            }
          },
          "description" : "a list with AanNotificationCreateRequest which has opportunityId, notificationType and aanType:",
          "required" : true
        }
      }
    },
    "/documents/{id}/signedDocument" : {
      "get" : {
        "summary" : "get a document response URLs for a given document id and time to live",
        "description" : "returns a document response URLs for a given document id and time to live",
        "operationId" : "getSignedDocumentUrl",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "document identifier",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "tags" : [ "Document" ],
        "responses" : {
          "200" : {
            "description" : "responds with the found sign document url object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A document or a signed document url do not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bank-account/partner/{id}" : {
      "get" : {
        "summary" : "get the bank information for the bank account of a specified channel partner",
        "description" : "returns a BankAccountResponse object for the bank information of the partner",
        "operationId" : "getBankInformation",
        "tags" : [ "BankInformation" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "channel partner identifier",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "responds with the bank account object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankAccountResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A channel partner does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "creates or updates the bank information for the bank account of a specified channel partner",
        "description" : "returns a BankAccountResponse object for the bank information of the partner",
        "operationId" : "updateBankInformation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "channel partner identifier",
          "required" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "tags" : [ "BankInformation" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BankAccountRequest"
              }
            }
          },
          "description" : "account number, routing number, type, channel partner",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "responds with the bank account object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BankAccountResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "A channel partner or a bank account does not exist for the ID specified.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "x-types" : {
    "AddressValidationTypes" : {
      "type" : "string",
      "enum" : [ "Unvalidated", "Successful", "Failed" ],
      "description" : "### Status types:\n\n**Unvalidated** — There hasn't been a recorded attempt to validate the addres.\n\n**Successful** — The address has successfully been validated.\n\n**Failed** — The address failed to validate.\n"
    }
  },
  "components" : {
    "schemas" : {
      "AanNotificationCreateRequest" : {
        "description" : "aan notification entity",
        "type" : "object",
        "required" : [ "opportunityId", "notificationType", "aanType" ],
        "properties" : {
          "opportunityId" : {
            "type" : "integer",
            "description" : "unique opportunity identifier",
            "example" : 1
          },
          "notificationType" : {
            "type" : "string",
            "enum" : [ "Email", "Letter" ]
          },
          "aanType" : {
            "type" : "string",
            "enum" : [ "CreditDenied", "IncompleteApplication", "CounterOffer", "FailureESign" ]
          }
        }
      },
      "AanNotificationsCreateResponse" : {
        "description" : "list of opportunity ids with success aan notification created and list of opportunity ids with failure",
        "type" : "object",
        "required" : [ "failure", "success" ],
        "properties" : {
          "failure" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          },
          "success" : {
            "type" : "array",
            "items" : {
              "type" : "integer"
            }
          }
        }
      },
      "Address" : {
        "description" : "address entity",
        "type" : "object",
        "required" : [ "id", "street", "city", "zip", "state", "countryId", "validationStatus" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "unique document identifier",
            "example" : 1
          },
          "street" : {
            "type" : "string",
            "description" : "street address including house number"
          },
          "streetTwo" : {
            "type" : "string",
            "description" : "optional second part of street address, e.g. appartment number"
          },
          "city" : {
            "type" : "string",
            "description" : "city of the address"
          },
          "zip" : {
            "type" : "string",
            "description" : "zip code of the address"
          },
          "state" : {
            "type" : "string",
            "description" : "state abbreviation"
          },
          "countryId" : {
            "type" : "integer",
            "description" : "identifier of the country"
          },
          "validationStatus" : {
            "type" : "string",
            "enum" : [ "Unvalidated", "Successful", "Failed" ]
          },
          "countyFipsCode" : {
            "type" : "string",
            "description" : "the 5-digit county FIPS (Federal Information Processing Standards) code. It is a combination of a 2-digit state FIPS code and a 3-digit county code assigned by the NIST"
          }
        }
      },
      "AddressRequest" : {
        "description" : "address request",
        "type" : "object",
        "required" : [ "street", "city", "zip", "stateAbbreviation", "countryId" ],
        "properties" : {
          "street" : {
            "type" : "string",
            "description" : "street address including house number"
          },
          "streetTwo" : {
            "type" : "string",
            "description" : "optional second part of street address, e.g. appartment number"
          },
          "city" : {
            "type" : "string",
            "description" : "city of the address"
          },
          "zip" : {
            "type" : "string",
            "description" : "zip code of the address"
          },
          "stateAbbreviation" : {
            "type" : "string",
            "description" : "state abbreviation"
          },
          "countryId" : {
            "type" : "integer",
            "description" : "identifier of the country"
          }
        }
      },
      "AddressIdentityCreditAppRequest" : {
        "type" : "object",
        "description" : "combination of address, ssn and dob",
        "required" : [ "street", "zip", "ssn", "dob" ],
        "properties" : {
          "street" : {
            "description" : "street address",
            "example" : "1212 Broadway",
            "type" : "string"
          },
          "zip" : {
            "description" : "zip code of the address",
            "example" : "94612",
            "type" : "string"
          },
          "ssn" : {
            "description" : "social security number",
            "example" : "123456789",
            "type" : "string"
          },
          "dob" : {
            "description" : "date of birth",
            "example" : "1970-10-30",
            "type" : "string",
            "format" : "date"
          },
          "creditApplicationId" : {
            "description" : "reference to credit application to be excluded from response",
            "example" : 1,
            "type" : "integer"
          }
        }
      },
      "AmortizationTablePeriod" : {
        "description" : "finance calculator payment schedule for a single period",
        "type" : "object",
        "required" : [ "periodNumber", "principalRemaining", "interestForPeriodDollars", "paymentForPeriodDollars", "totalInterest" ],
        "properties" : {
          "year" : {
            "type" : "integer",
            "description" : "The period number, starting from 0."
          },
          "principalRemaining" : {
            "type" : "number",
            "description" : "The principal remaining at the end of the period, after the payment has been applied."
          },
          "interestForPeriodDollars" : {
            "type" : "number",
            "description" : "The amount of the period payment that goes towards interest."
          },
          "paymentForPeriodDollars" : {
            "type" : "number",
            "description" : "The payment for a given period."
          },
          "totalInterest" : {
            "type" : "number",
            "description" : "The total outstanding interest on the loan."
          }
        }
      },
      "AmortizationTableYear" : {
        "description" : "finance calculator payment schedule for a given year",
        "type" : "object",
        "required" : [ "year", "periods" ],
        "properties" : {
          "year" : {
            "type" : "integer",
            "description" : "The year number starting from 0."
          },
          "periods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AmortizationTablePeriod"
            },
            "description" : "A list of AmortizationTablePeriod entries for a single year of the loan"
          }
        }
      },
      "CreditReviewEvent" : {
        "type" : "object",
        "required" : [ "opportunityId", "creditDecisionIid", "decision" ],
        "properties" : {
          "opportunityId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Opportunity ID"
          },
          "creditDecisionId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Credit decision ID"
          },
          "decision" : {
            "type" : "string",
            "enum" : [ "PENDING", "NOT_QUALIFIED", "DECLINED", "APPROVED", "NEEDS_REVIEW", "PARTIALLY_QUALIFIED" ],
            "description" : "Credit decision"
          }
        }
      },
      "DocumentResponse" : {
        "type" : "object",
        "description" : "document response object",
        "required" : [ "url", "name", "expirationDate" ],
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "document url",
            "example" : "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
          },
          "name" : {
            "type" : "string",
            "description" : "document name"
          },
          "expirationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "url expiration date"
          }
        }
      },
      "Email" : {
        "type" : "object",
        "description" : "email object",
        "required" : [ "id", "dateLastStatus", "dateSent", "emailType", "subject", "emailAddress", "recipientType", "status", "opportunityId" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "unique email identifier"
          },
          "dateLastStatus" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "the date/time that we set the current status"
          },
          "dateSent" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "the date/time this email request was made"
          },
          "emailType" : {
            "type" : "string",
            "description" : "the type of this email, i.e. a summary of the purpose (loan app, credit decision, etc)",
            "enum" : [ "Credit Application", "Credit Decision", "Loan Application", "Change Order", "Installation Complete Confirmation", "Loan Closing Certificate", "Check Receipt", "Prepayment Information", "Request Password Reset", "Loan Servicing", "Reamortization Information", "Borrower Loan transfer", "Choice Target" ]
          },
          "subject" : {
            "type" : "string",
            "description" : "subject of the email"
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "email address the message was sent to"
          },
          "recipientType" : {
            "type" : "string",
            "description" : "for now, all recipients are borrowers, but we anticipate tracking other types in the future",
            "enum" : [ "Borrower" ]
          },
          "templateKey" : {
            "type" : "string",
            "description" : "if a template was used, the key for it"
          },
          "status" : {
            "type" : "string",
            "description" : "the most recent status of this email, as reported by the mail service",
            "enum" : [ "InProcess", "Delivered", "Failed", "Opened" ]
          },
          "statusNotes" : {
            "type" : "string",
            "description" : "optional notes that provide more information about the latest status"
          },
          "opportunityId" : {
            "type" : "integer",
            "description" : "unique opportunity identifier"
          }
        }
      },
      "EventRequest" : {
        "type" : "object",
        "description" : "event object",
        "required" : [ "event", "source", "date" ],
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "event type"
          },
          "source" : {
            "type" : "string",
            "description" : "event source"
          },
          "referenceType" : {
            "type" : "string",
            "description" : "event source reference type"
          },
          "referenceId" : {
            "type" : "string",
            "description" : "event source reference id"
          },
          "date" : {
            "type" : "string",
            "description" : "event date"
          },
          "ipAddress" : {
            "type" : "string",
            "description" : "ip address"
          },
          "deviceFingerprint" : {
            "type" : "string",
            "description" : "device fingerprint"
          }
        }
      },
      "EligibleLenderRequest" : {
        "type" : "object",
        "description" : "eligible lender data object",
        "required" : [ "language", "channelPartnerId", "loanAmount", "loanProductId", "opportunityType", "batteryOnly", "nonPrimaryResidence", "isEnhanceWarranty" ],
        "properties" : {
          "language" : {
            "type" : "string",
            "description" : "user language"
          },
          "channelPartnerId" : {
            "type" : "integer",
            "description" : "channal partner id"
          },
          "loanAmount" : {
            "type" : "number",
            "format" : "float",
            "description" : "the loan amount"
          },
          "loanProductId" : {
            "type" : "integer",
            "description" : "loan product id"
          },
          "opportunityType" : {
            "type" : "string",
            "enum" : [ "Unspecified", "HomeSolarLoan", "HomeImprovementLoan", "PointOfSaleHomeSolarLoan", "PointOfSaleHomeImprovementLoan" ],
            "description" : "opportunity type"
          },
          "state" : {
            "type" : "string",
            "description" : "user location state two letter abbrevation",
            "example" : "CA"
          },
          "lenderDisclosureTypeId" : {
            "type" : "integer",
            "description" : "integer link to lender disclosure type id"
          },
          "batteryOnly" : {
            "type" : "boolean",
            "description" : "is battery only product"
          },
          "pricePerWatt" : {
            "type" : "number",
            "format" : "float",
            "description" : "optional field of price per watt"
          },
          "nonPrimaryResidence" : {
            "type" : "boolean",
            "description" : "is nonPrimary residence"
          },
          "isEnhancedWarranty" : {
            "type" : "boolean",
            "description" : "is with enhanced warranty"
          }
        }
      },
      "ErrorResponse" : {
        "type" : "object",
        "description" : "API error response",
        "example" : {
          "message" : "descriptive error msg goes here"
        },
        "required" : [ "message" ],
        "properties" : {
          "message" : {
            "type" : "string"
          }
        }
      },
      "FinanceCalculatorAmortizationTable" : {
        "description" : "finance calculator amortization schedule for the sales calculator estimation tool.",
        "type" : "object",
        "required" : [ "years" ],
        "properties" : {
          "years" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AmortizationTableYear"
            },
            "description" : "A list of year AmortizationTableYear entries of the amortization schedule for the loan"
          },
          "promoPeriodLength" : {
            "type" : "integer",
            "description" : "The number of interest free periods for same as cash loans."
          },
          "reamortizationPeriod" : {
            "type" : "integer",
            "description" : "The number of periods (months) before the loan reamortizes."
          }
        }
      },
      "FinanceCalculatorRequest" : {
        "description" : "finance calculator request for the sales calculator estimation tool.",
        "type" : "object",
        "required" : [ "principal", "totalPeriodsMonths", "periodRatePercentage", "lumpSumPayment", "hasAchDiscount", "defermentPeriods" ],
        "properties" : {
          "loanStartDate" : {
            "type" : "string",
            "description" : "Origination date for the loan"
          },
          "principal" : {
            "type" : "number",
            "description" : "The principal amount of the loan"
          },
          "totalPeriodsMonths" : {
            "type" : "integer",
            "description" : "The number or periods (months) until the loan is repaid."
          },
          "periodRatePercentage" : {
            "type" : "number",
            "description" : "The interest rate of the loan"
          },
          "lumpSumPayment" : {
            "type" : "number",
            "description" : "The amount of the loan to be repaid by the end of the remortization or promo period."
          },
          "hasAchDiscount" : {
            "type" : "boolean",
            "description" : "Is the borrower enrolled in ACH and getting a discounted interest rate?"
          },
          "monthlyPaymentDollars" : {
            "type" : "number",
            "description" : "The monthly payment for the loan."
          },
          "reamortizedMonthlyPaymentDollars" : {
            "type" : "number",
            "description" : "The monthly payment for the loan after the reamortization event."
          },
          "reamortizationPeriod" : {
            "type" : "integer",
            "description" : "The number of periods (months) before the loan reamortizes."
          },
          "promoPeriodLength" : {
            "type" : "integer",
            "description" : "The number of interest free periods for same as cash loans."
          },
          "defermentPeriods" : {
            "type" : "integer",
            "description" : "The number of periods after origination before the first payment is due."
          }
        }
      },
      "FinanceCalculatorResponse" : {
        "description" : "finance calculator response for the sales calculator estimation tool.",
        "type" : "object",
        "required" : [ "periodPaymentDollars", "reAmortizedPeriodPaymentDollars", "interestAccruedDollars", "interestAvoidedDollars", "fullLoanLengthPeriods", "totalPeriods" ],
        "properties" : {
          "periodPaymentDollars" : {
            "type" : "number",
            "description" : "The calculated monthly payment before the reamoritization event. Otherwise the monthly payment for the full length of the loan."
          },
          "reAmortizedPeriodPaymentDollars" : {
            "type" : "number",
            "description" : "The calculated monthly payment after the reamoritization event. Otherwise the same as periodPaymentDollars."
          },
          "interestAccruedDollars" : {
            "type" : "number",
            "description" : "The interest accrued over the lifetime of the loan."
          },
          "interestAvoidedDollars" : {
            "type" : "number",
            "description" : "The interest that did not accrue due to paying more than the minimum amount, or making a lump sum payment."
          },
          "fullLoanLengthPeriods" : {
            "type" : "integer",
            "description" : "The number of full periods of the loan."
          },
          "totalPeriods" : {
            "type" : "integer",
            "description" : "The total number of periods (months) in the lifetime of the loan."
          }
        }
      },
      "FindByDateCreatedAndTypeRequest" : {
        "description" : "Request origination events which were created within the given time period with a matching event type.",
        "type" : "object",
        "required" : [ "startTimeInclusive", "endTimeInclusive", "types" ],
        "properties" : {
          "startTimeInclusive" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Start of time period, inclusive of the given time."
          },
          "endTimeInclusive" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "End of time period, inclusive of the given time."
          },
          "types" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OriginationEventType"
            }
          }
        }
      },
      "Identity" : {
        "type" : "object",
        "description" : "combination of ssn and dob",
        "required" : [ "ssn", "dateOfBirth" ],
        "properties" : {
          "ssn" : {
            "description" : "social security number",
            "example" : "123456789",
            "type" : "string"
          },
          "dateOfBirth" : {
            "description" : "date of birth",
            "example" : "1970-10-30",
            "type" : "string",
            "format" : "date"
          }
        }
      },
      "IdsRequest" : {
        "type" : "object",
        "required" : [ "ids" ],
        "properties" : {
          "ids" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "LoanAgreementRequest" : {
        "type" : "object",
        "required" : [ "userId", "opportunityId" ],
        "properties" : {
          "userId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The user id",
            "example" : "00000000-0000-0000-0000-00000000a11a"
          },
          "opportunityId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The opportunity id",
            "example" : 1
          },
          "payByCheck" : {
            "type" : "boolean",
            "description" : "pay by check or ach"
          }
        }
      },
      "Loan" : {
        "type" : "object",
        "description" : "loan object",
        "required" : [ "id", "loanAgreementId", "status", "choiceIntRate", "standardIntRate", "currentIntRate", "orginalAmount", "choiceMonthlyPayment", "standardMonthlyPayment", "loanType", "disbursementSequence" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "unique loan identifier",
            "example" : 1
          },
          "loanAgreementId" : {
            "type" : "integer",
            "description" : "unique identifier of loan agreement"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "NEW", "READY_TO_FUND", "CURRENT", "LATE", "PAID_IN_FULL", "CANCELLED", "CHARGED_OFF", "THIRD_PARTY_SERVICING" ],
            "description" : "the loan status"
          },
          "choiceIntRate" : {
            "type" : "number",
            "format" : "float",
            "description" : "the interest rate for the choice product in %"
          },
          "standardIntRate" : {
            "type" : "number",
            "format" : "float",
            "description" : "the interest rate for the standard product in %"
          },
          "originalAmount" : {
            "type" : "number",
            "format" : "float",
            "description" : "the portion of the loan (in dollars) that relates to the loan origination fee (including OM portion, if there is one) i.e. if dealer fee = 10% and loan_amount = $30000, origination_amount = $3000"
          },
          "choiceMonthlyPayment" : {
            "type" : "number",
            "format" : "float",
            "description" : "the monthly payment for the choice product"
          },
          "standardMonthlyPayment" : {
            "type" : "number",
            "format" : "float",
            "description" : "the monthly payment for the standard product"
          },
          "loanType" : {
            "type" : "string",
            "enum" : [ "Unspecified", "HomeSolar", "HomeImprovement" ],
            "description" : "the type of loan"
          },
          "disbursementSequence" : {
            "type" : "string",
            "enum" : [ "80-20 Sequence", "50-40-10 Sequence", "50-50 Sequence", "30% countersignature, 70% installation complete", "100% installation complete", "Unspecified", "See Projects" ],
            "description" : "the sequence of the disbursement"
          }
        }
      },
      "LoanAgreement" : {
        "type" : "object",
        "description" : "loan agreement object",
        "required" : [ "id", "opportunityId", "creditApplicationId", "firstName", "lastName", "email", "phone1", "address", "status", "loanAmount", "tierId", "bankAccountId" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "unique loan agreement identifier",
            "example" : 1
          },
          "opportunityId" : {
            "type" : "integer",
            "description" : "unique opportunity identifier"
          },
          "creditApplicationId" : {
            "type" : "integer",
            "description" : "unique identifier for the credit application"
          },
          "firstName" : {
            "type" : "string",
            "description" : "first name of the customer"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name of the customer"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "description" : "email of the customer"
          },
          "phone1" : {
            "type" : "string",
            "description" : "primary phone number of the customer"
          },
          "phone2" : {
            "type" : "string",
            "description" : "secondary phone number of the customer"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "SUBMITTED", "REVIEWED", "COUNTERSIGNED", "WITHDRAWN", "DELETED", "CANCELED", "COMPLETE", "STAMPED_AND_RETURNED" ],
            "description" : "loan agreement status"
          },
          "loanAmount" : {
            "type" : "number",
            "format" : "float",
            "description" : "the loan amount of the loan"
          },
          "tierId" : {
            "type" : "integer",
            "description" : "unique tier identifier",
            "example" : 1
          },
          "bankAccountId" : {
            "type" : "integer",
            "description" : "unique bank account identifier",
            "example" : 1
          },
          "loanProduct" : {
            "$ref" : "#/components/schemas/LoanProduct"
          },
          "lender" : {
            "type" : "string",
            "description" : "the lender for this loan agreement",
            "example" : "WebBank"
          }
        }
      },
      "LoanAgreementSignatureUrlRequest" : {
        "type" : "object",
        "description" : "Configures request to fetch loan agreement e-sign url",
        "properties" : {
          "callbackUrl" : {
            "type" : "string",
            "description" : "a valid URL with protocol",
            "example" : "http://www.url.com"
          },
          "signerRole" : {
            "type" : "string",
            "description" : "a valid Docusign signer role",
            "example" : "Recipient"
          }
        }
      },
      "LoanCalculatorV3Response" : {
        "description" : "loan calculator response for the Truth in Lending Act disclosure on the loan agreement.",
        "type" : "object",
        "required" : [ "numRegularMonthlyPayments", "firstPaymentDate", "maturityDate", "amountFinanced", "dailyRate", "dailyRateDiscounted", "annualRate", "annualRateDiscounted", "apr", "aprDiscounted", "financeCharge", "financeChargeDiscounted", "totalPayments", "totalPaymentsDiscounted", "monthlyPayment", "monthlyPaymentDiscounted", "finalMonthlyPayment", "finalMonthlyPaymentDiscounted" ],
        "properties" : {
          "numRegularMonthlyPayments" : {
            "type" : "number",
            "description" : "Number of equal payments required, not including the final one that will be smaller."
          },
          "firstPaymentDate" : {
            "type" : "string",
            "description" : "Date of first payment."
          },
          "maturityDate" : {
            "type" : "string",
            "description" : "Date of last payment."
          },
          "amountFinanced" : {
            "type" : "number",
            "description" : "Total amount financed (the loan amount)"
          },
          "dailyRate" : {
            "type" : "number",
            "description" : "The daily interest rate"
          },
          "dailyRateDiscounted" : {
            "type" : "number",
            "description" : "The daily interest rate including the ACH discount"
          },
          "annualRate" : {
            "type" : "number",
            "description" : "The annual interest rate"
          },
          "annualRateDiscounted" : {
            "type" : "number",
            "description" : "The annual interest rate including the ACH discount"
          },
          "apr" : {
            "type" : "number",
            "description" : "Annual percentage rate for the loan"
          },
          "aprDiscounted" : {
            "type" : "number",
            "description" : "Annual percentage rate for the loan including the ACH discount"
          },
          "financeCharge" : {
            "type" : "number",
            "description" : "Total finance charge for the loan"
          },
          "financeChargeDiscounted" : {
            "type" : "number",
            "description" : "Total finance charge for the loan including the ACH discount"
          },
          "totalPayments" : {
            "type" : "number",
            "description" : "Total amount that the borrower will have to pay for the loan, including principal and interest"
          },
          "totalPaymentsDiscounted" : {
            "type" : "number",
            "description" : "Total amount that the borrower will have to pay including the ACH discount"
          },
          "monthlyPayment" : {
            "type" : "number",
            "description" : "Regular monthly payment"
          },
          "monthlyPaymentDiscounted" : {
            "type" : "number",
            "description" : "Monthly payment including the ACH discount"
          },
          "finalMonthlyPayment" : {
            "type" : "number",
            "description" : "The final monthly payment, usually less than the regular payment"
          },
          "finalMonthlyPaymentDiscounted" : {
            "type" : "number",
            "description" : "The final monthly payment including the ACH discount"
          }
        }
      },
      "LoanDisbursementDataResponse" : {
        "description" : "Loan disbursement data.",
        "type" : "object",
        "required" : [ "eventType", "loanAgreementId", "loanDisbursementId", "milestoneName", "projectId", "principalAdvanceAmount" ],
        "properties" : {
          "eventType" : {
            "$ref" : "#/components/schemas/OriginationEventType"
          },
          "loanAgreementId" : {
            "type" : "integer",
            "description" : "Platform loan agreement identifier."
          },
          "loanDisbursementId" : {
            "type" : "integer",
            "description" : "Platform loan disbursement identifier."
          },
          "milestoneName" : {
            "type" : "string",
            "description" : "The name of the milestone being disbursed."
          },
          "milestoneId" : {
            "type" : "integer",
            "description" : "The ID of the milestone being disbursed. Empty for adjustment milestones."
          },
          "projectId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Platform project identifier."
          },
          "principalAdvanceAmount" : {
            "type" : "number",
            "format" : "double",
            "description" : "The amount of principal to advance for this disbursement."
          }
        }
      },
      "LoanProduct" : {
        "type" : "object",
        "description" : "loan product object",
        "required" : [ "id", "productType", "name", "displayName", "loanMonthTerm", "minimumAmount", "dealerFee", "status", "approvedStates", "creditRuleSet", "loanProductOptions", "promoPeriod", "reamortizationPeriod", "defermentPeriods", "isHomeImprovement", "isSameAsCash", "tiers" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "unique loan product identifier",
            "example" : 1
          },
          "productType" : {
            "type" : "string",
            "enum" : [ "StandardRateProduct", "NoStandardRate", "DoubleFtc", "PowerSwitch", "ReducedRateAPRHomeImprovement", "SameAsCashHomeImprovement" ],
            "description" : "loan product type"
          },
          "name" : {
            "type" : "string",
            "description" : "common name, for internal use, unique across products"
          },
          "displayName" : {
            "type" : "string",
            "description" : "a name for display to installers; may not be unique across products, but unique with product groups an installer might have access to"
          },
          "loanMonthTerm" : {
            "type" : "integer",
            "description" : "number of months in loan"
          },
          "minimumAmount" : {
            "type" : "number",
            "format" : "float",
            "description" : "the minimum loan amount in dollars 1234.00"
          },
          "dealerFee" : {
            "type" : "number",
            "format" : "float",
            "description" : "the origination fee as a percentage (9%)"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DELETED", "ACTIVE", "PENDING" ],
            "description" : "status of loan product record"
          },
          "approvedStates" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "list of states the partner is approved for, empty list means all are approved"
          },
          "creditRuleSet" : {
            "type" : "string",
            "enum" : [ "RSRset8", "NSRv1", "NSRv2", "RSRset5", "PowerSwitch1LongTenor", "PowerSwitch1ShortTenor", "PowerSwitch2LongTenor", "PowerSwitch2ShortTenor", "HomeImprovementv1", "HomeImprovementSameAsCashv1", "PowerSwitch3", "PowerSwitch3Revised", "HomeImprovementOneDotTwo" ],
            "description" : "Which credit ruleset (voter collection) to use for this product"
          },
          "loanProductOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "Battery", "Reroof" ]
            }
          },
          "promoPeriod" : {
            "type" : "integer",
            "description" : "number of months in promo period (SAC loan)"
          },
          "reamortizationPeriod" : {
            "type" : "integer",
            "description" : "number of months before loan reamortizes"
          },
          "defermentPeriods" : {
            "type" : "integer",
            "description" : "number of months before loan starts"
          },
          "isHomeImprovement" : {
            "type" : "boolean",
            "description" : "is home improvement loan?"
          },
          "isSameAsCash" : {
            "type" : "boolean",
            "description" : "is SAC loan?"
          },
          "tiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tier"
            },
            "description" : "list of tiers for this loan product"
          }
        }
      },
      "Lender" : {
        "type" : "object",
        "description" : "lender object",
        "required" : [ "eligibleLenderName" ],
        "properties" : {
          "eligibleLenderName" : {
            "type" : "string",
            "description" : "the name of the eligible lender",
            "example" : "Mosaic"
          }
        }
      },
      "Opportunity" : {
        "type" : "object",
        "description" : "opportunity",
        "required" : [ "id", "dateCreated", "channelPartnerId", "salespersonId", "firstName", "lastName", "email", "status", "branchId", "language", "onHold", "opportunityType" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "new opportunity identifier",
            "example" : 1
          },
          "dateCreated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "date created"
          },
          "channelPartnerId" : {
            "type" : "integer",
            "description" : "channel partner identifier"
          },
          "salespersonId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "partner login uuid of salesperson",
            "example" : "00000000-0000-0000-0000-00000000a11a"
          },
          "firstName" : {
            "type" : "string",
            "description" : "first name"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name"
          },
          "phone1" : {
            "type" : "string",
            "description" : "phone number"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "description" : "email address"
          },
          "status" : {
            "$ref" : "#/components/schemas/OpportunityStatus"
          },
          "branchId" : {
            "type" : "integer",
            "description" : "branch identifier"
          },
          "language" : {
            "type" : "string",
            "enum" : [ "en", "es" ],
            "description" : "language"
          },
          "onHold" : {
            "type" : "boolean",
            "description" : "is opportunity on hold?"
          },
          "opportunityType" : {
            "type" : "string",
            "enum" : [ "Unspecified", "HomeSolarLoan", "HomeImprovementLoan" ],
            "description" : "opportunity type"
          },
          "loanProductId" : {
            "type" : "integer",
            "description" : "loan product identifier"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "dateESignVerified" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "esign verified date and time"
          }
        }
      },
      "OpportunityCreateRequest" : {
        "type" : "object",
        "description" : "opportunity create request",
        "required" : [ "salespersonId", "firstName", "lastName", "phone1", "email", "language", "opportunityType" ],
        "properties" : {
          "salespersonId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "partner login uuid of salesperson",
            "example" : "00000000-0000-0000-0000-00000000a11a"
          },
          "firstName" : {
            "type" : "string",
            "description" : "first name"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name"
          },
          "phone1" : {
            "type" : "string",
            "description" : "phone number"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "description" : "email address"
          },
          "language" : {
            "type" : "string",
            "enum" : [ "en", "es" ],
            "description" : "language"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressRequest"
          },
          "opportunityType" : {
            "type" : "string",
            "enum" : [ "Unspecified", "HomeSolarLoan", "HomeImprovementLoan" ],
            "description" : "opportunity type"
          },
          "loanProductId" : {
            "type" : "integer",
            "description" : "loan product identifier"
          }
        }
      },
      "OpportunityCreateResponse" : {
        "type" : "object",
        "description" : "opportunity create response",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "new opportunity identifier",
            "example" : 1
          }
        }
      },
      "OpportunityCreditApplicationCreateRequest" : {
        "description" : "opportunity credit application request",
        "type" : "object",
        "required" : [ "creditDisclosureType", "creditApplicationId", "consentTime", "lenderDisclosureType" ],
        "properties" : {
          "creditDisclosureType" : {
            "type" : "string",
            "description" : "credit disclosure type",
            "enum" : [ "Soft", "Hard", "HardLegacy" ]
          },
          "creditApplicationId" : {
            "type" : "integer",
            "description" : "credit application id"
          },
          "consentTime" : {
            "type" : "string",
            "description" : "consent date and time"
          },
          "lenderDisclosureType" : {
            "type" : "string",
            "description" : "lender disclosure type",
            "enum" : [ "Other", "WebBank" ]
          }
        }
      },
      "OpportunityCreditApplicationResponse" : {
        "description" : "opportunity credit application response",
        "type" : "object",
        "required" : [ "opportunityId", "creditDisclosureType", "lenderDisclosureType" ],
        "properties" : {
          "opportunityId" : {
            "type" : "integer",
            "description" : "opportunity id",
            "example" : 1
          },
          "creditDisclosureType" : {
            "type" : "string",
            "description" : "disclosure type",
            "enum" : [ "Soft", "Hard", "HardLegacy" ]
          },
          "creditApplicationId" : {
            "type" : "integer",
            "description" : "credit application id"
          },
          "consentTime" : {
            "type" : "string",
            "description" : "consent date and time"
          },
          "lenderDisclosureType" : {
            "type" : "string",
            "description" : "lender disclosure type",
            "enum" : [ "Other", "WebBank" ]
          }
        }
      },
      "OpportunityStatus" : {
        "description" : "Opportunity status names",
        "type" : "string",
        "enum" : [ "NEW", "PREQUAL_SENT", "PREQUAL_COMPLETED", "CREDIT_APPROVED", "CREDIT_DENIED", "LOAN_APP_SENT", "LOAN_APP_COMPLETED", "LOAN_APP_APPROVED", "LOAN_APP_INCOMPLETE", "LOAN_APP_COUNTERSIGNED", "EQUIPMENT_SUBMITTED", "EQUIPMENT_APPROVED", "INSTALL_COMPLETE", "INSTALL_CONFIRMED", "INSPECTION_COMPLETE", "FINAL_CONFIRMATION", "FINAL_PAYMENT", "DELETED" ]
      },
      "OpportunityUpdateRequest" : {
        "type" : "object",
        "description" : "opportunity update request",
        "properties" : {
          "updatorId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "partner login uuid of updator",
            "example" : "00000000-0000-0000-0000-00000000a11a"
          },
          "logMessage" : {
            "type" : "string",
            "description" : "message to put in log for update"
          },
          "salespersonId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "partner login uuid of salesperson",
            "example" : "00000000-0000-0000-0000-00000000a11a"
          },
          "firstName" : {
            "type" : "string",
            "description" : "first name"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name"
          },
          "phone1" : {
            "type" : "string",
            "description" : "phone number"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "description" : "email address"
          },
          "language" : {
            "type" : "string",
            "enum" : [ "en", "es" ],
            "description" : "language"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressRequest"
          },
          "opportunityType" : {
            "type" : "string",
            "enum" : [ "Unspecified", "HomeSolarLoan", "HomeImprovementLoan" ],
            "description" : "opportunity type"
          },
          "statusName" : {
            "$ref" : "#/components/schemas/OpportunityStatus"
          }
        }
      },
      "OpportunityUpdateResponse" : {
        "type" : "object",
        "description" : "opportunity update response",
        "required" : [ "result" ],
        "properties" : {
          "result" : {
            "type" : "boolean",
            "description" : "was opportunity updated successfully?",
            "example" : true
          }
        }
      },
      "OpportunityLoanProductUpdateRequest" : {
        "type" : "object",
        "description" : "opportunity loan product update request",
        "properties" : {
          "updatorId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "partner login uuid of updator",
            "example" : "00000000-0000-0000-0000-00000000a11a"
          },
          "logMessage" : {
            "type" : "string",
            "description" : "message to put in log for update"
          },
          "loanProductId" : {
            "type" : "integer",
            "description" : "loan product identifier"
          }
        }
      },
      "OpportunityLoanProductUpdateResponse" : {
        "type" : "object",
        "description" : "opportunity loan product update response",
        "required" : [ "result" ],
        "properties" : {
          "result" : {
            "type" : "boolean",
            "description" : "was opportunity loan product updated successfully?",
            "example" : true
          }
        }
      },
      "OriginationEventDataResponse" : {
        "description" : "Contract for all origination event data.",
        "oneOf" : [ {
          "$ref" : "#/components/schemas/LoanDisbursementDataResponse"
        } ],
        "discriminator" : {
          "propertyName" : "eventType",
          "mapping" : {
            "LoanDisbursementBatched" : "LoanDisbursementDataResponse"
          }
        }
      },
      "OriginationEventResponse" : {
        "description" : "Contains information about an event which happened in the origination system.",
        "type" : "object",
        "required" : [ "id", "offset", "eventType", "created", "effective", "data" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Universally unique identifier for this event."
          },
          "offset" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Tracks the order if this event in relation to other events."
          },
          "eventType" : {
            "$ref" : "#/components/schemas/OriginationEventType"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The time at which the event was created."
          },
          "effective" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The time for which the event applies."
          },
          "data" : {
            "$ref" : "#/components/schemas/OriginationEventDataResponse"
          }
        }
      },
      "OriginationEventType" : {
        "description" : "Origination event types.",
        "type" : "string",
        "enum" : [ "LoanDisbursementBatched" ]
      },
      "Partner" : {
        "type" : "object",
        "description" : "channel partner entity",
        "required" : [ "id", "partnerType", "channelStatus", "hostName", "bitmask", "approvedStates", "disbursementSequence", "name", "logoUrl" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "unique channel partner identifier",
            "example" : 1
          },
          "partnerType" : {
            "type" : "string",
            "enum" : [ "DEVELOPER", "INSTALLER", "FINANCE_PROVIDER", "SITE_HOST" ],
            "description" : "the channel partner type"
          },
          "channelStatus" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "DISABLED" ],
            "description" : "the channel status"
          },
          "hostName" : {
            "type" : "string",
            "description" : "partner specific prefix"
          },
          "bitmask" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "list of flags"
          },
          "approvedStates" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "list of states the partner is approved for, empty list means all are approved"
          },
          "disbursementSequence" : {
            "type" : "string",
            "enum" : [ "80-20 Sequence", "50-40-10 Sequence", "50-50 Sequence", "30% countersignature, 70% installation complete", "100% installation complete", "Unspecified", "See Projects" ]
          },
          "name" : {
            "type" : "string",
            "description" : "partner name"
          },
          "logoUrl" : {
            "type" : "string",
            "description" : "logo url"
          }
        }
      },
      "PartnerLogin" : {
        "type" : "object",
        "required" : [ "id", "channelPartnerId", "email", "status", "firstName", "lastName", "role", "roleId", "branchId" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Unique Identifier",
            "example" : "00000000-0000-0000-0000-00000000a11a"
          },
          "channelPartnerId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "identifier of the channel partner"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "description" : "email of the salesrepresentative"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "DISABLED" ],
            "description" : " user status: active or disabled"
          },
          "firstName" : {
            "type" : "string",
            "description" : "first name of the salesrepresentative"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name of the salesrepresentative"
          },
          "role" : {
            "type" : "string",
            "enum" : [ "ADMIN", "OPERATIONS", "SALESMGR", "SALESMGR_NO_OPPORTUNITY_CREATION", "SALESREP", "SALESREP_NO_OPPORTUNITY_CREATION", "NOTIFICATIONS_ONLY" ],
            "description" : "role of salesrepresentative which governs access"
          },
          "roleId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "identifier of the role"
          },
          "branchId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "identifier of the channel partner branch"
          }
        }
      },
      "ProjectCreateRequest" : {
        "type" : "object",
        "description" : "project create request",
        "required" : [ "opportunityId", "amount", "projectType" ],
        "properties" : {
          "opportunityId" : {
            "type" : "integer",
            "description" : "opportunity unique identifier",
            "example" : 1
          },
          "amount" : {
            "type" : "number",
            "format" : "float",
            "description" : "amount for project",
            "example" : 15000.3
          },
          "projectType" : {
            "type" : "integer",
            "description" : "project type",
            "example" : 3
          }
        }
      },
      "ProjectIdResponse" : {
        "type" : "object",
        "description" : "project id response",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "project identifier",
            "example" : 1
          }
        }
      },
      "ProjectDeleteResponse" : {
        "type" : "object",
        "description" : "project delete response",
        "required" : [ "id", "statusId" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "project identifier",
            "example" : 1
          },
          "statusId" : {
            "type" : "integer",
            "description" : "project's status identifier",
            "example" : 3
          }
        }
      },
      "ProjectResponse" : {
        "type" : "object",
        "description" : "project response",
        "required" : [ "id", "dateCreated", "opportunityId", "statusId", "status", "projectTypeId", "projectType", "disbursementSequence" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "project identifier",
            "example" : 1
          },
          "dateCreated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "project's date created",
            "example" : "2018-08-06T12:23:19.000Z"
          },
          "opportunityId" : {
            "type" : "integer",
            "description" : "opportunity identifier",
            "example" : 1
          },
          "statusId" : {
            "type" : "integer",
            "description" : "project's status identifier",
            "example" : 3
          },
          "status" : {
            "type" : "string",
            "description" : "project status name",
            "example" : "Unspecified"
          },
          "projectTypeId" : {
            "type" : "integer",
            "description" : "project's type identifier",
            "example" : 1
          },
          "projectType" : {
            "type" : "string",
            "description" : "project type name",
            "example" : "SolarSystem"
          },
          "loanAmount" : {
            "type" : "number",
            "format" : "float",
            "description" : "project's loanAmount identifier",
            "example" : 50000
          },
          "totalCost" : {
            "type" : "number",
            "format" : "float",
            "description" : "total cost",
            "example" : 60000
          },
          "estInstallDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "project estInstallDate",
            "example" : "2018-10-30T00:00:00.000Z"
          },
          "installConfirmedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "project installConfirmedDate",
            "example" : "2018-10-31T00:00:00.000Z"
          },
          "installConfirmedDocumentId" : {
            "type" : "integer",
            "description" : "project's install Confirmed Document Id",
            "example" : 3
          },
          "disbursementSequence" : {
            "type" : "string",
            "enum" : [ "80-20 Sequence", "50-40-10 Sequence", "50-50 Sequence", "30% countersignature, 70% installation complete", "100% installation complete", "Unspecified", "See Projects" ]
          },
          "notes" : {
            "type" : "string",
            "description" : "project' snotes",
            "example" : "notes"
          }
        }
      },
      "SendBorrowerEmailRequest" : {
        "type" : "object",
        "description" : "send borrower email request",
        "required" : [ "opportunityId", "emailTemplate", "substitutions" ],
        "properties" : {
          "opportunityId" : {
            "type" : "integer",
            "description" : "opportunity identifier",
            "example" : 1
          },
          "toEmailAddresss" : {
            "type" : "string",
            "description" : "borrower email, if none it will be use the one from the opportunity associated",
            "example" : "test@borroweruser.com"
          },
          "emailTemplate" : {
            "type" : "string",
            "enum" : [ "PointOfSaleShareLink", "PointOfSaleAchSignup", "PointOfSaleEmailVerificationReminder" ],
            "description" : "email template to use",
            "example" : "PointOfSaleShareLink"
          },
          "substitutions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "list of substitutions depending on the email template used, example %parter_name% -> \"mosaic\""
          }
        }
      },
      "SendBorrowerEmailResponse" : {
        "type" : "object",
        "description" : "send borrower email response",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "email entity id",
            "example" : 1
          }
        }
      },
      "SeqUuid" : {
        "type" : "array",
        "items" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "java.util.UUID",
          "example" : "b63f9741-0809-4f5e-ab1b-e32a56e14245"
        }
      },
      "Tier" : {
        "type" : "object",
        "description" : "tier elements",
        "required" : [ "id", "minScore", "rate", "stdRate", "rank", "maxLoanAmount" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "unique loan product identifier"
          },
          "minScore" : {
            "type" : "integer",
            "description" : "min aggregate score to qualify for this tier"
          },
          "rate" : {
            "type" : "number",
            "format" : "float",
            "description" : "rate as a % ie (8.00 for a rate of 8%)"
          },
          "stdRate" : {
            "type" : "number",
            "format" : "float",
            "description" : "standard rate as a % ie (8.00 for a rate of 8%)"
          },
          "rank" : {
            "type" : "integer",
            "description" : "the order in which to evaluate the tier (1 is lowest risk, risk increases with rank increase)"
          },
          "maxLoanAmount" : {
            "type" : "integer",
            "description" : "maximum amount of loan for tier"
          }
        }
      },
      "UnifiedLogin" : {
        "type" : "object",
        "required" : [ "userId", "channelPartnerId", "role", "roleId", "firstName", "lastName" ],
        "properties" : {
          "userId" : {
            "type" : "string",
            "description" : "unique identifier for a login"
          },
          "channelPartnerId" : {
            "type" : "integer",
            "description" : "id of channel partner"
          },
          "role" : {
            "type" : "string",
            "description" : "name of partner login role",
            "enum" : [ "ADMIN", "SALESREP", "SALESMGR", "OPERATIONS", "NOTIFICATIONS_ONLY" ]
          },
          "roleId" : {
            "type" : "integer",
            "description" : "id of role"
          },
          "firstName" : {
            "type" : "string",
            "description" : "first name of user"
          },
          "lastName" : {
            "type" : "string",
            "description" : "last name of user"
          }
        },
        "example" : {
          "userId" : "abc123",
          "channelPartnerId" : 1,
          "role" : "ADMIN",
          "roleId" : 1,
          "firstName" : "LoanAgmtDoc",
          "lastName" : "Dimaggio"
        }
      },
      "UnifiedLoginAuthenticatePartnerRequest" : {
        "type" : "object",
        "required" : [ "email", "password", "ipList" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "email used to try to log in"
          },
          "password" : {
            "type" : "string",
            "description" : "password used to try to log in"
          },
          "ipList" : {
            "type" : "array",
            "description" : "list of ip addresses",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "UserCreateRequest" : {
        "type" : "object",
        "description" : "user create request",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "user email"
          },
          "password" : {
            "type" : "string",
            "description" : "user password"
          },
          "language" : {
            "type" : "string",
            "enum" : [ "en", "es" ],
            "description" : "language"
          }
        }
      },
      "UserCreateResponse" : {
        "type" : "object",
        "description" : "user create request",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "user id",
            "example" : "00000000-0000-0000-0000-00000000a11a"
          },
          "email" : {
            "type" : "string",
            "description" : "user email"
          },
          "language" : {
            "type" : "string",
            "enum" : [ "en", "es" ],
            "description" : "language"
          }
        }
      },
      "Url" : {
        "type" : "object",
        "description" : "url response",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "url",
            "example" : "www.url.com"
          }
        }
      },
      "BankAccountRequest" : {
        "type" : "object",
        "description" : "request to update a bank account",
        "properties" : {
          "channelPartnerId" : {
            "type" : "number",
            "description" : "unique identifier of the channel partner who owns the bank account",
            "example" : "b63f9741-0809-4f5e-ab1b-e32a56e14246"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "the new account number",
            "example" : "1231234112"
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "the routing number of the bank",
            "example" : "123123411"
          },
          "accountType" : {
            "type" : "string",
            "description" : "checking vs savings account",
            "enum" : [ "CHECKING", "SAVINGS" ]
          },
          "existingAccountNumber" : {
            "type" : "string",
            "description" : "the account number currently on file",
            "example" : "1231234124"
          }
        }
      },
      "BankAccountResponse" : {
        "type" : "object",
        "description" : "return type for the GET of the bank account",
        "properties" : {
          "accountNumberLastFour" : {
            "type" : "string",
            "description" : "the last four digits of the account number",
            "example" : "4112"
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "the routing number of the bank",
            "example" : "123123411"
          },
          "accountType" : {
            "type" : "string",
            "description" : "checking vs savings account",
            "enum" : [ "CHECKING", "SAVINGS" ]
          },
          "bankName" : {
            "type" : "string",
            "description" : "if we got it, the name of the bank (won't be there in the beginning)",
            "example" : "Some Bank"
          },
          "status" : {
            "type" : "string",
            "example" : "status of the bank account",
            "enum" : [ "NEW", "TRUSTED", "UNTRUSTED", "BAD", "VALIDATED" ]
          }
        }
      }
    },
    "requestBodies" : {
      "EventRequest" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/EventRequest"
            }
          }
        },
        "description" : "an event",
        "required" : true
      },
      "IdsRequest" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/IdsRequest"
            }
          }
        },
        "description" : "a list of loan agreement ids",
        "required" : true
      },
      "LoanAgreementRequest" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/LoanAgreementRequest"
            }
          }
        },
        "description" : "loan agreement create fields",
        "required" : true
      },
      "LoanAgreementSignatureUrlRequest" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/LoanAgreementSignatureUrlRequest"
            }
          }
        }
      }
    }
  }
}