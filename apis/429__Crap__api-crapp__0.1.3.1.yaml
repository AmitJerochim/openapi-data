openapi: 3.0.2
info:
  version: "0.1.3.1"
  title: API CRAPP
  license:
    name: MIT
servers:
  - url: 'https://localhost:8443'
    description: The local test server
  - url: 'https://crapout.com:8443'
    description: The "normal" website
  
paths:
  /register:
    post:
      tags:
        - userManagement
      requestBody:
        description: new user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        '400':
          description: 'e-mail already in use, etc.'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'

  /login:
    post:
      tags:
        - userManagement
      requestBody:
        description: login information as json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: correct user is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        '401':
          description: incorrect login information
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'

  /logout:
    post:
      summary: Logs out a user
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Header with the auth-token
      tags:
        - userManagement
      responses:
        '200':
          description: logout
        '401':
          description: incorrect login information
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'

                
  /user:
    delete:
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Header with the auth-token
      tags:
        - userManagement
      responses:
        '200':
          description: delete user who is currently logged in
        '401':
          description: incorrect login information
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'

      
  /period:
    post:
      summary: Create Period & activates it
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Header with the auth-token
      tags:
        - period
      requestBody:
        description: Period as json
        content:
          application/json:
            schema:
              $ref: ''
      responses:
        '201':
          description: The id of created & activated period
          content:
            application/json:
              schema:
                $ref: ''
        '400':
          description: Invalid period was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



    get:
      summary: Returns all periods of user
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Header with the auth-token
      tags:
        - period
      responses:
        '200':
          description: All periods of user are returned
          content:
            application/json:
              schema:
                $ref: ''
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/period/{id}':
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID of the period to get
      - in: header
        name: Authorization
        required: true
        schema:
          type: string
        description: Header with the auth-token
    get:
      summary: Returns period with given id of a user
      tags:
        - period
      responses:
        '200':
          description: Requested period is returned
          content:
            application/json:
              schema:
                $ref: ''
        '404':
          description: No period found with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
    patch:
      summary: Updates parts of the period or the whole period (activating/archiving)
      tags:
        - period
      responses:
        '203':
          description: updated
        '400':
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No such period found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Deletes period with given id
      tags:
        - period
      responses:
        '204':
          description: Deleted period with given id
        '404':
          description: No period found with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pupil:
    post:
      summary: Create Pupil
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Header with the auth-token
      tags:
        - pupil
      requestBody:
        description: pupil as json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PupilToCreate'
      responses:
        '201':
          description: created pupil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PupilReturned'
        '400':
          description: Invalid pupil was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Returns all pupils of the authorized user
      tags:
        - pupil
      responses:
        '200':
          description: All puils of user are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PupilsAll'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pupil/{id}':
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID of the period to get
      - in: header
        name: Authorization
        required: true
        schema:
          type: string
        description: Header with the auth-token
    get:
      summary: Returns pupil with the given id
      tags:
        - pupil
      responses:
        '200':
          description: Requested pupil is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PupilReturned'
        '404':
          description: No pupil found with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates parts of the pupil or the whole pupil
      tags:
        - pupil
      requestBody:
        description: pupil as json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PupilPatch'
      responses:
        '203':
          description: updated
        '404':
          description: No such pupil found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes pupil with given id
      tags:
        - pupil
      responses:
        '204':
          description: Deleted pupil with given id
        '404':
          description: No pupil found with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pupils/{OUid}':
    parameters:
      - in: path
        name: OUid
        schema:
          type: integer
        required: true
        description: ID of the period to get
      - in: header
        name: Authorization
        required: true
        schema:
          type: string
        description: Header with the auth-token
    get:
      summary: Returns pupils which contains the given OUid
      tags:
        - pupil
      responses:
        '200':
          description: Requested pupils are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PupilsAll'
        '404':
          description: No pupil found with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ou:
    post:
      summary: Creates a new Organisation Unit
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Header with the auth-token
      tags:
        - Organisation Unit
      requestBody:
        description: OU as json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OuToCreate'
      responses:
        '201':
          description: The created OU
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OuReturned'
        '400':
          description: Invalid ou was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Returns all OUs of the authorized user
      tags:
        - Organisation Unit
      responses:
        '200':
          description: All OUs of an user are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllOus'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/ou/{id}':
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID of the period to get
      - in: header
        name: Authorization
        required: true
        schema:
          type: string
        description: Header with the auth-token
    get:
      summary: Returns OU with given id it
      tags:
        - Organisation Unit
      responses:
        '200':
          description: Requested OU is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OuReturned'
        '404':
          description: No OU found with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates parts of the OU or the whole OU
      tags:
        - Organisation Unit
      requestBody:
        description: OU as json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PupilPatch'
      responses:
        '203':
          description: updated OU
        '404':
          description: No such OU found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes pupil with given id
      tags:
        - Organisation Unit
      responses:
        '204':
          description: Deleted OU with given id
        '404':
          description: No OU found with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/ou/{id}/{pupilId}':
    post:
      summary: Adds an existing pupil to an existing ou
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the ou
        - in: path
          name: pupilId
          schema:
            type: integer
          required: true
          description: ID of the pupil
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Header with the auth-token
      tags:
        - Organisation Unit
      responses:
        '201':
          description: The pupil with the given id was added to the ou
        '404':
          description: No such ou or period found (will be specified)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Removes an existing pupil from the ou with the given id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the ou
        - in: path
          name: pupilId
          schema:
            type: integer
          required: true
          description: ID of the pupil
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Header with the auth-token
      tags:
        - Organisation Unit
      responses:
        '201':
          description: The pupil with the given id was removed from the ou
        '404':
          description: No such ou or pupil does not exist or pupil is not contained in the ou (will be specified)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error (Timeout, NoDbConn, ....)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /records:
    parameters:
      - $ref: '#/components/parameters/Authorization'
    post:
      summary: Creates a new Record
      tags:
        - record
      requestBody:
        content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Record'
      responses:
        '201':
          description: Id of created Record
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 4
        '409':
          description: 'pupil/tag with the supplied id not found or date not within the tags period'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Formatting error probably date'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      parameters: 
        - in: query
          name: pupilId
          schema:
            type: integer
            example: 5
          required: false
        - in: query
          name: OUId
          schema:
            type: integer
            example: 3
          required: false
        - in: query
          name: recordTagId
          schema:
            type: integer
            example: 1
          required: false
      summary: Fetches alll filtered records
      tags:
        - record
      responses:
        '200':
          description: Array with all records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  
  '/records/{id}':
    parameters:
      - $ref: '#/components/parameters/Authorization'
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID of the record
    get:
      summary: Fetches a Record
      tags:
        - record
      responses:
        '200':
          description: Record with the supplied id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        '404':
          description: 'No record with the supplied id was found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Updates the supplied Record
      tags:
        - record
      requestBody:
        content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Record'
      responses:
        '200':
          description: Updated record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        '409':
          description: 'pupil/tag with the supplied id not found or date not within the tags period'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Formatting error probably date'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'No record with the supplied id was found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Deletes the supplied Record
      tags:
        - record
      responses:
        '204':
          description: Deleted supplied record
        '404':
          description: 'No record with the supplied id was found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /recordTags:
    parameters:
      - $ref: '#/components/parameters/Authorization' 
    post:
      summary: Creates a new recordTag
      tags:
        - recordTag
      requestBody:
        content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RecordTag'
      responses:
        '201':
          description: Id of created RecordTag
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 4
        '409':
          description: 'period with this id does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Formatting error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    get:
      parameters:
        - in: query
          name: periodId
          schema:
            type: integer
            example: 5
          required: false
      summary: Fetches all RecordTags with the supplied filters
      tags:
        - recordTag
      responses:
        '200':
          description: Array with all recordTags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordTag'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  
  '/recordTags/{id}':
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID of the recordTag
    get:
      summary: Fetches a RecordTag
      tags:
        - recordTag
      responses:
        '200':
          description: RecordTag with the supplied id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordTag'
        '404':
          description: 'No recordTag with the supplied id was found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Updates the supplied Record
      tags:
        - recordTag
      requestBody:
        content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RecordTag'
      responses:
        '200':
          description: Updated recordTag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordTag'
        '409':
          description: 'period with this id does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 'Formatting error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'No recordTag with the supplied id was found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Deletes the supplied RecordTag
      tags:
        - recordTag
      responses:
        '204':
          description: Deleted supplied recordTag
        '404':
          description: 'No recordTag with the supplied id was found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    
components:
  responses:
    '401':
      description: 'Unauthenticated (token expired / token invalid)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: 'Internal Error (Timeout, NoDbConn, ....)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    Authorization:
      in: header
      name: 'Authorization'
      required: true
      schema:
        type: string
      description: Header with the auth-token
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJUZXN0ZXIiLCJmaXJzdG5hbWUiOiJTdGVmZmVuIiwibGFzdG5hbWUiOiJTdGFibGVyIiwiaWF0IjoxNTg3OTA3Njc1NjQ0LCJleHAiOjE1ODc5MDc2OTAwNDR9.R2VKqcITn61QZGnP71HbCrDpe-9BzwyZKxiXeZ_FPMQ'
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
    PupilToCreate:
      type: object
      properties:
        identifier:
          type: string
        birthdate:
          type: number
        firstname:
          type: string
        lastname:
          type: string
        notes:
          type: string
        email:
          type: string
      example:
        identifier: Smithj
        birthdate: 12.01.1999
        firstname: John
        lastname: Smith
        notes: He is a very good stundent
        email: smithj@edu.htl-villach.at
      required:
        - identifier
        - email
    PupilReturned:
      type: object
      properties:
        id:
          type: integer
        identifier:
          type: string
        birthdate:
          type: number
        firstname:
          type: string
        lastname:
          type: string
        notes:
          type: string
        email:
          type: string
      example:
        id: 97
        identifier: Smithj
        birthdate: 12.01.1999
        firstname: John
        lastname: Smith
        notes: He is a very good stundent
        email: smithj@edu.htl-villach.at
    PupilPatch:
      type: object
      properties:
        birthdate:
          type: number
        firstname:
          type: string
        lastname:
          type: string
        notes:
          type: string
        email:
          type: string
      example:
        birthdate: 12.01.1999
        firstname: John
        lastname: Smith
        notes: He is a very good stundent
        email: smithj@edu.htl-villach.at
    PupilsAll:
      type: array
      example:
        pupils: [
          { identifier: Smithj, birthdate: 12.01.1999, firstname: John, lastname: Smith, notes: He is a very good stundent, email: smithj@edu.htl-villach.at }
          ]
    OuToCreate:
      type: object
      properties:
        label:
          type: string
        notes:
          type: string
      example:
        lable: Angewandte Mathematik 4BHIF
        notes: Ein sehr ruhiges & angenehmes Klima!
    OuReturned:
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
        notes:
          type: string
      example:
        id: 77
        lable: Angewandte Mathematik 4BHIF
        notes: Ein sehr ruhiges & angenehmes Klima!
    AllOus:
      type: array
      example:
        ous: [
          { label: Mahte, notes: Coole Klasse }, { lable: Deutsch, notes: Ich bin eine sehr gute Lehrerin }
          ]
    token:
      type: string
      example:
        token: 12345
    User:
      type: object
      properties:
        username: 
          type: string
          minLength: 3
          maxLength: 32
        firstname: 
          type: string
          minLength: 3
          maxLength: 32
        lastname: 
          type: string
          minLength: 3
          maxLength: 32
        password: 
          type: string
          minLength: 8
          maxLength: 32
      example:
        username: herbert.glanzer
        firstname: Herbert
        lastname: Glanzer
        password: 12345678
    Record:
      type: object
      properties:
        id:
          type: integer
          example: 9
          readOnly: true
        ou:
          type: integer
          example: 4
          description: id of the corresponding OU
        pupil:
          type: integer
          example: 4
          description: id of the corresponding pupil
        tag:
          type: integer
          example: 2
          description: id of the corresponding recordTag
        tagLable:
          type: integer
          example: Mitarbeit
          description: the already loaded lable of the RecordTagId
          readOnly: true
        value:
          type: string
          example: '+'
          description: 'The value of the record'
        date:
          type: string
          format: date-time
          description: As defined by date-time - <a href="https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14">RFC3339</a>
        comment: 
          type: string
          example: 'Hat mir programmieren erklärt'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required: 
        - pupil
        - ou
        - tag
        - value
        - date
    RecordTag:
      type: object
      properties:
        label:
          type: string
          example: 'Mitarbeit'
        period:
          type: integer
          example: 3
          description: id of the corresponding period
      required: 
        - label
        - period
    Credentials:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 32
        password:
          type: string
          minLength: 8
          maxLength: 32
      example:
        username: vladislav
        password: 12345678