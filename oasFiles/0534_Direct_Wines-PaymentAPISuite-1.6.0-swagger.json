{
  "openapi" : "3.0.2",
  "servers" : [ {
    "url" : "/api",
    "description" : "This Website"
  }, {
    "url" : "https://virtserver.swaggerhub.com/Direct_Wines/PaymentAPISuite/1.6.0",
    "description" : "SwaggerHub API Auto Mocking"
  } ],
  "info" : {
    "description" : "This is Payment API Suite. The version is to add a bean to support 3DS2 functionality",
    "version" : "1.6.0",
    "title" : "Payment API Suite",
    "contact" : {
      "email" : "apisupport@laithwaiteswine.com"
    }
  },
  "paths" : {
    "/checkout/payment" : {
      "post" : {
        "tags" : [ "Payment Checkout API Suite" ],
        "summary" : "apply payment to order",
        "deprecated" : true,
        "description" : "<html> <p>This API is used to create a payment group for a website order. The payment group for the order would be created depending on the input type passed to payment details.</p> <p>&nbsp;</p> <p>The main input to this API is a 'PaymentDetails' object of the different type of payment details. However full details of all mandatory and optional parameters are described in the model definition section of the request body</p> <p>&nbsp;</p> <p>This API method is to be used in conjunction with a set of 'multi-step' checkout APIs. It cannot be used in isolation. Together this set of APIs allows a client to build order in steps and then to submit it. Creating the payment group using this API is one of those steps.</p> <p>&nbsp;</p> <p>It is important to note that this is a not a stateless API. As such it does not require an order id as a parameter, because the server maintains the state of the current order on behalf of the client</p> <p>&nbsp;</p> <p><strong>Technically this API performs the following actions:-</strong></p> <ol> <li>It removes all the payment groups from the current order.</li> <li>It validates the input parameters.</li> <li>A payment group is created using the supplied payment details passed based on the type of payment details.</li> </ol> <p>&nbsp;</p> <p>Please note that this API does not authorize the payment and submit the order, it just applies the payment details to the order. To commit the order, a separate API needs to be called after this API to commit the order which does the payment authorize and commit the order.</p> </html>",
        "operationId" : "applyPayment",
        "requestBody" : {
          "description" : "This parameter is used to contain payment details required to create payment group for the order.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ChequeDetails"
                }, {
                  "$ref" : "#/components/schemas/VoucherDetails"
                }, {
                  "$ref" : "#/components/schemas/PaypalDetails"
                }, {
                  "$ref" : "#/components/schemas/ThirdPartyVoucherDetails"
                }, {
                  "$ref" : "#/components/schemas/InvoiceDetails"
                }, {
                  "$ref" : "#/components/schemas/OnAccountDetails"
                }, {
                  "$ref" : "#/components/schemas/WineRewardDetails"
                }, {
                  "$ref" : "#/components/schemas/RefundDetails"
                }, {
                  "$ref" : "#/components/schemas/CreditCardDetails"
                }, {
                  "$ref" : "#/components/schemas/CreditCard3DSDetails"
                }, {
                  "$ref" : "#/components/schemas/DirectDebitDetails"
                }, {
                  "$ref" : "#/components/schemas/MigratedPayment"
                } ]
              },
              "example" : {
                "billingAddress" : {
                  "address" : {
                    "type" : "UK",
                    "postalCode" : "GL3 4AQ",
                    "houseNumber" : "ss",
                    "flatNumber" : "",
                    "address1" : "Hurricane Road",
                    "address2" : "Unit 5, The I O Centre",
                    "city" : "Gloucester",
                    "county" : "Gloucestershire",
                    "country" : "GB"
                  },
                  "contactInfo" : {
                    "email" : "jjkjkj@nviz.com",
                    "companyName" : "Infusion",
                    "dayPhoneNumber" : "9812345670"
                  },
                  "personalInfo" : {
                    "salutation" : "miss",
                    "firstName" : "Mukesh",
                    "lastName" : "Nagpal"
                  }
                },
                "cardType" : "Visa",
                "cardNumber" : "4444333322221111",
                "expirationMonth" : "10",
                "expirationYear" : "2020",
                "cvv" : "737",
                "type" : "creditCard"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "https://api.swaggerhub.com/apis/Direct_Wines/CheckoutAPISuite/1.6.0#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "A validation error occured when calling this method.  For example it may be that the supplied account Id was invalid or was unauthorized for this user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "https://api.swaggerhub.com/apis/Direct_Wines/CommonAPIModelsSuite/1.2.0#/components/schemas/CommonResponseHeader"
                }
              }
            }
          }
        }
      }
    },
    "/checkout/payment/ordertotal" : {
      "put" : {
        "tags" : [ "Payment Checkout API Suite" ],
        "summary" : "Update the Order so that single payment group to be assigned with the full Order amount.",
        "description" : "This API is used to apply full order amount to single payment group",
        "operationId" : "applyOrderTotal",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "https://api.swaggerhub.com/apis/Direct_Wines/CheckoutAPISuite/1.6.0#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "A validation error occured when calling this method.  For example it may be that the supplied account Id was invalid or was unauthorized for this user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "https://api.swaggerhub.com/apis/Direct_Wines/CommonAPIModelsSuite/1.2.0#/components/schemas/CommonResponseHeader"
                }
              }
            }
          }
        }
      }
    },
    "/checkout/payment/paypal" : {
      "post" : {
        "tags" : [ "Payment Checkout API Suite" ],
        "summary" : "apply ebay paypal payment to order",
        "description" : "This API is used to apply EBay paypal payment to order and accepts paypal payment details to create paypal payment group.",
        "operationId" : "addPaypalPayment",
        "requestBody" : {
          "description" : "Input parameter which holds order paypal payment details",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaypalDetails"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "https://api.swaggerhub.com/apis/Direct_Wines/CheckoutAPISuite/1.6.0#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "A validation error occured when calling this method.  For example it may be that the supplied account Id was invalid or was unauthorized for this user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "https://api.swaggerhub.com/apis/Direct_Wines/CommonAPIModelsSuite/1.2.0#/components/schemas/CommonResponseHeader"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "PaymentDetail" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "type"
        },
        "properties" : {
          "type" : {
            "description" : "This is used to define the type of payment method",
            "type" : "string",
            "enum" : [ "creditCard", "creditCard3DS", "paypalPayment", "chequePayment", "giftCertificate", "thirdpartyGiftCertificate", "directDebit", "invoicePayment", "onAccount", "wineRewardPayment", "migratedPayment", "refundPayment" ],
            "example" : "creditCard"
          },
          "billingAddress" : {
            "$ref" : "https://api.swaggerhub.com/apis/Direct_Wines/ProfileAddressBookAPISuite/1.0.0#/components/schemas/Contact"
          },
          "defaultPayment" : {
            "type" : "boolean",
            "default" : false
          },
          "amount" : {
            "type" : "number",
            "description" : "<p>This is used to define amount to be applied to order from the multiple payment methods passed in the input. Below are more details on when should amount be passed in the payment details</p> <ol> <li>If the chequePayment payment method is passed then amount passed to this field is used to as cheque amount for payment to order.</li> <li>This parameter is mandatory for all the paymentDetails except<br />credit card if multiple payment details are defined at the baseInputOrder level because the credit card is always charged with the order remaining amount.</li> <li>The amount is mandatory even if single payment detail is defined on baseInputOrder for chequePayment and wineRewards payment type because these payment types can't be charged more than the value in it. Other payment types are not required to have the amount in case of single payment details.</li> </ol>",
            "format" : "double"
          },
          "externalAmount" : {
            "type" : "number",
            "format" : "double",
            "deprecated" : true,
            "description" : "This property is deprecated and will be removed from a future version of the API"
          },
          "id" : {
            "type" : "string"
          },
          "new" : {
            "type" : "boolean",
            "deprecated" : true,
            "default" : false
          }
        },
        "required" : [ "type" ]
      },
      "ChequeDetails" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object",
          "properties" : {
            "chequeNumber" : {
              "description" : "This is used to define the cheque number for the cheque issued for the payment.",
              "type" : "string"
            },
            "batchNumber" : {
              "description" : "This is used to define the batch number for the cheque issued for the payment.",
              "type" : "string"
            },
            "nickName" : {
              "description" : "This is used to define the nick name for the cheque payment.",
              "type" : "string"
            }
          }
        } ]
      },
      "VoucherDetails" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object",
          "properties" : {
            "nickName" : {
              "type" : "string"
            },
            "methodType" : {
              "type" : "string"
            },
            "redeemptionCode" : {
              "type" : "string",
              "description" : "This is used to store the voucher code to be redeemed for the current order."
            },
            "giftCertificates" : {
              "type" : "object",
              "description" : "This property is used to pass the gift certificates in the session and is mainly used in case of LWM vouchers.",
              "additionalProperties" : {
                "type" : "object"
              }
            },
            "serialId" : {
              "type" : "string",
              "description" : "This parameter is used to define serial id for voucher item."
            },
            "cashVoucher" : {
              "type" : "boolean",
              "description" : "This parameter is used to define if voucher passed in the input is cash voucher. This accepts/returns boolean value and mainly returned in case of apply voucher api response.",
              "default" : false
            }
          },
          "example" : {
            "redeemptionCode" : "L71VK2T5XKA",
            "amount" : "20",
            "type" : "giftCertificate"
          }
        } ]
      },
      "PaypalDetails" : {
        "description" : "This is used when paypal payment method is used to place an order.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object",
          "properties" : {
            "paymentReferenceNumber" : {
              "description" : "This is used to define the payment reference number returned from the paypal website.",
              "type" : "string"
            }
          },
          "example" : {
            "billingAddress" : {
              "address" : {
                "type" : "UK",
                "postalCode" : "HP14 3NT",
                "houseNumber" : 23,
                "flatNumber" : "",
                "address1" : "Ferndale Close",
                "address2" : null,
                "city" : "Stokenchurch",
                "county" : "Bucks",
                "country" : "GB"
              },
              "contactInfo" : {
                "email" : "fatima.proctor@directwines.com",
                "companyName" : "Direct Wines",
                "dayPhoneNumber" : "0118 9347100"
              },
              "personalInfo" : {
                "salutation" : "Ms",
                "firstName" : "Fatima",
                "lastName" : "Proctor"
              }
            },
            "paymentReferenceNumber" : "paypalps0001",
            "type" : "paypalPayment"
          }
        } ]
      },
      "ThirdPartyVoucherDetails" : {
        "description" : "This is used if third party voucher are used as payment to order.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object",
          "properties" : {
            "thirdPartyVoucherType" : {
              "description" : "This is used to define the voucher type for third party vouchers.",
              "type" : "string"
            }
          }
        } ]
      },
      "DirectDebitDetails" : {
        "description" : "This is used if direct debit is used as payment to order.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object",
          "properties" : {
            "accountNumber" : {
              "description" : "This is to define account number for direct debit payment.",
              "type" : "string"
            },
            "sortCode" : {
              "description" : "This is to define sort code for direct debit payment.",
              "type" : "string"
            },
            "methodType" : {
              "type" : "string"
            },
            "nickName" : {
              "description" : "This is to define nick name for direct debit payment.",
              "type" : "string"
            }
          }
        } ]
      },
      "InvoiceDetails" : {
        "description" : "This is used if invoice is used as payment to order.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object",
          "properties" : {
            "clubCode" : {
              "description" : "This is to define club code for invoice payment.",
              "type" : "string"
            },
            "creditLimit" : {
              "description" : "This is to define credit limit for invoice payment.",
              "type" : "number",
              "format" : "double"
            },
            "currentCreditBalance" : {
              "description" : "This is to define available credit balance for invoice payment.",
              "type" : "number",
              "format" : "double"
            },
            "availableCredit" : {
              "description" : "This is to define available credit for invoice payment.",
              "type" : "number",
              "format" : "double"
            },
            "methodType" : {
              "type" : "string"
            },
            "nickName" : {
              "description" : "This is to define nick name for invoice payment.",
              "type" : "string"
            }
          }
        } ]
      },
      "OnAccountDetails" : {
        "description" : "This is used if onAccount payment is used as payment to order.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object",
          "properties" : {
            "nickName" : {
              "description" : "This is to define nick name for OnAccount payment.",
              "type" : "string"
            },
            "creditLimit" : {
              "description" : "This is to define credit limit for OnAccount payment.",
              "type" : "number",
              "format" : "double"
            },
            "currentCreditBalance" : {
              "description" : "This is to define current credit balance for OnAccount payment.",
              "type" : "number",
              "format" : "double"
            },
            "availableCredit" : {
              "description" : "This is to define available credit for OnAccount payment.",
              "type" : "number",
              "format" : "double"
            },
            "clubCode" : {
              "description" : "This is to define club code for OnAccount payment.",
              "type" : "string"
            },
            "methodType" : {
              "type" : "string"
            }
          }
        } ]
      },
      "WineRewardDetails" : {
        "description" : "This is used if wine reward is used as payment to order.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object",
          "properties" : {
            "accountNumber" : {
              "description" : "This is used to define saving account number which has wine reward balance and should be used as payment to order.",
              "type" : "string"
            }
          },
          "example" : {
            "accountNumber" : "WR0001001",
            "amount" : "20",
            "type" : "wineRewardPayment"
          }
        } ]
      },
      "RefundDetails" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object"
        } ]
      },
      "ZeroPayment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object"
        } ]
      },
      "MigratedPayment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object",
          "properties" : {
            "nickName" : {
              "type" : "string"
            }
          }
        } ]
      },
      "CreditCardDetails" : {
        "description" : "This is used to define credit card for payment to the order. This credit card information would be saved to profile if saveCreditCard flag is passed as true in UserCheckoutPreferences in the input.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/PaymentDetail"
        }, {
          "type" : "object",
          "properties" : {
            "cardType" : {
              "description" : "This is used to define the card type for the credit card.",
              "type" : "string",
              "example" : "Visa"
            },
            "expirationMonth" : {
              "description" : "This is used to define the expiration month for the credit card. ExpirationMonth should always be numeric and is required if credit card is passed in input.",
              "type" : "string",
              "example" : "\"05\""
            },
            "expirationYear" : {
              "description" : "This is used to define the expiration year for the credit card. ExpirationYear should always be numeric and is required if credit card is passed in input.",
              "type" : "string",
              "example" : "\"2020\""
            },
            "cvv" : {
              "description" : "This is used to define CVV for the credit card. CVV should always be numeric and length would be depending on the card type.",
              "type" : "string",
              "example" : "\"737\""
            },
            "cardId" : {
              "description" : "This is used to define the card id for the credit card. This is used in case of existing user where credit card is already added to profile and then cardId is passed in input to place an order with that credit card. Credit card details should be passed instead of cardId if existing user wants to add new card while placing order.",
              "type" : "string"
            },
            "nickName" : {
              "description" : "This is used to define nick name for the credit card.",
              "type" : "string"
            },
            "issueNumber" : {
              "description" : "This is used to define the issue number in case of Maestro credit card.",
              "type" : "string"
            },
            "startMonth" : {
              "description" : "This is used to define start month in case of Maestro credit card.",
              "type" : "string"
            },
            "startYear" : {
              "description" : "This is used to define start year in case of Maestro credit card.",
              "type" : "string"
            },
            "numberOfInstallments" : {
              "description" : "This is used to define number of installment for credit card payment.",
              "type" : "integer",
              "format" : "int32"
            },
            "encryptedCreditCardNumber" : {
              "description" : "This is used to define encrypted credit card number which is used in case of bulk order request.",
              "type" : "string"
            },
            "encryptedExpirationMonth" : {
              "description" : "This is used to define encrypted expiration month for credit card which is used in case of bulk order request.",
              "type" : "string"
            },
            "encryptedExpirationYear" : {
              "description" : "This is used to define encrypted expiration year for credit card which is used in case of bulk order request.",
              "type" : "string"
            },
            "encryptedStartMonth" : {
              "description" : "This is used to define encrypted start month for credit card which is used in case of bulk order request.",
              "type" : "string"
            },
            "encryptedStartYear" : {
              "description" : "This is used to define encrypted start year for credit card which is used in case of bulk order request.",
              "type" : "string"
            },
            "encryptedCvv" : {
              "description" : "This is used to define encrypted CVV for credit card which is used in case of bulk order request.",
              "type" : "string"
            },
            "encryptedIssueNumber" : {
              "description" : "This is used to define encrypted issue number for credit card which is used in case of bulk order request.",
              "type" : "string"
            },
            "existingCard" : {
              "description" : "This is used to define if credit card is already defined on the profile which is used in case of bulk order request.",
              "type" : "boolean",
              "default" : false
            },
            "masterPassCheckout" : {
              "description" : "This is used to define if order is placed with masterpass payment method.",
              "type" : "boolean",
              "default" : false
            },
            "methodType" : {
              "type" : "string"
            },
            "cardNumber" : {
              "description" : "This is used to define masked credit card number.",
              "type" : "string"
            },
            "cardPermission" : {
              "$ref" : "https://api.swaggerhub.com/apis/Direct_Wines/PermissionsAPI/1.0.0#/components/schemas/PaymentPermissionInput"
            }
          },
          "required" : [ "cardType", "expirationMonth", "expirationYear", "cvv" ],
          "example" : {
            "billingAddress" : {
              "address" : {
                "type" : "UK",
                "postalCode" : "HP14 3NT",
                "houseNumber" : 23,
                "flatNumber" : "",
                "address1" : "Ferndale Close",
                "address2" : null,
                "city" : "Stokenchurch",
                "county" : "Bucks",
                "country" : "GB"
              },
              "contactInfo" : {
                "email" : "fatima.proctor@directwines.com",
                "companyName" : "Direct Wines",
                "dayPhoneNumber" : "0118 9347100"
              },
              "personalInfo" : {
                "salutation" : "Ms",
                "firstName" : "Fatima",
                "lastName" : "Proctor"
              }
            },
            "cardType" : "Visa",
            "cardNumber" : "4444333322221111",
            "expirationMonth" : 8.0,
            "expirationYear" : "2024",
            "cvv" : "737",
            "type" : "creditCard"
          }
        } ]
      },
      "CreditCard3DSDetails" : {
        "description" : "This is used to define credit card for payment to the order specifically for supporting 3DS2. This credit card information would be saved to profile if saveCreditCard flag is passed as  true in UserCheckoutPreferences in the input.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/CreditCardDetails"
        }, {
          "type" : "object",
          "properties" : {
            "browserDetails" : {
              "$ref" : "#/components/schemas/BrowserDetails"
            }
          },
          "required" : [ "browserDetails" ]
        } ]
      },
      "BrowserDetails" : {
        "description" : "This is used to define browser details which needs to be passed in case of 3DS details to be passed",
        "type" : "object",
        "properties" : {
          "userAgent" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "colorDepth" : {
            "type" : "integer"
          },
          "screenHeight" : {
            "type" : "integer"
          },
          "screenWidth" : {
            "type" : "integer"
          },
          "timeZoneOffset" : {
            "type" : "integer"
          },
          "javaEnabled" : {
            "type" : "boolean"
          }
        }
      }
    }
  }
}