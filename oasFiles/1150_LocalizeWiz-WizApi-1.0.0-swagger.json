{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "LocalizeWiz API",
    "version" : "1.0.0",
    "title" : "Realtime localization for mobile apps.",
    "contact" : {
      "name" : "LocalizeWiz Support",
      "email" : "support@localizewiz.com",
      "url" : "https://www.localizewiz.com/docs"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags" : [ {
    "name" : "admins",
    "description" : "Secured Admin-only calls"
  }, {
    "name" : "auth",
    "description" : "Authentication related requests"
  }, {
    "name" : "users",
    "description" : "Operations performed on users."
  }, {
    "name" : "workspaces",
    "description" : "Workspaces"
  }, {
    "name" : "projects",
    "description" : "Projects"
  }, {
    "name" : "languages",
    "description" : "Languages"
  }, {
    "name" : "billing",
    "description" : "billing"
  } ],
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/LocalizeWiz/WizApi/1.0.0"
  }, {
    "description" : "Development server",
    "url" : "https://dev.api.localizewiz.com"
  }, {
    "description" : "Production server",
    "url" : "https://api.localizewiz.com"
  } ],
  "security" : [ {
    "apiKey" : [ ]
  }, {
    "bearerAuth" : [ ]
  } ],
  "paths" : {
    "/auth/login" : {
      "post" : {
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "tags" : [ "auth" ],
        "summary" : "Log in",
        "operationId" : "login",
        "description" : "Logs a user into the service. Users are required to log in with an email and password. This returns an access token that can be used for future requests.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginRequest"
              }
            }
          },
          "description" : "Email and password of user"
        },
        "responses" : {
          "200" : {
            "description" : "User successfully logged in",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Authentication"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid email or password"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/auth/logout" : {
      "post" : {
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "tags" : [ "auth" ],
        "summary" : "Log a user out",
        "operationId" : "logout",
        "description" : "Invalidates a user's current logged in session.",
        "responses" : {
          "201" : {
            "description" : "Successfully logged out",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleMessageResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input, user invalid"
          },
          "409" : {
            "description" : "A user with this email already exists."
          }
        }
      }
    },
    "/auth/reset" : {
      "post" : {
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "tags" : [ "auth" ],
        "summary" : "Request a password reset",
        "operationId" : "reset",
        "description" : "Creates a request to reset the user's password.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordResetRequest"
              }
            }
          },
          "description" : "The information about the user who's password should be reset."
        },
        "responses" : {
          "201" : {
            "description" : "Request processed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleMessageResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input, user invalid"
          }
        }
      }
    },
    "/auth/reset/{id}" : {
      "get" : {
        "summary" : "Get password reset request",
        "operationId" : "getReset",
        "tags" : [ "auth" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/resetId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "applicatoin/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordResetResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "patch" : {
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "tags" : [ "auth" ],
        "summary" : "Reset password",
        "operationId" : "patchReset",
        "description" : "Resets the password for the user specified in the request body.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/resetId"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordResetRequestBody"
              }
            }
          },
          "description" : "The new password for this user"
        },
        "responses" : {
          "201" : {
            "description" : "Password successfully reset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleMessageResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input, user invalid"
          },
          "401" : {
            "description" : "Unauthorized: reset request already used"
          },
          "404" : {
            "description" : "Reset request not found"
          }
        }
      }
    },
    "/users" : {
      "post" : {
        "security" : [ {
          "apiKeyAuth" : [ ]
        } ],
        "tags" : [ "users" ],
        "summary" : "Create user",
        "operationId" : "createUser",
        "description" : "Creates a new user",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserWithoutId"
              }
            }
          },
          "description" : "The user to create"
        },
        "responses" : {
          "201" : {
            "description" : "User created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input, user invalid"
          },
          "409" : {
            "description" : "A user with this email already exists."
          }
        }
      },
      "get" : {
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ],
        "summary" : "Get user by id.",
        "operationId" : "getUser",
        "description" : "Retrieves the user with this id. For privacy reason, this call can only be made by the user with this id to return the full user object.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/userId"
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "401" : {
            "description" : "unauthorized"
          },
          "404" : {
            "description" : "user not found"
          }
        }
      }
    },
    "/users/{id}" : {
      "get" : {
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ],
        "summary" : "Get user by id.",
        "operationId" : "getUserById",
        "description" : "Retrieves the user with this id. For privacy reason, this call can only be made by the user with this id to return the full user object.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/userId"
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "401" : {
            "description" : "unauthorized"
          },
          "404" : {
            "description" : "user not found"
          }
        }
      },
      "patch" : {
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ],
        "summary" : "Updates the user with this id",
        "operationId" : "patchUser",
        "description" : "Updates the user with this id. The firstname and lastname of the user must be specified. The user's email address or profile picture can not be updated with this call. An access token must be specified for this call. An access token only gives access for a user to make this call on a specific user id.",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "required" : true,
          "description" : "id of the user to update. This id must match the id of the user making the call",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The updated user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserWithoutId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "user updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "404" : {
            "description" : "user not found"
          },
          "409" : {
            "description" : "an existing item already exists"
          }
        }
      }
    },
    "/users/{id}/profilePicture" : {
      "post" : {
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/userId"
        } ],
        "summary" : "Post profile picture",
        "description" : "Upload new profile picture for this user. This will replace any existing profile picture.",
        "requestBody" : {
          "description" : "The file to upload. Files must be in JPEG, PNG or GIF format and limited to 1 MB.",
          "required" : true,
          "content" : {
            "image/jpeg" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "profile picture set"
          },
          "400" : {
            "description" : "Bad request. Problem with the profile picture such us file format is invalid of the image is too large."
          }
        }
      },
      "delete" : {
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/userId"
        } ],
        "description" : "delete the user's profile picture",
        "responses" : {
          "200" : {
            "description" : "deleted"
          },
          "400" : {
            "description" : "bad request. the profile pictture does not exist."
          },
          "403" : {
            "description" : "forebidden"
          }
        }
      }
    },
    "/users/{id}/password" : {
      "post" : {
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ],
        "operationId" : "changePassword",
        "parameters" : [ {
          "$ref" : "#/components/parameters/userId"
        } ],
        "summary" : "Change password.",
        "description" : "Change this user's password. Password should be at least 8 characters long.",
        "requestBody" : {
          "description" : "JSON object containing the old password and new password.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChangePassword"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Password changed"
          },
          "400" : {
            "description" : "Bad request. There was a problem with either the `current` or `new` password parameter."
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/users/{id}/notifications" : {
      "get" : {
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ],
        "summary" : "Get pending notification for this user.",
        "operationId" : "getUserNotifications",
        "parameters" : [ {
          "$ref" : "#/components/parameters/userId"
        } ],
        "description" : "Get all the notifications for this workspace.",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Notification"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "language not found"
          }
        }
      }
    },
    "/users/{id}/invitations" : {
      "get" : {
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ],
        "summary" : "Get the users pending invitations to join other workspaces.",
        "operationId" : "getUserInvitations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/userId"
        } ],
        "description" : "Get all the pending invitations this user has.",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Invitation"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "language not found"
          }
        }
      }
    },
    "/languages" : {
      "get" : {
        "tags" : [ "languages" ],
        "summary" : "Get languages",
        "operationId" : "getLanguages",
        "description" : "Gets all languages matching query. Returns all the languages if no query parameters are specified.\n- in: query\n  name: code\n  description: The iso3 code for this languages\n  example: es\n  schema:\n    type: string\n",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Language"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "language not found"
          }
        }
      }
    },
    "/languages/{id}" : {
      "get" : {
        "tags" : [ "languages" ],
        "summary" : "Get language by id",
        "operationId" : "getLanguageById",
        "parameters" : [ {
          "$ref" : "#/components/parameters/languageId"
        } ],
        "responses" : {
          "200" : {
            "description" : "The matching language",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "language not found"
          }
        }
      }
    },
    "/workspaces" : {
      "post" : {
        "tags" : [ "workspaces" ],
        "summary" : "Create workspace",
        "operationId" : "createWorkspace",
        "description" : "Create a new workspace.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Workspace"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Workspace created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Workspace"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "get" : {
        "tags" : [ "workspaces" ],
        "summary" : "Get workspaces",
        "operationId" : "getWorkspaces",
        "description" : "Gets all the workspaces for this user.\n",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Workspace"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "language not found"
          }
        }
      }
    },
    "/workspaces/{id}" : {
      "get" : {
        "tags" : [ "workspaces" ],
        "summary" : "Get workspace by id",
        "operationId" : "getWorkspaceById",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The matching workspace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Workspace"
                }
              }
            }
          },
          "401" : {
            "description" : "Not authorized"
          },
          "404" : {
            "description" : "workspace not found"
          }
        }
      }
    },
    "/workspaces/{id}/projects" : {
      "get" : {
        "tags" : [ "workspaces" ],
        "summary" : "Get the projects in this workspace.",
        "operationId" : "getWorkspaceProjects",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "description" : "Get all the team members for this workspace.",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not authorized"
          }
        }
      }
    },
    "/workspaces/{id}/users" : {
      "get" : {
        "tags" : [ "workspaces" ],
        "summary" : "Get workspace team",
        "operationId" : "getWorkspaceUsers",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "description" : "Get all the team members for this workspace.",
        "responses" : {
          "200" : {
            "description" : "The list of members in this workspace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not authorized"
          }
        }
      }
    },
    "/workspaces/{id}/users/{userId}" : {
      "delete" : {
        "tags" : [ "workspaces" ],
        "summary" : "Delete workspace user",
        "operationId" : "deleteWorkspaceUser",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "userId",
          "description" : "The id of the user to remove",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "description" : "Get all the team members for this workspace.",
        "responses" : {
          "200" : {
            "description" : "The list of members in this workspace",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Not authorized"
          }
        }
      }
    },
    "/workspaces/{id}/invitations" : {
      "post" : {
        "tags" : [ "workspaces" ],
        "summary" : "Invite a new member to this workspace.",
        "operationId" : "createWorkspaceInvitation",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "description" : "Invite a new team member to this workspace. This call sends an invitation email to the user specified. Only make this request with a valid email address.",
        "requestBody" : {
          "description" : "The user to invite",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewInvitation"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Invitation"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not authorized"
          }
        }
      },
      "get" : {
        "tags" : [ "workspaces" ],
        "summary" : "Get pending invitations for this workspace.",
        "operationId" : "getWorkspaceInvitations",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "description" : "Get all the team members for this workspace.",
        "responses" : {
          "200" : {
            "description" : "The list of pending invitations for this workspace.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Invitation"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not authorized"
          }
        }
      }
    },
    "/workspaces/{id}/apiKey" : {
      "post" : {
        "tags" : [ "workspaces" ],
        "summary" : "Creates a new api key.",
        "operationId" : "resetApiKey",
        "description" : "Creates a new API key. Note: Workspaces can only have one active API key, thus, the current api key will stop working immediately.",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Workspace"
                }
              }
            }
          },
          "401" : {
            "description" : "Not authorized"
          }
        }
      }
    },
    "/workspaces/{id}/billing/payment" : {
      "post" : {
        "tags" : [ "workspaces" ],
        "operationId" : "addWorkspacePaymentMethod",
        "summary" : "Add payment method",
        "description" : "Add a new payment method. Payment information is collected securely by our payment partner Stripe (stripe.com). Payment information never touches our servers.",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Payment token returned from Stripe",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodToken"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Payment method added"
          },
          "400" : {
            "description" : "Bad request. Invalid input"
          },
          "401" : {
            "description" : "Unauthorized. This request can only be made by workspace admins. Admin authorization is requied."
          }
        }
      },
      "delete" : {
        "tags" : [ "workspaces" ],
        "operationId" : "deleteWorkspacePaymentMethod",
        "summary" : "Delete payment method",
        "description" : "Remove the payment method on file.",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment method deleted"
          },
          "401" : {
            "description" : "Unauthorized. This request can only be made by workspace admins. Admin authorization is requied."
          }
        }
      },
      "get" : {
        "tags" : [ "workspaces" ],
        "operationId" : "getWorkspacePaymentMethod",
        "summary" : "Get payment method",
        "description" : "Returns the current payment method on file for this workspace. Card info is obfuscated.",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment method found"
          },
          "404" : {
            "description" : "No payment method found"
          }
        }
      }
    },
    "/workspaces/{id}/billing/subscribe" : {
      "post" : {
        "tags" : [ "workspaces" ],
        "operationId" : "subscribeWorkspace",
        "summary" : "Subscribe workspace to payment plan",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Plan to subscribe to",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WorkspacePlanSubscription"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Ok. Workspace subscription successful"
          }
        }
      },
      "delete" : {
        "tags" : [ "workspaces" ],
        "operationId" : "unsubscribeWorkspace",
        "summary" : "Subscribe workspace to payment plan",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok. Workspace subscription successful"
          }
        }
      },
      "get" : {
        "tags" : [ "workspaces" ],
        "operationId" : "getWorkspaceSubscription",
        "summary" : "Subscribe workspace to payment plan",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the workspace",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok."
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "workspace not found"
          }
        }
      }
    },
    "/projects" : {
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create project",
        "operationId" : "createProject",
        "description" : "Creates a new project.",
        "requestBody" : {
          "description" : "Project to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Project"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Project created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input, object invalid"
          }
        }
      }
    },
    "/projects/{id}" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "retrieves a project by id",
        "operationId" : "getProjectById",
        "description" : "Returns the project with the matching id. All project details are returned.",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique id of the user to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The project matching this id.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "project not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete project",
        "operationId" : "deleteProjectById",
        "description" : "Deletes the prject with the given id.",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique id of the project to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project deleted"
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "project not found"
          }
        }
      }
    },
    "/projects/{id}/details" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "retrieves a project by id",
        "operationId" : "getProjectDetailsById",
        "description" : "Returns the project with extended details about the project, such as the files in the project, languages, and other information. All project details are returned.",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique id of the user to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The project matching this id.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/strings" : {
      "get" : {
        "security" : [ {
          "appId" : [ ]
        }, {
          "apiKey" : [ ]
        } ],
        "tags" : [ "projects" ],
        "summary" : "retrieves a project by id",
        "operationId" : "getProjectStringsById",
        "description" : "Returns the project with the matching id. All project details are returned.",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique id of the user to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Query to filter returned strings. Only return strings that contain this as a substring.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "skip",
          "description" : "number of records to skip for pagination",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "minimum" : 0
          }
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "maximum number of records to return",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0,
            "maximum" : 50
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/String"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "project not found"
          }
        }
      },
      "post" : {
        "security" : [ {
          "appId" : [ ]
        }, {
          "apiKey" : [ ]
        } ],
        "tags" : [ "projects" ],
        "summary" : "Adds a string to this project",
        "operationId" : "postProjectStringById",
        "description" : "Adds a new string to the list of strings in this project.",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique id of the user to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name is the unique identifier or key used to access this string in our SDKs.",
                    "example" : "button_title_click_here"
                  },
                  "value" : {
                    "type" : "string",
                    "description" : "The content to be localized.",
                    "example" : "Click Here"
                  },
                  "fileId" : {
                    "type" : "string",
                    "description" : "The id of the file in this project to add the new string to",
                    "example" : "4024024809932158256810007"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/String"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "project not found"
          }
        }
      }
    },
    "/projects/{id}/files" : {
      "get" : {
        "security" : [ {
          "appId" : [ ]
        }, {
          "apiKey" : [ ]
        } ],
        "operationId" : "getProjectFiles",
        "tags" : [ "projects" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique id of the project to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved list of files",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "project not found"
          }
        }
      },
      "post" : {
        "security" : [ {
          "appId" : [ ]
        }, {
          "apiKey" : [ ]
        } ],
        "operationId" : "createProjectfile",
        "tags" : [ "projects" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique id of the project to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "File successfully uploaded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/File"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "project not found"
          }
        }
      }
    },
    "/projects/{id}/strings/translations/{languageCode}" : {
      "get" : {
        "security" : [ {
          "apiKey" : [ ]
        } ],
        "operationId" : "getTranslations",
        "tags" : [ "projects" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique id of the project to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "languageCode",
          "description" : "The ISO code of the language to return translations for",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "fileId",
          "description" : "The id of the file to download",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "File successfully uploaded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StringList"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "project not found"
          }
        }
      }
    },
    "/projects/{id}/strings/download" : {
      "get" : {
        "security" : [ {
          "apiKey" : [ ]
        } ],
        "operationId" : "getStringsDownloadLink",
        "tags" : [ "projects" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The unique id of the project to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "languageId",
          "description" : "The id of the language to download",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "fileId",
          "description" : "The id of the file to download",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "File successfully uploaded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "name" : {
                      "description" : "The file name",
                      "type" : "string",
                      "example" : "Localizable.strings"
                    },
                    "url" : {
                      "description" : "The url to download the localized file from.",
                      "type" : "string",
                      "example" : "https://s3.aws.amazon.com/localizewiz/downloads/Localizable.strings"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "403" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "project not found"
          }
        }
      }
    },
    "/billing/plans" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get plans",
        "operationId" : "getPlans",
        "description" : "Gets all available billing plans.\n",
        "responses" : {
          "200" : {
            "description" : "The list of billing plans.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PlanList"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/billing/plans/{id}" : {
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get plan by id",
        "operationId" : "getPlanById",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "description" : "The id of the plan to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The matching plan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Plan"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "language not found"
          }
        }
      }
    },
    "/billing/plans/subscribe" : {
      "post" : {
        "tags" : [ "billing" ],
        "summary" : "Subscribe workspace to billing plan",
        "operationId" : "subscribeToPlan",
        "description" : "Subscribe to billing plan.\n",
        "requestBody" : {
          "description" : "THe workspace and plan Id",
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "workspaceId" : {
                    "type" : "string",
                    "example" : "248248294924981194191"
                  },
                  "planId" : {
                    "type" : "string",
                    "example" : "business_plan_59"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "This will subscribe the workspace to the plan specified."
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "Workspace or billing plan not found"
          }
        }
      }
    },
    "/billing/plans/unsubscribe" : {
      "post" : {
        "tags" : [ "billing" ],
        "summary" : "Cancels any existing workspace subscription.",
        "operationId" : "cancelSubscription",
        "description" : "Subscribe to billing plan.",
        "requestBody" : {
          "description" : "The workspace Id",
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "workspaceId" : {
                    "type" : "string",
                    "example" : "248248294924981194191"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The list of billing plans."
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "401" : {
            "description" : "Not authorized"
          },
          "404" : {
            "description" : "Workspace not found"
          }
        }
      }
    },
    "/billing/payment/" : {
      "post" : {
        "tags" : [ "billing" ],
        "summary" : "Add Payment method",
        "operationId" : "addPaymentMethod",
        "description" : "Add a new payment method to this workspace.",
        "responses" : {
          "200" : {
            "description" : "The list of billing plans."
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "401" : {
            "description" : "Not authorized to add a payment method."
          },
          "404" : {
            "description" : "Workspace not found."
          }
        }
      },
      "get" : {
        "tags" : [ "billing" ],
        "summary" : "Get Payment method",
        "operationId" : "getPaymentMethod",
        "description" : "Get the payment method on file for this workspace.",
        "responses" : {
          "200" : {
            "description" : "Returns information about the payment method on file.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PlanList"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "Payment method not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "billing" ],
        "summary" : "Remove payment method",
        "operationId" : "removePaymentMethod",
        "description" : "Remove exsiting payment.",
        "parameters" : [ {
          "in" : "query",
          "name" : "workspaceId",
          "description" : "The id of the workspace to delete payment method for.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "example" : "4082025025802580250252"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment method successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "message" : {
                      "type" : "string",
                      "example" : "The payment method has been deleted."
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request."
          },
          "401" : {
            "description" : "Not authorized"
          },
          "404" : {
            "description" : "Workspace not found"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "User" : {
        "type" : "object",
        "required" : [ "id", "firstname", "lastname", "email" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "firstname" : {
            "type" : "string",
            "example" : "John"
          },
          "lastname" : {
            "type" : "string",
            "example" : "Smith"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "john.smith@mail.com"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-02-29T09:12:33.001Z"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-07-11T17:16:33.004Z"
          }
        }
      },
      "SimpleMessageResponse" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Action was completed successfully"
          }
        }
      },
      "UserWithoutId" : {
        "type" : "object",
        "description" : "User object",
        "required" : [ "firstname", "lastname", "email" ],
        "properties" : {
          "firstname" : {
            "type" : "string",
            "example" : "John"
          },
          "lastname" : {
            "type" : "string",
            "example" : "Smith"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "john.smith@mail.com"
          }
        }
      },
      "Workspace" : {
        "type" : "object",
        "description" : "A workspace defines a unit such as an organization, a team or a department with an organization. Teams, projects and billing is scoped by the workspace.",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "name" : {
            "type" : "string",
            "example" : "LocalizeWiz Inc"
          },
          "slug" : {
            "type" : "string",
            "example" : "localizewiz-inc",
            "description" : "This is used to identify the workspace in URLs"
          },
          "ownerId" : {
            "type" : "string",
            "description" : "The user id of the owner of this workspace."
          },
          "billingEmail" : {
            "type" : "string",
            "format" : "email",
            "example" : "john.smith@mail.com"
          },
          "billingNote" : {
            "type" : "string",
            "description" : "A note that is attached to all invoices associated with this workspace. This can be an adress, phone number or any other pertinent info workspace admins deem important to add to their invoices."
          },
          "created" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-02-29T09:12:33.001Z"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-07-11T17:16:33.004Z"
          }
        }
      },
      "Project" : {
        "type" : "object",
        "description" : "Represents a project. A project contains a set of strings that can be translated into other languages.",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "name" : {
            "type" : "string",
            "example" : "Jolly Birds iOS"
          },
          "description" : {
            "type" : "string",
            "example" : "Jolly birds iOS app"
          },
          "languageId" : {
            "type" : "string",
            "format" : "email",
            "description" : "The base language for the project. Each project has a base language that the content is created in. This language can then be translated into other languages."
          },
          "userId" : {
            "type" : "string",
            "description" : "The id of the user that created this project."
          },
          "workspaceId" : {
            "type" : "string",
            "description" : "The id of the workspace this project belongs to."
          },
          "platform" : {
            "type" : "string",
            "example" : "iOS"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-02-29T09:12:33.001Z"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-07-11T17:16:33.004Z"
          }
        }
      },
      "Language" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "isoCode" : {
            "type" : "string",
            "example" : "es"
          },
          "englishName" : {
            "type" : "string",
            "example" : "Spanish"
          },
          "localName" : {
            "type" : "string",
            "example" : "Español",
            "description" : "The local name of the language when written in the language."
          },
          "flagUrl" : {
            "type" : "string",
            "format" : "uri",
            "example" : "https://s3.amazonaws.com/images.localizewiz.com/flags/png/es.png",
            "description" : "This is usually a url to the flag of the country where this language is predominantly spoken or associated with."
          },
          "flagUrl2" : {
            "type" : "string",
            "format" : "uri",
            "example" : "https://s3.amazonaws.com/images.localizewiz.com/flags/png/es.png",
            "description" : "Alternate flag url."
          },
          "countryCode" : {
            "type" : "string",
            "example" : "JP",
            "description" : "The iso country code for the country where this language is predominantly spoken."
          }
        }
      },
      "String" : {
        "type" : "object",
        "description" : "Represents a single unit of translatable text. This can be word, a sentence or a paragraph.",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "name" : {
            "type" : "string",
            "description" : "The key for this string",
            "example" : "navigation_title"
          },
          "value" : {
            "type" : "string",
            "description" : "The value for this string. This is the text to be translated.",
            "example" : "navigation_title"
          },
          "autoTranslation" : {
            "type" : "string",
            "description" : "The automatic translation for this strings orignal content (`value`)."
          },
          "humanTranslation" : {
            "type" : "string",
            "description" : "Human modified translation. This key overrides the `autoTranslation` field whenever present."
          },
          "comments" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "string"
          },
          "wordCount" : {
            "type" : "integer"
          },
          "translatable" : {
            "type" : "boolean"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-02-29T09:12:33.001Z"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-07-11T17:16:33.004Z"
          }
        }
      },
      "StringList" : {
        "type" : "object",
        "description" : "A list of strings",
        "properties" : {
          "strings" : {
            "items" : {
              "$ref" : "#/components/schemas/String"
            }
          }
        }
      },
      "File" : {
        "type" : "object",
        "description" : "Represents a localization strings file within a project in LocalizeWiz.",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "20373197367019228"
          },
          "name" : {
            "type" : "string",
            "example" : "strings.xml"
          },
          "path" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "example" : "xml",
            "description" : "The type of this file. All supported file types are option."
          },
          "s3Key" : {
            "type" : "string"
          },
          "encoding" : {
            "type" : "string",
            "example" : "7bit"
          },
          "contentType" : {
            "type" : "string",
            "example" : "text/xml"
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "example" : "2019-10-30T01:40:30.103Z"
          },
          "updated" : {
            "type" : "string",
            "format" : "date",
            "example" : "2019-10-30T01:40:30.103Z"
          },
          "status" : {
            "type" : "string",
            "default" : "uploaded",
            "description" : "The upload status of this file."
          },
          "metadata" : {
            "type" : "object",
            "description" : "Arbitrary metadata about this file. This field is mostly unused."
          },
          "projectId" : {
            "type" : "string",
            "example" : "20372952948147931",
            "description" : "The id for this project"
          },
          "stringsCount" : {
            "type" : "integer",
            "example" : 34,
            "description" : "The number or strings in this file"
          }
        }
      },
      "NewInvitation" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "firstname" : {
            "type" : "string",
            "example" : "John"
          },
          "lastname" : {
            "type" : "string",
            "example" : "Smith"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "john.smith@mail.com"
          },
          "isAdmin" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "Invitation" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "firstname" : {
            "type" : "string",
            "example" : "John"
          },
          "lastname" : {
            "type" : "string",
            "example" : "smith"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "john.smith@mail.com"
          },
          "isAdmin" : {
            "type" : "boolean",
            "example" : true
          },
          "referrerId" : {
            "type" : "string",
            "description" : "The user id of user that created this invitation"
          },
          "workspaceId" : {
            "type" : "string",
            "description" : "The id of the workspace this invitation belongs to."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of this invitation. Possible values are pending, accepted, declined."
          },
          "created" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-02-29T09:12:33.001Z"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-07-11T17:16:33.004Z"
          }
        }
      },
      "Notification" : {
        "type" : "object",
        "description" : "An event a user can be notified about, such as when a user has a pending invitation.",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "userId" : {
            "type" : "string",
            "description" : "The user this notification pertains to.",
            "example" : "John"
          },
          "type" : {
            "type" : "string",
            "example" : "invitation"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-08-11T09:12:33.001Z"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-09-03T09:12:33.001Z"
          },
          "status" : {
            "type" : "string",
            "example" : "pending",
            "default" : "pending",
            "description" : "The status of this notification. Possible values are pending, accepted, declined"
          },
          "metadata" : {
            "type" : "object",
            "format" : "json"
          }
        }
      },
      "PlanList" : {
        "type" : "object",
        "description" : "A list of plans",
        "properties" : {
          "plans" : {
            "items" : {
              "$ref" : "#/components/schemas/Plan"
            }
          }
        }
      },
      "Plan" : {
        "type" : "object",
        "description" : "Each organization or workspace is signed on to a given plan. The plan determines the limits for projects in the workspace and across the workspace as a whole.",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "planId" : {
            "type" : "string",
            "example" : "John"
          },
          "name" : {
            "type" : "string",
            "example" : "Professional Plan"
          },
          "price" : {
            "type" : "integer",
            "example" : 29
          },
          "tier" : {
            "type" : "integer",
            "example" : 0,
            "description" : "The tier of the plan. Tiers are from 0 - free plan to 5 - Enterprise plan."
          },
          "description" : {
            "type" : "string",
            "example" : "The startup plan is for indie developers, startups and small teams."
          },
          "projectLimit" : {
            "type" : "integer",
            "description" : "The maximum number of projects that can be created when signed on to this plan."
          },
          "stringLimit" : {
            "type" : "integer",
            "description" : "The maximum total number of strings this plan can host across all projects."
          },
          "languageLimit" : {
            "type" : "integer",
            "description" : "The maximum number of languages that can be added to a project under this plan."
          },
          "created" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-02-29T09:12:33.001Z"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-07-11T17:16:33.004Z"
          }
        }
      },
      "PaymentMethodToken" : {
        "type" : "object",
        "description" : "Payment token returned from stripe.com",
        "properties" : {
          "token" : {
            "type" : "string",
            "example" : "a840280280a0ha0a8g0a80"
          }
        }
      },
      "ChangePassword" : {
        "type" : "object",
        "description" : "Contains the current and new password.",
        "properties" : {
          "current" : {
            "type" : "string",
            "format" : "password",
            "example" : "MyPassword499!"
          },
          "new" : {
            "type" : "string",
            "format" : "password",
            "example" : "MyNewpassword157!"
          }
        }
      },
      "PasswordResetRequest" : {
        "type" : "object",
        "description" : "Email for password reset",
        "properties" : {
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "john.smith@mycompany.com"
          }
        }
      },
      "PasswordResetRequestBody" : {
        "type" : "object",
        "description" : "Email for password reset",
        "properties" : {
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "john.smith@mycompany.com"
          },
          "password" : {
            "type" : "string",
            "example" : "MyLongPassword15!"
          }
        }
      },
      "PasswordResetResponse" : {
        "type" : "object",
        "description" : "Password reset response",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "62198351168275458"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "john@mycompany.com"
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "example" : "2019-12-26T18:39:36.970Z"
          },
          "expiry" : {
            "type" : "string",
            "format" : "date",
            "example" : "2020-01-25T18:39:36.970Z"
          },
          "activated" : {
            "type" : "string",
            "format" : "date"
          }
        }
      },
      "LoginRequest" : {
        "type" : "object",
        "description" : "Email and password for logging in.",
        "properties" : {
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "john.smith@mycompany.com"
          },
          "password" : {
            "type" : "string",
            "format" : "password",
            "example" : "MySecurePassword157!"
          }
        }
      },
      "Authentication" : {
        "type" : "object",
        "description" : "Authentication object.",
        "properties" : {
          "token" : {
            "type" : "string",
            "format" : "hex",
            "example" : "3a88918048bd543b708a2171ee0ee06a614abbea11102c9b"
          },
          "created" : {
            "type" : "string",
            "format" : "date",
            "example" : "2019-12-29T01:12:12.643Z"
          },
          "expiry" : {
            "type" : "string",
            "format" : "date",
            "description" : "Expiry is three months from creation date",
            "example" : "2019-12-29T01:12:12.643Z"
          },
          "type" : {
            "type" : "string",
            "example" : "Bearer"
          }
        }
      },
      "WorkspacePlanSubscription" : {
        "type" : "object",
        "description" : "Workspace subscription",
        "properties" : {
          "planId" : {
            "type" : "string",
            "example" : "free-plan-0"
          }
        }
      }
    },
    "parameters" : {
      "userId" : {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The id of this user",
        "example" : 408124204820482042084022425460680482,
        "schema" : {
          "type" : "string"
        }
      },
      "workspaceId" : {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The id of this workspace",
        "schema" : {
          "type" : "string"
        }
      },
      "projectId" : {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The id of this project",
        "schema" : {
          "type" : "string"
        }
      },
      "languageId" : {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The id of the language",
        "schema" : {
          "type" : "string"
        }
      },
      "stringId" : {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The id of this string",
        "schema" : {
          "type" : "string"
        }
      },
      "invitationId" : {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The id of this invitation",
        "schema" : {
          "type" : "string"
        }
      },
      "resetId" : {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The id for a password reset request",
        "example" : 28058252020508670777464210386,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "description" : "authenticated users receive an access token which can be used to update the user object. This **must be used together with an `apiKey`."
      },
      "apiKeyAuth" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "x-api-key",
        "description" : "An `apiKey` is required to make requests to the Wiz Api, except for when using an `appId` in one of our native app SDKs. If you do not have an apiKey, use 420fa420820402422042 for testing."
      },
      "appId" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "x-app-id",
        "description" : "This field must be specified when using our iOS or Android SDK. If you do not have an appId, get one when you sign up on https://wiz.localizewiz.com"
      }
    }
  }
}