openapi: 3.0.1
info:
  title: PAH.Retail.Store.Stock.WebAPI
  description: An API for all Pets@Home store stock operations.
  contact:
    name: Gordon Gillespie
    email: gordon.gillespie@aptos.com
  version: '1.4'
paths:
  /AptosStock/Adjustments/AdjustmentReasons:
    get:
      tags:
        - Adjustments
      summary: Retrieves List of Adjustment Reason Details
      description: "Sample request:\r\n    GET /AdjustmentReasons"
      responses:
        '200':
          description: Adjustment Reason List available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjustmentReason'
        '400':
          description: Unable to identify Adjustment Reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No Adjustment Reason information was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/Adjustments/AdjustmentReasonGroups:
    get:
      tags:
        - Adjustments
      summary: Retrieves List of Adjustment Reason  Group Details
      description: "Sample request:\r\n    GET /AdjustmentReasonGroups"
      responses:
        '200':
          description: Adjustment Reason Groups List available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjustmentGroups'
        '400':
          description: Unable to identify Adjustment Reason Groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No Adjustment Reason Groups  information was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/Adjustments/ProcessAdjustment:
    post:
      tags:
        - Adjustments
      summary: Adds Adjustment to the Item with reason and store no
      description: "Sample request:\r\n    POST /ProcessAdjustment"
      requestBody:
        description: Details of the adjustment to be performed for the item of the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Adjustment'
          text/json:
            schema:
              $ref: '#/components/schemas/Adjustment'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Adjustment'
      responses:
        '200':
          description: Adjust updated in System
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '400':
          description: Unable to identify Adjustment Types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No stock information for the item was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/CheckAndCorrect/ItemInfo:
    get:
      tags:
        - CheckAndCorrect
      summary: Retrieves Item Information for CheckCorrect
      description: "Sample request:\r\n    GET /ItemInfo/storeNo=60?ItemID=100002"
      parameters:
        - name: storeNo
          in: query
          description: Store No to get the details of the item of the store
          schema:
            type: integer
            format: int32
        - name: itemID
          in: query
          description: Item ID / Barcode / Item No to get the details of the item.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Item Info found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemInfo'
        '400':
          description: Unable to identify Item Information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No item Information found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/CheckAndCorrect/UpdateCurrentQuantity:
    patch:
      tags:
        - CheckAndCorrect
      summary: Updates Current Stock Quantity of the Item
      description: "Sample request:\r\n    PATCH /UpdateCurrentQuantity/60?itemNo=10002&amp;currentQuantity=10&amp;operatorNo=9999&amp;isGapCheck=False"
      parameters:
        - name: storeNo
          in: query
          description: Store number of the item to update
          schema:
            type: integer
            format: int32
        - name: itemNo
          in: query
          description: Item number to update the quantity
          schema:
            type: integer
            format: int32
        - name: currentQuantity
          in: query
          description: Add current quantity to update
          schema:
            type: integer
            format: int32
        - name: operatorNo
          in: query
          description: Operator Number
          schema:
            type: integer
            format: int32
        - name: isGapCheck
          in: query
          description: Send gap check flag
          schema:
            type: boolean
      responses:
        '200':
          description: Current Quantity Updated
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '400':
          description: Unable to Update Current Quantity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Unable to Update Current Quantity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/CheckAndCorrect/UpdateMinStockQuantity:
    patch:
      tags:
        - CheckAndCorrect
      summary: Updates Minimum Stock Quantity of of the Item
      description: "Sample request:\r\n    PATCH /UpdateMinStockQuantity/60?itemNo=10002&amp;minStock=10&amp;operatorNo=9999"
      parameters:
        - name: storeNo
          in: query
          description: Store number of the item to update
          schema:
            type: integer
            format: int32
        - name: itemNo
          in: query
          description: Item number to update the quantity
          schema:
            type: integer
            format: int32
        - name: minStock
          in: query
          description: Add Min stock quantity to update
          schema:
            type: integer
            format: int32
        - name: operatorNo
          in: query
          description: Operator Number
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Minimum Stock Quantity Updated
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '400':
          description: Unable to Minimum Stock Quantity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Unable to Minimum Stock Quantity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DeliveryReceiving/StartReceiving:
    patch:
      tags:
        - DeliveryReceiving
      summary: "StartReceiving: Validate the pallet Number and Update the Pallet delivery receiving status.\r\n1. Validate Pallet Number:\r\nIf Valid: Process with delivery receiving and Update status from OPEN to PENDING status\r\nIf In-Valid: Invalid pallet Number. Please enter correct pallet details"
      description: "Sample request:\r\n    PATCH /StartReceiving/123456?storeNo=60"
      parameters:
        - name: palletNo
          in: query
          description: Pallet Number to validate for the store
          schema:
            type: string
        - name: storeNo
          in: query
          description: Store No to check for the pallet number for a particular store
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: >-
            Boolean value if the pallet details available : True if valid; False
            if invalid
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DeliveryReceiving/BeginStocking:
    patch:
      tags:
        - DeliveryReceiving
      summary: "BeginStocking: \r\n1. Check Restocking status. \r\nTrue : Already stocking in process and cannot proceed.\r\nFalse: Restocking not in process. Begin Stocking.\r\n2. If Restocking Status= False; Restocking can be processed. Updates the Restocking status to True."
      description: "Sample request:\r\n    PATCH /BeginStocking/60"
      parameters:
        - name: storeNo
          in: query
          description: Store No to check for the Restocking status of store
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: "String response with status: \r\n             Stocking Begins : If the stock can be started.\r\n             Re-Stocking already in process. Cannot start new ReStocking: If the stocking is already in process."
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DeliveryReceiving/DeliveryComplete:
    patch:
      tags:
        - DeliveryReceiving
      summary: "DeliveryComplete: \r\n1. Update Delivery Complete Action. - Closed\r\n2. Update Re-Stocking Status to False."
      description: "Sample request:\r\n    PATCH /DeliveryComplete/60"
      parameters:
        - name: storeNo
          in: query
          description: Store No to check for the Restocking status of store
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: "Delivery Completed: If delivery is sucessfully completed. \r\n            Unable to Complete Delivery: If delivery not able to process"
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/NextTakingNumber:
    get:
      tags:
        - DepartmentCounts
      summary: Retrieves Next Taking Number
      description: "Sample request:\r\n    GET /NextTakingNumber/60"
      parameters:
        - name: storeNo
          in: query
          description: Get Next taking number of the store associated
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Next Taking number retrieved
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Unable to identify nexttaking Number.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No taking information for the next taking  was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/Taking:
    get:
      tags:
        - DepartmentCounts
      summary: Retrieves current Taking
      description: "Sample request:\r\n    GET /Taking/60?nextTakingNumber=1234568"
      parameters:
        - name: storeNo
          in: query
          description: Store Number to retrieve the taking
          schema:
            type: integer
            format: int32
        - name: NextTakingNumber
          in: query
          description: Retrieve the taking of the taking number
          schema:
            type: string
      responses:
        '200':
          description: Next Taking number retrieved
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Unable to identify Next Taking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No information for the next taking  was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/StoreTakings:
    get:
      tags:
        - DepartmentCounts
      summary: Retrieves Store Takings based on the status of the Taking
      description: "Sample request:\r\n    GET /StoreTakings/60?statusCode=OPEN"
      parameters:
        - name: storeNo
          in: query
          description: Store Number to get the Store takings
          schema:
            type: integer
            format: int32
        - name: StatusCode
          in: query
          description: >-
            Status to filter the store takings: OPEN: Open of the count / CLSD:
            Closed / FCCM: Fisrt Count in process/ LCCM: Last Count in process
          schema:
            type: string
      responses:
        '200':
          description: Store taking List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Takings'
        '400':
          description: Unable to identify Store taking List.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No information for the store taking list was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/CheckLatestTakingStatus:
    get:
      tags:
        - DepartmentCounts
      summary: Retrieves Status for Latest taking
      description: "Sample request:\r\n    GET /CheckLatestTakingStatus/60"
      parameters:
        - name: storeNo
          in: query
          description: Store number to check the latest taking status
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Status for Latest taking
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Unable to identify latest taking Status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No information for the latest taking status was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/CheckRestockingStatus:
    get:
      tags:
        - DepartmentCounts
      summary: Retrieves Restocking Status
      description: "Sample request:\r\n    GET /CheckRestockingStatus/60"
      parameters:
        - name: storeNo
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Restocking Status
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Unable to identify Restocking Status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No information for the Restocking Status was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/TakingItems:
    get:
      tags:
        - DepartmentCounts
      summary: Retrieves Takings items
      description: "Sample request:\r\n    GET /TakingItems/60?takingID=57"
      parameters:
        - name: storeNo
          in: query
          description: ''
          schema:
            type: integer
            format: int32
        - name: takingId
          in: query
          description: ''
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Taking Items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TakingItems'
        '400':
          description: Unable to identify Taking items List.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No information for the Taking items list was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/ProcessTakingFirstCountSave:
    post:
      tags:
        - DepartmentCounts
      summary: Process the takings First Count Save Action
      description: "Sample request:\r\n    POST /ProcessTakingFirstCountSave"
      requestBody:
        description: >-
          Takings contains the taking that will be submitted along with the
          taking items in the taking. Below are the paramters to send in the
          request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
          text/json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
      responses:
        '200':
          description: Adjust updated in System
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Unable to update the taking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No taking status updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/ProcessTakingFistCountSubmit:
    patch:
      tags:
        - DepartmentCounts
      summary: Process the First Count Submit Action
      description: "Sample request:\r\n    POST /ProcessTakingFirstCountSubmit"
      requestBody:
        description: >-
          Takings contains the taking that will be submitted along with the
          taking items in the taking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
          text/json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
      responses:
        '200':
          description: Adjust updated in System
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Unable to update taking details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No taking information for the item was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/ProcessTakingSecondCountSave:
    patch:
      tags:
        - DepartmentCounts
      summary: Process the Second Count Save Action
      description: "Sample request:\r\n    POST /ProcessTakingSecondCountSave"
      requestBody:
        description: >-
          Takings contains the taking that will be submitted along with the
          taking items in the taking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
          text/json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
      responses:
        '200':
          description: Adjust updated in System
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Unable to identify Taking details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No taking information for the item was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/ProcessTakingSecondCountSubmit:
    patch:
      tags:
        - DepartmentCounts
      summary: >-
        Process the Second Count Submit Action: The final LatestQuantity
        (cumulative) entered will be updated as the current stock
      description: "Sample request:\r\n    POST /ProcessTakingSecondCountSubmit"
      requestBody:
        description: >-
          Takings contains the taking that will be submitted along with the
          taking items in the taking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
          text/json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
      responses:
        '200':
          description: Adjust updated in System
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Unable to identify Taking details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No Taking  information for the item was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/DepartmentCounts/CancelTaking:
    patch:
      tags:
        - DepartmentCounts
      summary: >-
        Process the Cancel Taking: The taking details will be submitted to
        cancel the taking from any status
      description: "Sample request:\r\n    POST /CancelTaking"
      requestBody:
        description: Takings contains the taking that will be submitted along
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
          text/json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProcessTaking'
      responses:
        '200':
          description: Taking Cancelled successfully
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Unable to update taking status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No Taking details identified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /error:
    get:
      tags:
        - Error
      responses:
        '200':
          description: Success
  '/AptosStock/ItemLocate/{itemId}':
    get:
      tags:
        - ItemLocate
      summary: Retrieves stock information for an item.
      description: "Sample request:\r\n    GET /ItemLocate/100002?storeNo=60"
      parameters:
        - name: itemId
          in: path
          description: The ItemId to get the Item Details
          required: true
          schema:
            type: integer
            format: int32
        - name: storeNo
          in: query
          description: The Store No to get the Item Details
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Stock information for the item was found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockItem'
        '400':
          description: No ItemId was supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No stock information for the item was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/ItemLocate/StockItems:
    get:
      tags:
        - ItemLocate
      summary: Retrieves Stock Items based on the search
      description: "Sample request:\r\n    GET /StockItems/1000?itemBarcode=1000002&amp;itemDescription=cold&amp;itemDeptNo=800&amp;maxResult=10"
      parameters:
        - name: itemNo
          in: query
          description: The Item No to get the Item Details
          schema:
            type: string
        - name: itemBarcode
          in: query
          description: The Item Barcode to get the Item Details
          schema:
            type: string
        - name: itemDescription
          in: query
          description: The Item Description to get the Item Details
          schema:
            type: string
        - name: itemDeptNo
          in: query
          description: The Item department No to get the Item Details
          schema:
            type: string
        - name: maxResult
          in: query
          description: Count to limit the results returned
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Stock information for the item was found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockItem'
        '400':
          description: No ItemId was supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No stock information for the item was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/ItemLocate/Departments:
    get:
      tags:
        - ItemLocate
      summary: Retrieves Departments
      description: "Sample request:\r\n    GET /Departments"
      responses:
        '200':
          description: Departments information for the item was found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DepartmentDetails'
        '400':
          description: No Deparment was available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: No Department information for the item was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/Login/authenticate:
    post:
      tags:
        - Login
      summary: Authenticates a Store6 operator.
      description: "Sample request:\r\n    POST /Login/authenticate\r\n    {\r\n        \"Login\": \"1234\",\r\n        \"StoreNumber\": 9999,\r\n        \"Password\": \"11111111\"\r\n    }"
      requestBody:
        description: A Store6 operator for a specific store.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          text/json:
            schema:
              $ref: '#/components/schemas/User'
          application/*+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: "The user is authenticated and a token is returned. \r\n            Pass the token in the authorisation header of other requests. The token expires after a configurable period."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The Username or password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /AptosStock/Store:
    post:
      tags:
        - Store
      summary: Retrieves Store6 store information for the specified ip address.
      description: "Sample request:\r\n    POST /Store\r\n    {\r\n        \"ipAddress\": \"10.10.137.101\"\r\n    }"
      requestBody:
        description: A Store object with the IpAddress property populated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
          text/json:
            schema:
              $ref: '#/components/schemas/Store'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Store'
      responses:
        '200':
          description: Store information for the ip address was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          description: No ip address was supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: The store was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    AdjustmentReason:
      type: object
      properties:
        adjustmentReasonID:
          type: integer
          description: The Id for Adjustment
          format: int32
          example: 1
        adjustmentReasonName:
          type: string
          description: The Reason for Adjustment.
          nullable: true
          example: Usage
        adjustmentReasonGroupName:
          type: string
          description: The Adjustment reason Group name
          nullable: true
          example: USAGE_grouP
        adjustmentReasonCode:
          type: string
          description: The Reason Code for Adjustment.
          nullable: true
          example: '30001'
        divisionNumber:
          type: integer
          description: The Division Number
          format: int32
          example: 1
      additionalProperties: false
      description: Contains details of a Adjustment Reason.
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
        extensions:
          type: object
          additionalProperties:
            type: object
            additionalProperties: false
          nullable: true
          readOnly: true
      additionalProperties: false
    AdjustmentGroups:
      type: object
      properties:
        adjustmenGroupID:
          type: integer
          description: The Id for Adjustment
          format: int32
          example: 1
        adjustmentGroupName:
          type: string
          description: The Reason for Adjustment.
          nullable: true
          example: USAGE_GROUP
        adjustmentGroupDescription:
          type: string
          description: The Adjustment reason Group name
          nullable: true
          example: Usage
      additionalProperties: false
      description: Contains list of all Adjustment Reasons Group
    Operator:
      type: object
      properties:
        operatorLogin:
          type: string
          description: The Operator Login.
          nullable: true
          example: '9999'
        operatorNumber:
          type: integer
          description: The Operator Number
          format: int32
          example: 9999
        workstation:
          type: integer
          description: The Operator Workstation
          format: int32
          example: 1
      additionalProperties: false
      description: 'Contains details of a Store Operator Login, Number, Workstaion'
    Adjustment:
      type: object
      properties:
        itemNo:
          type: integer
          description: The Item No for adjustment
          format: int32
          example: 100002
        adjustmentReasonID:
          type: integer
          description: The Adjustment Reason ID
          format: int32
          example: 12
        adjustmentReasonCode:
          type: string
          description: The Adjustment Reason Code
          nullable: true
          example: '2001'
        adjustmentQuantity:
          type: integer
          description: The Quantity for Adjustment
          format: int32
          example: 10
        storeNo:
          type: integer
          description: The Store No for Item for Adjustment
          format: int32
          example: 60
        divisionNumber:
          type: integer
          description: The Division Number of item
          format: int32
          example: 1
        operatorDetails:
          $ref: '#/components/schemas/Operator'
      additionalProperties: false
      description: Contains Product stock adjustment with a adjustment type and reason
    ItemInfo:
      type: object
      properties:
        itemID:
          type: integer
          description: The Item ID
          format: int32
        itemDescription:
          type: string
          description: item description
          nullable: true
        minStock:
          type: integer
          description: Min Stock of the Item
          format: int32
        lastFourWeeksCount:
          type: integer
          description: last 4 weeks sale of item by quantity
          format: int32
        currentStock:
          type: number
          description: Current Item stock in system
          format: double
        outerOnOrder:
          type: integer
          description: Outers (packs) on order
          format: int32
        packSize:
          type: integer
          description: Packet Size
          format: int32
        outerToOrder:
          type: integer
          description: Outers (packs) to order
          format: int32
        orderable:
          type: boolean
          description: Product is orderable or not
        masterItemNo:
          type: string
          description: Master item No
          nullable: true
        minStockQuantityEditable:
          type: boolean
          description: The Min Stock quantity update flag
        currentStockQuantityEditable:
          type: boolean
          description: The Current stock quantity update flag
      additionalProperties: false
      description: Contains Product Details
    Takings:
      type: object
      properties:
        takingID:
          type: integer
          description: The Taking ID
          format: int32
        storeNumber:
          type: integer
          description: The Store Number
          format: int32
          example: 60
        number:
          type: string
          description: The Taking Number
          nullable: true
          example: '8880006000042'
        statusCode:
          type: string
          description: 'The Status code of taking: Not required / Optional'
          nullable: true
        beginDateTime:
          type: string
          description: The Begin Date Time
          format: date-time
          example: '2019-12-09T04:45:30.0000000'
        endDateTime:
          type: string
          description: The End date Time
          format: date-time
          example: '2019-12-09T05:02:08.0000000'
        operatorNumber:
          type: integer
          description: The Operator Number
          format: int32
          example: 9999
        inventoryFlag:
          type: integer
          description: The Inventory Flag
          format: int32
          example: 0
      additionalProperties: false
      description: Contains details of a List of takings of a store
    TakingItems:
      type: object
      properties:
        lineNumber:
          type: integer
          description: >-
            The LineNumber : Not required in 1st count save posting; Will
            require in rest 3 other actions.
          format: int32
          example: 1
        itemID:
          type: integer
          description: The item ID
          format: int32
          example: 100002
        itemNumber:
          type: string
          description: The item number
          nullable: true
          example: '100002'
        posNumber:
          type: string
          description: The item POS number
          nullable: true
          example: '100002'
        divisionNumber:
          type: integer
          description: The Division Number of Item
          format: int32
          nullable: true
          example: 1
        operatorNumber:
          type: integer
          description: The Operator Number
          format: int32
          example: 9999
        expectedQuantity:
          type: number
          description: The ExpectedQuantity
          format: double
          example: 20
        firstCountQuantity:
          type: number
          description: The FirstCountQuantity
          format: double
        secondCountQuantity:
          type: number
          description: The SecondCountQuantity
          format: double
        lastCountQuantity:
          type: number
          description: The item LastCountQuantity
          format: double
        statusCode:
          type: string
          description: The StatusCode
          nullable: true
          example: 'The Status code of taking: Not required / Optional'
      additionalProperties: false
      description: Contains List of Taking Items
    ProcessTaking:
      type: object
      properties:
        takings:
          $ref: '#/components/schemas/Takings'
        takingItems:
          type: array
          items:
            $ref: '#/components/schemas/TakingItems'
          description: Contains details to process taking items
          nullable: true
        operatorDetails:
          $ref: '#/components/schemas/Operator'
      additionalProperties: false
      description: >-
        Contains details to process a Taking along with taking items and
        Operator Details
    StockItem:
      type: object
      properties:
        storeName:
          type: string
          description: The name of the store.
          nullable: true
        storeNumber:
          type: integer
          description: The number of the store.
          format: int32
        itemNumber:
          type: string
          description: The item number
          nullable: true
        itemID:
          type: integer
          description: The item ID
          format: int32
        currentStock:
          type: number
          description: The current stock level of the item at this store.
          format: double
        itemName:
          type: string
          description: The Item Name
          nullable: true
        itemDescription:
          type: string
          description: The Item Description
          nullable: true
        divisionNumber:
          type: integer
          description: The Division Number of Item
          format: int32
          nullable: true
        totalQuantity:
          type: number
          description: The total quantity of Item
          format: double
          nullable: true
        departmentId:
          type: integer
          description: The department Id
          format: int32
          nullable: true
        departmentNumber:
          type: integer
          description: The department Number
          format: int32
          nullable: true
        departmentName:
          type: string
          description: The department Name
          nullable: true
        minStockQuantityEditable:
          type: boolean
          description: The Min Stock quantity update flag
        currentStockQuantityEditable:
          type: boolean
          description: The Current stock quantity update flag
      additionalProperties: false
      description: >-
        Contains Item stock details with respect to item and the Store. provides
        with the Current Stock in system.
    DepartmentDetails:
      type: object
      properties:
        departmentId:
          type: integer
          description: The Department ID of a Department
          format: int32
          example: 100001
        divisionNumber:
          type: integer
          description: The Division Number
          format: int32
          example: 1
        departmentNumber:
          type: integer
          description: The Department Number
          format: int32
          example: 1
        departmentName:
          type: string
          description: The Department Name
          nullable: true
          example: Menswear
      additionalProperties: false
      description: Contains details of Departments
    User:
      type: object
      properties:
        login:
          type: string
          nullable: true
        storeNumber:
          type: integer
          format: int32
        password:
          type: string
          nullable: true
        token:
          type: string
          nullable: true
        tokenExpiry:
          type: string
          format: date-time
      additionalProperties: false
      description: Used for authentication via USICOAL operator table.
    Store:
      type: object
      properties:
        storeNumber:
          type: integer
          format: int32
        storeName:
          type: string
          nullable: true
        ipAddress:
          type: string
          description: The client ip address.
          nullable: true
          example: 10.10.137.123
        network:
          type: string
          description: The IP subnet of the store.
          nullable: true
          example: 10.10.137.*
      additionalProperties: false
      description: Contains details of a Pets@Home store.