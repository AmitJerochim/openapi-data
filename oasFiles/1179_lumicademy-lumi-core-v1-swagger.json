{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "v1",
    "title" : "Lumicademy Core API",
    "description" : "This is the conference API endpoint for Lumicademy"
  },
  "servers" : [ {
    "url" : "https://api.lumicademy.com/"
  }, {
    "url" : "https://api.lumicademy.com:9091/"
  } ],
  "tags" : [ {
    "name" : "conference",
    "description" : "Conference endpoint"
  }, {
    "name" : "content",
    "description" : "Conference content endpoint"
  }, {
    "name" : "user",
    "description" : "User endpoint"
  }, {
    "name" : "users",
    "description" : "Users endpoint"
  }, {
    "name" : "share",
    "description" : "Share endpoint"
  } ],
  "paths" : {
    "/conference" : {
      "post" : {
        "tags" : [ "conference" ],
        "summary" : "Create a new conference",
        "description" : "Creates a new conference.",
        "operationId" : "createConference",
        "parameters" : [ {
          "name" : "meetId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          },
          "description" : "Meeting id if quick meetings are enabled (optional)"
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Conference object to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConferenceCreateRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Conference was created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConferenceSummaryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}" : {
      "get" : {
        "tags" : [ "conference" ],
        "summary" : "Retrieves conference settings",
        "description" : "Returns a single conference.",
        "operationId" : "getConference",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "$ref" : "#/components/parameters/Details"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved conference information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConferenceResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      },
      "put" : {
        "tags" : [ "conference" ],
        "summary" : "Updates a conference",
        "description" : "Updates an existing conference settings.",
        "operationId" : "updateConference",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Conference object to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConferenceUpdateRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated conference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConferenceSummaryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      },
      "delete" : {
        "tags" : [ "conference" ],
        "summary" : "Deletes an existing conference",
        "description" : "Deletes an existing conference.",
        "operationId" : "deleteConference",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the conference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conferences" : {
      "get" : {
        "tags" : [ "conference" ],
        "summary" : "Retrieves conferences",
        "description" : "Retrieves information about conferences.",
        "operationId" : "getConferences",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Details"
        }, {
          "$ref" : "#/components/parameters/ConferenceActive"
        }, {
          "$ref" : "#/components/parameters/ConferenceState"
        }, {
          "$ref" : "#/components/parameters/MetaData1"
        }, {
          "$ref" : "#/components/parameters/MetaData2"
        }, {
          "$ref" : "#/components/parameters/MetaData3"
        } ],
        "responses" : {
          "200" : {
            "description" : "Conferences retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConferencesResponse"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create a new user",
        "description" : "Creates a new user.",
        "operationId" : "createUser",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "User object to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserCreateRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "User was created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserSummaryResponse"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}/user/{userId}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Retrieves a conference user",
        "description" : "Retrieves information about a conference user.",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "$ref" : "#/components/parameters/Details"
        }, {
          "$ref" : "#/components/parameters/AllAudio"
        }, {
          "$ref" : "#/components/parameters/AllVideo"
        }, {
          "$ref" : "#/components/parameters/AudioPlaybackDevices"
        }, {
          "$ref" : "#/components/parameters/AudioPlaybackDevice"
        }, {
          "$ref" : "#/components/parameters/AudioRecordingDevices"
        }, {
          "$ref" : "#/components/parameters/AudioRecordingDevice"
        }, {
          "$ref" : "#/components/parameters/AudioRecordingDeviceVolume"
        }, {
          "$ref" : "#/components/parameters/AudioRecordingDeviceMuted"
        }, {
          "$ref" : "#/components/parameters/AudioPlaybackDeviceVolume"
        }, {
          "$ref" : "#/components/parameters/AudioState"
        }, {
          "$ref" : "#/components/parameters/AudioAGC"
        }, {
          "$ref" : "#/components/parameters/AudioNS"
        }, {
          "$ref" : "#/components/parameters/AudioAEC"
        }, {
          "$ref" : "#/components/parameters/VideoCaptureDevices"
        }, {
          "$ref" : "#/components/parameters/VideoCaptureDevice"
        }, {
          "$ref" : "#/components/parameters/VideoState"
        }, {
          "$ref" : "#/components/parameters/VideoCaptureFormats"
        }, {
          "$ref" : "#/components/parameters/VideoCaptureFormat"
        }, {
          "$ref" : "#/components/parameters/VideoPreferWideScreen"
        }, {
          "$ref" : "#/components/parameters/VideoAllowHD"
        }, {
          "$ref" : "#/components/parameters/VideoEnforceLimits"
        }, {
          "$ref" : "#/components/parameters/VideoLimits"
        } ],
        "responses" : {
          "200" : {
            "description" : "User retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updates an existing user",
        "description" : "Update a new user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "User object to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "User was updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserSummaryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Deletes an existing user",
        "description" : "Delete a user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}/user/{userId}/expel" : {
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Expels an active user from a conference",
        "description" : "Expel a user.",
        "operationId" : "expelUser",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully expelled the user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}/user/{userId}/move" : {
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Moves an active user to another conference",
        "description" : "Move a user.",
        "operationId" : "moveUser",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Conference id to move to",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "description" : "Conference password",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/ConferenceNew"
        } ],
        "requestBody" : {
          "required" : false,
          "description" : "Conference object to create, if new parameter included in query",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConferenceCreateRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully moved the user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}/users" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieves conference users",
        "description" : "Retrieves information about conference users.",
        "operationId" : "getUsers",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "$ref" : "#/components/parameters/Details"
        }, {
          "$ref" : "#/components/parameters/UserActive"
        }, {
          "$ref" : "#/components/parameters/AllAudio"
        }, {
          "$ref" : "#/components/parameters/AllVideo"
        }, {
          "$ref" : "#/components/parameters/AudioPlaybackDevices"
        }, {
          "$ref" : "#/components/parameters/AudioPlaybackDevice"
        }, {
          "$ref" : "#/components/parameters/AudioRecordingDevices"
        }, {
          "$ref" : "#/components/parameters/AudioRecordingDevice"
        }, {
          "$ref" : "#/components/parameters/AudioRecordingDeviceVolume"
        }, {
          "$ref" : "#/components/parameters/AudioRecordingDeviceMuted"
        }, {
          "$ref" : "#/components/parameters/AudioPlaybackDeviceVolume"
        }, {
          "$ref" : "#/components/parameters/AudioState"
        }, {
          "$ref" : "#/components/parameters/AudioAGC"
        }, {
          "$ref" : "#/components/parameters/AudioNS"
        }, {
          "$ref" : "#/components/parameters/AudioAEC"
        }, {
          "$ref" : "#/components/parameters/VideoCaptureDevices"
        }, {
          "$ref" : "#/components/parameters/VideoCaptureDevice"
        }, {
          "$ref" : "#/components/parameters/VideoState"
        }, {
          "$ref" : "#/components/parameters/VideoCaptureFormats"
        }, {
          "$ref" : "#/components/parameters/VideoCaptureFormat"
        }, {
          "$ref" : "#/components/parameters/VideoPreferWideScreen"
        }, {
          "$ref" : "#/components/parameters/VideoAllowHD"
        }, {
          "$ref" : "#/components/parameters/VideoEnforceLimits"
        }, {
          "$ref" : "#/components/parameters/VideoLimits"
        } ],
        "responses" : {
          "200" : {
            "description" : "Users retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      },
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Updates conference users",
        "description" : "Updates one or more conference users.",
        "operationId" : "updateUsers",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "$ref" : "#/components/parameters/ApplyTo"
        }, {
          "$ref" : "#/components/parameters/UserActive"
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Users update object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsersUpdateRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the users",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}/users/expel" : {
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Expels conference users",
        "description" : "Expels one or more conference users.",
        "operationId" : "expelUsers",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "$ref" : "#/components/parameters/ApplyTo"
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Users expel object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsersExpelRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully expelled the users",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}/users/move" : {
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Moves conference users",
        "description" : "Moves one or more conference users.",
        "operationId" : "moveUsers",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Conference id to move to",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "description" : "Conference password",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/ApplyTo"
        }, {
          "$ref" : "#/components/parameters/ConferenceNew"
        } ],
        "requestBody" : {
          "required" : false,
          "description" : "Conference object to create, if new parameter included in query",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConferenceCreateRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully moved the users",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}/content/{contentId}" : {
      "post" : {
        "tags" : [ "content" ],
        "summary" : "Create a content relationship",
        "description" : "Relates a piece of content with a conference",
        "operationId" : "relateContentToConference",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "contentId",
          "in" : "path",
          "description" : "Content id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Details of how to relate the content to the conference",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConferenceContentRelateRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully related content to conference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConferenceContentResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      },
      "delete" : {
        "tags" : [ "content" ],
        "summary" : "Removes a content relationship",
        "description" : "Removes a content relationship to a conference",
        "operationId" : "removeContentFromConference",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "contentId",
          "in" : "path",
          "description" : "Content id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully removed content from the conference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConferenceContentDeleteResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}/contents" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Retrieves a list of content",
        "description" : "Retrieves a list of content related to a conference.",
        "operationId" : "getConferenceContents",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "$ref" : "#/components/parameters/Details"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved conference list of contents",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConferenceContentsResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conference/{confId}/share/{shareId}" : {
      "post" : {
        "tags" : [ "share" ],
        "summary" : "Create a conference share",
        "description" : "Create a conference share",
        "operationId" : "createShare",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "shareId",
          "in" : "path",
          "description" : "Share id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Share object to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShareCreateRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created the share",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      },
      "put" : {
        "tags" : [ "share" ],
        "summary" : "Update an existing conference share",
        "description" : "Updates the existing conference share",
        "operationId" : "updateShare",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "shareId",
          "in" : "path",
          "description" : "Share id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "requestBody" : {
          "required" : true,
          "description" : "Share object to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShareUpdateRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the share",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      },
      "delete" : {
        "tags" : [ "share" ],
        "summary" : "Delete an existing conference share",
        "description" : "Deletes the existing conference share",
        "operationId" : "deleteShare",
        "parameters" : [ {
          "name" : "confId",
          "in" : "path",
          "description" : "Conference id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        }, {
          "name" : "shareId",
          "in" : "path",
          "description" : "Share id",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the share",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    }
  },
  "security" : [ {
    "oAuth2ClientCredentials" : [ ]
  }, {
    "bearerAuth" : [ ]
  } ],
  "components" : {
    "securitySchemes" : {
      "oAuth2ClientCredentials" : {
        "type" : "oauth2",
        "flows" : {
          "clientCredentials" : {
            "tokenUrl" : "https://auth.lumicademy.com/auth/oauth2/token",
            "refreshUrl" : "https://auth.lumicademy.com/auth/oauth2/token",
            "scopes" : {
              "app" : "allows access to objects created with the authorized ClientId",
              "globalapps" : "allows access to objects created with any ClientId"
            }
          }
        }
      },
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    },
    "responses" : {
      "Success" : {
        "description" : "Success",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/SuccessResponse"
            }
          }
        }
      },
      "BadRequest" : {
        "description" : "Bad request",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Unauthorized" : {
        "description" : "Unauthorized",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Forbidden" : {
        "description" : "Forbidden",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotFound" : {
        "description" : "The specified resource was not found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "InternalError" : {
        "description" : "Internal server error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "schemas" : {
      "SuccessResponse" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "string"
          }
        }
      },
      "ErrorResponse" : {
        "type" : "object",
        "properties" : {
          "error_description" : {
            "type" : "string"
          },
          "error_code" : {
            "type" : "integer",
            "description" : "-6 = The requested grant type is not supported. -5 = This client is not authorized to use the requested grant type. -4 = The scope for the provided credentials is invalid. -3 = The authorization for the grant type is invalid or expired. -2 = Client authentication failed, the request contains an invalid client id or secret. -1 = The request is missing a parameter so the server cannot proceed with the request.\n1 = Internal error, unable to connect. 2 = Internal error, unable to perform operation. 3 = The provided Json is invalid. 4 = The path is invalid or incomplete. 5 = The request body content format is invalid. 6 = The provided url encoded body is invalid. 7 = A required uri parameter is missing. 8 = The required element is missing. 9 = The body of the request is missing. 10 = The body of the response is missing. 11 = The authorization header is missing. 12 = The authorization credentials are missing or incomplete. 13 = The authorization format is unsupported. 14 = The token is unauthorized. 15 = The username is invalid. 16 = The password is invalid. 17 = The client id is invalid. 18 = The client secret is invalid. 19 = The apikey is invalid. 20 = The server is unauthorized. 21 = Failed to start the process. 22 = The url is invalid. 23 = The setting is invalid. 24 = There are no servers for this client id. 100 = The username already exists. 200 = The conference id is invalid. 201 = The user id is invalid. 202 = The conference is already deleted. 203 = The user is already deleted. 204 = Host, presenter and attendee passwords must be different. 205 = The conference cannot be deleted. 300 = Internal error, storage error. 301 = The content id is invalid. 302 = Unable to delete the content, relationships still exist."
          }
        }
      },
      "ConferenceCreateRequest" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "Topic name of the conference or room"
          },
          "startMethod" : {
            "$ref" : "#/components/schemas/ConferenceStartMethod"
          },
          "attendMethods" : {
            "$ref" : "#/components/schemas/ConferenceAttendMethods"
          },
          "features" : {
            "$ref" : "#/components/schemas/ConferenceFeatures"
          },
          "privileges" : {
            "$ref" : "#/components/schemas/ConferencePrivileges"
          },
          "hostPassword" : {
            "type" : "string",
            "description" : "Password used by hosts to join the conference"
          },
          "presenterPassword" : {
            "type" : "string",
            "description" : "Password used by presenters to join the conference"
          },
          "attendeePassword" : {
            "type" : "string",
            "description" : "Password used by attendees to join the conference"
          },
          "audioTypes" : {
            "$ref" : "#/components/schemas/AudioTypes"
          },
          "location" : {
            "$ref" : "#/components/schemas/ConferenceLocation"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "2 character country code"
          },
          "backgroundColor" : {
            "type" : "integer",
            "description" : "A value representing the color index"
          },
          "videoPreferWideScreen" : {
            "type" : "boolean",
            "description" : "True to set prefer wide screen as the default, False to prefer narrow"
          },
          "videoAllowHD" : {
            "type" : "boolean",
            "description" : "True to set allow high def as the default, False to prefer standard def"
          },
          "videoEnforceLimits" : {
            "type" : "boolean",
            "description" : "True to limit video resolution and frame rate for all attendees"
          },
          "videoLimits" : {
            "type" : "object",
            "items" : {
              "$ref" : "#/components/schemas/VideoLimits"
            },
            "description" : "The video capture limits for the conference"
          },
          "metaData1" : {
            "type" : "string",
            "description" : "Customer supplied extra data that can be queried"
          },
          "metaData2" : {
            "type" : "string",
            "description" : "Customer supplied extra data that can be queried"
          },
          "metaData3" : {
            "type" : "string",
            "description" : "Customer supplied extra data that can be queried"
          },
          "userIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Array of user ids (for user move requests only)"
          }
        }
      },
      "ConferenceUpdateRequest" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "Topic name of the conference or room"
          },
          "state" : {
            "$ref" : "#/components/schemas/ConferenceState"
          },
          "startMethod" : {
            "$ref" : "#/components/schemas/ConferenceStartMethod"
          },
          "attendMethods" : {
            "$ref" : "#/components/schemas/ConferenceAttendMethods"
          },
          "features" : {
            "$ref" : "#/components/schemas/ConferenceFeatures"
          },
          "privileges" : {
            "$ref" : "#/components/schemas/ConferencePrivileges"
          },
          "hostPassword" : {
            "type" : "string",
            "description" : "Password used by hosts to join the conference"
          },
          "presenterPassword" : {
            "type" : "string",
            "description" : "Password used by presenters to join the conference"
          },
          "attendeePassword" : {
            "type" : "string",
            "description" : "Password used by attendees to join the conference"
          },
          "audioTypes" : {
            "$ref" : "#/components/schemas/AudioTypes"
          },
          "location" : {
            "$ref" : "#/components/schemas/ConferenceLocation"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "2 character country code"
          },
          "backgroundColor" : {
            "type" : "integer",
            "description" : "A value representing the color index"
          },
          "videoPreferWideScreen" : {
            "type" : "boolean",
            "description" : "True to set prefer wide screen as the default, False to prefer narrow"
          },
          "videoAllowHD" : {
            "type" : "boolean",
            "description" : "True to set allow high def as the default, False to prefer standard def"
          },
          "videoEnforceLimits" : {
            "type" : "boolean",
            "description" : "True to limit video resolution and frame rate for all attendees"
          },
          "videoLimits" : {
            "type" : "object",
            "items" : {
              "$ref" : "#/components/schemas/VideoLimits"
            },
            "description" : "The video capture limits for the conference"
          }
        }
      },
      "ConferenceSummaryResponse" : {
        "type" : "object",
        "properties" : {
          "confId" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "hostUrl" : {
            "type" : "string"
          },
          "presenterUrl" : {
            "type" : "string"
          },
          "attendeeUrl" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True if one or more users are currently in the conference, False otherwise"
          }
        }
      },
      "ConferenceResponse" : {
        "type" : "object",
        "properties" : {
          "confId" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string",
            "description" : "Topic of the conference"
          },
          "hostUrl" : {
            "type" : "string"
          },
          "presenterUrl" : {
            "type" : "string"
          },
          "attendeeUrl" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True if one or more users are currently in the conference, False otherwise"
          },
          "state" : {
            "$ref" : "#/components/schemas/ConferenceState"
          },
          "startMethod" : {
            "$ref" : "#/components/schemas/ConferenceStartMethod"
          },
          "attendMethods" : {
            "$ref" : "#/components/schemas/ConferenceAttendMethods"
          },
          "features" : {
            "$ref" : "#/components/schemas/ConferenceFeatures"
          },
          "privileges" : {
            "$ref" : "#/components/schemas/ConferencePrivileges"
          },
          "hostPassword" : {
            "type" : "string",
            "description" : "Password used by hosts to join the conference"
          },
          "presenterPassword" : {
            "type" : "string",
            "description" : "Password used by presenters to join the conference"
          },
          "attendeePassword" : {
            "type" : "string",
            "description" : "Password used by attendees to join the conference"
          },
          "audioTypes" : {
            "$ref" : "#/components/schemas/AudioTypes"
          },
          "location" : {
            "$ref" : "#/components/schemas/ConferenceLocation"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "2 character country code"
          },
          "backgroundColor" : {
            "type" : "integer",
            "description" : "A value representing the color index"
          },
          "videoPreferWideScreen" : {
            "type" : "boolean",
            "description" : "True to set prefer wide screen as the default, False to prefer narrow"
          },
          "videoAllowHD" : {
            "type" : "boolean",
            "description" : "True to set allow high def as the default, False to prefer standard def"
          },
          "videoEnforceLimits" : {
            "type" : "boolean",
            "description" : "True to limit video resolution and frame rate for all attendees"
          },
          "videoLimits" : {
            "type" : "object",
            "items" : {
              "$ref" : "#/components/schemas/VideoLimits"
            },
            "description" : "The video capture limits for the conference"
          },
          "metaData1" : {
            "type" : "string",
            "description" : "Customer supplied extra data that can be queried"
          },
          "metaData2" : {
            "type" : "string",
            "description" : "Customer supplied extra data that can be queried"
          },
          "metaData3" : {
            "type" : "string",
            "description" : "Customer supplied extra data that can be queried"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time the conference was initially created"
          },
          "started" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time the conference was initially started"
          },
          "ended" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time the conference was last ended"
          },
          "deleted" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time the conference was deleted"
          }
        }
      },
      "ArrayOfConferenceResponse" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ConferenceResponse"
        }
      },
      "ConferencesResponse" : {
        "type" : "object",
        "properties" : {
          "items" : {
            "$ref" : "#/components/schemas/ArrayOfConferenceResponse"
          }
        }
      },
      "ConferenceContentRelateRequest" : {
        "type" : "object",
        "properties" : {
          "relateAs" : {
            "$ref" : "#/components/schemas/RelateAs"
          }
        }
      },
      "ConferenceContentDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "contentId" : {
            "type" : "string"
          },
          "contentType" : {
            "type" : "string",
            "description" : "Mime content type of content"
          },
          "deleteMethod" : {
            "$ref" : "#/components/schemas/DeleteMethod"
          }
        }
      },
      "ConferenceContentResponse" : {
        "type" : "object",
        "properties" : {
          "contentId" : {
            "type" : "string"
          },
          "contentType" : {
            "type" : "string",
            "description" : "Mime content type of content"
          },
          "displayName" : {
            "type" : "string",
            "description" : "Display name of the content"
          },
          "fileName" : {
            "type" : "string",
            "description" : "File name of the content"
          }
        }
      },
      "ArrayOfConferenceContentResponse" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/ConferenceContentResponse"
        }
      },
      "ConferenceContentsResponse" : {
        "type" : "object",
        "properties" : {
          "items" : {
            "$ref" : "#/components/schemas/ArrayOfConferenceContentResponse"
          }
        }
      },
      "RelateAs" : {
        "type" : "integer",
        "default" : 1,
        "enum" : [ 1, 2 ],
        "x-enumNames" : [ "DocumentShare", "FileShare" ],
        "description" : "Related as 1 = Relate as document share 2 = Relate as file share"
      },
      "DeleteMethod" : {
        "type" : "integer",
        "default" : 1,
        "enum" : [ 1, 2 ],
        "x-enumNames" : [ "NeverDelete", "AlwaysDelete" ],
        "description" : "Delete content method 1 = Never automatically delete 2 = Always automatically delete, when the content is removed from the conference"
      },
      "ShareCreateRequest" : {
        "type" : "object",
        "description" : "Share details",
        "properties" : {
          "shareType" : {
            "$ref" : "#/components/schemas/ShareType"
          },
          "displayName" : {
            "type" : "string",
            "description" : "Display name of the share"
          },
          "background" : {
            "$ref" : "#/components/schemas/ShareBackground"
          },
          "annotations" : {
            "type" : "string",
            "format" : "binary",
            "description" : "Annotation document"
          }
        }
      },
      "ShareUpdateRequest" : {
        "type" : "object",
        "description" : "Share details",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "Display name of the share"
          },
          "background" : {
            "$ref" : "#/components/schemas/ShareBackground"
          },
          "annotations" : {
            "type" : "string",
            "format" : "binary",
            "description" : "Annotation document"
          }
        }
      },
      "ConferenceState" : {
        "type" : "integer",
        "default" : 2,
        "enum" : [ 1, 2, 3, 4 ],
        "x-enumNames" : [ "Waiting", "Started", "Ended", "Deleted" ],
        "description" : "Conference state 1 = Waiting to start 2 = Started 3 = Ended 4 = Deleted"
      },
      "ConferenceStartMethod" : {
        "type" : "integer",
        "default" : 2,
        "enum" : [ 1, 2 ],
        "x-enumNames" : [ "Manual", "Automatic" ],
        "description" : "How the conference starts 1 = Manually waiting to be started 2 = Automatically started when the first user joins"
      },
      "ConferenceAttendMethods" : {
        "type" : "object",
        "description" : "How attendees can join the conference",
        "properties" : {
          "password" : {
            "type" : "boolean",
            "description" : "Using the host, presenter or attendee password",
            "default" : true
          },
          "url" : {
            "type" : "boolean",
            "description" : "Using a unique url for each user"
          }
        }
      },
      "ConferenceLocation" : {
        "type" : "integer",
        "default" : 1,
        "enum" : [ 1, 2 ],
        "x-enumNames" : [ "Automatic", "CountryCode" ],
        "description" : "Where the conference is started 1 = Automatic 2 = By country code"
      },
      "ConferenceFeatures" : {
        "type" : "object",
        "description" : "Enable or disable features for everyone in the conference",
        "properties" : {
          "video" : {
            "type" : "boolean",
            "description" : "Video feature enabled"
          },
          "audio" : {
            "type" : "boolean",
            "description" : "Voip audio feature enabled"
          },
          "whiteboard" : {
            "type" : "boolean",
            "description" : "Share whiteboard feature enabled"
          },
          "desktopShare" : {
            "type" : "boolean",
            "description" : "Share your desktop feature enabled"
          },
          "documentShare" : {
            "type" : "boolean",
            "description" : "Share documents feature enabled"
          },
          "fileShare" : {
            "type" : "boolean",
            "description" : "Share files feature enabled"
          },
          "recording" : {
            "type" : "boolean",
            "description" : "Ability to record is enabled"
          }
        }
      },
      "ConferencePrivileges" : {
        "type" : "object",
        "description" : "Default privileges for everyone in the conference",
        "properties" : {
          "annotate" : {
            "type" : "boolean",
            "description" : "Annotation privilege enabled by default for attendees"
          },
          "video" : {
            "type" : "boolean",
            "description" : "Play video privilege enabled by default for attendees"
          },
          "audio" : {
            "type" : "boolean",
            "description" : "Unmute privilege enabled by default for attendees"
          },
          "share" : {
            "type" : "boolean",
            "description" : "Share privilege enabled by default for attendees"
          },
          "viewUsers" : {
            "type" : "boolean",
            "description" : "View users privilege enabled by default for attendees"
          },
          "record" : {
            "type" : "boolean",
            "description" : "Record privilege enabled by default for attendees"
          },
          "changePages" : {
            "type" : "boolean",
            "description" : "Change share pages privilege enabled by default for attendees"
          },
          "changeShares" : {
            "type" : "boolean",
            "description" : "Change shares privilege enabled by default for attendees"
          }
        }
      },
      "AudioTypes" : {
        "type" : "object",
        "description" : "Audio types that are enabled and allowed in the conference",
        "properties" : {
          "computer" : {
            "type" : "boolean",
            "description" : "Audio can be used through your computer microphone and speakers"
          }
        }
      },
      "ShareType" : {
        "type" : "integer",
        "enum" : [ 1, 2, 3, 4, 5 ],
        "x-enumNames" : [ "DesktopShare", "AppShare", "DocumentShare", "FileShare", "WhiteboardShare" ],
        "description" : "The type of share 1 = Desktop share 2 = App share 3 = Document share 4 = File share 5 = Whiteboard share"
      },
      "ShareBackground" : {
        "type" : "integer",
        "enum" : [ 0, 1, 2, 3 ],
        "x-enumNames" : [ "None", "Whiteboard", "Greenboard", "Blackboard" ],
        "description" : "The background of the share 0 = None 1 = Whiteboard 2 = Greenboard 3 = Blackboard"
      },
      "UserCreateRequest" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "Screen name for the conference user"
          },
          "privileges" : {
            "$ref" : "#/components/schemas/UserPrivileges"
          }
        }
      },
      "UserUpdateRequest" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "Screen name for the conference user"
          },
          "privileges" : {
            "$ref" : "#/components/schemas/UserPrivileges"
          },
          "role" : {
            "$ref" : "#/components/schemas/UserRole"
          },
          "audioPlaybackDeviceId" : {
            "type" : "string",
            "description" : "Set the selected audio playback device id for the active user"
          },
          "audioRecordingDeviceId" : {
            "type" : "string",
            "description" : "Set the selected audio recording device id for the active user"
          },
          "audioRecordingDeviceVolume" : {
            "type" : "number",
            "format" : "float",
            "description" : "Set the device hardware mixer recording volume (range 0 to 1)"
          },
          "audioRecordingDeviceMuted" : {
            "type" : "boolean",
            "description" : "Set the device hardware mixer recording muted state"
          },
          "audioPlaybackDeviceVolume" : {
            "type" : "number",
            "format" : "float",
            "description" : "The hardware mixer volume (range 0 to 1) for the active user"
          },
          "audioState" : {
            "$ref" : "#/components/schemas/AudioState"
          },
          "audioAGC" : {
            "type" : "boolean",
            "description" : "True to enable the audio automatic gain control for the active user"
          },
          "audioAGCMode" : {
            "$ref" : "#/components/schemas/AudioAGCMode"
          },
          "audioAGCMicLevelMin" : {
            "type" : "integer"
          },
          "audioAGCMicLevelMax" : {
            "type" : "integer"
          },
          "audioAGCTargetLevel" : {
            "type" : "integer"
          },
          "audioAGCCompressionGain" : {
            "type" : "integer"
          },
          "audioAGCEnableLimiter" : {
            "type" : "boolean"
          },
          "audioNS" : {
            "type" : "boolean",
            "description" : "True to enable the audio noise supression for the active user"
          },
          "audioNSAggressiveness" : {
            "type" : "integer"
          },
          "audioAEC" : {
            "type" : "boolean",
            "description" : "True to enable the audio acoustic echo cancellation for the active user"
          },
          "audioAECAggressiveness" : {
            "type" : "integer"
          },
          "audioAECDelayEstimate" : {
            "type" : "integer"
          },
          "audioAECSkewedDelay" : {
            "type" : "boolean"
          },
          "videoCaptureDeviceId" : {
            "type" : "string",
            "description" : "Set the selected video capture device id for the active user"
          },
          "videoState" : {
            "$ref" : "#/components/schemas/VideoState"
          },
          "videoPreferWideScreen" : {
            "type" : "boolean",
            "description" : "True to set prefer wide screen video for the active user"
          },
          "videoAllowHD" : {
            "type" : "boolean",
            "description" : "True to set allow high def for the active user"
          },
          "videoEnforceLimits" : {
            "type" : "boolean",
            "description" : "True to set video limits for the active user"
          },
          "videoLimits" : {
            "type" : "object",
            "items" : {
              "$ref" : "#/components/schemas/VideoLimits"
            },
            "description" : "The video capture limits for the active user"
          }
        }
      },
      "UserSummaryResponse" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "kind" : {
            "$ref" : "#/components/schemas/UserKind"
          },
          "state" : {
            "$ref" : "#/components/schemas/UserState"
          },
          "attendAsHostUrl" : {
            "type" : "string"
          },
          "attendAsPresenterUrl" : {
            "type" : "string"
          },
          "attendAsAttendeeUrl" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True if the user is currently in the conference"
          }
        }
      },
      "UserResponse" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "kind" : {
            "$ref" : "#/components/schemas/UserKind"
          },
          "state" : {
            "$ref" : "#/components/schemas/UserState"
          },
          "attendAsHostUrl" : {
            "type" : "string"
          },
          "attendAsPresenterUrl" : {
            "type" : "string"
          },
          "attendAsAttendeeUrl" : {
            "type" : "string"
          },
          "attend" : {
            "type" : "boolean",
            "description" : "True if the user ever attended"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True if the user is currently in the conference"
          },
          "attended" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the user attended"
          },
          "privileges" : {
            "$ref" : "#/components/schemas/UserPrivileges"
          },
          "role" : {
            "$ref" : "#/components/schemas/UserRole"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deleted" : {
            "type" : "string",
            "format" : "date-time"
          },
          "audioPlaybackDevices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AudioDevice"
            },
            "description" : "An array of audio playback devices for the active user"
          },
          "audioPlaybackDeviceId" : {
            "type" : "string",
            "description" : "The selected audio playback device id for the active user"
          },
          "audioRecordingDevices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AudioDevice"
            },
            "description" : "An array of audio recording devices for the active user"
          },
          "audioRecordingDeviceId" : {
            "type" : "string",
            "description" : "The selected audio recording device id for the active user"
          },
          "audioRecordingDeviceVolume" : {
            "type" : "number",
            "format" : "float",
            "description" : "The hardware mixer volume (range 0 to 1) for the active user"
          },
          "audioRecordingDeviceMuted" : {
            "type" : "boolean",
            "description" : "The hardware mixer muted state for the active user"
          },
          "audioPlaybackDeviceVolume" : {
            "type" : "number",
            "format" : "float",
            "description" : "The hardware mixer volume (range 0 to 1) for the active user"
          },
          "audioState" : {
            "$ref" : "#/components/schemas/AudioState"
          },
          "audioAGC" : {
            "type" : "boolean",
            "description" : "True if audio automatic gain control is enabled for the active user"
          },
          "audioAGCMode" : {
            "$ref" : "#/components/schemas/AudioAGCMode"
          },
          "audioAGCMicLevelMin" : {
            "type" : "integer"
          },
          "audioAGCMicLevelMax" : {
            "type" : "integer"
          },
          "audioAGCTargetLevel" : {
            "type" : "integer"
          },
          "audioAGCCompressionGain" : {
            "type" : "integer"
          },
          "audioAGCEnableLimiter" : {
            "type" : "boolean"
          },
          "audioNS" : {
            "type" : "boolean",
            "description" : "True if audio noise supression is enabled for the active user"
          },
          "audioNSAggressiveness" : {
            "type" : "integer"
          },
          "audioAEC" : {
            "type" : "boolean",
            "description" : "True if audio acoustic echo cancellation is enabled for the active user"
          },
          "audioAECAggressiveness" : {
            "type" : "integer"
          },
          "audioAECDelayEstimate" : {
            "type" : "integer"
          },
          "audioAECSkewedDelay" : {
            "type" : "boolean"
          },
          "videoCaptureDevices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VideoDevice"
            },
            "description" : "An array of video capture devices for the active user"
          },
          "videoCaptureDeviceId" : {
            "type" : "string",
            "description" : "The selected video capture device id for the active user"
          },
          "videoState" : {
            "$ref" : "#/components/schemas/VideoState"
          },
          "videoCaptureFormats" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VideoFormat"
            },
            "description" : "An array of video capture formats for the active user"
          },
          "videoCaptureFormat" : {
            "type" : "object",
            "items" : {
              "$ref" : "#/components/schemas/VideoFormat"
            },
            "description" : "The selected video capture format for the active user"
          },
          "videoPreferWideScreen" : {
            "type" : "boolean",
            "description" : "True if prefer wide screen video is enabled for the active user"
          },
          "videoAllowHD" : {
            "type" : "boolean",
            "description" : "True if allow high def is enabled for the active user"
          },
          "videoEnforceLimits" : {
            "type" : "boolean",
            "description" : "True if video limits are enabled for the active user"
          },
          "videoLimits" : {
            "type" : "object",
            "items" : {
              "$ref" : "#/components/schemas/VideoLimits"
            },
            "description" : "The video capture limits for the active user"
          }
        }
      },
      "UsersUpdateRequest" : {
        "type" : "object",
        "properties" : {
          "userIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Array of user ids"
          },
          "privileges" : {
            "$ref" : "#/components/schemas/UserPrivileges"
          },
          "role" : {
            "$ref" : "#/components/schemas/UserRole"
          },
          "audioState" : {
            "$ref" : "#/components/schemas/AudioState"
          },
          "videoState" : {
            "$ref" : "#/components/schemas/VideoState"
          }
        }
      },
      "UsersExpelRequest" : {
        "type" : "object",
        "properties" : {
          "userIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Array of user ids"
          }
        }
      },
      "ArrayOfUserResponse" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/UserResponse"
        }
      },
      "UsersResponse" : {
        "type" : "object",
        "properties" : {
          "items" : {
            "$ref" : "#/components/schemas/ArrayOfUserResponse"
          }
        }
      },
      "UserState" : {
        "type" : "integer",
        "default" : 1,
        "enum" : [ 1, 2 ],
        "x-enumNames" : [ "Created", "Deleted" ],
        "description" : "User state 1 = Created 2 = Deleted"
      },
      "UserKind" : {
        "type" : "integer",
        "default" : 1,
        "enum" : [ 1, 2, 3 ],
        "x-enumNames" : [ "GuestUser", "CreatedUser", "AccounUser" ],
        "description" : "User kind 1 = Guest user 2 = Created user 3 = Account user"
      },
      "UserRole" : {
        "type" : "integer",
        "default" : 1,
        "enum" : [ 1, 2, 3 ],
        "x-enumNames" : [ "Attendee", "Presenter", "Host" ],
        "description" : "User role 1 = Attendee or Student 2 = Presenter or Teacher 3 = Host"
      },
      "UserPrivileges" : {
        "type" : "object",
        "description" : "Privileges for this specific user",
        "properties" : {
          "annotate" : {
            "type" : "boolean",
            "description" : "Annotation privilege enabled for this user"
          },
          "video" : {
            "type" : "boolean",
            "description" : "Play video privilege enabled for this user"
          },
          "audio" : {
            "type" : "boolean",
            "description" : "Unmute privilege enabled for this user"
          },
          "share" : {
            "type" : "boolean",
            "description" : "Share privilege enabled for this user"
          },
          "viewUsers" : {
            "type" : "boolean",
            "description" : "View users privilege enabled for this user"
          },
          "record" : {
            "type" : "boolean",
            "description" : "Record privilege enabled for this user"
          },
          "changePages" : {
            "type" : "boolean",
            "description" : "Change share pages privilege enabled for this user"
          },
          "changeShares" : {
            "type" : "boolean",
            "description" : "Change shares privilege enabled for this user"
          }
        }
      },
      "AudioDevice" : {
        "type" : "object",
        "description" : "The details for the audio device",
        "properties" : {
          "uniqueId" : {
            "type" : "string",
            "description" : "The unique id for the audio device"
          },
          "displayName" : {
            "type" : "string",
            "description" : "The display name for the audio device"
          }
        }
      },
      "AudioState" : {
        "type" : "integer",
        "enum" : [ 0, 1 ],
        "x-enumNames" : [ "Muted", "Unmuted" ],
        "description" : "The user audio state 0 = Muted 1 = Unmuted"
      },
      "AudioAGCMode" : {
        "type" : "integer",
        "enum" : [ 0, 1, 2, 3 ],
        "x-enumNames" : [ "Unchanged", "AdaptiveAnalog", "AdaptiveDigital", "FixedDigital" ],
        "description" : "The user audio automatic gain control mode 0 = Unchanged 1 = AdaptiveAnalog 2 = AdaptiveDigital 3 = FixedDigital"
      },
      "VideoDevice" : {
        "type" : "object",
        "description" : "The details for the video device",
        "properties" : {
          "uniqueId" : {
            "type" : "string",
            "description" : "The unique id for the video device"
          },
          "displayName" : {
            "type" : "string",
            "description" : "The display name for the video device"
          }
        }
      },
      "VideoFormat" : {
        "type" : "object",
        "description" : "The details for the video capture format",
        "properties" : {
          "width" : {
            "type" : "integer"
          },
          "height" : {
            "type" : "integer"
          },
          "framerate" : {
            "type" : "number"
          },
          "minFrameRate" : {
            "type" : "number"
          },
          "maxFrameRate" : {
            "type" : "number"
          }
        }
      },
      "VideoState" : {
        "type" : "integer",
        "enum" : [ 0, 1 ],
        "x-enumNames" : [ "Off", "On" ],
        "description" : "The user video state 0 = Off 1 = On"
      },
      "VideoLimits" : {
        "type" : "object",
        "description" : "The maximum video limits",
        "properties" : {
          "maxWidth" : {
            "type" : "integer"
          },
          "maxHeight" : {
            "type" : "integer"
          },
          "maxFramerate" : {
            "type" : "number"
          }
        }
      }
    },
    "parameters" : {
      "Details" : {
        "name" : "details",
        "in" : "query",
        "schema" : {
          "type" : "string",
          "enum" : [ "all", "summary" ]
        },
        "description" : "The amount of detail to be returned"
      },
      "ApplyTo" : {
        "name" : "apply_to",
        "in" : "query",
        "schema" : {
          "type" : "string",
          "enum" : [ "all", "attendees", "presenters", "hosts" ]
        },
        "description" : "For bulk user operations the group of users to apply the operation (optional)"
      },
      "ConferenceActive" : {
        "name" : "active",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "description" : "True if the conference has active users, False otherwise"
      },
      "ConferenceState" : {
        "name" : "state",
        "in" : "query",
        "schema" : {
          "type" : "integer"
        },
        "description" : "Conference state 1 = Waiting to start 2 = Started 3 = Ended 4 = Deleted"
      },
      "ConferenceNew" : {
        "name" : "new",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "description" : "True if a new conference will be created, False otherwise"
      },
      "UserActive" : {
        "name" : "active",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "description" : "True if the user is active, False otherwise"
      },
      "MetaData1" : {
        "name" : "meta_data1",
        "in" : "query",
        "schema" : {
          "type" : "string"
        },
        "description" : "Optional customer supplied string used to filter response"
      },
      "MetaData2" : {
        "name" : "meta_data2",
        "in" : "query",
        "schema" : {
          "type" : "string"
        },
        "description" : "Optional customer supplied string used to filter response"
      },
      "MetaData3" : {
        "name" : "meta_data3",
        "in" : "query",
        "schema" : {
          "type" : "string"
        },
        "description" : "Optional customer supplied string used to filter response"
      },
      "AllAudio" : {
        "name" : "all_audio",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return all audio details"
      },
      "AllVideo" : {
        "name" : "all_video",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return all video details except formats"
      },
      "AudioPlaybackDevices" : {
        "name" : "audio_playback_devices",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the audio playback devices for the active user"
      },
      "AudioPlaybackDevice" : {
        "name" : "audio_playback_device",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the selected audio playback device for the active user"
      },
      "AudioRecordingDevices" : {
        "name" : "audio_recording_devices",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the audio recording devices for the active user"
      },
      "AudioRecordingDevice" : {
        "name" : "audio_recording_device",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the selected audio recording device for the active user"
      },
      "AudioRecordingDeviceVolume" : {
        "name" : "audio_recording_device_volume",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the hardware mixer volume (range 0 to 1) for the active user"
      },
      "AudioRecordingDeviceMuted" : {
        "name" : "audio_recording_device_muted",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the hardware mixer muted state for the active user"
      },
      "AudioPlaybackDeviceVolume" : {
        "name" : "audio_playback_device_volume",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the hardware mixer volume (range 0 to 1) for the active user"
      },
      "AudioState" : {
        "name" : "audio_state",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the audio state for the active user"
      },
      "AudioAGC" : {
        "name" : "audio_agc",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the audio AGC settings for the active user"
      },
      "AudioNS" : {
        "name" : "audio_ns",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the audio noise suppression settings for the active user"
      },
      "AudioAEC" : {
        "name" : "audio_aec",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the audio AEC settings for the active user"
      },
      "VideoCaptureDevices" : {
        "name" : "video_capture_devices",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the video capture devices for the active user"
      },
      "VideoCaptureDevice" : {
        "name" : "video_capture_device",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the selected video capture device for the active user"
      },
      "VideoState" : {
        "name" : "video_state",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the video state for the active user"
      },
      "VideoCaptureFormats" : {
        "name" : "video_capture_formats",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the video capture formats for the active user"
      },
      "VideoCaptureFormat" : {
        "name" : "video_capture_format",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the selected video capture format for the active user"
      },
      "VideoPreferWideScreen" : {
        "name" : "video_prefer_wide_screen",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the wide screen preference for the active user"
      },
      "VideoAllowHD" : {
        "name" : "video_allow_hd",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return the allow high def video preference for the active user"
      },
      "VideoEnforceLimits" : {
        "name" : "video_enforce_limits",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return whether video limit enforcement is enabled for the active user"
      },
      "VideoLimits" : {
        "name" : "video_limits",
        "in" : "query",
        "schema" : {
          "type" : "boolean"
        },
        "allowEmptyValue" : true,
        "description" : "Include to return whether video limits for the active user"
      }
    }
  }
}