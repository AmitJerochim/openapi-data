openapi: 3.0.1
info:
  title: 'PlayOffs : Petclinic API''s'
  description: Project use for Plateforme test in playoffs Sfeir
  version: 0.0.1
servers:
  - url: 'https://virtserver.swaggerhub.com/Sfeir2/mock-server/0.0.1'
    description: Generated server url
tags:
  - name: owners
    description: the Owner API
paths:
  '/owners/{id}/pets/':
    get:
      tags:
        - owners
      operationId: getPets
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
  '/owners/{id}':
    get:
      tags:
        - owners
      operationId: findById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Owner'
    put:
      tags:
        - owners
      operationId: updateOwner
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Owner'
    delete:
      tags:
        - owners
      operationId: deleteOwner
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
  /owners/:
    get:
      tags:
        - owners
      operationId: findAll
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageOwner'
    post:
      tags:
        - owners
      operationId: createOwner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Owner'
  /pets/:
    get:
      tags:
        - pet-controller
      operationId: findAll_1
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePet'
    post:
      tags:
        - pet-controller
      operationId: createPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pet'
  '/pets/{id}':
    get:
      tags:
        - pet-controller
      operationId: findById_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pet'
    put:
      tags:
        - pet-controller
      operationId: updatePet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pet'
    delete:
      tags:
        - pet-controller
      operationId: deletePet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
  '/pets/nameLike/{name}':
    get:
      tags:
        - pet-controller
      operationId: findAllByNameLike
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
  '/pets/weightLessThan/{weight}':
    get:
      tags:
        - pet-controller
      operationId: findAllByWeightLessThan
      parameters:
        - name: weight
          in: path
          required: true
          schema:
            type: number
            format: float
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
  /vets/:
    get:
      tags:
        - vet-controller
      operationId: findAll_2
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageVet'
    post:
      tags:
        - vet-controller
      operationId: createVet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vet'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Vet'
  '/vets/{id}':
    get:
      tags:
        - vet-controller
      operationId: findById_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Vet'
    put:
      tags:
        - vet-controller
      operationId: updateVet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vet'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Vet'
    delete:
      tags:
        - vet-controller
      operationId: deleteVet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
  '/visits/descriptionLike/{description}':
    get:
      tags:
        - visit-controller
      operationId: findAllByDescriptionLike
      parameters:
        - name: description
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visit'
  '/visits/{id}':
    get:
      tags:
        - visit-controller
      operationId: findById_3
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Visit'
    put:
      tags:
        - visit-controller
      operationId: updateVisit
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Visit'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Visit'
    delete:
      tags:
        - visit-controller
      operationId: deleteVisit
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
  /visits/:
    get:
      tags:
        - visit-controller
      operationId: findAll_3
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageVisit'
    post:
      tags:
        - visit-controller
      operationId: createVisit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Visit'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Visit'
components:
  schemas:
    Owner:
      required:
        - address
        - birthDay
        - city
        - id
        - lastName
        - telephone
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the Owner.
          format: int64
          example: 1
        firstName:
          maxLength: 30
          minLength: 3
          type: string
          description: First name of the Owner.
          example: Jhon
        lastName:
          maxLength: 30
          minLength: 3
          type: string
          description: Last name of the Owner.
          example: Doe
        address:
          maxLength: 50
          minLength: 1
          type: string
          description: Address of the Owner.
          example: 3 rue de la
        city:
          maxLength: 30
          minLength: 0
          type: string
          description: City of the Owner.
          example: Neuilly-sur-seine
        telephone:
          type: string
          description: Telephone number of the Owner.
          example: 0123456789
        homePage:
          maxLength: 30
          minLength: 0
          type: string
          description: Homepage of the Owner.
          example: 'http://sfeir.com'
        email:
          maxLength: 30
          minLength: 6
          type: string
          description: Email of the Owner.
          example: doe.j@sfeir.com
        birthDay:
          type: string
          description: Birthday number of the Owner.
          format: date
    Pet:
      required:
        - id
        - name
        - type
        - weight
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the Pet.
          format: int64
          example: 1
        name:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Name of the Pet.
          example: Rex
        weight:
          minimum: 0
          type: number
          description: Weight of the Pet.
          format: float
          example: 15
        owner:
          $ref: '#/components/schemas/Owner'
        type:
          type: string
          enum:
            - Dog
            - Cat
            - Bird
    PageOwner:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Owner'
        number:
          type: integer
          format: int32
    Pageable:
      type: object
      properties:
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
        sort:
          $ref: '#/components/schemas/Sort'
        offset:
          type: integer
          format: int64
    Sort:
      type: object
      properties:
        unsorted:
          type: boolean
        sorted:
          type: boolean
    PagePet:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        number:
          type: integer
          format: int32
    Vet:
      required:
        - address
        - birthDay
        - city
        - employedSince
        - id
        - lastName
        - telephone
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the Owner.
          format: int64
          example: 1
        firstName:
          maxLength: 30
          minLength: 3
          type: string
          description: First name of the Owner.
          example: Jhon
        lastName:
          maxLength: 30
          minLength: 3
          type: string
          description: Last name of the Owner.
          example: Doe
        address:
          maxLength: 50
          minLength: 1
          type: string
          description: Address of the Owner.
          example: 3 rue de la
        city:
          maxLength: 30
          minLength: 0
          type: string
          description: City of the Owner.
          example: Neuilly-sur-seine
        telephone:
          type: string
          description: Telephone number of the Owner.
          example: 0123456789
        homePage:
          maxLength: 30
          minLength: 0
          type: string
          description: Homepage of the Owner.
          example: 'http://sfeir.com'
        email:
          maxLength: 30
          minLength: 6
          type: string
          description: Email of the Owner.
          example: doe.j@sfeir.com
        birthDay:
          type: string
          description: Birthday number of the Owner.
          format: date
        employedSince:
          type: string
          format: date
        specialty:
          type: string
          enum:
            - Cardiology
            - Dentistry
            - Nutrition
    PageVet:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Vet'
        number:
          type: integer
          format: int32
    Visit:
      required:
        - pet
        - visitDate
      type: object
      properties:
        description:
          maxLength: 255
          minLength: 0
          type: string
        visitDate:
          type: string
          format: date
        pet:
          $ref: '#/components/schemas/Pet'
        vet:
          $ref: '#/components/schemas/Vet'
        id:
          type: integer
          format: int64
    PageVisit:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Visit'
        number:
          type: integer
          format: int32
