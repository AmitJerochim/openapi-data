{
  "openapi" : "3.0.2",
  "info" : {
    "title" : "Leoo Backend API",
    "version" : "1.0"
  },
  "tags" : [ {
    "name" : "Authentication",
    "description" : "Logins and access control. These endpoints are publicly accessible."
  }, {
    "name" : "Client Accessible"
  }, {
    "name" : "Broker Accessible"
  }, {
    "name" : "Admin Accessible"
  } ],
  "paths" : {
    "/auth/login" : {
      "post" : {
        "summary" : "Login",
        "description" : "This authenticates the supplied user credentials and returns JWT access tokens. Rate-limiting should be implemented on this endpoint.",
        "tags" : [ "Authentication" ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email" : {
                    "type" : "string"
                  },
                  "password" : {
                    "type" : "string"
                  },
                  "remember_me" : {
                    "type" : "boolean"
                  }
                }
              }
            }
          },
          "description" : ""
        },
        "responses" : {
          "200" : {
            "description" : "Login Successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "access_token" : {
                      "description" : "The JWT access token used to authenticate as the user",
                      "type" : "string"
                    },
                    "refresh_token" : {
                      "description" : "A JWT refresh token which will be provided if remember_me is true in the request",
                      "type" : "string"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Login Failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "Request Rate-Limited"
          }
        }
      }
    },
    "/auth/forgot-password" : {
      "post" : {
        "summary" : "Forgot Password",
        "description" : "Sends a verification code to the user's phone. Rate-limiting should be implemented on this endpoint.",
        "tags" : [ "Authentication" ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "phone_number" : {
                    "type" : "string",
                    "description" : "The user's phone number"
                  }
                }
              }
            }
          },
          "description" : ""
        },
        "responses" : {
          "200" : {
            "description" : "OTP Sent to User"
          },
          "400" : {
            "description" : "Forgot Password Failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "Request Rate-Limited"
          }
        }
      }
    },
    "/auth/verify-otp" : {
      "post" : {
        "summary" : "Verify OTP",
        "description" : "Verifies the validaty of the supplied OTP. Rate-limiting should be implemented on this endpoint.",
        "tags" : [ "Authentication" ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "phone_number" : {
                    "type" : "string",
                    "description" : "The user's phone number"
                  },
                  "otp_code" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "description" : ""
        },
        "responses" : {
          "200" : {
            "description" : "OTP Sent to User"
          },
          "400" : {
            "description" : "Invalid OTP Code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "Request Rate-Limited"
          }
        }
      }
    },
    "/auth/reset-password" : {
      "post" : {
        "summary" : "Reset Password",
        "description" : "Resets the user's password. Rate-limiting should be implemented on this endpoint.",
        "tags" : [ "Authentication" ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "phone_number" : {
                    "type" : "string"
                  },
                  "otp_code" : {
                    "type" : "string"
                  },
                  "new_password" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "description" : ""
        },
        "responses" : {
          "200" : {
            "description" : "Password Reset"
          },
          "400" : {
            "description" : "Failed to Reset Password",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "422" : {
            "description" : "Request Rate-Limited"
          }
        }
      }
    },
    "/me" : {
      "get" : {
        "summary" : "Get Current User Details",
        "description" : "Gets the current user's details",
        "tags" : [ "Client Accessible", "Broker Accessible", "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Details Retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CurrentUserDetails"
                }
              }
            }
          }
        }
      }
    },
    "/documents" : {
      "get" : {
        "summary" : "List My Documents",
        "description" : "Lists the user's uploaded documents",
        "tags" : [ "Client Accessible", "Broker Accessible", "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Documents Retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create Document",
        "description" : "Creates a new document returning the S3 signed for upload.",
        "tags" : [ "Client Accessible", "Broker Accessible", "Admin Accessible" ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DocumentFields"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Document Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "string",
                      "description" : "A signed S3 URL to upload the document"
                    },
                    "upload_url" : {
                      "type" : "string",
                      "description" : "A signed S3 URL to upload the document"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/documents/{id}" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "The document ID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "summary" : "Get Document",
        "description" : "Gets a specific document with a S3 signed URL to download the file.",
        "tags" : [ "Client Accessible", "Broker Accessible", "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Document Retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DocumentWithDownload"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Document not found"
          }
        }
      },
      "delete" : {
        "summary" : "Delete Document",
        "description" : "Deletes a document and removes it from S3.",
        "tags" : [ "Client Accessible", "Broker Accessible", "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Document Deleted"
          },
          "404" : {
            "description" : "Document not found"
          }
        }
      }
    },
    "/documents/{id}/confirm" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "The document ID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "summary" : "Confirm Document Uploaded",
        "description" : "Confirms a document has been uploaded to S3",
        "tags" : [ "Client Accessible", "Broker Accessible", "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Document Confirmed"
          },
          "400" : {
            "description" : "Document not in S3/Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Document not found"
          }
        }
      }
    },
    "/brokers" : {
      "get" : {
        "summary" : "List Brokers",
        "description" : "Lists the broker accounts in the system.",
        "tags" : [ "Admin Accessible" ],
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "A generic search filter (name, company, phone, email)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Brokers Retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Broker"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create Broker",
        "description" : "Creates an new broker account.",
        "tags" : [ "Admin Accessible" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BrokerFields"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Broker Retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Broker"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/brokers/{id}" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "The broker ID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "summary" : "Get Broker",
        "description" : "Gets the details of a specific broker.",
        "tags" : [ "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Broker Retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Broker"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find broker"
          }
        }
      },
      "put" : {
        "summary" : "Create Broker",
        "description" : "Creates an new broker account.",
        "tags" : [ "Admin Accessible" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BrokerFields"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Broker Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Broker"
                }
              }
            }
          },
          "400" : {
            "description" : "C",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find broker"
          }
        }
      },
      "delete" : {
        "summary" : "Delete Broker",
        "description" : "Deletes a broker account",
        "tags" : [ "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Broker Deleted"
          },
          "404" : {
            "description" : "Could not find broker"
          }
        }
      }
    },
    "/clients" : {
      "get" : {
        "summary" : "Get Clients",
        "description" : "Gets the clients belonging to the application",
        "tags" : [ "Admin Accessible" ],
        "parameters" : [ {
          "name" : "broker_id",
          "in" : "query",
          "required" : false,
          "description" : "Filter to clients of a specific broker",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "search",
          "in" : "query",
          "required" : false,
          "description" : "A generic search filter (name, phone, email)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Clients Retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Client"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create Client",
        "description" : "Creates a client account.",
        "tags" : [ "Admin Accessible" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientFields"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Client Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Client"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/clients/{id}" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "The client ID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "summary" : "Get Client",
        "description" : "Gets a specific client",
        "tags" : [ "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Client Retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Client"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "put" : {
        "summary" : "Update Client",
        "description" : "Updates a client account.",
        "tags" : [ "Admin Accessible" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClientFields"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Client Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Client"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "delete" : {
        "summary" : "Delete Client",
        "description" : "Deletes a client account.",
        "tags" : [ "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Client Deleted"
          },
          "404" : {
            "description" : "Client not found"
          }
        }
      }
    },
    "/loan-applications" : {
      "get" : {
        "summary" : "List Loan Applications",
        "description" : "Gets the loan applications belonging to the current user or all if the user is an admin.",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "required" : false,
          "description" : "A generic search filter",
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Loan Applications Retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LoanApplicationOverview"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create Loan Applications",
        "description" : "Creates a loan application.",
        "tags" : [ "Admin Accessible" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoanApplicationMutateFields"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Loan Application Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoanApplication"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/loan-applications/{id}" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The loan ID or share ID",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "summary" : "Gets a specific loan application.",
        "description" : "Gets a specific loan application by it's id or sharing id.",
        "tags" : [ "Client Accessible", "Broker Accessible", "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Loan Application Retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LoanApplication"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Loan application not found"
          }
        }
      },
      "put" : {
        "summary" : "Update Loan Application",
        "description" : "Updates a loan application and it's associated relations.",
        "tags" : [ "Client Accessible", "Broker Accessible", "Admin Accessible" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoanApplicationMutateFields"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Loan Application Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoanApplication"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Loan application not found"
          }
        }
      },
      "delete" : {
        "summary" : "Delete Loan Application",
        "description" : "Deletes a loan application.",
        "tags" : [ "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Loan Application Deleted"
          },
          "404" : {
            "description" : "Loan application not found"
          }
        }
      }
    },
    "/loan-applications/{id}/request-review" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The loan ID or share ID",
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "summary" : "Request Broker Review",
        "description" : "Requests this loan application to be reviewed by the broker.",
        "tags" : [ "Client Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Review Requested"
          },
          "404" : {
            "description" : "Loan application not found"
          }
        }
      }
    },
    "/loan-applications/{id}/submit" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The loan ID or share ID",
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "summary" : "Submit Application",
        "description" : "Submits the application for an admin review.",
        "tags" : [ "Client Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Application Submitted"
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Loan application not found"
          }
        }
      }
    },
    "/loan-applications/{id}/broker-response" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The loan ID or share ID",
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "summary" : "Save Broker Review",
        "description" : "Saves the broker review and notifies the client.",
        "tags" : [ "Broker Accessible" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplicationBrokerResponseFields"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Broker Review Sent",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationBrokerResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Loan application not found"
          }
        }
      }
    },
    "/loan-applications/{id}/submit-to-interfi" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "required" : true,
        "description" : "The loan ID or share ID",
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "summary" : "Submit to Interfi",
        "description" : "Submits to loan application to Interfi.",
        "tags" : [ "Admin Accessible" ],
        "responses" : {
          "200" : {
            "description" : "Loan Application Submitted"
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Loan application not found"
          },
          "500" : {
            "description" : "Error occurred while submitting to Interfi"
          }
        }
      }
    }
  },
  "security" : [ ],
  "servers" : [ ],
  "components" : {
    "links" : { },
    "callbacks" : { },
    "schemas" : {
      "GenericEntity" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "created_at" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated_at" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "CurrentUserDetails" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "number"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "admin", "broker", "client" ]
            },
            "name" : {
              "type" : "string"
            },
            "company_name" : {
              "type" : "string"
            },
            "email" : {
              "type" : "string"
            },
            "phone_number" : {
              "type" : "string"
            }
          }
        } ]
      },
      "GenericErrorResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "description" : "A constant string representing the error type. This can differ per endpoint.",
            "example" : "unknown_user",
            "type" : "string"
          },
          "message" : {
            "description" : "A detailed error message.",
            "example" : "An account with the supplied email address cannot be found",
            "type" : "string"
          },
          "field_errors" : {
            "description" : "A map of fields to their specific error messages",
            "type" : "object",
            "example" : {
              "email" : "Email address could not be found"
            },
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "BrokerFields" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "company_name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone_number" : {
            "type" : "string"
          }
        }
      },
      "Broker" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "$ref" : "#/components/schemas/BrokerFields"
        } ]
      },
      "DocumentFields" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "compliance", "passport", "proof-of-id", "signature", "servicability-calendar", "identification-form", "misc" ]
          },
          "file_name" : {
            "type" : "string"
          },
          "mime_type" : {
            "type" : "string"
          }
        }
      },
      "Document" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "$ref" : "#/components/schemas/DocumentFields"
        } ]
      },
      "DocumentWithDownload" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Document"
        }, {
          "type" : "object",
          "properties" : {
            "download_url" : {
              "type" : "string",
              "description" : "A signed S3 URL to download the document"
            }
          }
        } ]
      },
      "ClientFields" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone_number" : {
            "type" : "string"
          }
        }
      },
      "Client" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "$ref" : "#/components/schemas/ClientFields"
        } ]
      },
      "Iso2CountryCode" : {
        "type" : "string",
        "maxLength" : 2,
        "minLength" : 2,
        "description" : "Country ISO (2) code"
      },
      "IsoCurrencyCode" : {
        "type" : "string",
        "maxLength" : 3,
        "minLength" : 3,
        "description" : "Currency ISO code"
      },
      "ApplicationSecurityDetails" : {
        "type" : "object",
        "properties" : {
          "owner_names" : {
            "type" : "string"
          },
          "project_name" : {
            "type" : "string"
          },
          "unit_house_number" : {
            "type" : "string"
          },
          "street_name" : {
            "type" : "string"
          },
          "suburb_or_town" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "postcode" : {
            "type" : "string"
          },
          "property_size_m2" : {
            "type" : "number"
          },
          "type_of_security" : {
            "type" : "string"
          },
          "property_use" : {
            "type" : "string"
          },
          "expected_rental_income_monthly" : {
            "type" : "number"
          },
          "fixed_rate_term_months" : {
            "type" : "boolean"
          },
          "contact_for_access" : {
            "type" : "string"
          },
          "contact_name" : {
            "type" : "string"
          },
          "contact_phone_number" : {
            "type" : "string"
          },
          "notes_for_access" : {
            "type" : "string"
          }
        }
      },
      "ApplicationContact" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "solicitor", "agent", "builder" ]
          },
          "firm_name" : {
            "type" : "string"
          },
          "contact_name" : {
            "type" : "string"
          },
          "unit_house_number" : {
            "type" : "string"
          },
          "street_name" : {
            "type" : "string"
          },
          "suburb_or_town" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "postcode" : {
            "type" : "string"
          },
          "country" : {
            "$ref" : "#/components/schemas/Iso2CountryCode"
          },
          "phone_number" : {
            "type" : "string"
          },
          "fax_number" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "permission_to_contact" : {
            "type" : "boolean"
          }
        }
      },
      "ApplicationBrokerResponseFields" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "approve", "decline" ]
          },
          "response" : {
            "type" : "string"
          }
        }
      },
      "ApplicationBrokerResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "$ref" : "#/components/schemas/ApplicationBrokerResponseFields"
        } ]
      },
      "LoanApplicant" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "type" : "object",
          "properties" : {
            "title" : {
              "type" : "string"
            },
            "first_name" : {
              "type" : "string"
            },
            "middle_name" : {
              "type" : "string"
            },
            "last_name" : {
              "type" : "string"
            },
            "role" : {
              "type" : "string",
              "enum" : [ "applicant", "guarantor" ]
            },
            "existing_customer" : {
              "type" : "boolean"
            },
            "gender" : {
              "type" : "string",
              "enum" : [ "m", "f" ]
            },
            "date_of_birth" : {
              "type" : "string",
              "format" : "date"
            },
            "relationship_status" : {
              "type" : "string"
            },
            "dependants" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicantDependant"
              }
            },
            "politically_exposed" : {
              "type" : "boolean"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "individual", "company-or-trust" ]
            },
            "company_or_trust_name" : {
              "type" : "string"
            },
            "certified_asic_extract" : {
              "type" : "boolean"
            },
            "certified_trust_deed" : {
              "type" : "boolean"
            },
            "tax_registered_in_another_country" : {
              "type" : "boolean"
            },
            "tax_country" : {
              "$ref" : "#/components/schemas/Iso2CountryCode"
            },
            "tax_id_number" : {
              "type" : "string"
            },
            "australian_citizen" : {
              "type" : "boolean"
            },
            "australian_resident" : {
              "type" : "boolean"
            },
            "visa_type" : {
              "type" : "string"
            },
            "visa_type_other" : {
              "type" : "string"
            },
            "country_of_citizenship" : {
              "$ref" : "#/components/schemas/Iso2CountryCode"
            },
            "drivers_license_number" : {
              "type" : "string"
            },
            "drivers_license_state" : {
              "type" : "string"
            },
            "id_card" : {
              "type" : "string"
            },
            "mobile_phone" : {
              "type" : "string",
              "description" : "Convert to and validate as E164 format"
            },
            "work_phone" : {
              "type" : "string",
              "description" : "Convert to and validate as E164 format"
            },
            "home_phone" : {
              "type" : "string",
              "description" : "Convert to and validate as E164 format"
            },
            "email_address" : {
              "type" : "string"
            },
            "best_form_of_comms" : {
              "type" : "string"
            },
            "wechat_id" : {
              "type" : "string"
            },
            "agree_to_terms" : {
              "type" : "boolean"
            },
            "expenses_general" : {
              "type" : "string"
            },
            "expenses_foreseeable" : {
              "type" : "boolean"
            },
            "expenses_financial_stress" : {
              "type" : "boolean"
            },
            "signature" : {
              "$ref" : "#/components/schemas/DocumentWithDownload"
            },
            "authorised" : {
              "type" : "boolean"
            },
            "authorised_privacy" : {
              "type" : "boolean"
            },
            "authorisation_signature" : {
              "$ref" : "#/components/schemas/DocumentWithDownload"
            },
            "declaration_bankruptcy" : {
              "type" : "boolean"
            },
            "declaration_liquidation" : {
              "type" : "boolean"
            },
            "declaration_court" : {
              "type" : "boolean"
            },
            "declaration_foreclosure" : {
              "type" : "boolean"
            },
            "declaration_default" : {
              "type" : "boolean"
            },
            "declaration_accuracy" : {
              "type" : "boolean"
            },
            "declaration_signature" : {
              "$ref" : "#/components/schemas/DocumentWithDownload"
            },
            "addresses" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicantAddress"
              }
            },
            "employments" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicantEmployment"
              }
            },
            "incomes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicantIncome"
              }
            },
            "self_employments" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicantSelfEmployment"
              }
            },
            "assets" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicantAsset"
              }
            },
            "liabilities" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicantLiability"
              }
            },
            "expenses" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicantExpenses"
              }
            }
          }
        } ]
      },
      "ApplicantAddress" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "enum" : [ "current", "previous", "postal" ]
            },
            "unit_house_number" : {
              "type" : "string"
            },
            "street_name" : {
              "type" : "string"
            },
            "suburb_or_town" : {
              "type" : "string"
            },
            "state" : {
              "type" : "string"
            },
            "postcode" : {
              "type" : "string"
            },
            "country" : {
              "$ref" : "#/components/schemas/Iso2CountryCode"
            },
            "months_at_address" : {
              "type" : "number"
            }
          }
        } ]
      },
      "ApplicantIncome" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "enum" : [ "employment", "overtime", "bonus", "commision", "government", "dividends", "pension", "rental", "other" ]
            },
            "amount" : {
              "type" : "number"
            },
            "frequency" : {
              "type" : "string",
              "enum" : [ "annually", "monthly", "weekly" ]
            },
            "currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            }
          }
        } ]
      },
      "ApplicantSelfEmployment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "type" : "object",
          "properties" : {
            "business_type" : {
              "type" : "string"
            },
            "gov_benefits_percent" : {
              "type" : "number"
            },
            "gov_benefits_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "gross_income" : {
              "type" : "number"
            },
            "gross_income_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "total_expenses" : {
              "type" : "number"
            },
            "total_expenses_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "net_profit_before_tax" : {
              "type" : "number"
            },
            "net_profit_before_tax_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "add_backs_depreciation" : {
              "type" : "number"
            },
            "add_backs_depreciation_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "add_backs_interest" : {
              "type" : "number"
            },
            "add_backs_interest_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "add_backs_other" : {
              "type" : "number"
            },
            "add_backs_other_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "add_backs_total" : {
              "type" : "number"
            },
            "add_backs_total_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "loan_commitment" : {
              "type" : "number"
            },
            "loan_commitment_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            }
          }
        } ]
      },
      "ApplicantEmployment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "enum" : [ "current", "previous" ]
            },
            "employment_type" : {
              "type" : "string"
            },
            "employment_status" : {
              "type" : "string"
            },
            "probation" : {
              "type" : "boolean"
            },
            "employer_name" : {
              "type" : "string"
            },
            "position" : {
              "type" : "string"
            },
            "unit_house_number" : {
              "type" : "string"
            },
            "street_name" : {
              "type" : "string"
            },
            "suburb_or_town" : {
              "type" : "string"
            },
            "state" : {
              "type" : "string"
            },
            "postcode" : {
              "type" : "string"
            },
            "country" : {
              "$ref" : "#/components/schemas/Iso2CountryCode"
            },
            "phone_number" : {
              "type" : "string"
            },
            "contact_person" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ApplicantAsset" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "enum" : [ "property", "vehicle", "savings-account", "other" ]
            },
            "other_type" : {
              "type" : "string"
            },
            "value" : {
              "type" : "number"
            },
            "value_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "outstanding" : {
              "type" : "number"
            },
            "outstanding_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "property_unit_house_number" : {
              "type" : "string"
            },
            "property_street_name" : {
              "type" : "string"
            },
            "property_suburb_or_town" : {
              "type" : "string"
            },
            "property_state" : {
              "type" : "string"
            },
            "property_postcode" : {
              "type" : "string"
            },
            "property_country" : {
              "$ref" : "#/components/schemas/Iso2CountryCode"
            },
            "vehicle_type" : {
              "type" : "string"
            },
            "vehicle_make" : {
              "type" : "string"
            },
            "vehicle_model" : {
              "type" : "string"
            },
            "vehicle_year" : {
              "type" : "number"
            },
            "account_institution" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ApplicantLiability" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "enum" : [ "loan", "credit-card", "other" ]
            },
            "other_type" : {
              "type" : "string"
            },
            "owing" : {
              "type" : "number"
            },
            "owing_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "limit" : {
              "type" : "number"
            },
            "limit_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "financial_institution" : {
              "type" : "string"
            },
            "status_post_settlement" : {
              "type" : "string"
            },
            "loan_interest_rate" : {
              "type" : "number"
            },
            "loan_repayment" : {
              "type" : "number"
            },
            "loan_repayment_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "loan_remaining_term" : {
              "type" : "string"
            },
            "loan_interest_only_term" : {
              "type" : "string"
            },
            "card_type" : {
              "type" : "string"
            }
          }
        } ]
      },
      "ApplicantExpenses" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string"
            },
            "amount" : {
              "type" : "number"
            },
            "amount_currency" : {
              "$ref" : "#/components/schemas/IsoCurrencyCode"
            },
            "continue_after_settlement" : {
              "type" : "boolean"
            }
          }
        } ]
      },
      "ApplicantDependant" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string"
            },
            "date_of_birth" : {
              "type" : "string",
              "format" : "date"
            }
          }
        } ]
      },
      "LoanPurpose" : {
        "type" : "string",
        "enum" : [ "purchase", "refinance", "equity-release", "construction" ]
      },
      "LoanType" : {
        "type" : "string",
        "enum" : [ "owner-occupied", "investment" ]
      },
      "LoanApplicationCommonFields" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/LoanType"
          },
          "purpose" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LoanPurpose"
            }
          },
          "objectives" : {
            "type" : "string"
          },
          "product_name" : {
            "type" : "string"
          },
          "purchase_price_aud" : {
            "type" : "number"
          },
          "deposit_paid_aud" : {
            "type" : "number"
          },
          "settlement_date" : {
            "type" : "string",
            "format" : "date"
          },
          "loan_amount_aud" : {
            "type" : "number"
          },
          "loan_term_years" : {
            "type" : "boolean"
          },
          "fixed_rate_term_months" : {
            "type" : "boolean"
          },
          "estimated_lvr" : {
            "type" : "number"
          },
          "loan_type" : {
            "type" : "string",
            "enum" : [ "principal-and-interest", "interest-only" ]
          },
          "interest_only_term_months" : {
            "type" : "boolean"
          },
          "interest_only_reason" : {
            "type" : "string"
          },
          "rate_type" : {
            "type" : "string",
            "enum" : [ "variable", "fixed" ]
          },
          "repayment_frequency" : {
            "type" : "string",
            "enum" : [ "monthly" ]
          },
          "electronic_copy_authorised" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "myself", "solicitor", "agent", "builder", "broker" ]
            }
          },
          "client_notes" : {
            "type" : "string"
          },
          "broker_declaration_objectives" : {
            "type" : "boolean",
            "description" : "This fields can on be viewed/modified by brokers or admins"
          },
          "broker_declaration_suitability" : {
            "type" : "boolean",
            "description" : "This fields can on be viewed/modified by brokers or admins"
          },
          "broker_declaration_interest_only" : {
            "type" : "boolean",
            "description" : "This fields can on be viewed/modified by brokers or admins"
          },
          "broker_declaration_no_conflict" : {
            "type" : "boolean",
            "description" : "This fields can on be viewed/modified by brokers or admins"
          },
          "broker_declaration_signature" : {
            "description" : "This fields can on be viewed/modified by brokers or admins",
            "$ref" : "#/components/schemas/DocumentWithDownload"
          },
          "security_details" : {
            "$ref" : "#/components/schemas/ApplicationSecurityDetails"
          },
          "contacts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ApplicationContact"
            }
          },
          "broker_responses" : {
            "description" : "This field can only be modified by brokers",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ApplicationBrokerResponse"
            }
          },
          "applicants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LoanApplicant"
            }
          },
          "documents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DocumentWithDownload"
            }
          }
        }
      },
      "LoanApplicationFields" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/LoanApplicationCommonFields"
        }, {
          "type" : "object",
          "required" : [ "client", "broker", "purpose", "type" ],
          "properties" : {
            "broker" : {
              "$ref" : "#/components/schemas/Broker"
            },
            "client" : {
              "$ref" : "#/components/schemas/Client"
            }
          }
        } ]
      },
      "LoanApplicationMutateFields" : {
        "allOf" : [ {
          "type" : "object",
          "required" : [ "clientId", "brokerId", "purpose", "type" ],
          "properties" : {
            "brokerId" : {
              "type" : "string"
            },
            "clientId" : {
              "type" : "string"
            }
          }
        }, {
          "$ref" : "#/components/schemas/LoanApplicationCommonFields"
        } ]
      },
      "LoanApplicationEntity" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GenericEntity"
        }, {
          "type" : "object",
          "properties" : {
            "status" : {
              "type" : "string",
              "enum" : [ "in-progress", "broker-review", "broker-approved", "broker-declined", "admin-review", "submitted" ]
            },
            "share_id" : {
              "type" : "string",
              "description" : "A 32 char random alpha-numeric string for sharing this loan application"
            }
          }
        } ]
      },
      "LoanApplication" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/LoanApplicationEntity"
        }, {
          "$ref" : "#/components/schemas/LoanApplicationFields"
        } ]
      },
      "LoanApplicationOverview" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/LoanApplicationEntity"
        }, {
          "type" : "object",
          "properties" : {
            "broker" : {
              "$ref" : "#/components/schemas/Broker"
            },
            "client" : {
              "$ref" : "#/components/schemas/Client"
            },
            "type" : {
              "$ref" : "#/components/schemas/LoanType"
            },
            "purpose" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/LoanPurpose"
              }
            }
          }
        } ]
      }
    },
    "securitySchemes" : {
      "JWT Authentication" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "Authorization"
      }
    }
  }
}