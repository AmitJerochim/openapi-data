{"openapi":"3.0.0","info":{"version":"v1","title":"Authress","description":"<p>\n<h1>Authorization</h1>\n<p>Authorization for Authress is handled one of two different ways. Both mechanisms use oauth2 <i>Bearer</i> tokens.</p>\n<br>\n<strong>Identity Provider JWT</strong>\n<p>Hook up your preferred identity provider directly to Authress. Authress will verify JWTs sourced from that identitfy provider and allow direct integration with these APIs. Any OIDC JWT provider works, Google, Auth0, Okta, etc... With this mechanism your web app can make direct calls to the permissions API on behalf of your users.\n<br>\n<a href=\"https://authress.com/app/#/manage?focus=identity\">Link identity provider</a>\n</p>\n<br>\n<strong>Authress Clients</strong>\n<p>Regardless of using direct identity provider integration, with the API you can create Authress clients which can call any of the methods on the API. Your users won't be able to directly make API calls, all web app integrations must go through a service which stores the Authress private key.\n<br>\n<a href=\"https://authress.com/app/#/manage?focus=clients\">Create Authress service client</a>\n</p><br>","contact":{"name":"Authress Support","email":"support@authress.com"}},"paths":{"/v1/users/{userId}/resources/{resourceUri}/permissions":{"get":{"summary":"Get the permissions a user has to a resource.","description":"Get a summary of the permissions a user has to a particular resource.","tags":["User Permissions"],"parameters":[{"name":"userId","in":"path","description":"The user to check permissions on","required":true,"schema":{"type":"string"}},{"name":"resourceUri","in":"path","description":"The uri path of a resource to validate, must be URL encoded, uri segments are allowed.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Success. The user has permissions","content":{"application/links+json":{"schema":{"type":"object","description":"A collect of permissions that the user has to a resource.","required":["accountId","userId","permissions"],"properties":{"account":{"type":"object","properties":{"accountId":{"type":"string"}}},"userId":{"type":"string"},"permissions":{"description":"A list of the permissions","type":"array","items":{"$ref":"#/components/schemas/PermissionObject"}}}}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"404":{"description":"Not found. The user doesn't have any permissions to the resource including the one requested."}},"security":[{"oauth2":[]}]}},"/v1/users/{userId}/resources/{resourceUri}/permissions/{permission}":{"get":{"summary":"Check to see if a user has permissions to a resource.","description":"Does the user have the specified permissions to the resource?","tags":["User Permissions"],"parameters":[{"name":"userId","in":"path","description":"The user to check permissions on","required":true,"schema":{"type":"string"}},{"name":"resourceUri","in":"path","description":"The uri path of a resource to validate, must be URL encoded, uri segments are allowed, the resource must be a full path, and permissions are not inhereted by sub resources.","required":true,"schema":{"type":"string"}},{"name":"permission","in":"path","description":"Permission to check, '*' and scoped permissions can also be checked here.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Success. The user has permissions","content":{"application/links+json":{"schema":{"type":"object"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to the resource, but they have other permissions to the same resource."},"404":{"description":"Not found. The user doesn't have any permissions to the resource including the one requested."}},"security":[{"oauth2":[]}]}},"/v1/resources":{"get":{"summary":"List resource configurations","description":"Permissions can be set globally at a resource level. Lists any resources with a globally set resource policy","tags":["Resource Permissions"],"responses":{"200":{"description":"Success.","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/ResourcePermissionCollection"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"404":{"description":"Not found. The user doesn't have permission to the resource."}},"security":[{"oauth2":[]}]}},"/v1/resources/{resourceUri}":{"parameters":[{"name":"resourceUri","in":"path","description":"The uri path of a resource to validate, must be URL encoded, uri segments are allowed.","required":true,"schema":{"type":"string"}}],"get":{"summary":"Get a resource permissions object.","description":"Permissions can be set globally at a resource level. This will apply to all users in an account.","tags":["Resource Permissions"],"responses":{"200":{"description":"Success.","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/ResourcePermission"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"404":{"description":"Not found. The user doesn't have permission to the resource."}},"security":[{"oauth2":[]}]},"put":{"summary":"Update a resource permissions object.","description":"Updates the global permissions on a resource. This applies to all users in an account.","tags":["Resource Permissions"],"requestBody":{"required":true,"description":"The contents of the permission to set on the resource. Overwrites existing data.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourcePermission"}}}},"responses":{"200":{"description":"Success.","content":{"application/links+json":{"schema":{"type":"object"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to the resource, but they have other permissions to the same resource."},"404":{"description":"Not found. The user doesn't have permission to the resource."}},"security":[{"oauth2":[]}]}},"/v1/records":{"get":{"summary":"Get all account records.","description":"Returns a paginated records list for the account. Only records the user has access to are returned.","tags":["Access Records"],"parameters":[],"responses":{"200":{"description":"Success.","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/AccessRecord"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to fetch account records, but has other account permissions"},"404":{"description":"Not found. THe user doesn't have permissions to read any account information."}},"security":[{"oauth2":[]}]},"post":{"summary":"Create a new access record","description":"Specify user roles for specific resources.","tags":["Access Records"],"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AccessRecord"}}}},"responses":{"200":{"description":"Success. Access record created","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/AccessRecord"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to create records."},"404":{"description":"Not found. The user doesn't have permission to update the account."}},"security":[{"oauth2":[]}]}},"/v1/records/{recordId}":{"parameters":[{"name":"recordId","in":"path","description":"The identifier of the access record.","required":true,"schema":{"type":"string"}}],"get":{"summary":"Get an access record for the account.","description":"Access records contain information assigning permissions to users for resources.","tags":["Access Records"],"responses":{"200":{"description":"Success. The user has permissions","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/AccessRecord"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to the access record, but they have other permissions to the same account."},"404":{"description":"Not found. The user doesn't have any permissions to the access record or this access record does not exist."}},"security":[{"oauth2":[]}]},"put":{"summary":"Update an access record.","description":"Updates an access record adding or removing user permissions to resources.","tags":["Access Records"],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AccessRecord"}}}},"responses":{"200":{"description":"Success. Access record updated.","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/AccessRecord"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to update the access record."},"404":{"description":"Not found. The user doesn't have any permissions to the access record."}},"security":[{"oauth2":[]}]},"delete":{"summary":"Deletes an access record.","description":"Remove an access record, removing associated permissions from all users in record. If a user has a permission from another record, that permission will not be removed.","tags":["Access Records"],"responses":{"204":{"description":"Success. The access record has been deleted"},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to delete the access record."},"404":{"description":"Not found. The user doesn't have any permissions to the resource or the access record no longer exists."}},"security":[{"oauth2":[]}]}},"/v1/claims":{"post":{"summary":"Claim a resource by an allowed user","description":"Claim a resource by allowing a user to pick an identifier and recieve admin access to that resource if it hasn't already been claimed. This only works for resources specifically marked as <strong>CLAIM</strong>. The result will be a new access record listing that user as the admin for this resource.","tags":["Access Records"],"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ClaimRequest"}}}},"responses":{"200":{"description":"Success. The user has permissions","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/ClaimResponse"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to the resource collection to claim a sub resource."},"409":{"description":"AlreadyClaimed. The resource has already been claimed by another user or another user already has access to this resource. So admin access will not be given. The reason for this is to prevent preemptive stealing of admin access to these records."}},"security":[{"oauth2":[]}]}},"/v1/accounts":{"get":{"summary":"Get all accounts user has access to","description":"Returns a list of accounts that the user has access to.","tags":["Accounts"],"parameters":[],"responses":{"200":{"description":"Success.","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/AccountCollection"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."}},"security":[{"oauth2":[]}]}},"/v1/accounts/{accountId}":{"parameters":[{"name":"accountId","in":"path","description":"The unique identifier for the account","required":true,"schema":{"type":"string"}}],"get":{"summary":"Get account information.","description":"Includes the original configuration information.","tags":["Accounts"],"responses":{"200":{"description":"Success. The account","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/Account"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"404":{"description":"Not found. The user doesn't have any permissions to this account or it does not exist."}},"security":[{"oauth2":[]}]}},"/v1/identities":{"post":{"summary":"Link a new account identity.","description":"An identity is a JWT subscriber *sub* and issuer *iss*. Only one account my be linked to a particular JWT combination. Allows calling the API with a federated token directly instead of using a client access key.","tags":["Accounts"],"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IdentityRequest"}}}},"responses":{"200":{"description":"Success. New identity linked.","content":{"application/links+json":{"schema":{"type":"object"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to update identities for the account."},"404":{"description":"Not found. The user doesn't have any permission to read account information or the account does not exist."}},"security":[{"oauth2":[]}]},"get":{"summary":"Get all linked identities for this account.","description":"Returns a list of identities linked for this account.","tags":["Accounts"],"responses":{"200":{"description":"Success. The user has permissions","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/IdentityCollection"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"404":{"description":"Not found. The user doesn't have permission to list identities for this account."}},"security":[{"oauth2":[]}]}},"/v1/clients":{"post":{"summary":"Create a new client.","description":"Creates a service client to interact with Authress or any other service on behalf of users. Each client has secret private keys used to authenticate with Authress. To use service clients created through other mechanisms, skip creating a client and create access records with the client identifier.","tags":["Clients"],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Client"}}}},"responses":{"200":{"description":"Success. The user has permissions","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/Client"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."}},"security":[{"oauth2":[]}]},"get":{"summary":"Get clients collection","description":"Returns all clients that the user has access to in the account.","tags":["Clients"],"responses":{"200":{"description":"Success. The user has permissions","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/ClientCollection"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to the resource, but they have other permissions to the same resource."}},"security":[{"oauth2":[]}]}},"/v1/clients/{clientId}":{"parameters":[{"name":"clientId","in":"path","description":"The unique identifier for the client.","required":true,"schema":{"type":"string"}}],"get":{"summary":"Get a client.","description":"Returns all information related to client except for the private access keys.","tags":["Clients"],"responses":{"200":{"description":"Success.","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/Client"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"404":{"description":"Not found. The user doesn't have permissions to the client or the client does not exist."}},"security":[{"oauth2":[]}]},"put":{"summary":"Update a client","description":"Updates a client information.","tags":["Clients"],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Client"}}}},"responses":{"200":{"description":"Success. The client was updated","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/Client"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to update the client."},"404":{"description":"Not found. The user doesn't have permission to the account or the client does not exist."}},"security":[{"oauth2":[]}]},"delete":{"summary":"Delete a client","description":"This deletes the service client.","tags":["Clients"],"responses":{"204":{"description":"Success. The client was deleted."},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to delete the client."},"404":{"description":"Not found. The user doesn't have any permission to the client or the client does not exist"}},"security":[{"oauth2":[]}]}},"/v1/clients/{clientId}/access-keys":{"parameters":[{"name":"clientId","in":"path","description":"The unique identifier of the client.","required":true,"schema":{"type":"string"}}],"post":{"summary":"Request a new access key","description":"Create a new access key for the client so that a service can authenticate with Authress as that client. Using the client will allow delegation of permission checking of users.","tags":["Clients"],"responses":{"200":{"description":"Success","content":{"application/links+json":{"schema":{"$ref":"#/components/schemas/ClientAccessKey"}}}},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to create access keys for the client."},"404":{"description":"Not found. The user doesn't have any permissions to client or the client does not exist."}},"security":[{"oauth2":[]}]}},"/v1/clients/{clientId}/access-keys/{keyId}":{"parameters":[{"name":"clientId","in":"path","description":"The unique identifier of the client.","required":true,"schema":{"type":"string"}},{"name":"keyId","in":"path","description":"The id of the access key to remove from the client.","required":true,"schema":{"type":"string"}}],"delete":{"summary":"Remove an access key for a client","description":"Deletes an access key for a client prevent it from being used to authenticate with Authress.","tags":["Clients"],"responses":{"204":{"description":"Success. The access key has been deleted."},"401":{"description":"Unauthorized. The request JWT found in the Authorization header is no longer valid."},"403":{"description":"Forbidden. The user doesn't have permission to delete access keys from a client."},"404":{"description":"Not found. The user doesn't have any permissions to the client or the client does not exist."}},"security":[{"oauth2":[]}]}}},"components":{"schemas":{"AccountCollection":{"type":"object","required":["accounts"],"properties":{"accounts":{"$ref":"#/components/schemas/Account"}}},"Account":{"type":"object","required":["accountId","createdTime","domain","company","features","links"],"properties":{"accountId":{"type":"string"},"createdTime":{"type":"string","format":"date-time"},"domain":{"type":"string","description":"The top authress sub domain specific for this account to be used with this API."},"company":{"type":"object"},"links":{"type":"object"}}},"ResourcePermissionCollection":{"description":"A collection of resource permissions that have been defined.","type":"object","required":["resources"],"properties":{"resources":{"$ref":"#/components/schemas/ResourcePermission"}}},"ResourcePermission":{"type":"object","required":["permissions","links"],"properties":{"permissions":{"type":"array","items":{"type":"object","required":["action","allow"],"properties":{"action":{"type":"string","enum":["CLAIM","PUBLIC"]},"allow":{"type":"string"}}}}}},"AccessRecord":{"description":"The access record which links users to roles.","type":"object","required":["users","account","admins","roles","name","recordId","statements","links"],"properties":{"recordId":{"type":"string","readOnly":true},"name":{"description":"A helpful name for this record","type":"string"},"account":{"type":"object","required":["accountId"],"readOnly":true,"properties":{"accountId":{"type":"string"}}},"users":{"description":"The list of users this record applies to","type":"array","items":{"type":"object","required":["userId"],"properties":{"userId":{"type":"string"}}}},"admins":{"description":"The list of admin that can edit this record even if they do not have global record edit permissions.","type":"array","items":{"type":"object","required":["userId"],"properties":{"userId":{"type":"string"}}}},"statements":{"description":"A list of statements which match roles to resources. Users in this record have all statements apply to them","type":"array","items":{"required":["roles","resources"],"properties":{"roles":{"type":"array","items":{"type":"string","pattern":"ROLE_PATTERN","minLength":1,"maxLength":20}},"resources":{"type":"array","items":{"type":"object","required":["resourceUri"],"properties":{"resourceUri":{"description":"A resource path which can be top level, fully qualified, or end with a *. Parent resources imply permissions to sub resources.","type":"string","pattern":"RESOURCE_PATTERN","minLength":1,"maxLength":1024}}}}}}},"links":{"type":"object"}}},"ClaimRequest":{"type":"object","required":["collectionResource","resourceId"],"properties":{"collectionResource":{"description":"The parent resource to add a child resource to. The resource must have a resource configuration that add the permission CLAIM for this to work.","type":"string"},"resourceId":{"description":"The child resource the user is requesting Admin ownership over.","type":"string"}}},"ClaimResponse":{"type":"object"},"IdentityRequest":{"description":"Request to link an identity provider's audience and your app's audience with Authress.","type":"object","required":["jwt"],"properties":{"jwt":{"description":"A valid JWT OIDC compliant token which will still pass authentication requests to the identity provider. Must contain a unique audience and issuer.","type":"string"},"preferredAudience":{"description":"If the `jwt` token contains more than one valid audience, then the single audience that should associated with Authress. If more than one audience is preferred, repeat this call with each one.","type":"string"}}},"IdentityCollection":{"type":"object","required":["identities"],"properties":{"identities":{"type":"array","items":{"$ref":"#/components/schemas/Identity"}}}},"Identity":{"description":"The identifying information which uniquely links a JWT OIDC token to an identity provider","type":"object","required":["issuer","audience"],"properties":{"issuer":{"description":"The issuer of the JWT token. This can be any OIDC compliant provider.","type":"string"},"audience":{"description":"The target of the JWT tokens. This must be a sub target of the account app or the whole app","type":"string"}}},"PermissionObject":{"description":"The collective action and associate grants on a permission","type":"object","required":["action","allow","grant","delegate"],"properties":{"action":{"type":"string","description":"The action the permission grants, can be scoped using `:` and parent actions imply child permissions, action:* or action implies action:sub-action."},"allow":{"type":"boolean","description":"Does this permission grant the user the ability to execute the action?"},"grant":{"type":"boolean","description":"Allows the user to give the permission to others without being able to execute the action."},"delegate":{"type":"boolean","description":"Allows delegating or granting the permission to others without being able to execute tha action."}}},"ClientCollection":{"description":"The collection of a list of clients","type":"object","required":["clients"],"properties":{"clients":{"description":"A list of clients","type":"array","items":{"$ref":"#/components/schemas/Client"}}}},"Client":{"description":"A client configuration.","type":"object","required":["clientId","name","createdTime"],"properties":{"clientId":{"description":"The unique id of the client.","type":"string","readOnly":true},"createdTime":{"type":"string","format":"date-time","readOnly":true},"name":{"description":"The name of the client","type":"string"}}},"ClientAccessKey":{"description":"A client configuration.","type":"object","required":["clientId"],"properties":{"keyId":{"description":"The unique id of the client.","type":"string","readOnly":true},"clientId":{"description":"The unique id of the client.","type":"string","readOnly":true},"generationDate":{"type":"string","format":"date-time","readOnly":true},"accessKey":{"type":"string","readOnly":true,"description":"An encoded access key which contains identifying information for client access token creation. For direct use with the Authress SDKs, not meant to be decoded. Must be saved on creted, as it will never be returned from the API ever again. Authress only saved the corresponding public key to verify private access keys."}}}},"securitySchemes":{"oauth2":{"type":"http","scheme":"bearer"}}}}