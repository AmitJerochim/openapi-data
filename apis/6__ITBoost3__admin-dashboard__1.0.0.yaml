openapi: 3.0.0
info:
  version: 1.0.0
  title: V4-ADMIN-DASHBOARD-API
  description: APIs of Admin Dashboard Micro-service
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/ITBoost3/admin-dashboard/1.0.0
- url: http://api.itboost.com
  variables:
    basePath:
      default: /admindashboard

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
x-amazon-apigateway-request-validator: all

paths:
        
  /billing:
    get:
      security:
        - api_key: []
        - token-authorizer: []
      tags:
        - Billing
      summary: Get Organization Billing Details.
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true      
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: query
          name: conditions
          schema:
            type: object
        - in: query
          name: fields
          schema:
            type: object
      operationId: getBillingDetails
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationBilling'
        400:
          description:  not found 
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminDashboardUrl}/billing'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.querystring.conditions: method.request.querystring.conditions
          integration.request.querystring.fields: method.request.querystring.fields
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
  /billing/info:
    patch:
      security:
        - api_key: []
        - token-authorizer: []
      tags:
        - Billing
      summary: Update Billing Info 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingInfo'
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true          
      responses:
        200:
          description: updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"        
        400:
          description:  not found
      x-amazon-apigateway-integration:
         type: http
         uri: 'http://${stageVariables.adminDashboardUrl}/billing/info'
         httpMethod: PATCH
         requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
         responses:
           '2\d{2}':
             statusCode: '200'
             responseParameters:
                           method.response.header.Access-Control-Allow-Origin: "'*'"
           default:
             statusCode: '400'
         passthroughBehavior: never
         requestTemplates:
            application/json: ''  
  /billing/plans:
    get:
      security:
        - api_key: []
        - token-authorizer: []
      tags:
        - Billing
      summary: Get Billing Plans.
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true      
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: query
          name: conditions
          schema:
            type: object
        - in: query
          name: fields
          schema:
            type: object
      operationId: getBillingPlans
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plans'
        400:
          description:  not found 
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminDashboardUrl}/billing/plans'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.querystring.conditions: method.request.querystring.conditions
          integration.request.querystring.fields: method.request.querystring.fields
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
  /billing/card:
    patch:
      security:
        - api_key: []
        - token-authorizer: []
      tags:
        - Billing
      summary: Update Billing Card
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true          
      responses:
        200:
          description: updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"        
        400:
          description:  not found
      x-amazon-apigateway-integration:
         type: http
         uri: 'http://${stageVariables.adminDashboardUrl}/billing/card'
         httpMethod: PATCH
         requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
         responses:
           '2\d{2}':
             statusCode: '200'
             responseParameters:
                           method.response.header.Access-Control-Allow-Origin: "'*'"
           default:
             statusCode: '400'
         passthroughBehavior: never
         requestTemplates:
            application/json: ''  
  /billing/invoices:
    get:
      security:
        - api_key: []
        - token-authorizer: []
      tags:
        - Billing
      summary: Get Invoices.
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true      
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      operationId: getInvoices
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Invoices'
        400:
          description:  not found 
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminDashboardUrl}/billing/invoices'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
  /billing/invoices/{invoiceId}:
    get:
      security:
        - api_key: []
        - token-authorizer: []
      tags:
        - Billing
      summary: Get Invoice.
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true      
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: invoiceId
          schema:
            type: string
          required: true      
      operationId: getInvoice
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Invoice'
        400:
          description:  not found 
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminDashboardUrl}/billing/invoices/{invoiceId}'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.invoiceId: method.request.path.invoiceId
          
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
  /billing/invoice/upcoming:
    get:
      security:
        - api_key: []
        - token-authorizer: []
      tags:
        - Billing
      summary: Get Invoice.
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true      
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      operationId: getUpcomingInvoice
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Invoice'
        400:
          description:  not found 
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminDashboardUrl}/billing/invoice/upcoming'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid

        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
  /billing/charges/{chargeId}:
    get:
      security:
        - api_key: []
        - token-authorizer: []
      tags:
        - Billing
      summary: Get Charges.
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true      
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
        - in: path
          name: chargeId
          schema:
            type: string
          required: true      
      operationId: getCharges
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Charges'
        400:
          description:  not found 
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminDashboardUrl}/billing/charges/{chargeId}'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
          integration.request.path.chargeId: method.request.path.chargeId
          
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'
  /billing/cancellation/validity:
    post:
      security:
        - api_key: []
        - token-authorizer: []
      tags:
        - Billing
      summary: Validate Subscription Cancellation 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nextBillingCycle:
                  type: string
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true          
      responses:
        200:
          description: Operation Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StripePlan'
                  - type: object
                    properties:
                      cancellationFlag:
                        type: boolean
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"        
        400:
          description:  not found
      x-amazon-apigateway-integration:
         type: http
         uri: 'http://${stageVariables.adminDashboardUrl}/billing/cancellation/validity'
         httpMethod: POST
         requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
         responses:
           '2\d{2}':
             statusCode: '200'
             responseParameters:
                           method.response.header.Access-Control-Allow-Origin: "'*'"
           default:
             statusCode: '400'
         passthroughBehavior: never
         requestTemplates:
            application/json: ''  


  /boards:
    get:
      security:
        - api_key: []
        - token-authorizer: []
      tags:
        - Boards
      summary: Get Manage Ticket Boards.
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true      
        - in: header
          name: x-api-key
          schema:
            type: string
          required: true
      operationId: getBoards
      responses:
        200:
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Board'
        400:
          description:  not found 
      x-amazon-apigateway-integration:
        type: http
        uri: 'http://${stageVariables.adminDashboardUrl}/boards'
        httpMethod: GET
        requestParameters:
          integration.request.header.token: method.request.header.token
          integration.request.header.orgId: context.authorizer.orgId
          integration.request.header.userId: context.authorizer.userId
          integration.request.header.roleId: context.authorizer.roleId
          integration.request.header.userName: context.authorizer.userName
          integration.request.header.userUuid: context.authorizer.userUuid
        responses:
          '2\d{2}':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: '400'


components:
  schemas:
    OrganizationBilling:
      type: object
      properties:
        cardInfo:
          type: object
          properties:
            stripeCardNolast4:
              type: string
            customerName:
              type: string
        planInfo:
          type: object
          properties:
            id:
              type: string
            amount:
              type: string
            currency:
              type: string
            interval:
              type: string
            name:
              type: string
            customerName:
              type: string
            statement_descriptor:
              type: string
        stripeLastPaymentStatus:
          type: string
        invoices:
          type: array
          items:
            type: object
        contactInfo:
          $ref: "#/components/schemas/BillingContactInfo"
        couponcode:
          type: string
        isActive:
          type: boolean
        minimumUsersSpecified:
          type: number
        activatedAt:
          type: string
        exemptionFlag:
          type: boolean
        ITBTrialFlag:
          type: boolean
        ITBTrialEndDate:
          type: string
        updatedAt:
          type: string
        contractEndDate:
          type: string
        resubscriptionDate:
          type: string
        cwPartnerFlag:
          type: boolean
    BillingContactInfo:
      type: object
      properties:
        state:
          type: object
          properties:
            name:
              type: string
        name:
          type: string
        email:
          type: string
        address1:
          type: string
        address2:
          type: string
        country:
          type: string
        city:
          type: string
        zip:
          type: string
    BillingInfo:
      type: object
      properties:
        billingContactInfo:
          $ref: '#/components/schemas/BillingContactInfo'
    Plans:
      type: object
      properties:
        year:
          type: array
          items:
            $ref: "#/components/schemas/Plan"
        months:
          type: array
          items:
            $ref: "#/components/schemas/Plan"  
    Plan:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        active:
          type: boolean
        amount:
          type: number
        amount_decimal:
          type: string
        billing_scheme:
          type: string
        created:
          type: string
        currency:
          type: string
        interval:
          type: string
        interval_count:
          type: number
        livemode:
          type: boolean
        metadata:
          type: object
        name:
          type: string
        nickname:
          type: string
        product:
          type: string
        usage_type:
          type: string
    StripePlan:
      type: object
      properties:   
        id:
          type: string
        amount:
          type: string
        currency:
          type: string
        interval:
          type: string
        name:
          type: string
        statement_descriptor:
          type: string
        
    Card:
      type: object
      properties:
        name:
          type: string
        cardNo:
          type: string
        cvc:
          type: string
        cardExpiry:
          type: string
    Invoice:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        account_country:
          type: string
        account_name:
          type: string
        amount_due:
          type: number
        amount_paid:
          type: number
        amount_remaining:
          type: number
        attempt_count:
          type: number
        attempted:
          type: boolean
        auto_advance:
          type: boolean
        billing_reason:
          type: string
        charge:
          type: string
        collection_method:
          type: string
        created:
          type: number
        currency:
          type: string
        customer:
          type: string
        customer_address:
          type: string
        customer_email:
          type: string
        customer_name:
          type: string
        customer_phone:
          type: string
        customer_shipping:
          type: string
        customer_tax_exempt:
          type: string
        default_payment_method:
          type: string
        default_source:
          type: string
        description:
          type: string
        discount:
          type: object
          properties:
            object:
              type: string
            coupon:
              type: object
            customer:
              type: string
            end:
              type: number
            start:
              type: number
            subscription:
              type: string
        lines:
          type: object
        livemode:
          type: boolean
        metadata:
          type: object
        number:
          type: string
        paid:
          type: boolean
        payment_intent:
          type: string
        period_end:
          type: number
        period_start:
          type: number
        post_payment_credit_notes_amount:
          type: number
        pre_payment_credit_notes_amount:
          type: number
        starting_balance:
          type: number
        statement_descriptor:
          type: string
        status:
          type: string
        subscription:
          type: string
        subtotal:
          type: number
        tax:
          type: number
        total:
          type: number
        webhooks_delivered_at:
          type: number
    Invoices:
      type: array
      items:
        $ref: "#/components/schemas/Invoice"  
    Charges:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        amount:
          type: number
        amount_refunded:
          type: number
        balance_transaction:
          type: string
        billing_details:
          type: object
          properties:
            address:
              type: object
            email:
              type: string
            name:
              type: string
            phone:
              type: string
        payment_method_details:
          type: object
        captured:
          type: boolean
        created:
          type: number
        currency:
          type: string
        customer:
          type: string
        description:
          type: string
        disputed:
          type: boolean
        failure_code:
          type: string
        failure_message:
          type: string
        fraud_details:
          type: object
        invoice:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
        outcome:
          type: object
        paid:
          type: boolean
        payment_intent:
          type: string
        payment_method:
          type: string
        receipt_email:
          type: string
        receipt_number:
          type: string
        receipt_url:
          type: string
        refunded:
          type: boolean
        refunds:
          type: object
        review:
          type: string
        shipping:
          type: string
        status:
          type: string
        source:
          type: object
    Board:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        location:
          type: object
          properties:
            id:
              type: number
            name:
              type: string
            _info:
              type: object
        department:
          type: object
          properties:
            id:
              type: number
            identifier:
              type: string
            name:
              type: string
            _info:
              type: object
        inactiveFlag:
            type: boolean
        signOffTemplate:
          type: object
          properties:
            id:
              type: number
            name:
              type: string
            _info:
              type: object
        sendToContactFlag:
          type: boolean
        sendToResourceFlag:
          type: boolean
        projectFlag:
          type: boolean
        boardIcon:
          type: object
          properties:
            id:
              type: number
            name:
              type: string
            _info:
              type: object
        billTicketsAfterClosedFlag:
          type: boolean
        billTicketSeparatelyFlag:
          type: boolean
        billUnapprovedTimeExpenseFlag:
          type: boolean
        overrideBillingSetupFlag:
          type: boolean
        billTime:
          type: string
        billExpense:
          type: string
        billProduct:
          type: string
        autoAssignNewTicketsFlag:
          type: boolean
        autoAssignNewECTicketsFlag:
          type: boolean
        autoAssignNewPortalTicketsFlag:
          type: boolean
        discussionsLockedFlag:
          type: boolean
        timeEntryLockedFlag:
          type: boolean
        closedLoopDiscussionsFlag:
          type: boolean
        closedLoopResolutionFlag:
          type: boolean
        closedLoopInternalAnalysisFlag:
          type: boolean
        timeEntryDiscussionFlag:
          type: boolean
        timeEntryResolutionFlag:
          type: boolean
        timeEntryInternalAnalysisFlag:
          type: boolean
        problemSort:
          type: string
        resolutionSort:
          type: string
        internalAnalysisSort:
          type: string
        emailConnectorAllowReopenClosedFlag:
          type: boolean
        emailConnectorReopenResourcesFlag:
          type: boolean
        emailConnectorNewTicketNoMatchFlag:
          type: boolean
        emailConnectorNeverReopenByDaysFlag:
          type: boolean
        emailConnectorReopenDaysLimit:
          type: number
        emailConnectorNeverReopenByDaysClosedFlag:
          type: boolean
        emailConnectorReopenDaysClosedLimit:
          type: number
        useMemberDisplayNameFlag:
          type: boolean
        sendToCCFlag:
          type: boolean
        autoAssignTicketOwnerFlag:
          type: boolean
        closedLoopAllFlag:
          type: boolean
        percentageCalculation:
          type: string
        allSort:
          type: string
        markFirstNoteIssueFlag:
          type: boolean
        _info:
          type: object
        
    Empty:
     type: object

  securitySchemes:
    api_key:
      type: apiKey
      name: x-api-key
      in: header
    token-authorizer:
      type: apiKey
      name: token
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri: arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:711644918579:function:V4-service-dev-validateUser/invocations
        authorizerCredentials: 'arn:aws:iam::711644918579:role/cf2'
        identitySource: method.request.header.token