openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/mthahzan/Crockfit-IAP/1.0.0
info:
  description: Crockfit API to support IAP (in app purchase) on mobile platform
  version: "1.4.0"
  title: Crockfit API
  contact:
    email: ruveen@calcey.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: authentication
    description: Authentication endpoints
  - name: user
    description: User operations
paths:
  /auth/login:
    post:
      tags:
        - authentication
      summary: sign in user
      operationId: auth-sign-in
      description: |
        ## Sign in user to the system
        
        Basic sign in function. Subsequent calls will be secured by the JWT token from the response.
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              properties:
                email:
                  type: string
                  format: email
                  example: "something@somewhere.com"
                password:
                  type: string
                  format: password
                  example: "user@123"
      responses:
        '200':
          description: User sign in successful. Session response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockSession'
        '401':
          description: authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
  /auth/register:
    post:
      tags:
      - authentication
      summary: sign up user
      operationId: sign-up
      description: |
        ## Register a user to the system
        
        Basic registration function. Subsequent calls will be secured by the JWT token from the response.
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - firstName
              - email
              - password
              properties:
                firstName:
                  type: string
                  example: "Uncle"
                lastName:
                  type: string
                  example: "Sam"
                email:
                  type: string
                  format: email
                  example: "something@somewhere.com"
                password:
                  type: string
                  format: password
                  example: "user@123"
      responses:
        '200':
          description: User registration successful. Session response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockSession'
        '400':
          description: Registration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
  /auth/forgot-password:
    post:
      tags:
        - authentication
      summary: request to change password
      operationId: auth-forgot-password
      description: |
        ## Forgot password
        
        Request to send password reset email
      requestBody:
        description: Forgot password params
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              properties:
                email:
                  type: string
                  format: email
                  example: "something@somewhere.com"
      responses:
        '200':
          description: Password change email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Human readable message
                    example: "Reset password email sent. Please check your email"
        '401':
          description: authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
  /users/{userId}/purchases:
    post:
      security:
        - bearerAuth: []
      tags:
      - user
      summary: Validates a user purchase
      operationId: user-validate-purchase
      description: |
        ## Validate the purchase

        Used to validate the purchase with the in-app purchase service provider and unlock the content on the API side (refer to these docs for [Google Play Store](https://developers.google.com/android-publisher/api-ref/purchases/products/get) and [Apple App Store](https://developer.apple.com/library/archive/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html) specific details).
        
        The reason this exists is to make sure there aren't any fraudulent activities on these purchases.
        
        **NOTE** - Validations should be made with the sandbox servers unless it's the production environment.
        
      parameters:
        - in: path
          name: userId
          description: current user ID
          required: true
          schema:
            type: string
            format: uuid
            example: "ba7ce536-9384-4294-8a5e-ac00d52e6ab3"
      requestBody:
        description: Purchase details returned from IAP service provider to be validated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrockPurchase'
      responses:
        '200':
          description: Purchase validated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Human readable message
                    example: "Purchase validated"
        '400':
          description: Invalid request (incorrect token/receipt)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
        '403':
          description: User is not authorized to access the requesting user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
  /version:
    get:
      security:
        - bearerAuth: []
      tags:
      - public
      summary: Get the latest app version
      operationId: version_of_app
      description: |
        ## Get the latest app version to check if it's a mandatory update.
       
      responses:
        '200':
          description: Used to check mandatory update for mobile app
          content:
            application/json:
              schema:
                type: object
                properties:
                  mandatory:
                    type: boolean
                    example: false
                  version:
                    type: string
                    example: '1.4.0-alpha1'
  /users/{userId}/plans:
    get:
      security:
        - bearerAuth: []
      tags:
      - user
      summary: Lists unlocked premium plans for the user
      operationId: plans-eligible-of-user
      description: |
        ## list unlocked plans
        
        List unlocked plan of the user identifiers to enable on the client app.
      parameters:
        - in: path
          name: userId
          description: current user ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list of unlocked plans
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: string
                example:
                  results:
                    - "gym_fit_1"
                    - "gym_fit_2"
                    - "gym_fit_subscription_monthly"
        '400':
          description: user can only access his list of unlocked plans
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
  /users/{userId}/plans/{planCategory}:
    get:
      security:
        - bearerAuth: []
      tags:
      - user
      summary: Specific premium plan category details for the user
      operationId: plan-category-eligible-of-user
      description: |
        ## Plan Category Details
        
        Used to fetch pending subscription plan, currently subscribed plan,  for the relevant plan category
      parameters:
        - in: path
          name: userId
          description: current user ID
          required: true
          schema:
            type: string
        - in: path
          name: planCategory
          description: planCategory
          required: true
          schema:
            type: string
      responses:
        '200':
          description: unlocked plan Category
          content:
            application/json:
              schema:
                type: object
                required:
                    - category
                    - subscribed
                    - subscribedPlan
                    - pendingPlan
                properties:
                      category:
                        type: string
                        example: "Gymfit"
                      subscribed:
                        type: boolean
                        example: true
                      platform:
                        type: string
                        example: 'ios'
                      subscribedPlan:
                        type: string
                        example: "gym_fit_subscription_monthly"
                      pendingPlan:
                        type: string
                        example: "gym_fit_subscription_yearly" 
                      unlockedPlans:
                        type: string
                        example: 
                          - "gym_fit_1"
                          - "gym_fit_2"
        '400':
          description: user can only access his list of unlocked plans
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
  /users/{userId}:
    delete:
      security:
        - bearerAuth: []
      tags:
      - user
      summary: deletes a user (GDPR compliant)
      operationId: user-delete
      description: |
        ## Delete user

        Deletes a user from the system
        
      parameters:
        - in: path
          name: userId
          description: current user ID
          required: true
          schema:
            type: string
            format: uuid
            example: "ba7ce536-9384-4294-8a5e-ac00d52e6ab3"
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Human readable message
                    example: "User deleted"
        '400':
          description: Invalid request (incorrect token/receipt)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
        '403':
          description: User is not authorized to delete this user (one shouldn't be able to delete other users)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
    put:
      security:
        - bearerAuth: []
      tags:
      - user
      summary: Update user details
      operationId: user-profile-name-update
      description: |
        ## Update user details
      requestBody:
        description: User details params
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - firstName
              properties:
                firstName:
                  type: string
                  format: text
                  example: "Shane"
                lastName:
                  type: string
                  format: text
                  example: "Watson"
      parameters:
        - in: path
          name: userId
          description: current user ID
          required: true
          schema:
            type: string
            format: uuid
            example: "ba7ce536-9384-4294-8a5e-ac00d52e6ab3"
      responses:
        '200':
          description: User profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Human readable message
                    example: "User profile updated"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
        '403':
          description: User is not authorized to update this user (one shouldn't be able to update other users)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrockError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CrockError:
      type: object
      description: |
        ## Error response
        
        An arbitrary error object signature to be used across the API so it can be easily read by the client
      required:
      - message
      properties:
        code:
          type: string
          description: Error code to track errors
          example: "254489b1-1c2d-471a-a12a-cb0f08f421d3"
        message:
          type: string
          description: Error message in human readable format
          example: "Error"
    CrockSession:
      type: object
      description: |
        ## Session response
        
        Session response signature of Crockfit API
      required:
      - accessToken
      - user
      properties:
        accessToken:
          type: string
          format: jwt
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6I"
        user:
          type: object
          required:
          - id
          - firstName
          - lastName
          properties:
            id:
              type: string
              example: "9ae52bfe-9cea-4ac3-b7b8-5a511ab58cfe"
            firstName:
              type: string
              example: "Uncle"
            lastName:
              type: string
              example: "Sam"
        firebaseAccessToken:
          type: string
          format: jwt
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFt"
    CrockIOSPurchasePayload:
      type: object
      description: |
        ## IOS IAP payload
        
        iOS in-app purchase response consists of a Base64 encoded string which is used to validate the purchase.
      required:
      - receipt
      properties:
        receipt:
          type: string
          description: The receipt returned from Apple IAP server
          format: byte
    CrockAndroidPurchasePayload:
      type: object
      description: |
        ## Android IAP payload
        
        To validate Android purchase, the token of the transaction is required with the package name and SKU ID
      required:
      - token
      - packageName
      - productId
      properties:
        token:
          type: string
          description: The token provided to the user's device when the inapp product was purchased.
        packageName:
          type: string
          description: The package name of the application the inapp product was sold in.
          example: "com.some.thing"
        productId:
          type: string
          description: The inapp product SKU.
          example: "com.some.thing.inapp1"
    CrockPurchase:
      type: object
      description: |
        ## IAP purchase
        
        The API has to support validating purchase of both Android and iOS platforms
      required:
      - platform
      - payload
      properties:
        platform:
          type: string
          description: Describes the platform in which the purchase was made
          enum: [android, ios]
        payload:
          type: object
          oneOf:
            - $ref: '#/components/schemas/CrockIOSPurchasePayload'
            - $ref: '#/components/schemas/CrockAndroidPurchasePayload'
          example:
            token: "TOKEN"
            packageName: "com.alex.alexcrockford"
            productId: "com.alex.alexcrockford.gymfit1"
            isSubscription: true
