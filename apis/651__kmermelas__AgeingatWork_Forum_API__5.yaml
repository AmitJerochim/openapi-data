openapi: 3.0.0
info:
  version: "5"
  title: Ageing@Work - Forum - API
  description: Ageing@Work - Forum - API
  
security:
  - BasicAuth: []

servers: 
  - url: https://community.nodebb.org/api/
  
tags:
  - name: categories
  - name: topics
  - name: posts
  - name: users
  - name: groups
  - name: util
  - name: training
    
paths: 
  /categories:
    get:
      summary: Returns a full list of categories.
      tags:
        - categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /category/{categoryId}:
    get:
      summary: Returns a specific category along with subcategories (if any).
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /category/cid/{cid}:
    get:
      summary: Returns a specific category's data only.
      tags:
        - categories
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /topic/{topicId}:
    get:
      summary: Returns a specific topic along with posts and category.
      tags:
        - topics
      parameters:
        - name: topicId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /topic/tid/{tid}:
    get:
      summary: Returns a specific topic's data only.
      tags:
        - topics
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /post/pid/{pid}:
    get:
      summary: Returns a specific post's data only.
      tags:
        - posts
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /users:
    get:
      summary: Returns a full list of users.
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /user/{username}:
    get:
      summary: Returns a specific user along with all related info.
      tags:
        - users
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /user/username/{username}:
    get:
      summary: Returns a specific user's data only.
      tags:
        - users
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /user/uid/{uid}:
    get:
      summary: Returns a specific user's data only.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /user/email/{email}:
    get:
      summary: Returns a specific user's data only.
      tags:
        - users
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /recent:
    get:
      summary: Returns a list of recent topics.
      tags:
        - topics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  topics:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
                  tids:
                    type: array
                    items:
                      type: integer
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /popular:
    get:
      summary: Returns a list of popular topics.
      tags:
        - topics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  topics:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
                  tids:
                    type: array
                    items:
                      type: integer
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /groups:
    get:
      summary: Returns a full list of user groups.
      tags:
        - groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserGroup'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /v2/users:
    post:
      summary: Creates a new user.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully created a new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
                    properties:
                      uid:
                        type: integer
        '400':
          $ref: '#/components/responses/400Error'
          
  /v2/users/{uid}:
    put:
      summary: Updates a user's profile information.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Successfully updated user's profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Deletes a user from NodeBB.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
  /v2/users/{uid}/password:
    put:
      summary: Changes a user's password.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new
                - current
              properties:
                new:
                  type: string
                current:
                  type: string
      responses:
        '200':
          description: Successfully changed user's password
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
  /v2/users/{uid}/follow:
    put:
      summary: Follows another user.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully followed user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Unfollows another user.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully unfollowed user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
  /v2/users/{uid}/chats:
    post:
      summary: Sends a chat message to another user.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                timestamp:
                  type: integer
                quiet:
                  type: boolean
      responses:
        '200':
          description: Successfully messaged user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
                    properties:
                      content:
                        type: string
                      cleanedContent:
                        type: string
                      fromuid:
                        type: integer
                      roomId:
                        type: integer
                      timestamp:
                        type: integer
                      timestampISO:
                        type: string
                      messageId:
                        type: integer
                      fromUser:
                        type: object
                        properties:
                          uid:
                            type: integer
                          username:
                            type: string
                      
        '400':
          $ref: '#/components/responses/400Error'
          
  /v2/users/{uid}/ban:
    put:
      summary: Bans a user.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                until:
                  type: integer
                reason:
                  type: string
      responses:
        '200':
          description: Successfully banned user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Unbans a user.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully unbanned user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
  /v2/users/{uid}/tokens:
    get:
      summary: Retrieves a list of active tokens for that user.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved active tokens list for user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
                    properties:
                      tokens:
                        type: array
                        items:
                          type: string
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
    post:
      summary: Creates a new user token for the passed in uid.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '200':
          description: Successfully created a new user token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
                    properties:
                      token:
                        type: string
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/users/{uid}/tokens/{tokenId}:
    delete:
      summary: Revokes an active user token.
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
        - name: tokenId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully revoked user token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
  /v2/groups:
    post:
      summary: Creates a new user group.
      tags:
        - groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupCreate'
      responses:
        '200':
          description: Successfully created user group
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
                    properties:
                      name:
                        type: string
                      slug:
                        type: string
                      createTime:
                        type: integer
                      description:
                        type: string
                      memberCount:
                        type: integer
                      hidden:
                        type: integer
                      private:
                        type: integer
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/groups/{slug}:
    delete:
      summary: Deletes a group.
      tags:
        - groups
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted group
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/groups/{slug}/membership:
    put:
      summary: Joins a group (or requests membership if it is a private group).
      tags:
        - groups
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Successfully joined group
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Leaves a group.
      tags:
        - groups
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully left group
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/groups/{slug}/membership/{uid}:
    put:
      summary: Adds a user to a group (The calling user has to be an administrator)
      tags:
        - groups
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string 
        - name: uid
          in: path
          required: true
          schema:
            type: integer 
      responses:
        '200':
          description: Successfully added user to group
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Removes a user from a group (The calling user has to be an administrator)
      tags:
        - groups
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: uid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully removed user from group
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/categories:
    post:
      summary: Creates a new category.
      tags:
        - categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '200':
          description: Successfully created a new category
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    $ref: '#/components/schemas/CategoryUpdate'
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/categories/{cid}:
    put:
      summary: Updates a category's data
      tags:
        - categories
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdate'
      responses:
        '200':
          description: Successfully updated category's data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Purges a category, including all topics and posts inside of it
      tags:
        - categories
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted category
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/categories/{cid}/state:
    put:
      summary: Enables a category
      tags:
        - categories
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully enabled category
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Disables a category
      tags:
        - categories
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully disabled category
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/categories/{cid}/privileges:
    put:
      summary: Adds user or group privileges to a category
      tags:
        - categories
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                privileges:
                  type: array
                  items:
                    type: string
                groups:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successfully added privileges to category
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Deletes group privileges from a category (request body same as put method)
      tags:
        - categories
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted privileges from category
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/topics:
    post:
      summary: Creates a new topic.
      tags:
        - topics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreate'
      responses:
        '200':
          description: Successfully created a new topic
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    $ref: '#/components/schemas/TopicCreateResponse'
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/topics/{tid}:
    post:
      summary: Posts a new reply to the topic.
      tags:
        - topics
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                toPid:
                  type: integer
      responses:
        '200':
          description: Successfully posted a reply to the topic
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    $ref: '#/components/schemas/TopicPost'
        '400':
          $ref: '#/components/responses/400Error'
          
    put:
      summary: Updates a post in a topic.
      tags:
        - topics
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pid
                - content
              properties:
                pid:
                  type: integer
                content:
                  type: string
                title:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successfully updated post
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    $ref: '#/components/schemas/TopicPostUpdate'
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Purges a topic, including all posts inside.
      tags:
        - topics
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully purged topic
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/topics/{tid}/state:
    put:
      summary: Restores a topic.
      tags:
        - topics
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully restored topic
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Deletes a topic (that is, a soft-delete).
      tags:
        - topics
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted topic
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/topics/{tid}/follow:
    put:
      summary: Subscribes user to a topic.
      tags:
        - topics
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully subscribed user to topic
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Unsubscribes user from a topic.
      tags:
        - topics
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully unsubscribed user from topic
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/topics/{tid}/tags:
    put:
      summary: Creates or update tags in a topic.
      tags:
        - topics
      description: This method does not append tags, it replaces the tag set associated with the topic.
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Removes tag associated with a topic.
      tags:
        - topics
      description: Clears the tag set associated with a topic.
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/topics/{tid}/pin:
    put:
      summary: Pins a topic to the top of the category
      tags:
        - topics
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Unpins a topic from the top of the category.
      tags:
        - topics
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/posts/{pid}:
    put:
      summary: Edits a post by post ID.
      tags:
        - posts
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                title:
                  type: string
                tag:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Purges a post, thereby removing it from the database completely.
      tags:
        - posts
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/posts/{pid}/state:
    put:
      summary: Restores a post.
      tags:
        - posts
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Deletes a post (that is, a soft-delete).
      tags:
        - posts
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/posts/{pid}/vote:
    post:
      summary: Votes for a post.
      tags:
        - posts
      description: delta must be a number. If delta > 0, it's considered an upvote; if delta < 0, it's considered a downvote; otherwise, it's an unvote.
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - delta
              properties:
                delta:
                  type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    $ref: '#/components/schemas/PostVoteResponse'
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Unvotes a post.
      tags:
        - posts
      parameters:
        - name: pid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    $ref: '#/components/schemas/PostVoteResponse'
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/util/upload:
    post:
      summary: Uploads a File.
      tags:
        - util
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    url:
                      type: string
                    path:
                      type: string
                    name:
                      type: string
        '400':
          $ref: '#/components/responses/400Error'
  
  /v2/util/maintenance:
    post:
      summary: Enables Maintenance Mode.
      tags:
        - util
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
    delete:
      summary: Disables Maintenance Mode.
      tags:
        - util
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  payload:
                    type: object
        '400':
          $ref: '#/components/responses/400Error'
          
  /trainings:
    get:
      summary: Returns a full list of trainings.
      tags:
        - training
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  trainings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Training'
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
          
  /training:
    post:
      summary: Returns a specific training.
      tags:
        - training
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
      responses:
        '200':
          description: OK
          content:
            multipart/form-data:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/400Error'
        '404':
          $ref: '#/components/responses/404Error'
  
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  responses:
    400Error:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                
    404Error:
      description: Page not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                
  schemas:
    Category:
      type: object
      required:
        - name
      properties:
        cid:
          type: integer
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        bgColor:
          type: string
        color:
          type: string
        parentCid:
          type: integer
        class:
          type: string
        backgroundImage:
          type: string
        children:
          type: array
          items: 
            $ref: '#/components/schemas/SubCategory'
    
    CategoryCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        bgColor:
          type: string
        color:
          type: string
        parentCid:
          type: integer
        class:
          type: string
          
    CategoryUpdate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        bgColor:
          type: string
        color:
          type: string
        parentCid:
          type: integer
        class:
          type: string
        backgroundImage:
          type: string

            
    SubCategory:
      type: object
      required:
        - cid
      properties:
        cid:
          type: integer
        name:
          type: string
        description:
          type: string
        parent:
          $ref: '#/components/schemas/Category'
          
    Topic:
      type: object
      required:
        - tid
      properties:
        tid:
          type: integer
        title:
          type: string
        cid:
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
            
    TopicCreate:
      type: object
      required:
        - cid
        - title
        - content
      properties:
        cid:
          type: integer
        title:
          type: string
        content:
          type: string
        tags:
          type: array
          items:
            type: string
            
    TopicCreateResponse:
      type: object
      properties:
        topicData:
          type: object
          properties:
            cid:
              type: integer
            mainPid:
              type: integer
            slug:
              type: string
            tid:
              type: integer
            timestamp:
              type: integer
            timestampISO:
              type: string
            title:
              type: string
            uid:
              type: integer
            category:
              type: object
            user:
              type: object
            tags:
              type: array
              items:
                type: string
            mainPost:
              type: object
        postData:
          $ref: '#/components/schemas/TopicPost'
          
    TopicPost:
      type: object
      properties:
        pid:
          type: integer
        uid:
          type: integer
        tid:
          type: integer
        cid:
          type: integer
        content:
          type: string
        timestamp:
          type: integer
        timestampISO:
          type: string
        user:
          type: object
        topic:
          type: object
          
    TopicPostUpdate:
      type: object
      properties:
        editor:
          type: object
          properties:
            username:
              type: string
            userslug:
              type: string
            uid:
              type: integer
        topic:
          type: object
          properties:
            tid:
              type: integer
            cid:
              type: integer
        post:
          type: object
          properties:
            content:
              type: string
            pid:
              type: integer
            toPid:
              type: integer
            tid:
              type: integer
            uid:
              type: integer
            cid:
              type: integer
            timestamp:
              type: integer
            timestampISO:
              type: string
            topic:
              type: object
              
    Post:
      type: object
      required:
        - pid
      properties:
        pid:
          type: integer
        content:
          type: string
        tid:
          type: integer
        uid:
          type: integer
          
    PostVoteResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            reputation:
              type: integer
        fromuid:
          type: integer
        post:
          type: object
          properties:
            pid:
              type: integer
            uid:
              type: integer
            tid:
              type: integer
            upvotes:
              type: integer
            downvotes:
              type: integer
            votes:
              type: integer
        upvote:
          type: boolean
        downvote:
          type: boolean
          
    User:
      type: object
      required:
        - username
      properties:
        uid:
          type: integer
        username:
          type: string
        email:
          type: string
        administrator:
          type: boolean
          
    UserUpdate:
      type: object
      required:
        - username
      properties:
        username:
          type: string
        email:
          type: string
        fullname:
          type: string
        website:
          type: string
        location:
          type: string
        birthday:
          type: string
        signature:
          type: string
          
    UserGroup:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        memberCount:
          type: integer
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
            
    UserGroupCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        hidden:
          type: integer
        private:
          type: integer
        ownerUid:
          type: integer
          
    Training:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        url:
          type: string