{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "TOWA REST API",
    "description" : "HTTP/REST API to manage resources and objects in the TOWA platform",
    "version" : "1.0.0",
    "contact" : {
      "name" : "TOWA Support",
      "email" : "help@towa.network"
    }
  },
  "servers" : [ {
    "url" : "https://dev-api.towa.network/v1",
    "description" : "Development Server"
  }, {
    "url" : "https://staging-api.towa.network/v1",
    "description" : "Staging Server"
  }, {
    "url" : "https://api.towa.network/v1",
    "description" : "Production Server"
  } ],
  "paths" : {
    "/access" : {
      "get" : {
        "tags" : [ "access" ],
        "summary" : "Query or search access",
        "description" : "Retrieves a collection of access",
        "operationId" : "findAccess",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter access records by the associated user.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "entity",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter access records by the associated entity.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter access records by the associated role.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter access records by the associated building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter access records by the associated sub-building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "space",
          "in" : "query",
          "description" : "Ref: Space. The parameter to filter access records by the associated space.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "contract",
          "in" : "query",
          "description" : "Ref: Contract. The parameter to filter access records by the associated contract.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "validUntil",
          "in" : "query",
          "description" : "The parameter to filter access records by the validity date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "isDefault",
          "in" : "query",
          "description" : "The parameter to filter access records by the default flag.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "isInactive",
          "in" : "query",
          "description" : "The parameter to filter access records by the active flag.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the audit notes.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried access",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "access" ],
        "summary" : "Grant access to a user",
        "description" : "Grant access to a user",
        "operationId" : "createAccess",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New access to grant",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Access"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully granted access",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Access"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/access/{id}" : {
      "get" : {
        "tags" : [ "access" ],
        "summary" : "Retrieve access record by id",
        "description" : "Retrieves a single access by its id",
        "operationId" : "getAccess",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of access record to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved access information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Access"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "access" ],
        "summary" : "Update values for an existing access",
        "description" : "Update an existing access",
        "operationId" : "updateAccess",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of access to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Access to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Access"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated access",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Access"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/activities" : {
      "get" : {
        "tags" : [ "activities" ],
        "summary" : "Query or search activities",
        "description" : "Retrieves a collection of activities",
        "operationId" : "findActivities",
        "parameters" : [ {
          "name" : "resource",
          "in" : "query",
          "description" : "The parameter to filter activity records by the associated resource type.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "recordId",
          "in" : "query",
          "description" : "The parameter to filter activity records by the associated resource record id.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "The parameter to filter activity records by the associated action.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "The parameter to filter activity records by the associated user.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried activity",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActivityQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "activities" ],
        "summary" : "Create a new activity",
        "description" : "Create a new activity",
        "operationId" : "createActivity",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New activity to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Activities"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created activity",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Activities"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/asset-classes" : {
      "get" : {
        "tags" : [ "asset-classes" ],
        "summary" : "Query or search asset classes",
        "description" : "Retrieves a collection of asset classes",
        "operationId" : "findAssetClasses",
        "parameters" : [ {
          "name" : "parent",
          "in" : "query",
          "description" : "Ref: Asset Class. The parameter to filter the asset classes by their parent.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "isResidential",
          "in" : "query",
          "description" : "The parameter to filter asset classes by their residential flag.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "isStatutory",
          "in" : "query",
          "description" : "The parameter to filter asset classes by their statutory flag.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter asset class records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter asset class records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the asset class name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried asset classes",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetClassQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "asset-classes" ],
        "summary" : "Create a new asset class",
        "description" : "Create a new asset class",
        "operationId" : "createAssetClass",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a space delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New asset class to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetClass"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created asset class",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetClass"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/asset-classes/{id}" : {
      "get" : {
        "tags" : [ "asset-classes" ],
        "summary" : "Retrieve asset class record by id",
        "description" : "Retrieves a single asset class by its id",
        "operationId" : "getAssetClass",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of asset class to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved asset class information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetClass"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "asset-classes" ],
        "summary" : "Update values for an existing asset class",
        "description" : "Update an existing asset class",
        "operationId" : "updateAssetClass",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of asset class to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Asset class to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetClass"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated asset class",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetClass"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "asset-classes" ],
        "summary" : "Delete an existing asset class",
        "description" : "Delete an existing asset class",
        "operationId" : "removeAssetClass",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of asset class to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/assets" : {
      "get" : {
        "tags" : [ "assets" ],
        "summary" : "Query or search assets",
        "description" : "Retrieves a collection of assets",
        "operationId" : "findAssets",
        "parameters" : [ {
          "name" : "label",
          "in" : "query",
          "description" : "The parameter to filter assets by the label used for tagging.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "labelPosition",
          "in" : "query",
          "description" : "The parameter to filter assets by the position of the label used for tagging.",
          "schema" : {
            "type" : "string",
            "enum" : [ "BACK", "BASE", "FRONT", "LEFT_SIDE", "RIGHT_SIDE", "TOP" ],
            "nullable" : true
          }
        }, {
          "name" : "labelSize",
          "in" : "query",
          "description" : "The parameter to filter assets by the type of label used for tagging.",
          "schema" : {
            "type" : "string",
            "enum" : [ "A4", "A6", "RECTANGLE", "SQUARE" ],
            "nullable" : true
          }
        }, {
          "name" : "class",
          "in" : "query",
          "description" : "Ref: Asset Class. The parameter to filter assets by their classification.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subClass",
          "in" : "query",
          "description" : "Ref: Asset Class. The parameter to filter assets by their sub-classification.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Asset Class. The parameter to filter assets by their type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subType",
          "in" : "query",
          "description" : "Ref: Asset Class. The parameter to filter assets by their sub-type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "component",
          "in" : "query",
          "description" : "Ref: Asset Class. The parameter to filter assets by their component type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter assets by the building where they're located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter assets by the sub-building where they're located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "floor.name",
          "in" : "query",
          "description" : "The parameter to filter assets by the floor where they're located.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "space",
          "in" : "query",
          "description" : "Ref: Space. The parameter to filter assets by the space where they're located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "installationDate",
          "in" : "query",
          "description" : "The parameter to filter assets by their installation date.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "isFlagged",
          "in" : "query",
          "description" : "The parameter to filter assets if they're flagged or not.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "isInactive",
          "in" : "query",
          "description" : "The parameter to filter assets if they're active or decommissioned.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "internalReviewStatus",
          "in" : "query",
          "description" : "The parameter to filter spaces by the status of the internal review.",
          "schema" : {
            "type" : "string",
            "enum" : [ "PENDING_REVIEW", "REVIEW_IN_PROGRESS", "REVIEWED" ],
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter asset records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter asset records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the asset notes or description.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "building,floor.order,order",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried assets",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "assets" ],
        "summary" : "Create or tag a new asset",
        "description" : "Create or tag a new asset",
        "operationId" : "createAsset",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New asset to create or tag",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Asset"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created asset",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/assets/{id}" : {
      "get" : {
        "tags" : [ "assets" ],
        "summary" : "Retrieve asset record by its id or label",
        "description" : "Retrieves a single asset by its id or label",
        "operationId" : "getAsset",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of asset to retrieve. Can be the asset's _id or label.",
          "required" : true,
          "schema" : {
            "oneOf" : [ {
              "description" : "The asset's _id (Object Id).",
              "type" : "string",
              "format" : "objectid"
            }, {
              "description" : "The asset's _id label.",
              "type" : "string"
            } ],
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved asset information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "assets" ],
        "summary" : "Update values for an existing asset",
        "description" : "Update an existing asset",
        "operationId" : "updateAsset",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of asset to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Asset to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated asset",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/assets/{id}/status" : {
      "patch" : {
        "tags" : [ "assets" ],
        "summary" : "Change status an existing asset",
        "description" : "Change status an existing asset",
        "operationId" : "changeAssetStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of asset to change status.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Asset status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "isInactive" ],
                "properties" : {
                  "isInactive" : {
                    "description" : "The status of the asset.",
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully changed asset status",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/assets/{id}/internal-review-status" : {
      "patch" : {
        "tags" : [ "assets" ],
        "summary" : "Change internal review status an existing asset",
        "description" : "Change internal review status an existing asset",
        "operationId" : "changeAssetInternalReviewStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of asset to change status.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Asset internal review status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "internalReviewStatus" ],
                "properties" : {
                  "internalReviewStatus" : {
                    "description" : "The internal review status of the asset.",
                    "type" : "string",
                    "enum" : [ "PENDING_REVIEW", "REVIEW_IN_PROGRESS", "REVIEWED" ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully changed asset internal review status",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/audits" : {
      "get" : {
        "tags" : [ "audits" ],
        "summary" : "Query or search audits",
        "description" : "Retrieves a collection of audits",
        "operationId" : "findAudits",
        "parameters" : [ {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter the query results using the date/time when the audit was made.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "recordType",
          "in" : "query",
          "description" : "The parameter to filter the query results by the type of record that was audited.",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASSET", "ENTITY", "SPACE" ],
            "nullable" : true
          }
        }, {
          "name" : "recordId",
          "in" : "query",
          "description" : "The parameter to filter the query results by the id of the record that as audited.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "result",
          "in" : "query",
          "description" : "The parameter to filter the query results by the result of the audit made to the record.",
          "schema" : {
            "type" : "string",
            "enum" : [ "PASSED", "FAILED" ],
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the audit notes.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried audits",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "audits" ],
        "summary" : "Create a new audit",
        "description" : "Create a new audit",
        "operationId" : "createAudit",
        "requestBody" : {
          "description" : "New audit to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Audit"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created audit",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/audits/{id}" : {
      "get" : {
        "tags" : [ "audits" ],
        "summary" : "Retrieve audit record by id",
        "description" : "Retrieves a single audit by its id",
        "operationId" : "getAudit",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of audit record to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved audit information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Audit"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/batches" : {
      "get" : {
        "tags" : [ "batches" ],
        "summary" : "Query or search batches",
        "description" : "Retrieves a collection of batches",
        "operationId" : "findBatches",
        "parameters" : [ {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter the query results using the date/time when the batch was generated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the batch name or notes.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried batches",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "batches" ],
        "summary" : "Create a new batch",
        "description" : "Create a new batch",
        "operationId" : "createBatch",
        "requestBody" : {
          "description" : "New batch to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Batch"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created batch",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Batch"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/batches/{id}" : {
      "get" : {
        "tags" : [ "batches" ],
        "summary" : "Retrieve batch record by id",
        "description" : "Retrieves a single batch by its id",
        "operationId" : "getBatch",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of batch to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved batch information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Batch"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/batch-jobs" : {
      "get" : {
        "tags" : [ "batch-jobs" ],
        "summary" : "Query or search batch jobs",
        "description" : "Retrieves a collection of batch jobs",
        "operationId" : "findBatchJobs",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "The parameter to filter batch job records by their type.",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASSETS", "BUILDINGS", "SPACES" ],
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter batch job records by their status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "PENDING", "IN_PROGRESS", "DONE" ],
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter batch job records by the date/time when they were submitted for processing.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the batch job notes.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried batch jobs",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchJobQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "batch-jobs" ],
        "summary" : "Create a new batch job",
        "description" : "Create a new batch job",
        "operationId" : "createBatchJob",
        "requestBody" : {
          "description" : "New batch job to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchJob"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created batch job",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchJob"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/batch-jobs/{id}" : {
      "get" : {
        "tags" : [ "batch-jobs" ],
        "summary" : "Retrieve batch job record by id",
        "description" : "Retrieves a single batch job by its id",
        "operationId" : "getBatchJob",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of batch job to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved batch job information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchJob"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/budget-types" : {
      "get" : {
        "tags" : [ "budget-types" ],
        "summary" : "Query or search budget types",
        "description" : "Retrieves a collection of budget types",
        "operationId" : "findBudgetTypes",
        "parameters" : [ {
          "name" : "classes",
          "in" : "query",
          "description" : "The parameter to filter the budget types by the class.",
          "schema" : {
            "type" : "string",
            "enum" : [ "COMMUNITY_MANAGEMENT", "FACILITIES_MANAGEMENT", "OWNERS_ASSOCIATION", "PROPERTY_MANAGEMENT", "SERVICE_PROVIDER" ],
            "nullable" : true
          }
        }, {
          "name" : "parent",
          "in" : "query",
          "description" : "Ref: Budget Type. The parameter to filter the budget types by their parent.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "serviceTypes",
          "in" : "query",
          "description" : "Ref: Service Types. The parameter to filter the budget types by the service types associated to them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "isPinned",
          "in" : "query",
          "description" : "The parameter to filter budget types by pin status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "isInactive",
          "in" : "query",
          "description" : "The parameter to filter budget types by their status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the budget type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried budget types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BudgetTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "budget-types" ],
        "summary" : "Create a new budget type",
        "description" : "Create a new budget type",
        "operationId" : "createBudgetType",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New budget type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/BudgetType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created budget type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BudgetType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/budget-types/{id}" : {
      "get" : {
        "tags" : [ "budget-types" ],
        "summary" : "Retrieve budget type record by id",
        "description" : "Retrieves a single budget type by its id",
        "operationId" : "getBudgetType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of budget type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved budget type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BudgetType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "budget-types" ],
        "summary" : "Update values for an existing budget type",
        "description" : "Update an existing budget type",
        "operationId" : "updateBudgetType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of budget type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Budget type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/BudgetType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated budget type.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BudgetType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "budget-types" ],
        "summary" : "Delete an existing budget type",
        "description" : "Delete an existing budget type",
        "operationId" : "removeBudgetType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of budget type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/budgets" : {
      "get" : {
        "tags" : [ "budgets" ],
        "summary" : "Query or search budgets",
        "description" : "Retrieves a collection of budgets",
        "operationId" : "findBudgets",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Budget Type. The parameter to filter budget records by their type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "visibility",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter budget records by user visibility.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "assignee",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter budget records by the assigned user.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter budget records by their status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "PENDING_REVIEW", "APPROVED", "REJECTED" ],
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter budget records by building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter budget records by sub-building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "totalAmount",
          "in" : "query",
          "description" : "The parameter to filter budget records by their total amount.",
          "schema" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          }
        }, {
          "name" : "margin",
          "in" : "query",
          "description" : "The parameter to filter budget records by the applied margin.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "grossAmount",
          "in" : "query",
          "description" : "The parameter to filter budget records by their gross amount.",
          "schema" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The parameter to filter budget records by the currency used.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "The parameter to filter budget records by the date/time when they start effectivity.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "The parameter to filter budget records by the date/time when they end effectivity.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter budget records by the date/time when they have been requested or filed.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter budget records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter budget records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the reference number and notes of the budget.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried budgets",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BudgetQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "budgets" ],
        "summary" : "Create a new budget",
        "description" : "Create a new budget",
        "operationId" : "createBudget",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New budget to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Budget"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created budget",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Budget"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/budgets/{id}" : {
      "get" : {
        "tags" : [ "budgets" ],
        "summary" : "Retrieve budget record by id",
        "description" : "Retrieves a single budget by its id",
        "operationId" : "getBudget",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of budget to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved budget information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Budget"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "budgets" ],
        "summary" : "Update values for an existing budget",
        "description" : "Update an existing budget",
        "operationId" : "updateBudget",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of budget to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Budget to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Budget"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated budget",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Budget"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/buildings" : {
      "get" : {
        "tags" : [ "buildings" ],
        "summary" : "Query or search buildings",
        "description" : "Retrieves a collection of buildings",
        "operationId" : "findBuildings",
        "parameters" : [ {
          "name" : "near",
          "in" : "query",
          "description" : "The parameter to filter building records nearby a vicinity. Value should be comma-separated values of longitude, latitude and max distance (in meters). Example: 121.0201419,14.5581582,5000",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "label",
          "in" : "query",
          "description" : "The parameter to filter buildings by the label used for tagging.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "height",
          "in" : "query",
          "description" : "The parameter to filter the query results using the height of the building.",
          "schema" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          }
        }, {
          "name" : "constructionStatus",
          "in" : "query",
          "description" : "The parameter to filter the query results using the construction status of the building.",
          "schema" : {
            "type" : "string",
            "enum" : [ "PRE_CONSTRUCTON", "UNDER_CONSTRUCTION", "COMPLETE" ],
            "nullable" : true
          }
        }, {
          "name" : "completionDate",
          "in" : "query",
          "description" : "The parameter to filter the query results using the completion date of the building.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "parent",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter the query results using the parent building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "class",
          "in" : "query",
          "description" : "The parameter to filter the query results using the building class.",
          "schema" : {
            "type" : "string",
            "enum" : [ "LOW_RISE", "MID_RISE", "HIGH_RISE", "SKYSCRAPER", "VILLA", "TOWNHOUSE", "DETACHED", "SEMI_DETACHED", "TERRACED" ],
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter the query results using the building status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "PENDING_VALIDATION", "ONLINE" ],
            "nullable" : true
          }
        }, {
          "name" : "address.city",
          "in" : "query",
          "description" : "The parameter to filter the query results using the city where the building is located.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "address.state",
          "in" : "query",
          "description" : "The parameter to filter the query results using the state where the building is located.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "address.country",
          "in" : "query",
          "description" : "Ref: Country. The parameter to filter the query results using the country where the building is located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "isInactive",
          "in" : "query",
          "description" : "The parameter to filter buildings if they're active or decommissioned.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter the query results using the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter the query results using the date/time when they were last modified.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the building name or description.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried buildings",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BuildingQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "buildings" ],
        "summary" : "Create a new building",
        "description" : "Create a new building",
        "operationId" : "createBuilding",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New building to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Building"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created building",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Building"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/buildings/{id}" : {
      "get" : {
        "tags" : [ "buildings" ],
        "summary" : "Retrieve building record by its id or label",
        "description" : "Retrieves a single building by its id or label",
        "operationId" : "getBuilding",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of building to retrieve. Can be the building's _id or label.",
          "required" : true,
          "schema" : {
            "oneOf" : [ {
              "description" : "The building's _id (Object Id).",
              "type" : "string",
              "format" : "objectid"
            }, {
              "description" : "The building's _id label.",
              "type" : "string"
            } ],
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved building information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Building"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "buildings" ],
        "summary" : "Update values for an existing building",
        "description" : "Update an existing building",
        "operationId" : "updateBuilding",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of building to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Building to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Building"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated building",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Building"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/buildings/{id}/status" : {
      "patch" : {
        "tags" : [ "buildings" ],
        "summary" : "Change status of an existing building",
        "description" : "Change status of an existing building",
        "operationId" : "changeBuildingStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of building to change status",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Building status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "isInactive" ],
                "properties" : {
                  "isInactive" : {
                    "description" : "The status of the building.",
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully decommissioned building",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Building"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/company-sizes" : {
      "get" : {
        "tags" : [ "company-sizes" ],
        "summary" : "Query or search company sizes",
        "description" : "Retrieves a collection of company sizes",
        "operationId" : "findCompanySizes",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the company size name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "min",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried company sizes",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CompanySizeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "company-sizes" ],
        "summary" : "Create a new company size",
        "description" : "Create a new company size",
        "operationId" : "createCompanySize",
        "requestBody" : {
          "description" : "New company size to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/CompanySize"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created company size",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CompanySize"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/company-sizes/{id}" : {
      "get" : {
        "tags" : [ "company-sizes" ],
        "summary" : "Retrieve company size record by id",
        "description" : "Retrieves a single company size by its id",
        "operationId" : "getCompanySize",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of company size to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved company size information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CompanySize"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "company-sizes" ],
        "summary" : "Update values for an existing company size",
        "description" : "Update an existing company size",
        "operationId" : "updateCompanySize",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of company size to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Company Size to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/CompanySize"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated company size.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CompanySize"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "company-sizes" ],
        "summary" : "Delete an existing company size",
        "description" : "Delete an existing company size",
        "operationId" : "removeCompanySize",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of company size to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/contracts" : {
      "get" : {
        "tags" : [ "contracts" ],
        "summary" : "Query or search contracts",
        "description" : "Retrieves a collection of contracts",
        "operationId" : "findContracts",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter contracts by their status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "PENDING_REVIEW", "EXECUTED", "REJECTED" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter contracts by the associated building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter contracts by the associated sub-building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "acceptanceLevel",
          "in" : "query",
          "description" : "The parameter to filter contracts by the acceptance level.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "frequency",
          "in" : "query",
          "description" : "The parameter to filter contracts by the billing frequency.",
          "schema" : {
            "type" : "string",
            "enum" : [ "WEEKLY", "MONTHLY", "QUARTERLY", "BI_ANNUALLY", "ANNUALLY" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "terms",
          "in" : "query",
          "description" : "The parameter to filter contracts by the billing terms.",
          "schema" : {
            "type" : "string",
            "enum" : [ "ADVANCE_100", "ADVANCE_50", "ADVANCE_20", "30_DAYS", "60_DAYS", "90_DAYS", "180_DAYS" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "paymentMethod",
          "in" : "query",
          "description" : "The parameter to filter contracts by the payment method.",
          "schema" : {
            "type" : "string",
            "enum" : [ "CASH", "CHEQUE", "CREDIT" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The parameter to filter contracts by the currency used.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "mobilisationStartDate",
          "in" : "query",
          "description" : "The parameter to filter contracts by their mobilisation start date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "mobilisationEndDate",
          "in" : "query",
          "description" : "The parameter to filter contracts by their mobilisation end date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "The parameter to filter contracts by their start date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "The parameter to filter contracts by their end date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "totalAmount",
          "in" : "query",
          "description" : "The parameter to filter contracts by their total amount.",
          "schema" : {
            "type" : "number",
            "format" : "float",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "totalHeadCount",
          "in" : "query",
          "description" : "The parameter to filter contracts by their total head count.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter contract by their date of filing.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "awardee",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter contract records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter contract records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter contract records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using keyword search.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried contracts",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "contracts" ],
        "summary" : "Create a new contract",
        "description" : "Create a new contract",
        "operationId" : "createContract",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New contract to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Contract"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created contract",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Contract"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/contracts/{id}" : {
      "get" : {
        "tags" : [ "contracts" ],
        "summary" : "Retrieve contract record by id",
        "description" : "Retrieves a single contract by its id",
        "operationId" : "getContract",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of contract to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved contract information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Contract"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "contracts" ],
        "summary" : "Update values for an existing contract",
        "description" : "Update an existing contracts",
        "operationId" : "updateContract",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of contract to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Contract to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Contract"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated contract.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Contract"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/contracts/{id}/status" : {
      "patch" : {
        "tags" : [ "contracts" ],
        "summary" : "Update status of an existing contract",
        "description" : "Update status of an existing contract",
        "operationId" : "updateContractStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of contract to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Contract status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "status" ],
                "properties" : {
                  "status" : {
                    "description" : "The status of the contract.",
                    "type" : "string",
                    "enum" : [ "PENDING_REVIEW", "EXECUTED", "REJECTED" ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated contract",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Contract"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/contract-services" : {
      "get" : {
        "tags" : [ "contract-services" ],
        "summary" : "Query or search contract Services",
        "description" : "Retrieves a collection of contract Service",
        "operationId" : "findContractServices",
        "parameters" : [ {
          "name" : "service",
          "in" : "query",
          "description" : "Ref: Service Type. The parameter to filter contract services by type of service being requested.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using keyword search.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "_id",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried Contract Services",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractServiceQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "contract-services" ],
        "summary" : "Create a new contract Service",
        "description" : "Create a new contract Service",
        "operationId" : "createContractService",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New Contract Service to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractService"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created contract Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/contract-services/{id}" : {
      "get" : {
        "tags" : [ "contract-services" ],
        "summary" : "Retrieve Contract Service record by id",
        "description" : "Retrieves a single Contract Service by its id",
        "operationId" : "getContractService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Contract Service to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved Contract Service information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "contract-services" ],
        "summary" : "Update values for an existing Contract Service",
        "description" : "Update an existing Contract Service",
        "operationId" : "updateContractService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Contract Service to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Contract Service to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated Contract Service.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/contract-sub-services" : {
      "get" : {
        "tags" : [ "contract-sub-services" ],
        "summary" : "Query or search Contract Sub Services",
        "description" : "Retrieves a collection of Contract Sub Service",
        "operationId" : "findContractSubServices",
        "parameters" : [ {
          "name" : "service",
          "in" : "query",
          "description" : "Ref: Service Type. The parameter to filter Contract Sub Services by type of service.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "The parameter to filter Contract Sub Services by amount.",
          "schema" : {
            "type" : "number",
            "format" : "float",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "headCount",
          "in" : "query",
          "description" : "The parameter to filter Contract Sub Services by head count.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "isScheduled",
          "in" : "query",
          "description" : "The parameter to filter Contract Sub Services by the scheduled flag.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "isOnDemand",
          "in" : "query",
          "description" : "The parameter to filter Contract Sub Services by the on-demand flag.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "includeConsumables",
          "in" : "query",
          "description" : "The parameter to filter Contract Sub Services by the consumable inclusion flag.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "includeParts",
          "in" : "query",
          "description" : "The parameter to filter Contract Sub Services by the consumable inclusion flag.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "partsValue",
          "in" : "query",
          "description" : "The parameter to filter Contract Sub Services by parts value.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "costPlus",
          "in" : "query",
          "description" : "The parameter to filter Contract Sub Services by cost plus.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using keyword search.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "_id",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried Contract Sub Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractSubServiceQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "contract-sub-services" ],
        "summary" : "Create a new Contract Sub Service",
        "description" : "Create a new Contract Sub Service",
        "operationId" : "createContractSubService",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New Contract Sub Service to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractSubService"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created Contract Sub Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractSubService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/contract-sub-services/{id}" : {
      "get" : {
        "tags" : [ "contract-sub-services" ],
        "summary" : "Retrieve Contract Sub Service record by id",
        "description" : "Retrieves a single Contract Sub Service by its id",
        "operationId" : "getContractSubService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Contract Sub Service to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved Contract Sub Service information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractSubService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "contract-sub-services" ],
        "summary" : "Update values for an existing Contract Sub Service",
        "description" : "Update an existing Contract Sub Service",
        "operationId" : "updateContractSubService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Contract Sub Service to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Contract Sub Service to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContractSubService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated Contract Sub Service.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractSubService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/countries" : {
      "get" : {
        "tags" : [ "countries" ],
        "summary" : "Query or search countries",
        "description" : "Retrieves a collection of countries",
        "operationId" : "findCountries",
        "parameters" : [ {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter country records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter country records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the country name or code.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried countries",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CountryQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "countries" ],
        "summary" : "Create a new country",
        "description" : "Create a new country",
        "operationId" : "createCountry",
        "requestBody" : {
          "description" : "New country to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Country"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created country",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/countries/{id}" : {
      "get" : {
        "tags" : [ "countries" ],
        "summary" : "Retrieve country record by id",
        "description" : "Retrieves a single country by its id",
        "operationId" : "getCountry",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of country to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved country information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "countries" ],
        "summary" : "Update values for an existing country",
        "description" : "Update an existing country",
        "operationId" : "updateCountry",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of country to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Country to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Country"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated country",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "countries" ],
        "summary" : "Delete an existing country",
        "description" : "Delete an existing country",
        "operationId" : "removeCountry",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of country to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/distributions" : {
      "get" : {
        "tags" : [ "distributions" ],
        "summary" : "Query or search distributions",
        "description" : "Retrieves a collection of distributions",
        "operationId" : "findDistributions",
        "parameters" : [ {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter the query results using the building for which the distribution was created.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter the query results using the date/time when the batch was generated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the notes.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried distributions",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DistributionQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "distributions" ],
        "summary" : "Create a new distribution",
        "description" : "Create a new distribution",
        "operationId" : "createDistribution",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New distribution to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Distribution"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created distribution",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Distribution"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/distributions/{id}" : {
      "get" : {
        "tags" : [ "distributions" ],
        "summary" : "Retrieve distribution record by id",
        "description" : "Retrieves a single distribution by its id",
        "operationId" : "getDistribution",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of distribution to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved distribution information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Distribution"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "distributions" ],
        "summary" : "Update values for an existing distribution",
        "description" : "Update an existing distribution",
        "operationId" : "updateDistribution",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of distribution to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Distribution to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Distribution"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated distribution",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Distribution"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/entities" : {
      "get" : {
        "tags" : [ "entities" ],
        "summary" : "Query or search entities",
        "description" : "Retrieves a collection of entities",
        "operationId" : "findEntities",
        "parameters" : [ {
          "name" : "near",
          "in" : "query",
          "description" : "The parameter to filter entity records nearby a vicinity. Value should be comma-separated values of longitude, latitude and max distance (in meters). Example: 121.0201419,14.5581582,5000",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Entity Type. The parameter to filter the query results using the entity type.",
          "schema" : {
            "type" : "string",
            "enum" : [ "COMMERCIAL", "NON_COMMERCIAL" ],
            "nullable" : true
          }
        }, {
          "name" : "services",
          "in" : "query",
          "description" : "Ref: Service Type. The parameter to filter the query results using the entity's service.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "verificationStatus",
          "in" : "query",
          "description" : "The parameter to filter the query results using the entity's verification status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "NOT_VALIDATED", "PENDING_VALIDATION", "APPROVED", "DISAPPROVED" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "The parameter to filter the query results using the city where the entity is located.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "The parameter to filter the query results using the state where the entity is located.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "Ref: Country. The parameter to filter the query results using the country where the entity is located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "isInactive",
          "in" : "query",
          "description" : "The parameter to filter entities whether they're active or inactive.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter the query results using the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter the query results using the date/time when they were last modified.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the entity name or description.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried entities",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "entities" ],
        "summary" : "Create a new entity",
        "description" : "Create a new entity",
        "operationId" : "createEntity",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New entity to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Entity"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created entity",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Entity"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/entities/{id}" : {
      "get" : {
        "tags" : [ "entities" ],
        "summary" : "Retrieve entity record by id",
        "description" : "Retrieves a single entity by its id",
        "operationId" : "getEntity",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of entity to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved entity information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Entity"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "entities" ],
        "summary" : "Update values for an existing entity",
        "description" : "Update an existing entity",
        "operationId" : "updateEntity",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of entity to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Entity to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Entity"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated entity",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Entity"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/entities/{id}/status" : {
      "patch" : {
        "tags" : [ "entities" ],
        "summary" : "Change activation status of an existing entity",
        "description" : "Change activation status of an existing entity",
        "operationId" : "changeEntityStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of entity to change activation status",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Entity activation status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "isInactive" ],
                "properties" : {
                  "isInactive" : {
                    "description" : "The activation status of the entity.",
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully changed entity activation status",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Entity"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Query or search events",
        "description" : "Retrieves a collection of events",
        "operationId" : "findEvents",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Permit Type. The parameter to filter event records by their type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter event records by their status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "CANCELLED" ]
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter event records by building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter event records by sub-building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "space",
          "in" : "query",
          "description" : "Ref: Space. The parameter to filter event records by space.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "The parameter to filter event records by the date/time when they start.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "The parameter to filter event records by the date/time when they end.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter event records by the date/time when they have been filed.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter event records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter event records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the reference number and notes of the event.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried events",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Create a new event",
        "description" : "Create a new event",
        "operationId" : "createEvent",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New event to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Event"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created event",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/events/{id}" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Retrieve event record by id",
        "description" : "Retrieves a single event by its id",
        "operationId" : "getEvent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of event to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved event information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "events" ],
        "summary" : "Update values for an existing event",
        "description" : "Update an existing event",
        "operationId" : "updateEvent",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of event to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Event to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Event"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated event",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/event-types" : {
      "get" : {
        "tags" : [ "event-types" ],
        "summary" : "Query or search event types",
        "description" : "Retrieves a collection of event types",
        "operationId" : "findEventTypes",
        "parameters" : [ {
          "name" : "isPinned",
          "in" : "query",
          "description" : "The parameter to filter event types by pin status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter event type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter event types records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the event type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried event types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "event-types" ],
        "summary" : "Create a new event type",
        "description" : "Create a new event type",
        "operationId" : "createEventType",
        "requestBody" : {
          "description" : "New event type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created event type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/event-types/{id}" : {
      "get" : {
        "tags" : [ "event-types" ],
        "summary" : "Retrieve event type record by id",
        "description" : "Retrieves a single event type by its id",
        "operationId" : "getEventType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of event type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved event type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "event-types" ],
        "summary" : "Update values for an existing event type",
        "description" : "Update an existing event type",
        "operationId" : "updateEventType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of event type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Event type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated event type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "event-types" ],
        "summary" : "Delete an existing event type",
        "description" : "Delete an existing event type",
        "operationId" : "removeEventType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of event type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/files" : {
      "get" : {
        "tags" : [ "files" ],
        "summary" : "Query or search files",
        "description" : "Retrieves a collection of files",
        "operationId" : "findFiles",
        "parameters" : [ {
          "name" : "externalId",
          "in" : "query",
          "description" : "The parameter to filter the query results using the file external id.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The parameter to filter the query results using the file type.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "The parameter to filter the query results using the file format.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter the query results using the file creation date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the file external id.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried files",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "files" ],
        "summary" : "Create a new file",
        "description" : "Create a new file",
        "operationId" : "createFile",
        "requestBody" : {
          "description" : "New file to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/File"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created file",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/File"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/files/{id}" : {
      "get" : {
        "tags" : [ "files" ],
        "summary" : "Retrieve file record by id",
        "description" : "Retrieves a single file by its id",
        "operationId" : "getFile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of file to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved file information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/File"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/inspections" : {
      "get" : {
        "tags" : [ "inspections" ],
        "summary" : "Query or search inspections",
        "description" : "Retrieves a collection of inspections",
        "operationId" : "findInspections",
        "parameters" : [ {
          "name" : "assignee",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter inspection records by assignee.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Inspection Type. The parameter to filter inspection records by their type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter inspection records by building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter inspection records by sub-building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "floor",
          "in" : "query",
          "description" : "The parameter to filter inspection records by floor name.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "scheduledStart",
          "in" : "query",
          "description" : "The parameter to filter inspection records by the date/time when they have been scheduled to start.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "scheduledEnd",
          "in" : "query",
          "description" : "The parameter to filter ticket records by the date/time when they have been scheduled to be completed.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "startedAt",
          "in" : "query",
          "description" : "The parameter to filter inspection records by the date/time when they have been started.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "completedAt",
          "in" : "query",
          "description" : "The parameter to filter inspection records by the date/time when they have been completed.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter inspection records by status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "COMPLETED", "IN_PROGRESS", "MISSED", "PENDING" ],
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter inspection records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter inspection records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the reference number and notes of the inspection.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-scheduledStart",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried inspections",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InspectionQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "inspections" ],
        "summary" : "Create a new inspection",
        "description" : "Create a new inspection",
        "operationId" : "createInspection",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New inspection to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Inspection"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created inspection",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Inspection"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/inspections/{id}" : {
      "get" : {
        "tags" : [ "inspections" ],
        "summary" : "Retrieve inspection record by id",
        "description" : "Retrieves a single inspection by its id",
        "operationId" : "getInspection",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of inspection to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved inspection information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Inspection"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "inspections" ],
        "summary" : "Update values for an existing inspection",
        "description" : "Update an existing inspection",
        "operationId" : "updateInspection",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of inspection to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Inspection to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Inspection"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated inspection",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Inspection"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/inspections/{id}/status" : {
      "patch" : {
        "tags" : [ "inspections" ],
        "summary" : "Update status of an existing inspection",
        "description" : "Update status of an existing inspection",
        "operationId" : "updateInspectionStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of inspection to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Inspection status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "status" ],
                "properties" : {
                  "status" : {
                    "description" : "The status of the inspection.",
                    "type" : "string",
                    "enum" : [ "COMPLETED", "IN_PROGRESS", "MISSED", "PENDING" ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated inspection",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Inspection"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/inspection-types" : {
      "get" : {
        "tags" : [ "inspection-types" ],
        "summary" : "Query or search inspection types",
        "description" : "Retrieves a collection of inspection types",
        "operationId" : "findInspectionTypes",
        "parameters" : [ {
          "name" : "isPinned",
          "in" : "query",
          "description" : "The parameter to filter inspection types by pin status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter inspection type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter inspection types records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the inspection type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried inspection types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InspectionTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "inspection-types" ],
        "summary" : "Create a new inspection type",
        "description" : "Create a new inspection type",
        "operationId" : "createInspectionType",
        "requestBody" : {
          "description" : "New inspection type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/InspectionType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created inspection type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InspectionType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/inspection-types/{id}" : {
      "get" : {
        "tags" : [ "inspection-types" ],
        "summary" : "Retrieve inspection type record by id",
        "description" : "Retrieves a single inspection type by its id",
        "operationId" : "getInspectionType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of inspection type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved inspection type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InspectionType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "inspection-types" ],
        "summary" : "Update values for an existing inspection type",
        "description" : "Update an existing inspection type",
        "operationId" : "updateInspectionType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of inspection type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Inspection type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/InspectionType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated inspection type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InspectionType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "inspection-types" ],
        "summary" : "Delete an existing inspection type",
        "description" : "Delete an existing inspection type",
        "operationId" : "removeInspectionType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of inspection type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/issues" : {
      "get" : {
        "tags" : [ "issues" ],
        "summary" : "Query or search issues",
        "description" : "Retrieves a collection of issues",
        "operationId" : "findIssues",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter issue record using the issue status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "OPEN", "CLOSED" ],
            "nullable" : true
          }
        }, {
          "name" : "severity",
          "in" : "query",
          "description" : "The parameter to filter issue record using the issue severity.",
          "schema" : {
            "type" : "string",
            "enum" : [ "LOW", "MEDIUM", "HIGH", "EPIC" ],
            "nullable" : true
          }
        }, {
          "name" : "incidentDate",
          "in" : "query",
          "description" : "The parameter to filter issue records using the incident date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "recordType",
          "in" : "query",
          "description" : "The parameter to filter issue record using the record type.",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASSET", "ENTITY", "SPACE" ],
            "nullable" : true
          }
        }, {
          "name" : "recordId",
          "in" : "query",
          "description" : "The parameter to filter issue record using the record id.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter spacial type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter spacial type records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the spacial type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-incidentDate",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried issues.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IssueQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "issues" ],
        "summary" : "Create a new issue",
        "description" : "Create a new issue",
        "operationId" : "createIssue",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New issue to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Issue"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created issue",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Issue"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/issues/{id}" : {
      "get" : {
        "tags" : [ "issues" ],
        "summary" : "Retrieve an issue record by id",
        "description" : "Retrieves a single issue by its id",
        "operationId" : "getIssue",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of issue to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved issue information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Issue"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "issues" ],
        "summary" : "Update values for an existing issue",
        "description" : "Update an existing issue",
        "operationId" : "updateIssue",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of issue to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Issue to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Issue"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated issue",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Issue"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/issues/{id}/status" : {
      "patch" : {
        "tags" : [ "issues" ],
        "summary" : "Update status of an existing issue",
        "description" : "Update status of an existing issue",
        "operationId" : "updateIssueStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of issue to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Issue status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "status" ],
                "properties" : {
                  "status" : {
                    "description" : "The status of the issue.",
                    "type" : "string",
                    "enum" : [ "LOW", "MEDIUM", "HIGH", "EPIC" ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated issue",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Issue"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/listings" : {
      "get" : {
        "tags" : [ "listings" ],
        "summary" : "Query or search listings",
        "description" : "Retrieves a collection of listings",
        "operationId" : "findListings",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Listing Type. The parameter to filter listing records by their type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subType",
          "in" : "query",
          "description" : "Ref: Listing Type. The parameter to filter listing records by their sub-type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter listing records by status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "AVAILABLE", "SOLD" ],
            "nullable" : true
          }
        }, {
          "name" : "condition",
          "in" : "query",
          "description" : "The parameter to filter listing records by the item condition.",
          "schema" : {
            "type" : "string",
            "enum" : [ "BRAND_NEW", "USED" ],
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter listing records by building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter listing records by sub-building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "asset",
          "in" : "query",
          "description" : "Ref: Asset. The parameter to filter listing records by asset.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "fee",
          "in" : "query",
          "description" : "The parameter to filter listing records by the fee amount.",
          "schema" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The parameter to filter listing records by the currency used.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter listing records by the date/time when they have been requested or filed.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter listing records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter listing records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the reference number and notes of the listings.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried listings",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListingQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "listings" ],
        "summary" : "Create a new listing",
        "description" : "Create a new listing",
        "operationId" : "createListing",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New listing to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Listing"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created listing",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Listing"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/listings/{id}" : {
      "get" : {
        "tags" : [ "listings" ],
        "summary" : "Retrieve listing record by id",
        "description" : "Retrieves a single listing by its id",
        "operationId" : "getListing",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of listing to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved listing information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Listing"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "listings" ],
        "summary" : "Update values for an existing listing",
        "description" : "Update an existing listing",
        "operationId" : "updateListing",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of listing to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Listing to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Listing"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated listing",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Listing"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/listing-types" : {
      "get" : {
        "tags" : [ "listing-types" ],
        "summary" : "Query or search listing types",
        "description" : "Retrieves a collection of listing types",
        "operationId" : "findListingTypes",
        "parameters" : [ {
          "name" : "parent",
          "in" : "query",
          "description" : "Ref: Listing Type. The parameter to filter listing types by their parent.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "isPinned",
          "in" : "query",
          "description" : "The parameter to filter listing types by pin status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter listing type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter listing types records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the listing type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried listing types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListingTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "listing-types" ],
        "summary" : "Create a new listing type",
        "description" : "Create a new listing type",
        "operationId" : "createListingType",
        "requestBody" : {
          "description" : "New listing type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListingType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created listing type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListingType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/listing-types/{id}" : {
      "get" : {
        "tags" : [ "listing-types" ],
        "summary" : "Retrieve listing type record by id",
        "description" : "Retrieves a single listing type by its id",
        "operationId" : "getListingType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of listing type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved listing type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListingType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "listing-types" ],
        "summary" : "Update values for an existing listing type",
        "description" : "Update an existing listing type",
        "operationId" : "updateListingType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of listing type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Listing type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListingType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated listing type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListingType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "listing-types" ],
        "summary" : "Delete an existing listing type",
        "description" : "Delete an existing listing type",
        "operationId" : "removeListingType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of listing type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/notices" : {
      "get" : {
        "tags" : [ "notices" ],
        "summary" : "Query or search notices",
        "description" : "Retrieves a collection of notices",
        "operationId" : "findNotices",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Notice Type. The parameter to filter notice records by their type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "recipients",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter notice records by the recipients.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter notice records by building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter notice records by sub-building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "The parameter to filter notice records by the date/time when they have been requested to start effectivity.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "The parameter to filter notice records by the date/time when they have been requested to end effectivity.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter notice records by the date/time when they have been requested or filed.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter notice records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter notice records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the reference number and notes of the notice.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried notices",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NoticeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "notices" ],
        "summary" : "Create a new notice",
        "description" : "Create a new notice",
        "operationId" : "createNotice",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New notice to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Notice"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created notice",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notice"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/notices/{id}" : {
      "get" : {
        "tags" : [ "notices" ],
        "summary" : "Retrieve notice record by id",
        "description" : "Retrieves a single notice by its id",
        "operationId" : "getNotice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of notice to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved notice information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notice"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "notices" ],
        "summary" : "Update values for an existing notice",
        "description" : "Update an existing notice",
        "operationId" : "updateNotice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of notice to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Notice to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Notice"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated notice",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notice"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/notice-types" : {
      "get" : {
        "tags" : [ "notice-types" ],
        "summary" : "Query or search notice types",
        "description" : "Retrieves a collection of notice types",
        "operationId" : "findNoticeTypes",
        "parameters" : [ {
          "name" : "isPinned",
          "in" : "query",
          "description" : "The parameter to filter notice types by pin status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter notice type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter notice types records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the notice type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried notice types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NoticeTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "notice-types" ],
        "summary" : "Create a new notice type",
        "description" : "Create a new notice type",
        "operationId" : "createNoticeType",
        "requestBody" : {
          "description" : "New notice type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/NoticeType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created notice type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NoticeType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/notice-types/{id}" : {
      "get" : {
        "tags" : [ "notice-types" ],
        "summary" : "Retrieve notice type record by id",
        "description" : "Retrieves a single notice type by its id",
        "operationId" : "getNoticeType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of notice type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved notice type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NoticeType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "notice-types" ],
        "summary" : "Update values for an existing notice type",
        "description" : "Update an existing notice type",
        "operationId" : "updateNoticeType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of notice type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Notice type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/NoticeType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated notice type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NoticeType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "notice-types" ],
        "summary" : "Delete an existing notice type",
        "description" : "Delete an existing notice type",
        "operationId" : "removeNoticeType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of notice type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/notifications" : {
      "get" : {
        "tags" : [ "notifications" ],
        "summary" : "Query or search notifications",
        "description" : "Retrieves a collection of notifications",
        "operationId" : "findNotifications",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter notification records by the target user.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "The parameter to filter notification records by the context of the action.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "isRead",
          "in" : "query",
          "description" : "The parameter to filter notification records by read status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter notification records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter notification records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the notice type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried notifications",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/notifications/{id}" : {
      "get" : {
        "tags" : [ "notifications" ],
        "summary" : "Retrieve notification record by id",
        "description" : "Retrieves a single notification by its id",
        "operationId" : "getNotification",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the notification to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved notification information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/notifications/{id}/status" : {
      "patch" : {
        "tags" : [ "notifications" ],
        "summary" : "Update status of an existing notification",
        "description" : "Update status of an existing notification",
        "operationId" : "updateNotificationStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of notification to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Notification status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "isRead" ],
                "properties" : {
                  "isRead" : {
                    "description" : "The status of the notification.",
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated notification",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/permits" : {
      "get" : {
        "tags" : [ "permits" ],
        "summary" : "Query or search permits",
        "description" : "Retrieves a collection of permits",
        "operationId" : "findPermits",
        "parameters" : [ {
          "name" : "assignee",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter permit records by assignee.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Permit Type. The parameter to filter permit records by their type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subTypes",
          "in" : "query",
          "description" : "Ref: Permit Type. The parameter to filter permit records by their type.",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            },
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter permit records by status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "APPROVED", "DISAPPROVED", "PENDING", "PROCESSING" ],
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter permit records by building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter permit records by sub-building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "space",
          "in" : "query",
          "description" : "Ref: Space. The parameter to filter permit records by space.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "fee",
          "in" : "query",
          "description" : "The parameter to filter permit records by the fee amount.",
          "schema" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The parameter to filter permit records by the currency used.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "The parameter to filter permit records by the date/time when they have been requested to start effectivity.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "The parameter to filter permit records by the date/time when they have been requested to end effectivity.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter permit records by the date/time when they have been requested or filed.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter permit records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter permit records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the reference number and notes of the permit.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried permits",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermitQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "permits" ],
        "summary" : "Create a new permit",
        "description" : "Create a new permit",
        "operationId" : "createPermit",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New permit to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Permit"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created permit",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Permit"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/permits/{id}" : {
      "get" : {
        "tags" : [ "permits" ],
        "summary" : "Retrieve permit record by id",
        "description" : "Retrieves a single permit by its id",
        "operationId" : "getPermit",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of permit to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved permit information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Permit"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "permits" ],
        "summary" : "Update values for an existing permit",
        "description" : "Update an existing permit",
        "operationId" : "updatePermit",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of permit to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Permit to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Permit"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated permit",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Permit"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/permit-fees" : {
      "get" : {
        "tags" : [ "permit-fees" ],
        "summary" : "Query or search permit fees",
        "description" : "Retrieves a collection of permit fees",
        "operationId" : "findPermitFees",
        "parameters" : [ {
          "name" : "building",
          "in" : "query",
          "description" : "The parameter to filter permit fee records by the building for which they are applied to.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "permitType",
          "in" : "query",
          "description" : "The parameter to filter permit fee records by the permit type for which they are applied to.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "fee",
          "in" : "query",
          "description" : "The parameter to filter permit fee records by the fee amount.",
          "schema" : {
            "type" : "number",
            "format" : "float",
            "nullable" : true
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The parameter to filter permit fee records by the fee currency.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter permit type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter permit types records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the permit type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "building",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried permit fees",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermitFeeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "permit-fees" ],
        "summary" : "Create a new permit fee",
        "description" : "Create a new permit fee",
        "operationId" : "createPermitFee",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New permit fee to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/PermitFee"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created permit fee",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermitFee"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/permit-fees/{id}" : {
      "get" : {
        "tags" : [ "permit-fees" ],
        "summary" : "Retrieve permit fee record by id",
        "description" : "Retrieves a single permit fee by its id",
        "operationId" : "getPermitFee",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of permit fee to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved permit fee information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermitFee"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "permit-fees" ],
        "summary" : "Update values for an existing permit fee",
        "description" : "Update an existing permit fee",
        "operationId" : "updatePermitFee",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of permit fee to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Permit fee to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/PermitFee"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated permit fee",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermitFee"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "permit-fees" ],
        "summary" : "Delete an existing permit fee",
        "description" : "Delete an existing permit fee",
        "operationId" : "removePermitFee",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of permit fee to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/permit-types" : {
      "get" : {
        "tags" : [ "permit-types" ],
        "summary" : "Query or search permit types",
        "description" : "Retrieves a collection of permit types",
        "operationId" : "findPermitTypes",
        "parameters" : [ {
          "name" : "parent",
          "in" : "query",
          "description" : "The parameter to filter permit type records by their parent.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "isPinned",
          "in" : "query",
          "description" : "The parameter to filter permit types by pin status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter permit type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter permit types records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the permit type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried permit types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermitTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "permit-types" ],
        "summary" : "Create a new permit type",
        "description" : "Create a new permit type",
        "operationId" : "createPermitType",
        "requestBody" : {
          "description" : "New permit type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/PermitType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created permit type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermitType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/permit-types/{id}" : {
      "get" : {
        "tags" : [ "permit-types" ],
        "summary" : "Retrieve permit type record by id",
        "description" : "Retrieves a single permit type by its id",
        "operationId" : "getPermitType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of permit type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved permit type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermitType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "permit-types" ],
        "summary" : "Update values for an existing permit type",
        "description" : "Update an existing permit type",
        "operationId" : "updatePermitType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of permit type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Permit type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/PermitType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated permit type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PermitType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "permit-types" ],
        "summary" : "Delete an existing permit type",
        "description" : "Delete an existing permit type",
        "operationId" : "removePermitType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of permit type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/projects" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Query or search projects",
        "description" : "Retrieves a collection of projects",
        "operationId" : "findProjects",
        "parameters" : [ {
          "name" : "assignee",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter project records by their assignee.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the project description or keywords.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried projects",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create a new project",
        "description" : "Create a new project",
        "operationId" : "createProject",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New project to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Project"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created project",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/projects/{id}" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve project record by id",
        "description" : "Retrieves a single project by its id",
        "operationId" : "getProject",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the record to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved project information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update values for an existing project",
        "description" : "Update an existing project",
        "operationId" : "updateProject",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of record to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "project to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Project"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated project",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Project"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/project-tasks" : {
      "get" : {
        "tags" : [ "project-tasks" ],
        "summary" : "Query or search project tasks",
        "description" : "Retrieves a collection of project tasks",
        "operationId" : "findProjectTasks",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the project task name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried project tasks",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectTaskQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "project-tasks" ],
        "summary" : "Create a new project task",
        "description" : "Create a new project task",
        "operationId" : "createProjectTask",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New project task to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProjectTask"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created project task",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectTask"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/project-tasks/{id}" : {
      "get" : {
        "tags" : [ "project-tasks" ],
        "summary" : "Retrieve project task record by id",
        "description" : "Retrieves a single project task by its id",
        "operationId" : "getProjectTask",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the record to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved project task information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectTask"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "project-tasks" ],
        "summary" : "Update values for an existing project task",
        "description" : "Update an existing project task",
        "operationId" : "updateProjectTask",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of record to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "project task to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProjectTask"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated project task",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectTask"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "project-tasks" ],
        "summary" : "Delete an existing project task",
        "description" : "Delete an existing project task",
        "operationId" : "removeProjectTask",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of record to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/proposals" : {
      "get" : {
        "tags" : [ "proposals" ],
        "summary" : "Query or search proposals",
        "description" : "Retrieves a collection of proposals",
        "operationId" : "findProposals",
        "parameters" : [ {
          "name" : "createdFrom",
          "in" : "query",
          "description" : "Ref: RFP. The parameter to filter proposal by the associated RFP they're created from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter proposals by their status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "SUBMITTED", "WITHDRAWN", "WON", "REJECTED" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "acceptanceLevel",
          "in" : "query",
          "description" : "The parameter to filter proposals by the quoted acceptance level.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "frequency",
          "in" : "query",
          "description" : "The parameter to filter proposals by the quoted billing frequency.",
          "schema" : {
            "type" : "string",
            "enum" : [ "WEEKLY", "MONTHLY", "QUARTERLY", "BI_ANNUALLY", "ANNUALLY" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "terms",
          "in" : "query",
          "description" : "The parameter to filter proposals by the quoted billing terms.",
          "schema" : {
            "type" : "string",
            "enum" : [ "ADVANCE_100", "ADVANCE_50", "ADVANCE_20", "30_DAYS", "60_DAYS", "90_DAYS", "180_DAYS" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "paymentMethod",
          "in" : "query",
          "description" : "The parameter to filter proposals by the quoted payment method.",
          "schema" : {
            "type" : "string",
            "enum" : [ "CASH", "CHEQUE", "CREDIT" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "mobilisationStartDate",
          "in" : "query",
          "description" : "The parameter to filter proposals by their mobilisation start date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "mobilisationEndDate",
          "in" : "query",
          "description" : "The parameter to filter proposals by their mobilisation end date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "The parameter to filter proposals by their start date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "The parameter to filter proposals by their end date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The parameter to filter ticket records by the currency used.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "totalAmount",
          "in" : "query",
          "description" : "The parameter to filter proposals by the quoted amount.",
          "schema" : {
            "type" : "number",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "totalHeadCount",
          "in" : "query",
          "description" : "The parameter to filter proposals by the quoted head count.",
          "schema" : {
            "type" : "number",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter proposals by their date of filing.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter proposal records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter proposal records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using keyword search.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried proposals",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProposalQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "proposals" ],
        "summary" : "Create a new proposal",
        "description" : "Create a new proposal",
        "operationId" : "createProposal",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New proposal to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Proposal"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created proposal",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Proposal"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/proposals/{id}" : {
      "get" : {
        "tags" : [ "proposals" ],
        "summary" : "Retrieve proposal record by id",
        "description" : "Retrieves a single proposal by its id",
        "operationId" : "getProposal",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of proposal to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved proposal information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Proposal"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "proposals" ],
        "summary" : "Update values for an existing proposal",
        "description" : "Update an existing proposal",
        "operationId" : "updateProposal",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of proposal to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Proposal to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Proposal"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated Proposal.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Proposal"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/proposals/{id}/status" : {
      "patch" : {
        "tags" : [ "proposals" ],
        "summary" : "Update status of an existing proposal",
        "description" : "Update status of an existing proposal",
        "operationId" : "updateProposalStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of proposal to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Proposal status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "status" ],
                "properties" : {
                  "status" : {
                    "description" : "The status of the RFP.",
                    "type" : "string",
                    "enum" : [ "SUBMITTED", "WITHDRAWN", "WON", "REJECTED" ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated proposal",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Proposal"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/proposal-services" : {
      "get" : {
        "tags" : [ "proposal-services" ],
        "summary" : "Query or search Proposal Services",
        "description" : "Retrieves a collection of Proposal Service",
        "operationId" : "findProposalServices",
        "parameters" : [ {
          "name" : "rfpService",
          "in" : "query",
          "description" : "Ref: RFP Service. The parameter to filter proposal service by the associated RFP Service.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using keyword search.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "_id",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried Proposal Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProposalServiceQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "proposal-services" ],
        "summary" : "Create a new Proposal Service",
        "description" : "Create a new Proposal Service",
        "operationId" : "createProposalService",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New Proposal Service to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProposalService"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created Proposal Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProposalService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/proposal-services/{id}" : {
      "get" : {
        "tags" : [ "proposal-services" ],
        "summary" : "Retrieve Proposal Service record by id",
        "description" : "Retrieves a single Proposal Service by its id",
        "operationId" : "getProposalService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Proposal Service to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved Proposal Service information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProposalService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "proposal-services" ],
        "summary" : "Update values for an existing Proposal Service",
        "description" : "Update an existing Proposal Service",
        "operationId" : "updateProposalService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Proposal Service to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Proposal Service to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProposalService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated Proposal Service.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProposalService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/proposal-sub-services" : {
      "get" : {
        "tags" : [ "proposal-sub-services" ],
        "summary" : "Query or search Proposal Sub Services",
        "description" : "Retrieves a collection of Proposal Sub Service",
        "operationId" : "findProposalSubServices",
        "parameters" : [ {
          "name" : "rfpSubService",
          "in" : "query",
          "description" : "Ref: RFP Sub Service. The parameter to filter Proposal Sub Services by associated RFP Sub Service.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "The parameter to filter Proposal Sub Services by the quoted amount.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The parameter to filter Proposal Sub Services by the quoted amount currency.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "headCount",
          "in" : "query",
          "description" : "The parameter to filter Proposal Sub Services by the quoted head count.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using keyword search.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "_id",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried Proposal Sub Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProposalSubServiceQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "proposal-sub-services" ],
        "summary" : "Create a new Proposal Sub Service",
        "description" : "Create a new Proposal Sub Service",
        "operationId" : "createProposalSubService",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New Proposal Sub Service to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProposalSubService"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created Proposal Sub Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProposalSubService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/proposal-sub-services/{id}" : {
      "get" : {
        "tags" : [ "proposal-sub-services" ],
        "summary" : "Retrieve Proposal Sub Service record by id",
        "description" : "Retrieves a single Proposal Sub Service by its id",
        "operationId" : "getProposalSubService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Proposal Sub Service to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved Proposal Sub Service information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProposalSubService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "proposal-sub-services" ],
        "summary" : "Update values for an existing Proposal Sub Service",
        "description" : "Update an existing Proposal Sub Service",
        "operationId" : "updateProposalSubService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of Proposal Sub Service to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Proposal Sub Service to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProposalSubService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated Proposal Sub Service.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProposalSubService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/resources" : {
      "get" : {
        "tags" : [ "resources" ],
        "summary" : "Query or search resources",
        "description" : "Retrieves a collection of resources",
        "operationId" : "findResources",
        "parameters" : [ {
          "name" : "operations",
          "in" : "query",
          "description" : "The parameter to filter resource record by their available operations.",
          "schema" : {
            "type" : "string",
            "enum" : [ "READ", "CREATE", "UPDATE", "DELETE", "STATUSUPDATE" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter resource records by name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a space delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a space delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried resources",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "resources" ],
        "summary" : "Create a new resource",
        "description" : "Create a new resource",
        "operationId" : "createResource",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a space delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New resource to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Resource"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created resource",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/resources/{id}" : {
      "get" : {
        "tags" : [ "resources" ],
        "summary" : "Retrieve resource record by id",
        "description" : "Retrieves a single resource by its id",
        "operationId" : "getResource",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of resource to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a space delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved resource information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "resources" ],
        "summary" : "Update values for an existing resource",
        "description" : "Update an existing resource",
        "operationId" : "updateResource",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of resource to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a space delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Resource to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Resource"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated resource",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Resource"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "resources" ],
        "summary" : "Delete an existing resource",
        "description" : "Delete an existing resource",
        "operationId" : "removeResource",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of resource to delete",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/rfps" : {
      "get" : {
        "tags" : [ "rfps" ],
        "summary" : "Query or search RFPs",
        "description" : "Retrieves a collection of RFPs",
        "operationId" : "findRFPs",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter RFPs by their status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "DRAFT", "OPEN", "CLOSED", "AWARDED" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter RFPs by the associated building they're filed for.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter RFPs by the associated sub-building they're filed for.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "acceptanceLevel",
          "in" : "query",
          "description" : "The parameter to filter RFPs by the required acceptance level.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "frequency",
          "in" : "query",
          "description" : "The parameter to filter RFPs by the billing frequency.",
          "schema" : {
            "type" : "string",
            "enum" : [ "WEEKLY", "MONTHLY", "QUARTERLY", "BI_ANNUALLY", "ANNUALLY" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "terms",
          "in" : "query",
          "description" : "The parameter to filter RFPs by the billing terms.",
          "schema" : {
            "type" : "string",
            "enum" : [ "ADVANCE_100", "ADVANCE_50", "ADVANCE_20", "30_DAYS", "60_DAYS", "90_DAYS", "180_DAYS" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "paymentMethod",
          "in" : "query",
          "description" : "The parameter to filter RFPs by the payment method.",
          "schema" : {
            "type" : "string",
            "enum" : [ "CASH", "CHEQUE", "CREDIT" ],
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "The parameter to filter RFPs by the currency used.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "targetStartDate",
          "in" : "query",
          "description" : "The parameter to filter RFPs by their target start date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "targetEndDate",
          "in" : "query",
          "description" : "The parameter to filter RFPs by their target end date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "surveyDate",
          "in" : "query",
          "description" : "The parameter to filter RFPs by their survey date.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "closeDate",
          "in" : "query",
          "description" : "The parameter to filter RFPs by their close date or submission deadline.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter RFPs by their date of filing.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter RFP records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter RFP records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using keyword search.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried RFPs",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFPQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "rfps" ],
        "summary" : "Create a new RFP",
        "description" : "Create a new RFP",
        "operationId" : "createRFP",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New RFP to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFP"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created RFP",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFP"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/rfps/{id}" : {
      "get" : {
        "tags" : [ "rfps" ],
        "summary" : "Retrieve RFP record by id",
        "description" : "Retrieves a single RFP by its id",
        "operationId" : "getRFP",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of RFP to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved RFP information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFP"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "rfps" ],
        "summary" : "Update values for an existing RFP",
        "description" : "Update an existing RFP",
        "operationId" : "updateRFP",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of RFP to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "RFP to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFP"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated RFP.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFP"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/rfps/{id}/status" : {
      "patch" : {
        "tags" : [ "rfps" ],
        "summary" : "Update status of an existing RFP",
        "description" : "Update status of an existing RFP",
        "operationId" : "updateRFPStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of RFP to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "RFP status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "status" ],
                "properties" : {
                  "status" : {
                    "description" : "The status of the RFP.",
                    "type" : "string",
                    "enum" : [ "OPEN", "CLOSED", "AWARDED" ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated RFP",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFP"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/rfp-services" : {
      "get" : {
        "tags" : [ "rfp-services" ],
        "summary" : "Query or search RFP Services",
        "description" : "Retrieves a collection of RFP Service",
        "operationId" : "findRFPServices",
        "parameters" : [ {
          "name" : "service",
          "in" : "query",
          "description" : "Ref: Service Type. The parameter to filter RFP Services by type of service being requested.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using keyword search.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "_id",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried RFP Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFPServiceQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "rfp-services" ],
        "summary" : "Create a new RFP Service",
        "description" : "Create a new RFP Service",
        "operationId" : "createRFPService",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New RFP Service to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFPService"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created RFP Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFPService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/rfp-services/{id}" : {
      "get" : {
        "tags" : [ "rfp-services" ],
        "summary" : "Retrieve RFP Service record by id",
        "description" : "Retrieves a single RFP Service by its id",
        "operationId" : "getRFPService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of RFP Service to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved RFP Service information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFPService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "rfp-services" ],
        "summary" : "Update values for an existing RFP Service",
        "description" : "Update an existing RFP Service",
        "operationId" : "updateRFPService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of RFP Service to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "RFP Service to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFPService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated RFP Service.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFPService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "rfp-services" ],
        "summary" : "Delete an existing RFP Service",
        "description" : "Delete an existing RFP Service",
        "operationId" : "removeRFPService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of RFP Service to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/rfp-sub-services" : {
      "get" : {
        "tags" : [ "rfp-sub-services" ],
        "summary" : "Query or search RFP Sub Services",
        "description" : "Retrieves a collection of RFP Sub Service",
        "operationId" : "findRFPSubServices",
        "parameters" : [ {
          "name" : "service",
          "in" : "query",
          "description" : "Ref: Service Type. The parameter to filter RFP Sub Services by type of service being requested.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "isScheduled",
          "in" : "query",
          "description" : "The parameter to filter RFP Sub Services by the scheduled flag.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "isOnDemand",
          "in" : "query",
          "description" : "The parameter to filter RFP Sub Services by the on-demand flag.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "includeConsumables",
          "in" : "query",
          "description" : "The parameter to filter RFP Sub Services by the consumable inclusion flag.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "includeParts",
          "in" : "query",
          "description" : "The parameter to filter RFP Sub Services by the consumable inclusion flag.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "partsValue",
          "in" : "query",
          "description" : "The parameter to filter RFP Sub Services by parts value.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "costPlus",
          "in" : "query",
          "description" : "The parameter to filter RFP Sub Services by cost plus.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using keyword search.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "_id",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried RFP Sub Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFPSubServiceQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "rfp-sub-services" ],
        "summary" : "Create a new RFP Sub Service",
        "description" : "Create a new RFP Sub Service",
        "operationId" : "createRFPSubService",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New RFP Sub Service to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFPSubService"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created RFP Sub Service",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFPSubService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/rfp-sub-services/{id}" : {
      "get" : {
        "tags" : [ "rfp-sub-services" ],
        "summary" : "Retrieve RFP Sub Service record by id",
        "description" : "Retrieves a single RFP Sub Service by its id",
        "operationId" : "getRFPSubService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of RFP Sub Service to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved RFP Sub Service information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFPSubService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "rfp-sub-services" ],
        "summary" : "Update values for an existing RFP Sub Service",
        "description" : "Update an existing RFP Sub Service",
        "operationId" : "updateRFPSubService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of RFP Sub Service to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "RFP Sub Service to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFPSubService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated RFP Sub Service.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFPSubService"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "rfp-sub-services" ],
        "summary" : "Delete an existing RFP Sub Service",
        "description" : "Delete an existing RFP Sub Service",
        "operationId" : "removeRFPSubService",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of RFP Sub Service to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/roles" : {
      "get" : {
        "tags" : [ "roles" ],
        "summary" : "Query or search roles",
        "description" : "Retrieves a collection of roles",
        "operationId" : "findRoles",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter role records by name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a space delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a space delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried roles",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoleQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "roles" ],
        "summary" : "Create a new role",
        "description" : "Create a new role",
        "operationId" : "createRole",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a space delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New role to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Role"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created role",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/roles/{id}" : {
      "get" : {
        "tags" : [ "roles" ],
        "summary" : "Retrieve role record by id",
        "description" : "Retrieves a single role by its id",
        "operationId" : "getRole",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of role to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a space delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved role information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "roles" ],
        "summary" : "Update values for an existing role",
        "description" : "Update an existing role",
        "operationId" : "updateRole",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of role to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a space delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Role to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Role"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated role",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "roles" ],
        "summary" : "Delete an existing role",
        "description" : "Delete an existing role",
        "operationId" : "removeRole",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of role to delete",
          "required" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/scopes" : {
      "get" : {
        "tags" : [ "scopes" ],
        "summary" : "Query or search scopes",
        "description" : "Retrieves a collection of scopes",
        "operationId" : "findScopes",
        "parameters" : [ {
          "name" : "serviceType",
          "in" : "query",
          "description" : "The parameter to filter the scopes by service type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "frequency",
          "in" : "query",
          "description" : "The parameter to filter the scopes by frequency.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "isInactive",
          "in" : "query",
          "description" : "The parameter to filter the scopes by their status.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the scope name/description.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried scopes",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScopeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "scopes" ],
        "summary" : "Create a new scope",
        "description" : "Create a new scope",
        "operationId" : "createScope",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New scope to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Scope"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created scope",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Scope"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/scopes/{id}" : {
      "get" : {
        "tags" : [ "scopes" ],
        "summary" : "Retrieve scope record by id",
        "description" : "Retrieves a single scope by its id",
        "operationId" : "getScope",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of scope to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved scope information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Scope"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "scopes" ],
        "summary" : "Update values for an existing scope",
        "description" : "Update an existing scope",
        "operationId" : "updateScope",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of scope to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Scope to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Scope"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated scope.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Scope"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "scopes" ],
        "summary" : "Delete an existing scope",
        "description" : "Delete an existing scope",
        "operationId" : "removeScope",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of scope to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/scopes/{id}/status" : {
      "patch" : {
        "tags" : [ "scopes" ],
        "summary" : "Update status of an existing scope",
        "description" : "Update status of an existing scope",
        "operationId" : "updateScopeStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of scope to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Scope status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "isInactive" ],
                "properties" : {
                  "isInactive" : {
                    "description" : "The status of the scope.",
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated scope",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Scope"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/service-standards" : {
      "get" : {
        "tags" : [ "service-standards" ],
        "summary" : "Query or search service standards",
        "description" : "Retrieves a collection of service standards",
        "operationId" : "findServiceStandards",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the service standard name/description.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried service standards",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceStandardQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "service-standards" ],
        "summary" : "Create a new service standard",
        "description" : "Create a new service standard",
        "operationId" : "createServiceStandard",
        "requestBody" : {
          "description" : "New service type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceStandard"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created service standard",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceStandard"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/service-standards/{id}" : {
      "get" : {
        "tags" : [ "service-standards" ],
        "summary" : "Retrieve service standard record by id",
        "description" : "Retrieves a single service standard by its id",
        "operationId" : "getServiceStandard",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of service standard to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved service standard information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceStandard"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "service-standards" ],
        "summary" : "Update values for an existing service standard",
        "description" : "Update an existing service standard",
        "operationId" : "updateServiceStandard",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of service standard to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Service standard to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceStandard"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated service standard.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceStandard"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "service-standards" ],
        "summary" : "Delete an existing service standard",
        "description" : "Delete an existing service standard",
        "operationId" : "removeServiceStandard",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of service standard to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/service-types" : {
      "get" : {
        "tags" : [ "service-types" ],
        "summary" : "Query or search service types",
        "description" : "Retrieves a collection of service types",
        "operationId" : "findServiceTypes",
        "parameters" : [ {
          "name" : "classes",
          "in" : "query",
          "description" : "The parameter to filter the service types by the class.",
          "schema" : {
            "type" : "string",
            "enum" : [ "COMMUNITY_MANAGEMENT", "FACILITIES_MANAGEMENT", "PROPERTY_MANAGEMENT", "RESIDENTIAL_SERVICES" ],
            "nullable" : true
          }
        }, {
          "name" : "parent",
          "in" : "query",
          "description" : "Ref: Service Type. The parameter to filter the service types by their parent.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "assetClasses",
          "in" : "query",
          "description" : "Ref: Asset Class. The parameter to filter the service types by the asset classes that can be serviced under them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "isPinned",
          "in" : "query",
          "description" : "The parameter to filter service types by pin status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "isContractable",
          "in" : "query",
          "description" : "The parameter to filter service types by their contracting flag.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "isResidential",
          "in" : "query",
          "description" : "The parameter to filter service types by their residential flag.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the service type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried service types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "service-types" ],
        "summary" : "Create a new service type",
        "description" : "Create a new service type",
        "operationId" : "createServiceType",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New service type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created service type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/service-types/{id}" : {
      "get" : {
        "tags" : [ "service-types" ],
        "summary" : "Retrieve service type record by id",
        "description" : "Retrieves a single service type by its id",
        "operationId" : "getServiceType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of service type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved service type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "service-types" ],
        "summary" : "Update values for an existing service type",
        "description" : "Update an existing service type",
        "operationId" : "updateServiceType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of service type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Service type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated service type.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "service-types" ],
        "summary" : "Delete an existing service type",
        "description" : "Delete an existing service type",
        "operationId" : "removeServiceType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of service type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/snags" : {
      "get" : {
        "tags" : [ "snags" ],
        "summary" : "Query or search snags",
        "description" : "Retrieves a collection of snags",
        "operationId" : "findSnags",
        "parameters" : [ {
          "name" : "assignee",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter snag records by the user who is assigned.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Snag Type. The parameter to filter snag records by their type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter snag records by their status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "CLOSED", "PENDING" ],
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter snag records by the building they're associated with.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter snag records by the sub-building they're associated with.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "space",
          "in" : "query",
          "description" : "Ref: Space. The parameter to filter snag records by the space they're associated with.",
          "schema" : {
            "type" : "string",
            "format" : "objectid"
          }
        }, {
          "name" : "asset",
          "in" : "query",
          "description" : "Ref: Asset. The parameter to filter snag records by the asset they're associated with.",
          "schema" : {
            "type" : "string",
            "format" : "objectid"
          }
        }, {
          "name" : "targetDate",
          "in" : "query",
          "description" : "The parameter to filter snag records by the target date/time.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter snag records by the date/time when they're reported.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter snag records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter snag records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the snag reference number and comments.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried snags",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SnagQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "snags" ],
        "summary" : "Create a new snag",
        "description" : "Create a new snag",
        "operationId" : "createSnag",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New snag to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Snag"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created snag",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Snag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/snags/{id}" : {
      "get" : {
        "tags" : [ "snags" ],
        "summary" : "Retrieve snag record by id",
        "description" : "Retrieves a single snag by its id",
        "operationId" : "getSnag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of snag to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved snag information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Snag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "snags" ],
        "summary" : "Update values for an existing snag",
        "description" : "Update an existing snag",
        "operationId" : "updateSnag",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of snag to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Snag to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Snag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated snag",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Snag"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/snag-types" : {
      "get" : {
        "tags" : [ "snag-types" ],
        "summary" : "Query or search snag types",
        "description" : "Retrieves a collection of snag types",
        "operationId" : "findSnagTypes",
        "parameters" : [ {
          "name" : "isPinned",
          "in" : "query",
          "description" : "The parameter to filter snag types by pin status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter snag type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter snag types records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the snag type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried snag types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SnagTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "snag-types" ],
        "summary" : "Create a new snag type",
        "description" : "Create a new snag type",
        "operationId" : "createSnagType",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New snag type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/SnagType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created snag type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SnagType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/snag-types/{id}" : {
      "get" : {
        "tags" : [ "snag-types" ],
        "summary" : "Retrieve snag type record by id",
        "description" : "Retrieves a single snag type by its id",
        "operationId" : "getSnagType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of snag type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved snag type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SnagType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "snag-types" ],
        "summary" : "Update values for an existing snag type",
        "description" : "Update an existing snag type",
        "operationId" : "updateSnagType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of snag type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Snag type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/SnagType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated snag type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SnagType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "snag-types" ],
        "summary" : "Delete an existing snag type",
        "description" : "Delete an existing snag type",
        "operationId" : "removeSnagType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of snag type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/spaces" : {
      "get" : {
        "tags" : [ "spaces" ],
        "summary" : "Query or search spaces",
        "description" : "Retrieves a collection of spaces",
        "operationId" : "findSpaces",
        "parameters" : [ {
          "name" : "label",
          "in" : "query",
          "description" : "The parameter to filter spaces by the label used for tagging.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "labelPosition",
          "in" : "query",
          "description" : "The parameter to filter spaces by the position of the label used for tagging.",
          "schema" : {
            "type" : "string",
            "enum" : [ "CEILING", "DOOR", "WALL" ],
            "nullable" : true
          }
        }, {
          "name" : "labelSize",
          "in" : "query",
          "description" : "The parameter to filter spaces by the type of label used for tagging.",
          "schema" : {
            "type" : "string",
            "enum" : [ "A4", "A6", "RECTANGLE", "SQUARE" ],
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter spaces by the building where they're located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter spaces by the sub-building where they're located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "floor.name",
          "in" : "query",
          "description" : "The parameter to filter spaces by the floor where they're located.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "spaceType",
          "in" : "query",
          "description" : "Ref: Space Type. The parameter to filter spaces by the space type where they're located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "spacialType",
          "in" : "query",
          "description" : "Ref: Spacial Type. The parameter to filter spaces by their spacial type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "access",
          "in" : "query",
          "description" : "The parameter to filter spaces by type of access.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "condition",
          "in" : "query",
          "description" : "The parameter to filter spaces by their condition.",
          "schema" : {
            "type" : "string",
            "enum" : [ "LOW", "MEDIUM", "HIGH" ],
            "nullable" : true
          }
        }, {
          "name" : "footFlow",
          "in" : "query",
          "description" : "The parameter to filter spaces by their foot flow.",
          "schema" : {
            "type" : "string",
            "enum" : [ "LOW", "MEDIUM", "HIGH" ],
            "nullable" : true
          }
        }, {
          "name" : "floorArea",
          "in" : "query",
          "description" : "The parameter to filter spaces by their floor area.",
          "schema" : {
            "type" : "number",
            "nullable" : true
          }
        }, {
          "name" : "volume",
          "in" : "query",
          "description" : "The parameter to filter spaces by their volume.",
          "schema" : {
            "type" : "number",
            "nullable" : true
          }
        }, {
          "name" : "isFlagged",
          "in" : "query",
          "description" : "The parameter to filter spaces if they're flagged or not.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "isInactive",
          "in" : "query",
          "description" : "The parameter to filter spaces if they're active or decommissioned.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "internalReviewStatus",
          "in" : "query",
          "description" : "The parameter to filter spaces by the status of the internal review.",
          "schema" : {
            "type" : "string",
            "enum" : [ "PENDING_REVIEW", "REVIEW_IN_PROGRESS", "REVIEWED" ],
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter space records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter space records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the space name and notes.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "building,floor.order,order,name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried spaces",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpaceQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "spaces" ],
        "summary" : "Create or tag a new space",
        "description" : "Create or tag a new space",
        "operationId" : "createSpace",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New space to create or tag",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Space"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created space",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Space"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/spaces/{id}" : {
      "get" : {
        "tags" : [ "spaces" ],
        "summary" : "Retrieve space record by its id or label",
        "description" : "Retrieves a single space by its id or label",
        "operationId" : "getSpace",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of space to retrieve. Can be the space' _id or label.",
          "required" : true,
          "schema" : {
            "oneOf" : [ {
              "description" : "The space' _id (Object Id).",
              "type" : "string",
              "format" : "objectid"
            }, {
              "description" : "The space' _id label.",
              "type" : "string"
            } ]
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved space information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Space"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "spaces" ],
        "summary" : "Update values for an existing space",
        "description" : "Update an existing space",
        "operationId" : "updateSpace",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of space to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Space to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Space"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated space",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Space"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/spaces/gfa" : {
      "get" : {
        "tags" : [ "spaces" ],
        "summary" : "Get gross floor area for spaces",
        "description" : "Gets the gross floor area",
        "operationId" : "getSpacesGFA",
        "parameters" : [ {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter spaces by the building where they're located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter spaces by the sub-building where they're located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "spaceType",
          "in" : "query",
          "description" : "Ref: Space Type. The parameter to filter spaces by the space type where they're located.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved gross floor area",
            "content" : {
              "default" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "grossFloorArea" : {
                      "description" : "The computed gross floor area.",
                      "type" : "number",
                      "format" : "float"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/spaces/{id}/status" : {
      "patch" : {
        "tags" : [ "spaces" ],
        "summary" : "Change status of an existing space",
        "description" : "Change status of an existing space",
        "operationId" : "changeSpaceStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of space to change status",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Space status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "isInactive" ],
                "properties" : {
                  "isInactive" : {
                    "description" : "The status of the space.",
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully changed space status",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Space"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/spaces/{id}/internal-review-status" : {
      "patch" : {
        "tags" : [ "spaces" ],
        "summary" : "Change internal review status an existing space",
        "description" : "Change internal review status an existing space",
        "operationId" : "changeSpaceInternalReviewStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of space to change status.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Space internal review status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "internalReviewStatus" ],
                "properties" : {
                  "internalReviewStatus" : {
                    "description" : "The internal review status of the space.",
                    "type" : "string",
                    "enum" : [ "PENDING_REVIEW", "REVIEW_IN_PROGRESS", "REVIEWED" ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully changed space internal review status",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Space"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/space-types" : {
      "get" : {
        "tags" : [ "space-types" ],
        "summary" : "Query or search space types",
        "description" : "Retrieves a collection of space types",
        "operationId" : "findSpaceTypes",
        "parameters" : [ {
          "name" : "commonArea",
          "in" : "query",
          "description" : "The parameter to filter space type records by the common area flag.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter space type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter space type records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the space type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried space types.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpaceTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "space-types" ],
        "summary" : "Create a new space type",
        "description" : "Create a new space type",
        "operationId" : "createSpaceType",
        "requestBody" : {
          "description" : "New building to space type",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/SpaceType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created space type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpaceType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/space-types/{id}" : {
      "get" : {
        "tags" : [ "space-types" ],
        "summary" : "Retrieve space type record by id",
        "description" : "Retrieves a single space typ by its id",
        "operationId" : "getSpaceType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of space type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved space type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpaceType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "space-types" ],
        "summary" : "Update values for an existing space type",
        "description" : "Update an existing space type",
        "operationId" : "updateSpaceType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of space type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Space type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/SpaceType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated space type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpaceType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "space-types" ],
        "summary" : "Delete an existing space type",
        "description" : "Delete an existing space type",
        "operationId" : "removeSpaceType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of space type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/spacial-types" : {
      "get" : {
        "tags" : [ "spacial-types" ],
        "summary" : "Query or search spacial types",
        "description" : "Retrieves a collection of spacial types",
        "operationId" : "findSpacialTypes",
        "parameters" : [ {
          "name" : "sections",
          "in" : "query",
          "description" : "The parameter to filter spacial types using the number of sections.",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter spacial type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter spacial type records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the spacial type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried spacial types.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpacialTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "spacial-types" ],
        "summary" : "Create a new spacial type",
        "description" : "Create a new spacial type",
        "operationId" : "createSpacialType",
        "requestBody" : {
          "description" : "New spacial type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/SpacialType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created spacial type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpacialType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/spacial-types/{id}" : {
      "get" : {
        "tags" : [ "spacial-types" ],
        "summary" : "Retrieve spacial type record by id",
        "description" : "Retrieves a single spacial type by its id",
        "operationId" : "getSpacialType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of spacial type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved spacial type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpacialType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "spacial-types" ],
        "summary" : "Update values for an existing spacial type",
        "description" : "Update an existing spacial type",
        "operationId" : "updateSpacialType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of spacial type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "requestBody" : {
          "description" : "Spacial type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/SpacialType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated spacial type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpacialType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "spacial-types" ],
        "summary" : "Delete an existing spacial type",
        "description" : "Delete an existing spacial type",
        "operationId" : "removeSpacialType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of spacial type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/standard-compliances" : {
      "get" : {
        "tags" : [ "standard-compliances" ],
        "summary" : "Query or search standard compliances",
        "description" : "Retrieves a collection of standard compliances",
        "operationId" : "findStandardCompliances",
        "parameters" : [ {
          "name" : "serviceStandard",
          "in" : "query",
          "description" : "Ref: Service Standard. The parameter to filter standard compliance by service standard.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "assetClass",
          "in" : "query",
          "description" : "Ref: Service Standard. The parameter to filter standard compliance by asset class.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "reference",
          "in" : "query",
          "description" : "The parameter to filter standard compliance by reference.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "isInactive",
          "in" : "query",
          "description" : "The parameter to filter standard compliance by status.",
          "schema" : {
            "type" : "boolean",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the standard compliance service standard, reference and/or asset classification.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-createdAt",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried standard compliances",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StandardComplianceQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "standard-compliances" ],
        "summary" : "Create a new standard compliance",
        "description" : "Create a new standard compliance",
        "operationId" : "createStandardCompliance",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New standard compliance to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/StandardCompliance"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created standard compliance",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StandardCompliance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/standard-compliances/{id}" : {
      "get" : {
        "tags" : [ "standard-compliances" ],
        "summary" : "Retrieve standard compliance record by id",
        "description" : "Retrieves a single standard compliance by its id",
        "operationId" : "getStandardCompliance",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of standard compliance to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved standard compliance information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StandardCompliance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "standard-compliances" ],
        "summary" : "Update values for an existing standard compliance",
        "description" : "Update an existing standard compliance",
        "operationId" : "updateStandardCompliance",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of standard compliance to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Standard compliance to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/StandardCompliance"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated standard compliance.",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StandardCompliance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "standard-compliances" ],
        "summary" : "Delete an existing standard compliance",
        "description" : "Delete an existing standard compliance",
        "operationId" : "removeStandardCompliance",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of standard compliance to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/standard-compliances/{id}/status" : {
      "patch" : {
        "tags" : [ "standard-compliances" ],
        "summary" : "Update status of an existing standard compliance",
        "description" : "Update status of an existing standard compliance",
        "operationId" : "updateStandardComplianceStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of standard compliance to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Standard Compliance status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "isInactive" ],
                "properties" : {
                  "isInactive" : {
                    "description" : "The status of the standard compliance.",
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated standard compliance",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StandardCompliance"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/states" : {
      "get" : {
        "tags" : [ "states" ],
        "summary" : "Query or search states",
        "description" : "Retrieves a collection of states",
        "operationId" : "findStates",
        "parameters" : [ {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter state records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter state records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the state name or code.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried states",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StateQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "states" ],
        "summary" : "Create a new state",
        "description" : "Create a new state",
        "operationId" : "createState",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New state to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/State"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created state",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/State"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/states/{id}" : {
      "get" : {
        "tags" : [ "states" ],
        "summary" : "Retrieve state record by id",
        "description" : "Retrieves a single state by its id",
        "operationId" : "getState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of state to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved state information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/State"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "states" ],
        "summary" : "Update values for an existing state",
        "description" : "Update an existing state",
        "operationId" : "updateState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of state to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "State to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/State"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated state",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/State"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "states" ],
        "summary" : "Delete an existing state",
        "description" : "Delete an existing state",
        "operationId" : "removeState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of state to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/system-logs" : {
      "get" : {
        "tags" : [ "system-logs" ],
        "summary" : "Query or search system logs",
        "description" : "Retrieves a collection of system logs",
        "operationId" : "findSystemLogs",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "The parameter to filter system log records by the user who performed the operation.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "recordId",
          "in" : "query",
          "description" : "The parameter to filter system log records by the record id for which the operation was performed.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "recordType",
          "in" : "query",
          "description" : "The parameter to filter system log records by the record type for which the operation was performed.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter system log records by the date when the operation was performed.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "operation",
          "in" : "query",
          "description" : "The parameter to filter system log records by the type of operation performed.",
          "schema" : {
            "type" : "string",
            "enum" : [ "CHANGE", "SET" ],
            "nullable" : true
          }
        }, {
          "name" : "field",
          "in" : "query",
          "description" : "The parameter to filter system log records by the field for which the operation was performed.",
          "schema" : {
            "type" : "string",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried system logs",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SystemLogQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/system-logs/{id}" : {
      "get" : {
        "tags" : [ "system-logs" ],
        "summary" : "Retrieve system log record by id",
        "description" : "Retrieves a single system log by its id",
        "operationId" : "getSystemLog",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of system log to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved system log information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SystemLog"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/task-types" : {
      "get" : {
        "tags" : [ "task-types" ],
        "summary" : "Query or search task types",
        "description" : "Retrieves a collection of task types",
        "operationId" : "findTaskTypes",
        "parameters" : [ {
          "name" : "parent",
          "in" : "query",
          "description" : "Ref: Ticket Type. The parameter to filter ticket types by their parent.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the task type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried task types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "task-types" ],
        "summary" : "Create a new task type",
        "description" : "Create a new task type",
        "operationId" : "createTaskType",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New task type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaskType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created task type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/task-types/{id}" : {
      "get" : {
        "tags" : [ "task-types" ],
        "summary" : "Retrieve task type record by id",
        "description" : "Retrieves a single task type by its id",
        "operationId" : "getTaskType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the record to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved task type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "task-types" ],
        "summary" : "Update values for an existing task type",
        "description" : "Update an existing task type",
        "operationId" : "updateTaskType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of record to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Task type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaskType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated task type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "task-types" ],
        "summary" : "Delete an existing task type",
        "description" : "Delete an existing task type",
        "operationId" : "removeTaskType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of record to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/ticket-types" : {
      "get" : {
        "tags" : [ "ticket-types" ],
        "summary" : "Query or search ticket types",
        "description" : "Retrieves a collection of ticket types",
        "operationId" : "findTicketTypes",
        "parameters" : [ {
          "name" : "parent",
          "in" : "query",
          "description" : "Ref: Ticket Type. The parameter to filter ticket types by their parent.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "isPinned",
          "in" : "query",
          "description" : "The parameter to filter ticket types by the pin status.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter ticket type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter ticket types records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the ticket type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried ticket types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "ticket-types" ],
        "summary" : "Create a new ticket type",
        "description" : "Create a new ticket type",
        "operationId" : "createTicketType",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New ticket type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/TicketType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created ticket type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/ticket-types/{id}" : {
      "get" : {
        "tags" : [ "ticket-types" ],
        "summary" : "Retrieve ticket type record by id",
        "description" : "Retrieves a single ticket type by its id",
        "operationId" : "getTicketType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of ticket type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved ticket type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "ticket-types" ],
        "summary" : "Update values for an existing ticket type",
        "description" : "Update an existing ticket type",
        "operationId" : "updateTicketType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of ticket type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Ticket type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/TicketType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated ticket type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "ticket-types" ],
        "summary" : "Delete an existing ticket type",
        "description" : "Delete an existing ticket type",
        "operationId" : "removeTicketType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of ticket type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/tickets" : {
      "get" : {
        "tags" : [ "tickets" ],
        "summary" : "Query or search tickets",
        "description" : "Retrieves a collection of tickets",
        "operationId" : "findTickets",
        "parameters" : [ {
          "name" : "assignee",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter ticket records by their assignee.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Ticket Type. The parameter to filter ticket records by their type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subType",
          "in" : "query",
          "description" : "Ref: Ticket Type. The parameter to filter ticket records by their sub-type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter ticket records by building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter ticket records by sub-building.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "space",
          "in" : "query",
          "description" : "Ref: Space. The parameter to filter ticket records by the space reported.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "asset",
          "in" : "query",
          "description" : "Ref: Asset. The parameter to filter ticket records by the asset reported.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "inspection",
          "in" : "query",
          "description" : "Ref: Inspection. The parameter to filter ticket records from the inspection where they were reported from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "priority",
          "in" : "query",
          "description" : "The parameter to filter ticket records by priority.",
          "schema" : {
            "type" : "string",
            "enum" : [ "NORMAL", "MAJOR", "EMERGENCY" ],
            "nullable" : true
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The parameter to filter ticket records by status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "CLOSED", "OVERDUE", "PENDING" ],
            "nullable" : true
          }
        }, {
          "name" : "completionDate",
          "in" : "query",
          "description" : "The parameter to filter ticket records by the date/time when they have been resolved.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "reportedDate",
          "in" : "query",
          "description" : "The parameter to filter ticket records by the date/time when they have been reported.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter ticket records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter ticket records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the reference number, summary, description and tags of the ticket.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-reportedDate",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried tickets",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "tickets" ],
        "summary" : "Create a new ticket",
        "description" : "Create a new ticket",
        "operationId" : "createTicket",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New ticket to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Ticket"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created ticket",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/tickets/{id}" : {
      "get" : {
        "tags" : [ "tickets" ],
        "summary" : "Retrieve ticket record by id",
        "description" : "Retrieves a single ticket by its id",
        "operationId" : "getTicket",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of ticket to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved ticket information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "tickets" ],
        "summary" : "Update values for an existing ticket",
        "description" : "Update an existing ticket",
        "operationId" : "updateTicket",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of ticket to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Ticket to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Ticket"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated ticket",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Query or search users",
        "description" : "Retrieves a collection of users",
        "operationId" : "findUsers",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the reference number, summary, description and tags of the ticket.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-reportedDate",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried users",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Create and give access to a new user",
        "description" : "Create and give access to a new user",
        "operationId" : "createUser",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Create User and give access",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully signed up a new user",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/{id}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve user record by id",
        "description" : "Retrieves a single user by its id",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of user to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved user information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Update values for an existing user",
        "description" : "Update an existing user",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of user to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "User to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated user",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/users/profile" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve profile of currently logged in user",
        "description" : "Retrieve profile of currently logged in user",
        "operationId" : "getProfile",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved user profile",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Update values for an own profile",
        "description" : "Update profile",
        "operationId" : "updateProfile",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Profile details",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated profile",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/users/{id}/status" : {
      "patch" : {
        "tags" : [ "users" ],
        "summary" : "Update status of an existing user",
        "description" : "Update status of an existing user",
        "operationId" : "updateUserStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of user to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "User status",
          "content" : {
            "default" : {
              "schema" : {
                "type" : "object",
                "required" : [ "isInactive" ],
                "properties" : {
                  "isInactive" : {
                    "description" : "The status of the user.",
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated user",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/utilities" : {
      "get" : {
        "tags" : [ "utilities" ],
        "summary" : "Query or search utility readings",
        "description" : "Retrieves a collection of utility readings",
        "operationId" : "findUtilities",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Ref: Utility Type. The parameter to filter utility records by their type.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "building",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter utility records by the building from where the reading was made.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "subBuilding",
          "in" : "query",
          "description" : "Ref: Building. The parameter to filter utility records by the sub-building from where the reading was made.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "space",
          "in" : "query",
          "description" : "Ref: Space. The parameter to filter utility records by the space from where the reading was made.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "asset",
          "in" : "query",
          "description" : "Ref: Asset. The parameter to filter utility records by the asset from which the reading was made.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "The parameter to filter utility records by the date/time when the utility reading was made.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "submittedBy",
          "in" : "query",
          "description" : "Ref: User. The parameter to filter utility records by the user who submitted them.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Ref: Entity. The parameter to filter utility records by the entity where it came from.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the utility reading's reference number and notes.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "-date",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried utility readings",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UtilityQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "utilities" ],
        "summary" : "Create a new utility reading",
        "description" : "Create a new utility reading",
        "operationId" : "createUtility",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New utility reading to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Utility"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created utility reading",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Utility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/utilities/{id}" : {
      "get" : {
        "tags" : [ "utilities" ],
        "summary" : "Retrieve utility reading record by id",
        "description" : "Retrieves a single utility reading by its id",
        "operationId" : "getUtility",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of utility reading to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved utility reading information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Utility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "utilities" ],
        "summary" : "Update values for an existing utility reading",
        "description" : "Update an existing utility reading",
        "operationId" : "updateUtility",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of utility reading to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Utility reading to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/Utility"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated utility reading",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Utility"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/utility-types" : {
      "get" : {
        "tags" : [ "utility-types" ],
        "summary" : "Query or search utility types",
        "description" : "Retrieves a collection of utility types",
        "operationId" : "findUtilityTypes",
        "parameters" : [ {
          "name" : "assetClass",
          "in" : "query",
          "description" : "Ref: Asset Class. The parameter to filter utility types by the asset class associated with it.",
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "nullable" : true
          }
        }, {
          "name" : "isPinned",
          "in" : "query",
          "description" : "The parameter to filter utility types by pin status.",
          "schema" : {
            "type" : "boolean",
            "nullable" : true
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "The parameter to filter ticket type records by the date/time when they were created.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "The parameter to filter ticket types records by the date/time when they were last updated.",
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "The parameter to filter the query results using the utility type name.",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The parameter to control the sorting for the query results. Can be a comma delimited set of document model properties. Default sort order is ascending. Use the minus (-) sign before the field to change sort order",
          "schema" : {
            "type" : "string",
            "default" : "name",
            "nullable" : true
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The pagination parameter to control the page number",
          "schema" : {
            "type" : "integer",
            "default" : 1,
            "nullable" : true
          }
        }, {
          "name" : "docsPerPage",
          "in" : "query",
          "description" : "The pagination parameter to control the number of returned documents per page",
          "schema" : {
            "type" : "integer",
            "default" : 25,
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully queried utility types",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UtilityTypeQueryResponse"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "utility-types" ],
        "summary" : "Create a new utility type",
        "description" : "Create a new utility type",
        "operationId" : "createUtilityType",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "New utility type to create",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/UtilityType"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created utility type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UtilityType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/utility-types/{id}" : {
      "get" : {
        "tags" : [ "utility-types" ],
        "summary" : "Retrieve utility type record by id",
        "description" : "Retrieves a single utility type by its id",
        "operationId" : "getUtilityType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of utility type to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved utility type information",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UtilityType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "utility-types" ],
        "summary" : "Update values for an existing utility type",
        "description" : "Update an existing utility type",
        "operationId" : "updateUtilityType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of utility type to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "The parameter to control inline expansion of related or associated objects. Can be a comma delimited set of document model properties",
          "schema" : {
            "type" : "string",
            "default" : "",
            "nullable" : true
          }
        } ],
        "requestBody" : {
          "description" : "Utility type to update",
          "content" : {
            "default" : {
              "schema" : {
                "$ref" : "#/components/schemas/UtilityType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated utility type",
            "content" : {
              "default" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UtilityType"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "409" : {
            "$ref" : "#/components/responses/ConflictError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "utility-types" ],
        "summary" : "Delete an existing utility type",
        "description" : "Delete an existing utility type",
        "operationId" : "removeUtilityType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of utility type to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "objectid",
            "default" : ""
          }
        } ],
        "responses" : {
          "204" : {
            "$ref" : "#/components/responses/Deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequestError"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidCredentialsError"
          },
          "403" : {
            "$ref" : "#/components/responses/NotAuthorizedError"
          },
          "404" : {
            "$ref" : "#/components/responses/ResourceNotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalError"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Access" : {
        "description" : "Access model",
        "type" : "object",
        "required" : [ "user", "role", "building" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the access record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "user" : {
            "description" : "Ref: User. The user given access to.",
            "type" : "string",
            "format" : "objectid"
          },
          "entity" : {
            "description" : "Ref: Entity. The entity associated with the given access.",
            "type" : "string",
            "format" : "objectid"
          },
          "role" : {
            "description" : "Ref: Role. The role given to the user.",
            "type" : "string",
            "format" : "objectid"
          },
          "building" : {
            "description" : "Ref: Building. The building where the access is given.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where the access is given.",
            "type" : "string",
            "format" : "objectid"
          },
          "space" : {
            "description" : "Ref: Space. Restrict the space where the user has access to.",
            "type" : "string",
            "format" : "objectid"
          },
          "contract" : {
            "description" : "Ref: Contract. The contract from which the access was created from.",
            "type" : "string",
            "format" : "objectid"
          },
          "validUntil" : {
            "description" : "The date until the access is valid.",
            "type" : "string",
            "format" : "date-time"
          },
          "isDefault" : {
            "description" : "Denotes if the access is the default for the user or not.",
            "type" : "boolean",
            "default" : false
          },
          "isInactive" : {
            "description" : "Denotes if the access is revoked or not.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Activities" : {
        "description" : "Activity model",
        "type" : "object",
        "required" : [ "recordId", "resource", "activity", "user", "building", "action" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the activity record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "recordId" : {
            "description" : "Thre unique identifier of the resource record/document related to the activity.",
            "type" : "string",
            "format" : "objectid"
          },
          "resource" : {
            "description" : "The resource related to the record/document of the activity.",
            "type" : "string"
          },
          "user" : {
            "description" : "Ref: User. The user who triggers the activity.",
            "type" : "string",
            "format" : "objectid"
          },
          "building" : {
            "description" : "Ref: Building. The building where the activity happened.",
            "type" : "string",
            "format" : "objectid"
          },
          "action" : {
            "description" : "The action type of the activity.",
            "type" : "string",
            "enum" : [ "POST_COMMENT", "POST_PHOTO", "ATTACH_FILE", "CHECK_IN", "CHECK_OUT", "CHANGE_STATUS", "CHANGE_ASSIGNEE", "CHANGE_CONTRACTOR", "UPDATE_INFO", "CREATED", "APPROVE_OR_REJECT" ]
          },
          "fileName" : {
            "description" : "The name of the file attached (optional).",
            "type" : "string"
          },
          "fileUrl" : {
            "description" : "The url of the file attached (optional).",
            "type" : "string"
          },
          "meta" : {
            "description" : "Any additional data or properties that describe the activity.",
            "type" : "object"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Asset" : {
        "description" : "Asset model",
        "type" : "object",
        "required" : [ "class", "subClass", "building", "floor", "space" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the asset record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "label" : {
            "description" : "The unique label for the asset record.",
            "type" : "string"
          },
          "labelPosition" : {
            "description" : "The position of the label on the asset.",
            "type" : "string",
            "enum" : [ "BACK", "BASE", "FRONT", "LEFT_SIDE", "RIGHT_SIDE", "TOP" ]
          },
          "labelSize" : {
            "description" : "The size of label used on the asset.",
            "type" : "string",
            "enum" : [ "A4", "A6", "RECTANGLE", "SQUARE" ]
          },
          "notes" : {
            "description" : "A brief note/description of the asset being tagged.",
            "type" : "string"
          },
          "photos" : {
            "description" : "The photos for the asset.",
            "type" : "array",
            "items" : {
              "description" : "Ref: File. The files/photos associated with the asset.",
              "type" : "string",
              "format" : "objectid"
            }
          },
          "class" : {
            "description" : "Ref: AssetClass. The asset classification.",
            "type" : "string",
            "format" : "objectid"
          },
          "subClass" : {
            "description" : "Ref: AssetClass. The asset sub-classification. Dependent on the asset class.",
            "type" : "string",
            "format" : "objectid"
          },
          "type" : {
            "description" : "Ref: AssetClass. The asset type. Dependent on the asset sub-class.",
            "type" : "string",
            "format" : "objectid"
          },
          "subType" : {
            "description" : "Ref: AssetClass. The asset type. Dependent on the asset sub-class.",
            "type" : "string",
            "format" : "objectid"
          },
          "component" : {
            "description" : "Ref: AssetClass. The asset component. Dependent on the asset sub-type.",
            "type" : "string",
            "format" : "objectid"
          },
          "building" : {
            "description" : "Ref: Building. The building where the asset is located.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where the asset is located. Dependent on the building.",
            "type" : "string",
            "format" : "objectid"
          },
          "floor" : {
            "description" : "The floor where the asset is located in the building or sub-building. Dependent on the building or sub-building.",
            "$ref" : "#/components/schemas/Floor"
          },
          "space" : {
            "description" : "Ref: Space. The space where the asset is located.",
            "type" : "string",
            "format" : "objectid"
          },
          "installationDate" : {
            "description" : "The date when the asset was installed in the location.",
            "type" : "string",
            "format" : "date-time"
          },
          "isFlagged" : {
            "description" : "Denotes if the asset has been flagged.",
            "type" : "boolean",
            "default" : false
          },
          "metadata" : {
            "description" : "Any additional data or properties that describe the asset.",
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "isInactive" : {
            "description" : "Denotes if the asset is active or has been decommissioned.",
            "type" : "boolean",
            "default" : false
          },
          "internalReviewStatus" : {
            "description" : "The status of the internal review.",
            "type" : "string",
            "enum" : [ "PENDING_REVIEW", "REVIEW_IN_PROGRESS", "REVIEWED" ],
            "default" : "PENDING_REVIEW"
          },
          "order" : {
            "description" : "The order or sequence number for the space. Used for sorting purposes.",
            "type" : "integer",
            "format" : "int32"
          },
          "expectedLife" : {
            "description" : "The expected life span of an asset (in months).",
            "type" : "integer"
          },
          "replacementCost" : {
            "description" : "The cost of an asset.",
            "type" : "number",
            "format" : "float"
          },
          "partsWarrantyProvider" : {
            "description" : "The company provider for the specified asset part.",
            "$ref" : "#/components/schemas/Entity"
          },
          "partsWarrantyStart" : {
            "description" : "Asset part warranty start date.",
            "format" : "date-time",
            "type" : "string"
          },
          "partsWarrantyEnd" : {
            "description" : "Asset part warranty end date.",
            "format" : "date-time",
            "type" : "string"
          },
          "labourWarrantyProvider" : {
            "description" : "The labour provider for the asset.",
            "$ref" : "#/components/schemas/Entity"
          },
          "labourWarrantyStart" : {
            "description" : "Asset labour warranty start date.",
            "format" : "date-time",
            "type" : "string"
          },
          "labourWarrantyEnd" : {
            "description" : "Asset labour warranty end date.",
            "format" : "date-time",
            "type" : "string"
          },
          "warrantyDescription" : {
            "description" : "The warranty description for the asset.",
            "type" : "string"
          },
          "isMovable" : {
            "description" : "Denotes if the asset is movable or permanent.",
            "type" : "boolean"
          },
          "attachments" : {
            "description" : "The asset documents.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/File"
            }
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "AssetClass" : {
        "description" : "Asset class model",
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the asset class record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The descriptive name of the asset class.",
            "type" : "string"
          },
          "parent" : {
            "description" : "Ref: Asset Class. If the asset class is a sub class of another, this holds the parent class.",
            "type" : "string",
            "format" : "objectid"
          },
          "metadataFields" : {
            "description" : "Preset metadata fields for the asset class.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "isResidential" : {
            "description" : "Denotes if the asset class is for residential type assets only.",
            "type" : "boolean",
            "default" : false
          },
          "isStatutory" : {
            "description" : "Denotes if the asset class has a statutory requirement.",
            "type" : "boolean",
            "default" : false
          },
          "expectedLife" : {
            "description" : "The expected life span of an asset (in months).",
            "type" : "integer"
          },
          "replacementCost" : {
            "description" : "The cost of an asset.",
            "type" : "number",
            "format" : "float"
          },
          "isMovable" : {
            "description" : "Denotes if the asset is movable or permanent.",
            "type" : "boolean"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Audit" : {
        "description" : "Audit class model",
        "type" : "object",
        "required" : [ "recordType", "recordId" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the audit record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "notes" : {
            "description" : "A short note of the audit that was made.",
            "type" : "string"
          },
          "date" : {
            "description" : "The timestamp for when the record audit has been made.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "recordType" : {
            "description" : "The type of record referenced by the audit.",
            "type" : "string",
            "enum" : [ "ASSET", "ENTITY", "SPACE" ]
          },
          "recordId" : {
            "description" : "The id of the space or asset record that was audited.",
            "type" : "string",
            "format" : "objectid"
          },
          "result" : {
            "description" : "The result of the audit made to the space or asset.",
            "type" : "string",
            "enum" : [ "PASSED", "FAILED" ],
            "readOnly" : true
          },
          "isLabelPass" : {
            "description" : "Denotes if the correct label code, type and position have been placed correctly.",
            "type" : "boolean",
            "default" : false
          },
          "isInfoPass" : {
            "description" : "Denotes if the correct information have been entered.",
            "type" : "boolean",
            "default" : false
          },
          "isLocationPass" : {
            "description" : "Denotes if the correct location details have been entered.",
            "type" : "boolean",
            "default" : false
          }
        }
      },
      "Batch" : {
        "description" : "Batch model",
        "type" : "object",
        "required" : [ "items" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the batch record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "Auto-generated. The name for the batch.",
            "type" : "string",
            "readOnly" : true
          },
          "notes" : {
            "description" : "A short note for the batch being generated.",
            "type" : "string"
          },
          "date" : {
            "description" : "The timestamp for when the batch has been generated.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "totalItems" : {
            "description" : "The total number of items/labels printed on the batch",
            "type" : "integer",
            "format" : "int32",
            "readOnly" : true
          },
          "items" : {
            "description" : "Item specifications in the batch",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BatchItems"
            }
          }
        }
      },
      "BatchJob" : {
        "description" : "Batch Job model",
        "type" : "object",
        "required" : [ "type", "data" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the batch job record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "notes" : {
            "description" : "A short note for the batch job to be processed.",
            "type" : "string"
          },
          "type" : {
            "description" : "The type of batch job to be processed.",
            "type" : "string",
            "enum" : [ "ASSETS", "BUILDINGS", "SPACES" ]
          },
          "status" : {
            "description" : "The status of the batch job.",
            "type" : "string",
            "enum" : [ "PENDING", "IN_PROGRESS", "ERROR", "DONE" ],
            "default" : "PENDING",
            "readOnly" : true
          },
          "data" : {
            "description" : "The data to be uploaded represented as text. Can be CSV or JSON.",
            "type" : "string"
          },
          "jobErrors" : {
            "description" : "The errors encountered when processing the data submitted for the batch job.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/BatchJobError"
            },
            "readOnly" : true
          },
          "totalRecords" : {
            "description" : "The total number of records submitted for processing.",
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "totalSuccess" : {
            "description" : "The total number of records which was successfully processed.",
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "totalFailed" : {
            "description" : "The total number of records which failed processing.",
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "elapsedTime" : {
            "description" : "The total time consumed during job processing.",
            "type" : "string",
            "readOnly" : true
          },
          "date" : {
            "description" : "The timestamp for when the batch job was submitted.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Building" : {
        "description" : "Building model",
        "type" : "object",
        "required" : [ "name", "class", "address" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the building record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "label" : {
            "description" : "The unique label for the building record.",
            "type" : "string"
          },
          "name" : {
            "description" : "The name for the building.",
            "type" : "string"
          },
          "description" : {
            "description" : "A brief description for the building.",
            "type" : "string"
          },
          "height" : {
            "description" : "The height of the building in meters.",
            "type" : "number",
            "format" : "float"
          },
          "constructionStatus" : {
            "description" : "The status of the building construction.",
            "type" : "string",
            "enum" : [ "PRE_CONSTRUCTION", "UNDER_CONSTRUCTION", "COMPLETED" ]
          },
          "completionDate" : {
            "description" : "The date of completion of the building.",
            "type" : "string",
            "format" : "date-time"
          },
          "parent" : {
            "description" : "Ref: Building. If the building is a sub-building, this holds the value for its parent building.",
            "type" : "string",
            "format" : "objectid"
          },
          "class" : {
            "description" : "The building class.",
            "type" : "string",
            "enum" : [ "LOW_RISE", "MID_RISE", "HIGH_RISE", "SKYSCRAPER", "VILLA", "TOWNHOUSE", "DETACHED", "SEMI_DETACHED", "TERRACED" ]
          },
          "status" : {
            "description" : "The building status.",
            "type" : "string",
            "default" : "PENDING_VALIDATION",
            "enum" : [ "PENDING_VALIDATION", "ONLINE" ]
          },
          "photos" : {
            "description" : "The photos for the tagged building.",
            "type" : "array",
            "items" : {
              "description" : "Ref: File. The files/photos associated with the building tagged",
              "type" : "string",
              "format" : "objectid"
            }
          },
          "floors" : {
            "description" : "The floors within the building.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Floor"
            }
          },
          "address" : {
            "description" : "The address for the building.",
            "$ref" : "#/components/schemas/Address"
          },
          "metadata" : {
            "description" : "Any additional data or properties that describe the building.",
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "isInactive" : {
            "description" : "Denotes if the building is active or has been decommissioned.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Budget" : {
        "description" : "Budget model",
        "type" : "object",
        "required" : [ "type", "building", "currency", "startDate", "endDate", "items", "spaces" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the budget record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the budget.",
            "type" : "string",
            "readOnly" : true
          },
          "type" : {
            "description" : "Ref: Budget Type. The type of budget.",
            "type" : "string",
            "format" : "objectid"
          },
          "visibility" : {
            "description" : "Ref: User. Restrict visibility of budget to certain users only.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "assignee" : {
            "description" : "Ref: User. The one assigned for budget approval and processing.",
            "type" : "string",
            "format" : "objectid"
          },
          "status" : {
            "description" : "The status of the budget.",
            "type" : "string",
            "enum" : [ "DRAFT", "PENDING_REVIEW", "APPROVED", "REJECTED" ]
          },
          "docs" : {
            "description" : "Ref: File. The files/attachments for the budget.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "building" : {
            "description" : "Ref: Building. The building where the budget is applied.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where the budget is applied.",
            "type" : "string",
            "format" : "objectid"
          },
          "notes" : {
            "description" : "A brief note/description for the budget.",
            "type" : "string"
          },
          "totalAmount" : {
            "description" : "The total amount of the budget.",
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "margin" : {
            "description" : "The margin (in percentage) to apply on top of the budget.",
            "type" : "integer",
            "format" : "int32"
          },
          "grossAmount" : {
            "description" : "Auto computed amount based on the total amount and percentage.",
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "currency" : {
            "description" : "The billing currency on the budget.",
            "type" : "string"
          },
          "startDate" : {
            "description" : "The start date/time when the budget is effective.",
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "description" : "The end date/time when the budget is effective.",
            "type" : "string",
            "format" : "date-time"
          },
          "items" : {
            "description" : "The budget line items.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BudgetItem"
            }
          },
          "spaces" : {
            "description" : "The space allocation for computing the GFA for the budget.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BudgetSpace"
            }
          },
          "date" : {
            "description" : "The date/time when the budget was filed.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the budget.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the budget was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "BudgetType" : {
        "description" : "Budget type model",
        "type" : "object",
        "required" : [ "name", "icon", "classes" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the budget type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "A descriptive name for the budget type.",
            "type" : "string"
          },
          "classes" : {
            "description" : "The classification of the budget type.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "COMMUNITY_MANAGEMENT", "FACILITIES_MANAGEMENT", "OWNERS_ASSOCIATION", "PROPERTY_MANAGEMENT", "SERVICE_PROVIDER" ]
            }
          },
          "parent" : {
            "description" : "Ref: Budget Type. If the budget type is a sub type of another, this holds the parent budget type.",
            "type" : "string",
            "format" : "objectid"
          },
          "serviceTypes" : {
            "description" : "Ref: Service Type. The service types that are linked to the budget type.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "icon" : {
            "description" : "The url for the icon of the budget type.",
            "type" : "string",
            "format" : "uri"
          },
          "isPinned" : {
            "description" : "Denotes if the budget type should be displayed as a pinned item.",
            "type" : "boolean",
            "default" : false
          },
          "isInactive" : {
            "description" : "Denotes if the budget type is no longer active or otherwise.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "CompanySize" : {
        "description" : "Company size model",
        "type" : "object",
        "required" : [ "name", "min", "max" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the company size record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The company size name.",
            "type" : "string"
          },
          "min" : {
            "description" : "The minimum number of employees.",
            "type" : "integer",
            "format" : "int32"
          },
          "max" : {
            "description" : "The maximum number of employees.",
            "type" : "integer",
            "format" : "int32"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Contract" : {
        "description" : "Contract model",
        "type" : "object",
        "required" : [ "createdFrom", "services", "acceptanceLevel", "mobilisationStartDate", "mobilisationEndDate", "startDate", "endDate" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the contract record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the contract.",
            "type" : "string",
            "readOnly" : true
          },
          "createdFrom" : {
            "description" : "Ref: Proposal. The proposal from which the contract was created from.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "notes" : {
            "description" : "Other details, specifications and requirements for the contract.",
            "type" : "string"
          },
          "docs" : {
            "description" : "Ref: File. Other attachment or files describing the contract.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "services" : {
            "description" : "Ref: Contract Service. The services included in the contract.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "status" : {
            "description" : "The status of the contract.",
            "type" : "string",
            "enum" : [ "PENDING_REVIEW", "EXECUTED", "REJECTED" ]
          },
          "acceptanceLevel" : {
            "description" : "The acceptance level as agreed on the contract.",
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "description" : "The billing frequency as agreed on the contract.",
            "type" : "string",
            "enum" : [ "WEEKLY", "MONTHLY", "QUARTERLY", "BI_ANNUALLY", "ANNUALLY" ]
          },
          "terms" : {
            "description" : "The billing term as agreed on the contract.",
            "type" : "string",
            "enum" : [ "ADVANCE_100", "ADVANCE_50", "ADVANCE_20", "30_DAYS", "60_DAYS", "90_DAYS", "180_DAYS" ]
          },
          "paymentMethod" : {
            "description" : "The payment method as agreed on the contract.",
            "type" : "string",
            "enum" : [ "CASH", "CHEQUE", "CREDIT" ]
          },
          "mobilisationStartDate" : {
            "description" : "The start of mobilisation period as agreed on the contract.",
            "type" : "string",
            "format" : "date-time"
          },
          "mobilisationEndDate" : {
            "description" : "The end of mobilisation period as agreed on the contract.",
            "type" : "string",
            "format" : "date-time"
          },
          "startDate" : {
            "description" : "The start of effectivity of the contract.",
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "description" : "The end of effectivity of the contract.",
            "type" : "string",
            "format" : "date-time"
          },
          "currency" : {
            "description" : "The billing currency on the contract.",
            "type" : "string"
          },
          "totalAmount" : {
            "description" : "The total amount of the contract.",
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "totalHeadCount" : {
            "description" : "The total head count provided by the supplier as agreed on the contract.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "date" : {
            "description" : "The date when the contract was filed.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "awardee" : {
            "description" : "Ref: Entity. The entity to which the contract was awarded to.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the contract.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the contract was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "ContractService" : {
        "description" : "Contract Service model",
        "type" : "object",
        "required" : [ "service", "subServices" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the Contract Service record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "service" : {
            "description" : "Ref: Service Type. The service being delivered as part of the contract.",
            "type" : "string",
            "format" : "objectid"
          },
          "subServices" : {
            "description" : "Ref: Contract Sub Service. The specific sub-services being delivered as part of the contract.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          }
        }
      },
      "ContractSubService" : {
        "description" : "Contract Sub Service model",
        "type" : "object",
        "required" : [ "service", "amount", "items" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the Contract Sub Service record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "notes" : {
            "description" : "Other details, specifications and requirements for the service.",
            "type" : "string"
          },
          "service" : {
            "description" : "Ref: Service Type. The specific service to be delivered as part of the contract.",
            "type" : "string",
            "format" : "objectid"
          },
          "amount" : {
            "description" : "The amount for the sub-service.",
            "type" : "integer",
            "format" : "int32"
          },
          "headCount" : {
            "description" : "The headcount to be provided to fulfill the service, if applicable.",
            "type" : "integer",
            "format" : "int32"
          },
          "isScheduled" : {
            "description" : "Denotes if the service is a scheduled one.",
            "type" : "boolean",
            "default" : false
          },
          "isOnDemand" : {
            "description" : "Denotes if the service is on-demand.",
            "type" : "boolean",
            "default" : false
          },
          "items" : {
            "description" : "The items to be serviced and their respective service details.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContractItem"
            }
          },
          "coverageStart" : {
            "description" : "The required start time coverage (in minutes) in relation to 12AM (being 0) as agreed on the contract.",
            "type" : "integer",
            "format" : "int32"
          },
          "coverageDuration" : {
            "description" : "The required duration (in minutes) for the coverage as agreed on the contract.",
            "type" : "integer",
            "format" : "int32"
          },
          "includeConsumables" : {
            "description" : "Denotes if consumables are required to be included in the service as agreed on the contract.",
            "type" : "boolean",
            "default" : false
          },
          "includeParts" : {
            "description" : "Denotes if parts are required to be included in the service as agreed on the contract.",
            "type" : "boolean",
            "default" : false
          },
          "partsValue" : {
            "description" : "The value of parts being requested to be included in the service.",
            "type" : "integer",
            "format" : "int32"
          },
          "costPlus" : {
            "description" : "The cost plus requirement for when servicing items.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Country" : {
        "description" : "Country model",
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the country record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The country name.",
            "type" : "string"
          },
          "code" : {
            "description" : "The country code.",
            "type" : "string"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Distribution" : {
        "description" : "Distribution model",
        "type" : "object",
        "required" : [ "building", "date", "items" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the distribution record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "notes" : {
            "description" : "A short note for the distribution.",
            "type" : "string"
          },
          "building" : {
            "description" : "Ref: Building. The building to distribute the items to.",
            "type" : "string",
            "format" : "objectid"
          },
          "date" : {
            "description" : "The distribution date or timestamp.",
            "type" : "string",
            "format" : "date-time"
          },
          "totalItems" : {
            "description" : "The total number of items distributed to the building.",
            "type" : "integer",
            "readOnly" : true
          },
          "items" : {
            "description" : "Item specifications in the distribution",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DistributionItems"
            }
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Entity" : {
        "description" : "Entity model",
        "type" : "object",
        "required" : [ "name", "type", "admin" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the entity record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The company or entity name.",
            "type" : "string"
          },
          "description" : {
            "description" : "A short description of the company or entity.",
            "type" : "string"
          },
          "type" : {
            "description" : "The type of the entity.",
            "type" : "string",
            "enum" : [ "COMMERCIAL", "GROUP", "INDIVIDUAL" ]
          },
          "services" : {
            "description" : "Ref: Service Type. The type of service/s that the entity offer/s.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "verificationStatus" : {
            "description" : "The status of the verification process for the entity.",
            "type" : "string",
            "enum" : [ "NOT_VALIDATED", "PENDING_VALIDATION", "APPROVED", "DISAPPROVED" ],
            "default" : "NOT_VALIDATED"
          },
          "photo" : {
            "description" : "Ref: File. The photo for the entity profile.",
            "type" : "string",
            "format" : "objectid"
          },
          "address" : {
            "description" : "The address or addresses where the company or entity is located.",
            "$ref" : "#/components/schemas/Address"
          },
          "phone" : {
            "description" : "The contact phone number for the entity.",
            "type" : "string"
          },
          "email" : {
            "description" : "The contact email address for the entity.",
            "type" : "string",
            "format" : "email"
          },
          "website" : {
            "description" : "The website of the entity.",
            "type" : "string",
            "format" : "uri"
          },
          "metadata" : {
            "description" : "Any additional data or properties that describe the entity.",
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "isInactive" : {
            "description" : "Denotes if the entity is active or has shut down.",
            "type" : "boolean",
            "default" : false
          },
          "admin" : {
            "description" : "Ref: User. The entity admin/maintainer.",
            "type" : "string",
            "format" : "objectid"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Event" : {
        "description" : "Event model",
        "type" : "object",
        "required" : [ "type", "building", "startDate", "endDate" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the event record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the event.",
            "type" : "string",
            "readOnly" : true
          },
          "type" : {
            "description" : "Ref: Event Type. The type of event.",
            "type" : "string",
            "format" : "objectid"
          },
          "invitees" : {
            "description" : "The prospect event attendees.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invitee"
            }
          },
          "status" : {
            "description" : "The status of the event",
            "type" : "string",
            "enum" : [ "DRAFT", "ACTIVE", "CANCELLED", "DONE" ],
            "default" : "DRAFT"
          },
          "photos" : {
            "description" : "Ref: File. The photos for the event.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "docs" : {
            "description" : "Ref: File. The supporting documents for the event.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "building" : {
            "description" : "Ref: Building. The building where the event will take place.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where the event will take place.",
            "type" : "string",
            "format" : "objectid"
          },
          "space" : {
            "description" : "Ref: Space. The space where the event will take place.",
            "type" : "string",
            "format" : "objectid"
          },
          "notes" : {
            "description" : "A brief note/description for the event.",
            "type" : "string"
          },
          "startDate" : {
            "description" : "The start date/time for the event.",
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "description" : "The end date/time for the event.",
            "type" : "string",
            "format" : "date-time"
          },
          "isPublic" : {
            "description" : "Denotes if the event is open for public or not.",
            "type" : "boolean",
            "default" : true
          },
          "date" : {
            "description" : "The date/time when the event request was filed.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the event.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the event was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "EventType" : {
        "description" : "Event Type model",
        "type" : "object",
        "required" : [ "name", "icon" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the event type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The event type label or name.",
            "type" : "string"
          },
          "icon" : {
            "description" : "The url for the icon of the event type.",
            "type" : "string",
            "format" : "uri"
          },
          "isPinned" : {
            "description" : "Denotes if the event type should be displayed as a pinned item.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "File" : {
        "description" : "File model",
        "type" : "object",
        "required" : [ "externalId", "type", "format", "url" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the file record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "externalId" : {
            "description" : "The id of the file from the external file hosting service.",
            "type" : "string"
          },
          "type" : {
            "description" : "The file type.",
            "type" : "string"
          },
          "format" : {
            "description" : "The file format.",
            "type" : "string"
          },
          "url" : {
            "description" : "The url or link for the file.",
            "type" : "string",
            "format" : "url"
          },
          "date" : {
            "description" : "The file creation date/time.",
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "Inspection" : {
        "description" : "Inspection model",
        "type" : "object",
        "required" : [ "type", "building", "floor", "scheduledStart", "scheduledEnd" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the inspection record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the inspection.",
            "type" : "string",
            "readOnly" : true
          },
          "assignee" : {
            "description" : "Ref: User. The user assigned to the inspection.",
            "type" : "string",
            "format" : "objectid"
          },
          "notes" : {
            "description" : "A brief note/description for the inspection.",
            "type" : "string"
          },
          "type" : {
            "description" : "Ref: Inspection Type. The type of inspection to be conducted.",
            "type" : "string",
            "format" : "objectid"
          },
          "building" : {
            "description" : "Ref: Building. The building where the inspection is to be/has been conducted.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where the inspection is to be/has been conducted.",
            "type" : "string",
            "format" : "objectid"
          },
          "floor" : {
            "description" : "The floor where the inspection is to be/has been conducted.",
            "type" : "string"
          },
          "scheduledStart" : {
            "description" : "The scheduled date/time for when to start conducting the inspection.",
            "type" : "string",
            "format" : "date-time"
          },
          "scheduledEnd" : {
            "description" : "The scheduled date/time for when to complete conducting the inspection.",
            "type" : "string",
            "format" : "date-time"
          },
          "startedAt" : {
            "description" : "The actual date/time when the inspection has been started.",
            "type" : "string",
            "format" : "date-time"
          },
          "completedAt" : {
            "description" : "The actual date/time when the inspection has been completed.",
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "description" : "The status of the inspection.",
            "type" : "string",
            "enum" : [ "CANCELLED", "COMPLETED", "IN_PROGRESS", "MISSED", "PENDING" ],
            "default" : "PENDING"
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the inspection.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the inspection was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "InspectionType" : {
        "description" : "Inspection type model",
        "type" : "object",
        "required" : [ "name", "icon" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the inspection type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "A descriptive name for the inspection type record.",
            "type" : "string"
          },
          "icon" : {
            "description" : "The url for the icon of the inspection type.",
            "type" : "string",
            "format" : "uri"
          },
          "isPinned" : {
            "description" : "Denotes if the inspection type should be displayed as a pinned item.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Issue" : {
        "description" : "Issue model",
        "type" : "object",
        "required" : [ "summary", "description", "incidentDate" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the issue record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "summary" : {
            "description" : "The subject or summary of the issue encountered.",
            "type" : "string"
          },
          "description" : {
            "description" : "The detailed description of the issue encountered.",
            "type" : "string"
          },
          "incidentDate" : {
            "description" : "The date/time when the issue was encountered.",
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "description" : "The status of the issue.",
            "type" : "string",
            "enum" : [ "OPEN", "CLOSED" ],
            "default" : "OPEN"
          },
          "severity" : {
            "description" : "The severity/priority of the issue.",
            "type" : "string",
            "enum" : [ "LOW", "MEDIUM", "HIGH", "EPIC" ]
          },
          "recordType" : {
            "description" : "The type of the record being reported, if any.",
            "type" : "string",
            "enum" : [ "ASSET", "ENTITY", "SPACE" ]
          },
          "recordId" : {
            "description" : "The id of the record being reported, if any.",
            "type" : "string",
            "format" : "objectid"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Listing" : {
        "description" : "Listing model",
        "type" : "object",
        "required" : [ "type", "subType", "building", "currency" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the listing record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the listing.",
            "type" : "string",
            "readOnly" : true
          },
          "type" : {
            "description" : "Ref: Listing Type. The type of listing.",
            "type" : "string",
            "format" : "objectid"
          },
          "subType" : {
            "description" : "Ref: Listing Type. The sub-type of listing.",
            "type" : "string",
            "format" : "objectid"
          },
          "status" : {
            "description" : "The status of the listing.",
            "type" : "string",
            "enum" : [ "DRAFT", "AVAILABLE", "SOLD" ],
            "default" : "AVAILABLE"
          },
          "condition" : {
            "description" : "The condition of the item.",
            "type" : "string",
            "enum" : [ "BRAND_NEW", "USED" ],
            "default" : "BRAND_NEW"
          },
          "photos" : {
            "description" : "Ref: File. The photos for the listing.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "building" : {
            "description" : "Ref: Building. The building where the listing is posted.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where the listing is posted.",
            "type" : "string",
            "format" : "objectid"
          },
          "asset" : {
            "description" : "Ref: Asset. The asset being sold.",
            "type" : "string",
            "format" : "objectid"
          },
          "notes" : {
            "description" : "A brief note/description for the listing.",
            "type" : "string"
          },
          "fee" : {
            "description" : "The fee or price for the listed item.",
            "type" : "number",
            "format" : "float"
          },
          "currency" : {
            "description" : "The currency used for the fees.",
            "type" : "string"
          },
          "date" : {
            "description" : "The date/time when the listing was filed.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the listing.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the listing was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "ListingType" : {
        "description" : "Listing Type model",
        "type" : "object",
        "required" : [ "name", "icon" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the listing type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The listing type label or name.",
            "type" : "string"
          },
          "parent" : {
            "description" : "Ref: Listing Type. The parent listing type, if any.",
            "type" : "string",
            "format" : "objectid"
          },
          "icon" : {
            "description" : "The url for the icon of the listing type.",
            "type" : "string",
            "format" : "uri"
          },
          "isPinned" : {
            "description" : "Denotes if the listing type should be displayed as a pinned item.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Notice" : {
        "description" : "Notice model",
        "type" : "object",
        "required" : [ "type", "building", "startDate", "endDate" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the notice record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the notice.",
            "type" : "string",
            "readOnly" : true
          },
          "type" : {
            "description" : "Ref: Notice Type. The type of notice.",
            "type" : "string",
            "format" : "objectid"
          },
          "invitees" : {
            "description" : "Ref: User. Addressees on the notice.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "photos" : {
            "description" : "Ref: File. The photos for the notice.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "building" : {
            "description" : "Ref: Building. The building where the notice is posted.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where the notice is posted.",
            "type" : "string",
            "format" : "objectid"
          },
          "space" : {
            "description" : "Ref: Space. The space where the notice is posted.",
            "type" : "string",
            "format" : "objectid"
          },
          "notes" : {
            "description" : "A brief note/description for the notice.",
            "type" : "string"
          },
          "startDate" : {
            "description" : "The start date/time when the notice is effective.",
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "description" : "The end date/time when the notice is effective.",
            "type" : "string",
            "format" : "date-time"
          },
          "date" : {
            "description" : "The date/time when the notice was filed.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the notice.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the notice was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "NoticeType" : {
        "description" : "Notice Type model",
        "type" : "object",
        "required" : [ "name", "icon" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the notice type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The notice type label or name.",
            "type" : "string"
          },
          "icon" : {
            "description" : "The url for the icon of the notice type.",
            "type" : "string",
            "format" : "uri"
          },
          "isPinned" : {
            "description" : "Denotes if the notice type should be displayed as a pinned item.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Notification" : {
        "description" : "Notification model",
        "type" : "object",
        "required" : [ "user", "action", "subject", "message" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the notification record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "user" : {
            "description" : "Ref: User. The target recipient of the notification.",
            "type" : "string",
            "format" : "objectid"
          },
          "action" : {
            "description" : "The context from where the action to notify has been initiated.",
            "type" : "string"
          },
          "resource" : {
            "description" : "The associated resource or module of the notification.",
            "type" : "string"
          },
          "title" : {
            "description" : "The subject or title of the notification.",
            "type" : "string"
          },
          "message" : {
            "description" : "The message or body which details the notification.",
            "type" : "string"
          },
          "isRead" : {
            "description" : "Denotes if the notification has been read or not.",
            "type" : "boolean",
            "default" : false
          },
          "recordId" : {
            "description" : "The id of the referenced resource document/record.",
            "type" : "string",
            "format" : "objectid"
          },
          "building" : {
            "description" : "The building id of the referenced notification.",
            "type" : "string",
            "format" : "objectid"
          },
          "payload" : {
            "description" : "Any additional data or properties that describe the notification.",
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "expiredAt" : {
            "description" : "The timestamp for when the record will deleted. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Permit" : {
        "description" : "Permit model",
        "type" : "object",
        "required" : [ "type", "building", "currency", "startDate", "endDate" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the permit record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the permit.",
            "type" : "string",
            "readOnly" : true
          },
          "assignee" : {
            "description" : "Ref: User. The user to be process the approval of the permit.",
            "type" : "string",
            "format" : "objectid"
          },
          "type" : {
            "description" : "Ref: Permit Type. The type of permit requested.",
            "type" : "string",
            "format" : "objectid"
          },
          "subTypes" : {
            "description" : "Ref: Permit Type. The type of permit requested.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "status" : {
            "description" : "The status of the permit.",
            "type" : "string",
            "enum" : [ "PENDING", "ACTIVE", "COMPLETE", "CANCELLED", "APPROVED", "REJECTED" ],
            "default" : "PENDING"
          },
          "photos" : {
            "description" : "Ref: File. The photos for the requested permit.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "docs" : {
            "description" : "Ref: File. The supporting documents for the requested permit.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "building" : {
            "description" : "Ref: Building. The building where the permit is requested for.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where the permit is requested for.",
            "type" : "string",
            "format" : "objectid"
          },
          "space" : {
            "description" : "Ref: Space. The space where the permit is requested for.",
            "type" : "string",
            "format" : "objectid"
          },
          "notes" : {
            "description" : "A brief note/description for the permit.",
            "type" : "string"
          },
          "fee" : {
            "description" : "The fee or price for the permit.",
            "type" : "number",
            "format" : "float"
          },
          "currency" : {
            "description" : "The currency used for the fees.",
            "type" : "string"
          },
          "startDate" : {
            "description" : "The requested start date for the validity of the permit.",
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "description" : "The requested end date for the validity of the permit.",
            "type" : "string",
            "format" : "date-time"
          },
          "date" : {
            "description" : "The date/time when the permit request was filed.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the permit.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "approver" : {
            "description" : "Ref: User. The assigned approver for the permit.",
            "type" : "string",
            "format" : "objectid"
          },
          "contractor" : {
            "description" : "Ref: Entity. The assigned entity/contractor for the permit.",
            "type" : "string",
            "format" : "objectid"
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the permit was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "PermitFee" : {
        "description" : "Permit Fee model",
        "type" : "object",
        "required" : [ "building", "permitType", "fee", "currency" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the permit fee record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "building" : {
            "description" : "Ref: Building. The building for which the fee is applied.",
            "type" : "string",
            "format" : "objectid"
          },
          "permitType" : {
            "description" : "Ref: Permit Type. The permit type for which the fee is applied.",
            "type" : "string",
            "format" : "objectid"
          },
          "fee" : {
            "description" : "The fee or price for the permit.",
            "type" : "number",
            "format" : "float"
          },
          "currency" : {
            "description" : "The currency used for the fees.",
            "type" : "string"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "PermitType" : {
        "description" : "Permit Type model",
        "type" : "object",
        "required" : [ "name", "icon" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the permit type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The permit type label or name.",
            "type" : "string"
          },
          "parent" : {
            "description" : "Ref: Permit Type. The parent permit type, if any.",
            "type" : "string",
            "format" : "objectid"
          },
          "icon" : {
            "description" : "The url for the icon of the permit type.",
            "type" : "string",
            "format" : "uri"
          },
          "isPinned" : {
            "description" : "Denotes if the permit type should be displayed as a pinned item.",
            "type" : "boolean",
            "default" : false
          },
          "isContractorRequired" : {
            "description" : "Denotes if the permit type requires contractor or entity.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Project" : {
        "description" : "Project model",
        "type" : "object",
        "required" : [ "ticektType", "tasks", "assignee", "description", "building", "targetDate" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the project record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the project.",
            "type" : "string",
            "readOnly" : true
          },
          "ticketType" : {
            "description" : "Ref: Ticket Type. The ticket type for the ticket.",
            "type" : "string",
            "format" : "objectid"
          },
          "tasks" : {
            "description" : "Ref: Project Task. The specified tasks for the project.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "assignee" : {
            "description" : "Ref: User. The user assigned to the project.",
            "type" : "string",
            "format" : "objectid"
          },
          "description" : {
            "description" : "A detailed description for the project.",
            "type" : "string"
          },
          "building" : {
            "description" : "Ref: Building. The building for which the project is filed for.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building for which the project is filed for.",
            "type" : "string",
            "format" : "objectid"
          },
          "space" : {
            "description" : "Ref: Space. The space for which the project is filed for.",
            "type" : "string",
            "format" : "objectid"
          },
          "photos" : {
            "description" : "Ref: File. The photos for the reported project.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "files" : {
            "description" : "Ref: File. The files for the issue reported.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the ticket.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "status" : {
            "description" : "The status of the project.",
            "type" : "string",
            "enum" : [ "PENDING", "ACTIVE", "CLOSED", "OVERDUE" ],
            "default" : "PENDING"
          },
          "targetDate" : {
            "description" : "The target completion date of the project.",
            "type" : "string",
            "format" : "date-time"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "ProjectTask" : {
        "description" : "Project task model",
        "type" : "object",
        "required" : [ "type", "description" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the project task record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "type" : {
            "description" : "Ref: Task Type. Holds the task type of the task.",
            "type" : "string",
            "format" : "objectid"
          },
          "description" : {
            "description" : "A detailed description for the project task.",
            "type" : "string"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Proposal" : {
        "description" : "Proposal model",
        "type" : "object",
        "required" : [ "createdFrom", "services", "acceptanceLevel", "mobilisationStartDate", "mobilisationEndDate", "startDate", "endDate" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the proposal record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the proposal.",
            "type" : "string",
            "readOnly" : true
          },
          "createdFrom" : {
            "description" : "Ref: RFP. The from which the proposal was created from.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "notes" : {
            "description" : "Other details, specifications and requirements for the proposal.",
            "type" : "string"
          },
          "docs" : {
            "description" : "Ref: File. Other attachment or files describing the proposal.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "services" : {
            "description" : "Ref: Proposal Service. The services quoted on the proposal.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "status" : {
            "description" : "The status of the proposal.",
            "type" : "string",
            "enum" : [ "DRAFT", "SUBMITTED", "WITHDRAWN", "WON", "REJECTED" ]
          },
          "acceptanceLevel" : {
            "description" : "The proposed acceptance level.",
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "description" : "The proposed billing frequency.",
            "type" : "string",
            "enum" : [ "WEEKLY", "MONTHLY", "QUARTERLY", "BI_ANNUALLY", "ANNUALLY" ]
          },
          "terms" : {
            "description" : "The proposed billing term.",
            "type" : "string",
            "enum" : [ "ADVANCE_100", "ADVANCE_50", "ADVANCE_20", "30_DAYS", "60_DAYS", "90_DAYS", "180_DAYS" ]
          },
          "paymentMethod" : {
            "description" : "The proposed payment method.",
            "type" : "string",
            "enum" : [ "CASH", "CHEQUE", "CREDIT" ]
          },
          "mobilisationStartDate" : {
            "description" : "The tentative start of mobilisation period.",
            "type" : "string",
            "format" : "date-time"
          },
          "mobilisationEndDate" : {
            "description" : "The tentative end of mobilisation period.",
            "type" : "string",
            "format" : "date-time"
          },
          "startDate" : {
            "description" : "The tentative start effectivity of the contract.",
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "description" : "The tentative start effectivity of the contract.",
            "type" : "string",
            "format" : "date-time"
          },
          "currency" : {
            "description" : "The currency for the parts value.",
            "type" : "string"
          },
          "totalAmount" : {
            "description" : "The total amount quoted on the proposal.",
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "totalHeadCount" : {
            "description" : "The total head count proposed.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "date" : {
            "description" : "The date when the RFP was filed.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the proposal.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the proposal was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "ProposalService" : {
        "description" : "Proposal Service model",
        "type" : "object",
        "required" : [ "rfpService", "subServices" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the RFP Service record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "rfpService" : {
            "description" : "Ref: RFP Service. The RFP Service being quoted.",
            "type" : "string",
            "format" : "objectid"
          },
          "subServices" : {
            "description" : "Ref: Proposal Sub Service. The specific sub-services being quoted on the proposal.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          }
        }
      },
      "ProposalSubService" : {
        "description" : "Proposal Sub Service model",
        "type" : "object",
        "required" : [ "service", "items" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the RFP Sub Service record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "rfpSubService" : {
            "description" : "Ref: RFP Sub Service. The RFP Sub Service being quoted.",
            "type" : "string",
            "format" : "objectid"
          },
          "amount" : {
            "description" : "The quoted amount on the sub-service.",
            "type" : "integer",
            "format" : "int32"
          },
          "headCount" : {
            "description" : "The headcount to be provided to fulfill the service, if applicable.",
            "type" : "integer",
            "format" : "int32"
          },
          "notes" : {
            "description" : "Other details and specification on the quoted service.",
            "type" : "string"
          }
        }
      },
      "Resource" : {
        "type" : "object",
        "description" : "Resource model",
        "required" : [ "name" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the resource record.",
            "type" : "string",
            "readOnly" : true
          },
          "name" : {
            "description" : "A descriptive name for the resource.",
            "type" : "string"
          },
          "operations" : {
            "description" : "The available operations for the resource.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "READ", "CREATE", "UPDATE", "DELETE", "STATUSUPDATE" ]
            }
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "RFP" : {
        "description" : "RFP model",
        "type" : "object",
        "required" : [ "services", "building", "acceptanceLevel", "targetStartDate", "targetEndDate", "closeDate" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the RFP record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the RFP.",
            "type" : "string",
            "readOnly" : true
          },
          "notes" : {
            "description" : "Other details, specifications and requirements for the RFP.",
            "type" : "string"
          },
          "docs" : {
            "description" : "Ref: File. Other attachment or files describing the RFP.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "services" : {
            "description" : "Ref: RFP Service. The services being requested for the RFP.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "status" : {
            "description" : "The status of the RFP.",
            "type" : "string",
            "enum" : [ "DRAFT", "OPEN", "CLOSED", "AWARDED" ]
          },
          "building" : {
            "description" : "Ref: Building. The building where proposals are being requested for.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where proposals are being requested for, if any.",
            "type" : "string",
            "format" : "objectid"
          },
          "acceptanceLevel" : {
            "description" : "The preffered acceptance level required for the RFP.",
            "type" : "integer",
            "format" : "int32"
          },
          "frequency" : {
            "description" : "The preferred billing term for the RFP.",
            "type" : "string",
            "enum" : [ "WEEKLY", "MONTHLY", "QUARTERLY", "BI_ANNUALLY", "ANNUALLY" ]
          },
          "terms" : {
            "description" : "The preferred billing term for the RFP.",
            "type" : "string",
            "enum" : [ "ADVANCE_100", "ADVANCE_50", "ADVANCE_20", "30_DAYS", "60_DAYS", "90_DAYS", "180_DAYS" ]
          },
          "paymentMethod" : {
            "description" : "The preferred payment method for the RFP.",
            "type" : "string",
            "enum" : [ "CASH", "CHEQUE", "CREDIT" ]
          },
          "currency" : {
            "description" : "The currency to be used.",
            "type" : "string"
          },
          "suppliers" : {
            "description" : "Filter the suppliers who can submit their proposals.",
            "$ref" : "#/components/schemas/SupplierFilter"
          },
          "targetStartDate" : {
            "description" : "The target start date for effectivity of the contract.",
            "type" : "string",
            "format" : "date-time"
          },
          "targetEndDate" : {
            "description" : "The target end date for effectivity of the contract.",
            "type" : "string",
            "format" : "date-time"
          },
          "surveyDate" : {
            "description" : "The survey date for when suppliers and service providers can conduct their site visit.",
            "type" : "string",
            "format" : "date-time"
          },
          "closeDate" : {
            "description" : "The deadline for when to close the RFP for bidding/proposals and start evaluating.",
            "type" : "string",
            "format" : "date-time"
          },
          "date" : {
            "description" : "The date when the RFP was filed.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the RFP.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the RFP was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "RFPService" : {
        "description" : "RFP Service model",
        "type" : "object",
        "required" : [ "service", "subServices" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the RFP Service record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "service" : {
            "description" : "Ref: Service Type. The top-level service being requested.",
            "type" : "string",
            "format" : "objectid"
          },
          "subServices" : {
            "description" : "Ref: RFP Sub Service. The specific sub-services being requested.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          }
        }
      },
      "RFPSubService" : {
        "description" : "RFP Sub Service model",
        "type" : "object",
        "required" : [ "service", "items" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the RFP Sub Service record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "notes" : {
            "description" : "Other details, specifications and requirements for the service being requested.",
            "type" : "string"
          },
          "service" : {
            "description" : "Ref: Service Type. The service being requested.",
            "type" : "string",
            "format" : "objectid"
          },
          "isScheduled" : {
            "description" : "Denotes if the service being requested is a scheduled one.",
            "type" : "boolean",
            "default" : false
          },
          "isOnDemand" : {
            "description" : "Denotes if the service being requested is on-demand.",
            "type" : "boolean",
            "default" : false
          },
          "items" : {
            "description" : "The items to be serviced and their respective service details.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RFPItem"
            }
          },
          "coverageStart" : {
            "description" : "The required start time coverage (in minutes) in relation to 12AM (being 0).",
            "type" : "integer",
            "format" : "int32"
          },
          "coverageDuration" : {
            "description" : "The required duration (in minutes) for the coverage.",
            "type" : "integer",
            "format" : "int32"
          },
          "includeConsumables" : {
            "description" : "Denotes if consumables are required to be included in the service.",
            "type" : "boolean",
            "default" : false
          },
          "includeParts" : {
            "description" : "Denotes if parts are required to be included in the service.",
            "type" : "boolean",
            "default" : false
          },
          "partsValue" : {
            "description" : "The value of parts being requested to be included in the service.",
            "type" : "integer",
            "format" : "int32"
          },
          "costPlus" : {
            "description" : "The cost plus requirement for when servicing items.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Role" : {
        "description" : "Role model",
        "type" : "object",
        "required" : [ "name", "permissions" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the role record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "A descriptive name for the role.",
            "type" : "string"
          },
          "permissions" : {
            "description" : "The permissions assigned to the role.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RolePermission"
            }
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Scope" : {
        "description" : "Scope model",
        "type" : "object",
        "required" : [ "name", "serviceType", "frequency" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the scope record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "A descriptive name for the service standard.",
            "type" : "string"
          },
          "serviceType" : {
            "description" : "Ref: Service Type. The service type where the scope applies to.",
            "type" : "string",
            "format" : "objectid"
          },
          "frequency" : {
            "description" : "The frequency (in minutes) of servicing required.",
            "type" : "integer",
            "format" : "int32"
          },
          "isInactive" : {
            "description" : "Denotes if the scope is inactive not.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "ServiceStandard" : {
        "description" : "Service standard model",
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the service standard record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "A descriptive name for the service standard.",
            "type" : "string"
          },
          "description" : {
            "description" : "A brief description for the service standard.",
            "type" : "string"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "ServiceType" : {
        "description" : "Service type model",
        "type" : "object",
        "required" : [ "name", "icon", "classes" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the service type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "A descriptive name for the service type.",
            "type" : "string"
          },
          "classes" : {
            "description" : "The classification of the service type.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "COMMUNITY_MANAGEMENT", "FACILITIES_MANAGEMENT", "PROPERTY_MANAGEMENT", "RESIDENTIAL_SERVICES" ]
            }
          },
          "parent" : {
            "description" : "Ref: Service Type. If the service type is a sub type of another, this holds the parent service type.",
            "type" : "string",
            "format" : "objectid"
          },
          "assetClasses" : {
            "description" : "Ref: Asset Class. The asset classes that can be served under the service type",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "icon" : {
            "description" : "The url for the icon of the service type.",
            "type" : "string",
            "format" : "uri"
          },
          "isPinned" : {
            "description" : "Denotes if the service type should be displayed as a pinned item.",
            "type" : "boolean",
            "default" : false
          },
          "isContractable" : {
            "description" : "Denotes if the service type is applicable for contracts or one-time projects only.",
            "type" : "boolean",
            "default" : false
          },
          "isResidential" : {
            "description" : "Denotes if the service type is applicable for residential type opportunities.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Snag" : {
        "description" : "Snag model",
        "type" : "object",
        "required" : [ "type", "notes", "building", "space", "targetDate" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the snag record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the snag.",
            "type" : "string",
            "readOnly" : true
          },
          "assignee" : {
            "description" : "Ref: User. The user assigned to the snag.",
            "type" : "string",
            "format" : "objectid"
          },
          "type" : {
            "description" : "Ref: Snag Type. The type of the snag being made.",
            "type" : "string",
            "format" : "objectid"
          },
          "notes" : {
            "description" : "The comments/notes for the snagged asset or space.",
            "type" : "string"
          },
          "status" : {
            "description" : "The status for the snag report.",
            "type" : "string",
            "enum" : [ "ACTIVE", "CLOSED", "PENDING", "MISSED" ],
            "default" : "PENDING"
          },
          "photos" : {
            "description" : "Ref: File. The photos for the snag report.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "building" : {
            "description" : "Ref: Building. The building where the space or asset is located.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where the space or asset is located.",
            "type" : "string",
            "format" : "objectid"
          },
          "space" : {
            "description" : "Ref: Space. The space being snagged.",
            "type" : "string",
            "format" : "objectid"
          },
          "asset" : {
            "description" : "Ref: Asset. The asset being snagged.",
            "type" : "string",
            "format" : "objectid"
          },
          "targetDate" : {
            "description" : "The target date for resolving the snag report.",
            "type" : "string",
            "format" : "date-time"
          },
          "date" : {
            "description" : "The date when snag report was made.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the snag.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "contractor" : {
            "description" : "Ref: Entity. The assigned entity/contractor for the snag.",
            "type" : "string",
            "format" : "objectid"
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the snag was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "SnagType" : {
        "description" : "Snag Type model",
        "type" : "object",
        "required" : [ "name", "icon" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the snag type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The snag type label or name.",
            "type" : "string"
          },
          "icon" : {
            "description" : "The url for the icon of the snag type.",
            "type" : "string",
            "format" : "uri"
          },
          "isPinned" : {
            "description" : "Denotes if the snag type should be displayed as a pinned item.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Space" : {
        "description" : "Space model",
        "type" : "object",
        "required" : [ "name", "building", "floor", "spaceType", "spacialType" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the space record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "A descriptive name for the space.",
            "type" : "string"
          },
          "label" : {
            "description" : "The unique label for the space record.",
            "type" : "string"
          },
          "labelPosition" : {
            "description" : "The position of the label on the tagged space.",
            "type" : "string",
            "enum" : [ "CEILING", "DOOR", "WALL" ]
          },
          "labelSize" : {
            "description" : "The size of label used on the asset.",
            "type" : "string",
            "enum" : [ "A4", "A6", "RECTANGLE", "SQUARE" ]
          },
          "notes" : {
            "description" : "A brief note/description of the space being tagged.",
            "type" : "string"
          },
          "photos" : {
            "description" : "The photos for the space.",
            "type" : "array",
            "items" : {
              "description" : "Ref: File. The files/photos associated with the space.",
              "type" : "string",
              "format" : "objectid"
            }
          },
          "building" : {
            "description" : "Ref: Building. The building where the space is located.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building where the space is located. Dependent on the building.",
            "type" : "string",
            "format" : "objectid"
          },
          "floor" : {
            "description" : "The floor where the space is located in the building or sub-building. Dependent on the building and/or sub-building.",
            "$ref" : "#/components/schemas/Floor"
          },
          "location" : {
            "description" : "The exact location of the space represented as [longitude, latitude]",
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "spaceType" : {
            "description" : "Ref: Space Type. The type of space where the space is located.",
            "type" : "string",
            "format" : "objectid"
          },
          "spacialType" : {
            "description" : "Ref: Spacial Type. The spacial type of the space.",
            "type" : "string",
            "format" : "objectid"
          },
          "access" : {
            "description" : "Denotes whether there is free access to the space or not. false denotes closed/locked, true denotes open.",
            "type" : "boolean",
            "default" : false
          },
          "condition" : {
            "description" : "The of the space and its perimeter.",
            "type" : "string",
            "enum" : [ "LOW", "MEDIUM", "HIGH" ],
            "default" : "MEDIUM"
          },
          "footFlow" : {
            "description" : "The foot flow within the space and it's perimeter.",
            "type" : "string",
            "enum" : [ "LOW", "MEDIUM", "HIGH" ],
            "default" : "MEDIUM"
          },
          "dimensions" : {
            "description" : "The dimension or measurements for the space.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Dimension"
            }
          },
          "floorArea" : {
            "description" : "The floor area of the space computed based on the section dimensions.",
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "volume" : {
            "description" : "The volume of the space computed based on the section dimensions.",
            "type" : "number",
            "format" : "float",
            "readOnly" : true
          },
          "isFlagged" : {
            "description" : "Denotes if the space has been flagged.",
            "type" : "boolean",
            "default" : false
          },
          "metadata" : {
            "description" : "Any additional data or properties that describe the space.",
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "isInactive" : {
            "description" : "Denotes if the space is active or has been decommissioned.",
            "type" : "boolean",
            "default" : false
          },
          "internalReviewStatus" : {
            "description" : "The status of the internal review.",
            "type" : "string",
            "enum" : [ "PENDING_REVIEW", "REVIEW_IN_PROGRESS", "REVIEWED" ],
            "default" : "PENDING_REVIEW"
          },
          "order" : {
            "description" : "The order or sequence number for the space. Used for sorting purposes.",
            "type" : "integer",
            "format" : "int32"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "SpaceType" : {
        "description" : "Space Type model",
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the space type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The space type name.",
            "type" : "string"
          },
          "commonArea" : {
            "description" : "Denotes if the space type is a common area.",
            "type" : "boolean",
            "default" : false
          },
          "chargeServices" : {
            "description" : "Denotes if service charges are applicable to the space type.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "SpacialType" : {
        "description" : "Spacial Type model",
        "type" : "object",
        "required" : [ "name", "sections" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the space type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The space type name.",
            "type" : "string"
          },
          "sections" : {
            "description" : "The number of sections the spacial type has.",
            "type" : "integer",
            "format" : "int32"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "StandardCompliance" : {
        "description" : "Standard Compliance model",
        "type" : "object",
        "required" : [ "serviceStandard", "assetClass", "services" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the standard compliance record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "serviceStandard" : {
            "description" : "Ref: Service Standard. The service standard being complied upon.",
            "type" : "string",
            "format" : "objectid"
          },
          "assetClass" : {
            "description" : "Ref: Asset Class. The asset classification to which the standard compliance is applied.",
            "type" : "string",
            "format" : "objectid"
          },
          "reference" : {
            "description" : "The reference code in the standard.",
            "type" : "string"
          },
          "services" : {
            "description" : "The services to be followed to comply with the standard.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StandardComplianceService"
            }
          },
          "isInactive" : {
            "description" : "Denotes if the standard compliance is inactive or not.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "State" : {
        "description" : "State model",
        "type" : "object",
        "required" : [ "name", "country" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the state record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The state name.",
            "type" : "string"
          },
          "code" : {
            "description" : "The state code.",
            "type" : "string"
          },
          "country" : {
            "description" : "Ref: Country. The country where the state is located.",
            "type" : "string",
            "format" : "objectid"
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "SystemLog" : {
        "description" : "System Log model",
        "type" : "object",
        "properties" : {
          "_id" : {
            "description" : "The identifier for the system log record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "user" : {
            "description" : "The user who performed the operation.",
            "type" : "string",
            "readOnly" : true
          },
          "recordId" : {
            "description" : "The record ID for which the operation was performed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "recordType" : {
            "description" : "The record type for which the operation was performed.",
            "type" : "string",
            "readOnly" : true
          },
          "date" : {
            "description" : "The date when the operation was performed.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "operation" : {
            "description" : "The type of operation performed.",
            "type" : "string",
            "enum" : [ "CHANGE", "SET" ],
            "readOnly" : true
          },
          "field" : {
            "description" : "The field for which the operation was performed.",
            "type" : "string",
            "readOnly" : true
          },
          "oldValue" : {
            "description" : "The previous or old value of the field before the operation was performed.",
            "type" : "string",
            "readOnly" : true
          },
          "newValue" : {
            "description" : "The current or new value of the field after the operation was performed.",
            "type" : "string",
            "readOnly" : true
          }
        }
      },
      "TaskType" : {
        "description" : "Task Type model",
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the task type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The task type label or name.",
            "type" : "string"
          },
          "parent" : {
            "description" : "Ref: Ticket Type. Holds the parent ticket type.",
            "type" : "string",
            "format" : "objectid"
          },
          "isResidential" : {
            "description" : "Denotes if the task is applicable for residential space.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Ticket" : {
        "description" : "Ticket model",
        "type" : "object",
        "required" : [ "summary", "type", "subType", "building", "space" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the ticket record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the ticket.",
            "type" : "string",
            "readOnly" : true
          },
          "assignee" : {
            "description" : "Ref: User. The user assigned to the ticket.",
            "type" : "string",
            "format" : "objectid"
          },
          "summary" : {
            "description" : "A brief summary for the issue reported.",
            "type" : "string"
          },
          "description" : {
            "description" : "A detailed description for the issue reported.",
            "type" : "string"
          },
          "type" : {
            "description" : "Ref: Ticket Type. The ticket type for the ticket.",
            "type" : "string",
            "format" : "objectid"
          },
          "subType" : {
            "description" : "Ref: Ticket Type. The sub ticket type for the ticket.",
            "type" : "string",
            "format" : "objectid"
          },
          "building" : {
            "description" : "Ref: Building. The building for which the ticket is filed for.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building for which the ticket is filed for.",
            "type" : "string",
            "format" : "objectid"
          },
          "space" : {
            "description" : "Ref: Space. The space for which the ticket is filed for.",
            "type" : "string",
            "format" : "objectid"
          },
          "asset" : {
            "description" : "Ref: Asset. The asset for which the ticket is filed for.",
            "type" : "string",
            "format" : "objectid"
          },
          "inspection" : {
            "description" : "Ref: Inspection. The inspection for which ticket is filed for.",
            "type" : "string",
            "format" : "objectid"
          },
          "photos" : {
            "description" : "Ref: File. The photos for the issue reported.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "tags" : {
            "description" : "The tags or keywords for the ticket.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "priority" : {
            "description" : "The priority level of the ticket.",
            "type" : "string",
            "enum" : [ "NORMAL", "MAJOR", "EMERGENCY" ],
            "default" : "NORMAL"
          },
          "status" : {
            "description" : "The status of the ticket.",
            "type" : "string",
            "enum" : [ "ACTIVE", "CLOSED", "OVERDUE", "PENDING" ],
            "default" : "PENDING"
          },
          "completionDate" : {
            "description" : "The date/time when the issue reported has been resolved.",
            "type" : "string",
            "format" : "date-time"
          },
          "reportedDate" : {
            "description" : "The date/time when the issue was reported.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the ticket.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the ticket was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "TicketType" : {
        "description" : "Ticket Type model",
        "type" : "object",
        "required" : [ "name", "icon", "serviceTypes" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the ticket type record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The ticket type label or name.",
            "type" : "string"
          },
          "parent" : {
            "description" : "Ref: Ticket Type. If the ticket type is a sub type of another, this holds the parent ticket type.",
            "type" : "string",
            "format" : "objectid"
          },
          "serviceTypes" : {
            "description" : "Ref: Service Type. The service types associated/mapped with the ticket type.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "icon" : {
            "description" : "The url for the icon of the ticket type.",
            "type" : "string",
            "format" : "uri"
          },
          "isPinned" : {
            "description" : "Denotes if the ticket type should be displayed as a pinned item.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "User" : {
        "description" : "User model",
        "type" : "object",
        "required" : [ "name", "email" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the user record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The full name of the user.",
            "type" : "string"
          },
          "title" : {
            "description" : "The title of the user.",
            "type" : "string"
          },
          "email" : {
            "description" : "The email of the user.",
            "type" : "string",
            "format" : "email"
          },
          "phone" : {
            "description" : "The phone number of the user.",
            "type" : "string"
          },
          "mobile" : {
            "description" : "The mobile number of the user.",
            "type" : "string"
          },
          "photo" : {
            "description" : "Ref: File. The profile photo of the user.",
            "type" : "string",
            "format" : "objectid"
          },
          "coverPhoto" : {
            "description" : "Ref: File. The cover photo of the user.",
            "type" : "string",
            "format" : "objectid"
          },
          "isInactive" : {
            "description" : "Denotes if the user is inactive or not.",
            "type" : "boolean",
            "default" : false
          },
          "birthDate" : {
            "description" : "Birth date of the user.",
            "format" : "date-time",
            "type" : "string"
          },
          "gender" : {
            "description" : "Gender of the user.",
            "type" : "string",
            "enum" : [ "MALE", "FEMALE", "RATHER_NOT_TO_SAY" ]
          },
          "attachements" : {
            "description" : "User personal files.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/File"
            }
          },
          "connections" : {
            "description" : "The list of connected persons to user.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "emergencyContact" : {
            "description" : "Contact to notify in case of emergency.",
            "$ref" : "#/components/schemas/EmergencyContact"
          }
        }
      },
      "Utility" : {
        "description" : "Utility model",
        "type" : "object",
        "required" : [ "type", "building", "space", "asset", "reading" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the utility record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "referenceNumber" : {
            "description" : "An auto-generated reference number for the utility.",
            "type" : "string",
            "readOnly" : true
          },
          "type" : {
            "description" : "Ref: Utility Type. The type of utility reading.",
            "type" : "string",
            "format" : "objectid"
          },
          "photos" : {
            "description" : "Ref: File. Supporting photos for the utility reading.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "building" : {
            "description" : "Ref: Building. The building from where the utility reading was made.",
            "type" : "string",
            "format" : "objectid"
          },
          "subBuilding" : {
            "description" : "Ref: Building. The sub-building from where the utility reading was made.",
            "type" : "string",
            "format" : "objectid"
          },
          "space" : {
            "description" : "Ref: Space. The space from where the utility reading was made.",
            "type" : "string",
            "format" : "objectid"
          },
          "asset" : {
            "description" : "Ref: Asset. The asset for which the utility reading was made.",
            "type" : "string",
            "format" : "objectid"
          },
          "notes" : {
            "description" : "Brief comments or notes about the reading.",
            "type" : "string"
          },
          "reading" : {
            "description" : "The current reading from the meter.",
            "type" : "integer",
            "format" : "int32"
          },
          "date" : {
            "description" : "The timestamp for when the reading was made.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "submittedBy" : {
            "description" : "Ref: User. The user who submitted or filed the utility.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "owner" : {
            "description" : "Ref: Entity. The entity from where the utility was filed.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          }
        }
      },
      "UtilityType" : {
        "description" : "Utility Type model",
        "type" : "object",
        "required" : [ "name", "icon", "assetClass" ],
        "properties" : {
          "_id" : {
            "description" : "The identifier for the utility record.",
            "type" : "string",
            "format" : "objectid",
            "readOnly" : true
          },
          "name" : {
            "description" : "The utility type label or name.",
            "type" : "string"
          },
          "icon" : {
            "description" : "The url for the icon of the utility type.",
            "type" : "string",
            "format" : "uri"
          },
          "assetClass" : {
            "description" : "Ref: Asset Classes. The asset class associated to the utility type for filtering assets.",
            "type" : "string",
            "format" : "objectid"
          },
          "isPinned" : {
            "description" : "Denotes if the utility type should be displayed as a pinned item.",
            "type" : "boolean",
            "default" : false
          },
          "createdAt" : {
            "description" : "The timestamp for when the record has been created. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "description" : "The timestamp for when the record has been last updated. For auditing purposes only",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "Address" : {
        "description" : "Address model",
        "type" : "object",
        "required" : [ "address1", "suburb", "city", "state", "country", "postalCode", "location" ],
        "properties" : {
          "address1" : {
            "description" : "Address line 1.",
            "type" : "string"
          },
          "address2" : {
            "description" : "Address line 2.",
            "type" : "string"
          },
          "suburb" : {
            "description" : "Suburb or subdivision.",
            "type" : "string"
          },
          "city" : {
            "description" : "The city address.",
            "type" : "string"
          },
          "state" : {
            "description" : "The state address.",
            "type" : "string"
          },
          "country" : {
            "description" : "Ref: Country. The country address.",
            "type" : "string",
            "format" : "objectid"
          },
          "location" : {
            "description" : "The exact location of the address represented as [longitude, latitude]",
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          }
        }
      },
      "BatchItems" : {
        "description" : "Batch Items model",
        "type" : "object",
        "required" : [ "item", "quantity" ],
        "properties" : {
          "item" : {
            "description" : "The specific item.",
            "type" : "string",
            "enum" : [ "A4", "A6", "RECTANGLE", "SQUARE" ]
          },
          "description" : {
            "description" : "Brief description for the item in the batch.",
            "type" : "string"
          },
          "quantity" : {
            "description" : "The quantity of labels to print.",
            "type" : "integer",
            "format" : "int32"
          },
          "labels" : {
            "description" : "The auto-generated labels for the batch.",
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "readOnly" : true
          }
        }
      },
      "BatchJobError" : {
        "description" : "Batch Job Error model",
        "type" : "object",
        "properties" : {
          "index" : {
            "description" : "The index of the item. Can represent the index of the object when JSON is submitted or row number when CSV.",
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "description" : "A high level descriptive message for the error",
            "type" : "string"
          },
          "data" : {
            "description" : "Detailed description of the errors",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "BudgetItem" : {
        "description" : "Budget Item model",
        "type" : "object",
        "required" : [ "type", "amount" ],
        "properties" : {
          "type" : {
            "description" : "Ref: Budget Type. The type of budget line item.",
            "type" : "string",
            "format" : "objectid"
          },
          "amount" : {
            "description" : "The amount to be allocated for the budget line item.",
            "type" : "number",
            "format" : "float"
          },
          "docs" : {
            "description" : "Ref: File. Documents/attachments that can describe the budget line item.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          },
          "contract" : {
            "description" : "Ref: Contract. A contract associated with the budget line item.",
            "type" : "string",
            "format" : "objectid"
          },
          "excludedSpaces" : {
            "description" : "Ref: Space. Spaces to be excluded in the budget line item.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "objectid"
            }
          }
        }
      },
      "BudgetSpace" : {
        "description" : "Budget Space model",
        "type" : "object",
        "required" : [ "type", "gfa", "amountPerSqm" ],
        "properties" : {
          "type" : {
            "description" : "Ref: Space Type. The type of spaces included in the GFA computation.",
            "type" : "string",
            "format" : "objectid"
          },
          "gfa" : {
            "description" : "The total gross floor are of all spaces in the building with the selected type.",
            "type" : "number",
            "format" : "float"
          },
          "amountPerSqm" : {
            "description" : "The service charge per square meter for the spaces.",
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "Contact" : {
        "description" : "Contact model",
        "type" : "object",
        "required" : [ "name", "email", "phone" ],
        "properties" : {
          "name" : {
            "description" : "The name of the contact.",
            "type" : "string"
          },
          "email" : {
            "description" : "The email of the contact.",
            "type" : "string",
            "format" : "email"
          },
          "phone" : {
            "description" : "The phone number of the contact.",
            "type" : "string"
          }
        }
      },
      "ContractItem" : {
        "description" : "Contract Item model",
        "type" : "object",
        "properties" : {
          "space" : {
            "description" : "Ref: Space. The space where the service should apply to.",
            "type" : "string",
            "format" : "objectid"
          },
          "asset" : {
            "description" : "Ref: Asset. The asset where the service should apply to.",
            "type" : "string",
            "format" : "objectid"
          },
          "standard" : {
            "description" : "Ref: Service Standard. The service standard to apply to the item, if applicable.",
            "type" : "string",
            "format" : "objectid"
          },
          "scopes" : {
            "description" : "The scope of the service being requested.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContractItemScope"
            }
          },
          "responseLevel" : {
            "description" : "The required response level for the item (in minutes).",
            "type" : "integer",
            "format" : "int32"
          },
          "completionLevel" : {
            "description" : "The required completion level for the item (in minutes).",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ContractItemScope" : {
        "description" : "Contract Item Scope model",
        "type" : "object",
        "required" : [ "scope" ],
        "properties" : {
          "scope" : {
            "description" : "The service scope of the item.",
            "type" : "string"
          },
          "frequency" : {
            "description" : "The frequency of service (in minutes).",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }
      },
      "Dimension" : {
        "description" : "Dimension model",
        "type" : "object",
        "properties" : {
          "length" : {
            "description" : "The measurement for the length of the section.",
            "type" : "number",
            "format" : "float",
            "default" : 0
          },
          "width" : {
            "description" : "The measurement for the width of the section.",
            "type" : "number",
            "format" : "float",
            "default" : 0
          },
          "height" : {
            "description" : "The measurement for the height of the section.",
            "type" : "number",
            "format" : "float",
            "default" : 0
          }
        }
      },
      "DistributionItems" : {
        "description" : "Distribution Items model",
        "type" : "object",
        "required" : [ "batch", "item", "quantity" ],
        "properties" : {
          "batch" : {
            "description" : "Ref: Batch. The batch from where to get the items from.",
            "type" : "string",
            "format" : "objectid"
          },
          "item" : {
            "description" : "The type of item to distribute from the batch.",
            "type" : "string",
            "enum" : [ "A4", "A6", "RECTANGLE", "SQUARE" ]
          },
          "description" : {
            "description" : "Brief description for the item to be distributed.",
            "type" : "string"
          },
          "quantity" : {
            "description" : "The quantity to distribute.",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EmergencyContact" : {
        "description" : "Contact model",
        "type" : "object",
        "required" : [ "name", "email", "phone", "relationship" ],
        "properties" : {
          "name" : {
            "description" : "The name of the contact.",
            "type" : "string"
          },
          "email" : {
            "description" : "The email of the contact.",
            "type" : "string",
            "format" : "email"
          },
          "phone" : {
            "description" : "The phone number of the contact.",
            "type" : "string"
          },
          "relationship" : {
            "description" : "The relationship of the contact to user.",
            "type" : "string",
            "enum" : [ "FATHER", "MOTHER", "WIFE", "HUSBAND", "CHILD", "FRIEND", "ASSOCIATE" ]
          }
        }
      },
      "Floor" : {
        "description" : "Floor model",
        "type" : "object",
        "required" : [ "order", "name" ],
        "properties" : {
          "order" : {
            "description" : "A numerical representation of the order of the floor.",
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "description" : "The name for the floor.",
            "type" : "string"
          }
        }
      },
      "Invitee" : {
        "description" : "Invitee model",
        "type" : "object",
        "required" : [ "user" ],
        "properties" : {
          "user" : {
            "description" : "Ref: User. The parameter to filter event records by the invitees.",
            "type" : "string",
            "format" : "objectid"
          },
          "response" : {
            "description" : "The response of the invitee.",
            "type" : "string",
            "enum" : [ "ACCEPTED", "REJECTED" ]
          },
          "date" : {
            "description" : "The timestamp for when the user has been responded.",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      },
      "RFPItem" : {
        "description" : "RFP Item model",
        "type" : "object",
        "properties" : {
          "space" : {
            "description" : "Ref: Space. The space where the service should apply to.",
            "type" : "string",
            "format" : "objectid"
          },
          "asset" : {
            "description" : "Ref: Asset. The asset where the service should apply to.",
            "type" : "string",
            "format" : "objectid"
          },
          "standard" : {
            "description" : "Ref: Service Standard. The service standard to apply to the item, if applicable.",
            "type" : "string",
            "format" : "objectid"
          },
          "scopes" : {
            "description" : "The scope of the service being requested.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RFPItemScope"
            }
          },
          "responseLevel" : {
            "description" : "The required response level for the item (in minutes).",
            "type" : "integer",
            "format" : "int32"
          },
          "completionLevel" : {
            "description" : "The required completion level for the item (in minutes).",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "RFPItemScope" : {
        "description" : "RFP Item Scope model",
        "type" : "object",
        "required" : [ "scope" ],
        "properties" : {
          "scope" : {
            "description" : "The service scope of the item.",
            "type" : "string"
          },
          "frequency" : {
            "description" : "The frequency of service (in minutes).",
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }
      },
      "RolePermission" : {
        "description" : "Role model",
        "type" : "object",
        "required" : [ "resource", "permissions" ],
        "properties" : {
          "resource" : {
            "description" : "Ref: Resource. The resource to set permissions for.",
            "type" : "string",
            "format" : "objectid"
          },
          "permissions" : {
            "description" : "The permissions or access level to set for the resource.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "READ", "CREATE", "UPDATE", "DELETE", "STATUSUPDATE" ]
            }
          }
        }
      },
      "StandardComplianceService" : {
        "description" : "Standard Compliance Service model",
        "type" : "object",
        "required" : [ "name", "frequency" ],
        "properties" : {
          "name" : {
            "description" : "The name for the service or item being serviced.",
            "type" : "string"
          },
          "description" : {
            "description" : "The description for the service to be done.",
            "type" : "string"
          },
          "frequency" : {
            "description" : "The frequency of service (in minutes).",
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "SupplierFilter" : {
        "description" : "Supplier Filter model",
        "type" : "object",
        "properties" : {
          "isVerifiedOnly" : {
            "description" : "Include verified suppliers only.",
            "type" : "boolean",
            "default" : false
          },
          "size" : {
            "description" : "Filter suppliers by their company size.",
            "type" : "integer",
            "format" : "int32"
          },
          "invitees" : {
            "description" : "Emails of suppliers to invite to bid on the RFP if the supplier isn't in the system yet.",
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "email"
            }
          }
        }
      },
      "AccessQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Access"
              }
            }
          }
        } ]
      },
      "ActivityQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Activities"
              }
            }
          }
        } ]
      },
      "AssetQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Asset"
              }
            }
          }
        } ]
      },
      "AssetClassQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AssetClass"
              }
            }
          }
        } ]
      },
      "AuditQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Audit"
              }
            }
          }
        } ]
      },
      "BatchQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Batch"
              }
            }
          }
        } ]
      },
      "BatchJobQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/BatchJob"
              }
            }
          }
        } ]
      },
      "BudgetQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Budget"
              }
            }
          }
        } ]
      },
      "BudgetTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/BudgetType"
              }
            }
          }
        } ]
      },
      "BuildingQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Building"
              }
            }
          }
        } ]
      },
      "CompanySizeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CompanySize"
              }
            }
          }
        } ]
      },
      "ContractQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Contract"
              }
            }
          }
        } ]
      },
      "ContractServiceQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ContractService"
              }
            }
          }
        } ]
      },
      "ContractSubServiceQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ContractSubService"
              }
            }
          }
        } ]
      },
      "CountryQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Country"
              }
            }
          }
        } ]
      },
      "DistributionQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Distribution"
              }
            }
          }
        } ]
      },
      "EntityQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Entity"
              }
            }
          }
        } ]
      },
      "EventQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Event"
              }
            }
          }
        } ]
      },
      "EventTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventType"
              }
            }
          }
        } ]
      },
      "FileQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/File"
              }
            }
          }
        } ]
      },
      "InspectionQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Inspection"
              }
            }
          }
        } ]
      },
      "InspectionTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/InspectionType"
              }
            }
          }
        } ]
      },
      "IssueQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Issue"
              }
            }
          }
        } ]
      },
      "ListingQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Listing"
              }
            }
          }
        } ]
      },
      "ListingTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ListingType"
              }
            }
          }
        } ]
      },
      "NoticeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Notice"
              }
            }
          }
        } ]
      },
      "NoticeTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/NoticeType"
              }
            }
          }
        } ]
      },
      "NotificationQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Notification"
              }
            }
          }
        } ]
      },
      "PermitQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Permit"
              }
            }
          }
        } ]
      },
      "PermitFeeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PermitFee"
              }
            }
          }
        } ]
      },
      "PermitTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PermitType"
              }
            }
          }
        } ]
      },
      "ProjectQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ProjectTask"
              }
            }
          }
        } ]
      },
      "ProjectTaskQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ProjectTask"
              }
            }
          }
        } ]
      },
      "ProposalQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Proposal"
              }
            }
          }
        } ]
      },
      "ProposalServiceQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ProposalService"
              }
            }
          }
        } ]
      },
      "ProposalSubServiceQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ProposalSubService"
              }
            }
          }
        } ]
      },
      "ResourceQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Resource"
              }
            }
          }
        } ]
      },
      "RFPQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/RFP"
              }
            }
          }
        } ]
      },
      "RFPServiceQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/RFPService"
              }
            }
          }
        } ]
      },
      "RFPSubServiceQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/RFPSubService"
              }
            }
          }
        } ]
      },
      "RoleQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Role"
              }
            }
          }
        } ]
      },
      "ScopeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Scope"
              }
            }
          }
        } ]
      },
      "ServiceStandardQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ServiceStandard"
              }
            }
          }
        } ]
      },
      "ServiceTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ServiceType"
              }
            }
          }
        } ]
      },
      "SnagQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Snag"
              }
            }
          }
        } ]
      },
      "SnagTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SnagType"
              }
            }
          }
        } ]
      },
      "SpaceQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Space"
              }
            }
          }
        } ]
      },
      "SpaceTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SpaceType"
              }
            }
          }
        } ]
      },
      "SpacialTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SpacialType"
              }
            }
          }
        } ]
      },
      "StandardComplianceQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/StandardCompliance"
              }
            }
          }
        } ]
      },
      "StateQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/State"
              }
            }
          }
        } ]
      },
      "SystemLogQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SystemLog"
              }
            }
          }
        } ]
      },
      "TaskTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TaskType"
              }
            }
          }
        } ]
      },
      "TicketQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Ticket"
              }
            }
          }
        } ]
      },
      "TicketTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TicketType"
              }
            }
          }
        } ]
      },
      "UserQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        } ]
      },
      "UtilityQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Utility"
              }
            }
          }
        } ]
      },
      "UtilityTypeQueryResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/QueryResponse"
        }, {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/UtilityType"
              }
            }
          }
        } ]
      },
      "QueryResponse" : {
        "description" : "Generic response schema for queries or search",
        "type" : "object",
        "required" : [ "totalDocs", "totalPages", "docsPerPage", "currentPage", "data" ],
        "properties" : {
          "totalDocs" : {
            "description" : "The total number of records or documents returned by the query",
            "type" : "integer",
            "default" : 0,
            "readOnly" : true
          },
          "totalPages" : {
            "description" : "The total number of pages returned by the query",
            "type" : "integer",
            "default" : 0,
            "readOnly" : true
          },
          "currentPage" : {
            "description" : "The current page/cursor when navigating the query results",
            "type" : "integer",
            "default" : 1,
            "readOnly" : true
          },
          "docsPerPage" : {
            "description" : "The limit, size or number of documents returned per page by the query. Can be controlled using the *docsPerPage* query parameter",
            "type" : "integer",
            "default" : 100,
            "readOnly" : true
          },
          "data" : {
            "type" : "array",
            "items" : {
              "default" : [ ]
            }
          }
        }
      },
      "GenericResponse" : {
        "description" : "Generic response message",
        "type" : "object",
        "required" : [ "message" ],
        "properties" : {
          "message" : {
            "description" : "A descriptive message for the response",
            "type" : "string"
          }
        }
      },
      "ErrorResponse" : {
        "description" : "Error Response model",
        "type" : "object",
        "required" : [ "code", "type", "message", "data" ],
        "properties" : {
          "code" : {
            "description" : "The error or response code",
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "description" : "The error name or type",
            "type" : "string"
          },
          "message" : {
            "description" : "A high level descriptive message for the error",
            "type" : "string"
          },
          "data" : {
            "description" : "Detailed description of the errors in the request",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The error name or type",
            "type" : "string",
            "default" : ""
          },
          "field" : {
            "description" : "The name of the field with the error",
            "type" : "string",
            "default" : ""
          },
          "message" : {
            "description" : "The detailed error message",
            "type" : "string",
            "default" : ""
          }
        }
      }
    },
    "responses" : {
      "Deleted" : {
        "description" : "Successfully deleted resource",
        "content" : {
          "default" : {
            "schema" : {
              "$ref" : "#/components/schemas/GenericResponse"
            }
          }
        }
      },
      "BadRequestError" : {
        "description" : "Invalid input or validation error",
        "content" : {
          "default" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "ConflictError" : {
        "description" : "Unique constraint validation error",
        "content" : {
          "default" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "InvalidCredentialsError" : {
        "description" : "Authentication has failed",
        "content" : {
          "default" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotAuthorizedError" : {
        "description" : "Method is not allowed or access has been denied",
        "content" : {
          "default" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "ResourceNotFoundError" : {
        "description" : "Resource not found error",
        "content" : {
          "default" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "InternalError" : {
        "description" : "Unexpected Error",
        "content" : {
          "default" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}