openapi: 3.0.0
info:
  description: |
    This is the simple HKGP API. 
  version: "1.0.0"
  title: HKGP
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: dickensdjj@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/hkgp/hkhq_api/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/hkgp/HKGP/1.0.0
  - description: HKGP Product API
    url: 'http://api.production.3333hk.com/v1/production'
  - description: HKGP SandBox API
    url: 'http://api.3333hk.com/v1/sandbox'
tags:
  - name: category
    description: Access to category
  - name: customer
    description: Access to customer
  - name: manufacturer
    description: Access to manufacturer
  - name: admin
    description: Access to admin
  - name: productType
    description: Access to product type
  - name: product
    description: Access to product
  - name: role
    description: Access to role
  - name: log
    description: Access to log
  - name: ajax
    description: any ajax related request
paths:
  # Category Section
  /category:
    post:
      tags:
        - category
      summary: Add a new category
      operationId: addCategory
      requestBody:
       $ref: '#/components/requestBodies/Category'
      responses:
        '200':
          description: Success
    get:
      tags:
        - category
      summary: retrieve a list of category
      operationId: getCategories
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  '/category/{categoryId}':
    get:
      tags:
        - category
      operationId: getCategoryWithId
      summary: Get a category information with given Id
      parameters: 
        - name: categoryId
          in: path
          description: Category Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid Id supplied
        '404':
          description: Category not Found
    put:
      tags:
        - category
      operationId: updateCategory
      summary: update a category with the specific Id
      parameters: 
        - name: categoryId
          in: path
          description: Category Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Category'
      responses:
        '200':
          description: success
        '405':
          description: Invalid input
    delete:
      tags:
        - category
      operationId: deleteCategory
      summary: Delete a category
      parameters: 
        - name: categoryId
          in: path
          description: Category Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid Id supplied
        '404':
          description: Category not found
  '/category/{categoryId}/assignProducts':
    post:
      tags:
        - category
      operationId: assignProducts
      summary: assign a list of products to category
      parameters: 
          - name: categoryId
            in: path
            description: Category Id
            required: true
            schema:
              type: integer
              format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: success
  
  # Customer Section
  /customer:
    post:
      tags:
        - customer
      summary: create new customer
      operationId: addCustomer
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      responses:
        '200':
          description: Ok!
    get:
      tags:
        - customer
      summary: get a list of customer
      operationId: getCustomers
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  '/customer/{customerId}':
    put:
      tags:
        - customer
      summary: update an existing customer
      operationId: updateCustomer
      parameters: 
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      responses:
        '200':
          description: Ok!
    get:
      tags:
        - customer
      summary: Get a customer information with Id
      operationId: getCustomerWithId
      parameters: 
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    delete:
      tags:
        - customer
      summary: Delete a customer information with Id
      operationId: deleteCustomerWithId
      parameters: 
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
  
  # Manufacturer Section
  /manufacturer:
    get:
      tags:
        - manufacturer
      summary: get a list of manufacturer
      operationId: getManufacturers
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Manufacturer'
    post:
      tags:
        - manufacturer
      summary: create a new manufacturer
      operationId: addManufacturer
      requestBody:
        $ref: '#/components/requestBodies/Manufacturer'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manufacturer'
  '/manufacturer/{manufacturerId}':
    get:
      tags:
        - manufacturer
      summary: Get a manufacturer information with the specific Id.
      operationId: getManufacturer
      parameters:
        - name: manufacturerId
          in: path
          required: true
          description: A manufacturer Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manufacturer'
    put:
      tags:
        - manufacturer
      summary: update the manufacturer information with specific Id
      operationId: updateManufacturer
      parameters:
        - name: manufacturerId
          in: path
          required: true
          description: A manufacturer Id
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Manufacturer'
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manufacturer'
    delete:
      tags:
        - manufacturer
      summary: Delete a manufacturer
      operationId: deleteManufacturer
      parameters:
        - name: manufacturerId
          in: path
          required: true
          description: A manufacturer Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
      
  
  # ProductType Section
  /productionType:
    get:
      tags:
        - productType
      summary: get a list of product type
      operationId: getProductTypes
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductType'
    post:
      tags:
        - productType
      summary: create a new product type
      operationId: addProductType
      requestBody:
        $ref: '#/components/requestBodies/ProductType'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'
  '/productionType/{productTypeId}':
    get:
      tags:
        - productType
      summary: Get a product type information with the specific Id.
      operationId: getProductType
      parameters:
        - name: productTypeId
          in: path
          required: true
          description: A product type Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'
    post:
      tags:
        - productType
      summary: update the product type information with specific Id
      operationId: updateProductType
      parameters:
        - name: productTypeId
          in: path
          required: true
          description: A product type Id
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/ProductType'
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'
    delete:
      tags:
        - productType
      summary: Delete a product type
      operationId: deleteProductType
      parameters:
        - name: productTypeId
          in: path
          required: true
          description: A product type Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
  
  # Product Section
  /production:
    get:
      tags:
        - product
      summary: get a list of product
      operationId: getProducts
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - product
      summary: create a new product
      operationId: addProduct
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  '/production/{productId}':
    get:
      tags:
        - product
      summary: Get a product information with the specific Id.
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          required: true
          description: A product Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
        - product
      summary: update the product information with specific Id
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          required: true
          description: A product Id
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
        - product
      summary: Delete a product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          required: true
          description: A product Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
  
  # Role Section
  /role:
    get:
      tags:
        - role
      summary: get a list of role
      operationId: getRoles
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  '/role/{roleId}':
    get:
      tags:
        - role
      summary: Get a role information with the specific Id.
      operationId: getRole
      parameters:
        - name: roleId
          in: path
          required: true
          description: A role Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    
  # Admin Section
  /admin:
    get:
      tags:
        - admin
      summary: get a list of admin
      operationId: getAdmins
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'
    post:
      tags:
        - admin
      summary: create a new admin
      operationId: addAdmin
      requestBody:
        $ref: '#/components/requestBodies/Admin'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
  '/admin/{adminId}':
    get:
      tags:
        - admin
      summary: Get a admin information with the specific Id.
      operationId: getAdmin
      parameters:
        - name: adminId
          in: path
          required: true
          description: A admin Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
    put:
      tags:
        - admin
      summary: update the admin information with specific Id
      operationId: updateAdmin
      parameters:
        - name: adminId
          in: path
          required: true
          description: A admin Id
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Admin'
      responses:
        '200':
          description: Ok!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
    delete:
      tags:
        - admin
      summary: Delete a admin
      operationId: deleteAdmin
      parameters:
        - name: adminId
          in: path
          required: true
          description: A admin Id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
  
  # Ajax Section
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname:
          type: string
        dob:
          type: string
          format: date-time
        billing_address:
          type: string
        shipping_address:
          type: string
        personal_phone:
          type: string
        business_phone:
          type: string
        position:
          type: integer
        fax:
          type: string
        email:
          type: string
        child_id:
          type: array
          items:
            type: integer
      xml:
        name: Customer
      example:
        id: 1
        first_name: 路飞
        last_name: 王
        dob: 1900-01-01
        position: 0
        billing_address: 中国广东省广州市白云区广顺花园
        shipping_address: 中国广东省广州市白云区广顺花园
        fax: 800-8208820
        email: luffy@example.com
        child_id: [1,2,3]
        business_phone: +8613600000000
        personal_phone: +61450000000
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        code:
          type: string
        desc:
          type: string
        child_id:
          type: array
          items:
            type: string
      xml:
        name: Category
      example:
        id: 1
        name: 肺癌
        code: lung-cancer
        desc: 多吸二手烟
        child_id: [2, 3, 4]
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        sku:
          type: string
        trade_name_english:
          type: string
        trade_name_chinese:
          type: string
        curer_disease:
          type: array
          items:
            type: string
        rrp:
          type: number
          format: double
          description: Recommended Retail Price
          minimum: 0
        price:
          type: number
          format: double
          description: Actual Sales Price
          minimum: 0
        originate_flag:
          type: boolean
        cold_storage_flag:
          type: boolean
        cold_storage_temperature:
          type: string
        storage_days:
          type: integer
          format: int64
        stock_on_hand:
          type: integer
          format: int64
        notify_low_stock:
          type: integer
          format: int64
        low_stock-date:
          type: string
          format: date
        stock_status:
          type: integer
          format: int64
          description: 0=>'out-of-stock', 1=>'in-stock'
        allow_manage_stock:
          type: boolean
        product_type:
          type: integer
          format: int64
        category:
          type: integer
          format: int64
        manufacturer:
          type: integer
          format: int64
          description: originated from
        purchase_from:
          type: integer
          format: int64
          description: actual purchase from
      xml:
        name: Product
      example:
        id: 1 
        code: panadore-australia
        sku: 'p-a-1'
        trade_name_english: panadore
        trade_name_chinese: 潘纳多
        cure_disease: ['头痛', '发烧']
        rrp: 100
        price: 50
        originate_flag: true
        cold_storage_flag: true
        cold_storage_temperature: '低于25'
        storage_days: 180
        stock_on_hand: 50
        notify_low_stock: 10
        stock_status: 1
        low_stock_date: 2019-02-10
        allow_manage_stock: false
        product_type: 1
        category_type: 1
        manufacturer: 1
        purchase_from: 1
    Manufacturer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        desc:
          type: string
        name:
          type: string
        country:
          type: integer
      xml:
        name: Manufacturer
      example:
        id: 1
        desc: 英国稀有制药厂
        name: 阿斯利康
        country: 0
    ProductType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: integer
          format: int64
          description: 0=>'针剂'; 1=>'药片'
        measurement:
          type: integer
          format: int64
          description: 0=>'毫升'; 1=>'片'
        unit:
          type: integer
          format: int64
      xml:
        name: ProductType
      example:
        id: 1
        name: 0
        measurement: 0
        unit: 100
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        desc:
          type: string
      xml:
        name: Role
      example:
        id: 1
        name: 管理员
        desc: 管理员最大, 啥都能干.
    Admin:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        role:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
    AdminLog:
      type: object
      properties:
        id:
          type: integer
          format: int64
        log_type:
          type: integer
          format: int64
          description: 0=>'order', 1=>'product'; 2=>'customer'
        created_time:
          type: string
          format: date-time
        admin:
          type: object
          properties:
            id: 
              type: integer
              format: int64
            name:
              type: string
            role:
              type: string
      xml:
        name: AdminLog
      example:
        id: 1
        log_type: 订单
        created_time: 2019-01-01 17:00:00
        admin:
          id: 1
          name: 王路飞
          role: 管理员
    ProductLog:
      type: object
      properties:
        id:
          type: integer
          format: int64
        log_type:
          type: string
          description: 0=>'C', 1='U', 2=>"D"
        descripition:
          type: string
        created_time:
          type: string
          format: date-time
        admin:
          type: object
          properties:
            id: 
              type: integer
              format: int64
            name:
              type: string
            role:
              type: string
      xml:
        name: OrderLog
      example:
        id: 1
        log_type: 创建
        description: json format of new created product
        created_time: 2019-01-01 19:00:00
        admin:
          id: 1
          name: 王路飞
          role: 管理员
    CustomerLog:
      type: object
      properties:
        id:
          type: integer
          format: int64
        log_type:
          type: string
          description: 0=>'C', 1='U', 2=>"D"
        descripition:
          type: string
        created_time:
          type: string
          format: date-time
        admin:
          type: object
          properties:
            id: 
              type: integer
              format: int64
            name:
              type: string
            role:
              type: string
      xml:
        name: CustomerLog
      example:
        id: 1
        log_type: 创建
        description: json format of new created customer
        created_time: 2019-01-01 19:00:00
        admin:
          id: 1
          name: 王路飞
          role: 管理员
    OrderLog:
      type: object
      properties:
        id:
          type: integer
          format: int64
        log_type:
          type: string
          description: 0=>'C', 1='U', 2=>"D"
        descripition:
          type: string
        created_time:
          type: string
          format: date-time
        admin:
          type: object
          properties:
            id: 
              type: integer
              format: int64
            name:
              type: string
            role:
              type: string
      xml:
        name: OrderLog
      example:
        id: 1
        log_type: 创建
        description: json format of new created order
        created_time: 2019-01-01 19:00:00
        admin:
          id: 1
          name: 王路飞
          role: 管理员
  requestBodies:
    Category:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
      description: Cateogory object that needs to be added to the HKGP
      required: true
    Customer:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
      description: Customer object that needs to be added to the HKGP
      required: true
    Product:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
      description: Product object that needs to be added to the HKGP
      required: true
    Manufacturer:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Manufacturer'
    ProductType:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductType'
    Admin:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Admin'