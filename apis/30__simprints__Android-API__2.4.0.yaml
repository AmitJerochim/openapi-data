openapi: 3.0.0
info:
  title: Android API
  version: "2.4.0"
  description: Backend API for Simprints ID android client.
servers:
- url: "https://{environment}.simprints-apis.com/androidapi/{version}"
  variables:
    environment:
      description: Environment
      enum:
      - prod
      - dev
      default: dev
    version:
      description: Major version of the API
      enum:
      - v2
      default: v2
tags:
- name: Authentication
  description: Operations related to authentication.
- name: Projects
  description: Operations related to projects.
- name: Events
  description: Operations related to event.
- name: Firmwares
  description: Operations related to firmware.
- name: Patient records
  description: "[DEPRECATED] Use operations from Events."
- name: Analytics
  description: Operations related to analytics.
- name: Miscellaneous
  description: Other operations.
- name: Testing
  description: Operations only available in development environments for testing purposes..
paths:
  /projects/{projectId}/users/{userId}/authentication-data:
    get:
      tags:
      - Authentication
      summary: Get the data required to perform an authentication.
      description: Get the data required to perform an authentication, ie a new nonce and the public key to use to encrypt the project secret.
      operationId: getAuthenticationData
      security:
      - ApiKey: []
      parameters:
      - $ref: '#/components/parameters/ProjectIdPathParam'
      - $ref: '#/components/parameters/UserIdPathParam'
      responses:
        201:
          description: The authentication data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationData'
        401:
          description: Missing or invalid API key.
        404:
          description: Non existing project.
  /projects/{projectId}/users/{userId}/authenticate:
    post:
      tags:
      - Authentication
      summary: Authenticate a user.
      description: Authenticate a user. The custom firebase token within the result should be used by the client to `signInWithCustomToken` with FirebaseAuth, in order to obtain an access token for other operations of this API.
      operationId: authenticate
      security:
      - ApiKey: []
      parameters:
      - $ref: '#/components/parameters/ProjectIdPathParam'
      - $ref: '#/components/parameters/UserIdPathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCustomTokensBody'
      responses:
        201:
          description: The custom firebase token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResult'
        400:
          description: Missing/invalid parameter in request body.
        401:
          description: Missing/invalid API key or missing/invalid encrypted project secret.
        404:
          description: Non existing project.
  /tokens:
    post:
      tags:
        - Authentication
        - Testing
      summary: "Get a firebase id token [TEST ENVIRONMENTS ONLY]"
      description: ""
      operationId: "getToken"
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateToken'
      responses:
        201:
          description: "The firebase id token"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          description: "The body is incorrect."
        401:
          description: "Authentication error: missing or invalid invalid ApiKey."
  /projects:
    post:
      tags:
        - Testing
        - Projects
      summary: Creates a new project [TEST ENVIRONMENTS ONLY]
      operationId: createProject
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject'
      responses:
        201:
          description: "Project successfully created."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInfoWithSecrets'
        400:
          description: "Project with given legacy id already exists."
        401:
          description: "Authentication error: missing or invalid invalid ApiKey."
  /projects/{projectId}:
    get:
      tags:
      - Projects
      summary: Get data about a project.
      operationId: getProject
      security:
      - FirebaseAuthToken: []
      parameters:
      - $ref: '#/components/parameters/ProjectIdPathParam'
      responses:
        200:
          description: The project record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to read the requested project record."
        404:
          description: Non existing project.
    delete:
      tags:
        - Projects
        - Testing
      summary: "Delete a project [TEST ENVIRONMENTS ONLY]"
      description: ""
      operationId: "deleteProject"
      security:
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/ProjectIdPathParam'
      responses:
        200:
          description: "Project deleted."
        401:
          description: "Authentication error: missing or invalid ApiKey."
        404:
          description: Non existing project.

  /projects/{projectId}/config:
    get:
      tags:
      - Projects
      summary: Retrieves the project remote configuration.
      parameters:
      - in: path
        name: projectId
        required: true
        schema:
          type: string
      operationId: getProjectConfig
      security:
      - FirebaseAuthToken: []
      responses:
        200:
          description: "Project remote configuration retrieved successfully."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectConfig'
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to get the configuration of the specified project."
        404:
          description: "Project does not exist."
  
  /projects/{projectId}/events/count:
    get:
      tags:
        - Events
      summary: "Count events."
      operationId: countEvents
      security:
        - FirebaseAuthToken: []
      parameters:
        - $ref: '#/components/parameters/ProjectIdPathParam'
        - $ref: '#/components/parameters/LabelsQueryParam'
        - $ref: '#/components/parameters/LastEventIdQueryParam'
        - $ref: '#/components/parameters/TypesQueryParam'
      responses:
        200:
          description: "The corresponding event count."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCounts'
        400:
          description: "Invalid query."
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to write patient records in the specified project."
        404:
          description: Non existing project.
          
  /projects/{projectId}/events:
    get:
      tags:
        - Events
      summary: "List events."
      operationId: listEvents
      security:
        - FirebaseAuthToken: []
      parameters:
        - $ref: '#/components/parameters/ProjectIdPathParam'
        - $ref: '#/components/parameters/LabelsQueryParam'
        - $ref: '#/components/parameters/LastEventIdQueryParam'
        - $ref: '#/components/parameters/TypesQueryParam'
      responses:
        200:
          description: "The corresponding events."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        400:
          description: "Invalid query."
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to write patient records in the specified project."
        404:
          description: Non existing project.
    post:
      tags:
      - Events
      summary: "Post events."
      operationId: postEvents
      security:
      - FirebaseAuthToken: []
      parameters:
      - $ref: '#/components/parameters/ProjectIdPathParam'
      requestBody:
        required: true
        description: "Currently only the EnrolmentRecordCreation is accepted."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Events'
      responses:
        201:
          description: "Events saved."
        400:
          description: "Invalid events."
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to write patient records in the specified project."
        404:
          description: Non existing project.
  /firmware/versions:
    get:
      tags:
      - Firmwares
      security:
        - FirebaseAuthToken: []
      description: 'Get the firmware versions.'
      operationId: getFirmwareVersions
      summary: Get the firmware versions
      parameters:
        - in: query
          name: fields
          description: "The fields that will be returned."
          schema:
            type: array
            items:
              type: string
              enum: ["chipType","version","versionURL"]
            default: ["chipType","version","versionURL"]
          style: form
          explode: false
        - in: query
          name: from-cypress
          description: "The current version of cypress."
          schema:
            type: string
            example: "1.2"
        - in: query
          name: from-stm
          description: "The current version of stm."
          schema:
            type: string
            example: "1.0"
        - in: query
          name: from-un20
          description: "The current version of un20."
          schema:
            type: string
            example: "0.9"
            
      responses:
        200:
          description: The new versions of Firmware
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/FirmwareVersions'
        400:
          description: Invalid parameters
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized."
          
  /projects/{projectId}/patients:
    post:
      tags:
      - Patient records
      summary: "Post patient creations & updates."
      operationId: postPatients
      deprecated: true
      security:
      - FirebaseAuthToken: []
      parameters:
      - $ref: '#/components/parameters/ProjectIdPathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPatientsBody'
      responses:
        200:
          description: "Patients created / updated."
        400:
          description: "Invalid patients."
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to write patient records in the specified project."
        404:
          description: Non existing project.
    get:
      tags:
      - Patient records
      summary: "Download patients."
      operationId: getPatients
      deprecated: true
      security:
      - FirebaseAuthToken: []
      parameters:
      - $ref: '#/components/parameters/ProjectIdPathParam'
      - $ref: '#/components/parameters/ModuleIdQueryParam'
      - $ref: '#/components/parameters/UserIdQueryParam'
      - $ref: '#/components/parameters/ModeQueryParam'
      - in: query
        name: lastKnownPatientUpdatedAt
        schema:
          type: integer
        description: The UNIX update time of the most recent record matching the query known by the client. No patient record creation or update pre-dating this time will be downloaded.
        example: 1528138440123
      - in: query
        name: lastKnownPatientId
        schema:
          type: string
        description: The patient ID of the most recent record matching the query known by the client.
        example: 6fcd2866-1e9a-4204-a2d5-e98ffcae5b81
      responses:
        200:
          description: The patient records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientArray'
        400:
          description: "Invalid parameters: one of the lastKnowPatient fields is present but not the other"
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to read patients records of the specified project."
        404:
          description: Non existing project.
  /projects/{projectId}/patients/count:
    get:
      tags:
      - Patient records
      summary: "Count patients."
      deprecated: true
      operationId: countPatients
      security:
      - FirebaseAuthToken: []
      parameters:
      - $ref: '#/components/parameters/ProjectIdPathParam'
      - $ref: '#/components/parameters/ModuleIdsQueryParam'
      - $ref: '#/components/parameters/UserIdQueryParam'
      - $ref: '#/components/parameters/ModeQueryParam'
      responses:
        200:
          description: The count of patients that match the specified criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PatientCount'
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to read patients records of the specified project."
        404:
          description: Non existing project.
  /projects/{projectId}/patient-operations/count:
    post:
      tags:
      - Patient records
      summary: "Count patients."
      operationId: countPatientOperations
      deprecated: true
      security:
      - FirebaseAuthToken: []
      parameters:
      - $ref: '#/components/parameters/ProjectIdPathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientGroups'
            example:
              groups:
                - whereLabels:
                  - key: "moduleId"
                    value: "module42"
                  - key: "mode"
                    value: "FACE|FINGERPRINT"
                - whereLabels:
                  - key: "moduleId"
                    value: "module314"
                  - key: "mode"
                    value: "FACE|FINGERPRINT"
                  lastKnownPatient:
                    updatedAt: 1528138440123
                    id: 6fcd2866-1e9a-4204-a2d5-e98ffcae5b81
                
                    
      responses:
        200:
          description: The patient operation counts for the specified groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientOperationCountResult'
              example:
                groups:
                  - counts:
                      create: 42
                      update: 1
                      delete: 0
                  - counts:
                      create: 238
                      update: 0
                      delete: 12
        400:
          description: "Invalid request."
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to read patients records of the specified project."
        404:
          description: Non existing project.
        500:
          description: "One or more operation counts failed."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientOperationCountResults'
              example:
                groups:
                  - error: "failed to count operations in patient group"
                  - counts:
                      create: 238
                      update: 0
                      delete: 12

  /projects/{projectId}/patients/{patientId}:
    get:
      tags:
      - Patient records
      summary: "Download a patient."
      deprecated: true
      operationId: getPatient
      security:
      - FirebaseAuthToken: []
      parameters:
      - $ref: '#/components/parameters/ProjectIdPathParam'
      - in: path
        name: patientId
        schema:
          type: string
        required: true
        description: The ID of the patient record.
        example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
      responses:
        200:
          description: The patient record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to read patients records of the specified project."
        404:
          description: "The specified project does not exist or the specified patient does not exist within this project"
  /projects/{projectId}/sessions:
    post:
      tags:
      - Analytics
      summary: Upload an array of sessions
      operationId: postSessions
      security:
      - FirebaseAuthToken: []
      parameters:
      - $ref: '#/components/parameters/ProjectIdPathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionArray'
      responses:
        201:
          description: "Session(s) created."
        400:
          description: "Invalid Session data."
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to access the requested resource."
    get:
      tags:
        - Analytics
        - Testing
      summary: Get sessions for a given project [TEST ENVIRONMENTS ONLY]
      operationId: getSessions
      security:
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/ProjectIdPathParam'
      responses:
        200:
          description: "The sessions."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinimalSession'
        401:
          description: "Authentication error: missing or invalid Authorization header."
        403:
          description: "Authorization error: the authenticated user is not authorized to access the requested resource."
        404:
          description: "Project not found."
  /projects/{projectId}/sessions/count:
    get:
      tags:
        - Analytics
        - Testing
      summary: Get the number of sessions for a given project id [TEST ENVIRONMENTS ONLY]
      operationId: getSessionCounts
      security:
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/ProjectIdPathParam'
      responses:
        200:
          description: "Project successfully created."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionCount'
        401:
          description: "Authentication error: missing or invalid invalid ApiKey."
        404:
          description: Non existing project.
  /actuator/health:
    get:
      tags:
      - Miscellaneous
      summary: "Check if the service is up or not"
      description: ""
      operationId: "actuatorHealth"
      responses:
        200:
          description: "service is up"
        503:
          description: "service is down"
components:
  parameters:
    ProjectIdPathParam:
      in: path
      name: projectId
      description: The ID of a project.
      example: A1Jel8e6cN4z957zn6l9
      required: true
      schema:
        type: string
    SessionIdPathParam:
      in: path
      name: sessionId
      description: The ID of a session.
      required: true
      schema:
        type: string
    UserIdPathParam:
      in: path
      name: userId
      description: The ID of a user.
      example: Bob
      required: true
      schema:
        type: string
    LabelsQueryParam:
      in: query
      name: l_LabelKey
      description: "The set of labels that should match the different events. Several values for a label will be evaluated as an 'OR'. The labels currently supported are 'l_moduleId', 'l_attendantId', 'l_subjectId' and 'l_mode'. The intersection between attendantId and moduleId is not supported. All the labels should be prefixed by 'l_'. To pass several values for the same key, you have to repeat the key."
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true
      example: ["module1", "module2"]
      
    LastEventIdQueryParam:
      in: query
      name: lastEventId
      description: "The id of the last event down-sync."
      schema:
        type: string
        format: uuid
      example: e9257686-663f-4943-943e-09f9fdd9252b
    
    TypesQueryParam:
      in: query
      name: type
      required: true
      description: "The type of events that is queried."
      schema:
        type: array
        items:
          type: string
          enum: ["EnrolmentRecordCreation", "EnrolmentRecordDeletion", "EnrolmentRecordMove"]
      style: form
      explode: true
      
    ModuleIdQueryParam:
      in: query
      name: moduleId
      description: The ID of a module.
      example: module42
      schema:
        type: string
    ModuleIdsQueryParam:
      in: query
      name: moduleId
      schema:
        type: array
        items:
          type: string
      style: pipeDelimited
      explode: false
      description: The ID of one or several modules.
      example: ["module42", "module314"]
    UserIdQueryParam:
      in: query
      name: userId
      schema:
        type: string
      description: The ID of a user.
      example: Bob
    ModeQueryParam:
      in: query
      name: mode
      schema:
        type: array
        items: 
          $ref: '#/components/schemas/Mode'
        default: ["FINGERPRINT", "FACE"]
      style: pipeDelimited
      explode: false
      description: A biometric mode.
      example: ["FINGERPRINT", "FACE"]
  schemas:
    AuthenticationData:
      type: object
      properties:
        nonce:
          type: string
          pattern: '^[0-9a-zA-Z+/]*$'
          example: d1Vosza06Brqitg/K0Fjq8iU3S8coe0knsYaotgHo/bbWVqD52VMuXoAfvEnDtcFKMF4BIosUje/dPL9152FFw==
          description: A new nonce.
        publicKey:
          type: string
          pattern: '^[0-9a-zA-Z+/]*$'
          example: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCKP7oke2cProZ9XDHalGK+Unf8pNQ0jDlOk9Kq6B8TVgaC161qPdH/KhJauyJKLEGZtph3g0TNgzHW8Zr6PbT+J+6r1cuwUMFdsWuIxcaFKKa5KUouum9kFlJAIbKfQiX+DnKSlzHKDRlQR9rTiTSJ4ICksKsPFy8KOrdYQBoTwIDAQAB
          description: The base64 encoded bytes of the public key.
      required:
      - nonce
      - publicKey
      
    AuthenticationResult:
      type: object
      properties:
        firebaseCustomToken:
          type: string
          pattern: '^[0-9a-zA-Z+/]*$'
          description: The firebase custom token to use for sign in.
      required:
      - firebaseCustomToken
        
    BiometricReference:
      oneOf:
      - $ref: '#/components/schemas/FaceReference'
      - $ref: '#/components/schemas/FingerprintReference'
      discriminator:
        propertyName: type
        
    CreateProject:
      type: object
      description: The information required to create a project
      properties:
        name:
          type: string
          example: Cohesu Afganistan project
          description: The name of the project
        description:
          type: string
          example: This project is our first v1.0.0 rollout
          description: The description of the project
        creator:
          type: string
          example: Tristram aka 'Billy the boss'
          description: The creator of the project
        legacyId:
          type: string
          example: f50cb52ed5c934cf214b2bdf8eeeaccd
          description: The legacy id of the project
      required:
        - name
        - description
        - creator
        
    CreateToken:
      type: object
      description: The information required to create a token
      properties:
        projectId:
          type: string
          example: projectA
          description: The project id
        userId:
          type: string
          example: userA
          description: The user id
        validCertificate:
          type: boolean
          example: true
          description: The value of the validCertificate claim
        validNonce:
          type: boolean
          example: true
          description: The value of the validNonce claim
        validApkCertificateDigest:
          type: boolean
          example: true
          description: The value of the validApkCertificateDigest claim
        basicIntegrity:
          type: boolean
          example: true
          description: The value of the basicIntegrity claim
        ctsProfileMatch:
          type: boolean
          example: true
          description: The value of the ctsProfileMatch claim
      required:
        - projectId
        - userId
        - validCertificate
        - validNonce
        - validApkCertificateDigest
        - basicIntegrity
        - ctsProfileMatch
        
    EnrolmentRecordCreation:
      type: object
      description: "It represents the creation of an enrolment record."
      properties:
        type: 
          type: string
          description: The type of event.
          enum: ["EnrolmentRecordCreation"]
        subjectId:
          type: string
          format: uuid
          description: The id of the enrolment record
          example: d13da5df-1918-4131-b7ea-29a99eb959a5
        projectId:
          type: string
          description: The ID of the project the enrolment record belongs to.
          pattern: "^[0-9a-zA-Z]{20}$"
          example: TEST1p0Y0AHhOtfXfEzs
        moduleId:
          type: string
          description: The ID of the module the enrolment record belongs to.
          example: module42
          minLength: 1
        attendantId:
          type: string
          description: The ID of the user who enroled the record.
          example: Bob
          minLength: 1
        biometricReferences:
          type: array
          description: The list of biometric references for this enrolment record.
          minItems: 1
          items:
            $ref: '#/components/schemas/BiometricReference'
      required:
        - type
        - subjectId
        - projectId
        - moduleId
        - attendantId
        - biometricReferences
    
    EnrolmentRecordDeletion:
      type: object
      description: "It represents the deletion of an enrolment record."
      properties:
        type: 
          type: string
          description: The type of event.
          enum: ["EnrolmentRecordDeletion"]
        subjectId:
          type: string
          format: uuid
          description: "The subject id of the record that has been deleted."
          example: d13da5df-1918-4131-b7ea-29a99eb959a5
        projectId:
          type: string
          description: The ID of the project the enrolment record belongs to.
          pattern: "^[0-9a-zA-Z]{20}$"
          example: TEST1p0Y0AHhOtfXfEzs
        moduleId:
          type: string
          description: The ID of the module the enrolment record belongs to.
          example: module42
          minLength: 1
        attendantId:
          type: string
          description: The ID of the user who enroled the record.
          example: Bob
          minLength: 1
      required:
        - type
        - subjectId
        - projectId
        - moduleId
        - attendantId
    
    EnrolmentRecordMove:
      type: object
      description: "It represents the move of an enrolment record from one stream of event defined by the labels in enrolmentRecordDeletion to another one defined by the labels in enrolmentRecordCreation."
      properties:
        type: 
          type: string
          description: The type of event.
          enum: ["EnrolmentRecordMove"]
        enrolmentRecordCreation:
          $ref: '#/components/schemas/EnrolmentRecordCreation'
        enrolmentRecordDeletion:
          $ref: '#/components/schemas/EnrolmentRecordDeletion'
      required:
        - type
        - enrolmentRecordCreation
        - enrolmentRecordDeletion
    
    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The id of the event.
          example: "e9257686-663f-4943-943e-09f9fdd9252b"
        labels:
          type: object
          description: The labels of this event. All the labels can be used to retrieve specific events later.
          additionalProperties:
            type: array
            items:
              type: string
          example: {
            "moduleId": [
              "module1",
              "module2"
            ],
            "projectId": [
              "projectId"
            ],
            "attendantId": [
              "user1"
            ],
            "mode": [
              "FINGERPRINT",
              "FACE"
            ],
            "subjectId": [
              "2d6b446d-e7a6-4665-a2ad-23c4c95f297a"
            ]
          }
        payload:
          description: The data corresponding to the type of event.
          oneOf:
            - $ref: '#/components/schemas/EnrolmentRecordCreation'
            - $ref: '#/components/schemas/EnrolmentRecordDeletion'
            - $ref: '#/components/schemas/EnrolmentRecordMove'
          discriminator: 
            propertyName: type
          example: {
              "type": "EnrolmentRecordCreation",
              "subjectId": "2d6b446d-e7a6-4665-a2ad-23c4c95f297a",
              "projectId": "projectId",
              "attendantId": "user1",
              "moduleId": "module1",
              "biometricReferences": [
                {
                  "type": "FINGERPRINT",
                  "metadata": {
                    "vero": "VERO_2" 
                  },
                  "templates": [
                    {
                      "template": "Rk1SACAyMAAAAADSAAABLAGQAMUAxQEAABBfHoCoAE5iAECVAHFnAEBBAIx7AEBLANd7AECyANrRAECRANvUAEBgAOTUAECDAO/HAIBfAPVVAIBRAPZ4AECbAPvHAEC7AP5RAEBuAQFQAEB7AQJKAEBhAQRiAIBEAQeqAEA+ARPQAECMARZHAEB3ARxRAECrASpRAEBmAStiAECTATJUAEBiAUVsAEByAUloAECFAUldAIA0AUpoAECUAUxfAECRAWNzAEB7AWp1AECKAYN9AAAA",
                      "finger": "LEFT_THUMB",
                      "quality": 82
                    }
                  ]
                },
                {
                  "type": "FACE",
                  "metadata": {
                    "SDK": "ML_KIT"
                  },
                  "templates": [
                    "template": "Rk1SACAyMAAAAADSAAABLAGQAMUAxQEAABBfHoCoAE5iAECVAHFnAEBBAIx7AEBLANd7AECyANrRAECRANvUAEBgAOTUAECDAO/HAIBfAPVVAIBRAPZ4AECbAPvHAEC7AP5RAEBuAQFQAEB7AQJKAEBhAQRiAIBEAQeqAEA+ARPQAECMARZHAEB3ARxRAECrASpRAEBmAStiAECTATJUAEBiAUVsAEByAUloAECFAUldAIA0AUpoAECUAUxfAECRAWNzAEB7AWp1AECKAYN9AAAA"
                  ]
                }
              ]
          }
      required:
        - id
        - labels
        - payload
      
    Events:
      type: object
      properties:
        events:
          type: array
          minItems: 1
          maxItems: 100
          items:
            $ref: '#/components/schemas/Event'
      required:
        - events
        
    EventCounts:
      type: array
      items:
        $ref: '#/components/schemas/EventCount'
        
    EventCount:
      type: object
      properties:
        type:
          type: string
          description: The type of event.
          enum: ["EnrolmentRecordCreation", "EnrolmentRecordDeletion", "EnrolmentRecordMove"]
        count:
          type: number
          description: The number of events.
          example: 42
      required:
        - type
        - count
      
    FaceReference:
      type: object
      properties:
        type: 
          type: string
          description: The type of biometric reference
          enum: ["FaceReference"]
        metadata:
          type: object
          additionalProperties:
            type: string
        templates:
          type: array
          items:
            $ref: '#/components/schemas/FaceTemplate'
      required:
        - type
        - templates
      
    FaceTemplate:
      type: object
      properties:
        template:
          type: string
          pattern: '^[0-9a-zA-Z+/]*$'
          description: Base64 encoded face template
          example: Rk1SACAyMAAAAADSAAABLAGQAMUAxQEAABBfHoCoAE5iAECVAHFnAEBBAIx7AEBLANd7AECyANrRAECRANvUAEBgAOTUAECDAO/HAIBfAPVVAIBRAPZ4AECbAPvHAEC7AP5RAEBuAQFQAEB7AQJKAEBhAQRiAIBEAQeqAEA+ARPQAECMARZHAEB3ARxRAECrASpRAEBmAStiAECTATJUAEBiAUVsAEByAUloAECFAUldAIA0AUpoAECUAUxfAECRAWNzAEB7AWp1AECKAYN9AAAA
      required:
        - template
    
    FingerprintReference:
      type: object
      properties:
        type: 
          type: string
          description: The type of biometric reference
          enum: ["FingerprintReference"]
        metadata:
          type: object
          additionalProperties:
            type: string
        templates:
          type: array
          items:
            $ref: '#/components/schemas/FingerprintTemplate'
      required:
        - type
        - templates
        
    FingerprintTemplate:
      type: object
      properties:
        quality:
          type: integer
          minimum: 0
          description: quality score of the fingerprint
          example: 42
        template:
          type: string
          pattern: '^[0-9a-zA-Z+/]*$'
          description: Base64 encoded fingerprint template
          example: Rk1SACAyMAAAAADSAAABLAGQAMUAxQEAABBfHoCoAE5iAECVAHFnAEBBAIx7AEBLANd7AECyANrRAECRANvUAEBgAOTUAECDAO/HAIBfAPVVAIBRAPZ4AECbAPvHAEC7AP5RAEBuAQFQAEB7AQJKAEBhAQRiAIBEAQeqAEA+ARPQAECMARZHAEB3ARxRAECrASpRAEBmAStiAECTATJUAEBiAUVsAEByAUloAECFAUldAIA0AUpoAECUAUxfAECRAWNzAEB7AWp1AECKAYN9AAAA
        finger:
          $ref: '#/components/schemas/Finger'
      required:
      - quality
      - template
      - finger
    FirmwareVersions:
      type: array
      items:
        $ref: '#/components/schemas/FirmwareVersion'
        
    FirmwareVersion:
      type: object
      properties:
        versionURL:
          type: string
          description: "The signed url to download the firmware."
          example: "https://storage.cloud.google.com/simprints-152315-firmware-versions/cypress/1.2.bin"
        version:
          type: string
          description: "The version of the chip."
          example: "1.2"
        chipType:
          type: string
          description: "The name of the chip."
          example: "cypress"
    PostCustomTokensBody:
      type: object
      properties:
        encryptedProjectSecret:
          type: string
          description: The base64 encoded encrypted bytes of the project secret.
        safetyNetAttestationResult:
          type: string
          description: The result of the android client call to the [SafetyNet Attestation API](https://developer.android.com/training/safetynet/attestation).
      required:
      - encryptedProjectSecret
      - safetyNetAttestationResult
    
    Project:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9a-zA-Z]{20}$'
          example: A1Jel8e6cN4z957zn6l9
          description: The project ID.
        name:
          type: string
          example: GreatNGO-project3-kenya
          description: The project name (short, human readable).
        description:
          type: string
          example: The third project with GreatNGO in Kenya
          description: The project description (can be longer, human readable).
        creator:
          type: string
          example: Etienne
          description: The simprinter who created this project record.
        imageBucket:
          type: string
          example: "gs://simprints-152315-images-eu"
          description: URL of the GCS bucket in which Simprints ID must upload images for this project.
      required:
      - id
      - name
      - description
      - creator
      - imageBucket
    
    ProjectConfig:
      type: object
      description: The remote configuration of a project
      additionalProperties: True

    ProjectInfoWithSecrets:
      type: object
      description: The information returned when creating a project
      properties:
        id:
          type: string
          description: The newly created Id for this project
        name:
          type: string
          example: Cohesu Afganistan project
          description: The name of the project
        description:
          type: string
          example: This project is our first v1.0.0 rollout
          description: The description of the project
        creator:
          type: string
          example: Tristram aka 'Billy the boss'
          description: The creator of the project
        legacyId:
          type: string
          example: f50cb52ed5c934cf214b2bdf8eeeaccd
          description: The legacy id of the project
        secret:
          type: string
          example: f50cb52ed5c934cf214b2bdf8eeeaccd
          description: The secret of the project
      required:
        - id
        - name
        - description
        - creator
        - secret
        
    Token:
      type: object
      description: The token
      properties:
        token:
          type: string
          description: The token
      required:
        - token

    PatientGroups:
      type: object
      properties:
        groups:
          description: TODO.
          type: array
          items:
            $ref: '#/components/schemas/PatientGroup'
          maxItems: 10
      required:
      - groups
      
    PatientGroup:
      type: object
      properties:
        whereLabels:
          description: TODO
          type: array
          items:
            $ref: '#/components/schemas/PatientWhereLabel'
        lastKnownPatient:
          $ref: '#/components/schemas/LastKnownPatient'
    PatientWhereLabel:
      type: object
      description: TODO.
      properties:
        key:
          type: string
          description: TODO
          enum:
            - "moduleId"
            - "userId"
            - "mode"
        value:
          type: string
          description: TODO.
          example: "module42" 
      required:
      - key
      - value
    LastKnownPatient:
      type: object
      description: TODO
      properties:
        updatedAt:
          type: integer
          description: The UNIX time of the latest update of this record, in ms.
          example: 1528138470123
        id:
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
          description: Universally Unique Identifier of the patient
      required:
      - updatedAt
      - id
    PatientOperationCountResults:
      type: object
      properties:
        groups:
          description: TODO.
          type: array
          items:
            $ref: '#/components/schemas/PatientOperationCountResult'
          maxItems: 10
      required: [groups]
    PatientOperationCountResult:
      type: object
      properties:
        counts:
            $ref: '#/components/schemas/PatientOperationCounts'
        error:
              type: string
              description: TODO
      description: Either an error or counts.
    PatientOperationCounts:
      type: object
      description: TODO.
      properties:
        create:
          type: integer
          description: Number of patient record creations.
        update:
          type: integer
          description: Number of patient record updates.
        delete:
          type: integer
          description: Number of patient record deletions.
      required: [create, update, delete]
    PostPatientsBody:
      type: object
      properties:
        patients:
          description: The patients to create / update.
          type: array
          items:
            $ref: '#/components/schemas/PostPatient'
          maxItems: 100
      required:
      - patients
    PostPatient:
      type: object
      description: A patient to create or update.
      properties:
        id:
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: 6fcd2866-1e9a-4204-a2d5-e98ffcae5b81
          description: Universally Unique Identifier of the patient
        moduleId:
          type: string
          description: The ID of the module the patient record belongs to.
          example: module42
        userId:
          type: string
          description: The ID of the user who created the patient record.
          example: Bob
        fingerprints:
          $ref: '#/components/schemas/FingerprintArray'
        faces:
          $ref: '#/components/schemas/FaceArray'
      required:
      - id
      - moduleId
      - userId
    FingerprintArray:
      type: array
      items:
        $ref: '#/components/schemas/Fingerprint'
    Fingerprint:
      properties:
        quality:
          type: integer
          minimum: 0
          description: quality score of the fingerprint
          example: 42
        template:
          type: string
          pattern: '^[0-9a-zA-Z+/]*$'
          description: Base64 encoded fingerprint template
          example: Rk1SACAyMAAAAADSAAABLAGQAMUAxQEAABBfHoCoAE5iAECVAHFnAEBBAIx7AEBLANd7AECyANrRAECRANvUAEBgAOTUAECDAO/HAIBfAPVVAIBRAPZ4AECbAPvHAEC7AP5RAEBuAQFQAEB7AQJKAEBhAQRiAIBEAQeqAEA+ARPQAECMARZHAEB3ARxRAECrASpRAEBmAStiAECTATJUAEBiAUVsAEByAUloAECFAUldAIA0AUpoAECUAUxfAECRAWNzAEB7AWp1AECKAYN9AAAA
        finger:
          $ref: '#/components/schemas/Finger'
      required:
      - quality
      - template
      - finger
    Finger:
      type: string
      description: finger
      enum:
        - "LEFT_THUMB"
        - "LEFT_INDEX_FINGER"
        - "LEFT_3RD_FINGER"
        - "LEFT_4TH_FINGER"
        - "LEFT_5TH_FINGER"
        - "RIGHT_THUMB"
        - "RIGHT_INDEX_FINGER"
        - "RIGHT_3RD_FINGER"
        - "RIGHT_4TH_FINGER"
        - "RIGHT_5TH_FINGER"
    FaceArray:
      type: array
      items:
        $ref: '#/components/schemas/Face'
    Face:
      properties:
        template:
          type: string
          pattern: '^[0-9a-zA-Z+/]*$'
          description: Base64 encoded face template
          example: ECDAO/HAIBfAPVVAIBRAPZ4AECbAPvHAEC7AP5RAEBuAQFQAEB7AQJKAEBhAQRiAIBEAQeqAEA+ARPQAECMARZHAEB3ARxRAECrASpRAEBmAStiAECTATJUAEBiAUVsAEByAUloAECFAUldAIA0AUpoAECUAUxfAECRAWNzAEB7AWp1AECKAYN9AAAA
      required:
      - template
    PatientArray:
      type: array
      items:
        $ref: '#/components/schemas/Patient'
    Patient:
      type: object
      description: A patient record.
      properties:
        id:
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: 6fcd2866-1e9a-4204-a2d5-e98ffcae5b81
          description: Universally Unique Identifier of the patient
        projectId:
          type: string
          description: The ID of the project the patient record belongs to.
          example: TEST1p0Y0AHhOtfXfEzs
        moduleId:
          type: string
          description: The ID of the module the patient record belongs to.
          example: module42
        userId:
          type: string
          description: The ID of the user who created the patient record.
          example: Bob
        createdAt:
          type: integer
          description: The UNIX time of the creation of this record, in ms
          example: 1528138440123
        updatedAt:
          type: integer
          description: The UNIX time of the latest update of this record, in ms.
          example: 1528138470123
        fingerprints:
          $ref: '#/components/schemas/FingerprintArray'
        faces:
          $ref: '#/components/schemas/FaceArray'
        deleted:
          type: boolean
          description: "If true, this patient record has been deleted from the central database."
          example: true
      required:
      - id
      - projectId
      - moduleId
      - userId
      - createdAt
      - updatedAt
    PatientCount:
      type: object
      description: A patient count.
      properties:
        projectId:
          type: string
          description: A project ID.
          example: TEST1p0Y0AHhOtfXfEzs
        moduleId:
          type: string
          description: A module ID.
          example: module42
        userId:
          type: string
          description: A user ID.
          example: Bob
        modes:
          type: array
          items:
            type: string
          description: Intersection of biometric modes.
          example: ["FINGERPRINT", "FACE"]
        count:
          type: integer
          description: The number of patients matching the project/module/user criteria.
          example: 31415
      required:
      - projectId
      - count
      - modes

    Mode:
      type: string
      description: "Mode (characteristic type + sensor type + processing mode). Currently we only use one sensor type / processing mode per characteristic type, so they are inferred from the characteristic type."
      enum:
        - "FINGERPRINT"
        - "FACE"

    SessionArray:
      type: object
      required:
      - sessions
      properties:
        sessions:
          description: The sessions to create.
          type: array
          items:
            $ref: '#/components/schemas/Session'

    Session:
      type: object
      description: "A session spans from the moment a calling application first invokes Simprints ID to start a workflow (enrolment, identification, verification) to the moment this workflow finishes. A session representation includes a list of events that happened during this session."
      required:
      - id
      - startTime
      - relativeEndTime
      - relativeUploadTime
      - appVersionName
      - libVersionName
      - language
      - device
      - events
      - databaseInfo
      properties:
        id:
          type: string
          description: "The unique identifier of the session."
          example: "68f4df73-d285-40e2-bec8-6c09408fa330"
        startTime:
          type: integer
          format: int64
          description: "The standard wall clock time (expressed as milliseconds since the epoch) of the Android device when the session started."
        relativeEndTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start and the end of the session."
        relativeUploadTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session, and the moment the HTTP request to upload it was performed. Used to estimate the clock skew between the time of the Android device and the time of the server."
        appVersionName:
          type: string
          description: "The version of Simprints ID."
          example: "2017.4.2"
        libVersionName:
          type: string
          description: "The version of LibSimprints."
        analyticsId:
          type: string
          description: "A correlation ID for analytics."
        language:
          type: string
          description: "The language used for Simprints ID. Should be a valid IETF BCP 47 language tag."
        device:
          $ref: '#/components/schemas/Device'
        databaseInfo:
          $ref: '#/components/schemas/DatabaseInfo'
        location:
          $ref: '#/components/schemas/Location'
        events:
          $ref: '#/components/schemas/AnalyticsEventArray'

    MinimalSession:
      type: object
      description: "A session with just the ID and timestamps"
      required:
        - id
        - relativeUploadTime
        - startTime
      properties:
        id:
          type: string
          description: "The unique identifier of the session."
          example: "68f4df73-d285-40e2-bec8-6c09408fa330"
        startTime:
          type: string
          format: date
          description: "The standard wall clock time (expressed as milliseconds since the epoch) of the Android device when the session started."
        relativeUploadTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session, and the moment the HTTP request to upload it was performed. Used to estimate the clock skew between the time of the Android device and the time of the server."
    SessionCount:
      type: object
      properties:
        projectId:
          type: string
          description: "The unique identifier of the project."
          example: "projectA"
        count:
          type: integer
          format: int64
          description: "The number of sessions"
          example: 42
      required:
        - projectId
        - count

    Device:
      type: object
      description: "Information about the Android device used for this session."
      required:
      - deviceId
      - androidSdkVersion
      - deviceModel
      properties:
        androidSdkVersion:
          type: string
          example: "5.1"
          description: "The version of the Android SDK running on the device."
        deviceModel:
          type: string
          example: "Samsung J5"
          description: "The model of the device."
        deviceId:
          type: string
          description: "A unique identifier of the device."

    DatabaseInfo:
      type: object
      description: "Information about the state of the device's local database at the start of this session."
      required:
      - sessionCount
      properties:
        recordCount:
          type: integer
          description: "The total number of patient records in the database."
        sessionCount:
          type: integer
          description: "The total number of session records in the database."

    Location:
      type: object
      description: "Location where this session happened."
      properties:
        latitude:
          type: number
          format: double
          description: "Latitude in decimal degrees."
        longitude:
          type: number
          format: double
          description: "Longitude in decimal degrees."
      required:
      - longitude
      - latitude

    AnalyticsEventArray:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsEvent'

    AnalyticsEvent:
      oneOf:
      - $ref: '#/components/schemas/AlertScreenEvent'
      - $ref: '#/components/schemas/ArtificialTerminationEvent'
      - $ref: '#/components/schemas/AuthenticationEvent'
      - $ref: '#/components/schemas/AuthorizationEvent'
      - $ref: '#/components/schemas/CallbackEvent'
      - $ref: '#/components/schemas/CalloutEvent'
      - $ref: '#/components/schemas/CandidateReadEvent'
      - $ref: '#/components/schemas/ConnectivitySnapshotEvent'
      - $ref: '#/components/schemas/ConsentEvent'
      - $ref: '#/components/schemas/EnrolmentEvent'
      - $ref: '#/components/schemas/FingerprintCaptureEvent'
      - $ref: '#/components/schemas/GuidSelectionEvent'
      - $ref: '#/components/schemas/IntentParsingEvent'
      - $ref: '#/components/schemas/InvalidIntentEvent'
      - $ref: '#/components/schemas/OneToOneMatchEvent'
      - $ref: '#/components/schemas/OneToManyMatchEvent'
      - $ref: '#/components/schemas/PersonCreationEvent'
      - $ref: '#/components/schemas/RefusalEvent'
      - $ref: '#/components/schemas/ScannerConnectionEvent'
      - $ref: '#/components/schemas/SuspiciousIntentEvent'
      - $ref: '#/components/schemas/Vero2InfoSnapshotEvent'
      - $ref: '#/components/schemas/ScannerFirmwareUpdateEvent'
      - $ref: '#/components/schemas/CompletionCheckEvent'

    AlertScreenEvent:
      type: object
      description: "An alert screen was displayed."
      required:
      - type
      - relativeStartTime
      - alertType
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["ALERT_SCREEN"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant the alert screen was displayed."
        alertType:
          type: string
          enum: ["DIFFERENT_PROJECT_ID", "DIFFERENT_USER_ID", "GUID_NOT_FOUND_ONLINE", "GUID_NOT_FOUND_OFFLINE", "BLUETOOTH_NOT_SUPPORTED", "LOW_BATTERY", "UNKNOWN_BLUETOOTH_ISSUE", "UNEXPECTED_ERROR", "DISCONNECTED", "MULTIPLE_PAIRED_SCANNERS", "NOT_PAIRED", "BLUETOOTH_NOT_ENABLED", "INVALID_INTENT_ACTION", "INVALID_METADATA", "INVALID_MODULE_ID", "INVALID_PROJECT_ID", "INVALID_SELECTED_ID", "INVALID_SESSION_ID", "INVALID_USER_ID", "INVALID_VERIFY_ID",
            "SAFETYNET_ERROR", "ENROLMENT_LAST_BIOMETRICS_FAILED", "INVALID_STATE_FOR_INTENT_ACTION"]

    ArtificialTerminationEvent:
      type: object
      description: "The session was terminated artificially. That is, it timed out, a crash occurred, or another session started before this session terminated normally."
      required:
      - type
      - relativeStartTime
      - reason
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["ARTIFICIAL_TERMINATION"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant it was terminated artificially."
        reason:
          type: string
          description: "The reason why this session was terminated artificially."
          enum: ["TIMED_OUT", "NEW_SESSION"]

    AuthenticationEvent:
      type: object
      description: "The user attempted to log in."
      required:
      - type
      - relativeStartTime
      - relativeEndTime
      - userInfo
      - result
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["AUTHENTICATION"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant the user pressed the Sign In button."
        relativeEndTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the log-in process finished."
        userInfo:
          allOf:
          - $ref: "#/components/schemas/UserInfo"
          - type: object
            description: "The information the user provided to log in."
        result:
          type: string
          description: "The outcome of the login process."
          enum: ["AUTHENTICATED", "BAD_CREDENTIALS", "OFFLINE", "SAFETYNET_INVALID_CLAIM", "SAFETYNET_UNAVAILABLE", "TECHNICAL_FAILURE"]

    AuthorizationEvent:
      type: object
      description: "Authorization = checking that data from the intent matches data from the currently signed in user."
      required:
      - type
      - relativeStartTime
      - result
      properties:
        type:
          type: string
          description: "The type of the event"
          enum: ["AUTHORIZATION"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant the authorization started."
        result:
          type: string
          description: "The result of the authorization."
          enum: ["AUTHORIZED", "NOT_AUTHORIZED"]
        userInfo:
          allOf:
          - $ref: "#/components/schemas/UserInfo"
          - type: object
            description: "If the authorization succeeded, identity of the signed-in user."

    UserInfo:
      type: object
      description: "Information required to uniquely identify a user of Simprints ID."
      required:
      - projectId
      - userId
      properties:
        projectId:
          type: string
          description: "Unique identifier of the project the user belongs to."
          example: "A1Jel8e6cN4z957zn6l9"
        userId:
          type: string
          description: "Identifier of the user within the project it belongs to."
          example: "Bob"

    CallbackEvent:
      type: object
      description: "Simprints ID is about to return a result to the calling application."
      required:
      - type
      - relativeStartTime
      - callback
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["CALLBACK"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant before Simprints ID serializes return in the format required by the integration."
        callback:
          $ref: '#/components/schemas/Callback'
    Callback:
      oneOf:
      - $ref: '#/components/schemas/ConfirmationCallback'
      - $ref: '#/components/schemas/EnrolmentCallback'
      - $ref: '#/components/schemas/IdentificationCallback'
      - $ref: '#/components/schemas/RefusalCallback'
      - $ref: '#/components/schemas/VerificationCallback'
      - $ref: '#/components/schemas/ErrorCallback'
    ConfirmationCallback:
      type: object
      required:
      - type
      - received
      properties:
        type:
          type: string
          description: "The type of the callback."
          enum: ["CONFIRMATION"]
        received: 
          type: boolean
          example: false
    EnrolmentCallback:
      type: object
      required:
      - type
      - guid
      properties:
        type:
          type: string
          description: "The type of the callback."
          enum: ["ENROLMENT"]
        guid: 
          type: string
          description: "GUID of the new enrolee."
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
    IdentificationCallback:
      type: object
      required:
      - type
      - sessionId
      - scores
      properties:
        type:
          type: string
          description: "The type of the callback."
          enum: ["IDENTIFICATION"]
        sessionId: 
          type: string
          description: "ID of the session."
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
        scores:
          type: array
          description: "Resulting comparison scores."
          items:
            $ref: '#/components/schemas/CallbackComparisonScore'
    RefusalCallback:
      type: object
      required:
      - type
      - reason
      - extra
      properties:
        type:
          type: string
          description: "The type of the callback."
          enum: ["REFUSAL"]
        reason: 
          type: string
          description: "Reason of the refusal."
          example: "BENEFICIARY_REFUSED"
        extra: 
          type: string
          description: "Extra information about the refusal."
          example: "666 symbol."
    VerificationCallback:
      type: object
      required:
      - type
      - score
      properties:
        type:
          type: string
          description: "The type of the callback."
          enum: ["VERIFICATION"]
        score:
          $ref: '#/components/schemas/CallbackComparisonScore'
    CallbackComparisonScore:
      type: object
      description: "Measurement of similarity between the probe and an enrolee."
      required:
        - guid
        - confidence
        - tier
      properties:
        guid: 
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
        confidence: 
          type: integer
          example: 42
        tier: 
          type: string
          enum: ["TIER_1", "TIER_2", "TIER_3", "TIER_4", "TIER_5"]
          example: "TIER_2"
    ErrorCallback:
      type: object
      required:
      - type
      - reason
      properties:
        type:
          type: string
          description: "The type of the callback."
          enum: ["ERROR"]
        reason: 
          type: string
          enum: ["DIFFERENT_PROJECT_ID_SIGNED_IN", "DIFFERENT_USER_ID_SIGNED_IN", "GUID_NOT_FOUND_ONLINE", "GUID_NOT_FOUND_OFFLINE", "UNEXPECTED_ERROR", "BLUETOOTH_NOT_SUPPORTED", "SCANNER_LOW_BATTERY", "UNKNOWN_BLUETOOTH_ISSUE", "LOGIN_NOT_COMPLETE", "ENROLMENT_LAST_BIOMETRICS_FAILED", "INVALID_INTENT_ACTION"]
          example: "DIFFERENT_PROJECT_ID_SIGNED_IN"
    CalloutEvent:
      type: object
      description: "The calling application invoked Simprints ID."
      required:
      - type
      - relativeStartTime
      - callout
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["CALLOUT"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant the calling application invoked Simprints ID."
        callout:
          $ref: '#/components/schemas/Callout'
    Callout:
      oneOf:
      - $ref: '#/components/schemas/ConfirmationCallout'
      - $ref: '#/components/schemas/EnrolmentCallout'
      - $ref: '#/components/schemas/EnrolmentLastBiometricsCallout'
      - $ref: '#/components/schemas/IdentificationCallout'
      - $ref: '#/components/schemas/VerificationCallout'
    ConfirmationCallout:
      type: object
      description: "Confirmation callout."
      required:
      - type
      - selectedGuid
      - sessionId
      properties:
        type:
          type: string
          description: "The type of the callout."
          enum: ["CONFIRMATION"]
        selectedGuid:
          type: string
          description: "Value parsed from the 'selectedGuid' intent extra."
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
        sessionId:
          type: string
          description: "Value parsed from the 'sessionId' intent extra."
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
    EnrolmentCallout:
      type: object
      description: "Enrolment callout."
      required:
      - type
      - projectId
      - userId
      - moduleId
      properties:
        type:
          type: string
          description: "The type of the callout."
          enum: ["ENROLMENT"]
        projectId:
          type: string
          description: "Value parsed from the 'projectId' intent extra."
          pattern: '^[0-9a-zA-Z]{20}$'
          example: "A1Jel8e6cN4z957zn6l9"
        userId:
          type: string
          description: "Value parsed from the 'userId' intent extra."
          example: "Bob"
        moduleId:
          type: string
          description: "Value parsed from the 'moduleId' intent extra."
          example: "module42"
        metadata:
          type: string
          description: "Value parsed from the 'metadata' intent extra."
    EnrolmentLastBiometricsCallout:
      type: object
      description: "Enrolment last biometrics callout."
      required:
      - type
      - projectId
      - userId
      - moduleId
      - sessionId
      properties:
        type:
          type: string
          description: "The type of the callout."
          enum: ["ENROLMENT_LAST_BIOMETRICS"]
        projectId:
          type: string
          description: "Value parsed from the 'projectId' intent extra."
          pattern: '^[0-9a-zA-Z]{20}$'
          example: "A1Jel8e6cN4z957zn6l9"
        userId:
          type: string
          description: "Value parsed from the 'userId' intent extra."
          example: "Bob"
        moduleId:
          type: string
          description: "Value parsed from the 'moduleId' intent extra."
          example: "module42"
        sessionId:
          type: string
          description: "Value parsed from the 'sessionId' intent extra."
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
        metadata:
          type: string
          description: "Value parsed from the 'metadata' intent extra."
    IdentificationCallout:
      type: object
      description: "Identification callout."
      required:
      - type
      - projectId
      - userId
      - moduleId
      properties:
        type:
          type: string
          description: "The type of the callout."
          enum: ["IDENTIFICATION"]
        projectId:
          type: string
          description: "Value parsed from the 'projectId' intent extra."
          pattern: '^[0-9a-zA-Z]{20}$'
          example: "A1Jel8e6cN4z957zn6l9"
        userId:
          type: string
          description: "Value parsed from the 'userId' intent extra."
          example: "Bob"
        moduleId:
          type: string
          description: "Value parsed from the 'moduleId' intent extra."
          example: "module42"
        metadata:
          type: string
          description: "Value parsed from the 'metadata' intent extra."
    VerificationCallout:
      type: object
      description: "Verification callout."
      required:
      - type
      - projectId
      - userId
      - moduleId
      - verifyGuid
      properties:
        type:
          type: string
          description: "The type of the callout."
          enum: ["VERIFICATION"]
        projectId:
          type: string
          description: "Value parsed from the 'projectId' intent extra."
          pattern: '^[0-9a-zA-Z]{20}$'
          example: "A1Jel8e6cN4z957zn6l9"
        userId:
          type: string
          description: "Value parsed from the 'userId' intent extra."
          example: "Bob"
        moduleId:
          type: string
          description: "Value parsed from the 'moduleId' intent extra."
          example: "module42"
        verifyGuid:
          type: string
          description: "Value parsed from the 'verifyGuid' intent extra."
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
        metadata:
          type: string
          description: "Value parsed from the 'metadata' intent extra."

    CandidateReadEvent:
      type: object
      description: "Simprints ID attempted to read a verification candidate in the remote database."
      required:
      - type
      - relativeStartTime
      - relativeEndTime
      - candidateId
      - localResult
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["CANDIDATE_READ"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant the read attempt started."
        relativeEndTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant the read attempt finished."
        candidateId:
          type: string
          description: "The unique identifier of the verification candidate who Simprints ID attempted to read."
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
        localResult:
          type: string
          description: "The result of the local read."
          enum: ["FOUND", "NOT_FOUND"]
        remoteResult:
          type: string
          description: "The result of the remote read. Must be null if localResult == FOUND. Can also be null if localResult == NOT_FOUND but the remote read could not be performed because the phone was offline."
          enum: ["FOUND", "NOT_FOUND"]

    ConnectivitySnapshotEvent:
      type: object
      description: "Simprints ID checked the connectivity state of the device."
      required:
      - type
      - relativeStartTime
      - networkType
      - connections
      properties:
        type:
          type: string
          description: "The type of the event"
          enum: ["CONNECTIVITY_SNAPSHOT"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant the connectivity state was checked."
        networkType:
          type: string
          description: "The type of mobile network (CDMA, EDGE, UMTS) support by the device"
        connections:
          type: array
          items:
            $ref: '#/components/schemas/Connection'

    Connection:
      type: object
      required:
      - type
      - state
      properties:
        type:
          type: string
          description: "The type of connection."
        state:
          type: string
          description: "The state of the connection."


    ConsentEvent:
      type: object
      description: "Simprints ID required the user to ask for the end-user's consent."
      required:
      - type
      - relativeStartTime
      - relativeEndTime
      - consentType
      - result
      properties:
        type:
          type: string
          description: "The type of the event"
          enum: ["CONSENT"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where the consent text and the accept/decline buttons where displayed."
        relativeEndTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where the user clicked on the accept/decline consent button or interrupted the session."
        consentType:
          type: string
          description: "The type of consent that was requested."
          enum: ["INDIVIDUAL", "PARENTAL"]
        result:
          type: string
          description: "The outcome of the consent request."
          enum: ["ACCEPTED", "DECLINED", "NO_RESPONSE"]

    EnrolmentEvent:
      type: object
      description: "An end-user was enroled using Simprints ID."
      required:
      - type
      - personId
      - relativeStartTime
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["ENROLMENT"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where the end-user's representation was saved in the local database."
        personId:
          type: string
          description: "The GUID of the newly enroled end-user."
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"

    FingerprintCaptureEvent:
      type: object
      description: "The user attempted to capture a fingerprint of the end-user."
      required:
      - type
      - relativeStartTime
      - relativeEndTime
      - id
      - finger
      - qualityThreshold
      - result
      properties:
        type:
          type: string
          description: "The type of event."
          enum: ["FINGERPRINT_CAPTURE"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where the scan button was pressed."
        relativeEndTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where the capture finished."
        id:
          type: string
          description: "The identifier of this capture event, used to refer to it in other events."
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        finger:
          type: string
          description: "The finger that the user attempted to capture."
          enum: ["LEFT_THUMB", "LEFT_INDEX_FINGER", "LEFT_3RD_FINGER", "LEFT_4TH_FINGER", "LEFT_5TH_FINGER", "RIGHT_THUMB","RIGHT_INDEX_FINGER", "RIGHT_3RD_FINGER", "RIGHT_4TH_FINGER", "RIGHT_5TH_FINGER"]
        qualityThreshold:
          type: number
          description: "The quality threshold that was used to determine if the fingerprint quality was high enough."
          example: 50
        result:
          type: string
          description: "The outcome of the fingerprint capture."
          enum: ["GOOD_SCAN", "BAD_QUALITY", "NO_FINGER_DETECTED", "SKIPPED", "FAILURE_TO_ACQUIRE"]
        fingerprint:
          allOf:
          - $ref: "#/components/schemas/Fingerprint"
          - type: object
            description: "The captured fingerprint."

    GuidSelectionEvent:
      type: object
      description: "The calling application confirmed an identification result to Simprints ID."
      required:
      - type
      - relativeStartTime
      - selectedId
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["GUID_SELECTION"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant the calling app confirmed the identification result."
        selectedId:
          type: string
          description: "The unique identifier of the candidate who the calling application confirmed the principal was."
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"

    IntentParsingEvent:
      type: object
      description: "Simprints ID parsed an intent sent by the calling application."
      required:
        - type
        - relativeStartTime
        - integration
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["INTENT_PARSING"]
        relativeStartTime:
          type: integer
          format: int64
        integration:
          type: string
          description: "Which integration format was the intent of the callout following."
          enum:
            - "STANDARD"
            - "ODK"
            - "COMMCARE"
          example: "STANDARD"

    InvalidIntentEvent:
      type: object
      description: "Simprints ID found an intent sent by the calling application to be invalid."
      required:
        - type
        - action
        - relativeStartTime
      properties:
        type:
          type: string
          description: "The type of event."
          enum: ["INVALID_INTENT"]
        action:
          type: string
          description: "The intent action."
          example: 
            - "com.simprints.commcare.REGISTER"
            - "com.simprints.commcare.IDENTIFY"
            - "com.simprints.commcare.VERIFY"
            - "com.simprints.commcare.CONFIRM_IDENTITY"
            - "com.simprints.commcare.UPDATE"
            - "com.simprints.simodkadapter.REGISTER"
            - "com.simprints.simodkadapter.IDENTIFY"
            - "com.simprints.simodkadapter.VERIFY"
            - "com.simprints.simodkadapter.CONFIRM_IDENTITY"
            - "com.simprints.simodkadapter.UPDATE"
            - "com.simprints.id.REGISTER"
            - "com.simprints.id.IDENTIFY"
            - "com.simprints.id.VERIFY"
            - "com.simprints.id.CONFIRM_IDENTITY"
            - "com.simprints.id.UPDATE"
        extras:
          type: object
          additionalProperties: true # This means the value of extras can be of any type
          description: "JSON object containing all intent extras: { extra_key: extra value }."
          example:
            projectId: "A1Jel8e6cN4z957zn6l9"
            # Notice the intent is missing a mandatory userId
            moduleId: "module42!"
        relativeStartTime:
          type: integer
          format: int64

    MatchEntry:
      type: object
      description: "A confidence score for a match."
      required:
      - candidateId
      - score
      properties:
        candidateId:
          type: string
          description: "The unique identifier of a candidate the principal was matched against."
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
        score:
          type: number
          description: "The confidence score resulting from matching the principal with this candidate."
          example: 80

    OneToManyMatchEvent:
      type: object
      description: "Simprints ID attempted a 1:N match."
      required:
      - type
      - relativeStartTime
      - relativeEndTime
      - pool
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["ONE_TO_MANY_MATCH"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where matching started."
        relativeEndTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where matching finished."
        pool:
          type: object
          description: "The pool of candidates who Simprints ID attempted to match against."
          required:
          - type
          - count
          properties:
            type:
              type: string
              description: "The pool type."
              enum: ["PROJECT", "MODULE", "USER"]
            count:
              type: number
              description: "The number of candidates in the pool."
        result:
          type: array
          items:
            $ref: '#/components/schemas/MatchEntry'
          description: "If the matching was successful, the resulting match scores."

    OneToOneMatchEvent:
      type: object
      description: "Simprints ID attempted a 1:1 match."
      required:
      - type
      - relativeStartTime
      - relativeEndTime
      - candidateId
      properties:
        type:
          type: string
          description: "The type of event."
          enum: ["ONE_TO_ONE_MATCH"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where matching started."
        relativeEndTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where matching finished."
        candidateId:
          type: string
          description: "The unique identifier of the verification candidate who Simprints ID attempted to match against."
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          example: "6fcd2866-1e9a-4204-a2d5-e98ffcae5b81"
        result:
          allOf:
          - $ref: '#/components/schemas/MatchEntry'
          - type: object
            description: "If the matching was successful, the resulting match score."

    PersonCreationEvent:
      type: object
      description: "After one or more fingerprint capture, Simprints ID created a Person to enrol / verify / identify."
      required:
      - type
      - relativeStartTime
      - fingerprintCaptureIds
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["PERSON_CREATION"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where the person was created."
        fingerprintCaptureIds:
          type: array
          description: "The ids of the fingerprint capture whose fingerprints were used to create the person record."
          items:
            type: string

    RefusalEvent:
      type: object
      description: "The user submitted a refusal form."
      required:
      - type
      - relativeStartTime
      - relativeEndTime
      - reason
      - otherText
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["REFUSAL"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where the refusal form screen was displayed."
        relativeEndTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant the user submitted the refusal form."
        reason:
          type: string
          description: "The reason for the refusal."
          enum: ["BENEFICIARY_REFUSED", "REFUSED_RELIGION", "REFUSED_DATA_CONCERNS", "REFUSED_PERMISSION", "REFUSED_NOT_PRESENT", "REFUSED_YOUNG", "SCANNER_NOT_WORKING", "OTHER"]
        otherText:
          type: string
          description: "Additional text input by the user."

    ScannerConnectionEvent:
      type: object
      description: "The Android device successfully connected to a Vero."
      required:
      - type
      - relativeStartTime
      - scannerInfo
      properties:
        type:
          type: string
          description: "The type of event."
          enum: ["SCANNER_CONNECTION"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where the connection was established."
        scannerInfo:
          type: object
          description: "Information about the Vero the connection was established with."
          required:
          - scannerId
          - macAddress
          properties:
            scannerId:
              type: string
              description: "The unique identifier of the Vero."
            macAddress:
              type: string
              description: "The MAC address of the Vero."
            hardwareVersion:
              type: string
              description: "The hardware version of the Vero."
            generation:
              type: string
              enum: ["VERO_1", "VERO_2"]
              description: "The generation of the Vero."

    SuspiciousIntentEvent:
      type: object
      description: "Simprints ID found an intent sent by the calling application to be technically valid but suspicious."
      required:
        - type
        - relativeStartTime
        - unexpectedExtras
      properties:
        type:
          type: string
          description: "The type of event."
          enum: ["SUSPICIOUS_INTENT"]
        unexpectedExtras:
          type: object
          additionalProperties: true # This means the value of extras can be of any type
          description: "JSON object containing all unexpected intent extras: { extra_key: extra value }."
          example:
            mettttadata: "It looks like someone misspelled 'metadata'"
        relativeStartTime:
          type: integer
          format: int64
    
    Vero2InfoSnapshotEvent:
      type: object
      description: "Simprints ID took a snapshot of the Vero 2 scanner."
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["VERO_2_INFO_SNAPSHOT"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where the snapshot was taken."
        version:
          type: object
          description: "The different version of the chips and apis for this scanner."
          properties:
            master:
              type: integer
              format: int64
              description: "A computed number based on all the different versions."
            cypressApp:
              type: string
              description: "The version of the cypress chip."
            cypressApi:
              type: string
              description: "The version of the cypress api."
            stmApp:
              type: string
              description: "The version of the stm chip."
            stmApi:
              type: string
              description: "The version of the stm api."
            un20App:
              type: string
              description: "The version of the un20 chip."
            un20Api:
              type: string
              description: "The version of the un20 api."
          required:
            - master
            - cypressApp
            - cypressApi
            - stmApp
            - stmApi
            - un20App
            - un20Api
        battery:
          type: object
          description: "The status of the battery."
          properties:
            charge:
              type: integer
              description: "The percentage of the total charge."
            voltage:
              type: integer
              description: "The voltage of the battery in mV."
            current:
              type: integer
              description: "The current of the battery in mA, positive if charging, negative if not plugged in, 0 if plugged in at full charge."
            temperature:
              type: integer
              description: "The temperature of the battery in dK."
          required:
            - charge
            - voltage
            - current
            - temperature
      required:
        - type
        - relativeStartTime
        - version
        - battery
          
    ScannerFirmwareUpdateEvent:
      type: object
      description: "Simprints ID updated the firmware of the scanner."
      properties:
        type:
          type: string
          description: "The type of the event."
          enum: ["SCANNER_FIRMWARE_UPDATE"]
        relativeStartTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant where the update was started."
        relativeEndTime:
          type: integer
          format: int64
          description: "The number of milliseconds elapsed between the start of the session and the instant the update finished."
        chip:
          type: string
          description: "The chip that was updated."
        targetAppVersion:
          type: string
          description: "The new version of the chip after the update."
        failureReason:
          type: string
          description: "The error message if the update failed."
      required:
        - type
        - relativeStartTime
        - relativeEndTime
        - chip
        - targetAppVersion
        
    CompletionCheckEvent:
      type: object
      description: "Simprints ID performed a completion check."
      required:
        - type
        - relativeStartTime
        - completed
      properties:
        type:
          type: string
          description: "The type of event."
          enum: ["COMPLETION_CHECK"]
        relativeStartTime:
          type: integer
          format: int64
        completed:
          type: boolean
          description: "True if the user completed the Simprints ID flow."
          example: false


  securitySchemes:
    ApiKey:
      type: apiKey
      in: query
      name: key
    FirebaseAuthToken:
      type: http
      scheme: bearer
      bearerFormat: Firebase Auth JWT
      description: This API uses Firebase Auth tokens for authentication. See [FirebaseUser.getIdToken](https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseUser.html#getIdToken(boolean))