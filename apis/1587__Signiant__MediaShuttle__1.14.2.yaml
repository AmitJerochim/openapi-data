openapi: 3.0.0
info:
  title: Signiant Media Shuttle API
  description: >
    Signiant Media Shuttle provides API endpoints to use a custom web
    application to manage and transfer content using your own web application.  


    The **Media Shuttle Management API**  allows you to automate storage,
    portal, and user management and view active transfers.


    The **System-to-Person API** allows you to create upload and download links
    directly from other applications, letting you accelerate file transfers
    through Media Shuttle.


    For more information about getting started with the Media Shuttle API, read
    our [Getting Started
    Guide](http://developer.signiant.com/msapi/getting-started.html).


    ---



    Test API endpoints using your Media Shuttle subscription by generating an
    API key from your IT Administration Console in the **Developer** menu.


    <img
    src="https://assets.signiant.com/developer-signiant-com/account-menu-developer.png"
    width="400px"/>



    Once you have generated an API key, click the **Authorize** button, and
    enter your API key in the **Value** field, and click **Authorize** to enable
    the examples.
  version: "1.14.2"
security:
  - ApiKey: []
tags:
  - name: Transfers
  - name: Storage
  - name: Portals
  - name: System-to-Person
paths:
  /transfers:
    get:
      summary: List current active transfers
      description: >-
        Return a list of active transfers across all portals associated with the
        account. All requests must include `state=active`. 


        To return a list of transfers from a specific portal, include the
        `portalId` parameter in the request.
      operationId: getTransfers
      tags:
        - Transfers
      parameters:
        - name: state
          in: query
          description: All requests must include `state=active`.
          required: true
          schema:
            type: string
            enum:
              - active
        - name: portalId
          in: query
          description: >-
            Filter the response by specific portal IDs. Use additional queries
            to list transfers from more than one portal per request.
          schema:
            type: string
            format: uuid
          example: PortalId
      responses:
        '200':
          description: >-
            List of active transfers across the account or for a specific
            portal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferList'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /storage:
    get:
      summary: List storage locations
      description: >-
        Retrieves a list of all storage locations associated with the account.


        Filter the response by specifying an `installationKey` in the request to
        get details about a specific local storage location.
      operationId: listStorage
      tags:
        - Storage
      parameters:
        - name: installationKey
          in: query
          description: >-
            A local server's installation key is found in the `configuration`
            object.
          schema:
            type: string
          example: installationKey
      responses:
        '200':
          description: Storage list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageList'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new storage location
      description: >
        Create a new storage location for an account.


        Cloud storage configuration values are validated for file location
        access.


        Creating **Local Storage** generates a new Storage Server Installation
        Key. Use the installation key

        during Storage Server installation to register a server with your
        account.
      operationId: createStorage
      tags:
        - Storage
      responses:
        '200':
          description: Storage created response. For on-premises storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **404** - Configuration Property Not Found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewStorage'
            examples:
              local:
                $ref: '#/components/examples/LocalStorageExample'
              s3:
                $ref: '#/components/examples/S3StorageExample'
              azure:
                $ref: '#/components/examples/AzureStorageExample'
        description: >
          The attributes of the storage to be created. 


          All requests must include the storage `type`.


          Cloud storage requests must include a valid `configuration` object
          which varies depending on the storage vendor:


          * **Amazon S3 Storage**: 
            * `externalId`
            * `roleARN`
            * `bucket`

          * **Microsoft Azure Storage**: 
            * `accountName` 
            * `accessKey`
            * `container`
  '/storage/{storageId}':
    get:
      summary: Display information about a specific storage location
      description: >-
        Returns details about a specific storage location associated with the
        account by its `storageId`.
      operationId: getStorage
      tags:
        - Storage
      parameters:
        - name: storageId
          in: path
          description: Storage ID.
          required: true
          schema:
            type: string
            format: string
          example: storageId
      responses:
        '200':
          description: Storage.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
              examples:
                local:
                  $ref: '#/components/examples/LocalStorageExampleID'
                s3:
                  $ref: '#/components/examples/S3StorageExampleID'
                azure:
                  $ref: '#/components/examples/AzureStorageExampleID'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **404** - Storage Not Found.
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /portals:
    get:
      summary: List portals
      description: >-
        Gets a list of portals associated with the account.


        Filter the response by specifying a `url` in the request to get details
        about a specific portal location.
      operationId: getPortals
      tags:
        - Portals
      parameters:
        - name: url
          in: query
          description: >-
            Filter the response by portal `url` in the reuqest. The URL must
            include `.mediashuttle.com` as the domain suffix.
          schema:
            type: string
          example: url (e.g. portal.mediashuttle.com)
      responses:
        '200':
          description: Portal list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalList'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new portal
      description: >-
        Creates a new portal. 


        If no values are specified, a Share portal with default values is
        created.
      operationId: createPortal
      tags:
        - Portals
      responses:
        '200':
          description: Create portal response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portal'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Portal'
            examples:
              newSendPortal:
                $ref: '#/components/examples/NewSendPortal'
              newSharePortal:
                $ref: '#/components/examples/NewSharePortal'
              newSubmitPortal:
                $ref: '#/components/examples/NewSubmitPortal'
        description: The request body must contain attributes for the portal to be created.
  '/portals/{portalId}/storage/{storageId}':
    put:
      summary: Assign storage to a portal
      description: >
        Assigns an existing storage location to a portal.
        
        
        You can only assign new storage to a portal there are no other storage locations assigned to the portal. Storage can only be unassigned using the Media Shuttle IT Administration console.
        
        
        A `storageId` sent as part of the request body must match the `storageId` request parameter. The value is not required in the body.


        If **local storage** is being assigned, a repository path can be provided in the request body. If a repository path is sent as part of a request to assign Azure or AWS storage, the path will be ignored.
        
      operationId: assignStorageToPortal
      tags:
        - Portals
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
        - name: storageId
          in: path
          description: ID of the storage to assign.
          required: true
          schema:
            type: string
          example: storageId
      responses:
        '200':
          description: Storage added response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalStorage'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **404** - Portal or Storage Not found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalStorage'
        description: >-
          The path to the repository on the **local storage** server. If a value
          is not provided, the `repositoryPath` is set to either a default value
          or to a previously configured `repositoryPath`.
  '/portals/{portalId}/storage':
    get:
      summary: List the storage locations assigned to a portal
      description: Gets a list of all storage locations assigned to a portal.
      operationId: getPortalStorage
      tags:
        - Portals
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
      responses:
        '200':
          description: Storage list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalStorageList'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **404** - Portal Not Found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/portals/{portalId}/users':
    get:
      summary: Retrieve all members from a portal
      description: >-
        Return a list of all email addresses for all members from a portal. Any
        error returned during a response will appear in the response body.
      operationId: getMembersFromPortal
      tags:
        - Portals
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
      responses:
        '200':
          description: User list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalMemberRequest'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **404** - Portal Not Found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a user to a portal with a role and permissions
      description: >-
        Adds a user with a given email, role, and permissions to a portal. The
        role value can be either `Member` or `Ops`. If permissions aren't
        specified, default permissions will be populated.
      operationId: addUserToPortal
      tags:
        - Portals
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
      responses:
        '200':
          description: User added response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalMember'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **404** - Portal Not Found
            * **409** - User is already assigned to portal in any role
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalMember'
            examples:
              sendPortal:
                $ref: '#/components/examples/SendPortalUser'
              sharePortal:
                $ref: '#/components/examples/SharePortalUser'
              submitPortal:
                $ref: '#/components/examples/SubmitPortalUser'
  '/portals/{portalId}/users/{email}':
    get:
      summary: Fetch a portal member
      description: >-
        Fetch a portal member identified by their email address. The response
        body contains the permissions assigned to the portal member for this
        portal, their role, and the expiry date for the member's account if set.
      operationId: getPortalMember
      tags:
        - Portals
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
        - name: email
          in: path
          description: Email of the member to request from the portal.
          required: true
          schema:
            type: string
            format: email
          example: user@example.com
      responses:
        '200':
          description: Portal member and related permissions for the portal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalMember'
              examples:
                sendPortal:
                  $ref: '#/components/examples/SendPortalUser'
                sharePortal:
                  $ref: '#/components/examples/SharePortalUser'
                submitPortal:
                  $ref: '#/components/examples/SubmitPortalUser'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **404** - Portal or Member Not Found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update the user's role and/or permissions
      description: >-
        Updates the user's role and/or permissions. The email value is
        mandatory. The role value can be either `Member` or `Ops`. If
        permissions aren't specified, the member permissions will be unchanged.
        When an email is set as part of the request body, it is validated
        against the email in the path. This value is not required in the body.
      operationId: assignUserToPortal
      tags:
        - Portals
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
        - name: email
          in: path
          description: Email of the user to add to the portal
          required: true
          schema:
            type: string
            format: email
          example: user@example.com
      responses:
        '200':
          description: User assigned response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalMember'
              examples:
                sendPortal:
                  $ref: '#/components/examples/SendPortalUser'
                sharePortal:
                  $ref: '#/components/examples/SharePortalUser'
                submitPortal:
                  $ref: '#/components/examples/SubmitPortalUser'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **404** - Portal or Member Not Found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalMember'
            examples:
              sendPortal:
                $ref: '#/components/examples/SendPortalUser'
              sharePortal:
                $ref: '#/components/examples/SharePortalUser'
              submitPortal:
                $ref: '#/components/examples/SubmitPortalUser'
        description: 'The role, and permissions to assign to the user'
    delete:
      summary: Remove a user from a portal
      description: >
        Removes a user from a portal and returns the removed user record. 

        If the  user was not assigned to the portal, an HTTP 204 No Content
        response is returned with an empty response body. Any customized folder
        settings for that user are deleted.
      operationId: removeUserFromPortal
      tags:
        - Portals
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
        - name: email
          in: path
          description: Email of the user to remove from the portal
          required: true
          schema:
            type: string
            format: email
          example: user@example.com
      responses:
        '200':
          description: User deleted response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalMember'
        default:
          description: |
            * **204** - User Not Found
            * **401** - API Key Validation Failure
            * **404** - Portal Not Found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/portals/{portalId}/packages':
    post:
      description: |
        Create an empty file package.
      summary: |
        Create a new package
      tags:
        - System-to-Person
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
      responses:
        '201':
          description: The created package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        default:
          description: |
            * **401** - API Key Validation Failure
            * **402** - Payment Required
            * **404** - Portal Not Found
            * **500** - Internal Server Error
  '/portals/{portalId}/packages/{packageId}':
    get:
      description: |
        Returns information about a package, including all package metadata.
      summary: |
        Get package information
      operationId: getPackages
      tags:
        - System-to-Person
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
        - name: packageId
          in: path
          description: Unique package identifier
          required: true
          schema:
            type: string
          example: packageId
      responses:
        '200':
          description: The requested package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        default:
          description: |
            * **401** - API Key Validation Failure
            * **404** - Portal Not Found or Package Not Found
            * **500** - Internal Server Error
  '/portals/{portalId}/packages/{packageId}/files':
    get:
      description: |
        Returns an array of all files contained within a package.
      summary: |
        Show package contents
      tags:
        - System-to-Person
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
        - name: packageId
          description: The requested package ID
          required: true
          in: path
          schema:
            type: string
          example: packageId
      responses:
        '200':
          description: The set of files that are part of the package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileSetResponse'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **404** - Portal Not Found or Package Not Found
            * **500** - Internal Server Error
    put:
      description: |
        Add files to a package. This endpoint accepts an array of files.
      summary: |
        Add files to a package
      operationId: putPackages
      tags:
        - System-to-Person
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
        - name: packageId
          description: The package that the files are being added to
          required: true
          in: path
          schema:
            type: string
          example: packageId
      responses:
        '200':
          description: The array of files added to the package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileSetResponse'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **402** - Payment Required
            * **404** - Portal Not Found or Package Not Found
            * **409** - Package already has files
            * **500** - Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileSetRequest'
        required: true
  '/portals/{portalId}/packages/{packageId}/events':
    get:
      description: |
        Show a list of transfer events associated with a package.
      summary: |
        Show package events
      tags:
        - System-to-Person
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
        - name: packageId
          description: Unique package identifier
          required: true
          in: path
          schema:
            type: string
          example: packageId
      responses:
        '200':
          description: The package event log.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageEventSetResponse'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **402** - Payment Required
            * **404** - Portal Not Found or Package Not Found
            * **500** - Internal Server Error
  '/portals/{portalId}/packages/{packageId}/tokens':
    post:
      description: >
        Create a package upload or download token by creating a `grant` to allow
        the user to transfer files either as an `upload` or `download`. This
        generates a URL to provide to a user to complete a file transfer.


        **Note**: Send/Share portals accept upload or download grants, Sumbit
        portals can only accept upload grants.
      summary: |
        Create transfer link
      operationId: createToken
      tags:
        - System-to-Person
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
        - name: packageId
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: The package token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageTokenResponse'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **402** - Payment Required
            * **404** - Portal Not Found or Package Not Found
            * **409** - Conflict
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageTokenRequest'
            examples:
              sendPortal:
                $ref: '#/components/examples/TokenRequestSend'
              sharePortal:
                $ref: '#/components/examples/TokenRequestShare'
              submitPortal:
                $ref: '#/components/examples/TokenRequestSubmit'
        required: true
  '/portals/{portalId}/subscriptions':
    post:
      description: >
        Create a subscription to receive Media Shuttle event notifications. You
        can receive notifications for:

          Package Events:
          - package.upload.complete: When a package upload completes.
          - package.upload.canceled: When a package upload is canceled.
          - package.upload.failed: When a package upload fails.
          - package.download.complete: When a package download completes.
          - package.download.canceled: When a package download is canceled.
          - package.download.failed: When a package download fails.
          
          File Events:
          - file.rename.complete: When a file in a package is successfully renamed.
          - file.rename.failed: When a file in a package cannot be renamed.
          - file.move.complete: When a file in a package is successfully moved to a new file path.
          - file.move.failed: When a file in a package cannot be moved to a new file path.
          - file.delete.complete: When a file in a package is successfully deleted.
          - file.delete.failed: When a file in a package cannot be deleted.
          - folder.creation.complete: When a new folder is created in a package.
          - folder.creation.failed: When a new folder cannot be created in a package.
          
        The webhook URL will receive a http POST call whenever there is an
        event. The event details structure is defined in the
        PortalSubscriptionEvent Model


        Webhook handlers must check the event type to ensure future
        compatibility.
      summary: |
        Subscribe to portal events
      operationId: createPortalSubscription
      tags:
        - System-to-Person
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
      responses:
        '200':
          description: The subscription response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalSubscriptionResponse'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **402** - Payment Required
            * **404** - Portal Not Found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalSubscriptionRequest'
        required: true
    get:
      description: |
        Get all subscriptions for a portal.
      summary: |
        Get portal subscriptions
      operationId: getPortalSubscriptions
      tags:
        - System-to-Person
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
      responses:
        '200':
          description: The portal subscriptions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalSubscriptionsResponse'
        default:
          description: |
            * **400** - Bad Request
            * **401** - API Key Validation Failure
            * **402** - Payment Required
            * **404** - Portal Not Found or Package Not Found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/portals/{portalId}/subscriptions/{subscriptionId}':
    delete:
      description: |
        Delete a subscription from a portal.
      summary: |
        Delete a portal subscription
      operationId: deletePortalSubscription
      tags:
        - System-to-Person
      parameters:
        - name: portalId
          in: path
          description: Unique portal identifier
          required: true
          schema:
            type: string
            format: uuid
          example: portalId
        - name: subscriptionId
          in: path
          description: Unique portal subscription identifier
          required: true
          schema:
            type: string
            format: uuid
          example: subscriptionId
      responses:
        '200':
          description: Delete subscription.
        default:
          description: |
            * **401** - API Key Validation Failure
            * **404** - Subscription or Portal Not Found
            * **500** - Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
servers:
  - url: 'https://api.mediashuttle.com/v1'
components:
  securitySchemes:
    ApiKey:
      type: apiKey
      name: Authorization
      in: header
      description: >-
        The API Key associated with your Media Shuttle account. This key is
        accessible from the Developer menu item in the Media Shuttle
        Configuration Console.
  examples:
    LocalStorageExample:
      value:
        type: local
        relays:
          - relay.example.com
          - relay2.example.com
        configuration:
          useMultiplePorts: false
          hostname: server.example.com
          storageServerVersion: 2.9.0
          filePrefix: path/prefix
      summary: Local Storage
    LocalStorageExampleID:
      value:
        id: 12345678-abcd-dcba-4321-ab34567890f
        type: local
        relays:
          - relay.example.com
          - relay2.example.com
        status: available
        configuration:
          useMultiplePorts: false
          hostname: server.example.com
          storageServerVersion: 2.9.0
          filePrefix: path/prefix
      summary: Local Storage
    S3StorageExample:
      value:
        type: s3
        relays: []
        configuration:
          externalId: 12345678-abcd-dcba-4321-abcdef123456
          roleARN: 'arn:aws:iam::1234567890:role/roleName'
          bucket: bucketName
          filePrefix: path/prefix
          serverSideEncryption: true
      summary: Amazon S3 Storage
    S3StorageExampleID:
      value:
        id: 12345678-abcd-dcba-4321-ab34567890f
        type: s3
        relays: []
        status: available
        configuration:
          externalId: 12345678-abcd-dcba-4321-abcdef123456
          roleARN: 'arn:aws:iam::1234567890:role/roleName'
          bucket: bucketName
          filePrefix: path/prefix
          serverSideEncryption: true
      summary: Amazon S3 Storage
    AzureStorageExample:
      value:
        type: azure
        relays: []
        configuration:
          accountName: accountName
          accessKey: accessKey
          container: containerName
          filePrefix: path/prefix
      summary: Microsoft Azure Storage
    AzureStorageExampleID:
      value:
        id: 12345678-abcd-dcba-4321-ab34567890f
        type: azure
        relays: []
        status: available
        configuration:
          accountName: accountName
          accessKey: accessKey
          container: containerName
          filePrefix: path/prefix
      summary: Microsoft Azure Storage
    NewSendPortal:
      summary: New Send Portal
      value:
        name: New Send Portal
        url: example.mediashuttle.com
        type: send
        authentication:
          mediaShuttle: true
          saml: false
        allowUnauthenticatedUploads: false
        allowUnauthenticatedDownloads: false
    NewSharePortal:
      summary: New Share Portal
      value:
        name: New Share Portal
        url: example.mediashuttle.com
        type: share
        authentication:
          mediaShuttle: true
          saml: false
        allowUnauthenticatedUploads: false
        allowUnauthenticatedDownloads: false
    NewSubmitPortal:
      summary: New Submit Portal
      value:
        name: New Submit Portal
        url: example.mediashuttle.com
        type: submit
        authentication:
          mediaShuttle: true
          saml: false
        allowUnauthenticatedUploads: false
        allowUnauthenticatedDownloads: false
    SendPortalUser:
      summary: Send Portal
      value:
        email: user@example.com
        role: Member
        expiry: '2021-01-20T11:00:40.000Z'
        portalPermissions:
          canSendToMember: true
          canSendToNonMember: true
          canReceive: true
    SharePortalUser:
      summary: Share Portal
      value:
        email: user@example.com
        role: Member
        expiry: '2021-01-20T11:00:40.000Z'
        portalPermissions:
          folders:
            - path: /
              canUpload: true
              canDownload: true
              canDoFileOperations: true
              userHome: true
          canSendFromShare: true
          canDeliverAutomatically: true
    SubmitPortalUser:
      summary: Submit Portal
      value:
        email: user@example.com
        role: Member
        expiry: '2021-01-20T11:00:40.000Z'
        portalPermissions:
          canSubmit: true
    TokenRequestSend:
      summary: Send Portal
      value:
        user:
          email: user@example.com
        grants:
          - upload
        expiresOn: '2019-01-21T11:00:45.046Z'
        notifications:
          - type: webhook
            url: 'http://example.com/hook/catch/abc'
    TokenRequestShare:
      summary: Share Portal
      value:
        user:
          email: user@example.com
        grants:
          - download
        expiresOn: '2019-01-21T11:00:45.046Z'
        destinationPath: /folder1/folder2
        notifications:
          - type: webhook
            url: 'http://example.com/hook/catch/abc'
    TokenRequestSubmit:
      summary: Submit Portal
      value:
        user:
          email: user@example.com
        grants:
          - upload
        expiresOn: '2019-01-21T11:00:45.046Z'
        destinationPath: /folder1/folder2
        notifications:
          - type: webhook
            url: 'http://example.com/hook/catch/abc'
  schemas:
    Portal:
      type: object
      description: A Media Shuttle portal registered to an account.
      properties:
        id:
          description: Unique identifier representing a portal.
          type: string
          format: uuid
          example: 35460d47-019b-4e06-8108-18343b235108
        name:
          description: The portal name.
          type: string
          example: New Portal
          default: Share Portal
        url:
          description: >-
            The access URL for the portal. The URL prefix cannot exceed 63
            characters, must contain only alphanumeric characters and cannot
            start or end with a dash (-) and must end in ".mediashuttle.com".
          type: string
          pattern: '^([a-zA-Z0-9]+(-?[a-zA-Z0-9]+)*)\.mediashuttle.com'
          example: new-portal.mediashuttle.com
          default: random.mediashuttle.com
        type:
          description: Media Shuttle portal type.
          type: string
          enum:
            - send
            - share
            - submit
          default: share
          example: share
        createdOn:
          description: The date of portal creation.
          type: string
          format: date-time
          readOnly: true
          example: '1985-04-12T23:20:50.52.000Z'
        lastModifiedOn:
          description: The date the portal was last modified.
          type: string
          format: date-time
          readOnly: true
          example: '1985-04-12T23:20:50.52.000Z'
        authentication:
          type: object
          description: >-
            The authentication schemes for the portal, where a Share portal
            cannot be unauthenticated.
          properties:
            mediaShuttle:
              description: Use Media Shuttle authentication on login.
              type: boolean
              default: true
              example: true
            saml:
              description: >-
                Use SAML authentication on login. This is a licensed feature. An
                account level SAML configuration must have been previously saved
                in the Media Shuttle Configuration Console.
              type: boolean
              default: false
              example: false
        linkAuthentication:
          type: object
          description: >-
            The authentication options for download, upload, and token based
            links. Only applicable when portal authentication is enabled.
          properties:
            allowUnauthenticatedUploads:
              description: >-
                Allow uploads using RequestFiles and PackageToken links without
                requiring the user to log in.
              type: boolean
              default: true
              example: true
            allowUnauthenticatedDownloads:
              description: >-
                Allow downloads and PackageToken downloads without requiring the
                user to log in. Valid only for Send or Share portals
              type: boolean
              default: false for Send portals and true for Share portals
              example: false
    Storage:
      description: A storage location registered to an account.
      type: object
      properties:
        id:
          description: The unique identifier for the remote storage.
          type: string
          format: uuid
          example: 35460d47-019b-4e06-8108-18343b235108
        type:
          description: 'The type of storage: local, s3, or azure.'
          type: string
          enum:
            - local
            - s3
            - azure
          example: local
        relays:
          description: >-
            The list of relay addresses set for transfers with the Storage
            Server.
          type: array
          items:
            type: string
          default: []
          example:
            - relay-1.example.com
            - relay-2.example.com
        status:
          description: >-
            The status of the storage location. The options are: available,
            unavailable, or suspended.
          type: string
          enum:
            - available
            - unavailable
            - suspended
          example: available
          readOnly: true
        configuration:
          description: >-
            A configuration object based on the storage type. The options are:
            LocalStorage, S3Storage, or AzureBlobStorage.
          type: object
          oneOf:
            - $ref: '#/components/schemas/LocalStorage'
            - $ref: '#/components/schemas/S3Storage'
            - $ref: '#/components/schemas/AzureBlobStorage'
          example:
            useMultiplePorts: false
            hostname: hostname.example.com
            storageServerVersion: 2.9.0
            installationKey: 3377bca9-43bf-4bf5-84ce-eccc061cc7d3
    NewStorage:
      description: A storage location registered to an account.
      type: object
      properties:
        type:
          description: 'The type of storage: local, s3, or azure.'
          type: string
          enum:
            - local
            - s3
            - azure
          example: local
        status:
          description: >-
            The status of the storage location. The options are: available,
            unavailable, or suspended.
          type: string
          enum:
            - available
            - unavailable
            - suspended
          example: available
          readOnly: true
        relays:
          description: >-
            The list of relay addresses set for transfers with the Storage
            Server.
          type: array
          items:
            type: string
          default: []
          example:
            - relay1.example.com
            - relay2.example.com
        configuration:
          description: >-
            A configuration object based on the storage type. The options are:
            LocalStorage, S3Storage, or AzureBlobStorage.
          type: object
          oneOf:
            - $ref: '#/components/schemas/LocalStorage'
            - $ref: '#/components/schemas/S3Storage'
            - $ref: '#/components/schemas/AzureBlobStorage'
          example:
            useMultiplePorts: false
            hostname: hostname.example.com
            storageServerVersion: 2.9.0
            installationKey: 3377bca9-43bf-4bf5-84ce-eccc061cc7d3
    LocalStorage:
      type: object
      description: Storage configuration details specific to local storage.
      properties:
        useMultiplePorts:
          description: Setting to determine if multiple ports are used during transfers.
          type: boolean
          default: false
          example: false
        hostname:
          description: The hostname reported by the Storage Server.
          type: string
          readOnly: true
          example: localhost.localdomain
        storageServerVersion:
          description: >-
            The version of Signiant Storage Server reported by the Storage
            Server.
          type: string
          readOnly: true
          example: 2.0.0
        installationKey:
          description: The installation key used to register the Storage Server.
          type: string
          readOnly: true
          example: 3377bca9-43bf-4bf5-84ce-eccc061cc7d3
    S3Storage:
      description: Storage configuration details specific to AWS S3 Storage.
      type: object
      properties:
        roleARN:
          description: The role ARN for the AWS S3 Storage.
          type: string
          example: 'arn:aws:iam::123456789012:role/SigniantFlightRole'
        bucket:
          description: The name of the S3 bucket.
          type: string
          example: bucket-name
        externalId:
          description: >-
            The unique identifier used to secure the S3 storage, as entered when
            creating the roleARN.
          type: string
          format: uuid
          example: dd6b5908-6b58-47b3-89a7-13055c74c712
        serverSideEncryption:
          type: boolean
          description: Encrypt file contents at rest in S3.
          default: false
          example: false
        filePrefix:
          description: >-
            Prefix to prepend to files transfered to this location. Can be used
            to drop all files into a sub-directory.
          type: string
          default: ''
          example: path/prefix
    AzureBlobStorage:
      description: Storage configuration details specific to Azure Blob storage.
      type: object
      properties:
        accountName:
          description: The Azure account owning the Blob Storage.
          type: string
          example: storage-account
        accessKey:
          description: The access key for the Blob Storage.
          type: string
          example: >-
            g2bEcrOw4xN0sNcw/2hc16UrCl02mcr/zoQKgupYA3uN+x9RtVuyaKOGJ8/jwgUTI67nR4smkKLomdNBjDyRQw==
        container:
          description: The Blob Storage container.
          type: string
          example: azure-container
        filePrefix:
          description: >-
            Prefix to prepend to files transfered to this location. Can be used
            to drop all files into a sub-directory.
          type: string
          default: ''
          example: path/prefix
    PortalMember:
      description: An object representing user membership on the portal
      type: object
      properties:
        email:
          type: string
          format: email
          description: The email address of the portal member
          example: user@example.com
        role:
          description: >-
            The role the user is assigned on this portal. Ops is short for
            operations administrator, and represents an administrator of portal
            activity. Members are allowed to use the portal to transfer files.
            The operations administrator role includes the member role.
          type: string
          enum:
            - Member
            - Ops
          default: Member
          example: Member
        expiresOn:
          type: string
          description: >-
            The date and time the portal member account expires. If the portal
            member account is not set to expire, this field will not be present.
          example: '2019-02-22T11:35:40.000Z'
        portalPermissions:
          type: object
          description: The user's permissions on the portal
          properties:
            canSendToMember:
              type: boolean
              description: >-
                The user can send content to other portal members for send
                portals only
              example: true
            canSendToNonMember:
              type: boolean
              description: >-
                The user can send content to other users who are not portal
                members. This property depends on the canSendToMember property.
                You can never send to non-members if you cannot send to members.
              example: false
            canReceive:
              type: boolean
              description: >-
                The user can receive content sent by other members, for send
                portals only
              example: true
            canSendFromShare:
              type: boolean
              description: The user can send share portal files to other members
              example: true
            canDeliverAutomatically:
              type: boolean
              description: >-
                The user is permitted to use the autodelivery feature to
                automatically send or receive files to a share portal
              example: true
            folders:
              type: array
              description: The folders associated with this user on a share portal
              items:
                $ref: '#/components/schemas/PortalFolder'
            canSubmit:
              type: boolean
              description: The user can submit content to a submit portal
              example: true
    PortalFolder:
      description: >-
        Describes a folder for a share portal consisting of a path, a userHome
        designation, and folder permissions
      type: object
      properties:
        path:
          type: string
          description: >
            The case-sensitive path to the folder relative to the storage
            repository path.


            For example, if you are using local storage your full path is
            composed of 2 parts:

            * The repositoryPath (e.g. /example/repository/path)

            * The path here (e.g. /user/portal/folder)


            In the example above the resolved path on the file system would be
            '/example/repository/path/user/portal/folder'. You should *not*
            provide the absolute path in the file system here as input, only
            paths relative to the repositoryPath will function.


            The following paths are forbidden:


            * Paths that contain ..

            * Paths that resolve to the same path as another folder.

            * Paths that represent a subfolder of another path.


            This path is *not* verified against the relevant storage, all paths
            will be accepted but non-existant paths will return no results.


            Finally to provide a consistent path presentation this API will
            normalize any paths provided. So a path like \my\.\example\path will
            become /my/example/path
          example: /example/repository/path
        userHome:
          type: boolean
          description: >-
            This folder represents the home folder of the user. All other
            folders are considered linked folders. When modifying folder
            permissions exactly one folder must be marked as userHome. Omitted
            userHome properties are assumed to be false.
          example: true
        canUpload:
          type: boolean
          description: The user can upload content to this folder
        canDownload:
          type: boolean
          description: The user can download content from this folder
          example: true
        canDoFileOperations:
          type: boolean
          description: The user can perform file operations on content in this folder
          example: true
    PortalStorage:
      description: Associates storage with a portal.
      type: object
      properties:
        storageId:
          description: The storageId to which the portal is assigned.
          type: string
          format: uuid
          example: 35460d47-019b-4e06-8108-18343b235108
        repositoryPath:
          description: >-
            The repository path on the remote server. Not applicable for
            object-backed cloud storage.
          type: string
          format: path
          example: /example/repository/path
          default: >-
            /usr/Signiant_Media_Shuttle/repository/<random> or C:/Program
            Files/Signiant Media Shuttle/repository/<random>
    Transfer:
      description: The transfer JSON schema
      type: object
      properties:
        id:
          description: The transfer's unique ID
          type: string
          format: uuid
          example: 69ccc2a2-170d-4866-aca6-9bb1a5944163
        portalId:
          description: The associated portal's unique ID
          type: string
          format: uuid
          example: 61a1d109-d553-4052-9c0e-814f1ded4b68
        packageId:
          description: The transfer package's ID
          type: string
          example: m62kqJGGOyGauacKIQUYNO
        state:
          description: The transfer state
          type: string
          enum:
            - active
        protocol:
          description: The transfer protocol.
          type: string
          enum:
            - mxwan
            - mxtcp
            - http
        connectedServer:
          description: The sending or receiving storage server
          type: string
          example: your.storage.example.com
        direction:
          description: an upload or download
          type: string
          enum:
            - download
            - upload
        user:
          $ref: '#/components/schemas/User'
        startTime:
          description: The transfer start time
          type: string
          format: datetime
          example: '2017-12-11T15:00:56.664Z'
        activeTransferDetails:
          description: Additional information about active transfers
          type: object
          properties:
            estimatedTimeRemainingInSeconds:
              description: The estimated transfer time remaining in seconds
              type: number
              example: 11
            transferRateInBitsPerSecond:
              description: The transfer rate in bits per second
              type: number
              example: 100915440
            currentFile:
              description: The file currently being transfered
              type: object
              properties:
                name:
                  description: The file name
                  type: string
                  example: fileName.mpg
                size:
                  description: The file size in bytes
                  type: number
                  example: 102255268
    Package:
      type: object
      properties:
        id:
          description: Unique package identifier
          type: string
          format: base62uuid
          example: 6rdz0s60214xGEFu8gWERl
        portalId:
          description: Associated portal identifier
          type: string
          format: uuid
          example: 61a1d109-d553-4052-9c0e-814f1ded4b68
        createdOn:
          description: The package creation date and time
          type: string
          format: date-time
          example: '2017-08-15T10:31:58.547Z'
        metadata:
          description: Metadata can be entered by Submit Portal users.
          type: object
          example:
            packageTitle: An Example Title
            description: A description of the file transferred
            fileType: video-mp4
            language: English
    User:
      description: A Media Shuttle user.
      type: object
      properties:
        email:
          description: The email address of the user.
          type: string
          format: email
          example: user@example.com
    FileSetRequest:
      description: A set of files
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileRequest'
    FileSetResponse:
      description: An array of files
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileResponse'
    FileRequest:
      description: A file that can be transferred using Media Shuttle.
      type: object
      properties:
        path:
          description: The path to the file.
          type: string
          example: example/example_file.mp4
        isDirectory:
          description: Indicates that the file is a directory.
          type: boolean
          default: false
          example: false
        size:
          description: The size of the file in bytes.
          type: number
          format: long
          default: 0
          example: 200000
    FileResponse:
      description: A file that can be transferred using Media Shuttle.
      type: object
      properties:
        path:
          description: The path to the file.
          type: string
          example: example/example_file.mp4
        isDirectory:
          description: Indicates that the file is a directory.
          type: boolean
          default: false
          example: false
        size:
          description: The size of the file in bytes.
          type: number
          format: long
          default: 0
          example: 200000
    StorageList:
      type: object
      description: Response from listing storage.
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Storage'
    PortalList:
      type: object
      description: Response from listing portals.
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Portal'
    PortalStorageList:
      type: object
      description: Response from listing portal storage.
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PortalStorage'
    TransferList:
      type: object
      description: Response from listing transfers.
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'
    PackageEventSetResponse:
      description: The set of events that have occurred for a package
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PackageEventResponse'
    PackageEventResponse:
      description: A package event
      type: object
      properties:
        action:
          description: The action that occurred for the event
          type: string
          enum:
            - Successful Upload
            - Successful Download
            - Successful Send Link
            - Successful Forward
            - Upload Canceled
            - Download Canceled
            - Upload Failed
            - Download Failed
            - Failed Forward
          example: Upload Failed
        details:
          description: >-
            Additional event details, such as the email address of the user who
            performed a successful package transfer or a description of the user
            and files when a package transfer failed
          type: string
          example: Failed Upload by user@example.com for file example.mp4
        eventType:
          description: The event type
          type: string
          enum:
            - Info
            - Warning
            - Error
          example: Error
        date:
          description: The date when the event ocurred
          type: string
          format: date-time
          example: '2017-11-30T15:08:12.643Z'
    PackageTokenRequest:
      type: object
      properties:
        user:
          description: >
            The user who will be issued the token, allowing them to upload or
            download package files.
          type: object
          properties:
            email:
              description: The user's email address.
              type: string
              format: email
              example: user@example.com
        grants:
          description: >
            The permissions to be granted to the user who will be issued the
            token. Currently, permission grants are limited to one per token,
            however, we are reserving the property type as an array for future
            use in which we envision multiple grants being allowed.
          type: array
          items:
            type: string
            enum:
              - upload
              - download
        expiresOn:
          description: >
            The date/time the transfer token expires. If this value is not set,
            tokens will expire according to the portal settings for maintenance
            cleanup, regular link expiry, or after 90 days, whichever is
            sooner. 
          type: string
          format: date-time
          example: '2017-08-15T10:31:58.547Z'
        destinationPath:
          description: >
            The portal subdirectory where files will be uploaded. Submit portals
            that organize deliveries into unique folders do not support this
            field.
          type: string
          example: /folder1/subfolder2
        notifications:
          description: >
            Request notifications for token lifecycle events. Supported events
            are:

            - tokenRedeemed: When the token is redeemed.

            - package.upload.complete: When a package upload is complete.

            - package.download.complete: When a package download is complete.


            User actions will fire more than one event. For example,
            successfully uploading content to a package will trigger a
            package.upload.complete event and a tokenRedeemed event.


            Signiant recommends that webhook handlers check the event type to
            ensure future compatibility.
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              url:
                type: string
                format: uri
            example:
              type: webhook
              url: 'https://example.com/hook/catch/abc/'
    PackageTokenResponse:
      type: object
      properties:
        id:
          description: The token identifier
          type: string
          example: 679b9f1c-795e-4c18-90c3-ed7b4aab898a
        url:
          description: >-
            The URL that the user should navigate to in order to perform the
            transfer.
          type: string
          format: uri
          example: 'https://myportal.mediashuttle.com/packageRequest?packageToken=jwt'
        createdOn:
          type: string
          format: date-time
          example: '2017-08-15T10:31:58.547Z'
        expiresOn:
          description: |
            The date/time the transfer token expires and is no longer valid.
          type: string
          format: date-time
          example: '2017-08-15T10:31:58.547Z'
        user:
          description: >
            The user who will be issued the token allowing them to upload or
            download package files
          type: object
          properties:
            email:
              description: The email address of the user.
              type: string
              format: email
              example: user@example.com
        grants:
          description: >
            The permissions to be granted to the user who will be issued the
            token. Currently, permission grants are limited to one per token,
            however, we are reserving the property type as an array for future
            use in which we envision multiple grants being allowed.
          type: array
          items:
            type: string
            enum:
              - upload
              - download
        destinationPath:
          description: >
            The portal subdirectory where files will be uploaded. Submit portals
            that organize deliveries into unique folders do not support this
            field.
          type: string
          example: /folder1/subfolder2
        notifications:
          description: >
            Request notifications for token lifecycle events. Supported events
            are:

            - tokenRedeemed: When the token is redeemed.

            - package.upload.complete: When a package upload is complete.

            - package.download.complete: When a package download is complete.


            User actions will fire more than one event. For example,
            successfully uploading content to a package will trigger a
            package.upload.complete event and a tokenRedeemed event.
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              url:
                type: string
                format: uri
            example:
              type: webhook
              url: 'https://example.com/hook/catch/abc/'
    PortalSubscriptionRequest:
      type: object
      properties:
        type:
          description: |
            Subscription type:
              * webhook: Subscribe for events to be posted to the URL provided in the details section.
          type: string
          enum:
            - webhook
        details:
          type: object
          description: Subscription details
          properties:
            url:
              description: The URL that will receive events posted from Media Shuttle.
              type: string
              format: uri
              example: 'https://my.example.server.com/REST/myEndpoint'
    PortalSubscriptionResponse:
      type: object
      properties:
        id:
          description: The subscription identifier.
          type: string
          example: 679b9f1c-795e-4c18-90c3-ed7b4aab898a
        type:
          description: Subscription type
          type: string
          enum:
            - webhook
        details:
          type: object
          description: Subscription details.
          properties:
            url:
              description: >-
                The URL that will receive events posted from Media Shuttle. The
                Event payload will adhere to
                '#/definitions/PortalSubscriptionEvent' model.
              type: string
              format: uri
              example: 'https://my.example.server.com/REST/myEndpoint'
    PortalSubscriptionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/PortalSubscriptionResponse'
    Error:
      type: object
      description: An error response body.
      properties:
        statusCode:
          description: The HTTP status code.
          type: number
          format: int
          example: 400
        error:
          description: The error type matching the HTTP status code.
          type: string
          example: HTTP Status Code message
        message:
          description: A detailed message describing the error that occurred.
          type: string
          example: Detailed error message
    PortalMemberRequest:
      description: An object representing user membership on the portal
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PortalMemberResponse'
        error:
          type: object
          properties:
            error:
              description: >-
                Any errors found in the response are logged in the response
                body.
              type: string
              example: Optional field returned when an error occurs
            message:
              description: The message example
              type: string
              example: 'An error occured, please try again'
            statuscode:
              description: The HTTP Status Code
              type: integer
              example: 500
    PortalMemberResponse:
      type: object
      properties:
        email:
          description: The subscription identifier.
          type: string
          example: user@example.com