penapi: 3.0.1
info:
  title: Humane Solutions OCR API
  description: Humane Solutions OCR API
  termsOfService: http://swagger.io/terms/
  contact:
    email: harnit.bakshi@human-e.co
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more Humane Solutions
  url: https://human-e.co
servers:
# Added by API Auto Mocking Plugin
- url: https://virtserver.swaggerhub.com/HumaneTech/Humane-OCR-API/1.0.0
  description: Humane OCR API
tags:
- name: ocr
  description: OCR API
  externalDocs:
    description: Find out more
    url: https://human-e.co
paths:
  /login:
    post:
      tags:
      - ocr
      description: |-
        # Login with a valid username and password
        Please obtain the following from Human.e before starting
        - A valid user and password
        - A valid API Key

        When login is successful a **token** is returned, add the token in the Authorization header for requests to be authorized.
        Token validity is **12 hours**.
        **After 12 hours please re-login to obtain another token**

        Please add the following to the header when calling the below OCR methods
        - **X-Username**: your_username
        - **Authorization**: Bearer token_provided_by_login_method
        - **X-API-Key**: your_api_key

        We use a combination of **API Key** and **JWT(Json Web Token)** to authorize a user. API keys are also used to track user quotas on an API.
        For more information on user quotas please contact: **info@human-e.co**
      summary: Login a user
      operationId: login
      requestBody:
        description: Login to the Humane Solutions OCR API
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        "200":
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        "400":
          description: Bad Request
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
  /imageToText:
    post:
      security:
      - bearerAuth: []
      - apikeyAuth: []
      tags:
      - ocr
      description: |-
        # Image to raw text
        Returns raw text via OCR of image. 
        
        **Maximum image size should be 500 kb**
      summary: Post an image to get ocr text
      parameters:
        - in: header
          name: X-Username
          schema:
            type: string
          required: true
          description: Username
      operationId: imageToText
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: Raw OCR Text
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OCRTextResponse'
        "400":
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
        "405":
          description: Invalid input
          content: {}
        "429":
          description: Limit Exceeded **[This happens when a user quota is exceeded for an api]**
          content: {}
  /analyseText:
    post:
      security:
        - bearerAuth: []
        - apikeyAuth: []
      tags:
      - ocr
      description: |-
        # OCR image and analyse the text.
        **Maximum image size should be 500 kb**.
        
        For more information on the different **Named Entities** sent back please see **OCRAnalyseTextResponse**
      summary: Post an image to get ocr and analyse text
      parameters:
        - in: header
          name: X-Username
          schema:
            type: string
          required: true
          description: Username
      operationId: analyseText
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: Analyse OCR Text
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OCRAnalyseTextResponse'
        "400":
          description: Bad Request
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
        "405":
          description: Invalid input
          content: {}
        "429":
          description: Limit Exceeded **[This happens when a user quota is exceeded for an api]**
          content: {}
components:
  schemas:
    Login:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          example: sanjeev.singh
        password:
          type: string
          format: password
          example: <password>
    LoginSuccessResponse:
      required:
      - status
      - token
      type: object
      properties:
        status:
          type: string
          example: Logged In
        token:
          type: string
          example: eyJ0eansdnbmncb01
    OCRTextResponse:
      required:
      - raw_text
      type: object
      properties:
        raw_text:
          type: string
          example: Sanjeev Singh, sanjeev.singh@awesomestartup.com, A-872, Defense
            Colony, Delhi, 180024
    OCRAnalyseTextResponse:
      required:
      - raw_text
      type: object
      properties:
        person:
          type: string
          example: Sanjeev Singh
        organization:
          type: string
          example: Awesome Startup
        location:
          type: string
          example: A-872, Defense Colony, Delhi, 180024
        email:
          type: string
          example: sanjeev.singh@awesomestartup.com
        website:
          type: string
          example: www.awesome.startup.com
        phone_numbers:
          type: array
          example:
          - +91-855-5111-480
          items:
            type: string
        raw_text:
          type: string
          example: 'Sanjeev Singh, www.awesome.startup.com, sanjeev.singh@awesomestartup.com,
            A-872, Defense Colony, Delhi, 180024, Mobile: +91-855-5111-480'
  securitySchemes:
      bearerAuth:            # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT    # optional, arbitrary value for documentation purposes
      apikeyAuth:
        type: apiKey
        in: header
        name: X-API-Key