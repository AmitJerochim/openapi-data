penapi: 3.0.0
info:
  version: "1.0.1"
  title: hrmny
  description: |
    `Authorization: Bearer <token>`
      
servers:
  - description: Sandbox server
    url: http://hrmny-api.scdev.cc
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/scd.sulga/hrmny/1.0.0
security:
  - bearerAuth: []
tags:
  - name: Login
  - name: Portrait
  - name: People
  - name: Avatar
  - name: Media
  - name: Company
  - name: Users
  - name: Profiles
paths:
  /portraits/{uuid}:
    get:
      tags:
        - Portrait
      parameters: 
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      security: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uuid:
                      type: string
                    name:
                      type: string
                      example: 'John Doe'
                    position:
                      type: string
                      example: 'Manager'
                    avatar:
                      $ref: '#/components/schemas/Avatar'
                    profile:
                      type: object
                      properties:
                        properties:
                          type: object
                          example: { name: 'Don Quixote', quadra: 'I', tag: 'Ideation', '...': '...' }
        '404':
          description: invalid id
  /users:
    get:
      tags: 
        - Users
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: 'user@acme.com'
                    role:
                      type: string
                      example: 'ROLE_USER'
    post:
      tags:
        - Users
      responses:
        '422':
          description: invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      username: 
                        type: string
                        example: 'This value is already used.'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: 
                - username
                - plain_password
              properties:
                username:
                  type: string
                  example: 'user@acme.com'
                plain_password:
                  type: string
                  example: 'qwe123'
  /login:
    post:
      tags: 
        - Login
      security: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: 'user@acme.com'
                  token:
                    type: string
                    example: '8ec484e732c81c560bfcb3e1939e8cb717103787a2316e90d5e63a3f970760ce'
                  role:
                    type: string
                    example: 'ROLE_ADMIN'
        '401':
          description: invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: 
                    type: string
                    example: Invalid credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: 'user@acme.com'
                password:
                  type: string
                  example: 'qwe123'
  /companies:
    get:
      tags: 
        - Company
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: 'Acme'
    post:
      tags: 
        - Company
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: 'Acme'
        '422':
          description: invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      name: 
                        type: string
                        example: 'This value should not be blank.'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: 
                - name
              properties:
                name:
                  type: string
                  example: 'Acme'
  /companies/{id}:
    get:
      tags: 
        - Company
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 'Acme'
                  
        '404':
          description: Invalid id
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
    patch:
      tags: 
        - Company
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 'Acme'
        '422':
          description: invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      name: 
                        type: string
                        example: 'This value should not be blank.'
    delete:
      tags:
        - Company
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: successful operation
        '404':
          description: Invalid id
  /profiles:
    get:
      tags: 
        - Profiles
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    properties:
                      type: object
                      example: { name: 'Don Quixote', quadra: 'I', tag: 'Ideation', '...': '...' }
  /people:
    get:
      tags: 
        - People
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
    post:
      tags:
        - People
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedPerson'
        '422':
          description: invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      profile_id: 
                        type: string
                        example: 'This is not a valid entity id.'
      requestBody:
        $ref: '#/components/requestBodies/Person'
  /people/{id}:
    get:
      tags: 
        - People
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtendedPerson'
        '404':
          description: invalid id
    patch:
      tags:
        - People
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedPerson'
        '404':
          description: invalid id
        '422':
          description: invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      profile_id: 
                        type: string
                        example: 'This is not a valid entity id.'
      requestBody:
        $ref: '#/components/requestBodies/Person'
    delete:
      tags:
        - People
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: successful operation
        '404':
          description: invalid id
  /people/{id}/avatar:
    post:
      tags:
        - Avatar
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Avatar'
        '404':
          description: invalid id
        '422':
          description: invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      file: 
                        type: string
                        example: 'This value should not be blank.'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: 'binary'
    delete:
      tags:
        - Avatar
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: successful operation
        '404':
          description: invalid id
  /people/{id}/media:
    get:
      tags:
        - Media
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Media'
    post:
      tags:
        - Media
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '404':
          description: invalid id
        '422':
          description: invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      file: 
                        type: string
                        example: 'This value should not be blank.'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: 'binary'
  /media/{id}:
    delete:
      tags:
        - Media
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: successful operation
        '404':
          description: invalid id
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  requestBodies:
    Person:
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            required: 
              - name
              - profile_id
            properties:
              name:
                type: string
              profile_id:
                type: integer
              company_id:
                type: integer
              position: 
                type: string
                example: 'Manager'
              social_media_links:
                type: array
                items:
                  type: string
              email_address:
                type: string
                example: 'john.doe@acme.com'
              
  schemas:
    Avatar:
      type: object
      properties:
        60x600:
          type: string
        200x200:
          type: string  
    Person:
      type: object
      properties:
        id:
          type: integer
          example: 1
        profile_id:
          type: integer
          example: 1
        company_id:
          type: integer
          example: 1
        uuid:
          type: string
          example: 'da9475b5'
        name:
          type: string
          example: 'John Doe'
        avatar:
          $ref: '#/components/schemas/Avatar'
    Media:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: '300.png'
        mime_type:
          type: string
          example: 'image/png'
        properties:
          type: object
          example: { width: 100, height: 100, duration: 30 }
        thumbnails:
          type: object
          properties:
            60x60:
              type: string
    ExtendedPerson:
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: object
          properties:
            email_address:
              type: string
            social_media_links:
              type: array
              items:
                type: string