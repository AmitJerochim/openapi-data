openapi: 3.0.0
info:
  title: Flex Scoring Backend
  version: 1.1.0-rc1
  description: API responsible for handling scoring requests of all our models currently in **production**.
  contact:
    name: Jo√£o Pedro Wojcikiewicz Duarte Silva
    email: joao.duarte@flexcontact.com.br
servers:
  - url: http://analytics.flexcontact.com.br:5005
    description: Staging/testing server
  - url: http://analytics.flexcontact.com.br:5000
    description: Production server
  - url: http://127.0.0.1:5000
    description: Local server

paths:
  # ---
  # :: Authentication related ::
  # ---
  /auth/login:
    post:
      summary: Authenticates the user.
      description:
        Logs the user in using session cookies. Implementations using this authentication route dismisses
        manual `jwt` token exchanges; all is done authomatically from the session storage both on the client
        and on the server.


        Login with the Flex network (AD) credentials, either by e-mail, username or DOMAIN\username.

      tags:
        - Authentication

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            examples:
              ByEmail:
                value:
                  email: john.doe@flexcontact.com.br
                  password: test123
                summary: By e-mail

              ByUsername:
                value:
                  email: john.doe
                  password: test123
                summary: By username (automatically prepends domain)

              ByDomainUsername:
                value:
                  email: FLEXCONTACT\john.doe
                  password: test123
                summary: By username (explicit domain)

      responses:
        "200":
          description: Successfully logged in.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        properties:
                          auth_token:
                            description: Generated `jwt` authentication token
                            type: string
                          user:
                            $ref: "#/components/schemas/ResponseUser"

              example:
                status: "success"
                message: "Successfully logged in."
                data:
                  user:
                    id: 1
                    idEnterprise: 1
                    name: John Doe
                    registrationNumber: 12345
                    email: john.doe@flexcontact.com.br
                    isAdmin: true
                    isActive: true
                    projects: [324, 857]
                    dateCreated: "2019-08-05T14:24:52"

        "401":
          description: User not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "User not authorized."

        "404":
          description: User does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "User does not exist."
        "500":
          description: Something happened, try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "Try again."

  /auth/token:
    post:
      summary: Authenticates the user.
      description:
        This backend implements a simple Authorization Bearer authentication via `jwt` exchanges. When a valid
        e-mail/password pair is given to this endpoint, the server generates an `auth_token` valid for **24 hours**.


        The client is supposed to hold this token to authenticate all the requests done on the other endpoints.


        Login with the Flex network (AD) credentials, either by e-mail, username or DOMAIN\username.

      tags:
        - Authentication

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            examples:
              ByEmail:
                value:
                  email: john.doe@flexcontact.com.br
                  password: test123
                summary: By e-mail

              ByUsername:
                value:
                  email: john.doe
                  password: test123
                summary: By username (automatically prepends domain)

              ByDomainUsername:
                value:
                  email: FLEXCONTACT\john.doe
                  password: test123
                summary: By username (explicit domain)

      responses:
        "200":
          description: Successfully logged in.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        properties:
                          auth_token:
                            description: Generated `jwt` authentication token
                            type: string
                          user:
                            $ref: "#/components/schemas/ResponseUser"

              example:
                status: "success"
                message: "Successfully logged in."
                data:
                  auth_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  user:
                    id: 1
                    idEnterprise: 1
                    name: John Doe
                    registrationNumber: 12345
                    email: john.doe@flexcontact.com.br
                    isAdmin: true
                    isActive: true
                    projects: [324, 857]
                    dateCreated: "2019-08-05T14:24:52"

        "401":
          description: User not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "User not authorized."

        "404":
          description: User does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "User does not exist."
        "500":
          description: Something happened, try again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "Try again."

  /auth/register:
    post:
      summary: Register a new user.
      description:
        The registration of new users **must** be done through this endpoint, since the password is encrypted
        by the server and then stored in a database.


        When successful, it also returns the registered user backend to the requester for possible client use.


        **Only admin users can access this endpoint.**

      tags:
        - Authentication
      security:
        - BearerAuth: []

      requestBody:
        description: "**All** fields are required."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestUserRegistration"
            example:
              name: John Doe
              registrationNumber: 12345
              email: john.doe@flexcontact.com.br
              password: test123
              isAdmin: true
              projects: [324, 857]

      responses:
        "201":
          description: "User successfully registered."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseUser"
              example:
                status: "success"
                message: "Successfully registered."
                data:
                  id: 1
                  idEnterprise: 1
                  name: John Doe
                  registrationNumber: 12345
                  email: john.doe@flexcontact.com.br
                  isAdmin: true
                  isActive: true
                  projects: [324, 857]
                  dateCreated: "2019-08-05T14:24:52"

        "302":
          description: "User already exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "User already exists. Please log in instead."

        "500":
          description: "Something happened on the backend."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "Something happened. Please try again"

  /auth/status:
    get:
      summary: Checks if user is logged in.
      description:
        The Authorization header is firstly decoded and tested for its integrity and "freshness". This tells
        if the token is still valid and thus if the user is logged in.


        It is suggested to continually pass through this endpoint to check if the user can still authenticate
        on any of the other endpoints.
      tags:
        - Authentication
      security:
        - BearerAuth: []

      responses:
        "200":
          description: "User is logged in"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseUser"
              example:
                status: "success"
                message: ""
                data:
                  id: 1
                  idEnterprise: 1
                  name: John Doe
                  registrationNumber: 12345
                  email: john.doe@flexcontact.com.br
                  isAdmin: true
                  isActive: true
                  projects: [324, 857]
                  dateCreated: "2019-08-05T14:24:52"

        "401":
          description: "User is not logged in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              examples:
                ExpiredToken:
                  summary: "Expired Token"
                  value:
                    status: "fail"
                    message: "Provide a valid auth token"
                Error:
                  summary: "Unexpected error"
                  value:
                    status: "fail"
                    message: "{Python exception}"

  /auth/user:
    get:
      summary: Gets a list of all registered users.
      description:
        The root level _user_ endpoint fetches all registered users from the database, returning them as a list.'


        **Only admin users can access this endpoint.**

      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/sort_by"
        - $ref: "#/components/parameters/sort_direction"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/filter_col"

      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        allOf:
                          - $ref: "#components/schemas/CommonSort"
                          - properties:
                              users:
                                type: array
                                items:
                                  $ref: "#/components/schemas/ResponseUser"

              example:
                status: "success"
                message: ""
                data:
                  current_page: 1
                  num_pages: 3
                  users:
                    - id: 1
                      idEnterprise: 1
                      name: John Doe
                      registrationNumber: 12345
                      email: john.doe@flexcontact.com.br
                      isAdmin: true
                      isActive: true
                      projects: [324, 857]
                      dateCreated: "2019-08-05T14:24:52"
                    - id: 2
                      idEnterprise: 1
                      name: Annie Joe
                      registrationNumber: 84721
                      email: annie.joe@flexcontact.com.br
                      isAdmin: false
                      isActive: true
                      projects: [123, 456]
                      dateCreated: "2019-09-01T12:23:14"
                    - ...

    put:
      summary: Register a new user.
      description:
        Analogous to `/auth/register`, this endpoint also registers new users.


        **Only admin users can access this endpoint.**

      tags:
        - Authentication
      security:
        - BearerAuth: []

      requestBody:
        description: "**All** fields are required"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestUserRegistration"
            example:
              name: John Doe
              registrationNumber: 12345
              email: john.doe@flexcontact.com.br
              password: test123
              isAdmin: true
              projects: [324, 857]

      responses:
        "201":
          description: "Register a new user with the given request body."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseUser"
              example:
                status: "success"
                message: "Successfully created"
                data:
                  id: 1
                  idEnterprise: 1
                  name: John Doe
                  registrationNumber: 12345
                  email: john.doe@flexcontact.com.br
                  isAdmin: true
                  isActive: true
                  projects: [324, 857]
                  dateCreated: "2019-08-05T14:24:52"

        "400":
          description: "Something went wrong. Please try again."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: string
              example:
                status: "fail"
                message: "Something went wrong. Please try again."
                data: "{Python exception}"

  /auth/user/{registrationNumber}:
    get:
      summary: Gets user info.
      description:
        Fetches just one single user entry identified by `registrationNumber` containing every all fields associated with it.


        **Only admin users can access this endpoint.**

      parameters:
        - $ref: "#/components/parameters/registrationNumber"
      tags:
        - Authentication

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Gets user details.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/ResponseUser"
              example:
                status: "success"
                message: ""
                data:
                  id: 123
                  idEnterprise: 1
                  name: John Doe
                  registrationNumber: 12345
                  email: john.doe@flexcontact.com.br
                  isAdmin: true
                  isActive: true
                  projects: [324, 857]
                  dateCreated: "2019-08-05T14:24:52"

        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "User identified by registrationNumber={registrationNumber} not found."

    put:
      summary: Edits existing user.
      description:
        Alters one or more fields of the user identified by `registrationNumber`.


        To do this, suffice to send a payload containing the fields to be updated and the corresponding value
        as a hash table.


        **Only admin users can access this endpoint.**
      parameters:
        - $ref: "#/components/parameters/registrationNumber"
      tags:
        - Authentication

      security:
        - BearerAuth: []

      requestBody:
        description: Edit fields of a user. Any number of fields can be sent.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestUserRegistration"
            examples:
              fullUser:
                summary: Edit all fields
                value:
                  name: John Doe
                  registrationNumber: 12345
                  email: john.doe@flexcontact.com.br
                  password: test123
                  isAdmin: true
                  projects: [324, 857]

              onlyName:
                summary: Just the name
                value:
                  name: Jane Doe

              adminAndPassword:
                summary: Change admin flag and password
                value:
                  isAdmin: false
                  password: some_new-pw123

              emailAndProjects:
                summary: Change e-mail and allowed projects
                value:
                  email: annie.doe@example.com
                  projects: [999, 1020]

      responses:
        "200":
          description: User successfully edited.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseUser"

              example:
                status: "success"
                message: "Successfully modified."
                data:
                  id: 123
                  idEnterprise: 1
                  name: John Doe
                  registrationNumber: 12345
                  email: john.doe@flexcontact.com.br
                  isAdmin: true
                  isActive: true
                  projects: [324, 857]
                  dateCreated: "2019-08-05T14:24:52"

        "400":
          description: Something went wrong. Please try again.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: string
              example:
                status: "fail"
                message: "Something went wrong. Please try again."
                data: "{Python exception}"

    delete:
      summary: Pops user from database.
      description:
        This fetches the user identified by `registrationNumber` and then purges it from the database, sending the very
        last copy of it back to the requester, in case the client still wants to do something with it.


        Effectively it has the same functionality as popping an item from some stack.


        **Only admin users can access this endpoint.**
      parameters:
        - $ref: "#/components/parameters/registrationNumber"
      tags:
        - Authentication

      security:
        - BearerAuth: []

      responses:
        "204":
          description: Successfully deleted.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseUser"
              example:
                status: "success"
                message: "Successfully deleted."
                data:
                  id: 1
                  idEnterprise: 1
                  name: John Doe
                  registrationNumber: 12345
                  email: john.doe@flexcontact.com.br
                  isAdmin: true
                  isActive: true
                  projects: [324, 857]
                  dateCreated: "2019-08-05T14:24:52"
        "404":
          description: Register not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "Register not found."

  # ---
  # :: Scoring related ::
  # ---
  /proj:
    get:
      summary: Get list of all projects in production.
      description:
        This root endpoint will check for all projects in production that are currently available, active and that
        have models in the database, that is, ready to be scored. It will then return them all as a list.
      tags:
        - Project listing

      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of all available projects.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: "#components/schemas/SummaryProject"
                            - properties:
                                mod:
                                  $ref: "#components/schemas/SummaryModel"

              example:
                status: "success"
                message: ""
                data:
                  - id: 324
                    name: "Santanger Lages (324)"
                    mod:
                      - id: 1
                        projid: 324
                        name: BAU...
                        isActive: true
                        path: /path/to/model1
                      - id: 32
                        projid: 324
                        name: SMS...
                        isActive: true
                        path: /path/to/model32
                  - id: 645
                    name: "Cielo (645)"
                    mod:
                      - id: 12
                        projid: 645
                        name: RTV_ME...
                        isActive: true
                        path: /path/to/model12

                  - ...

        "204":
          description: No projects found.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array

                example:
                  status: "success"
                  message: "Empty projects list."
                  data: []

  /proj/{projid}:
    get:
      summary: Fetches list of all available campaigns.
      description:
        One step deeper, when a given project identifier `projid` is requested, the server will look for all
        the available active campaigns on the project's own database and return a list of them.

      parameters:
        - $ref: "#/components/parameters/projid"
        - in: query
          name: campaigns
          schema:
            type: boolean
          description: Only fetches the campaigns list.

      tags:
        - Project listing

      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of active campaigns of the project identified by {projid}.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        properties:
                          proj:
                            $ref: "#components/schemas/SummaryProject"
                          campaigns:
                            type: array
                            items:
                              $ref: "#/components/schemas/Campaign"
              example:
                status: "success"
                message: ""
                data:
                  proj:
                    id: 324
                    name: "Santanger Lages (324)"
                  campaigns:
                    - id: 1234
                      name: "SOME_CAMPAIGN_NAME_1234"
                      groupName: "SOME_CAMPAIGN_GROUP_NAME_X"
                      dateStart: "2019-10-02T13:12:22"
                    - id: 4567
                      name: "SOME_CAMPAIGN_NAME_4567"
                      groupName: "SOME_CAMPAIGN_GROUP_NAME_X"
                      dateStart: "2019-10-03T08:29:43"
                    - ...

        "204":
          description: Empty campaigns list.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array
              example:
                status: "success"
                message: "Empty campaigns list."
                data: []

        "500":
          description: Something wrong happened.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "{Python exception}"

  /jobs:
    get:
      summary: Gets user list of ran jobs.
      description:
        Fetches the history of all jobs ran by the user along with either a short message of its status or
        a result object containing its volumetry and basic statistics.

      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/sort_by"
        - $ref: "#/components/parameters/sort_direction"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/filter_col"

      tags:
        - Job queue

      security:
        - BearerAuth: []

      responses:
        "200":
          description: List of all ran jobs by the user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        allOf:
                          - $ref: "#components/schemas/CommonSort"
                          - properties:
                              jobs:
                                type: array
                                items:
                                  $ref: "#/components/schemas/ResponseJob"
              example:
                status: "success"
                message: ""
                data:
                  - current_page: 1
                    num_pages: 3
                    jobs:
                      - id: 321
                        logid: 53
                        projid: 324
                        futureKey: "S_O_324_-_2019-08-08T12:12:12"
                        modelid: "SMS"
                        campaigns: [123, 456, 789]
                        startDate: "2019-08-08T12:12:12"
                        endDate: "2019-08-08T12:14:53"
                        statusid: 1
                        datasourceid: 2
                        projname: "Santander Lages (324)"

                        result:
                          stats:
                            N: 1000
                            min: 0.01235
                            max: 0.29123
                            mean: 0.15123
                            median: 0.17631
                            std: 0.0531
                          volumetry:
                            1: 100
                            2: 300
                            3: 300
                            4: 300

        "204":
          description: No jobs ran by the user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array
              example:
                status: "success"
                message: "No jobs ran by the user."
                data: []

    post:
      summary: Execute a new job.
      description:
        This endpoint parses the project, campaigns and model from the payload request to run the requested model,
        through our scoring API, either consuming the internal _Flex_ databases or scoring from external files
        uploaded from the `/bases` endpoint, each controlled by the `source` query parameter.


        For _Flex_ operations, the server fixes the amount of jobs that one user can put at a time to 4. If the user insists in running
        even more than that, it will return a 406 response.


        Each modality has its own type of request, but both responses are equal.

      tags:
        - Job queue

      parameters:
        - in: query
          name: source
          description: Source where the data is located (file or flex).
          schema:
            type: string
            enum:
              - file
              - flex
        - in: query
          name: output_schema
          description:
            The schema to which the output data will be formatted. Defaults to `flex` (AYTY default
            schema) for internal operations and `external` (all data plus prediction fields) for
            file sources.
          schema:
            type: string
            enum:
              - external
              - flex

      security:
        - BearerAuth: []

      requestBody:
        description: Project identifier and campaigns of baseid to be scored
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/RequestJobFlex"
                - $ref: "#/components/schemas/RequestJobFile"
            examples:
              Flex:
                value:
                  projid: 324
                  modelid: 15
                  IDs: [7123, 7124, 7125]
                  isPerCampaign: false
                summary: Flex request
              File:
                value:
                  baseid: 5
                  projid: 324
                  modelid: 14
                summary: File request

      responses:
        "200":
          description: New job added to the queue.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseJob"
              examples:
                Flex:
                  value:
                    status: "success"
                    message: ""
                    data:
                      id: 312
                      logid: 53
                      projid: 324
                      futureKey: "S_O_324_-_2019-08-08T12:12:12"
                      modelid: 13
                      campaigns: [123, 456, 789]
                      startDate: "2019-08-08T12:12:12"
                      endDate: "2019-08-08T12:14:53"
                      statusid: 1
                      datasourceid: 2
                      projname: "Santander Lages (324)"
                      result:
                        stats:
                          N: 1000
                          min: 0.01235
                          max: 0.29123
                          mean: 0.15123
                          median: 0.17631
                          std: 0.0531
                        volumetry:
                          1: 100
                          2: 300
                          3: 300
                          4: 300
                  summary: Flex request

                File:
                  value:
                    status: "success"
                    message: ""
                    data:
                      id: 313
                      logid: 54
                      projid: 324
                      futureKey: "F_O_324_-_2019-08-08T12:12:12"
                      modelid: 13
                      campaigns: 5
                      startDate: "2019-08-08T12:12:12"
                      endDate: "2019-08-08T12:14:53"
                      statusid: 1
                      datasourceid: 1
                      projname: "Santander Lages (324)"
                      result:
                        stats:
                          N: 1000
                          min: 0.01235
                          max: 0.29123
                          mean: 0.15123
                          median: 0.17631
                          std: 0.0531
                        volumetry:
                          1: 100
                          2: 300
                          3: 300
                          4: 300

                  summary: File request

        "400":
          description: Malformed request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "Something went wrong. Try again."

        "406":
          description: Too many concurrent job. (4 by user)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "Too many concurrent jobs."

  /jobs/{jobid}:
    get:
      summary: Downloads the results of a job.
      description: Compresses the results into a zip file and transfer it as a binary blob to the requester.

      parameters:
        - $ref: "#/components/parameters/jobid"
        - in: query
          name: download
          description: If given, download the scoring results
          schema:
            type: boolean

      tags:
        - Job queue

      security:
        - BearerAuth: []
      responses:
        "200":
          description:
            Results the result summary of a given job or download the archived results
            compressed into a zip file
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseJob"
              example:
                status: "success"
                message: ""
                data:
                  id: 312
                  logid: 53
                  projid: 324
                  futureKey: "S_O_324_-_2019-08-08T12:12:12"
                  modelid: "SMS"
                  campaigns: [123, 456, 789]
                  startDate: "2019-08-08T12:12:12"
                  endDate: "2019-08-08T12:14:53"
                  statusid: 1
                  datasourceid: 2
                  projname: "Santander Lages (324)"

                  result:
                    stats:
                      N: 1000
                      min: 0.01235
                      max: 0.29123
                      mean: 0.15123
                      median: 0.17631
                      std: 0.0531
                    volumetry:
                      1: 100
                      2: 300
                      3: 300
                      4: 300

            application/zip:
              schema:
                format: binary

        "500":
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "Something went wrong."

    delete:
      summary: Cancel a running job.
      description: It simply cancels a running job identified by `jobid`.
      parameters:
        - $ref: "#/components/parameters/jobid"
      tags:
        - Job queue

      security:
        - BearerAuth: []

      responses:
        "204":
          description: Job successfully canceled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "success"
                message: "Job S_O_324_-_2019-08-08T12:12:12 cancelled with success."

  # ---
  # :: Model related ::
  # ---
  /model:
    get:
      summary: Gets a list of all available models.
      description: >
        This route lists all the available models currently in production, developed for all the
        internal projects within Flex. Not only that, it also lists generic shelf models and others that
        were conceived specifically to be executed on base datafiles.


        It is also enabled for the future implementation of incremental models and its future specializations 
        for a given user.

      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/sort_by"
        - $ref: "#/components/parameters/sort_direction"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/filter_col"

      tags:
        - Model
        - File handling

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Got list of models.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        allOf:
                          - $ref: "#components/schemas/CommonSort"
                          - properties:
                              users:
                                type: array
                                items:
                                  $ref: "#components/schemas/SummaryModel"
              example:
                status: success
                message: ""
                data:
                  current_page: 1
                  num_pages: 3
                  models:
                    - id: 1
                      projid: 324
                      name: CLUSTER_-_...
                      isActive: true
                      path: /path/to/CLUSTER
                    - ...
        "204":
          description: Empty list.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array
                        items:
                          nullable: true
              example:
                status: success
                message: Empty list.
                data: []

    post:
      summary: Upload a new model.
      description: >
        Used to upload _zipped_, _gzipped_, _bzipped_ or a _tarball_ into the model path structure, 
        inserting its corresponding registry to the database.

      tags:
        - Model
        - File handling

      security:
        - BearerAuth: []

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestModelUpload"
            example:
              name: CONSOLIDADO
              originid: 1
              sericeid: 2
              modelfile: // zipped model containing model_configs.json, pipeline.pkl and pipeline_classes.py

      responses:
        "201":
          description: Successfully uploaded.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#components/schemas/ResponseModel"
              example:
                status: success
                message: Model 3 successfully uploaded.
                data:
                  id: 1
                  projid: 324
                  name: CLUSTER_-_...
                  version: 1.0.0
                  dateCreated: "2019-12-15T14:23:12"
                  dateModified: "2019-12-15T14:23:12"
                  originid: 1
                  serviceid: 2
                  outputid: 1
                  isActive: true
                  path: /path/to/CLUSTER
                  isFile: false
                  isGeneric: false
                  isIncremental: false
                  hits: 0
        "302":
          description: Already exists.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#components/schemas/ResponseModel"
              example:
                status: success
                message: Model 3 already exists
                data:
                  id: 1
                  projid: 324
                  name: CLUSTER_-_...
                  version: 1.0.0
                  dateCreated: "2019-12-15T14:23:12"
                  dateModified: "2019-12-15T14:23:12"
                  originid: 1
                  serviceid: 2
                  outputid: 1
                  isActive: true
                  path: /path/to/CLUSTER
                  isFile: false
                  isGeneric: false
                  isIncremental: false
                  hits: 0
        "400":
          description: Missing request data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              examples:
                NoData:
                  value:
                    status: fail
                    message: No data transfered.
                  summary: No model uploaded.
                MissingKeys:
                  value:
                    status: fail
                    message: One or more required keys are missing.
                  summary: Missing keys.
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Failed extracting SOME_MODEL. Exception: {Python exception}"

  /model/{modelid}:
    get:
      summary: Gets all model metadata and its query.
      description: >
        Fetches all the model inherit metadata, such as its name, creation and modification data as well as the
        id of the project to which it is a model of, its origin and service segmentation type. It also will 
        return flags specifying if the model is incremental (**SUPPORT TO BE IMPLEMENTED**), generic and the 
        number of times it was executed.


        If the `query` parameter is given, it will return the model summary along with its attached query, if
        it supports (`isFile=False`).

      parameters:
        - $ref: "#/components/parameters/modelid"
        - in: query
          name: query
          schema:
            type: boolean
          description: Fetches the model's SQL query if it is attached to an internal Flex project.

      tags:
        - Model
        - File handling

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Fetches either the model metadata or its SQL query.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        oneOf:
                          - type: string
                            description: SQL query.
                          - $ref: "#components/schemas/ResponseModel"
              examples:
                SQLQuery:
                  value:
                    status: success
                    message: ""
                    data: "SELECT ... FROM ... ({IDCG}) ..."
                  summary: With given query argument.
                ModelMetadata:
                  value:
                    status: success
                    message: ""
                    data:
                      id: 1
                      projid: 324
                      name: CLUSTER_-_...
                      version: 1.0.0
                      dateCreated: "2019-12-15T14:23:12"
                      dateModified: "2019-12-15T14:23:12"
                      originid: 1
                      serviceid: 2
                      outputid: 1
                      isActive: true
                      path: /path/to/CLUSTER
                      isFile: false
                      isGeneric: false
                      isIncremental: false
                      hits: 0
                  summary: Without the given query argument.
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: Model 1 not found.
        "406":
          description: Permission error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: Model 1 is only allowed to score files.

    put:
      summary: Edits existing model's parameters.
      description: >
        "Use this route to edit some of the given model's metadata, namely:"

        - `name`;

        - `projid`;

        - `outputid` and

        - `isFile`.

      parameters:
        - $ref: "#/components/parameters/modelid"

      tags:
        - Model
        - File handling

      security:
        - BearerAuth: []

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestModelUpdate"

      responses:
        "200":
          description: Successfully updated.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#components/schemas/ResponseModel"
              example:
                status: success
                message: "Model 1 successfully modified."
                data:
                  id: 1
                  projid: 324
                  name: CLUSTER_-_...
                  version: 1.0.0
                  dateCreated: "2019-12-15T14:23:12"
                  dateModified: "2019-12-15T14:23:12"
                  originid: 1
                  serviceid: 2
                  outputid: 1
                  isActive: true
                  path: /path/to/CLUSTER
                  isFile: false
                  isGeneric: false
                  isIncremental: false
                  hits: 0
        "304":
          description: No request data given.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: success
                message: "Nothing to do."
        "400":
          description: Invalid query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: Given query does not have all the required keywords.
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: Model 1 not found.
        "406":
          description: Query edit not allowed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Model 1 is only allowed to score files."
        "500":
          description: Technical problem.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Something happened. Reason: {Python exception}"

    delete:
      summary: Deletes the given model.
      description: >
        Pops the given model out of our database and returns its now removed metadata back to the client.

      parameters:
        - $ref: "#/components/parameters/modelid"

      tags:
        - Model
        - File handling

      security:
        - BearerAuth: []

      responses:
        "204":
          description: Successfully deleted.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#components/schemas/ResponseModel"
              example:
                status: success
                message: "Model 1 successfully deleted."
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Model 1 does not even exist."
  # ---
  # :: Station related ::
  # ---
  /station:
    get:
      summary: Gets a list of all stations created by the user.
      description: >
        Fetches all the stations identified by the user's `registrationNumber`, listing a quick summary
        of each entry.

      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/sort_by"
        - $ref: "#/components/parameters/sort_direction"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/filter_col"

      tags:
        - Station

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Fetches a list of all the stations defined by the user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        allOf:
                          - $ref: "#components/schemas/CommonSort"
                          - properties:
                              stations:
                                type: array
                                items:
                                  $ref: "#/components/schemas/SummaryStation"

              example:
                status: "success"
                message: ""
                data:
                  - current_page: 1
                    num_pages: 2
                    stations:
                      - id: 3
                        isActive: true
                        name: "Some created Station"
                        registrationNumber: 12345
                        dateCreated: "2019-12-05T18:03:52"
                      - ...
        "204":
          description: Empty list.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array

              example:
                status: "success"
                message: "Empty list"
                data: []

    post:
      summary: Creates a new Station project.
      description: >
        By given the requested `originid` and `serviceid`, the user creates a new station
        container that initially attaches its corresponding generic model. It will be used
        to upload new base files to-be-scored, run said scoring, download reports and download
        the results of this spawned Origin and Service.

      tags:
        - Station

      security:
        - BearerAuth: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                originid: 
                  $ref: "#/components/schemas/originid"
                serviceid:
                  $ref: "#/components/schemas/serviceid"
                name:
                  description: 
                    $ref: '#/components/schemas/SummaryStation/properties/name/description' 
                dictionary:
                  $ref: '#/components/schemas/Dictionary'
              required:
                - originid
                - serviceid
                - name
            example:
              originid: 1
              serviceid: 2
              name: Some station name



      responses:
        "201":
          description: Successfully created.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: '#/components/schemas/ResponseStation'
              example:
                status: success
                message: "Station 1 created."      
                data:
                  id: 1
                  name: CreditCard Station No. 1
                  registrationNumber: 12345
                  dateCreated: 2019-12-03T13:52:28
                  isActive: true
                  dateModified: 2019-12-03T13:52:28
                  dictionary: { AGE: IDADE }
                  hits: 0
                  ks: null
                  model: null
                  originid: 1
                  serviceid: 2


        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Something happened. Exception: {Python exception}"


  /station/{stationid}:
    get:
      summary: Gets details of the given station.
      description: >
        Gets the full entry of the station identified by the given `stationid`. Here the user can see
        how important this entity is since it holds all the important metadata and is the "glue" that
        ties everything together, for some registered origin and some operation segment (service).

      parameters:
        - $ref: "#/components/parameters/stationid"

      tags:
        - Station

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Station details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseStation"
              example:
                status: "success"
                message: ""
                data:
                  id: 1
                  name: CreditCard Station No. 1
                  registrationNumber: 12345
                  dateCreated: 2019-12-03T13:52:28
                  isActive: true
                  dateModified: 2019-12-03T13:52:28
                  dictionary: { AGE: IDADE }
                  hits: 0
                  ks: null
                  model: null
                  originid: 1
                  serviceid: 2

        "404":
          description: Station not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: Station {stationid} not found.

    post:
      summary: Finds the best model of the segment for a requested test base.
      description: >
        If the user uploads a TARGETed datamass, he can use it to locate and attach one of our custom tailored
        models already in production on our internal operations at Flex to the given `stationid`. The found 
        model will be set to this station to be used for all subsequent scorings uploaded to it.

      parameters:
        - $ref: "#/components/parameters/stationid"
        - in: query
          name: find_model
          schema:
            type: boolean
          description:
            Searches for the best model of all the models corresponding to
            the `originid` and `serviceid` registered on the station.

      tags:
        - Station
        - Job queue

      security:
        - BearerAuth: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                baseid:
                  description:
                    $ref: "#/components/schemas/SummaryBase/properties/id/description"
                  type: integer
              required:
                - baseid
            example:
              baseid: 32

      responses:
        "200":
          description: Best model routine enqueued for execution.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: success
                message: "Finding best model on the background. Please wait a bit."
        "400":
          description: Malformed request. `baseid` is missing.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Malformed request."
        "404":
          description: Either station or base not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              examples:
                BaseNotFound:
                  value:
                    status: fail
                    message: "Requested base 32 not found."
                  summary: Base not found.
                StationNotFound:
                  value:
                    status: fail
                    message: "Requested station 1 not found."
                  summary: Station not found.
        "406":
          description: Base file not marked as test.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Provided base 32 is not marked as a Test base. No TARGET column in it."
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Something happened. Exception: {Python exception}"

    put:
      summary: Updates the given station.
      description: >
        Here the user can update some of the basic fields of his/her station, namely its `name` and
        its base-to-model `dictionary`. If the user so desires to "change" his/her station to another
        completely different origin/service, a new station has to be created from scratch.

      parameters:
        - $ref: "#/components/parameters/stationid"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description:
                    $ref: "#/components/schemas/SummaryStation/properties/name/description"
                  type: string
                dictionary:
                  $ref: "#/components/schemas/Dictionary/properties/dictionary"
            example:
              name: "Some other name"
              dictionary: { AGE: IDADE, ID_TELEPHONE_LINE: TELEFONE }

      tags:
        - Station

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Successfully modified
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseStation"
              example:
                status: "success"
                message: "Successfully modified."
                data:
                  id: 1
                  name: Some other name
                  registrationNumber: 12345
                  dateCreated: 2019-12-03T13:52:28
                  isActive: true
                  dateModified: 2019-12-03T13:52:28
                  dictionary: { AGE: IDADE, ID_TELEPHONE_LINE: TELEFONE }
                  hits: 0
                  ks: null
                  model: null
                  originid: 1
                  serviceid: 2

        "400":
          description: No given request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "No request given. There is nothing to update."

        "404":
          description: Station not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: Station {stationid} not found.

    delete:
      summary: Deletes the given station
      description: >
        If requested, the station entry will be "popped" out from our database back to the client so
        it can choose to do some last things with this data.

      parameters:
        - $ref: "#/components/parameters/stationid"

      tags:
        - Station

      security:
        - BearerAuth: []

      responses:
        "204":
          description: Successfully deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseStation"
              example:
                status: "success"
                message: "stationsid=2 successfully deleted."
                data:
                  id: 1
                  name: CreditCard Station No. 1
                  registrationNumber: 12345
                  dateCreated: 2019-12-03T13:52:28
                  isActive: true
                  dateModified: 2019-12-03T13:52:28
                  dictionary: { AGE: IDADE }
                  hits: 0
                  ks: null
                  model: null
                  originid: 1
                  serviceid: 2

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "stationid=921 does not exist."

  /station/{stationid}/base:
    get:
      summary: Gets a list of all uploads by the user.
      description:
        "Responsible for fetching all the uploads done by the current logged
        in user. It just returns a JSON containing just three relevant entries:
        The file unique identifier `id`, its filesystem `path` and the scoring
        flag `isScored` that is true if the file already was scored."

      parameters:
        - $ref: "#/components/parameters/stationid"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/sort_by"
        - $ref: "#/components/parameters/sort_direction"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/filter_col"

      tags:
        - Station
        - File handling

      security:
        - BearerAuth: []

      responses:
        "200":
          description: List of a summary of all entries uploaded by the user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        allOf:
                          - $ref: "#components/schemas/CommonSort"
                          - properties:
                              bases:
                                type: array
                                items:
                                  $ref: "#components/schemas/SummaryBase"
              example:
                status: "success"
                message: ""
                data:
                  - current_page: 1
                    num_pages: 3
                    bases:
                      - id: 5
                        idStation: 1
                        isScored: false
                        path: 12345/sample.csv
                        dateModified: "2019-11-07T08:08:34"

        "204":
          description: No uploaded files
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array
              example:
                status: "success"
                message: "Empty list"
                data:
                  -

    post:
      summary: Upload a new base to the user repository
      description:
        Use this endpoint to upload new base files to your user account. The files will be stored
        in the user's own subfolder `{registrationNumber}/{filename}`. This makes the file management
        easier and the user may download any given file and/or enriched/scored file at any given
        moment.


        The upload **must be done** from a form/buttton named `base`, otherwise the backend will not
        recognize and thus raise a 400 response.

      parameters:
        - $ref: "#/components/parameters/stationid"
        - in: query
          name: test
          schema:
            type: boolean
            description: Whether the uploaded base has a TARGET column to be tested on all available models

      tags:
        - Station
        - File handling

      security:
        - BearerAuth: []

      requestBody:
        description:
          "The request form simply consists of a input form/button named `base`. It accepts
          the following formats:

          - `.csv`: Comma `,` or semi-colon `;` separated values;

          - `.tsv`: Tab separated values;

          - `.xls`: Excel spreadsheet;

          - `.xlsx`: Excel spreadsheet;

          - `.json`: A JSON **file** (not request).
          "

        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                base:
                  type: string
                  format: binary
                  description: Uploaded base file

            example:
              base: "// uploaded file"

      responses:
        "201":
          description: File uploaded successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: Base file unique identifier
              example:
                status: "success"
                message: "File 12345/sample.csv uploaded successfully."
                data:
                  id: 5

        "400":
          description:
            Malformed request. Happens when no file was uploaded or when another form other than
            `base` was used.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "No data transfered."

  /station/{stationid}/base/{baseid}:
    get:
      summary: Download and fetch the given file.
      description:
        Gets all and every metadata associated with the given `baseid` file and returns to the
        client. If the `download` query parameter is given, then it will fetch the actual file
        from the user specific folder.

      tags:
        - Station
        - File handling

      security:
        - BearerAuth: []

      parameters:
        - $ref: "#/components/parameters/baseid"
        - $ref: "#/components/parameters/stationid"

        - in: query
          name: download
          description: Use this if you want to download the `baseid` file.
          schema:
            type: boolean
        - in: query
          name: header
          description: Fetches the list of columns of `baseid` file
          schema:
            type: boolean

      responses:
        "200":
          description: Returns all metadata of the given `baseid`.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        oneOf:
                          - $ref: "#components/schemas/ResponseBase"
                          - $ref: "#components/schemas/ResponseBaseHeader"
                          - type: string
                            format: binary
                            description: Uploaded base file

              examples:
                BaseMetadata:
                  value:
                    status: "success"
                    message: ""
                    data:
                      id: 5
                      idStation: 1
                      isActive: 1
                      isScored: false
                      isTest: false
                      registrationNumber: 12345
                      path: 12345/sample.csv
                      dateCreated: 2019-10-31T11:30:12
                      dateModified: 2019-10-31T11:30:12
                  summary: If no query arguments are given, displays all info of Base.

                BaseHeader:
                  value:
                    id: 5
                    idStation: 1
                    isScored: false
                    isTest: false
                    path: 12345/sample.csv
                    header:
                      - ID_MAILING
                      - AGE
                      - CODE_GENDER_CLIENT
                      - NU_DDD
                      - TEL_LINE
                  summary: If `header` is true, fetches the file header.

            application/octet-stream:
              schema:
                description: File binary
                type: string
                format: binary
              example: // Raw data file (sample.csv)


                COL1,COL2,COL3,...

                X,Y,Z,...

                ...

        "404":
          description: Requested file not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "Base identified by 5 does not exist."

    delete:
      summary: Deletes the given file.
      description: Pops the `baseid` file uploaded by the user.
      tags:
        - Station
        - File handling

      security:
        - BearerAuth: []

      parameters:
        - $ref: "#/components/parameters/stationid"
        - $ref: "#/components/parameters/baseid"

      responses:
        "204":
          description: File successfully deleted.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#components/schemas/ResponseBase"
              example:
                status: "success"
                message: "5 successfully deleted."
                data:
                  id: 5
                  idStation: 1
                  isActive: false
                  isScored: false
                  isTest: false
                  registrationNumber: 12345
                  path: 12345/sample.csv
                  dateCreated: 2019-10-31T11:30:12
                  dateModified: 2019-10-31T11:30:12

        "404":
          description: File not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: "fail"
                message: "43 does not even exist."

  /station/{stationid}/base/{baseid}/job:
    get:
      summary: Gets a list of all the executed jobs for the given base.
      description: >
        This is the list of all jobs executed by a determined station and base. Typically it will
        return just one entry, but it may contain multiple items if the user so desires to score the 
        same base after changing the generic model by some the segmentation's specialiation through the
        `POST /station/{stationid}` route.

      parameters:
        - $ref: "#/components/parameters/stationid"
        - $ref: "#/components/parameters/baseid"

        - $ref: "#/components/parameters/stationid"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/sort_by"
        - $ref: "#/components/parameters/sort_direction"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/filter_col"

      tags:
        - Station
        - Job queue

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Paginated list of jobs.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        allOf:
                          - $ref: "#components/schemas/CommonSort"
                          - properties:
                              users:
                                type: array
                                items:
                                  $ref: "#components/schemas/SummaryJob"
              example:
                status: success
                message: ""
                data:
                  current_page: 1
                  num_pages: 4
                  jobs:
                    - id: 321
                      logid: 53
                      projid: 324
                      statusid: 1
                      datasourceid: 2
                    - ...
        "204":
          description: No jobs ran on this base.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array
                        items:
                          nullable: true
              example:
                status: success
                message: "No jobs ran by the user."
                data: []

    post:
      summary: Execute a job on the given base.
      description: >
        After uploading and registring a base to the station, you may call this route to fire up the
        AI engine to classify your mailings using the best model found for your problem, or the generic
        shelf model if you did not visited the `POST /station/{stationid}` endpoint.

      parameters:
        - $ref: "#/components/parameters/stationid"
        - $ref: "#/components/parameters/baseid"
        - $ref: "#/components/parameters/output_format"

      tags:
        - Station
        - Job queue

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Job successfully enqueued for execution.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseJob"
              example:
                status: success
                message: ""
                data:
                  id: 123
                  logid: 321
                  projid: 324
                  futureKey: "F_O_324_-_2019-08-08T12:12:12"
                  modelid: "OPB"
                  campaigns: 1
                  startDate: "2019-08-08T12:12:12"
                  endDate: "2019-08-08T12:14:53"
                  statusid: 0
                  datasourceid: 1
                  projname: "Santander Lages (324)"

                  result: null
        "400":
          description: No model on station.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Station 1 has no attached model. Please contact us."
        "404":
          description: Base or station not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              examples:
                BaseNotFound:
                  value:
                    status: fail
                    message: "Requested base 32 not found."
                  summary: Base not found.
                StationNotFound:
                  value:
                    status: fail
                    message: "Requested station 1 not found."
                  summary: Station not found.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Something happened. Exception: {Python exception}"

  /station/{stationid}/base/{baseid}/job/{jobid}:
    get:
      summary: Gets the full job metadata and downloads the scoring results.
      description: >
        This route is used to fetch either the full Job entry along with some basic statistics and
        to download the execution results in a CSV formatted data-table, if the `download` query parameter
        is given.

      parameters:
        - $ref: "#/components/parameters/stationid"
        - $ref: "#/components/parameters/baseid"
        - $ref: "#/components/parameters/jobid"

        - in: query
          name: download
          schema:
            type: boolean
          description: Request to download the job results.

      tags:
        - Station
        - Job queue

      security:
        - BearerAuth: []

      responses:
        "200":
          description:
            Results the result summary of a given job or download the archived results
            compressed into a zip file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#/components/schemas/ResponseJob"
              example:
                status: "success"
                message: ""
                data:
                  id: 312
                  logid: 532
                  projid: 324
                  futureKey: "F_O_324_-_2019-08-08T12:12:12"
                  modelid: "OPB"
                  campaigns: 1
                  startDate: "2019-08-08T12:12:12"
                  endDate: "2019-08-08T12:14:53"
                  statusid: 1
                  datasourceid: 1
                  projname: "Santander Lages (324)"

                  result:
                    stats:
                      N: 1000
                      min: 0.01235
                      max: 0.29123
                      mean: 0.15123
                      median: 0.17631
                      std: 0.0531
                    volumetry:
                      1: 100
                      2: 300
                      3: 300
                      4: 300

            application/zip:
              schema:
                format: binary

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Job 312 not found."

        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: "Something went wrong. Exception: {Python exception}"

  # ---
  # :: Debug related ::
  # ---
  /debug/logs:
    get:
      summary: Logs list.
      description:
        Fetches all the logs ever registered by the backend, regardless of
        the user, getting only the very beginning of each message. This
        endpoint is designed specifically for the admins to provide a quick
        access to all the activity going through the service.

      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/sort_by"
        - $ref: "#/components/parameters/sort_direction"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/filter_col"

      tags:
        - Debug

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Listing of all the logs registered.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: object
                        allOf:
                          - $ref: "#components/schemas/CommonSort"
                          - properties:
                              logs:
                                type: array
                                items:
                                  $ref: "#components/schemas/SummaryLog"
              example:
                status: "success"
                message: ""
                data:
                  current_page: 1
                  num_pages: 6
                  logs:
                    - id: 123
                      level: 10
                      registrationNumber: 12345
                      timestamp: "2019-11-01T13:42:38"
                      message: "Job ran successfully"
                    - ...

        "204":
          description: No logs found.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array

                example:
                  status: "success"
                  message: "No logs found."
                  data: []

  /debug/logs/{logid}:
    get:
      summary: Fetches details of the given log.
      description:
        When `logid` is provided, it fetches the full log message with
        additional info not provided by the listing. Also, if the `load_job`
        query parameter is given and is true, it will also load the job
        object associated with the particular log entry.

      parameters:
        - $ref: "#/components/parameters/logid"
        - in: query
          description: Whether to load the job object as well or not.
          name: load_job
          schema:
            type: boolean
            default: false

      tags:
        - Debug

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Full log identified by `logid`.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#components/schemas/ResponseLog"

              examples:
                NoJobLoaded:
                  value:
                    status: "success"
                    message: ""
                    data:
                      id: 123
                      level: 30
                      registrationNumber: 12345
                      timestamp: "2019-11-01T13:42:38"
                      message: "Got exception: <exception details>"
                      job: null
                  summary: "When load_job is not given"

                JobLoaded:
                  value:
                    status: "success"
                    message: ""
                    data:
                      id: 456
                      level: 10
                      registrationNumber: 12345
                      timestamp: "2019-11-01T13:42:38"
                      message: "Job ran successfully"
                      job:
                        logid: 53
                        projid: 324
                        futureKey: "S_O_324_-_2019-08-08T12:12:12"
                        modelid: "SMS"
                        campaigns: [123, 456, 789]
                        startDate: "2019-08-08T12:12:12"
                        endDate: "2019-08-08T12:14:53"
                        statusid: 1
                        datasourceid: 2
                        projname: "Santander Lages (324)"

                        result:
                          stats:
                            N: 1000
                            min: 0.01235
                            max: 0.29123
                            mean: 0.15123
                            median: 0.17631
                            std: 0.0531
                          volumetry:
                            1: 100
                            2: 300
                            3: 300
                            4: 300
                  summary: "When load_job is given and is true"

        "404":
          description: Log not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"

              example:
                status: "fail"
                message: "Log 123 does not exist."

  /debug/health:
    get:
      summary: Checks the status of all the necessary services.
      description: >
        Polls all the services used by this API to check their health status, as well as
        the latency of the connection, if available.


        Optionally you can choose to check the health of all the internal Flex databases of
        all registered projects and their respective latencies.

      parameters:
        - in: query
          name: check_projects
          description:
            Whether to check the status of all the servers of each active
            project.
          schema:
            type: boolean
            default: false

      tags:
        - Debug

      security:
        - BearerAuth: []

      responses:
        "200":
          description: List containing the status of all services.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonRespons"
                  - properties:
                      data:
                        type: object
                        properties:
                          redis:
                            type: object
                            properties:
                              status:
                                type: string
                                enum:
                                  - online
                                  - offline
                          mysql:
                            type: object
                            properties:
                              status:
                                type: string
                                enum:
                                  - online
                                  - offline
                          vulkan:
                            type: object
                            properties:
                              status:
                                type: string
                                default: online
                                enum:
                                  - online
                                  - offline
                              uptime:
                                type: string
                          projects:
                            type: array
                            items:
                              type: object
                              properties:
                                server_IP:
                                  type: string
                                database:
                                  type: string
                                status:
                                  type: string
                                  enum:
                                    - online
                                    - offline
                                latency:
                                  type: number
                            # nullable: true
              examples:
                WithoutArg:
                  value:
                    status: "success"
                    message: "Status report"
                    data:
                      redis:
                        status: "online"
                      mysql:
                        status: "online"
                      vulcan:
                        status: "online"
                        uptime: "0:32:39.112349"
                      projects: null
                  summary: Without check_projects argument

                WithArg:
                  value:
                    status: "success"
                    message: "Status report"
                    data:
                      redis:
                        status: "online"
                      mysql:
                        status: "online"
                      vulcan:
                        status: "online"
                        uptime: "0:32:39.112349"
                      projects:
                        server_IP: "123.456.789.132"
                        database: "SOMEDATABASE"
                        status: "online"
                        latency: 0.3125351345123

                  summary: With check_projects argument

  # ---
  # :: Stream related ::
  # ---
  /stream:
    get:
      summary: SSE notification stream.
      description: >
        Implementation of [SSEs](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events)
        to update clients when jobs finish executing.


        Attach a listener to the `result` channel to scan for execution updates. Alternatively, attach a listener to 
        the 'best-model' channel to watch for the execution results of the best model finding route.
      tags:
        - Stream
      responses:
        "200":
          description: Execution status update after running
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/SSE"
              example:
                event: "result"
                data:
                  payload:
                    status: "success"
                    message: ""
                    data:
                      - id: 312
                        logid: 53
                        projid: 324
                        futureKey: "S_O_324_-_2019-08-08T12:12:12"
                        modelid: "SMS"
                        campaigns: [123, 456, 789]
                        startDate: "2019-08-08T12:12:12"
                        endDate: "2019-08-08T12:14:53"
                        statusid: 1
                        datasourceid: 2
                        projname: "Santander Lages (324)"

                        result:
                          stats:
                            N: 1000
                            min: 0.01235
                            max: 0.29123
                            mean: 0.15123
                            median: 0.17631
                            std: 0.0531
                          volumetry:
                            1: 100
                            2: 300
                            3: 300
                            4: 300

  # ---
  # :: Misc ::
  # ---
  /misc/namesex:
    get:
      summary: Lists all the names known to us.
      description: >
        In this route you will fetch the filterable list of names that we use to enrich our datasets,
        that can be employed to discover some person's sex by his/her first name.

      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/sort_by"
        - $ref: "#/components/parameters/sort_direction"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/filter_col"
        - in: query
          name: count
          schema:
            type: boolean
          description: Gets the total number of registries.

      tags:
        - Misc

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Gets a paginated list of the registries
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        allOf:
                          - $ref: "#components/schemas/CommonSort"
                          - properties:
                              names:
                                type: array
                                items:
                                  $ref: "#components/schemas/ResponseNameSex"

              example:
                status: success
                message: ""
                data:
                  current_page: 1
                  num_pages: 12635
                  names:
                    - id: 1
                      name: John
                      sex: M
                    - id: 2
                      name: Jane
                      sex: F
                    - ...
        "204":
          description: Empty list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array
                        items:
                          nullable: true

              example:
                status: success
                message: Empty list.
                data: []

    post:
      summary: Registers a new Name-Sex entry.
      description: >
        Registers new names and its related sex.

      tags:
        - Misc

      security:
        - BearerAuth: []

      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/RequestNameSex"
                - type: array
                  items:
                    $ref: "#/components/schemas/RequestNameSex"

      responses:
        "200":
          description: Entry(ies) successfully registered.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/CommonResponse"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#components/schemas/ResponseNameSex"
              example:
                status: success
                message: Names created.
                data:
                  - id: 1235125
                    name: John
                    sex: M

        "500":
          description: Failure
          content:
            application/json:
              schema:
                $ref: "#components/schemas/CommonResponse"
              example:
                status: fail
                message: "Something happened. Exception: {Python exception}"

  /misc/namesex/{nameid}:
    get:
      summary: Get the given NameSex entry.
      description: >
        Retrieved the given NameSex entry identified by `{nameid}`.

      parameters:
        - $ref: "#/components/parameters/nameid"

      tags:
        - Misc

      security:
        - BearerAuth: []

      responses:
        "200":
          description: Got {nameid}.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#components/schemas/ResponseNameSex"

              example:
                status: success
                message: ""
                data:
                  id: 123712
                  name: John
                  sex: M

        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/CommonResponse"
              example:
                status: fail
                message: Name identified by 123712 not found.

    put:
      summary: Edits the given NameSex entry.
      description: >
        Edits either the name and/or sex of the given `nameid`.

      parameters:
        - $ref: "#/components/parameters/nameid"

      tags:
        - Misc

      security:
        - BearerAuth: []

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestNameSex"
            examples:
              OnlyName:
                value:
                  name: Johannes
                summary: Only update name.
              Both:
                value:
                  name: Julia
                  sex: F
                summary: Update both name and sex.

      responses:
        "200":
          description: "Successfully modified."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#components/schemas/ResponseNameSex"

              example:
                status: success
                message: Successfully modification.
                data:
                  id: 12939123
                  name: John
                  sex: M

        "304":
          description: Nothing to do.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/CommonResponse"
              example:
                status: success
                message: Nothing to do.

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: Name 123212 does not exist.

    delete:
      summary: Deletes the given NameSex entry.
      description: >
        Pops the given NameSex entry and returns it to the client.

      parameters:
        - $ref: "#/components/parameters/nameid"

      tags:
        - Misc

      security:
        - BearerAuth: []

      responses:
        "204":
          description: Successfully deleted.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#components/schemas/CommonResponse"
                  - properties:
                      data:
                        $ref: "#components/schemas/ResponseNameSex"
              example:
                status: success
                message: Name 519726 successfully deleted.
                data:
                  id: 519726
                  name: John
                  sex: M
        "404":
          description: "Register not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonResponse"
              example:
                status: fail
                message: Name 123125 does not exist.

components:
  schemas:
    # Summary {{
    SummaryUser:
      type: object
      properties:
        id:
          description: User's id.
          type: integer
        name:
          description: User's name.
          type: string
        registrationNumber:
          description:
            $ref: "#/components/parameters/registrationNumber/description"
          type: integer
        dateCreated:
          description: User's registraton datetime.
          type: string

    SummaryBase:
      type: object
      properties:
        id:
          description: Base file identifier.
          type: integer
        idStation:
          description:
            $ref: "#/components/parameters/stationid/description"
          type: integer
        isScored:
          description: Whether file was already scored or not.
          type: boolean
        isTest:
          description: Whether base can be used to find a best model (has to have a TARGET column).
          type: boolean
        path:
          description: Relative file location on the filesystem.
          type: string

    SummaryEnterprise:
      type: object
      properties:
        id:
          description:
            $ref: "#/components/parameters/enterpriseid/description"
          type: integer
        name:
          description: Enterprise name.
          type: string
        cnpj:
          description: Enterprise unique CNPJ.
          type: integer
          nullable: true
        domain:
          description: The scope of its users.
          type: string
        dateCreated:
          description: Datetime when the enterprise was registered.
          type: string

    SummaryJob:
      type: object
      properties:
        id:
          description: Job's id.
          type: integer
        logid:
          description: This Job's related log entry id.
          type: integer
        projid:
          description: Links to the project the job came from, if it exists.
          type: integer
          nullable: true

        statusid:
          description: Status code of execution.
          type: integer
          enum:
            - -2: Empty Dataframe
            - -1: Error
            - 0: Running
            - 1: Success

        datasourceid:
          description: Data source enum.
          type: integer
          enum:
            - 1: Uploaded base files
            - 2: Flex internal databases

    SummaryJobResult:
      type: object
      properties:
        id:
          description: JobResponse's id.
          type: integer
        jobid:
          description: To which job these results is related to.
          type: integer

    SummaryLog:
      type: object
      properties:
        id:
          description: Log id.
          type: integer
        level:
          description: Log level.
          type: integer
          enum:
            - 00
            - 10
            - 20
            - 30
            - 40
            - 50
        registrationNumber:
          description:
            $ref: "#/components/parameters/registrationNumber/description"
          type: integer
        timestamp:
          description: Event registration date.
          type: string
        message:
          description: The log message itself.
          type: string

    SummaryModel:
      type: object
      properties:
        id:
          description: 
            $ref: '#/components/parameters/modelid/description'
          type: integer
        projid:
          description: To which project it is model of, if any.
          type: integer
          nullable: true
        name:
          description: Model name.
          type: string
        isActive:
          description: Whether the model is active or not.
          type: boolean
        path:
          description: Where the model files are located within the server.
          type: string

    SummaryNameSex:
      type: object
      properties:
        name:
          description: Name entry.
          type: string
        sex:
          description: Sex of name.
          type: string

    SummaryProject:
      type: object
      properties:
        id:
          description: Project id.
          type: integer
        name:
          description: Project name.
          type: string

    SummaryStation:
      type: object
      properties:
        id:
          description: Station id.
          type: integer
        name:
          description: Station name.
          type: string
        registrationNumber:
          description:
            $ref: "#/components/parameters/registrationNumber/description"
          type: integer
        dateCreated:
          description: When the station was created.
          type: string
        isActive:
          description: Whether the station is active or not.
          type: boolean
    #}}

    # Response {{
    ResponseUser:
      allOf:
        - $ref: "#components/schemas/SummaryUser"
        - properties:
            email:
              description: User's e-mail.
              type: string
            isAdmin:
              description: Whether the user has administrative rights or not.
              type: boolean
            isActive:
              description: Whether the user registry is active or not.
              type: boolean
            idEnterprise:
              description:
                $ref: "#/components/parameters/enterpriseid/description"
              type: integer
            projects:
              description: Allowed projects the user can run.
              type: array
              items:
                type: integer

    ResponseBase:
      allOf:
        - $ref: "#components/schemas/SummaryBase"
        - properties:
            registrationNumber:
              description:
                $ref: "#/components/parameters/registrationNumber/description"
              type: integer

            isActive:
              description: Whether base is active or not.
              type: boolean
            inDisk:
              description: Whether base is physically available on the server harddrives.
              type: boolean
            dateCreated:
              description: Base's creation date.
              type: string
            dateModified:
              description: Last modification date.
              type: string

    ResponseBaseHeader:
      allOf:
        - $ref: "#components/schemas/SummaryBase"
        - properties:
            header:
              type: array
              items:
                type: string
              description: List of base column names.

    ResponseEnterprise:
      allOf:
        - $ref: "#components/schemas/SummaryEnterprise"
        - properties:
            dateModified:
              description: Last modification date.
              type: string
            isActive:
              description: Whether this registry is active or not.
              type: boolean

    ResponseJob:
      allOf:
        - $ref: "#components/schemas/SummaryJob"
        - properties:
            futureKey:
              description: >
                A unique string identifier for the Job, formatted as 
                `{datasourceid}_O_${projid}_-_{startDate}`.
              type: string
              deprecated: true
              nullable: true
            modelid:
              description: The model this job executed.
              type: integer
            campaigns:
              description: List of internal Flex campaigns executed or `baseid` files.
              type: array
              items:
                type: integer
            startDate:
              description: Datetime when the job started its execution.
              type: string
            endDate:
              description: Datetime when the job ended its execution.
              type: string
            result:
              $ref: "#components/schemas/ResponseJobResult"

    ResponseJobResult:
      type: object
      properties:
        stats:
          type: object
          properties:
            N:
              description: Total number of rows.
              type: integer
            min:
              description: Minimum propensity.
              type: number
            max:
              description: Maximum propensity.
              type: number
            median:
              description: Median propensity.
              type: number
            mean:
              description: Mean propensity.
              type: number
            std:
              description: Propensities standard deviation œÉ.
              type: number
        volumetry:
          type: object
          properties:
            1:
              type: number
            2:
              type: number
            3:
              type: number
            ...:
              type: number

    ResponseLog:
      allOf:
        - $ref: "#components/schemas/SummaryLog"
        - properties:
            job:
              $ref: "#components/schemas/ResponseJobResult"

    ResponseModel:
      allOf:
        - $ref: "#components/schemas/SummaryModel"
        - properties:
            version:
              description: Model version number.
              type: string
            dateCreated:
              description: When the model was first created.
              type: string
            dateModified:
              description: When the model was last modified.
              type: string
            originid:
              $ref: "#/components/schemas/originid"
            serviceid:
              $ref: "#/components/schemas/serviceid"
            outputid:
              $ref: "#/components/schemas/outputid"
            isFile:
              description: Whether the model only supports files or not.
              type: boolean
            isGeneric:
              description: Whether the model is generic or not.
              type: boolean
            isIncremental:
              description: Whether the model supports incremental learning or not.
              type: boolean
            hits:
              description: Number of times the model was invoked.
              type: integer

    ResponseNameSex:
      allOf:
        - properties:
            id:
              description: NameSex entry id.
              type: integer
        - $ref: "#components/schemas/SummaryNameSex"

    ResponseProject:
      type: object
      properties:
        allOf:
          $ref: "#components/schemas/SummaryProject"
          properties:
            server:
              description: Project server IP address.
              type: string
            database:
              description: Project database.
              type: string
            isActive:
              description: Whether the project is active or not.
              type: boolean
            isWeb:
              description: Whether the project can be viewed by a web client or not.
              type: boolean
            model:
              type: array
              items:
                $ref: "#components/schemas/ResponseModel"

    ResponseStation:
      allOf:
        - $ref: "#components/schemas/SummaryStation"
        - properties:
            dateModified:
              description: Datetime when the station was last modified.
              type: string
            dictionary:
              description: "Base-model column dictionary `{BASE_COL: MODEL_COL}`."
              type: object
            ks:
              description: KS of the best model found, if given.
              type: number
              nullable: true
            hits:
              description: Number of times this station was excetuted.
              type: integer
            originid:
              $ref: "#components/schemas/originid"
            serviceid:
              $ref: "#components/schemas/serviceid"
            modelid:
              description:
                $ref: "#components/parameters/modelid/description"
              type: integer
            model:
              $ref: "#components/schemas/ResponseModel"
    #}}

    # Request {{
    RequestUserRegistration:
      type: object
      properties:
        registrationNumber:
          description:
            $ref: "#/components/parameters/registrationNumber/description"
          type: integer
        name:
          description:
            $ref: "#components/schemas/SummaryUser/properties/name/description"
          type: string
        email:
          description:
            $ref: "#components/schemas/ResponseUser/properties/email/description"
          type: string
        password:
          description: User's password.
          type: string
        isAdmin:
          description:
            $ref: "#components/schemas/ResponseUser/properties/isAdmin/description"
          type: boolean
          default: false
        projects:
          description:
            $ref: "#components/schemas/ResponseUser/properties/projects/description"
          type: array
          default: []

    RequestJobFlex:
      type: object
      properties:
        IDs:
          description: List of campaigns to be executed.
          type: array
          items:
            type: integer
        projid:
          description: Project's unique identifier.
          type: integer
        projname:
          description: Project's name.
          type: string
        modelid:
          description: Selected model to be run.
          type: string
        isPerCampaign:
          description: Whether the campaigns in `IDs` should be individually scored or not.
          type: boolean
      required:
        - IDs
        - projid
        - modelid

    RequestJobFile:
      type: object
      properties:
        baseid:
          description: Base file unique identifier.
          type: integer
        projid:
          description: Project's unique identifier.
          type: integer
        projname:
          description: Project's name.
          type: string
        modelid:
          description: Selected model to be run.
          type: string
      required:
        - baseid
        - projid
        - modelid

    RequestNameSex:
      type: object
      properties:
        name:
          description: Some name.
          type: string
        sex:
          description: It's correct sex.
          type: string

    RequestModelUpdate:
      type: object
      properties:
        name:
          description: Model name.
          type: string
        projid:
          description:
            $ref: "#/components/parameters/projid/description"
          type: integer
        originid:
          $ref: "#/components/schemas/originid"
        serviceid:
          $ref: "#/components/schemas/serviceid"
        outputid:
          $ref: "#/components/schemas/outputid"
        isFile:
          description:
            $ref: "#components/schemas/ResponseModel/isFile/description"
          type: boolean
        query:
          description: Model's SQL query.
          type: string

    RequestModelUpload:
      type: object
      properties:
        name:
          description: Model name.
          type: string
        originid:
          $ref: "#components/schemas/originid"
        serviceid:
          $ref: "#components/schemas/ResponseModel/serviceid"
        projname:
          description: Optional project name.
          type: string
        projid:
          description: Optional project id.
          type: integer
        modelfile:
          description: Zipped model file.
          type: string
          format: binary

      required:
        - name
        - originid
        - serviceid
        - modelfile

    #}}

    # Common {{
    CommonSort:
      properties:
        current_page:
          description: Current page number.
          type: integer
        num_pages:
          description: Number of pages.
          type: integer

    CommonFilter:
      properties:
        filter:
          description: Filter the results by `filter` query matching on all columns by default.
          type: string
        filter_col:
          description: Column name to filter by.
          type: string
          default: All columns

    CommonResponse:
      type: object
      properties:
        status:
          description: Response status text.
          type: string
        message:
          description: Brief response message.
          type: string

    #}}

    # Misc {{
    Campaign:
      type: object
      properties:
        id:
          description: Campaign's unique identifier.
          type: integer
        name:
          description: Campaign's name.
          type: string
        groupName:
          description: Campaign's group name.
          type: string
        dateStart:
          description: When did campaign cycle started.
          type: string

    SSE:
      type: object
      properties:
        event:
          description: SSE channel name.
          default: "result"
          type: string
        data:
          description: SSE payload.
          type: object
          properties:
            payload:
              $ref: "#/components/schemas/ResponseJob"

    Dictionary:
      properties:
        dictionary:
          type: object
          properties:
            TARGET:
              type: string
              description: Sale column name.
            CODE_GENDER_CLIENT:
              type: string
              description: Sex column name.
            AGE:
              type: string
              description: Age column name.
            ID_TELEPHONE_LINE:
              type: string
              description: Phone type column name (landline, mobile, etc).
            NU_DDD:
              type: string
              description: DDD column name.

    originid:
      description: Origin lookup ID.
      type: integer
      enum:
        - 1: CONTACT
        - 2: COBRAN√áA (Debt collection)
    serviceid:
      description: ID of the kind of segmentation (service).
      type: integer
      enum:
        - 1: CAPITALIZA√á√ÉO (Capitalization)
        - 2: CART√ïES (Card sale)
        - 3: SEGUROS (Insurance sale)
        - 4: SEGUROS E CAPITALIZA√á√ÉO (Insurance and capitalization)
        - 5: BENEFICIO (Welfare)
        - 6: VOLUME (Volume)
        - 7: SERVI√áOS (Services)
        - 8: FINANCEIRO (Finance)
    outputid:
      description: ID of the default output format.
      type: integer
      enum:
        - 1: external
        - 11: AYTY_CRM
    #}}

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  parameters:
    registrationNumber:
      in: path
      name: registrationNumber
      required: true
      schema:
        type: integer
      description: User's registration number.

    projid:
      in: path
      name: projid
      required: true
      schema:
        type: integer
      description: Project unique identifier.

    baseid:
      in: path
      name: baseid
      required: true
      schema:
        type: integer
      description: Base file unique identifier.

    jobid:
      in: path
      name: jobid
      required: true
      schema:
        type: integer
      description: Job unique identifier.

    logid:
      in: path
      description: Log unique identifier.
      name: logid
      schema:
        type: integer
      required: true

    stationid:
      in: path
      name: stationid
      required: true
      schema:
        type: integer
      description: Station unique identifier.

    enterpriseid:
      in: path
      name: enterpriseid
      required: true
      schema:
        type: integer
      description: Enterprise unique identifier.

    nameid:
      in: path
      name: nameid
      required: true
      schema:
        type: integer
      description: Namesex unique identifier.

    modelid:
      in: path
      name: modelid
      required: true
      schema:
        type: integer
      description: Model unique identifier.

    # Sorting parameters
    page:
      in: query
      name: page
      schema:
        type: integer
      description: Desired pagination page.

    per_page:
      in: query
      name: per_page
      schema:
        type: integer
        default: 25
      description: Number of registers to fetch by page.

    sort_by:
      in: query
      name: sort_by
      schema:
        type: string
      description: Which column to sort by. Depends on the resource.

    sort_direction:
      in: query
      name: sort_direction
      schema:
        type: string
        enum:
          - asc
          - desc
      description: To which direction the column should be sorted.

    # Filter parameters
    filter:
      in: query
      name: filter
      schema:
        type: string
        description: A query to filter the results by. (Defaults to %.)
        # default: Everything.

    filter_col:
      in: query
      name: filter_col
      schema:
        type: string
        description: Which column to filter by. (Search on all columns by default.)
        # default: All columns.

    # Misc
    output_format:
      in: query
      name: output_format
      schema:
        type: string
        enum:
          - ayty
          - external
        default: external
      description: Format of the scored base.