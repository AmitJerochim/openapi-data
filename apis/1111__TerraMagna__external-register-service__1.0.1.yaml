openapi: "3.0.2"

info:
  title: External TerraMagna's Register Service API
  version: "1.0.1"
  description: |
    # Introduction

    The Register Service API expose requests that interacts with operations,
    producers and farms, i.e. any financial information present in the FIDES system
    will pass by this API.

    ## Authorization

    Authorization follows the standard pattern used by other TerraMagna's APIs:
    authenticate with the IAM service and send the token in the `Authorization` header.

    ## Dates and Timestamps

    All dates and timestamps used in the API interface are in [RFC 3339] format.
    Eposed values are in the [Coordinated Universal Time (UTC)] time zone.

    [RFC 3339]: https://tools.ietf.org/html/rfc3339#section-5.6
    [Coordinated Universal Time (UTC)]: https://en.wikipedia.org/wiki/Coordinated_Universal_Time

    ## Pagination

    All listing operations provide pagination capabilities in the form of the parameters
    `page` and `size` which both need to be specified and be _strictly positives_ (i.e.
    pages start at index 1).

servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/TerraMagna/external-register-service/1.0.0

tags:
  - name: Register
    description: Register an operation.
    
paths:
  /register:
    post:
      tags: [Register]
      operationId: register
      summary: Register information about the operation.
      description: |
        Register the financial information and creates
        the farm registers for the associated areas.

      security:
        - internalAuthorization: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewRegister"
      responses:
        "201":
          description: |
            Successfully created register.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Register"
        "404":
          $ref: "#/components/responses/404NotFound"
        "422":
          $ref: "#/components/responses/422UnprocessableEntity"
        "403":
          $ref: "#/components/responses/403Forbidden"
        default:
          $ref: "#/components/responses/DefaultResponse"
  /register/{registerId}:
    put:
      tags: [Register]
      operationId: updateRegister
      summary: Update information about the register.
      description: |
        Updates the financial information and creates
        the farm registers for the associated areas.
        
        Farm registers that will be added need to be passed as `NewFarmRegister`,
        otherwise it will be considered an error since they were not created before.
      security:
        - internalAuthorization: []
      parameters:
        - in: path
          name: registerId
          required: true
          description: The ID of the register being updated.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRegister"
      responses:
        "201":
          description: |
            Successfully created a register.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Register"
        "404":
          $ref: "#/components/responses/404NotFound"
        "422":
          $ref: "#/components/responses/422UnprocessableEntity"
        "403":
          $ref: "#/components/responses/403Forbidden"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /registers:
    get:
      tags: [Register]
      operationId: listAllRegisters
      summary: List the registers for all client.
      description: List all registers for all clients.
      security:
        - internalAuthorization: []
      parameters:
        - $ref: "#/components/parameters/after"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
      responses:
        "200":
          description: Successfully returned a page.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterPage"
        "204":
          description: No registers available
        default:
          $ref: "#/components/responses/DefaultResponse"

components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT

    internalAuthorization:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    after:
      name: after
      required: false
      in: query
      description: |
        Minimum timestamp to use as a filter during the operation.

        This provides an interface for clients fetching only the resources created
        after the provided timestamp, instead of all of them.

        If no value is provided, the response will contains _all_ the resources.
      schema:
        $ref: "#/components/schemas/DateTime"

    page:
      name: page
      in: query
      required: true
      description: |
        Number of the page requested.
      schema:
        type: number
        format: int32
        minimum: 0
        maximum: 6553500
        exclusiveMinimum: true
      example: 2

    size:
      name: size
      in: query
      required: true
      description: |
        Size of the pages requested.
      schema:
        type: number
        format: int32
        minimum: 50
        maximum: 65535
        exclusiveMinimum: true
      example: 50

  responses:
    403Forbidden:
      description: The user doesn't have authorization to execute the operation.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - UNAUTHORIZED
                  message:
                    type: string
                    enum:
                      - The user doesn't have access to the operation
                required:
                  - code
                  - message
            required:
              - error

    404NotFound:
      description: The resource wasn't found.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - REGISTER_NOT_FOUND
                      - PRODUCER_NOT_FOUND
                  message:
                    type: string
                    example: The register '3fa85f64-5717-4562-b3fc-2c963f66afa6' was not found.

                required:
                  - code
                  - message
            required:
              - error

    422UnprocessableEntity:
      description: |
        The request contains some semantic error and could not
        be processed.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - OPERATION_MISSING
                  message:
                    type: string
                    example: The operation data for register '3fa85f64-5717-4562-b3fc-2c963f66afa6' was not found.
                required:
                  - code
                  - message
            required:
              - error

    DefaultResponse:
      description: |
        Unknown error that may occurr due to unexpected errors inside
        code, infrastructure errors, etc.
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        enum:
                          - INTERNAL_ERROR
                      message:
                        type: string
              - type: string

  schemas:
    Id:
      description: |
        An Entity's Identifier.

        This provides an unified interface for handling all the identifiers used
        in the API.
      type: string
      format: uuid
      readOnly: true

    DateTime:
      description: |
        A timestamp in the [RFC 3339] format.

        [RFC 3339]: https://tools.ietf.org/html/rfc3339#section-5.6
      type: string
      format: date-time
      example: "1996-12-19T16:39:57-03:00"

    Date:
      description: |
        ISO 8601 date in the UTC time zone. Its value should be formatted in the
        format described in [RFC 3339].

        [RFC 3339]: https://tools.ietf.org/html/rfc3339#section-5.6
      type: string
      format: date
      example: "1996-12-19"

    Hyperlink:
      description: |
        A REST Hypermedia link, with an associated HTTP method that should be
        used in the request.
      type: object
      properties:
        type:
          type: string
          enum:
            - GET
            - POST
            - PATCH
            - DELETE
        href:
          type: string
          format: uri
      required: [type, href]
      example:
        type: GET
        href: /registers?page=1&size=50

    #
    # Farm Register
    #

    NewFarmRegister:
      type: object
      properties:
        name:
          description: The name of the Farm.
          type: string
        registration:
          description: The farm registration number.
          type: string
        car:
          $ref: "#/components/schemas/CarRegistration"
        stands:
          description: |
            The stands of a farm
          type: array
          items:
            $ref: "#/components/schemas/Stand"
      required: [name]

    UpdateFarmRegister:
      oneOf:
        - $ref: "#/components/schemas/FarmRegister"
        - $ref: "#/components/schemas/NewFarmRegister"

    FarmRegister:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        createdAt:
          $ref: "#/components/schemas/DateTime"

        registerId:
          $ref: "#/components/schemas/Id"
        name:
          description: The name of the Farm.
          type: string
        registration:
          description: The farm registration number.
          type: string
        car:
          $ref: "#/components/schemas/CarRegistration"
        stands:
          description: |
            The stands of a farm
          type: array
          items:
            $ref: "#/components/schemas/Stand"
      required: [name, stands]

    CarRegistration:
      description: |
        A registration in SICAR (Sistema Nacional de Cadastro Ambiental Rural).

        The registration CAR code is an _unique_ identifier for a farm 
        inside Brazil and can be safely used to search for one.

        The code is composed by three parts, separated by hyphens:

        * The UF where the farm is located.
        * A code for the municipality where the farm is located.
        * A UUID (in simple formatting) identifying the farm itself.
      type: string
      pattern: ^(A[CLPM]|BA|CE|DF|ES|GO|M[ATSG]|P[ABREI]|R[JNSOR]|S[CPE]|TO)-(\d+)-([[:xdigit:]]{32})$
      example: "CE-2306306-8DB25DF7804C4BF1A9B521BBA5998D2E"
  
    #
    #  Register
    #

    NewRegister:
      type: object
      properties:
        operation:
          $ref: "#/components/schemas/NewOperation"
        farmRegisters:
          type: array
          items:
            $ref: "#/components/schemas/NewFarmRegister"
          uniqueItems: true
      required: [operation, farmRegisters]

    UpdateRegister:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        operation:
          $ref: "#/components/schemas/Operation"
        farmRegisters:
          type: array
          items:
            $ref: "#/components/schemas/UpdateFarmRegister"
          uniqueItems: true
      required: [operation, farmRegisters]

    Register:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        farmRegisters:
          type: array
          items:
            $ref: "#/components/schemas/FarmRegister"
          uniqueItems: true
        operation:
          $ref: "#/components/schemas/Operation"
      required:
        - farmRegisters

    RegisterPage:
      description: A page of registers.
      type: object
      properties:
        total:
          description: |
            Total number of registers made by the user's client.

            This can be used to properly implement pagination in user
            interfaces.
          type: number
          format: int64
          minimum: 0
        registers:
          description: A page of registers available to the user.
          type: array
          items:
            $ref: "#/components/schemas/Register"
          uniqueItems: true
        links:
          description: |
            Hyperlinks available for the page.

            `self` will always be present but `previousPage` and `nextPage`
            will only occur if they in fact exists.
          type: object
          properties:
            self:
              $ref: "#/components/schemas/Hyperlink"
            previousPage:
              $ref: "#/components/schemas/Hyperlink"
            nextPage:
              $ref: "#/components/schemas/Hyperlink"
          required:
            - self
      required: [total, registers, links]

    #
    #  Operations
    #

    NewOperation:
      description: A not yet persisted operation.
      allOf:
        - type: object
          properties:
            producer:
              $ref: "#/components/schemas/NewProducer"
        - $ref: "#/components/schemas/FinancialData"

    NewProducer:
      description: A not yet persisted producer.
      type: object
      properties:
        name:
          description: Name of the producer.
          type: string
        cpf:
          $ref: "#/components/schemas/Cpf"
      required: [name, cpf]

    Operation:
      description: |
        A registered operation.

        Although it is registered, the farms associated with it may
        not be ready.
      allOf:
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/Id"
            createdAt:
              $ref: "#/components/schemas/DateTime"
            registerId:
              $ref: "#/components/schemas/Id"
            producer:
              $ref: "#/components/schemas/Producer"
          required:
            - id
            - createdAt
            - registerId
            - producer
        - $ref: "#/components/schemas/FinancialData"

    Producer:
      description: |
        The producer financed by some `Operation`.

        This may be a physical or juridical person.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: Name of the producer.
          type: string
        cpf:
          $ref: "#/components/schemas/Cpf"
      required:
        - id
        - name
        - cpf

    Cpf:
      description: |
        CPF or CNPJ of a producer.

        This is guaranteed to be unique.
      type: string
      pattern: ^(\d{3}.\d{3}.\d{3})|(\d{2}.\d{3}.\d{3}/\d{4})-\d{2}$
      example: 071.361.203-26

    FinancialData:
      description: |
        Financial information of an `Operation`.

        The fields `deliveryPlace`, `qualityDescription` are required
        only if `documentType` is  `CPR` or `CPRF`, and `depositAccount`
        only when `CPRF`.
      type: object
      properties:
        documentType:
          $ref: "#/components/schemas/DocumentType"
        documentCode:
          type: string
        season:
          $ref: "#/components/schemas/Season"
        cropType:
          $ref: "#/components/schemas/CropType"
        financedValue:
          $ref: "#/components/schemas/Value"
        financedArea:
          $ref: "#/components/schemas/Area"
        dueDate:
          $ref: "#/components/schemas/Date"
        deliveryPlace:
          type: string
        qualityDescription:
          type: string
        depositAccount:
          $ref: "#/components/schemas/BankAccount"
      required:
        - documentType
        - documentCode
        - season
        - cropType
        - financedValue
        - financedArea
        - dueDate

    BankAccount:
      description: A bank account
      type: object
      properties:
        bank:
          type: string
        agency:
          type: string
        account:
          type: string
      required: [bank, agency, account]

    DocumentType:
      description: |
        Possible types of financial operations being executed.

        The types `CPR`, `CPRF` and `CCB` are known to the system. Unknonwn
        types can be sent directly without need to special formatting, but
        they will have limited support.
      type: string
      minLength: 2
      example: CPR

    Season:
      type: object
      properties:
        year:
          type: integer
          format: int32
          minimum: 1970
        crop:
          type: string
          enum:
            - SAFRA
            - SAFRINHA
      required:
        - year
        - crop
      example:
        year: 2017
        crop: SAFRA

    CropType:
      description: Available crop types.
      type: string
      enum:
        - BEAN
        - CORN
        - COTTON
        - COFFEE
        - EUCALYPTUS
        - OAT
        - OTHERS
        - PEANUT
        - RICE
        - SORGHUM
        - SOYBEAN
        - SURGARCANE
        - UNKNOWN
        - WHEAT

    Value:
      description: A financed amount with it currency.
      type: object
      properties:
        amount:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
        currency:
          $ref: "#/components/schemas/Currency"
      example:
        amount: 1234.43223
        currency: SACK

    Currency:
      description: |
        Available currencies.

        Although `TONNE` is an available currency, it is only
        available for _write_. _All_ `TONNE` values WILL be
        converted to `KILOGRAM` uppon saving. Clients MUST
        consider that NO `TONNE` value will be present in
        responses from the API.
      type: string
      enum:
        - REAL
        - SACK
        - ARROBA
        - KILOGRAM
        - TONNE

    Area:
      type: number
      format: double
      minimum: 0
      exclusiveMinimum: true
      example: 1231.
      
    Stand:
      type: object
      description: Stand is the minimum cultivation unit on a farm.
      properties:
        id:
          readOnly: true
          type: number
        geometry:
          writeOnly: true
          allOf:
            - $ref: "#/components/schemas/MultiPolygon"
      
#
# GeoJson Objects
#

    Geometry:
      type: object
      description: GeoJSon geometry
      required:
        - type
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946
      properties:
        type:
          type: string
          enum:
          - Point
          - LineString
          - Polygon
          - MultiPoint
          - MultiLineString
          - MultiPolygon
          description: the geometry type
  
    Point2D:
      type: array
      maxItems: 2
      minItems: 2
      items:
        type: number
    
    
    Point:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates:
              $ref: "#/components/schemas/Point2D"
      
    LineString:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates:
              type: array
              items:
                $ref: "#/components/schemas/Point2D"
  
    Polygon:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Point2D"
        
    MultiPoint:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates:
              type: array
              items:
                $ref: "#/components/schemas/Point2D"
              
    MultiLineString:
        type: object
        description: GeoJSon geometry
        externalDocs:
          url: https://tools.ietf.org/html/rfc7946
        allOf:
          - $ref: "#/components/schemas/Geometry"   
          - properties:
              coordinates:
                type: array
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Point2D"
        
        
    MultiPolygon:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Point2D"
      example:
        type: "MultiPolygon"
        coordinates: [[[[0, 0]]]]
