openapi: 3.0.0
servers: 
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/active-id/Emissary/1.7.6
  - url: http://{emissary_ip}:{port}/ALE/api
    variables:
      emissary_ip:
        default: '192.168.1.23'
      port:
        default: '8080'
info:
  description: This is the Emissary REST Web Service API documentation.
  version: "1.7.6"
  title: Emissary REST API
  contact:
    email: support@activeidentity.com
tags:
  - name: Authentication
    description: Contains all API references regarding authentication.
  - name: Data Fields
    description: Contains all API references regarding data fields.
  - name: Device Type
    description: Contains all API references regarding external device templates.
  - name: External Device
    description: Contains all API references regarding external devices.
  - name: Firmware
    description: Contains all API references regarding firmware.
  - name: Global Settings
    description: Contains all API references regarding global settings.
  - name: Group Template
    description: Contains all API references regarding logical device groups.
  - name: IOState
    description: Contains all API references regarding IO states.
  - name: Logical Device
    description: Contains all API references regarding logical devices.
  - name: Property
    description: Contains all API references regarding reader properties.
  - name: Reader
    description: Contains all API references regarding readers.
  - name: Subscription
    description: Contains all API references regarding subscribers.
  - name: Workflow
    description: Contains all API references regarding workflows.
paths:
  /auth:
    post: 
      tags:
        - Authentication
      summary: Authenticate
      description: >
        Authenticate the user using a cookie-based-authentication.
        
        
        After that you've created a session, it's just a matter of setting the cookie in all subsequent requests to the server.
        
        
        1. Store the session object on the client. The way that you do this will depend on how your client is implemented.
        
        
        2. When you want to make a request, take cookie name and value from the session and use them to set the 'cookie' field in the header of your request. This will be used as client session identification.
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRequest'
      responses:
        '204':
          description: Authentication successful
        '401':
          description: Invalid Credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '400':
          $ref: '#/components/responses/BadRequest'
    
  /auth/{username}:
    post:
      tags:
        - Authentication
      summary: Change user password
      description: > 
        Change the user password.
      
      
        Replace the path parameter placeholder {username} by the actual username.
      parameters:
        - in: path
          name: username
          required: true
          description: The actual username
          schema:
            type: string
            example: 'alien'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: 'hashed old password'
                newPassword:
                  type: string
                  example: 'hashed new password'
      responses:
        '204':
          description: Password changed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
                
  /auth/{username}/reset:
    post:
      tags:
        - Authentication
      summary: Reset user password
      description: > 
        Reset the password for a specific user.
        
        
        Replace the path parameter placeholder {username} by the actual username.
      parameters:
        - in: path
          name: username
          required: true
          description: The username
          schema:
            type: string
            example: 'alien'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: 'new password'
      responses:
        '204':
          description: Password reset successfully
        '400':
          $ref: '#/components/responses/BadRequest'

  /template/field:
    get:
      tags: 
        - Data Fields
      summary: List data fields
      description: >
        List all data fields.
        
        
        This path may be provided by a 'fields' query string to filter some unwanted fields.
      parameters:
        - in: query
          name: fields
          description: Query string to filter some unwanted fields. (e.g. fields=name;type retrieves only the data fields name and type)
          schema:
            type: string
            enum:
              - name
              - type
              - offset
              - length
              - format
              - bindings
            example: name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataFields'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Data Fields
      summary: Create/Update data field
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewDataField'
      responses:
        '201':
          description: Data field created/updated successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /template/field/{dataFieldName}:
    get:
      tags:
        - Data Fields
      summary: Get data field
      description: >
        Fetch a data field by name.
        
        
        Replace the path parameter placeholder {dataFieldName} by the appropriate data field name.
      parameters:
        - in: path
          name: dataFieldName
          required: true
          description: The data field name to be fetched.
          schema:
            type: string
            example: 'DF'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataField'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Data field not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Field \"DF\" not found"
    delete:
      tags:
        - Data Fields
      summary: Delete data field
      description: >
        Delete a data field by name.
        
        
        Replace the path parameter placeholder {dataFieldName} by the appropriate data field name.
      parameters:
        - in: path
          name: dataFieldName
          required: true
          description: The data field name to be deleted.
          schema:
            type: string
            example: 'DF'
      responses:
        '204':
          description: Data field deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Data field not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Field "DF" not found'
  /template/field/{dataFieldName}/bindings:
    get:
      tags:
        - Data Fields
      summary: Get data field bindings
      description: The bindings fetched are all values related to an "Is Equal To" condition.
      parameters:
        - in: path
          name: dataFieldName
          required: true
          description: The data field name to be fetched.
          schema:
            type: string
            example: 'DF'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
                  example: '3'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Data field not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Field "DF" not found'
  /template/field/delete:
    post:
      tags:
        - Data Fields
      summary: Delete data fields
      description: Delete a bundle of data fields by name.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: 
                - DataFieldName1
                - DataFieldName2
      responses:
        '204':
          description: Data fields deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /template/bulk/delete:
    post:
      tags:
        - Data Fields
      summary: Bulk delete data fields
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                datafields:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: dataFieldName1
                  example:
                    - name: dataFieldName1
                    - name: dataFieldName2
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  datafields:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: dataFieldName1
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
                    example:
                      - name: dataFieldName1
                        status: 'Success'
                        success: true
                      - name: dataFieldName2
                        status: 'Success'
                        success: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /device-type:
    post:
      tags:
        - Device Type
      summary: Define type
      description: Define an external device template.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDeviceType'
      responses:
        '201':
          description: Device template created successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - Device Type
      summary: List types
      description: >
        List all device templates.
        
        
        This path may be provided by a 'fields' query string to filter some unwanted fields.
      parameters:
        - in: query
          name: fields
          description: Query string to filter some unwanted fields. (e.g. fields=name;type retrieves only the device templates names and types)
          schema:
            type: string
            enum:
              - name
              - type
              - pins
              - actions
            example: 'name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceTypes'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /device-type/{deviceTypeName}:
    delete:
      tags:
        - Device Type
      summary: Delete type
      description: >
        Delete a device template by name.
        
        
        Replace the path parameter placeholder {deviceTypeName} by the appropriate device template name.
      parameters:
        - in: path
          name: deviceTypeName
          required: true
          description: The device template name to be deleted
          schema:
            type: string
            example: 'PresenceSensor'
      responses:
        '204':
          description: Device template deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Device template not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Device template "PresenceSensor" not found' 
    get:
      tags:
        - Device Type
      summary: Get type
      description: |
        Get the device template associated with the given name.
        #
        Replace the path parameter placeholder {deviceTypeName} by the appropriate device type name.
      parameters:
      - in: path
        name: deviceTypeName
        required: true
        description: The device template name to be fetched.
        schema:
          type: string
          example: 3-Way Stack Light
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputDeviceType'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Device template not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Device template "PresenceSensor" not found' 
  /device-type/delete:
    post:
      tags:
        - Device Type
      summary: Delete types
      description: Delete multiple device templates.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: 
                - DeviceTypeName1
                - DeviceTypeName2
      responses:
        '204':
          description: Device templates deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /device-type/bulk/delete:
    post:
      tags:
        - Device Type
      summary: Bulk delete types
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externaldevicetypes:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                  example:
                    - name: externalDeviceType1
                    - name: externalDeviceType2
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  externaldevicetypes:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: externalDeviceType1
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
                      example:
                        - name: externalDeviceType1
                          status: success
                          success: true
                        - name: externalDeviceType2
                          status: success
                          success: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /device:
    get:
      tags:
        - External Device
      summary: List external devices
      description: >
        List all external devices
        
        
        This path may be provided by a 'fields' query string to filter some unwanted fields.
        
        #### Example&#58; http&#58;//10.0.0.74&#58;8080/ALE/api/device?fields=name
        
        
        This path may also be provided with a 'type' query string to filter by external device types.
        
        #### Example&#58; http&#58;//10.0.0.74&#58;8080/ALE/api/device?type=input
        
        
        One can combine those two query strings as follows&#58;
        
        #### Example&#58; http&#58;//10.0.0.74&#58;8080/ALE/api/device?fields=name&type=input
      parameters:
        - in: query
          name: fields
          description: Query string to filter some unwanted fields. (e.g. fields=name;vendor retrieves only the data fields names and vendors)
          schema:
            type: string
            enum:
              - name
              - vendor
              - uid
              - device
            example: 'name'
        - in: query
          name: type
          description: > 
            Query string to filter by external device types. The supported types are: input and output. By default both input and output devices are included.
          schema:
            type: string
            example: 'input'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalDevice'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - External Device
      summary: Create external device
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExternalDevice'
      responses:
        '201':
          description: External device created successfully.
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /device/{deviceName}/action:
    get:
      tags:
        - External Device
      summary: List device actions
      description: >
        Lists the actions that this device supports.
        
        
        Replace the path parameter placeholder {deviceName} by the appropriate device name.
      parameters:
        - in: path
          name: deviceName
          description: External device name to be fetched
          required: true
          schema:
            type: string
            example: '3-Way Stack Light'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                items:
                  type: string
                  description: The action name.
                example: 
                  - AllOff
                  - AllOn
                  - Amber
                  - AmberRed
                  - Green
                  - GreenAmber
                  - GreenRed
                  - Red
        '401':
           $ref: '#/components/responses/Unauthorized'       
        '404':
            description: External device name not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'External device "Stack_Light1" not found' 
  /device/{deviceName}:
    get:
      tags:
        - External Device
      summary: Get external device
      description: >
        Get the external device by name.
        
        
        Replace the path parameter placeholder {deviceName} by the appropriate device name.
      parameters:
        - in: path
          name: deviceName
          description: External device name to be fetched.
          required: true
          schema:
            type: string
            example: '3-Way Stack Light'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalDevice'
        '401':
           $ref: '#/components/responses/Unauthorized'       
        '404':
            description: External device name not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'External device "Stack_Light1" not found' 
    delete:
      tags:
        - External Device
      summary: Delete external device
      description: Replace the path parameter placeholder {deviceName} by the appropriate device name.
      parameters:
        - in: path
          name: deviceName
          description: External device name to be deleted.
          required: true
          schema:
            type: string
            example: 'Demo_Sensor'
      responses: 
        '204':
          description: External device deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: External device not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'External device "Demo_Sensor" not found'
  /device/invoke:
    post:
      tags:
        - External Device
      summary: Invoke action
      description: Invoke an external device action.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceName:
                  type: string
                  example: 'Demo_Sensor'
                deviceAction:
                  type: string
                  example: 'On'
      responses:
        '204':
          description: Action invoked successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
            description: External device name not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'External device "Stack_Light1" not found' 
  /device/update:
    post:
      tags:
        - External Device
      summary: Update external device
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExternalDevice'
      responses:
        '201':
          description: External device updated successfully.
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /device/delete:
    post:
      tags:
        - External Device
      summary: Delete multiple external devices
      description: Delete multiple external devices by their names.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: 
                - DeviceName1
                - DeviceName2
      responses:
        '204':
          description: External devices deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /device/bulk/delete:
    post:
      tags:
        - External Device
      summary: Bulk delete external devices
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externaldevices:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: externalDeviceName1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  externaldevices:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: externalDeviceName1
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /firmware/{vendor}:
    get:
      tags:
        - Firmware
      summary: List firmwares
      description: >
        List the available firmwares according that are related to a specific vendor/driver.
        
        
        This will list the currently uploaded firmwares, the path of each one, and the reader model.
        
        
        Replace the path parameter placeholder {vendor} by the appropriate vendor/driver name.
      parameters:
        - in: path
          name: vendor
          description: The vendor or driver name.
          required: true
          schema:
            type: string
            example: 'arp'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    model:
                      type: string
                    firmware:
                      type: string
                      description: The firmware file name
                example:
                  - model: 'ALR-8800'
                    firmware: null
                  - model: 'ALR-9650'
                    firmware: null
                  - model: 'ALR-9680-EMA'
                    firmware: null
                  - model: 'ALR-9800'
                    firmware: null
                  - model: 'ALR-9900'
                    firmware: null
                  - model: 'ALR-9900+'
                    firmware: null
                  - model: 'ALR-9900+EMA'
                    firmware: null
                  - model: 'ALR-F800'
                    firmware: 'ALRx800_fw_140701.tar.aef'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
            description: Vendor name not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'Vendor "llrp" not found'      
  /firmware/upload/{vendor}/{modelName}:
    post:
      tags:
        - Firmware
      summary: Upload firmware
      description: >
        Upload a firmware for a model that is assigned to a specific driver.


        Replace the path parameters placeholders {vendor} and {modelName} by the appropriate vendor/driver name and reader's model name respectively.
        
        
        NOTE&#58; This service expects a file to be received along with its content disposition (file details).


        NOTE&#58; A Bad Request status code will be returned if the file was not received or the data was incomplete.
      parameters:
        - in: path
          name: vendor
          description: The vendor or driver name.
          required: true
          schema:
            type: string
            example: 'arp'
        - in: path
          name: modelName
          description: The model name.
          required: true
          schema:
            type: string
            example: 'ALR-F800'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
        '400':
          description:  Bad request. The file was not received or the data was incomplete.
        '401':
          $ref: '#/components/responses/Unauthorized'
  /global:
    get:
      tags:
        - Global Settings
      summary: List global settings
      description: >
        List all global settings.


        This path may be provided by a 'fields' query string to filter some unwanted fields.

        #### Example&#58; http&#58;//10.0.0.74&#58;8080/ALE/api/global?fields=name
      parameters:
        - in: query
          name: fields
          description: Query string to filter some unwanted fields. (e.g. fields=name;type retrieves only the global settings names and types)
          schema:
            type: string
            enum:
              - name
              - value
              - type
            example: 'name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSettings'
              example:
              - name: 'MYSQL_USER'
                value: 'root'
                type: 'text'
                secureSetting: false
                settingsType:
                  name: 'text'
                  shape:
                    shapeName: 'TextField'
                  validationExpression: '(.)*'
              - name: 'MYSQL_PORT'
                value: '3306'
                type: 'text'
                secureSetting: false
                settingsType:
                  name: 'text'
                  shape:
                    shapeName: 'TextField'
                  validationExpression: '(.)*'
              - name: 'VAR_DELETE_AFTER_SYNC'
                value: '0'
                type: 'integer'
                secureSetting: false
                settingsType:
                  name: 'integer'
                  shape:
                    shapeName: 'TextField'
                  validationExpression: '^((-)|(\\+))?([0-9])+$'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Global Settings
      summary: Create/Update global settings
      description: NOTE&#58; the accepted types are boolean,text,password,decimal,integer, and date.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: 'MYSQL_PWD'
                value:
                  type: string
                  example: '12345'
                type:
                  type: string
                  enum: [text, integer, decimal, password]
                  example: 'password'
      responses:
        '204':
          description: Global setting created successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /global/{key}:
    get:
      tags:
        - Global Settings
      summary: Get global setting
      description: >
        Get global settings by key.


        Replace the path parameter placeholder {key} by the appropriate global setting name.
      parameters:
        - in: path
          name: key
          required: true
          description: The global settings name to be fetched.
          schema:
            type: string
            example: 'MYSQL_USER'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSettings'
              example:
                name: 'MYSQL_USER'
                value: 'root'
                type: 'text'
                settingsType:
                  name: 'text'
                  shape:
                    shapeName: 'TextField'
                  validationExpression: '(.)*'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
            description: Vendor name not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'Global settings "MYSQL_USER" not found'    
    delete:
      tags:
        - Global Settings
      summary: Delete global setting
      description: >
        Delete global settings by key.


        Replace the path parameter placeholder {key} by the appropriate global settings name.
      parameters:
        - in: path
          name: key
          required: true
          description: The global setting name to be deleted.
          schema:
            type: string
            example: 'MYSQL_USER'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Global settings name not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Global settings "DB_NAME" not found'  
  /global/type:
    post:
      tags:
        - Global Settings
      summary: List types
      description: List global settings types.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    shape:
                      type: object
                      properties:
                        shapName:
                          type: string
                    validationExpression:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'       
  /global/delete:
    post:
      tags:
        - Global Settings
      summary: Delete global settings
      description: Delete multiple global settings by their names.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: 
                - GlobalSettingsName1
                - GlobalSettingsName2
      responses:
        '204':
          description: Global settings deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /global/bulk/delete:
    post:
      tags:
        - Global Settings
      summary: Bulk delete global settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                globalsettings:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: globalSettingName1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  datafields:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: globalSettingName1
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /group/default:
    post:
      tags:
        - Group Template
      summary: Default group
      description: >
        Get the default group template.


        This will retrieve the available logical devices along with the default values that should be used in order to create a valid template.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultGroupTemplate'
              example:
                  name: null
                  model: null
                  propertyList: []
                  defaultProperties: []
                  logicalDevices: []
                  vendor: null
                  cronExpression: null
        '401':
          $ref: '#/components/responses/Unauthorized'
  /group/{groupName}:
    get:
      tags:
        - Group Template
      summary: Get group
      description: >
        Get a group by name.


        Replace the path parameter placeholder {groupName} by the appropriate group name.
      parameters:
        - in: path
          name: groupName
          required: true
          description: The group name to fetch.
          schema:
            type: string
            example: 'F800'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Group name not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Group "F800" not found'    
    delete:
      tags:
        - Group Template
      summary: Delete group
      description: >
        Delete a group by name.


        Replace the path parameter placeholder {groupName} by the appropriate group name.
      parameters:
        - in: path
          name: groupName
          required: true
          description: The group name to be deleted.
          schema:
            type: string
            example: 'F800'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Group name not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Group "F800" not found'        
  /group/model:
    post:
      tags:
        - Group Template
      summary: List models
      description: List all available models that can be used to create a group template.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    model:
                      type: string
                    vendor:
                      type: string
                example:
                  - model: 'ALR-9900+EMA'
                    vendor: 'arp'
                  - model: 'ALR-F800'
                    vendor: 'arp'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /group:
    get:
      tags:
        - Group Template
      summary: List groups
      description: >
        List all group templates.


        This path may be provided by a 'fields' query string to filter some unwanted fields.
      parameters:
        - in: query
          name: fields
          description: Query string to filter some unwanted fields. (e.g. fields=name retrieves only the names of the group templates)
          schema:
            type: string
            enum:
              - name
              - model
              - vendor
              - propertyList
              - defaultProperties
              - logicalDevices
              - remainingLogicalDevices
              - cronExpression
            example: 'name'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Group Template
      summary: Create/Update group template
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'GT1'
                cronExpression:
                  type: string
                  example: '* * * * *'
                propertyList:
                  $ref: '#/components/schemas/GroupPropertyList'
                LogicalDevices:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: 'S2_S'
      responses:
        '201': 
          description: Group created successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server error. Could be that the logical device was not found.
  /group/{vendor}/{model}:
    get:
      tags:
        - Group Template
      summary: Get default properties
      description: >
        List the default properties for a specific model related to a vendor (driver).
        

        Replace the the path parameters placeholders {vendor} and {model} by the appropriate reader's vendor and reader's model name respectively.
      parameters:
        - in: path
          name: vendor
          required: true
          description: The vendor/driver name.
          schema:
            type: string
            example: 'arp'
        - in: path
          name: model
          required: true
          description: The reader model
          schema:
            type: string
            example: 'ALR-F800'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Default properties not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Default properties for vendor "arp" and model "ALR-F800" not found'
  /group/push/{groupName}:
    post:
      tags:
        - Group Template
      summary: Push group properties
      description: >
        Push the group template properties to the defined readers within that group along with the Envoy settings.
        

        Replace the path parameter placeholder {groupName} by the appropriate group name.
      parameters:
        - in: path
          name: groupName
          required: true
          description: The group name.
          schema:
            type: string
            example: 'G-F800'
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
            description: Group name not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'Group "G-F800" not found'     
  /group/update-firmware/{groupName}:
    put:
      tags:
        - Group Template
      summary: Update group firmware
      description: >
        Update the firmware of the readers within the defined group.
        

        Replace the path parameter placeholder {groupName} by the appropriate group name.
      parameters:
        - in: path
          name: groupName
          required: true
          description: The group name.
          schema:
            type: string
            example: 'GT1'
      responses:
        '200': 
          description: OK.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
            description: Vendor name not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'Group "GT1" not found' 
  /group/bulk/delete:
    post:
      tags:
        - Group Template
      summary: Bulk delete logical device groups
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                logicaldevicegroups:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: ldGroup1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  logicaldevicegroups:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: ldGroup1
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /iostate/device:
    get:
      tags:
        - IOState
      summary: List IO states
      description: List the io states for all devices.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IOState'
                example:
                  - ioState:
                      "@On": '1543420793488'
                      action: 'On'
                      time: '1543420793488'
                    device: 'Banner Q60-DockDoor1'
                  - ioState:
                      "@GreenRed": '1543485874354'
                      "@AllOff": '1543485882261'
                      action: 'AllOff'
                      time: '1543485882261'
                    device: "TestDevice"
        '401':
          $ref: '#/components/responses/Unauthorized'
  /iostate/device/{deviceName}:
    get:
      tags:
        - IOState
      summary: Get IO state
      description: >
        Get the IO state for a specific device.
        

        Replace the path parameter placeholder {deviceName} by the appropriate device name.
      parameters:
        - in: path
          name: deviceName
          description: The external device name to be fetched.
          required: true
          schema:
            type: string
            example: 'TestDevice'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IOState'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
            description: Device name not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'Device "TestDevice" not found' 
  /iostate/flicker:
    get:
      tags:
        - IOState
      summary: Get IO states queue and flicker status of running devices
      description: Retrieves IO state history and flicker history of input devices.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    device:
                      type: string
                      example: sensor1
                    ioStateHistory:
                      type: object
                      properties:
                        isFlickering:
                          type: boolean
                        ioStatesQueue:
                          type: array
                          items:
                            type: object
                            properties:
                              currentAction:
                                type: string
                              timeStamp:
                                type: number
                        
        '401':
          $ref: '#/components/responses/Unauthorized'
  /iostate/flicker/{deviceName}:
    get:
      tags:
        - IOState
      summary: Get IO states queue and flicker status of a specific device
      description: >
        Retrieves IO state history and flicker history of an input device.
        

        Replace the path parameter placeholder {deviceName} by the appropriate device name.
      parameters:
        - in: path
          name: deviceName
          description: The external device name to be fecthed.
          required: true
          schema:
            type: string
            example: 'TestDevice'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFlickering:
                    type: boolean
                  ioStatesQueue:
                    type: array
                    items:
                      type: object
                      properties:
                        currentAction:
                          type: string
                        timeStamp:
                          type: number
                        
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
            description: Device name not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'Device "TestDevice" not found' 
  /logical-device:
    get:
      tags:
        - Logical Device
      summary: List logical devices
      description: >
        List all logical devices.


        This path may be provided by a 'fields' query string to filter some unwanted fields.
      parameters:
        - in: query
          name: fields
          description: Query string to filter some unwanted fields. (e.g. fields=name retrieves only the names of the group templates)
          schema:
            type: string
            enum:
              - name
              - composite
              - vendor
              - uid
              - antennas
              - logicalReaders
            example: 'name'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogicalDevice'
                example:
                  - name: 'DockDoor1'
                    composite: false
                    logicalReaders: []
                    vendor: 'arp'
                    uid: '001B5F00C4D1'
                    antennas: [0,1]      
                  - name: 'DockDoor2'
                    composite: false
                    logicalReaders: []
                    vendor: 'arp'
                    uid: '001B5F00F24C'
                    antennas: [0,1,2]
                  - name: 'AllDoors'
                    composite: true
                    logicalReaders: ['DockDoor1', 'DockDoor2']
                    vendor: ''
                    uid: ''
                    antennas: []                  
        '401':
            $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Logical Device
      summary: Create/Update logical device
      description: >
        A logical device is indexed by its name.
        

        A logical device may be a composite (one logical device composed of many other logical devices) or non-composite. If a logical device is composite we must define an array of logical readers (logical devices' name).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogicalDevice'
      responses:
        '201':
          description: Logical device created successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'      
  /logical-device/{logicalDeviceName}:
    get:
      tags:
        - Logical Device
      summary: Get logical device
      description: >
        Fetch a logical device by name.


        Replace the path parameter placeholder {logicalDeviceName} by the appropriate logical device name.
      parameters:
        - in: path
          name: logicalDeviceName
          required: true
          description: The logical device name to be fecthed
          schema:
            type: string
            example: 'DVF-Dock-Master'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogicalDevice'
        '401': 
            $ref: '#/components/responses/Unauthorized'
        '404':
          description: Logical device not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Logical device \"DVF-Dock-Master\" not found" 
    delete:
      tags:
        - Logical Device
      summary: Delete logical device
      description: >
        Delete a logical device by name.


        Replace the path parameter placeholder {logicalDeviceName} by the appropriate logical device name.
      parameters:
        - in: path
          name: logicalDeviceName
          required: true
          description: The logical device name to be deleted
          schema:
            type: string
            example: 'DVF-Dock-Master'
      responses:
        '204':
          description: Logical device deleted successfully.
        '401': 
            $ref: '#/components/responses/Unauthorized'
        '404':
          description: Logical device not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Logical device \"DVF-Dock-Master\" not found"
  /logical-device/delete:
    post:
      tags:
        - Logical Device
      summary: Delete logical devices
      description: Delete multiple logical devices by their names.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: 
                - LogicalDeviceName1
                - LogicalDeviceName2
      responses:
        '204':
          description: Logical devices deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /logical-device/bulk/delete:
    post:
      tags:
        - Logical Device
      summary: Bulk delete logical devices
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                logicaldevices:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                  example: 
                    - name: logicalDeviceName1
                    - name: logicalDeviceName2
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  logicaldevices:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        status:
                          type: string
                        success:
                          type: boolean
                        message:
                          type: string
                    example:
                      - name: logicalDeviceName1
                        status: success
                        success: true
                      - name: logicalDeviceName2
                        status: success
                        success: true

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /property/{propertyName}:
    get:
      tags:
        - Property
      summary: Get property
      description: >
        Retrieve the value of the given property.


        Replace the path parameter placeholder {propertyName} by the appropriate property name.
      parameters:
        - in: path
          name: propertyName
          description: The property name to be fetched.
          required: true
          schema:
            type: string
            example: 'maxRSSI'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  value: 
                    type: string
                    nullable: true
                    description: The property value. If the property was not found, the value is equal to null.
                    example: '-80.0'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
            description: Property name not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'Property "maxRSSI" not found' 
  /property:
    post:
      tags:
        - Property
      summary: Set property
      description: Create a property and define a value to it.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: The property name.
                  example: 'maxRSSI'
                value:
                  type: string
                  description: The property value.
                  example: '-80.0'
      responses:
        '201':
          description: OK
        '206':
          description: Partial content. The key should be defined.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Key must be defined
        '400':
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
  /reader:
    get:
      tags:
        - Reader
      summary: Get readers
      description: >
        Get all readers with a description if available.


        This path may be provided by a 'fields' query string to filter some unwanted fields.

        #### Example&#58; http&#58;//10.0.0.74&#58;8080/ALE/api/reader?fields=uid;ipAdress
        

        This path also support level 1 search.

        #### Example&#58; http&#58;//10.0.0.74&#58;8080/ALE/api/reader?down=false&enabled=true
        

        You can combine filtering and searching.

        #### Example&#58; http&#58;//10.0.0.74&#58;8080/ALE/api/reader?fields=uid;ipAdress&down=false&enabled=true
      parameters:
        - in: query
          name: fields
          description: Query string to filter some unwanted fields. (e.g. fields=uid;vendor retrieves only the readers uids and vendors)
          schema:
            type: string
            enum:
              - uid
              - macAdress
              - ipAdress
              - port
              - secure
              - vendor
              - enabled
              - down
              - pins
              - antennas
              - authentication
              - properties
              - description
            example: 'uid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reader'
                example:
                  - description:
                      readerName: 'Alien RFID Reader'
                      readerVersion: '17.07.17.00'
                      readerModel: 'ALR-F800'
                    sampleProperty: null
                    enabled: true
                    down: true
                    uid: '001B5F00F255'
                    macAddress: null
                    port: 0
                    secure: false
                    vendor: 'arp'
                    pins:
                      - sampleProperty: null
                        reserved: false
                        type: 'output'
                        number: 1
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'output'
                        number: 2
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'output'
                        number: 3
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'output'
                        number: 4
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'output'
                        number: 5
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'output'
                        number: 6
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'output'
                        number: 7
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'output'
                        number: 8
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'input'
                        number: 1
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'input'
                        number: 2
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'input'
                        number: 3
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                      - sampleProperty: null
                        reserved: false
                        type: 'input'
                        number: 4
                        value: 0
                        connection:
                          sampleProperty: null
                          number: 0
                          type: 'input'
                    authentication:
                      sampleProperty: null
                      name: null
                      properties: []
                    properties: []
                    antennas:
                      - sampleProperty: null
                        id: 0
                        enabled: false
                      - sampleProperty: null
                        id: 1
                        enabled: false
                      - sampleProperty: null
                        id: 2
                        enabled: false
                      - sampleProperty: null
                        id: 3
                        enabled: false
                  - description:
                      readerName: 'Alien RFID Reader'
                      readerVersion: '18.02.28.00'
                      readerModel: 'ALR-F800'
                    sampleProperty: null
                    enabled: false
                    down: true
                    uid: '001B5F010A07'
                    macAddress: '001B5F010A07'
                    ipAddress: '10.0.0.107'
                    port: 23
                    secure: false
                    vendor: 'arp'
                    authentication:
                      sampleProperty: null
                      name: null
                      properties: []
                    propertues: []
                    antennas: []
                  - description:
                      readerName: 'Alien RFID Reader'
                      readerVersion: '17.02.22.00'
                      readerModel: 'ALR-F800'
                    sampleProperty: null
                    enabled: false
                    down: true
                    uid: '001B5F00F1F1'
                    macAddress: '001B5F00F1F1'
                    ipAddress: '10.0.0.135'
                    port: 23
                    secure: false
                    vendor: 'arp'
                    authentication:
                      sampleProperty: null
                      name: null
                      properties: []
                    propertues: []
                    antennas: []
        '401':
            $ref: '#/components/responses/Unauthorized'   
    post:
      tags:
        - Reader
      summary: Add reader
      description: >
        Add an online reader by IP address.


        In order for this service to execute properly the reader must be reachable and not reserved by any other Emissary.


        If the driver does not need authentication to be able to connect to the reader, then there is no need to add the authentication property.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReader'
      responses:
        '201':
          description: Reader enabled.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: >
            A connection to the reader could not be established (when the reader is not found or reserved).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't connect to reader!"         
  /reader/offline:
    post:
      tags:
        - Reader
      summary: Add reader offline
      description: >
        Add an offline reader by IP and MAC address.


        Using this service the reader can be added even if it is unreachable.


        If the driver does not need authentication to be able to connect to the reader, then there is no need to add the authentication property.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReader'
            example:
              vendor: 'arp'
              uid: '001B5F00A010'
              ip: '10.0.0.11'
              authentication:
                name: 'Authentication'
                properties:
                  - name: 'username'
                    value: 'alien'
                  - name: 'password'
                    value: 'password' 
      responses:
        '201':
          description: Reader enabled.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: >
            A connection to the reader could not be established (when the reader is not found or reserved).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't connect to reader!"
  /reader/enable:
    post:
      tags:
        - Reader
      summary: Enable reader
      description: >
        Enable reader by UID.


        In order for this service to execute properly the reader must be reachable and not reserved by any other emissary.


        If the driver does not need authentication to be able to connect to the reader, then there is no need to add the authentication property.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReader'
            example:
              vendor: 'arp'
              uid: '001B5F00A010'
              authentication:
                name: 'Authentication'
                properties:
                  - name: 'username'
                    value: 'alien'
                  - name: 'password'
                    value: 'password'
      responses:
        '201':
          description: Reader enabled.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Reader not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reader \"001B500A010\" not found"  
        '500':
          description: >
            A connection to the reader could not be established (when the reader is not found or reserved).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't connect to reader 001B5F0A010"
  /reader/reboot:
    post:
      tags:
        - Reader
      summary: Reboot reader
      description: >
        Reboot reader by UID.


        In order for this service to execute properly the reader must be reachable and not reserved by any other Emissary.


        If the driver does not need authentication to be able to connect to the reader, then there is no need to add the authentication property.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReader'
            example:
              vendor: 'arp'
              uid: '001B5F00A010'
              authentication:
                name: 'Authentication'
                properties:
                  - name: 'username'
                    value: 'alien'
                  - name: 'password'
                    value: 'password'
      responses:
        '204':
          description: OK.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Reader not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reader \"001B500A010\" not found"          
  /reader/{vendor}/{UID}:
    get:
      tags:
        - Reader
      summary: Get reader
      description: >
        Fetch the reader according to the vendor and UID.


        Replace the path parameters placeholders {vendor} and {UID} by the appropriate reader's vendor and uid respectively.
      parameters:
        - in: path
          name: vendor
          required: true
          description: The reader's vendor name.
          schema:
            type: string
            example: 'arp'
        - in: path
          name: UID
          required: true
          description: The reader's MAC address or UID.
          schema:
            type: string
            example: '001B5F00F255'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reader'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Reader not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reader \"001B500F1F1\" not found"     
        '500':
          description: >
            A connection to the reader could not be established. If the error returned is null, then the reader status is either enabled but down or the group name is incorrect, otherwise the reader is definitely disabled.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't fetch reader properties!"
    delete:
      tags:
        - Reader
      summary: Delete reader
      description: >
        Delete specific reader according to the vendor and UID.


        Replace the path parameters placeholders {vendor} and {UID} by the appropriate reader's vendor and uid respectively.
      parameters:
        - in: path
          name: vendor
          required: true
          description: The reader's vendor name.
          schema:
            type: string
            example: 'arp'
        - in: path
          name: UID
          required: true
          description: The reader's MAC Address or UID.
          schema:
            type: string
            example: '001B5F00F255'
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reader'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Reader not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reader \"001B500F1F1\" not found"     
  /reader/delete:
    post:
      tags:
        - Reader
      summary: Delete readers
      description: Delete specific readers according to the vendor and uid.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  vendor:
                    type: string
                    example: 'arp'
                  uid:
                    type: string
                    example: '001B5F00F255'
      responses:
        '204':
          description: Readers deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /reader/{vendor}/{uid}/config:
    get:
      tags:
        - Reader
      summary: Get device configuration groups
      description: >
        List all group configuration properties of a device.


        Replace the path parameters placeholders {vendor} and {UID} by the appropriate reader's vendor and uid respectively.


        This path may be provided by a 'fields' query string to filter some unwanted fields.
      parameters:
        - in: path
          name: vendor
          required: true
          description: The reader's vendor name.
          schema:
            type: string
            example: 'arp'
        - in: path
          name: uid
          required: true
          description: The reader's MAC Address or UID.
          schema:
            type: string
            example: '001B5F00F255'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Not found reader
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reader \"001B500F1F1\" not found"      
        '500':
          description: >
            A connection to the reader could not be established. If the error returned is null, then the reader status is either enabled but down or the group name is incorrect, otherwise the reader is definitely disabled.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't fetch reader properties!"
  /reader/{vendor}/{uid}/{groupName}/config:
    get:
      tags:
        - Reader
      summary: Get device configuration for a specific group
      description: >
        List the configuration properties of a specific group of a device.


        Replace the path parameters placeholders {vendor}, {UID} and {groupName} by the appropriate reader's vendor, uid and group name respectively.


        NOTE&#58; This will result in an error if the connection to the reader couldn't be established.
      parameters:
        - in: path
          name: vendor
          required: true
          description: The reader's vendor name.
          schema:
            type: string
            example: 'arp'
        - in: path
          name: uid
          required: true
          description: The reader's MAC Address or UID.
          schema:
            type: string
            example: '001B5F00C4D1'
        - in: path
          name: groupName
          required: true
          description: The group/section name.
          schema:
            type: string
            example: 'Tag Report'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  properties:
                    $ref: '#/components/schemas/ReaderAuthenticationProperties'
                example:
                  name: 'Tag Report'
                  properties:
                    - defaultValue: 'OFF'
                      readOnly: false
                      required: false
                      visible: true
                      maximumValue: 0
                      minimumValue: 0
                      name: "@tid"
                      displayName: "TID"
                      requireRestart: false
                      tooltip: 'Include TID in reports.'
                      typeEditor: 'Selector'
                      validationExpression: ""
                      value: 'OFF'
                      error: 'The reader property cannot be set'
                      propertyList:
                        - name: 'ON'
                          description: 'ON'
                        - name: 'OFF'
                          description: 'OFF'
                    - defaultValue: 'OFF'
                      readOnly: false
                      required: false
                      visible: true
                      maximumValue: 0
                      minimumValue: 0
                      name: "@userdata"
                      displayName: "User Data"
                      requireRestart: false
                      tooltip: 'Include User Data in reports.'
                      typeEditor: 'Selector'
                      validationExpression: ""
                      value: 'OFF'
                      error: 'The reader property cannot be set'
                      propertyList:
                        - name: 'ON'
                          description: 'ON'
                        - name: 'OFF'
                          description: 'OFF'
                    - defaultValue: 'OFF'
                      readOnly: false
                      required: false
                      visible: true
                      maximumValue: 0
                      minimumValue: 0
                      name: "@dynamicauth"
                      displayName: "Dynamic Authentication"
                      requireRestart: false
                      tooltip: 'Include Dynamic Tag Authentication Info in reports.'
                      typeEditor: 'Selector'
                      validationExpression: ""
                      value: 'OFF'
                      error: 'The reader property cannot be set'
                      propertyList:
                        - name: 'ON'
                          description: 'ON'
                        - name: 'OFF'
                          description: 'OFF'                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Unknown reader
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reader \"001B500F1F1\" not found"                
        '500':
          description: A connection to the reader could not be established.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't fetch reader properties!"
  /reader/{vendor}/{uid}/configname:
    get:
      tags:
        - Reader
      summary: Get reader's config group names
      description: Replace the path parameters placeholders {vendor} and {UID} by the appropriate reader's vendor and uid respectively.
      parameters:
        - in: path
          name: vendor
          required: true
          description: The vendor/driver name.
          schema:
            type: string
            example: 'arp'
        - in: path
          name: uid
          required: true
          description: The reader's Mac address or UID.
          schema:
            type: string
            example: '001B5F00F255'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: [General, Radio, Network, Acquire, GPIO, Program, Notify, Time, Authentication, Commands, Connection, Tag Report]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Not found reader
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reader \"001B500F1F1\" not found"                
        '500':
          description: >
            A connection to the reader could not be established (when the reader is disabled).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't fetch reader properties!"
  /reader/ioports:
    get:
      tags:
        - Reader
      summary: List physical IO ports
      description: List the physical IO ports of each reader.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reader'
              example:
                - vendor: 'arp'
                  uid: '001B5F00BDBF'
                  down: false
                  pins:
                    - reserved: false
                      type: 'output'
                      number: 1
                      value: 0
                      connection:
                        number: 0
                        type: 'input'
                    - reserved: false
                      type: 'output'
                      number: 2
                      value: 0
                      connection:
                        number: 0
                        type: 'input'  
                    - reserved: false
                      type: 'input'
                      number: 1
                      value: 0
                      connection:
                        number: 0
                        type: 'input'
                    - reserved: false
                      type: 'input'
                      number: 2
                      value: 0
                      connection:
                        number: 0
                        type: 'input'
        '401':
          $ref: '#/components/responses/Unauthorized' 
  /reader/command:
    post:
      tags:
        - Reader
      summary: Execute reader command by UID.
      description: In order for this service to execute properly the reader must be reachable and not reserved by any other Emissary.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vendor:
                  type: string
                  example: 'arp'
                uid:
                  type: string
                  example: '001B5F00C4D1'
                command:
                  type: string
                  example: 'rfa=120'
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          description: Reader not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    nullable: true
                    example: null
  /reader/restore:
    post:
      tags:
        - Reader
      summary: Restore emissary settings
      description: Restore the emissary settings plus all the logical group templates properties ordered by creation date of each property within all groups.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vendor:
                  type: string
                  example: 'arp'
                uid:
                  type: string
                  example: '001B5F00C4D1'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Vendor/Driver or reader not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Vendor/Driver \"alien\" not found"
  /reader/{vendor}:
    get:
      tags:
        - Reader
      summary: Get authentication info
      description: >
        Retrieve the authentication information related to the driver.


        Replace the path parameter placeholder {vendor} by the appropriate vendor/driver name.
      parameters:
        - in: path
          name: vendor
          description: The vendor/driver name.
          required: true
          schema:
            type: string
            example: 'arp'
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  properties:
                    $ref: '#/components/schemas/ReaderAuthenticationProperties'
                example:
                  name: 'Authentication'
                  properties:
                    - defaultValue: 'alien'
                      readOnly: false
                      required: false
                      visible: true
                      maximumValue: 0
                      minimumValue: 0
                      name: "username"
                      displayName: "Username"
                      requireRestart: false
                      tooltip: 'Sets the reader username'
                      typeEditor: 'Text'
                      validationExpression: ""
                      value: null
                      error: 'The username cannot be set'
                      propertyList: []
                    - defaultValue: 'password'
                      readOnly: false
                      required: false
                      visible: true
                      maximumValue: 0
                      minimumValue: 0
                      name: "password"
                      displayName: "Password"
                      requireRestart: false
                      tooltip: 'Sets the reader password'
                      typeEditor: 'Password'
                      validationExpression: ""
                      value: null
                      error: 'The password cannot be set'
                      propertyList: []
                    - defaultValue: '23'
                      readOnly: false
                      required: false
                      visible: true
                      maximumValue: 65535
                      minimumValue: 1
                      name: "port"
                      displayName: "Port"
                      requireRestart: false
                      tooltip: 'Reader connection port'
                      typeEditor: 'Slider'
                      validationExpression: ""
                      value: null
                      error: ''
                      propertyList: []
        '401':
          $ref: '#/components/responses/Unauthorized'        
        '404':
          description: Vendor/Driver or reader not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Vendor/Driver \"test\" not found"
  /reader/{vendor}/{uid}/description:
    get:
      tags:
        - Reader
      summary: Get reader description
      description: >
        Retrieve the reader description information.


        Replace the path parameters placeholders {vendor} and {UID} by the appropriate reader's vendor and uid respectively.
      parameters:
        - in: path
          name: vendor
          required: true
          description: The reader's vendor name.
          schema:
            type: string
            example: 'arp'
        - in: path
          name: uid
          required: true
          description: The reader's MAC address or UID.
          schema:
            type: string
            example: '001B5F00F255'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ReaderVersion:
                    type: string
                    example: '17.04.07.00'
                  ReaderName:
                    type: string
                    example: 'Alien RFID Reader'
                  ReaderModel: 
                    type: string
                    example: 'ALR-9900+EMA'
        '401':
          $ref: '#/components/responses/Unauthorized'      
        '404':
          description: Reader not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reader \"001B5F0F255\" not found"
  /reader/bulk/enable:
    post:
      tags:
        - Reader
      summary: Bulk enable readers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                readers:
                  type: array
                  items:
                    type: object
                    properties:
                      uid:
                        type: string
                      ip:
                        type: string
                      readerModel:
                        type: string
                      vendor:
                        type: string
                      port:
                        type: integer
                      secure:
                        type: boolean
                      username:
                        type: string
                      password:
                        type: string
                        
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  readers:
                    type: array
                    items:
                      type: object
                      properties:
                        uid:
                          type: string
                        ip:
                          type: string
                        readerModel:
                          type: string
                        vendor:
                          type: string
                        port:
                          type: integer
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /reader/bulk/disable:
    post:
      tags:
        - Reader
      summary: Bulk disable readers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                readers:
                  type: array
                  items:
                    type: object
                    properties:
                      uid:
                        type: string
                      ip:
                        type: string
                      readerModel:
                        type: string
                      vendor:
                        type: string
                      port:
                        type: integer
                      secure:
                        type: boolean
                      username:
                        type: string
                      password:
                        type: string
                        
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  readers:
                    type: array
                    items:
                      type: object
                      properties:
                        uid:
                          type: string
                        ip:
                          type: string
                        readerModel:
                          type: string
                        vendor:
                          type: string
                        port:
                          type: integer
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /reader/bulk/delete:
    post:
      tags:
        - Reader
      summary: Bulk delete readers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                readers:
                  type: array
                  items:
                    type: object
                    properties:
                      uid:
                        type: string
                      ip:
                        type: string
                      readerModel:
                        type: string
                      vendor:
                        type: string
                      port:
                        type: integer
                      secure:
                        type: boolean
                      username:
                        type: string
                      password:
                        type: string
                        
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  readers:
                    type: array
                    items:
                      type: object
                      properties:
                        uid:
                          type: string
                        ip:
                          type: string
                        readerModel:
                          type: string
                        vendor:
                          type: string
                        port:
                          type: integer
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /reader/bulk/restore:
    post:
      tags:
        - Reader
      summary: Bulk restore readers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                readers:
                  type: array
                  items:
                    type: object
                    properties:
                      uid:
                        type: string
                      ip:
                        type: string
                      readerModel:
                        type: string
                      vendor:
                        type: string
                      port:
                        type: integer
                      secure:
                        type: boolean
                      username:
                        type: string
                      password:
                        type: string
                        
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  readers:
                    type: array
                    items:
                      type: object
                      properties:
                        uid:
                          type: string
                        ip:
                          type: string
                        readerModel:
                          type: string
                        vendor:
                          type: string
                        port:
                          type: integer
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /reader/bulk/reboot:
    post:
      tags:
        - Reader
      summary: Bulk reboot readers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                readers:
                  type: array
                  items:
                    type: object
                    properties:
                      uid:
                        type: string
                      ip:
                        type: string
                      readerModel:
                        type: string
                      vendor:
                        type: string
                      port:
                        type: integer
                      secure:
                        type: boolean
                      username:
                        type: string
                      password:
                        type: string
                        
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  readers:
                    type: array
                    items:
                      type: object
                      properties:
                        uid:
                          type: string
                        ip:
                          type: string
                        readerModel:
                          type: string
                        vendor:
                          type: string
                        port:
                          type: integer
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /reader/model:
    get:
      tags:
        - Reader
      summary: Get available reader models.
      description: Get a list of all the available reader models from different vendors.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    antenna:
                      type: string
                      example: "0 1 2 3"
                    output:
                      type: string
                      example: "8"
                    input:
                      type: string
                      example: "4"
                    vendor:
                      type: string
                      example: "arp"
                    model:
                      type: string
                      example: "ALR-F800"
        '401':
          $ref: '#/components/responses/Unauthorized'
  /reader/{vendor}/{uid}/property/{propertyName}:
    get:
      tags:
        - Reader
      summary: Get reader property
      description: >
        Retrieves a property related to a reader according to the property name.


        Replace the path parameters placeholders {vendor}, {UID} and {propertyName} by the appropriate reader's vendor, uid and property name respectively.
      parameters:
        - in: path
          name: vendor
          required: true
          description: The reader's vendor name.
          schema:
            type: string
            example: 'arp'
        - in: path
          name: uid
          required: true
          description: The reader's MAC address or UID.
          schema:
            type: string
            example: '001B5F00F255'
        - in: path
          name: propertyName
          required: true
          description: The reader's property name.
          schema:
            type: string
            example: 'ipaddress'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: string
                    example: '10.0.0.59'
        '401':
          $ref: '#/components/responses/Unauthorized'      
        '404':
          description: Reader not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Reader \"001B5F0F255\" not found"
  /reader/config:
    post:
      tags:
        - Reader
      summary: Set reader properties
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  type: string
                  example: '001B5F0F255'
                vendor:
                  type: string
                  example: arp
                properties:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: 'antennasequence'
                      value:
                        type: string
                        example: '0 1'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    defaultValue:
                      type: string
                    readOnly:
                      type: boolean
                    required:
                      type: boolean
                    visible:
                      type: boolean
                    maximumValue:
                      type: integer
                    minimumValue:
                      type: integer
                    name:
                      type: string
                    value:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /subscription:
    post:
      tags:
        - Subscription
      summary: Add subscriber
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber'
      responses:
        '201':
          description: Subscriber created successfully.
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Invalid IP address.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid ip address.'
    get:
      tags:
        - Subscription
      summary: List subscriptions.
      description: >
        This path may be provided by a 'fields' query string to filter some unwanted fields.
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscriber'
                example:
                  - description: 'Debug-EMC'
                    uri: ''
                    protocol: 'tcp'
                    address: '10.0.0.56'
                    port: 55555                
                  - description: 'pubsub'
                    uri: ''
                    protocol: 'tcp'
                    address: '127.0.0.1'
                    port: 55555                
                  - description: 'TrainingServer'
                    uri: ''
                    protocol: 'http'
                    address: '152.168.1.50'
                    port: 55555
  /subscription/{subscriptionName}:
    delete:
      tags:
        - Subscription
      summary: Delete subscriber
      description: Replace the path parameters placeholders {subscriptionName} by the appropriate subscriber's name.
      parameters:
        - in: path
          name: subscriptionName
          required: true
          description: The subscriber's name to be deleted.
          schema:
            type: string
            example: 'TrainingServer'
      responses:
        '204':
          description: Subscriber deleted successfully.
        '401': 
            $ref: '#/components/responses/Unauthorized'
        '404':
          description: Subscriber not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Subscriber \"TrainingServer\" not found"
    get:
      tags:
        - Subscription
      summary: Get subscriber
      description: >
        Fetch a subscriber by name.


        Replace the path parameters placeholders {subscriptionName} by the appropriate subscriber's name.
      parameters:
        - in: path
          name: subscriptionName
          required: true
          description: The subscriber's name to be fetched.
          schema:
            type: string
            example: 'TrainingServer'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Subscriber'
  /subscription/delete:
    post:
      tags:
        - Subscription
      summary: Delete subscribers
      description: Delete multiple subscribers by their names.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: 
                - Subscriber1
                - Subscriber2
      responses:
        '204':
          description: Subscribers deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /subscription/bulk/delete:
    post:
      tags:
        - Subscription
      summary: Bulk delete subscribers.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                subscribers:
                  type: array
                  items:
                    type: object
                    properties:
                      description:
                        type: string
                  example: 
                    - name: subscriber1
                    - name: subscriber2
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscribers:
                    type: array
                    items:
                      type: object
                      properties:
                        description:
                          type: string
                        port:
                          type: number
                        status:
                          type: string
                        success:
                          type: boolean
                        message:
                          type: string
                    example:
                      - name: subscriber1
                        port: 12345
                        status: success
                        success: true
                      - name: subscriber2
                        port: 12346
                        status: success
                        success: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /workflow:
    get:
      tags:
        - Workflow
      summary: List workflows
      description: >
        List all workflows.


        This path may be provided by a \'fields\' query string to filter some unwanted properties.
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
                example:
                  - name: "DVF-Dock-Load"
                    logicalReaders: []
                    started: true
                    startTriggers:
                       device: "DVF_Dock_Load"
                       action: "On"
                    stopTriggers: []
                    meta: "<Activity mc:Ignorable=\"sap sap2010 sads\" x:Class=\"AI.ActiveEmissary.UI.Flowchart\" mva:VisualBasic.Settings=\"{x:Null}\" sap2010:WorkflowViewState.IdRef=\"AI.ActiveEmissary.UI.Flowchart_1\"\r\n xmlns=\"http://schemas.microsoft.com/netfx/2009/xaml/activities\"\r\n xmlns:aau=\"clr-namespace:AI.ActiveEmissary.UI;assembly=AI.ActiveEmissary.UI\"\r\n xmlns:aaum=\"clr-namespace:AI.ActiveEmissary.UI.Models;assembly=AI.ActiveEmissary.UI.Models\"\r\n xmlns:av=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n xmlns:mva=\"clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities\"\r\n xmlns:sads=\"http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger\"\r\n xmlns:sap=\"http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation\"\r\n xmlns:sap2010=\"http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation\"\r\n xmlns:scg=\"clr-namespace:System.Collections.Generic;assembly=mscorlib\"\r\n xmlns:sco=\"clr-namespace:System.Collections.ObjectModel;assembly=mscorlib\"\r\n xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\r\n  <TextExpression.NamespacesForImplementation>\r\n    <sco:Collection x:TypeArguments=\"x:String\">\r\n      <x:String>System.Activities</x:String>\r\n      <x:String>System.Activities.Statements</x:String>\r\n      <x:String>System.Activities.Expressions</x:String>\r\n      <x:String>System.Activities.Validation</x:String>\r\n      <x:String>System.Activities.XamlIntegration</x:String>\r\n      <x:String>System.Windows.Controls</x:String>\r\n      <x:String>System.Windows.Documents</x:String>\r\n      <x:String>System.Windows.Shapes</x:String>\r\n      <x:String>System.Windows.Shell</x:String>\r\n      <x:String>System.Windows.Navigation</x:String>\r\n      <x:String>System.Windows.Data</x:String>\r\n      <x:String>System.Windows</x:String>\r\n      <x:String>System.Windows.Controls.Primitives</x:String>\r\n      <x:String>System.Windows.Media.Animation</x:String>\r\n      <x:String>System.Windows.Input</x:String>\r\n      <x:String>System.Windows.Media</x:String>\r\n      <x:String>System.Diagnostics</x:String>\r\n      <x:String>System.Windows.Media.Effects</x:String>\r\n      <x:String>System.Windows.Automation</x:String>\r\n      <x:String>System.Windows.Media.TextFormatting</x:String>\r\n      <x:String>System.Windows.Ink</x:String>\r\n      <x:String>System.Windows.Media.Media3D</x:String>\r\n      <x:String>System.Windows.Media.Imaging</x:String>\r\n      <x:String>System.Windows.Forms.Integration</x:String>\r\n      <x:String>Microsoft.VisualBasic</x:String>\r\n      <x:String>Microsoft.VisualBasic.Activities</x:String>\r\n      <x:String>System</x:String>\r\n      <x:String>System.Activities.Debugger</x:String>\r\n      <x:String>System.Collections.Generic</x:String>\r\n      <x:String>System.Data</x:String>\r\n      <x:String>System.Linq</x:String>\r\n      <x:String>System.Text</x:String>\r\n      <x:String>System.Windows.Markup</x:String>\r\n    </sco:Collection>\r\n  </TextExpression.NamespacesForImplementation>\r\n  <TextExpression.ReferencesForImplementation>\r\n    <sco:Collection x:TypeArguments=\"AssemblyReference\">\r\n      <AssemblyReference>System.Activities</AssemblyReference>\r\n      <AssemblyReference>PresentationFramework</AssemblyReference>\r\n      <AssemblyReference>WindowsBase</AssemblyReference>\r\n      <AssemblyReference>PresentationCore</AssemblyReference>\r\n      <AssemblyReference>WindowsFormsIntegration</AssemblyReference>\r\n      <AssemblyReference>System</AssemblyReference>\r\n      <AssemblyReference>mscorlib</AssemblyReference>\r\n      <AssemblyReference>System.Xml</AssemblyReference>\r\n      <AssemblyReference>System.Core</AssemblyReference>\r\n      <AssemblyReference>System.ServiceModel</AssemblyReference>\r\n      <AssemblyReference>System.Data</AssemblyReference>\r\n      <AssemblyReference>System.Xaml</AssemblyReference>\r\n    </sco:Collection>\r\n  </TextExpression.ReferencesForImplementation>\r\n  <Flowchart sap2010:WorkflowViewState.IdRef=\"Flowchart_1\">\r\n    <Flowchart.Variables>\r\n      <Variable x:TypeArguments=\"x:String\" Name=\"GetWorkflowStatusValue0\" />\r\n      <Variable x:TypeArguments=\"x:Int32\" Name=\"AM_ReadValue1\" />\r\n    </Flowchart.Variables>\r\n    <Flowchart.StartNode>\r\n      <FlowStep x:Name=\"__ReferenceID5\" sap2010:WorkflowViewState.IdRef=\"FlowStep_9\">\r\n        <aau:EmissaryActivity Code=\"if(stop == 1){return;}\tString vWorkflowName = &quot;DVF-Dock-Unload&quot;;&#xD;&#xA;@envoy.GetWorkflowStatus{WorkflowName:vWorkflowName} &gt; Vee6dc483a97d45288bb8342668e387be;&#xA;&#xD;GetWorkflowStatusValue0 = Vee6dc483a97d45288bb8342668e387be;&#xA;&#xD;\" DisplayName=\"GetWorkflowStatus\" ID=\"de6e7538-86a8-49e0-9344-310fd79a9434\" sap2010:WorkflowViewState.IdRef=\"EmissaryActivity_6\" Name=\"GetWorkflowStatus\" ReturnType=\"String\" ReturnVariable=\"GetWorkflowStatusValue0\">\r\n          <aau:EmissaryActivity.Props>\r\n            <scg:List x:TypeArguments=\"aaum:CActivityPropertyModel\" Capacity=\"4\">\r\n              <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"WorkflowName\" Type=\"String\" TypeEditor=\"Text\" Value=\"DVF-Dock-Unload\" />\r\n            </scg:List>\r\n          </aau:EmissaryActivity.Props>\r\n        </aau:EmissaryActivity>\r\n        <FlowStep.Next>\r\n          <FlowDecision x:Name=\"__ReferenceID6\" Condition=\"[GetWorkflowStatusValue0.equals(&quot;stopped&quot;)]\" sap2010:WorkflowViewState.IdRef=\"FlowDecision_2\">\r\n            <FlowDecision.True>\r\n              <FlowStep x:Name=\"__ReferenceID1\" sap2010:WorkflowViewState.IdRef=\"FlowStep_6\">\r\n                <aau:EmissaryIOActivity Action=\"Amber\" Code=\"if(stop == 1){return;}&#xD;&#xA;@envoy.InvokeExternalDeviceAction{DeviceName:&quot;DVF_Dock_Stack&quot;,DeviceAction:&quot;Amber&quot;};\" Device=\"DVF_Dock_Stack\" DisplayName=\"InvokeExternalDeviceAction\" ID=\"78ec1836-31de-45b0-8f02-c3f5d318cc53\" sap2010:WorkflowViewState.IdRef=\"EmissaryIOActivity_1\" Name=\"InvokeExternalDeviceAction\" />\r\n                <FlowStep.Next>\r\n                  <FlowStep x:Name=\"__ReferenceID0\" sap2010:WorkflowViewState.IdRef=\"FlowStep_11\">\r\n                    <aau:EmissaryActivity Code=\"if(stop == 1){return;}\tString vLogicalDevice = &quot;DVF-Dock&quot;;&#xD;&#xA;\tInteger vPauseDuration = 0;&#xD;&#xA;\tInteger vReadDuration = 3000;&#xD;&#xA;\tString vOperation = &quot;Load&quot;;&#xD;&#xA;@envoy.AM_Read{LogicalDevice:vLogicalDevice,PauseDuration:vPauseDuration,ReadDuration:vReadDuration,Operation:vOperation} &gt; Va4485bb89a30408c9c747c949abea1a4;&#xA;&#xD;AM_ReadValue1 = Va4485bb89a30408c9c747c949abea1a4;&#xA;&#xD;\" DisplayName=\"AM_Read\" ID=\"81655aaa-86e2-4534-94f1-4d98de658ae4\" sap2010:WorkflowViewState.IdRef=\"EmissaryActivity_8\" Name=\"AM_Read\" ReturnType=\"Integer\" ReturnVariable=\"AM_ReadValue1\">\r\n                      <aau:EmissaryActivity.Props>\r\n                        <scg:List x:TypeArguments=\"aaum:CActivityPropertyModel\" Capacity=\"4\">\r\n                          <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"LogicalDevice\" Type=\"String\" TypeEditor=\"LogicalDevices\" Value=\"DVF-Dock\" />\r\n                          <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"PauseDuration\" Type=\"Integer\" TypeEditor=\"Text\" Value=\"0\" />\r\n                          <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"ReadDuration\" Type=\"Integer\" TypeEditor=\"Text\" Value=\"3000\" />\r\n                          <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"Operation\" Type=\"String\" TypeEditor=\"Text\" Value=\"Load\" />\r\n                        </scg:List>\r\n                      </aau:EmissaryActivity.Props>\r\n                    </aau:EmissaryActivity>\r\n                    <FlowStep.Next>\r\n                      <FlowDecision x:Name=\"__ReferenceID2\" Condition=\"[AM_ReadValue1=1]\" sap2010:WorkflowViewState.IdRef=\"FlowDecision_1\">\r\n                        <FlowDecision.True>\r\n                          <FlowStep x:Name=\"__ReferenceID3\" sap2010:WorkflowViewState.IdRef=\"FlowStep_1\">\r\n                            <aau:EmissaryIOActivity Action=\"Green\" Code=\"if(stop == 1){return;}&#xD;&#xA;@envoy.InvokeExternalDeviceAction{DeviceName:&quot;DVF_Dock_Stack&quot;,DeviceAction:&quot;Green&quot;};\" Device=\"DVF_Dock_Stack\" DisplayName=\"InvokeExternalDeviceAction\" ID=\"b851ab75-4c66-47d0-9dd3-7f037c17bd25\" sap2010:WorkflowViewState.IdRef=\"EmissaryIOActivity_2\" Name=\"InvokeExternalDeviceAction\" />\r\n                            <FlowStep.Next>\r\n                              <x:Reference>__ReferenceID0</x:Reference>\r\n                            </FlowStep.Next>\r\n                          </FlowStep>\r\n                        </FlowDecision.True>\r\n                        <FlowDecision.False>\r\n                          <FlowStep x:Name=\"__ReferenceID4\" sap2010:WorkflowViewState.IdRef=\"FlowStep_2\">\r\n                            <aau:EmissaryIOActivity Action=\"AllOff\" Code=\"if(stop == 1){return;}&#xD;&#xA;@envoy.InvokeExternalDeviceAction{DeviceName:&quot;DVF_Dock_Stack&quot;,DeviceAction:&quot;AllOff&quot;};\" Device=\"DVF_Dock_Stack\" DisplayName=\"InvokeExternalDeviceAction\" ID=\"fc0ffa3b-dcd7-4163-926a-0fb55261789e\" sap2010:WorkflowViewState.IdRef=\"EmissaryIOActivity_3\" Name=\"InvokeExternalDeviceAction\" />\r\n                            <FlowStep.Next>\r\n                              <x:Reference>__ReferenceID0</x:Reference>\r\n                            </FlowStep.Next>\r\n                          </FlowStep>\r\n                        </FlowDecision.False>\r\n                      </FlowDecision>\r\n                    </FlowStep.Next>\r\n                  </FlowStep>\r\n                </FlowStep.Next>\r\n              </FlowStep>\r\n            </FlowDecision.True>\r\n          </FlowDecision>\r\n        </FlowStep.Next>\r\n      </FlowStep>\r\n    </Flowchart.StartNode>\r\n    <x:Reference>__ReferenceID1</x:Reference>\r\n    <x:Reference>__ReferenceID2</x:Reference>\r\n    <x:Reference>__ReferenceID3</x:Reference>\r\n    <x:Reference>__ReferenceID4</x:Reference>\r\n    <x:Reference>__ReferenceID5</x:Reference>\r\n    <x:Reference>__ReferenceID6</x:Reference>\r\n    <x:Reference>__ReferenceID0</x:Reference>\r\n    <sads:DebugSymbol.Symbol>dw1DOlxFbXB0eS54YW1sAA==</sads:DebugSymbol.Symbol>\r\n  </Flowchart>\r\n  <sap2010:WorkflowViewState.ViewStateManager>\r\n    <sap2010:ViewStateManager>\r\n      <sap2010:ViewStateData Id=\"EmissaryActivity_6\" sap:VirtualizedContainerService.HintSize=\"276,65\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"EmissaryIOActivity_1\" sap:VirtualizedContainerService.HintSize=\"244,98\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"EmissaryActivity_8\" sap:VirtualizedContainerService.HintSize=\"276,152\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"EmissaryIOActivity_2\" sap:VirtualizedContainerService.HintSize=\"244,98\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_1\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">318,431</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">244,98</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">318,480 12,480 12,320 42,320</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"EmissaryIOActivity_3\" sap:VirtualizedContainerService.HintSize=\"244,98\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_2\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">588,381</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">244,98</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">710,479 710,559 20,559 20,320 42,320</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowDecision_1\" sap:VirtualizedContainerService.HintSize=\"70,87\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n            <av:Point x:Key=\"ShapeLocation\">535,236.5</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">70,87</av:Size>\r\n            <av:PointCollection x:Key=\"TrueConnector\">535,280 440,280 440,431</av:PointCollection>\r\n            <av:PointCollection x:Key=\"FalseConnector\">605,280 710,280 710,381</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_11\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">42,244</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">276,152</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">318,320 348,320 348,206.5 570,206.5 570,236.5</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_6\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">58,121</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">244,98</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">180,219 180,244</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowDecision_2\" sap:VirtualizedContainerService.HintSize=\"70,87\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n            <av:Point x:Key=\"ShapeLocation\">675,136.5</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">70,87</av:Size>\r\n            <av:PointCollection x:Key=\"TrueConnector\">675,180 645,180 645,106.5 180,106.5 180,121</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_9\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">192,7.5</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">276,65</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">468,40 710,40 710,136.5</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"Flowchart_1\" sap:VirtualizedContainerService.HintSize=\"932,772\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">False</x:Boolean>\r\n            <av:Point x:Key=\"ShapeLocation\">20,2.5</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">60,75</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">80,40 192,40</av:PointCollection>\r\n            <x:Double x:Key=\"Width\">918</x:Double>\r\n            <x:Double x:Key=\"Height\">736.14</x:Double>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"AI.ActiveEmissary.UI.Flowchart_1\" sap:VirtualizedContainerService.HintSize=\"972,852\" />\r\n    </sap2010:ViewStateManager>\r\n  </sap2010:WorkflowViewState.ViewStateManager>\r\n</Activity>"
                    runtime: "int stop = 0;String next = null;Integer AM_ReadValue1 = 0;\nString GetWorkflowStatusValue0;\npublic void start() throws Exception {stop = 0; \n__ReferenceID5();\nwhile(next != null && stop == 0){ Thread.sleep(100);if(next.equals(\"__ReferenceID1\")){next = null ;__ReferenceID1();continue;}if(next.equals(\"__ReferenceID2\")){next = null ;__ReferenceID2();continue;}if(next.equals(\"__ReferenceID3\")){next = null ;__ReferenceID3();continue;}if(next.equals(\"__ReferenceID4\")){next = null ;__ReferenceID4();continue;}if(next.equals(\"__ReferenceID5\")){next = null ;__ReferenceID5();continue;}if(next.equals(\"__ReferenceID6\")){next = null ;__ReferenceID6();continue;}if(next.equals(\"__ReferenceID0\")){next = null ;__ReferenceID0();continue;}}}\r\n                public void __ReferenceID5() throws Exception\r\n                {\r\n                    if(stop == 1){return;} String vWorkflowName = \"DVF-Dock-Unload\";\r\n@envoy.GetWorkflowStatus{WorkflowName:vWorkflowName} > Vee6dc483a97d45288bb8342668e387be;\n\rGetWorkflowStatusValue0 = (String)Vee6dc483a97d45288bb8342668e387be;\n\rnext = \"__ReferenceID6\";\n\r\n                }\npublic void __ReferenceID6(){if(GetWorkflowStatusValue0.equals(\"stopped\")) {next = \"__ReferenceID1\";\n} else{return;}}\r\n                public void __ReferenceID1() throws Exception\r\n                {\r\n                    if(stop == 1){return;}\r\n@envoy.InvokeExternalDeviceAction{DeviceName:\"DVF_Dock_Stack\",DeviceAction:\"Amber\"};next = \"__ReferenceID0\";\n\r\n                }\n\r\n                public void __ReferenceID0() throws Exception\r\n                {\r\n                    if(stop == 1){return;} String vLogicalDevice = \"DVF-Dock\";\r\n Integer vPauseDuration = 0;\r\n Integer vReadDuration = 3000;\r\n String vOperation = \"Load\";\r\n@envoy.AM_Read{LogicalDevice:vLogicalDevice,PauseDuration:vPauseDuration,ReadDuration:vReadDuration,Operation:vOperation} > Va4485bb89a30408c9c747c949abea1a4;\n\rAM_ReadValue1 = (Integer)Va4485bb89a30408c9c747c949abea1a4;\n\rnext = \"__ReferenceID2\";\n\r\n                }\npublic void __ReferenceID2(){if(AM_ReadValue1==1) {next = \"__ReferenceID3\";\n} else{next = \"__ReferenceID4\";}\n}\r\n                public void __ReferenceID3() throws Exception\r\n                {\r\n                    if(stop == 1){return;}\r\n@envoy.InvokeExternalDeviceAction{DeviceName:\"DVF_Dock_Stack\",DeviceAction:\"Green\"};next = \"__ReferenceID0\";\r\n                }\n\r\n                public void __ReferenceID4() throws Exception\r\n                {\r\n                    if(stop == 1){return;}\r\n@envoy.InvokeExternalDeviceAction{DeviceName:\"DVF_Dock_Stack\",DeviceAction:\"AllOff\"};next = \"__ReferenceID0\";\r\n                }\npublic void stop() throws Exception {stop = 1;}"
                    properties: []
                  - name: "DVF-Dock-Unload"
                    logicalReaders: []
                    started: false
                    startTriggers: 
                       device: "DVF_Dock_Unload"
                       action: "On"
                    stopTriggers: []
                    meta: "<Activity mc:Ignorable=\"sap sap2010 sads\" x:Class=\"AI.ActiveEmissary.UI.Flowchart\" mva:VisualBasic.Settings=\"{x:Null}\" sap2010:WorkflowViewState.IdRef=\"AI.ActiveEmissary.UI.Flowchart_1\"\r\n xmlns=\"http://schemas.microsoft.com/netfx/2009/xaml/activities\"\r\n xmlns:aau=\"clr-namespace:AI.ActiveEmissary.UI;assembly=AI.ActiveEmissary.UI\"\r\n xmlns:aaum=\"clr-namespace:AI.ActiveEmissary.UI.Models;assembly=AI.ActiveEmissary.UI.Models\"\r\n xmlns:av=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n xmlns:mva=\"clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities\"\r\n xmlns:sads=\"http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger\"\r\n xmlns:sap=\"http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation\"\r\n xmlns:sap2010=\"http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation\"\r\n xmlns:scg=\"clr-namespace:System.Collections.Generic;assembly=mscorlib\"\r\n xmlns:sco=\"clr-namespace:System.Collections.ObjectModel;assembly=mscorlib\"\r\n xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\r\n  <TextExpression.NamespacesForImplementation>\r\n    <sco:Collection x:TypeArguments=\"x:String\">\r\n      <x:String>System.Activities</x:String>\r\n      <x:String>System.Activities.Statements</x:String>\r\n      <x:String>System.Activities.Expressions</x:String>\r\n      <x:String>System.Activities.Validation</x:String>\r\n      <x:String>System.Activities.XamlIntegration</x:String>\r\n      <x:String>System.Windows.Controls</x:String>\r\n      <x:String>System.Windows.Documents</x:String>\r\n      <x:String>System.Windows.Shapes</x:String>\r\n      <x:String>System.Windows.Shell</x:String>\r\n      <x:String>System.Windows.Navigation</x:String>\r\n      <x:String>System.Windows.Data</x:String>\r\n      <x:String>System.Windows</x:String>\r\n      <x:String>System.Windows.Controls.Primitives</x:String>\r\n      <x:String>System.Windows.Media.Animation</x:String>\r\n      <x:String>System.Windows.Input</x:String>\r\n      <x:String>System.Windows.Media</x:String>\r\n      <x:String>System.Diagnostics</x:String>\r\n      <x:String>System.Windows.Media.Effects</x:String>\r\n      <x:String>System.Windows.Automation</x:String>\r\n      <x:String>System.Windows.Media.TextFormatting</x:String>\r\n      <x:String>System.Windows.Ink</x:String>\r\n      <x:String>System.Windows.Media.Media3D</x:String>\r\n      <x:String>System.Windows.Media.Imaging</x:String>\r\n      <x:String>System.Windows.Forms.Integration</x:String>\r\n      <x:String>Microsoft.VisualBasic</x:String>\r\n      <x:String>Microsoft.VisualBasic.Activities</x:String>\r\n      <x:String>System</x:String>\r\n      <x:String>System.Activities.Debugger</x:String>\r\n      <x:String>System.Collections.Generic</x:String>\r\n      <x:String>System.Data</x:String>\r\n      <x:String>System.Linq</x:String>\r\n      <x:String>System.Text</x:String>\r\n      <x:String>System.Windows.Markup</x:String>\r\n    </sco:Collection>\r\n  </TextExpression.NamespacesForImplementation>\r\n  <TextExpression.ReferencesForImplementation>\r\n    <sco:Collection x:TypeArguments=\"AssemblyReference\">\r\n      <AssemblyReference>System.Activities</AssemblyReference>\r\n      <AssemblyReference>PresentationFramework</AssemblyReference>\r\n      <AssemblyReference>WindowsBase</AssemblyReference>\r\n      <AssemblyReference>PresentationCore</AssemblyReference>\r\n      <AssemblyReference>WindowsFormsIntegration</AssemblyReference>\r\n      <AssemblyReference>System</AssemblyReference>\r\n      <AssemblyReference>mscorlib</AssemblyReference>\r\n      <AssemblyReference>System.Xml</AssemblyReference>\r\n      <AssemblyReference>System.Core</AssemblyReference>\r\n      <AssemblyReference>System.ServiceModel</AssemblyReference>\r\n      <AssemblyReference>System.Data</AssemblyReference>\r\n      <AssemblyReference>System.Xaml</AssemblyReference>\r\n    </sco:Collection>\r\n  </TextExpression.ReferencesForImplementation>\r\n  <Flowchart sap2010:WorkflowViewState.IdRef=\"Flowchart_1\">\r\n    <Flowchart.Variables>\r\n      <Variable x:TypeArguments=\"x:String\" Name=\"GetWorkflowStatusValue0\" />\r\n      <Variable x:TypeArguments=\"x:Int32\" Name=\"AM_ReadValue1\" />\r\n    </Flowchart.Variables>\r\n    <Flowchart.StartNode>\r\n      <FlowStep x:Name=\"__ReferenceID4\" sap2010:WorkflowViewState.IdRef=\"FlowStep_9\">\r\n        <aau:EmissaryActivity Code=\"if(stop == 1){return;}\tString vWorkflowName = &quot;DVF-Dock-Load&quot;;&#xD;&#xA;@envoy.GetWorkflowStatus{WorkflowName:vWorkflowName} &gt; Vbc104a28021c483ba489fa243949cf0d;&#xA;&#xD;GetWorkflowStatusValue0 = Vbc104a28021c483ba489fa243949cf0d;&#xA;&#xD;\" DisplayName=\"GetWorkflowStatus\" ID=\"de6e7538-86a8-49e0-9344-310fd79a9434\" sap2010:WorkflowViewState.IdRef=\"EmissaryActivity_6\" Name=\"GetWorkflowStatus\" ReturnType=\"String\" ReturnVariable=\"GetWorkflowStatusValue0\">\r\n          <aau:EmissaryActivity.Props>\r\n            <scg:List x:TypeArguments=\"aaum:CActivityPropertyModel\" Capacity=\"4\">\r\n              <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"WorkflowName\" Type=\"String\" TypeEditor=\"Text\" Value=\"DVF-Dock-Load\" />\r\n            </scg:List>\r\n          </aau:EmissaryActivity.Props>\r\n        </aau:EmissaryActivity>\r\n        <FlowStep.Next>\r\n          <FlowDecision x:Name=\"__ReferenceID5\" Condition=\"[GetWorkflowStatusValue0.equals(&quot;stopped&quot;)]\" sap2010:WorkflowViewState.IdRef=\"FlowDecision_2\">\r\n            <FlowDecision.True>\r\n              <FlowStep x:Name=\"__ReferenceID0\" sap2010:WorkflowViewState.IdRef=\"FlowStep_6\">\r\n                <aau:EmissaryIOActivity Action=\"Amber\" Code=\"if(stop == 1){return;}&#xD;&#xA;@envoy.InvokeExternalDeviceAction{DeviceName:&quot;DVF_Dock_Stack&quot;,DeviceAction:&quot;Amber&quot;};\" Device=\"DVF_Dock_Stack\" DisplayName=\"InvokeExternalDeviceAction\" ID=\"78ec1836-31de-45b0-8f02-c3f5d318cc53\" sap2010:WorkflowViewState.IdRef=\"EmissaryIOActivity_1\" Name=\"InvokeExternalDeviceAction\" />\r\n                <FlowStep.Next>\r\n                  <FlowStep x:Name=\"__ReferenceID6\" sap2010:WorkflowViewState.IdRef=\"FlowStep_11\">\r\n                    <aau:EmissaryActivity Code=\"if(stop == 1){return;}\tString vLogicalDevice = &quot;DVF-Dock&quot;;&#xD;&#xA;\tInteger vPauseDuration = 0;&#xD;&#xA;\tInteger vReadDuration = 3000;&#xD;&#xA;\tString vOperation = &quot;Unload&quot;;&#xD;&#xA;@envoy.AM_Read{LogicalDevice:vLogicalDevice,PauseDuration:vPauseDuration,ReadDuration:vReadDuration,Operation:vOperation} &gt; Vc1140c25998c4433a854443bd4e4a078;&#xA;&#xD;AM_ReadValue1 = Vc1140c25998c4433a854443bd4e4a078;&#xA;&#xD;\" DisplayName=\"AM_Read\" ID=\"81655aaa-86e2-4534-94f1-4d98de658ae4\" sap2010:WorkflowViewState.IdRef=\"EmissaryActivity_8\" Name=\"AM_Read\" ReturnType=\"Integer\" ReturnVariable=\"AM_ReadValue1\">\r\n                      <aau:EmissaryActivity.Props>\r\n                        <scg:List x:TypeArguments=\"aaum:CActivityPropertyModel\" Capacity=\"4\">\r\n                          <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"LogicalDevice\" Type=\"String\" TypeEditor=\"LogicalDevices\" Value=\"DVF-Dock\" />\r\n                          <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"PauseDuration\" Type=\"Integer\" TypeEditor=\"Text\" Value=\"0\" />\r\n                          <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"ReadDuration\" Type=\"Integer\" TypeEditor=\"Text\" Value=\"3000\" />\r\n                          <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"Operation\" Type=\"String\" TypeEditor=\"Text\" Value=\"Unload\" />\r\n                        </scg:List>\r\n                      </aau:EmissaryActivity.Props>\r\n                    </aau:EmissaryActivity>\r\n                    <FlowStep.Next>\r\n                      <FlowDecision x:Name=\"__ReferenceID1\" Condition=\"[AM_ReadValue1=1]\" sap2010:WorkflowViewState.IdRef=\"FlowDecision_1\">\r\n                        <FlowDecision.True>\r\n                          <FlowStep x:Name=\"__ReferenceID2\" sap2010:WorkflowViewState.IdRef=\"FlowStep_1\">\r\n                            <aau:EmissaryIOActivity Action=\"Green\" Code=\"if(stop == 1){return;}&#xD;&#xA;@envoy.InvokeExternalDeviceAction{DeviceName:&quot;DVF_Dock_Stack&quot;,DeviceAction:&quot;Green&quot;};\" Device=\"DVF_Dock_Stack\" DisplayName=\"InvokeExternalDeviceAction\" ID=\"b851ab75-4c66-47d0-9dd3-7f037c17bd25\" sap2010:WorkflowViewState.IdRef=\"EmissaryIOActivity_2\" Name=\"InvokeExternalDeviceAction\" />\r\n                          </FlowStep>\r\n                        </FlowDecision.True>\r\n                        <FlowDecision.False>\r\n                          <FlowStep x:Name=\"__ReferenceID3\" sap2010:WorkflowViewState.IdRef=\"FlowStep_2\">\r\n                            <aau:EmissaryIOActivity Action=\"AllOff\" Code=\"if(stop == 1){return;}&#xD;&#xA;@envoy.InvokeExternalDeviceAction{DeviceName:&quot;DVF_Dock_Stack&quot;,DeviceAction:&quot;AllOff&quot;};\" Device=\"DVF_Dock_Stack\" DisplayName=\"InvokeExternalDeviceAction\" ID=\"fc0ffa3b-dcd7-4163-926a-0fb55261789e\" sap2010:WorkflowViewState.IdRef=\"EmissaryIOActivity_3\" Name=\"InvokeExternalDeviceAction\" />\r\n                          </FlowStep>\r\n                        </FlowDecision.False>\r\n                      </FlowDecision>\r\n                    </FlowStep.Next>\r\n                  </FlowStep>\r\n                </FlowStep.Next>\r\n              </FlowStep>\r\n            </FlowDecision.True>\r\n          </FlowDecision>\r\n        </FlowStep.Next>\r\n      </FlowStep>\r\n    </Flowchart.StartNode>\r\n    <x:Reference>__ReferenceID0</x:Reference>\r\n    <x:Reference>__ReferenceID1</x:Reference>\r\n    <x:Reference>__ReferenceID2</x:Reference>\r\n    <x:Reference>__ReferenceID3</x:Reference>\r\n    <x:Reference>__ReferenceID4</x:Reference>\r\n    <x:Reference>__ReferenceID5</x:Reference>\r\n    <x:Reference>__ReferenceID6</x:Reference>\r\n    <sads:DebugSymbol.Symbol>dw1DOlxFbXB0eS54YW1sAA==</sads:DebugSymbol.Symbol>\r\n  </Flowchart>\r\n  <sap2010:WorkflowViewState.ViewStateManager>\r\n    <sap2010:ViewStateManager>\r\n      <sap2010:ViewStateData Id=\"EmissaryActivity_6\" sap:VirtualizedContainerService.HintSize=\"276,65\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"EmissaryIOActivity_1\" sap:VirtualizedContainerService.HintSize=\"244,98\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"EmissaryActivity_8\" sap:VirtualizedContainerService.HintSize=\"276,152\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"EmissaryIOActivity_2\" sap:VirtualizedContainerService.HintSize=\"244,98\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_1\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">318,431</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">244,98</av:Size>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"EmissaryIOActivity_3\" sap:VirtualizedContainerService.HintSize=\"244,98\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_2\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">588,381</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">244,98</av:Size>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowDecision_1\" sap:VirtualizedContainerService.HintSize=\"70,87\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n            <av:Point x:Key=\"ShapeLocation\">535,236.5</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">70,87</av:Size>\r\n            <av:PointCollection x:Key=\"TrueConnector\">535,280 440,280 440,431</av:PointCollection>\r\n            <av:PointCollection x:Key=\"FalseConnector\">605,280 710,280 710,381</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_11\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">42,244</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">276,152</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">318,320 348,320 348,206.5 570,206.5 570,236.5</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_6\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">58,121</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">244,98</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">180,219 180,244</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowDecision_2\" sap:VirtualizedContainerService.HintSize=\"70,87\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n            <av:Point x:Key=\"ShapeLocation\">675,136.5</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">70,87</av:Size>\r\n            <av:PointCollection x:Key=\"TrueConnector\">675,180 645,180 645,91 180,91 180,121</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_9\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">192,7.5</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">276,65</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">468,40 710,40 710,136.5</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"Flowchart_1\" sap:VirtualizedContainerService.HintSize=\"932,772\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">False</x:Boolean>\r\n            <av:Point x:Key=\"ShapeLocation\">20,2.5</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">60,75</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">80,40 192,40</av:PointCollection>\r\n            <x:Double x:Key=\"Width\">918</x:Double>\r\n            <x:Double x:Key=\"Height\">736.14</x:Double>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"AI.ActiveEmissary.UI.Flowchart_1\" sap:VirtualizedContainerService.HintSize=\"972,852\" />\r\n    </sap2010:ViewStateManager>\r\n  </sap2010:WorkflowViewState.ViewStateManager>\r\n</Activity>"
                    runtime: "int stop = 0;String next = null;Integer AM_ReadValue1 = 0;\nString GetWorkflowStatusValue0;\npublic void start() throws Exception {stop = 0; \n__ReferenceID4();\nwhile(next != null && stop == 0){ Thread.sleep(100);if(next.equals(\"__ReferenceID0\")){next = null ;__ReferenceID0();continue;}if(next.equals(\"__ReferenceID1\")){next = null ;__ReferenceID1();continue;}if(next.equals(\"__ReferenceID2\")){next = null ;__ReferenceID2();continue;}if(next.equals(\"__ReferenceID3\")){next = null ;__ReferenceID3();continue;}if(next.equals(\"__ReferenceID4\")){next = null ;__ReferenceID4();continue;}if(next.equals(\"__ReferenceID5\")){next = null ;__ReferenceID5();continue;}if(next.equals(\"__ReferenceID6\")){next = null ;__ReferenceID6();continue;}}}\r\n                public void __ReferenceID4() throws Exception\r\n                {\r\n                    if(stop == 1){return;} String vWorkflowName = \"DVF-Dock-Load\";\r\n@envoy.GetWorkflowStatus{WorkflowName:vWorkflowName} > Vbc104a28021c483ba489fa243949cf0d;\n\rGetWorkflowStatusValue0 = (String)Vbc104a28021c483ba489fa243949cf0d;\n\rnext = \"__ReferenceID5\";\n\r\n                }\npublic void __ReferenceID5(){if(GetWorkflowStatusValue0.equals(\"stopped\")) {next = \"__ReferenceID0\";\n} else{return;}}\r\n                public void __ReferenceID0() throws Exception\r\n                {\r\n                    if(stop == 1){return;}\r\n@envoy.InvokeExternalDeviceAction{DeviceName:\"DVF_Dock_Stack\",DeviceAction:\"Amber\"};next = \"__ReferenceID6\";\n\r\n                }\n\r\n                public void __ReferenceID6() throws Exception\r\n                {\r\n                    if(stop == 1){return;} String vLogicalDevice = \"DVF-Dock\";\r\n Integer vPauseDuration = 0;\r\n Integer vReadDuration = 3000;\r\n String vOperation = \"Unload\";\r\n@envoy.AM_Read{LogicalDevice:vLogicalDevice,PauseDuration:vPauseDuration,ReadDuration:vReadDuration,Operation:vOperation} > Vc1140c25998c4433a854443bd4e4a078;\n\rAM_ReadValue1 = (Integer)Vc1140c25998c4433a854443bd4e4a078;\n\rnext = \"__ReferenceID1\";\n\r\n                }\npublic void __ReferenceID1(){if(AM_ReadValue1==1) {next = \"__ReferenceID2\";\n} else{next = \"__ReferenceID3\";}\n}\r\n                public void __ReferenceID2() throws Exception\r\n                {\r\n                    if(stop == 1){return;}\r\n@envoy.InvokeExternalDeviceAction{DeviceName:\"DVF_Dock_Stack\",DeviceAction:\"Green\"};\r\n                }\n\r\n                public void __ReferenceID3() throws Exception\r\n                {\r\n                    if(stop == 1){return;}\r\n@envoy.InvokeExternalDeviceAction{DeviceName:\"DVF_Dock_Stack\",DeviceAction:\"AllOff\"};\r\n                }\npublic void stop() throws Exception {stop = 1;}"
                    properties: []
        '401':
          $ref: '#/components/responses/Unauthorized'    
    post:
      tags:
        - Workflow
      summary: Create/Update workflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        '201':
          description: Workflow created successfully.
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'    
  /workflow/{workflowName}:
    get:
      tags:
        - Workflow
      summary: Get workflow
      description: >
        Retrieve the workflow by name.


        Replace the path parameter placeholder {workflowName} by the appropriate workflow name.
      parameters:
        - in: path
          name: workflowName
          description: The workflow name to be fetched.
          required: true
          schema:
            type: string
            example: 'DVF_SEAL'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
              example:
                name: "DVF-SEAL"
                logicalReaders: []
                started: false
                startTriggers: []
                stopTriggers: []
                meta: "<Activity mc:Ignorable=\"sap sap2010 sads\" x:Class=\"AI.ActiveEmissary.UI.Flowchart\" mva:VisualBasic.Settings=\"{x:Null}\" sap2010:WorkflowViewState.IdRef=\"AI.ActiveEmissary.UI.Flowchart_1\"\r\n xmlns=\"http://schemas.microsoft.com/netfx/2009/xaml/activities\"\r\n xmlns:aau=\"clr-namespace:AI.ActiveEmissary.UI;assembly=AI.ActiveEmissary.UI\"\r\n xmlns:aaum=\"clr-namespace:AI.ActiveEmissary.UI.Models;assembly=AI.ActiveEmissary.UI.Models\"\r\n xmlns:av=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n xmlns:mva=\"clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities\"\r\n xmlns:sads=\"http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger\"\r\n xmlns:sap=\"http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation\"\r\n xmlns:sap2010=\"http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation\"\r\n xmlns:scg=\"clr-namespace:System.Collections.Generic;assembly=mscorlib\"\r\n xmlns:sco=\"clr-namespace:System.Collections.ObjectModel;assembly=mscorlib\"\r\n xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\r\n  <TextExpression.NamespacesForImplementation>\r\n    <sco:Collection x:TypeArguments=\"x:String\">\r\n      <x:String>System.Activities</x:String>\r\n      <x:String>System.Activities.Statements</x:String>\r\n      <x:String>System.Activities.Expressions</x:String>\r\n      <x:String>System.Activities.Validation</x:String>\r\n      <x:String>System.Activities.XamlIntegration</x:String>\r\n      <x:String>System.Windows.Controls</x:String>\r\n      <x:String>System.Windows.Documents</x:String>\r\n      <x:String>System.Windows.Shapes</x:String>\r\n      <x:String>System.Windows.Shell</x:String>\r\n      <x:String>System.Windows.Navigation</x:String>\r\n      <x:String>System.Windows.Data</x:String>\r\n      <x:String>System.Windows</x:String>\r\n      <x:String>System.Windows.Controls.Primitives</x:String>\r\n      <x:String>System.Windows.Media.Animation</x:String>\r\n      <x:String>System.Windows.Input</x:String>\r\n      <x:String>System.Windows.Media</x:String>\r\n      <x:String>System.Diagnostics</x:String>\r\n      <x:String>System.Windows.Media.Effects</x:String>\r\n      <x:String>System.Windows.Automation</x:String>\r\n      <x:String>System.Windows.Media.TextFormatting</x:String>\r\n      <x:String>System.Windows.Ink</x:String>\r\n      <x:String>System.Windows.Media.Media3D</x:String>\r\n      <x:String>System.Windows.Media.Imaging</x:String>\r\n      <x:String>System.Windows.Forms.Integration</x:String>\r\n      <x:String>Microsoft.VisualBasic</x:String>\r\n      <x:String>Microsoft.VisualBasic.Activities</x:String>\r\n      <x:String>System</x:String>\r\n      <x:String>System.Activities.Debugger</x:String>\r\n      <x:String>System.Collections.Generic</x:String>\r\n      <x:String>System.Data</x:String>\r\n      <x:String>System.Linq</x:String>\r\n      <x:String>System.Text</x:String>\r\n      <x:String>System.Windows.Markup</x:String>\r\n    </sco:Collection>\r\n  </TextExpression.NamespacesForImplementation>\r\n  <TextExpression.ReferencesForImplementation>\r\n    <sco:Collection x:TypeArguments=\"AssemblyReference\">\r\n      <AssemblyReference>System.Activities</AssemblyReference>\r\n      <AssemblyReference>PresentationFramework</AssemblyReference>\r\n      <AssemblyReference>WindowsBase</AssemblyReference>\r\n      <AssemblyReference>PresentationCore</AssemblyReference>\r\n      <AssemblyReference>WindowsFormsIntegration</AssemblyReference>\r\n      <AssemblyReference>System</AssemblyReference>\r\n      <AssemblyReference>mscorlib</AssemblyReference>\r\n      <AssemblyReference>System.Xml</AssemblyReference>\r\n      <AssemblyReference>System.Core</AssemblyReference>\r\n      <AssemblyReference>System.ServiceModel</AssemblyReference>\r\n      <AssemblyReference>System.Data</AssemblyReference>\r\n      <AssemblyReference>System.Xaml</AssemblyReference>\r\n    </sco:Collection>\r\n  </TextExpression.ReferencesForImplementation>\r\n  <Flowchart sap2010:WorkflowViewState.IdRef=\"Flowchart_1\">\r\n    <Flowchart.Variables>\r\n      <Variable x:TypeArguments=\"x:Int32\" Name=\"AM_SaveLocalValue0\" />\r\n    </Flowchart.Variables>\r\n    <Flowchart.StartNode>\r\n      <FlowStep x:Name=\"__ReferenceID0\">\r\n        <aau:EmissaryActivity Code=\"if(stop == 1){return;}&#xD;&#xA;\tArrayList&lt;Properties&gt; tags = new ArrayList&lt;Properties&gt;();&#xD;&#xA;\tString voperation = &quot;Seal&quot;;&#xD;&#xA;\tInteger visbutton = 1;&#xD;&#xA;\tString vlocation = &quot;DVF-Dock&quot;;&#xD;&#xA;@envoy.AM_SaveLocal{tags:tags,operation:voperation,isbutton:visbutton,location:vlocation} &gt; Vda82784bc67042a28641f767a4703df9;&#xA;&#xD;AM_SaveLocalValue0 = Vda82784bc67042a28641f767a4703df9;&#xA;&#xD;\" DisplayName=\"AM_SaveLocal\" ID=\"f032a47f-e87c-417d-a92c-3761e94f4acd\" Name=\"AM_SaveLocal\" ReturnType=\"Integer\" ReturnVariable=\"AM_SaveLocalValue0\">\r\n          <aau:EmissaryActivity.Props>\r\n            <scg:List x:TypeArguments=\"aaum:CActivityPropertyModel\" Capacity=\"4\">\r\n              <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"tags\" Type=\"ArrayList&lt;Properties&gt;\" TypeEditor=\"Text\" Value=\"\" />\r\n              <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"operation\" Type=\"String\" TypeEditor=\"Text\" Value=\"Seal\" />\r\n              <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"isbutton\" Type=\"Integer\" TypeEditor=\"Text\" Value=\"1\" />\r\n              <aaum:CActivityPropertyModel Activity=\"{x:Null}\" Name=\"location\" Type=\"String\" TypeEditor=\"LogicalDevices\" Value=\"DVF-Dock\" />\r\n            </scg:List>\r\n          </aau:EmissaryActivity.Props>\r\n          <sap2010:WorkflowViewState.IdRef>EmissaryActivity_2</sap2010:WorkflowViewState.IdRef>\r\n        </aau:EmissaryActivity>\r\n        <sap2010:WorkflowViewState.IdRef>FlowStep_2</sap2010:WorkflowViewState.IdRef>\r\n      </FlowStep>\r\n    </Flowchart.StartNode>\r\n    <x:Reference>__ReferenceID0</x:Reference>\r\n    <sads:DebugSymbol.Symbol>dw1DOlxFbXB0eS54YW1sAA==</sads:DebugSymbol.Symbol>\r\n  </Flowchart>\r\n  <sap2010:WorkflowViewState.ViewStateManager>\r\n    <sap2010:ViewStateManager>\r\n      <sap2010:ViewStateData Id=\"EmissaryActivity_2\" sap:VirtualizedContainerService.HintSize=\"276,152\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">True</x:Boolean>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"FlowStep_2\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <av:Point x:Key=\"ShapeLocation\">102,122.08</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">276,152</av:Size>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"Flowchart_1\" sap:VirtualizedContainerService.HintSize=\"614,636\">\r\n        <sap:WorkflowViewStateService.ViewState>\r\n          <scg:Dictionary x:TypeArguments=\"x:String, x:Object\">\r\n            <x:Boolean x:Key=\"IsExpanded\">False</x:Boolean>\r\n            <av:Point x:Key=\"ShapeLocation\">270,2.5</av:Point>\r\n            <av:Size x:Key=\"ShapeSize\">60,75</av:Size>\r\n            <av:PointCollection x:Key=\"ConnectorLocation\">300,77.5 300,107.5 240,107.5 240,122.08</av:PointCollection>\r\n          </scg:Dictionary>\r\n        </sap:WorkflowViewStateService.ViewState>\r\n      </sap2010:ViewStateData>\r\n      <sap2010:ViewStateData Id=\"AI.ActiveEmissary.UI.Flowchart_1\" sap:VirtualizedContainerService.HintSize=\"654,716\" />\r\n    </sap2010:ViewStateManager>\r\n  </sap2010:WorkflowViewState.ViewStateManager>\r\n</Activity>"
                runtime: "int stop = 0;String next = null;Integer AM_SaveLocalValue0 = 0;\npublic void start() throws Exception {stop = 0; \n__ReferenceID0();\nwhile(next != null && stop == 0){ Thread.sleep(100);if(next.equals(\"__ReferenceID0\")){next = null ;__ReferenceID0();continue;}}}\r\n                public void __ReferenceID0() throws Exception\r\n                {\r\n                    if(stop == 1){return;}\r\n ArrayList<Properties> tags = new ArrayList<Properties>();\r\n String voperation = \"Seal\";\r\n Integer visbutton = 1;\r\n String vlocation = \"DVF-Dock\";\r\n@envoy.AM_SaveLocal{tags:tags,operation:voperation,isbutton:visbutton,location:vlocation} > Vda82784bc67042a28641f767a4703df9;\n\rAM_SaveLocalValue0 = (Integer)Vda82784bc67042a28641f767a4703df9;\n\r\r\n                }\npublic void stop() throws Exception {stop = 1;}"
                properties: []              
        '401':
           $ref: '#/components/responses/Unauthorized'       
        '404':
            description: Workflow not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: 'Workflow not found!'
    delete:
      tags:
        - Workflow
      summary: Delete workflow
      description: >
        Delete a workflow by name.


        Replace the path parameter placeholder {workflowName} by the appropriate workflow name.
      parameters:
        - in: path
          name: workflowName
          description: The workflow name to be deleted.
          required: true
          schema:
            type: string
            example: 'DVF_SEAL'
      responses:
        '204':
          description: Workflow deleted successfully.
        '401': 
            $ref: '#/components/responses/Unauthorized'
        '404':
          description: Subscriber not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Subscriber \"TrainingServer\" not found"
  /workflow/{workflowName}/invoke:
    put:
      tags:
        - Workflow
      summary: Invoke workflow
      description: Replace the path parameter placeholder {workflowName} by the appropriate workflow name.
      parameters:
        - in: path
          name: workflowName
          description: The workflow name to be invoked.
          required: true
          schema:
            type: string
            example: 'DVF_WRAP'
      responses:
        '204':
          description: OK.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Workflow not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Failed to start workflow \"DVF_WRAP\", workflow not found!'
  /workflow/{workflowName}/stop:
    put:
      tags:
        - Workflow
      summary: Stop workflow
      description: Replace the path parameter placeholder {workflowName} by the appropriate workflow name.
      parameters:
        - in: path
          name: workflowName
          description: The workflow name to be stopped.
          required: true
          schema:
            type: string
            example: 'DVF_WRAP'
      responses:
        '204':
          description: OK.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Workflow not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Failed to stop workflow \"DVF_WRAP\", workflow not found!'
  /workflow/invoke:
    post:
      tags:
        - Workflow
      summary: Invoke workflows
      description: >
        Invoke multiple workflows by their name.


        Note that the order in which the wokflows are started is independent from the order in which the workflows are stated.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ['Workflow1', 'Workflow2']
      responses:
        '204':
          description: OK.
        '400':
          description: Bad request.
          content:
            text/plain:
              schema:
                $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /workflow/delete:
    post:
      tags:
        - Workflow
      summary:  Delete worfklows
      description: Delete multiple workflows by their name.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ['Workflow1', 'Workflow2']
      responses:
        '204':
          description: OK.
        '400':
          description: Bad request.
          content:
            text/plain:
              schema:
                $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /workflow/stop:
    post:
      tags:
        - Workflow
      summary: Stop workflows
      description: Stop multiple workflows by their name.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ['Workflow1', 'Workflow2']
      responses:
        '204':
          description: OK.
        '400':
          description: Bad request.
          content:
            text/plain:
              schema:
                $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /workflow/bulk/delete:
    post:
      tags:
        - Workflow
      summary: Bulk delete workflows
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                workflows:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: workflow1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflows:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: workflow1
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /workflow/bulk/start:
    post:
      tags:
        - Workflow
      summary: Bulk start workflows.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                workflows:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: workflow1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflows:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: workflow1
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /workflow/bulk/stop:
    post:
      tags:
        - Workflow
      summary: Bulk stop workflows.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                workflows:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: workflow1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflows:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: workflow1
                        status:
                          type: string
                          example: Success
                        success:
                          type: boolean
                        message:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /ping:
    get:
      summary: Check if the core is up and accepting requests.
      responses:
        '200':
          description: Core is up.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: boolean
                    example: true
  /version:
    get:
      summary: Retrieve the core's firmware version.
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    example: '4.1.63'
  /driver:
    get:
      summary: List all available drivers.
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    vendor:
                      type: string
                      example: 'arp'
                    version:
                      type: string
                      example: '3.69'
                    capabilities:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            example: 'update_firmware'
  /valid:
    get:
      summary: Check if license is valid or not.
      responses:
        '200':
          description: Core is up.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isValid:
                    type: boolean
                    example: true
  /event/process:
    post:
      summary: Process an event for a certain reader.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vendor:
                  type: string
                  example: 'arp'
                uid:
                  type: string
                  example: '001B5F010A07'
                inputNumber:
                  type: integer
                  example: 12
                inputValue:
                  type: string
                  example: 22
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: 'match.arp:001B5F010A07[DEMO_SENSOR_UNLOAD]'
  /setup:
    get:
      summary: Get setup.
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  setup:
                    type: string
                    example: 'emissary'
  /info:
    get:
      summary: Get general information.
      responses:
          '200':
            description: OK.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    ping:
                      type: boolean
                      example: true
                    valid:
                      type: boolean
                      example: true
                    version:
                      type: string
                      example: '4.1.63'
                    setup:
                      type: string
                      example: 'emissary'
                    soapCompact:
                      type: boolean
                      example: false
components:
  responses:
    BadRequest:
      description: The request sent by the client was syntactically incorrect.
      content:
        text/plain:
          schema:
            type: string
            example: >
              Unexpected character ('}' (code 125)): was expecting double-quote to start field nameat [Source: org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream@6ab4105; line: 6, column: 2]
        text/html:
          schema:
            type: string
            example: >
              <html> <head> <title>Apache Tomcat/8.5.6 - Error report</title></head> <body> <h1>HTTP Status 400 - Bad Request</h1> <div class="line"></div> <p> <b>type</b> Status report </p> <p> <b>message</b> <u>Bad Request</u> </p> <p> <b>description</b> <u>The request sent by the client was syntactically incorrect.</u> </p> <hr class="line"> <h3>Apache Tomcat/8.5.6</h3> </body></html>
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Request body was malformed'
    NotFound:
      description: The requested resource is not available.
      content:
        text/html:
          schema:
            type: string
            example: >
              <html> <head> <title>Apache Tomcat/8.5.6 - Error report</title> </head> <body> <h1>HTTP Status 404 - /ALE/api/template/field</h1> <div class="line"></div> <p> <b>type</b> Status report </p> <p> <b>message</b> <u>/ALE/api/template/field</u> </p> <p> <b>description</b> <u>The requested resource is not available.</u> </p> <hr class="line"> <h3>Apache Tomcat/8.5.6</h3> </body></html>
    Unauthorized:
      description: User cannot access the resource or the credentials have changed.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'User cannot access the resource or the credentials have changed.'
  
  schemas:
    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: 'alien'
        password:
          type: string
          example: '2ad09f231a5695d0a75fa3a0dde5ccba78cb4c422f6d0e386a7ae852792eb5fc'
    AuthError:
      type: object
      properties:
        error:
          type: string
          description: Invalid credentials response
          example: 'Invalid credentials!'
    Activities:
      type: array
      items:
        $ref: '#/components/schemas/Activity'
    Activity:
      type: object
      properties:
        name:
          type: string
          example: 'Z31_Log'
        editable:
          type: boolean
          example: true
        displayName:
          type: string
          example: null
        category:
          type: string
          example: 'Z-System Activities'
        visible:
          type: boolean
          example: true
        list:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              editor:
                type: string
              type:
                type: string
              activity:
                type: string
              label:
                type: string
              tooltip:
                type: string
              id:
                type: string
            example:
              - name: 'level'
                editor: 'ActivityDropDown'
                type: 'String'
                activity: 'Z12_ReturnLogLevels'
                label: null
                tooltip: null
                id: '1.2721133005640657E9'
              - name: 'text'
                editor: 'Text'
                type: 'String'
                activity: null
                label: null
                tooltip: null
                id: '1.7434319571415918E9'
        description:
          type: string
          example: 'Log activity is used to to report messages to the System Log in the portal.'
        returnType:
          type: string
          example: 'String'
        code:
          type: string
          example: '@envoy.declare{name:\"level\",type:\"String\",editor:\"ActivityDropDown\",activity:\"Z12_ReturnLogLevels\"};\r\n@envoy.declare{name:\"text\",type:\"String\",editor:\"Text\"};\r\n\r\ntry{\r\n   Method getGlobalReference=proxy.getClass().getMethod(\"getGlobalReference\",new Class[]{String.class});\r\n   Object logger=getGlobalReference.invoke(proxy,\"activities-logger\");\r\n   Method logMethod=logger.getClass().getMethod(level.trim().toLowerCase(),new Class[]{String.class});\r\n   text = \"[\" + user + \"] - \"+ text;\r\n   logMethod.invoke(logger,text);\r\n\r\n   getGlobalReference=null;\r\n   logMethod=null;\r\n   logger=null;\r\n   return null;\r\n}catch(Exception ex){\r\n   return ex.getMessage();\r\n}'
    CreateActivity:
      type: object
      properties:
        name:
          type: string
          example: 'Test'
        category:
          type: string
          example: 'Test'
        list:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              editor:
                type: string
              type:
                type: string
              activity:
                type: string
            example:
              - name: 'WorkflowName'
                editor: 'Text'
                type: 'String'
                activity: null
              - name: 'WorkflowName2'
                editor: 'Text'
                type: 'String'
                activity: null
        description:
          type: string
          example: 'Test activity.'
        returnType:
          type: string
          example: 'String'
        code:
          type: string
          example: '@envoy.declare{name:WorkflowName,type:String,editor:Text};\n\n@envoy.declare{name:WorkflowName2,type:String,editor:Text};\n\nObject coreInterface = null;\n{\nMethod m=proxy.getClass().getMethod(\"getGlobalReference\",new Class[]{String.class});\ncoreInterface=m.invoke(proxy,new Object[]{\"core-interface\"});\n}\nString response=null;\n{\nMethod m=coreInterface.getClass().getMethod(\"stopWorkflow\",new Class[]{String.class});\nresponse=(String)(m.invoke(coreInterface,new Object[]{WorkflowName}));\n}\nreturn response;'
    DataFields:
      type: array
      items:
        $ref: '#/components/schemas/DataField'
    DataField:
      type: object
      properties:
        name:
          type: string
          description: Data field name
          example: 'DF'
        type:
          type: string
          description: Data field type
          enum: [ASCII,Hexadecimal,Decimal,Binary]
        offset:
          type: integer
          description: Data field index
        length:
          type: integer
          description: Data field length
          example: 8
        format:
          type: object
          description: Data field format (auto-generated)
          nullable: true
          example: null
        bindings:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldBinding'
    DataFieldBinding:
      type: object
      properties:
        operand:
          type: string
          description: The binding's operand
          example: '00110001'
        condition:
          type: string
          description: The binding's condition "Is equal to"
          example: '='
        value:
          type: string
          description: The binding's value
          example: '2'
    DataFieldNames:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: 'DF'
    NewDataField:
      type: object
      properties:
        name:
          type: string
          description: Data field name
          example: 'DF'
        type:
          type: string
          description: Data field type
          enum: [ASCII,Hexadecimal,Decimal,Binary]
        offset:
          type: integer
          description: Data field index
        length:
          type: integer
          description: Data field length
          example: 8
        bindings:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldBinding'
    NewDeviceType:
      type: object
      properties:
        name:
          type: string
          description: External device template name
          example: 'TypeTest'
        type: 
          type: string
          description: External device template type
          enum: [output, input]
        pins:
          type: array
          items:
            type: object
            properties:
              reserved:
                type: boolean
              number:
                type: integer
                description: Pin number
                example: 1
              value:
                type: integer
                description: Pin value (1 or 0)
                example: 0
        actions:
          type: array
          description: Device template's actions
          items:
            type: object
            properties:
              name:   
                type: string
                description: Action description
                example: 'Some description'
              pins:
                type: array
                items:
                  type: object
                  properties:
                    reserved:
                      type: boolean
                      example: false
                    number:
                      type: integer
                      example: 1
                    value: 
                      type: integer
                      example: 1
    DeviceTypes:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/InputDeviceType'
          - $ref: '#/components/schemas/OutputDeviceType'
    InputDeviceType:
      type: object
      properties:
        name:
          type: string
          description: External device template name
          example: 'PresenceSensor'
        type: 
          type: string
          description: External device template type
          example: 'input'
        pins:
          type: array
          items:
            type: object
            properties:
              reserved:
                type: boolean
                example: false
              type:
                type: string
                description: External device template pin type
                example: 'input'
              number:
                type: integer
                description: Pin number
                example: 1
              value:
                type: integer
                description: Pin value (1 or 0)
                example: 0
              connection:
                type: object
                properties:
                  number:
                    type: integer
                    example: 0
                  type:
                    type: string
                    example: 'input'
        actions:
          type: array
          description: Device template's actions
          items:
            type: object
            properties:
              name:   
                type: string
                description: Action description
                example: 'On'
              pins:
                type: array
                items:
                  type: object
                  properties:
                    reserved:
                      type: boolean
                      example: false
                    type:
                      type: string
                      description: External device template pin type
                      example: 'input'
                    number:
                      type: integer
                      description: Pin number
                      example: 1
                    value:
                      type: integer
                      description: Pin value (1 or 0)
                      example: 1
                    connection:
                      type: object
                      properties:
                        number:
                          type: integer
                          example: 0
                        type:
                          type: string
                          example: 'input'
                  example:
                    - name: 'On'
                      pins:
                        reserved: false
                        type: 'input'
                        number: 1
                        value: 1
                        connection:
                          number: 0
                          type: 'input'
                    - name: 'Off'
                      pins:
                        reserved: false
                        type: 'input'
                        number: 1
                        value: 1
                        connection:
                          number: 0
                          type: 'input'
    OutputDeviceType:
      type: object
      properties:
        name:
          type: string
          description: External device template name
          example: '3-Way Stack Light'
        type: 
          type: string
          description: External device template type
          example: 'output'
        pins:
          type: array
          items:
            type: object
            properties:
              reserved:
                type: boolean
              type:
                type: string
                description: External device template pin type
              number:
                type: integer
                description: Pin number
              value:
                type: integer
                description: Pin value (1 or 0)
              connection:
                type: object
                properties:
                  number:
                    type: integer
                  type:
                    type: string
                example:
                  - number: 0
                    type: input
                  - number: 0
                    type: input
            example:
              - reserved: false
                type: input
                number: 1
                value: 0
                connection:
                  number: 0
                  type: input
              - reserved: false
                type: input
                number: 2
                value: 0
                connection:
                  number: 0
                  type: input
              - reserved: false
                type: input
                number: 3
                value: 0
                connection:
                  number: 0
                  type: input
        actions:
          type: array
          description: Device template's actions
          items:
            type: object
            properties:
              name:   
                type: string
                description: Action description
              pins:
                type: array
                items:
                  type: object
                  properties:
                    reserved:
                      type: boolean
                    type:
                      type: string
                      description: External device template pin type
                    number:
                      type: integer
                      description: Pin number
                    value:
                      type: integer
                      description: Pin value (1 or 0)
                    connection:
                      type: object
                      properties:
                        number:
                          type: integer
                        type:
                          type: string
            example:
              - name: 'Green'
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 1
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 0
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 0
                    connection:
                      number: 0
                      type: 'input'        
              - name: 'Red'
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 0
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 0
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 0
                    connection:
                      number: 0
                      type: 'input'
              - name: 'Amber'
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 0
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 1
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 0
                    connection:
                      number: 0
                      type: 'input'
              - name: 'GreenRed'
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 1
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 1
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 1
                    connection:
                      number: 0
                      type: 'input'      
              - name: 'AmberRed'
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 1
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 1
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 0
                    connection:
                      number: 0
                      type: 'input'    
              - name: 'GreenAmber'
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 0
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 1
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 1
                    connection:
                      number: 0
                      type: 'input'
              - name: 'AllOn'
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 1
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 1
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 1
                    connection:
                      number: 0
                      type: 'input'     
              - name: 'AllOff'
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 0
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 0
                    connection:
                      number: 0
                      type: 'input'
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 0
                    connection:
                      number: 0
                      type: 'input'        
    DeviceTypeNames:
      type: object
      properties:
        name:
          type: string
      example: 
        - name: '3-Way Stack Light'
        - name: '2-Way Stack Light'
        - name: 'Presence Sensor'
    ExternalDevice:
      type: object
      properties:
        name:
          type: string
          example: 'Demo_Sensor'
        vendor:
          type: string
          example: 'arp'
        uid:
          type: string
          example: '001B5F00C4D1'
        device:
          $ref: '#/components/schemas/InputDeviceType'
    NewExternalDevice:
      type: object
      properties:
        name:
          type: string
        vendor:
          type: string
        uid:
          type: string
        device:
          $ref: '#/components/schemas/OutputDeviceType'
      example:
          name: 'Demo_StackLight'
          vendor: 'arp'
          uid: '001B5F00BDBF'
          device:
            name: '3-Way Stack Light'
            type: 'output'
            pins:
              - reserved: true
                type: 'input'
                number: 1
                value: 0
                connection:
                  number: 1
                  type: 'output'
              - reserved: true
                type: 'input'
                number: 2
                value: 0
                connection:
                  number: 2
                  type: 'output'
              - reserved: false
                type: 'input'
                number: 3
                value: 0
            actions:
              - name: Red
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 1                     
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 0
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 0
              - name: Green
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 0                     
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 1
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 0    
              - name: Amber
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 1                     
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 0
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 1
              - name: GreenRed
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 1                     
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 1
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 0
              - name: AmberRed
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 1                     
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 0
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 1
              - name: GreenAmber
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 0                     
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 1
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 1
              - name: AllOn
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 1                     
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 1
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 1
              - name: AllOff
                pins:
                  - reserved: false
                    type: 'input'
                    number: 1
                    value: 0                     
                  - reserved: false
                    type: 'input'
                    number: 2
                    value: 0
                  - reserved: false
                    type: 'input'
                    number: 3
                    value: 0
    GlobalSettings:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        type:
          type: string
          enum: [text, integer, decimal, password]
        secureSetting:
          type: boolean
        settingsType:
          $ref: '#/components/schemas/GlobalSettingsType'
    GlobalSettingsType:
          type: object
          properties:
            name:
              type: string
            shape:
              type: object
              properties:
                shapeName:
                  type: string
            validationExpression:
              type: string
    DefaultGroupTemplate:
      type: object
      properties:
        name:
          type: string
        model:
          type: string
        propertyList:
          type: array
          items:
            $ref: '#/components/schemas/GroupPropertyList'
          example: []
        defaultProperties:
          type: array
          items:
            $ref: '#/components/schemas/DefaultGroupProperty'
          example: []
        logicalDevices:
          type: array
          items:
            $ref: '#/components/schemas/GroupLogicalDeviceTemplate'
          example: []
        remainingLogicalDevices:
          type: array
          items:
            $ref: '#/components/schemas/GroupLogicalDeviceTemplate'
          example:
            - model: "ALR-F800"
              name: "DVF-Dock-Master"
              vendor: "arp"
              uid: "001B5F00F323"
            - model: "ALR-F800"
              name: "DVF-Dock-Slave"
              vendor: "arp"
              uid: "001B5F00F323"
            - model: "ALR-9900+"
              name: "Devolder_Dock"
              vendor: "arp"
              uid: "001B5F00337B"
            - model: "ALR-9680-EMA"
              name: "DockDoor01"
              vendor: "arp"
              uid: "001B5F00BDBF"
        vendor:
          type: string
        cronExpression:
          type: string
    GroupPropertyList:
        type: object
        properties:
          name:
            type: string
          value:
            type: string  
        example:
          - name: 'RFAttenuation'
            value: '60'
          - name: 'DHCPTimeOut'
            value: 95
    DefaultGroupProperty:
      type: object
      properties:
        groupName:
          type: string
        properties:
          type: object
          properties:
            sampleProperty:
              type: string
            defaultValue:
              type: string
            readOnly:
              type: boolean
              default: true
            required:
              type: boolean
            visible:
              type: boolean
            maximumValue:
              type: integer
            minimumValue:
              type: integer
            name:
              type: string
            displayName:
              type: string
            requireRestart:
              type: boolean
            tooltip:
              type: string
            typeEditor:
              type: string
            validationExpression:
              type: string
            value: 
              type: string
            error:
              type: string
            propertyList:
              $ref: '#/components/schemas/GroupPropertyList'
    GroupLogicalDeviceTemplate:
      type: object
      properties:
        model:
          type: string
        name:
          type: string
        vendor:
          type: string
        uid:
          type: string
        isCorrect:
          type: boolean
    IOState:
      type: object
      properties:
        ioState:
          type: object
          properties:
            action:
              type: string
              description: The last action conducted.
            time:
              type: string
              description: The time the last action was conducted at.
          additionalProperties: true
          description: Note that action properties are displayed as @action. Can be null if device name was not found.
          example:
            "@GreenRed": '1543485874354'
            "@AllOff": '1543485882261'
            action: 'AllOff'
            time: '1543485882261'
        device:
          type: string
          description: The external device name. Can be null if device name was not found.
          nullable: true
          example: "TestDevice"
    LogicalDevice:
      type: object
      properties:
        sampleProperty:
          type: string
          nullable: true
        name:
          type: string
        composite:
          type: boolean
        logicalReaders:
          type: array
          nullable: true
          items:
            type: string
        vendor:
          type: string
        uid:
          type: string
        antennas:
          type: array
          items:
            type: integer
      example:
        sampleProperty: null
        name: 'DockDoor1'
        composite: false
        logicalReaders: []
        vendor: 'arp'
        uid: '001B5F00C4D1'
        antennas: [0,1]
    Reader:
      type: object
      properties:
        description: 
          type: object
          properties:
            readerName:
              type: string
            readerVersion:
              type: string
            readerModel:
              type: string
        sampleProperty:
          type: string
          nullable: true
        enabled:
          type: boolean
        down:
          type: boolean
        uid:
          type: string
        macAddress:
          type: string
          nullable: true
        ipAddress:
          type: string
        port:
          type: integer
          default: 0
        secure:
          type: boolean
          default: false
        vendor:
          type: string
          default: 'arp'
        pins:
          type: array
          items:
            type: object
            properties:
              sampleProperty:
                type: string
                nullable: true
              reserved:
                type: boolean
              type:
                type: string
              number:
                type: integer
              value:
                type: integer
              connection:
                type: object
                properties:
                  sampleProperty:
                    type: string
                    nullable: true
                  number:
                    type: integer
                  type:
                    type: string
        authentication:
          type: object
          properties:
            sampleProperty:
              type: string
              nullable: true
            name:
              type: string
              nullable: true
            properties:
              $ref: '#/components/schemas/ReaderAuthenticationProperties'
        properties:
          type: array
          items:
            type: object
        antennas:
          type: array
          items:
            type: object
            properties:
              sampleProperty:
                type: string
                nullable: true
              id:
                type: integer
              enabled:
                type: boolean
      example:
        description:
          readerName: 'Alien RFID Reader'
          readerVersion: '17.07.17.00'
          readerModel: 'ALR-F800'
        enabled: true
        down: true
        uid: '001B5F00F255'
        macAddress: null
        port: 0
        secure: false
        vendor: 'arp'
        pins:
          - reserved: false
            type: 'output'
            number: 1
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'output'
            number: 2
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'output'
            number: 3
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'output'
            number: 4
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'output'
            number: 5
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'output'
            number: 6
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'output'
            number: 7
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'output'
            number: 8
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'input'
            number: 1
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'input'
            number: 2
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'input'
            number: 3
            value: 0
            connection:
              number: 0
              type: 'input'
          - reserved: false
            type: 'input'
            number: 4
            value: 0
            connection:
              number: 0
              type: 'input'
        authentication:
          name: null
          properties: []
        properties: []
        antennas:
          - id: 0
            enabled: false
          - id: 1
            enabled: false
          - id: 2
            enabled: false
          - id: 3
            enabled: false
    ReaderAuthenticationProperties:
      type: array
      items:
        type: object
        properties:
          defaultValue:
            type: string
          readOnly:
            type: boolean
          required:
            type: boolean
          visible:
            type: boolean
          maximumValue:
            type: integer
          minimumValue: 
            type: integer
          name:
            type: string
          displayName:
            type: string
          requireRestart:
            type: boolean
          tooltip:
            type: string
          typeEditor:
            type: string
          validationExpression:
            type: string
          value:
            type: string
            nullable: true
          error:
            type: string
          propertyList:
            type: array
            items:
              type: object
              properties:
                value:
                  type: string
                description:
                  type: string
    NewReader:
      type: object
      properties:
        vendor:
          type: string
        uid:
          type: string
        ip:
          type: string
        authentication:
          type: object
          properties:
            name:
              type: string
            properties:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    enum: [username, password]
                  value:
                    type: string
      example:
        vendor: 'arp'
        ip: '10.0.0.182'
        authentication:
          name: 'Authentication'
          properties:
            - name: 'username'
              value: 'alien'
            - name: 'password'
              value: 'password'
    Subscriber:
      type: object
      properties:
        description:
          type: string
          description: This is the subscriber's name.
        uri:
          type: string
        protocol:
          type: string
          enum: [tcp,http]
        address:
          type: string
        port:
          type: integer
      example:
        description: 'TrainingServer'
        uri: ''
        protocol: 'http'
        address: '152.168.1.50'
        port: 55555
    Workflow:
      type: object
      properties:
        name:
          type: string
        logicalReaders:
          type: array
          items:
            type: string
          nullable: true
        started:
          type: boolean
        startTriggers:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowTrigger'
        stopTriggers:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowTrigger'
        meta:
          type: string
        runtime:
          type: string
        properties:
          type: array
          items:
            type: string
          nullable: true
      example:
        name: 'Demo_Workflow'
        logicalReaders: null
        started: false
        startTriggers:
          device: 'DVF_Dock_Load'
          action: 'On'
          sampleProperty: null
        stopTriggers:
          device: 'DVF_Dock_Unload'
          action: 'On'
          sampleProperty: null
        meta: 'XAML Activities'
        properties: null
    WorkflowTrigger:
      type: object
      properties:
        device:
          type: string
          description: The external device name.
        action: 
          type: string
          description: The external device action.
        sampleProperty:
          type: string
          nullable: true