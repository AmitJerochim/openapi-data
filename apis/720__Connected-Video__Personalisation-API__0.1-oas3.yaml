openapi: 3.0.0
info:
  version: "0.1-oas3"
  title: Personalisation API
  description: A mock of the Personalisation API for the Content Discovery project
tags:
  - name: Personalised lists
    description: These are the personalised request URLs for users
  - name: Common lists
    description: 'These are common to a wider range of people, region, country'
  - name: Layouts
    description: These are requests to retrieve entire layouts or pages
  - name: Feedback
    description: APIs to receive feedback from clients
  - name: Generic
    description: Generic APIs that can be used
paths:
  /reco/justForYou:
    get:
      tags:
        - Personalised lists
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: size
          description: Size of each page.
          required: false
          schema:
            type: integer
        - in: query
          name: pageNo
          description: Number of the items in the list.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Returns list of catalogue items for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
        '404':
          description: User was not found
          content:
            application/json:
              schema:
                type: string
                example: Invalid userId specified
  /reco/becauseYouWatched:
    get:
      tags:
        - Personalised lists
      parameters:
        - in: query
          name: itemId
          required: true
          schema:
            type: string
        - in: query
          name: size
          description: Size of each page.
          required: false
          schema:
            type: integer
        - in: query
          name: pageNo
          description: Number of the items in the list.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Returns a list of items similar to the specified item
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
        '404':
          description: Item was not found
          content:
            application/json:
              schema:
                type: string
                example: ItemID was not found
  /similar:
    get:
      tags:
        - Common lists
      parameters:
        - in: query
          name: itemId
          required: true
          schema:
            type: string
        - in: query
          name: userId
          required: false
          schema:
            type: string
        - in: query
          name: size
          description: Size of each page.
          required: false
          schema:
            type: integer
        - in: query
          name: pageNo
          description: Number of the items in the list.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Returns list of catalogue items for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
        '404':
          description: User was not found
          content:
            application/json:
              schema:
                type: string
                example: Invalid userId specified
  /trending:
    get:
      tags:
        - Common lists
      parameters:
        - in: path
          name: countryCode
          required: true
          schema:
            type: string
        - in: query
          name: size
          description: Size of each page.
          required: false
          schema:
            type: integer
        - in: query
          name: pageNo
          description: Number of the items in the list.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Returns the list of currently trending items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
  /popular:
    get:
      tags:
        - Common lists
      parameters:
        - in: query
          name: countryCode
          required: false
          schema:
            type: string
        - in: query
          name: size
          description: Size of each page.
          required: false
          schema:
            type: integer
        - in: query
          name: pageNo
          description: Number of the items in the list.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Returns the list of popular content, filtered by the countryCode'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
  /layout:
    get:
      tags:
        - Layouts
      parameters:
        - in: path
          name: layoutId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a layout based on the layoutId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
  /layout/forUser:
    get:
      tags:
        - Layouts
      parameters:
        - in: query
          name: layoutId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a layout for the given userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
  /search:
    get:
      tags:
        - Search
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
      responses:
       '200':
        description: Returns a list of items matching the specified query string
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalogue'
  
    #Feedback APIs
  /feedback:
    post:
      tags:
      - Feedback
      requestBody:
        description: Feedback data about client usage
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/Feedback'
      responses:
        200:
          description: Feedback sucessfully received
          content:
            text/plain:
              example: OK
        400:
          description: Invalid feedback supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    description: Error code
                    example: Invalid request submitted
                  reason:
                    type: string
                    description: Reason for the error
                    example: Missing userId

servers:
  - url: 'https://virtserver.swaggerhub.com/Connected-Video/Personalisation-API/0.1'
components:
  schemas:
    CatalogueItem:
      type: object
      required:
        - itemId
      properties:
        itemId:
          type: string
          example: "1234"

    Catalogue:
      type: object
      required:
        - itemId
        - streamUrl
        - packages
      properties:
        itemId:
          type: string
          example: abcd-efghijk-ijklmn-opqrst-uvwxyz
        title:
          type: string
          example: The Walking Dead
        subTitle:
          type: string
          example: The Dead Walking
        ageRestriction:
          type: string
          example: 18
        maturityClassification:
          type: string
          example: 'S,V,L'
        season:
          type: integer
          example: 1
        streamUrl:
          type: string
          example: 'https://cdn.dstv.com/stream/streamId/1234232'
        episode:
          type: integer
          example: 1
        packages:
          type: array
          items:
            type: string
          example:
            - PREMIUM
            - COMPACT PLUS
        genre:
          type: array
          items:
            type: string
          example:
            - Action
        subGenre:
          type: array
          items:
            type: string
          example:
            - Comedy
        channel:
          type: string
          example: M-Net
        channelUrl:
          type: string
          example: 'https://akamai.dstv.com/channel/MND'
    User:
      type: object
      required:
        - userId
        - package
      properties:
        userId:
          type: string
          example: abcdef-ghijk
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        favouriteGenres:
          type: array
          items:
            type: string
          example: 'Action, Sci-Fi'
    Layout:
      type: object
      required:
        - layoutId
      properties:
        layoutId:
          type: string
          example: abcdefghijklmnop
    Feedback:
      type: object
      required:
        - userId
        - itemId
      properties:
        userId:
          type: string
          description: This is the ID of the user
          example: abcdef-ghijkl-mnop
        itemId:
          type: string
          description: This is the ID of the item the user interacted with
          example: zlksdf-sdfkjf-kdjfd
