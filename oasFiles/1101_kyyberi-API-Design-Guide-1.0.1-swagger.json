{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "1.0.1",
    "title" : "Machine readable API Design Guide experiment",
    "description" : "This is an experiment to see how well API Design Guide could be created with OAS only."
  },
  "paths" : {
    "/errors" : {
      "get" : {
        "summary" : "Error handling for GET methods",
        "description" : "Because we are using HTTP methods, we should use HTTP status codes. Although a challenge here is to select a distinct slice of these codes, and then depend on response data to detail any response errors. Keeping a small set of codes helps you consume and handle errors consistently.",
        "tags" : [ "Error handling" ],
        "responses" : {
          "400" : {
            "description" : "for when the requested information is incomplete or malformed."
          },
          "401" : {
            "description" : "for when an access token isn’t provided, or is invalid."
          },
          "403" : {
            "description" : "for when an access token is valid, but requires more privileges."
          },
          "404" : {
            "description" : "for when everything is okay, but the resource doesn’t exist."
          },
          "409" : {
            "description" : "for when a conflict of data exists, even with valid information."
          },
          "422" : {
            "description" : "for when the requested information is okay, but invalid."
          }
        }
      },
      "post" : {
        "summary" : "Error handling for POST methods",
        "description" : "Because we are using HTTP methods, we should use HTTP status codes. Although a challenge here is to select a distinct slice of these codes, and then depend on response data to detail any response errors. Keeping a small set of codes helps you consume and handle errors consistently.",
        "tags" : [ "Error handling" ],
        "responses" : {
          "400" : {
            "description" : "for when the requested information is incomplete or malformed."
          },
          "401" : {
            "description" : "for when an access token isn’t provided, or is invalid."
          },
          "403" : {
            "description" : "for when an access token is valid, but requires more privileges."
          },
          "404" : {
            "description" : "for when everything is okay, but the resource doesn’t exist."
          },
          "409" : {
            "description" : "for when a conflict of data exists, even with valid information."
          },
          "422" : {
            "description" : "for when the requested information is okay, but invalid."
          }
        }
      },
      "put" : {
        "summary" : "Error handling for PUT methods",
        "description" : "Because we are using HTTP methods, we should use HTTP status codes. Although a challenge here is to select a distinct slice of these codes, and then depend on response data to detail any response errors. Keeping a small set of codes helps you consume and handle errors consistently.",
        "tags" : [ "Error handling" ],
        "responses" : {
          "400" : {
            "description" : "for when the requested information is incomplete or malformed."
          },
          "401" : {
            "description" : "for when an access token isn’t provided, or is invalid."
          },
          "403" : {
            "description" : "for when an access token is valid, but requires more privileges."
          },
          "404" : {
            "description" : "for when everything is okay, but the resource doesn’t exist."
          },
          "409" : {
            "description" : "for when a conflict of data exists, even with valid information."
          },
          "422" : {
            "description" : "for when the requested information is okay, but invalid."
          }
        }
      },
      "patch" : {
        "summary" : "Error handling for PATCH methods",
        "description" : "Because we are using HTTP methods, we should use HTTP status codes. Although a challenge here is to select a distinct slice of these codes, and then depend on response data to detail any response errors. Keeping a small set of codes helps you consume and handle errors consistently.",
        "tags" : [ "Error handling" ],
        "responses" : {
          "400" : {
            "description" : "for when the requested information is incomplete or malformed."
          },
          "401" : {
            "description" : "for when an access token isn’t provided, or is invalid."
          },
          "403" : {
            "description" : "for when an access token is valid, but requires more privileges."
          },
          "404" : {
            "description" : "for when everything is okay, but the resource doesn’t exist."
          },
          "409" : {
            "description" : "for when a conflict of data exists, even with valid information."
          },
          "422" : {
            "description" : "for when the requested information is okay, but invalid."
          }
        }
      },
      "delete" : {
        "summary" : "Error handling for DELETE methods",
        "description" : "Because we are using HTTP methods, we should use HTTP status codes. Although a challenge here is to select a distinct slice of these codes, and then depend on response data to detail any response errors. Keeping a small set of codes helps you consume and handle errors consistently.",
        "tags" : [ "Error handling" ],
        "responses" : {
          "400" : {
            "description" : "for when the requested information is incomplete or malformed."
          },
          "401" : {
            "description" : "for when an access token isn’t provided, or is invalid."
          },
          "403" : {
            "description" : "for when an access token is valid, but requires more privileges."
          },
          "404" : {
            "description" : "for when everything is okay, but the resource doesn’t exist."
          },
          "409" : {
            "description" : "for when a conflict of data exists, even with valid information."
          },
          "422" : {
            "description" : "for when the requested information is okay, but invalid."
          }
        }
      },
      "options" : {
        "summary" : "Error handling for OPTIONS methods",
        "description" : "Because we are using HTTP methods, we should use HTTP status codes. Although a challenge here is to select a distinct slice of these codes, and then depend on response data to detail any response errors. Keeping a small set of codes helps you consume and handle errors consistently.",
        "tags" : [ "Error handling" ],
        "responses" : {
          "400" : {
            "description" : "for when the requested information is incomplete or malformed."
          },
          "401" : {
            "description" : "for when an access token isn’t provided, or is invalid."
          },
          "403" : {
            "description" : "for when an access token is valid, but requires more privileges."
          },
          "404" : {
            "description" : "for when everything is okay, but the resource doesn’t exist."
          },
          "409" : {
            "description" : "for when a conflict of data exists, even with valid information."
          },
          "422" : {
            "description" : "for when the requested information is okay, but invalid."
          }
        }
      }
    },
    "/pagination" : {
      "get" : {
        "summary" : "How to paginate",
        "description" : "Returning huge amount of list entries in response results to bad Developer eXeprience (long response time for example). Thus you should paginate long lists to smaller chunks.  <br/><br/> <li>Default value for list size is 50.</li> ",
        "tags" : [ "Pagination of lists" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset value to start from in providing the list items",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of results to return",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 50
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "pet response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/List"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sorting" : {
      "get" : {
        "summary" : "How to sort responses",
        "description" : "Sorting list of objects is in all GET endpoints if it returns a list.  ",
        "tags" : [ "Sorting of lists" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "comma-separated list of items which defines the sorting order.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "text"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "pet response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/List"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/request.headers" : {
      "get" : {
        "summary" : "How to notify rate-limiting information in headers",
        "description" : "Headers for rate-limiting.  \n<pre> X-RateLimit-Limit: 60<br/> X-RateLimit-Remaining: 25<br/> X-RateLimit-Reset: 1546841865<br/> </pre>",
        "tags" : [ "Rate limiting" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "X-RateLimit-Limit" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "Request limit per hour."
              },
              "X-RateLimit-Remaining" : {
                "schema" : {
                  "type" : "integer"
                },
                "description" : "The number of requests left for the time window."
              },
              "X-RateLimit-Reset" : {
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                },
                "description" : "The UTC date/time at which the current rate limit window resets."
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "BasicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      },
      "BearerAuth" : {
        "type" : "http",
        "scheme" : "bearer"
      },
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "X-API-Key"
      },
      "OpenID" : {
        "type" : "openIdConnect",
        "openIdConnectUrl" : "https://example.com/.well-known/openid-configuration"
      },
      "OAuth2" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://example.com/oauth/authorize",
            "tokenUrl" : "https://example.com/oauth/token",
            "scopes" : {
              "read" : "Grants read access",
              "write" : "Grants write access",
              "admin" : "Grants access to admin operations"
            }
          }
        }
      }
    },
    "schemas" : {
      "List" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Item"
        }, {
          "type" : "object",
          "required" : [ "id" ],
          "properties" : {
            "id" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ]
      },
      "Item" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      },
      "Error" : {
        "type" : "object",
        "required" : [ "code", "message" ],
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    }
  }
}