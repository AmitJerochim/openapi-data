{
  "components" : {
    "requestBodies" : {
      "ChallengeSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Challenge"
            }
          }
        },
        "description" : "Object to specify when answering a auth challenge"
      },
      "AccessTokenSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/AccessToken"
            }
          }
        },
        "description" : "Object to specify when creating/updating app access token object"
      },
      "AppSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/App"
            }
          }
        },
        "description" : "Object to specify when creating/updating app object"
      },
      "Login" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/LoginIn"
            }
          }
        },
        "description" : "Object to specify when logging in a user into system"
      },
      "Logout" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/LogoutIn"
            }
          }
        },
        "description" : "Object to specify when logging out a user of the system"
      },
      "MFASet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/MFA"
            }
          }
        },
        "description" : "Object to specify MFA device association with user."
      },
      "PartACLSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/PartACL"
            }
          }
        },
        "description" : "Object to specify when creating/updating partition ACL object"
      },
      "PartSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Part"
            }
          }
        },
        "description" : "Object to specify when creating/updating user partition object"
      },
      "PartsSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Parts"
            }
          }
        },
        "description" : "Object to specify when creating/updating user partitions object"
      },
      "PasswordSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Password"
            }
          }
        },
        "description" : "Object to specify when updating user password"
      },
      "PasswordResetSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/PasswordReset"
            }
          }
        },
        "description" : "Object to specify when reset password operation"
      },
      "Register" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/RegisterIn"
            }
          }
        },
        "description" : "Object to specify when registering a user into system"
      },
      "Enroll" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Enroll"
            }
          }
        },
        "description" : "Object to specify when enrolling a user into a new role"
      },
      "RoleSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Role"
            }
          }
        },
        "description" : "Object to specify when creating/updating or creatying new role"
      },
      "UserSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/User"
            }
          }
        },
        "description" : "Object to specify when updating user object"
      },
      "Validate" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ValidateIn"
            }
          }
        },
        "description" : "Object to specify when validating a user into system"
      },
      "ConfirmSet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ConfirmIn"
            }
          }
        },
        "description" : "Object to specify when confirming another user as admin or root."
      }
    },
    "responses" : {
      "AccessTokenDel" : {
        "description" : "Access token was deleted with success."
      },
      "AccessTokenGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/AccessToken"
            }
          }
        },
        "description" : "Access token object was retrieved with success"
      },
      "AccessTokensGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/AccessTokens"
            }
          }
        },
        "description" : "Access token objects was retrieved with success"
      },
      "AccessTokenSet" : {
        "description" : "Access token was updated with success."
      },
      "AppDel" : {
        "description" : "App was deleted with success."
      },
      "AppGet" : {
        "description" : "Application object was retrieved with success",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/App"
            }
          }
        }
      },
      "AppDetailedGet" : {
        "description" : "Application object was retrieved with success",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/AppDetailed"
            }
          }
        }
      },
      "AppsGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Apps"
            }
          }
        },
        "description" : "Application objects was retrieved with success"
      },
      "AppSet" : {
        "description" : "App was updated with success."
      },
      "ConfirmRegistration" : {
        "description" : "User confirmed with success"
      },
      "ErrorAPI" : {
        "description" : "API Error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorAPI"
            }
          }
        }
      },
      "ErrorAPIUnauthorized" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorAPIUnauthorized"
            }
          }
        },
        "description" : "API authorization error"
      },
      "Login" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/LoginOut"
            }
          }
        },
        "description" : "Token validation/Login call has succeed."
      },
      "Logout" : {
        "description" : "Logout call has succeed."
      },
      "MFADel" : {
        "description" : "MFA device associated with the specified user was deleted with success."
      },
      "MFASet" : {
        "description" : "MFA device was associated with the specified user with success."
      },
      "PartACLDel" : {
        "description" : "Partition ACL was deleted with success."
      },
      "PartACLGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/PartACL"
            }
          }
        },
        "description" : "Partition ACL object was retrieved with success"
      },
      "PartACLSet" : {
        "description" : "Partition ACL was updated with success."
      },
      "PartACLsGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/PartACLs"
            }
          }
        },
        "description" : "Partition ACLs was retrieved with success"
      },
      "PartDel" : {
        "description" : "Partition was deleted with success."
      },
      "PartGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Part"
            }
          }
        },
        "description" : "Partition object was retrieved with success"
      },
      "PartsGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Parts"
            }
          }
        },
        "description" : "User partitions were retrieved with success"
      },
      "PartSet" : {
        "description" : "Partition was updated with success."
      },
      "PartsSet" : {
        "description" : "Partitions were updated with success."
      },
      "PasswordDel" : {
        "description" : "User password reset was request with success."
      },
      "PasswordSet" : {
        "description" : "User password was updated with success."
      },
      "PasswordResetSet" : {
        "description" : "User password was reseted with success."
      },
      "Enroll" : {
        "description" : "User enrollment into the specified group succeed."
      },
      "Register" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/RegisterOut"
            }
          }
        },
        "description" : "Registration call has succeed."
      },
      "ResetRegConfirmation" : {
        "description" : "Reset registration confirmation call has succeed",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/RegisterOut"
            }
          }
        }
      },
      "RoleDel" : {
        "description" : "Role was deleted with success."
      },
      "RoleGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Role"
            }
          }
        },
        "description" : "Role object was retrieved with success"
      },
      "RoleSet" : {
        "description" : "Role was updated with success."
      },
      "RolesGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Roles"
            }
          }
        },
        "description" : "Role objects was retrieved with success"
      },
      "UserDel" : {
        "description" : "User was deleted with success."
      },
      "UserGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/User"
            }
          }
        },
        "description" : "User object was retrieved with success"
      },
      "UsersGet" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Users"
            }
          }
        },
        "description" : "Role objects was retrieved with success"
      },
      "UserSet" : {
        "description" : "User was updated with success."
      },
      "EnableUser" : {
        "description" : "User was enabled/disabled with success"
      }
    },
    "schemas" : {
      "AccessToken" : {
        "description" : "Application Access token object",
        "properties" : {
          "createdOn" : {
            "description" : "Indicates when the application access token was created on the system. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "description" : {
            "description" : "Access token description.",
            "maxLength" : 255,
            "type" : "string"
          },
          "enabled" : {
            "default" : true,
            "description" : "Enable or disable access token. Changes on this parameter take immediate effect into application access through this access token.",
            "type" : "boolean"
          },
          "id" : {
            "description" : "Access token unique identifier.",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          },
          "tokenSecret" : {
            "description" : "Access token secret.",
            "format" : "uuid",
            "maxLength" : 200,
            "readOnly" : true,
            "type" : "string"
          },
          "tokenKey" : {
            "description" : "Access token key.",
            "format" : "uuid",
            "maxLength" : 200,
            "readOnly" : true,
            "type" : "string"
          },
          "updatedBy" : {
            "description" : "The user ID of who was the last user to update this application access token on the system. If its a new access token, it will be the user who created. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "readOnly" : true,
            "type" : "string"
          },
          "updatedOn" : {
            "description" : "Indicates the last update date on this application access token. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "required" : [ "description", "enabled" ],
        "type" : "object"
      },
      "AccessTokens" : {
        "description" : "Access tokens list object",
        "type" : "object",
        "properties" : {
          "transactionID" : {
            "description" : "Transaction identifier",
            "type" : "string",
            "readOnly" : true
          },
          "tokens" : {
            "description" : "Access tokens object array",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccessToken"
            }
          }
        }
      },
      "App" : {
        "description" : "Application object",
        "properties" : {
          "CORS" : {
            "description" : "CORS rules for this application. CORS rules are domains that will be granted access to this application using this application access tokens.",
            "items" : {
              "default" : "mydomain.com",
              "description" : "Source FQDN that will make requests to the API.",
              "type" : "string"
            },
            "nullable" : true,
            "type" : "array"
          },
          "createdOn" : {
            "description" : "Indicates when the application was created on the system. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "description" : {
            "description" : "Application description.",
            "maxLength" : 255,
            "type" : "string"
          },
          "id" : {
            "description" : "Application unique identifier.",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          },
          "mfaRequired" : {
            "default" : false,
            "description" : "Enable or disable MFA requirement for all users that are directly associated with this all roles on this application. If this preference is enabled and enrolled users exists on any role of this application, MFA setup will be requested on next user login. If user already has MFA enabled and this preference is disabled, no actions are taken on user object and MFA is preserved, but user can now disable it desired.\\\n*Important*: This parameter takes priority over role.mfaRequired property. If Application.mfaRequired is enabled Role.mfaRequired is not considered, otherwise it will check for role preference.",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Application name.",
            "maxLength" : 50,
            "type" : "string"
          },
          "updatedBy" : {
            "description" : "The user ID of who was the last user to update this application on the system. If its a new application, it will be the user who created. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "readOnly" : true,
            "type" : "string"
          },
          "updatedOn" : {
            "description" : "Indicates the last update date on this application. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "required" : [ "name", "description", "mfaRequired" ],
        "type" : "object"
      },
      "AppDetailed" : {
        "description" : "Detailed Application object",
        "properties" : {
          "CORS" : {
            "description" : "CORS rules for this application. CORS rules are domains that will be granted access to this application using this application access tokens.",
            "items" : {
              "default" : "mydomain.com",
              "description" : "Source FQDN that will make requests to the API.",
              "type" : "string"
            },
            "nullable" : true,
            "type" : "array"
          },
          "createdOn" : {
            "description" : "Indicates when the application was created on the system. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "description" : {
            "description" : "Application description.",
            "maxLength" : 255,
            "type" : "string"
          },
          "id" : {
            "description" : "Application unique identifier.",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          },
          "mfaRequired" : {
            "default" : false,
            "description" : "Enable or disable MFA requirement for all users that are directly associated with this all roles on this application. If this preference is enabled and enrolled users exists on any role of this application, MFA setup will be requested on next user login. If user already has MFA enabled and this preference is disabled, no actions are taken on user object and MFA is preserved, but user can now disable it desired.\\\n*Important*: This parameter takes priority over role.mfaRequired property. If Application.mfaRequired is enabled Role.mfaRequired is not considered, otherwise it will check for role preference.",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Application name.",
            "maxLength" : 50,
            "type" : "string"
          },
          "updatedBy" : {
            "description" : "The user ID of who was the last user to update this application on the system. If its a new application, it will be the user who created. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "readOnly" : true,
            "type" : "string"
          },
          "updatedOn" : {
            "description" : "Indicates the last update date on this application. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "roles" : {
            "description" : "Application roles",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Role"
            }
          },
          "tokens" : {
            "description" : "Application access tokens",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccessToken"
            }
          }
        },
        "required" : [ "name", "description", "mfaRequired" ],
        "type" : "object"
      },
      "Apps" : {
        "description" : "Applications list object",
        "type" : "object",
        "properties" : {
          "transactionID" : {
            "description" : "Transaction identifier",
            "type" : "string",
            "readOnly" : true
          },
          "apps" : {
            "description" : "Applications object array",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/App"
            }
          }
        }
      },
      "ErrorAPI" : {
        "description" : "API error object",
        "type" : "object",
        "required" : [ "err" ],
        "properties" : {
          "transactionID" : {
            "description" : "Transaction identifier",
            "type" : "string",
            "readOnly" : true
          },
          "err" : {
            "description" : "Error description",
            "type" : "string"
          },
          "errCode" : {
            "description" : "Error code of one of the listed types.\n* ```INVALID_INPUT``` - Invalid input error happens whenever a body request has failed to fill the request body requirements.\n* ```NOT_FOUND``` - Not found error may happen if try access a object that does not exist on the system.\n* ```MISSING_PARAM``` - Missing parameter error is directly related to the request required paramaters. If you got this, please check the request paramaters, a path parameter or a query paramater should be missing.\n* ```API_ERROR``` - This error happens in a API unhandled error. This error need to be reported to the API developer with the transaction ID.\n* ```INCORRECT_BEHAVIOUR``` - Incorrect behaviour might happen in the case of a misconfigured API. Please, report this to the API developer with the transaction ID.\n* ```OP_NOT_ALLOWED``` - You probably don't have permissions to access this resource. If you believe this is an error, check your uses permissions, IDM configuration or report it to the developer.",
            "type" : "string",
            "enum" : [ "INVALID_INPUT", "NOT_FOUND", "MISSING_PARAM", "API_ERROR", "INCORRECT_BEHAVIOUR", "OP_NOT_ALLOWED" ]
          }
        }
      },
      "ErrorAPIUnauthorized" : {
        "description" : "API unauthprized error object",
        "type" : "object",
        "required" : [ "err" ],
        "properties" : {
          "transactionID" : {
            "description" : "Transaction identifier",
            "type" : "string",
            "readOnly" : true
          },
          "err" : {
            "description" : "Error description",
            "type" : "string"
          },
          "errCode" : {
            "description" : "Error code of one of the listed types.\n* ```AUTH_FORBIDDEN``` - Happens when Cognito deny the authorization of the user (probably wrong password)\n* ```INVALID_APP_AUTH``` - AppID Token sent to server is in a invalid or unknown format. Check your IDM tokens on the client side.\n* ```APP_AUTH_DISABLED``` - AppID sent is disabled! Enable it on IDM FE.\n* ```APP_AUTH_EXP``` - AppID token send to the server is expired. Maybe the user slept on the registration process?\n* ```APP_AUTH_NOT_FOUND``` - AppID token send to the server is in a known format but was not found on the DB. Maybe it's a deleted token?\n* ```APP_AUTH_NO_APP``` - AppID token exists but no app is associated with it. Wierd.. Wrong import is the only possibility.\n* ```RESTRICTED``` - User has no permission to access the specified resource.\n* ```NO_APP_ACCESS``` - User has no access to current app (associated with the sent AppID token).\n* ```DISABLED``` - User is disabled.\n* ```LOCKED``` - User is locked. System will unlock after cooldown.\n* ```NOT_FOUND``` - User not found on system\n* ```MAN_IN_THE_MIDDLE``` - Received valid JWT but this token is not validate by AWS cognito provider. Someone is trying to hack on us :o",
            "type" : "string",
            "enum" : [ "AUTH_FORBIDDEN", "INVALID_APP_AUTH", "APP_AUTH_DISABLED", "APP_AUTH_EXP", "APP_AUTH_NOT_FOUND", "APP_AUTH_NO_APP", "INVALID_AUTH_TOKEN", "RESTRICTED", "NO_APP_ACCESS", "DISABLED", "LOCKED", "NOT_FOUND", "MAN_IN_THE_MIDDLE" ]
          }
        }
      },
      "Challenge" : {
        "description" : "Challenge call object",
        "properties" : {
          "challengeState" : {
            "description" : "Challenge answer type\n* ```NEW_PASS_REQ``` - New password required challenge type\n* ```PASS_RESET_REQ``` - Password reset challenge type\n* ```MFA_SETUP_REQ``` - MFA Setup required challenge type\n* ```MFA_REQ``` - MFA required challenge type",
            "type" : "string",
            "enum" : [ "NEW_PASS_REQ", "PASS_RESET_REQ", "MFA_SETUP_REQ", "MFA_REQ" ]
          },
          "challengeContext" : {
            "description" : "Challenge context (might be a session token to be send in the answer)"
          },
          "newPassword" : {
            "description" : "New user password to be set.",
            "format" : "password",
            "maxLength" : 100,
            "type" : "string",
            "writeOnly" : true
          },
          "oldPassword" : {
            "description" : "Old user password. This need to be set if password update is originating from user action and the user knowns his previous password. - This parameter take priority over resetCode if both are set - Only required if the action is done by an user or admin and resetCode is not set.",
            "format" : "password",
            "maxLength" : 100,
            "nullable" : true,
            "type" : "string",
            "writeOnly" : true
          }
        }
      },
      "LoginIn" : {
        "description" : "Login call object",
        "properties" : {
          "mfa" : {
            "description" : "MFA number",
            "maxLength" : 10,
            "type" : "integer"
          },
          "password" : {
            "description" : "Password",
            "format" : "password",
            "maxLength" : 100,
            "type" : "string"
          },
          "username" : {
            "description" : "Username of the user.",
            "maxLength" : 50,
            "type" : "string"
          }
        },
        "required" : [ "password", "username" ],
        "type" : "object"
      },
      "LoginOut" : {
        "description" : "Login call response object",
        "properties" : {
          "message" : {
            "description" : "Authorization display message.",
            "type" : "string"
          },
          "challengeContext" : {
            "description" : "Challenge context (might be a session token to be send in the answer)"
          },
          "challengeState" : {
            "description" : "Authorization challenge state\n* ```NEW_PASS_REQ``` - New password required challenge type\n* ```PASS_RESET_REQ``` - Password reset challenge type\n* ```MFA_SETUP_REQ``` - MFA Setup required challenge type\n* ```MFA_REQ``` - MFA required challenge type\n* ```AUTH_OK``` - Authorization succeeded.\n* ```CONFIRM_REQ``` - User has account confirmation pending.\n* ```DISABLED``` - User is disabled.\n* ```LOCKED``` - User is locked.\n* ```UNKNOWN``` - Unknown challenge state, please, contact API developer with the transaction ID.\n* ```NOT_FOUND``` - User not found\n* ```RESOURCE_NOT_FOUND``` - Identity resource not found, IDM is probably misconfigured.\n* ```INVALID_PARAMETERS``` - Invalid input parameters, check for errors on email (tabs, break lines).",
            "enum" : [ "PASS_RESET_REQ", "NEW_PASS_REQ", "MFA_SETUP_REQ", "MFA_REQ", "AUTH_OK", "CONFIRM_REQ", "DISABLED", "LOCKED", "UNKNOWN", "NOT_FOUND", "RESOURCE_NOT_FOUND", "INVALID_PARAMETERS" ],
            "type" : "string"
          },
          "token" : {
            "description" : "User token if succesfully authorized",
            "type" : "string",
            "format" : "JWT"
          },
          "renewalToken" : {
            "description" : "User renewal token if successfully authorization. Renewal token is expected to come only on login requests, not on validation. Renewal token can be used on subsequent renewal call.",
            "type" : "string",
            "format" : "JWT"
          },
          "resourcesToken" : {
            "description" : "User resources token. Used to grand authorization to this user to make operations on remote resources on the behalf of the user.",
            "type" : "string",
            "format" : "JWT"
          },
          "additionalMeta" : {
            "description" : "Additional user information",
            "type" : "object",
            "properties" : {
              "parts" : {
                "description" : "Additional user app partition data sectioned by partition ID",
                "type" : "object",
                "properties" : {
                  "partID" : {
                    "$ref" : "#/components/schemas/Part"
                  }
                }
              },
              "userObject" : {
                "description" : "User object",
                "type" : "object"
              }
            }
          },
          "transactionID" : {
            "description" : "Transaction identifier",
            "type" : "string",
            "readOnly" : true
          }
        },
        "required" : [ "password", "username" ],
        "type" : "object"
      },
      "LogoutIn" : {
        "description" : "Logout call object",
        "properties" : {
          "allDevices" : {
            "default" : false,
            "description" : "Specify if the user wants to logout from all logged devices.",
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "MFA" : {
        "description" : "User MFA device association object",
        "properties" : {
          "token" : {
            "description" : "MFA device token to be associated on the user.",
            "maxLength" : 50,
            "type" : "string"
          }
        },
        "required" : [ "token" ],
        "type" : "object"
      },
      "Part" : {
        "description" : "User partition object",
        "properties" : {
          "id" : {
            "description" : "Partition unique identifier.",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          },
          "updatedBy" : {
            "description" : "The user ID of whom was the last user to update the partition. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "readOnly" : true,
            "type" : "string"
          },
          "updatedByApp" : {
            "description" : "The application ID of whom was the last application to update the partition. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "readOnly" : true,
            "type" : "string"
          },
          "updatedOn" : {
            "description" : "Indicates the last update date on this application access token. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "value" : {
            "description" : "Partition value.",
            "maxLength" : 200,
            "type" : "object"
          },
          "indexedValue" : {
            "description" : "Optional partition indexed value.",
            "maxLength" : 200,
            "type" : "object"
          }
        },
        "required" : [ "value" ],
        "type" : "object"
      },
      "Parts" : {
        "description" : "User partitions objects",
        "type" : "object",
        "properties" : {
          "transactionID" : {
            "description" : "Transaction identifier",
            "type" : "string",
            "readOnly" : true
          },
          "parts" : {
            "description" : "User partitions",
            "type" : "object",
            "properties" : {
              "partID" : {
                "$ref" : "#/components/schemas/Part"
              }
            }
          }
        }
      },
      "PartACL" : {
        "description" : "Partition ACL object",
        "properties" : {
          "accessList" : {
            "description" : "Roles access list for this partition ID. Only role listed on this list will have access to this user partition.",
            "items" : {
              "description" : "Role access object",
              "properties" : {
                "accessType" : {
                  "description" : "The access type you want to grant to the specified role.",
                  "enum" : [ "ReadOnly", "ReadWrite" ],
                  "type" : "string"
                },
                "roleID" : {
                  "description" : "The role ID of the role you want to grant the partitions access.",
                  "format" : "uuid",
                  "type" : "string"
                }
              },
              "required" : [ "roleID", "accessType" ],
              "type" : "object"
            },
            "minItems" : 1,
            "type" : "array"
          },
          "id" : {
            "description" : "Partition ACL unique identifier. - Same used on user partition ID",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          },
          "updatedBy" : {
            "description" : "The user ID of whom was the last user to update the partition ACL. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "readOnly" : true,
            "type" : "string"
          },
          "updatedOn" : {
            "description" : "Indicates the last update date on this partition ACL. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "required" : [ "accessList" ],
        "type" : "object"
      },
      "PartACLs" : {
        "description" : "Partition ACL objects",
        "type" : "object",
        "properties" : {
          "transactionID" : {
            "description" : "Transaction identifier",
            "type" : "string",
            "readOnly" : true
          },
          "acls" : {
            "description" : "ACLs",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PartACL"
            }
          }
        }
      },
      "Password" : {
        "description" : "User password modification object",
        "properties" : {
          "newPassword" : {
            "description" : "New user password to be set.",
            "format" : "password",
            "maxLength" : 100,
            "type" : "string",
            "writeOnly" : true
          },
          "oldPassword" : {
            "description" : "Old user password. This need to be set if password update is originating from user action and the user knowns his previous password. - This parameter take priority over resetCode if both are set - Only required if the action is done by an user or admin and resetCode is not set.",
            "format" : "password",
            "maxLength" : 100,
            "nullable" : true,
            "type" : "string",
            "writeOnly" : true
          },
          "isPermanent" : {
            "description" : "When root is changing user password, this parameter ir required to specify if the password is required or not.",
            "maxLength" : 100,
            "nullable" : true,
            "type" : "boolean",
            "writeOnly" : true
          }
        },
        "required" : [ "newPassword" ],
        "type" : "object"
      },
      "PasswordReset" : {
        "description" : "User password reset object",
        "properties" : {
          "newPassword" : {
            "description" : "New user password to be set.",
            "format" : "password",
            "maxLength" : 100,
            "type" : "string",
            "writeOnly" : true
          },
          "resetCore" : {
            "description" : "Reset code sent by email",
            "maxLength" : 100,
            "type" : "string",
            "writeOnly" : true
          }
        },
        "required" : [ "newPassword, resetCode, username" ],
        "type" : "object"
      },
      "Enroll" : {
        "description" : "User enrollment object",
        "properties" : {
          "username" : {
            "description" : "User email of the user to be enrolled",
            "type" : "string"
          },
          "role" : {
            "description" : "The cognitoName of the role to enroll the user",
            "type" : "string"
          }
        }
      },
      "RegisterIn" : {
        "description" : "Registration call object",
        "properties" : {
          "bypassConfirmation" : {
            "description" : "Bypass user confirmation process and creates the user already confirmed on the system. \\\n**Scope:** Only root users are allowed to use this flag.",
            "type" : "boolean"
          },
          "recaptchaToken" : {
            "description" : "Recapctha token",
            "type" : "string"
          },
          "email" : {
            "description" : "New user email used to all communications between the user and the system. This must be unique on the system. API will not allow you to register a new user if the email is already binded into another user on the system.",
            "format" : "email",
            "maxLength" : 255,
            "type" : "string"
          },
          "firstName" : {
            "description" : "User first name.",
            "maxLength" : 255,
            "type" : "string"
          },
          "lastName" : {
            "description" : "User last name(s).",
            "maxLength" : 255,
            "type" : "string"
          },
          "linkingRoles" : {
            "description" : "User initial linked roles identifiers. \\\n**Scope:** Only root users are allowed to use this flag for what role is desired.",
            "items" : {
              "description" : "The cognito role name to be linked into the user after registering.",
              "type" : "string"
            },
            "minItems" : 0,
            "type" : "array"
          },
          "parts" : {
            "description" : "Additional user app partition data sectioned by partition ID",
            "type" : "object",
            "properties" : {
              "partID" : {
                "$ref" : "#/components/schemas/Part"
              }
            }
          }
        },
        "required" : [ "firstName", "lastName", "email", "recaptchaToken", "linkingRoles" ],
        "type" : "object"
      },
      "RegisterOut" : {
        "description" : "Register call response object",
        "properties" : {
          "regToken" : {
            "description" : "Registration token to be used together with registration hash send by email to confirm the registration on call `GET /register/confirm`. This parameter will be returned, only if user needs to be confirmed.",
            "type" : "string"
          }
        },
        "required" : [ "regToken" ],
        "type" : "object"
      },
      "ConfirmIn" : {
        "description" : "User confirmation object",
        "properties" : {
          "username" : {
            "description" : "User email of the user to be confirmed",
            "type" : "string"
          }
        }
      },
      "Role" : {
        "description" : "Application Role object",
        "properties" : {
          "allowFederation" : {
            "default" : false,
            "description" : "Enable or disable federated users to enroll in this role. This preference takes immediate effect on registration calls. However if federated users are enrolled on this role and the preference is disabled, no actions are taken on the user object and association with the role will be kept.",
            "type" : "boolean"
          },
          "createdOn" : {
            "description" : "Indicates when the role was created on the system. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "id" : {
            "description" : "Role unique identifier.",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          },
          "mfaRequired" : {
            "default" : false,
            "description" : "Enable or disable MFA requirement for all users that are directly associated with this role. If this preference is enabled and enrolled users exists, MFA setup will be requested on next user login. If user already has MFA enabled and this preference is disabled, no actions are taken on user object and MFA is preserved, but user can now disable if desired. \\\n*Important*: Application mfaRequired parameter takes priority over this. If Application.mfaRequired is enabled Role.mfaRequired is not considered, otherwise it will check for role preference.",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Role name. This is not updatable",
            "maxLength" : 50,
            "type" : "string"
          },
          "description" : {
            "description" : "Role description.",
            "maxLength" : 50,
            "type" : "string"
          },
          "readOnly" : {
            "default" : false,
            "description" : "If this role is a read-only role. When enabled, this preference will deny write operations of enrolled users on partition and user objects.",
            "type" : "boolean"
          },
          "registrationEnabled" : {
            "description" : "Enable or disable user registration on this specific role on the related application. This preference takes immediate effect on registration calls.",
            "type" : "boolean"
          },
          "superRole" : {
            "default" : false,
            "description" : "If this role is a super role or not. When enabled, this preference allows all enrolled users on the super role to access all users from all roles on the app the super role is. Otherwise, just self access is allowed.",
            "type" : "boolean"
          },
          "updatedBy" : {
            "description" : "The user ID of whom was the last user to update the partition. If its a new role, it will be the user who created. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "readOnly" : true,
            "type" : "string"
          },
          "updatedOn" : {
            "description" : "Indicates the last update date on this role. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "required" : [ "name", "registrationEnabled", "mfaRequired", "allowFederation", "description", "superRole", "readOnly" ],
        "type" : "object"
      },
      "Roles" : {
        "description" : "Roles list object",
        "type" : "object",
        "properties" : {
          "transactionID" : {
            "description" : "Transaction identifier",
            "type" : "string",
            "readOnly" : true
          },
          "roles" : {
            "description" : "Roles object array",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Role"
            }
          }
        }
      },
      "User" : {
        "description" : "User object",
        "properties" : {
          "confirmationDate" : {
            "description" : "Indicates when the user confirmed the registration or if registered with bypassConfirmation, it should be the same as createdOn parameter. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "createdOn" : {
            "description" : "Indicates when the user was registered on the system. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "email" : {
            "description" : "User email used to all communications between the user and the system. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it",
            "format" : "email",
            "maxLength" : 255,
            "type" : "string"
          },
          "federation" : {
            "description" : "The federation provider for this user, if any. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "nullable" : true,
            "readOnly" : true,
            "type" : "string"
          },
          "firstName" : {
            "description" : "User first name.",
            "maxLength" : 255,
            "type" : "string"
          },
          "lastName" : {
            "description" : "User last name.",
            "maxLength" : 255,
            "type" : "string"
          },
          "id" : {
            "description" : "User unique identifier.",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          },
          "lastLogin" : {
            "description" : "Indicates when was the last user login or if not logged yet, it records the registration date. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "mfaEnabled" : {
            "description" : "Indicates if user MFA is enabled or not. \\\n**Flag**: This is a flag only parameter. Write operations will not consider it to enabled the user MFA. To be able to enable MFA use the route `POST /user/{userID}/MFA`",
            "readOnly" : true,
            "type" : "boolean"
          },
          "roles" : {
            "description" : "User roles object. \\\n**Flag**: This is a flag only parameter for users and admins. Write operations will not consider it to add new roles and attach roles to user. This is a root only function.\\\n**Scope:** Only root users are allowed to attach current existing roles into user objects. Roles are never created by adding into user object.",
            "items" : {
              "description" : "The role ID to be linked into the user.",
              "type" : "string"
            },
            "minItems" : 0,
            "readOnly" : true,
            "type" : "array"
          },
          "updatedBy" : {
            "description" : "The user ID of who was the last user to update this user on the system. If its a new user, it will be the user who registered. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "readOnly" : true,
            "type" : "string"
          },
          "updatedOn" : {
            "description" : "Indicates the last update date on this user. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "lockedUntil" : {
            "description" : "Unix timestamp saying until when this user will be locked. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "type" : "number",
            "format" : "date-time"
          },
          "objectClass" : {
            "description" : "Object class. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "type" : "string"
          },
          "isEnabled" : {
            "description" : "If user is enabled or not. \\\n**Flag**: This is a read-only parameter. Write operations will not consider it.",
            "type" : "string"
          },
          "password" : {
            "description" : "User new password.",
            "type" : "string"
          },
          "parts" : {
            "description" : "Optional user partitions to update or add.",
            "type" : "object",
            "properties" : {
              "partID" : {
                "$ref" : "#/components/schemas/Part"
              }
            }
          }
        },
        "required" : [ "firstName", "lastName", "email" ],
        "type" : "object"
      },
      "Users" : {
        "description" : "Users list object",
        "type" : "object",
        "properties" : {
          "transactionID" : {
            "description" : "Transaction identifier",
            "type" : "string",
            "readOnly" : true
          },
          "users" : {
            "description" : "Users object array",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          }
        }
      },
      "ValidateIn" : {
        "description" : "Token validation call object",
        "properties" : {
          "token" : {
            "description" : "Old token to be revalidate.",
            "type" : "string"
          }
        },
        "required" : [ "token" ],
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "AppAuth" : {
        "description" : "Application access token hash generated from access token and secret to identify the application.",
        "in" : "query",
        "name" : "appauth",
        "type" : "apiKey"
      },
      "UserAuth" : {
        "bearerFormat" : "JWT",
        "description" : "User custom JSON web token generated by the API and returned as token.",
        "scheme" : "bearer",
        "type" : "http"
      },
      "UserResourcesAuth" : {
        "description" : "User custom JSON web token generated by the API and returned as resources token.",
        "type" : "apiKey",
        "in" : "header",
        "name" : "ResourcesToken"
      }
    }
  },
  "info" : {
    "contact" : {
      "email" : "support@ikonintegration.com",
      "name" : "Ikon Integration",
      "url" : "http://ikonintegration.ca"
    },
    "description" : "IDM API",
    "title" : "IDM API",
    "version" : "0.6.2"
  },
  "openapi" : "3.0.0",
  "paths" : {
    "/apps" : {
      "description" : "List application operation",
      "get" : {
        "description" : "Get all applications in the system. \\\n**Scope:** Only root users are allowed to list application objects.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AppsGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "List application objects",
        "tags" : [ "Applications" ]
      },
      "summary" : "Applications list"
    },
    "/app/{appID}" : {
      "delete" : {
        "description" : "Delete application object from the system with the specified app ID.  \\\n**Scope:** Only root users are allowed to delete application objects.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AppDel"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Delete application",
        "tags" : [ "Application" ]
      },
      "description" : "CRUD operations on application object",
      "get" : {
        "description" : "Get application object with the specified app ID. \\\n**Scope:** Only root users are allowed to fetch application object.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AppGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get application object",
        "tags" : [ "Application" ]
      },
      "parameters" : [ {
        "description" : "The application ID of the application to make the operation. In case of creating new application through POST operation, parameter is disregarded, but it's encouraged to used constant `new` for best practices.",
        "in" : "path",
        "name" : "appID",
        "required" : true,
        "schema" : {
          "default" : "new",
          "type" : "string"
        }
      } ],
      "post" : {
        "description" : "Create new application with the specified app ID. \\\n**Scope:** Only root users are allowed to create new applications.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/AppSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AppSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Create new application",
        "tags" : [ "Application" ]
      },
      "put" : {
        "description" : "Update application object with the specified app ID. \\\n**Scope:** Only root users are allowed to update existing applications.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/AppSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AppSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Update application",
        "tags" : [ "Application" ]
      },
      "summary" : "Application manipulation"
    },
    "/app/{appID}/detailed" : {
      "description" : "Get detailed application informations (includes roles and tokens)",
      "get" : {
        "description" : "Get detailed application object with the specified app ID. \\\n**Scope:** Only root users are allowed to fetch application object.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AppDetailedGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get application object",
        "tags" : [ "Application" ]
      },
      "parameters" : [ {
        "description" : "The application ID of the application to make the operation.",
        "in" : "path",
        "name" : "appID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/app/{appID}/accessToken/{acID}" : {
      "delete" : {
        "description" : "Delete access token object from the system with the specified access token ID and app ID.  \\\n**Scope:** Only root users are allowed to delete access tokens objects.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/RoleDel"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Delete access token",
        "tags" : [ "Access Token" ]
      },
      "description" : "CRUD operations on access token object",
      "get" : {
        "description" : "Get access token object with the specified access token ID and app ID. \\\n**Scope:** Only root users are allowed to fetch access tokens.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AccessTokenGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get access token object",
        "tags" : [ "Access Token" ]
      },
      "parameters" : [ {
        "description" : "The application ID of the role to make the operation.",
        "in" : "path",
        "name" : "appID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }, {
        "description" : "The access token ID of the access token to make the operation. In case of creating new access token through POST operation, parameter is disregarded, but it's encouraged to used constant `new` for best practices.",
        "in" : "path",
        "name" : "acID",
        "required" : true,
        "schema" : {
          "default" : "new",
          "type" : "string"
        }
      } ],
      "post" : {
        "description" : "Create new access token on the application with the specified app ID. \\\n**Scope:** Only root users are allowed to create new access tokens.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/AccessTokenSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AccessTokenSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Create new role on app",
        "tags" : [ "Access Token" ]
      },
      "put" : {
        "description" : "Update access token object with the specified access token ID and app ID. \\\n**Scope:** Only root users are allowed to update existing access tokens.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/AccessTokenSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AccessTokenSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Update access token",
        "tags" : [ "Access Token" ]
      },
      "summary" : "Access token manipulation"
    },
    "/app/{appID}/accessTokens" : {
      "description" : "List application access tokens",
      "get" : {
        "description" : "Get access token objects from the specified app with ID. \\\n**Scope:** Only root users are allowed to fetch access tokens.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AccessTokensGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "List access token objects",
        "tags" : [ "Access Tokens" ]
      },
      "parameters" : [ {
        "description" : "The application ID of the role to make the operation.",
        "in" : "path",
        "name" : "appID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "summary" : "Access tokens list"
    },
    "/app/{appID}/roles" : {
      "description" : "Find roles from application",
      "get" : {
        "description" : "Get role objects in the application with the specified app ID. \\\n**Scope:** Only root users are allowed to list application roles objects.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/RolesGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get role object",
        "tags" : [ "Roles" ]
      },
      "parameters" : [ {
        "description" : "The application ID of the role to make the operation.",
        "in" : "path",
        "name" : "appID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "summary" : "Find roles on app"
    },
    "/roles" : {
      "description" : "Find roles on system",
      "get" : {
        "description" : "Get role objects in the system. \\\n**Scope:** Only root users are allowed to list roles objects.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/RolesGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get all roles",
        "tags" : [ "Roles" ]
      },
      "summary" : "Find roles on app"
    },
    "/app/{appID}/role/{roleID}" : {
      "delete" : {
        "description" : "Delete role object from the system with the specified role ID and app ID.  \\\n**Scope:** Only root users are allowed to delete role objects.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/RoleDel"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Delete role",
        "tags" : [ "Role" ]
      },
      "description" : "CRUD operations on role object",
      "get" : {
        "description" : "Get application role object with the specified role ID and app ID. \\\n**Scope:** Users and admins are only allowed to fetch the roles they are enrolled in. Root users are allowed to fetch all roles from all applications.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/RoleGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get role object",
        "tags" : [ "Role" ]
      },
      "parameters" : [ {
        "description" : "The application ID of the role to make the operation.",
        "in" : "path",
        "name" : "appID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }, {
        "description" : "The role ID of the role to make the operation. In case of creating new role through POST operation, parameter is disregarded, but it's encouraged to used constant `new` for best practices.",
        "in" : "path",
        "name" : "roleID",
        "required" : true,
        "schema" : {
          "default" : "new",
          "type" : "string"
        }
      } ],
      "post" : {
        "description" : "Create new role on the application with the specified app ID. \\\n**Scope:** Only root users are allowed to create new roles.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/RoleSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/RoleSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Create new role on app",
        "tags" : [ "Role" ]
      },
      "put" : {
        "description" : "Update role object with the specified role ID and app ID. \\\n**Scope:** Only root users are allowed to update existing roles.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/RoleSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/RoleSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Update role",
        "tags" : [ "Role" ]
      },
      "summary" : "Role manipulation"
    },
    "/login" : {
      "description" : "Login",
      "post" : {
        "description" : "Login user into the system and if succeed will return IDM token for futher API usage.  \\\n\n**MFA Considerations:** If MFA is not included on the body and the user has MFA enabled, a second call on this method will be required with the user credentials and MFA.\n\n**Responses:** 20x Responses on this method does not implies that the user is authorized on system, but yes, the call has been processed with success. Those two hundred answers will always return a challenge state (read more on request body) to notify the requester about the current state. If challenge state is `SUCCESS` IDM token will be return in conjunction with all the user partition information readable by the source application.  \\\n\n**Scope:** This call does not have a scope.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Login"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Login"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Login user",
        "tags" : [ "Authentication" ]
      },
      "summary" : "Login operations"
    },
    "/logout" : {
      "description" : "Logout",
      "post" : {
        "description" : "Logout user into the system if credentials are good.  \\\n\n**Scope:** This call does not have a scope, all logged users can call it.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Logout"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Logout"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Logout user",
        "tags" : [ "Authentication" ]
      },
      "summary" : "Logout operations"
    },
    "/partACLs" : {
      "description" : "List partition ACLs operation",
      "get" : {
        "description" : "Get all partition ACLs in the system. \\\n**Scope:** Only root users are allowed to fetch partition ACLs.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartACLsGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get partition ACLs objects",
        "tags" : [ "Partition ACLs" ]
      },
      "summary" : "Partition ACLs list"
    },
    "/partACL/{aclID}" : {
      "delete" : {
        "description" : "Delete partition ACL object from the system with the specified partition ID. ACL deletions will not take effect on user exisitng partitions, but access to that partitions will be blocked. \\\n**Scope:** Only root users are allowed to delete partition ACLs objects.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartACLDel"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Delete partition ACL",
        "tags" : [ "Partition ACL" ]
      },
      "description" : "CRUD operations on partition access control list object",
      "get" : {
        "description" : "Get partition ACL object with the specified partition ID. \\\n**Scope:** Only root users are allowed to fetch partition ACLs.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartACLGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get partition ACL object",
        "tags" : [ "Partition ACL" ]
      },
      "parameters" : [ {
        "description" : "The partition ID of the ACL to make the operation. In case of creating new partition ACL through POST operation, parameter should be the new partition ID.",
        "in" : "path",
        "name" : "aclID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "description" : "Create partition ACL with the specified partition ID. \\\n**Scope:** Only root users are allowed to create new partition ACLs.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/PartACLSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartACLSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Create new partition ACL",
        "tags" : [ "Partition ACL" ]
      },
      "put" : {
        "description" : "Update partition ACL object with the specified partition ID. \\\n**Scope:** Only root users are allowed to update existing partition ACLs.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/PartACLSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartACLSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Update partition ACL",
        "tags" : [ "Partition ACL" ]
      },
      "summary" : "Partition ACL manipulation"
    },
    "/register" : {
      "description" : "Registration",
      "post" : {
        "description" : "Register a new user into the system. \\\n**Scope:** This call does not have a scope. However, some flags on the registering object are reserved for root and admins to allow then to register users on the system.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Register"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Register"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Register a new user",
        "tags" : [ "Registration" ]
      },
      "put" : {
        "description" : "Register a exisiting user into a new role. \\\n**Scope:** This call does not have a scope. However the role you are trying to register must have registration enabled and is from the source application.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Enroll"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Enroll"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Register an existing user into a new role",
        "tags" : [ "Registration" ]
      },
      "summary" : "Registration operations"
    },
    "/register/confirm" : {
      "delete" : {
        "description" : "Reset registration confirmation request and resent confirmation email. \\\n**Scope:** This call does not have a scope.",
        "parameters" : [ {
          "description" : "The user email of which unconfirmed user you want to reset the registration confirmation.",
          "in" : "query",
          "name" : "userEmail",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ResetRegConfirmation"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Reset user confirmation.",
        "tags" : [ "Registration Confirmation" ]
      },
      "description" : "Registration confirmation",
      "get" : {
        "description" : "Confirm user registration into the system. \\\n**Scope:** This call does not have a scope.",
        "parameters" : [ {
          "description" : "The registration token generated and returned on the registration call and also sent by email.",
          "in" : "query",
          "name" : "regToken",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The registration code generated and send by email on the registration call.",
          "in" : "query",
          "name" : "regCode",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ConfirmRegistration"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Confirm user registration",
        "tags" : [ "Registration Confirmation" ]
      },
      "post" : {
        "description" : "Confirm user registration into the system as root or admin. \\\n**Scope:** Only root and admins are allowed to confirm other users.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/ConfirmSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ConfirmRegistration"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Confirm user registration as admin/root without code",
        "tags" : [ "Registration Confirmation" ]
      },
      "summary" : "Registration confirmation operations"
    },
    "/users" : {
      "description" : "List user objects operations",
      "summary" : "List users",
      "get" : {
        "description" : "Get user object with the specified user ID. \\\n**Scope:** Admins are allowed to fetch their own object and users under their administration. Roots are allowed to fetch all user objects.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/UsersGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get user object",
        "tags" : [ "Users" ]
      }
    },
    "/user/{userID}" : {
      "description" : "CRUD operations on user object",
      "get" : {
        "description" : "Get user object with the specified user ID. \\\n**Scope:** Users are allowed to fetch their own object. Admins are allowed to fetch their own object and users under their administration. Roots are allowed to fetch all user objects.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/UserGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get user object",
        "tags" : [ "User" ]
      },
      "parameters" : [ {
        "description" : "The user ID of the user to make the operation. In case of creating new user through POST operation, parameter is disregarded, but it's encouraged to used constant `new` for best practices.",
        "in" : "path",
        "name" : "userID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "put" : {
        "description" : "Update user object with the specified user ID. \\\n**Scope:** Users are allowed to update their own object. Admins are allowed to update their own object and users under their administration. Roots are allowed to update all user objects.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/UserSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/UserSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Update user object",
        "tags" : [ "User" ]
      },
      "summary" : "User manipulation"
    },
    "/user/{userID}/mfa" : {
      "delete" : {
        "description" : "Unbind current MFA device associated with the user. If user do not have any MFA device associated with account, 4xx error will be returned. If user has any restriction on system, actions related to MFA are not allowed and status code 40x will be returned. \\\n**Scope:** Users and admins are only allowed self MFA unbind. Root users are allowed to unbind MFA for all users.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MFADel"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Unbind user MFA device, if set.",
        "tags" : [ "MFA" ]
      },
      "description" : "Management operations for user MFA",
      "parameters" : [ {
        "description" : "The user ID of the user to make the operation.",
        "in" : "path",
        "name" : "userID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "description" : "Setup user MFA device.\n\n**Success Conditions:**\n* User has no restrictions (eg.: disabled & email confirmation done)\n* No MFA already registered\n\n*Failures on conditions above will result on client side error code **40x***\n\n**Scope:** Only self MFA setup is allowed.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/MFASet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MFASet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Bind user MFA device, if not set.",
        "tags" : [ "MFA" ]
      },
      "summary" : "User MFA manipulation"
    },
    "/user/{userID}/enable" : {
      "delete" : {
        "description" : "Disable user on system. \\\n**Scope:** Only root users are allowed to disable users.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/EnableUser"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Disable user on system.",
        "tags" : [ "User" ]
      },
      "description" : "Disable or enable user",
      "parameters" : [ {
        "description" : "The user ID of the user to make the operation.",
        "in" : "path",
        "name" : "userID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "description" : "Enable user on system. \\\n**Scope:** Only root users are allowed to enable users.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/EnableUser"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Enable user on system",
        "tags" : [ "User" ]
      },
      "summary" : "User manipulation (enable and disable)"
    },
    "/user/{userID}/part/{partID}" : {
      "delete" : {
        "description" : "Delete user partition object with the specified user ID and part ID. \\\n**Success Conditions:**\n* The user must be on a role in the application that is making the call.\n* One or more user assigned roles from the application that is making the request has WRITE rights to that partition.\n* The partition is from the requesting user OR at least has one user assigned role from the source application that is a SuperRole and ReadOnly flag is false.\n*Failures on conditions above will result on client side error code **401***\n\n**Scope:** Users, admins are only allowed to delete on their own partitions if the conditions above pass. Root and SuperRole (w/ReadOnly to false) users are allowed to delete on all partitions from all users.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartDel"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Delete user partition",
        "tags" : [ "Partition" ]
      },
      "description" : "CRUD operations on user partition object",
      "get" : {
        "description" : "Get user partition object with the specified user ID and partition ID.\n\n**Success Conditions:**\n* The user must be on a role in the application that is making the call.\n* One or more user assigned roles from the application that is making the request has READ rights to that partition.\n* The partition is from the requesting user OR at least has one user assigned role from the source application that is a SuperRole.\n*Failures on conditions above will result on client side error code **401***\n\n**Scope:** Users, admins are only allowed to fetch their own partitions if the conditions above pass. Root and SuperRole users are allowed to fetch all partitions from all users.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get partition object",
        "tags" : [ "Partition" ]
      },
      "parameters" : [ {
        "description" : "The user ID of the user to make the operation.",
        "in" : "path",
        "name" : "userID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }, {
        "description" : "The partition ID of the user to make the operation. In case of creating new partition through POST operation, parameter is disregarded, but it's encouraged to used constant `new` for best practices.",
        "in" : "path",
        "name" : "partID",
        "required" : true,
        "schema" : {
          "default" : "new",
          "type" : "string"
        }
      } ],
      "put" : {
        "description" : "Create or update user partition object with the specified user ID and part ID. \\\n**Success Conditions:**\n* The user must be on a role in the application that is making the call.\n* One or more user assigned roles from the application that is making the request has WRITE rights to that partition.\n* The partition is from the requesting user OR at least has one user assigned role from the source application that is a SuperRole and ReadOnly flag is false.\n*Failures on conditions above will result on client side error code **401***\n\n**Scope:** Users, admins are only allowed to write on their own partitions if the conditions above pass. Root and SuperRole (w/ReadOnly to false) users are allowed to write on all partitions from all users.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/PartSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Create or update user partition",
        "tags" : [ "Partition" ]
      },
      "summary" : "User partition manipulation"
    },
    "/user/{userID}/parts" : {
      "get" : {
        "description" : "Get all user partitions object with the specified user ID.\n\n**Scope:** Users with Partition ACL wildcard are allowed to list all user partitions. All other partition ACLs applies to this method as well.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartsGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get partitions objects",
        "tags" : [ "Partitions" ]
      },
      "put" : {
        "description" : "Create or update user partitions object with the specified user ID. \\\n**Success Conditions:**\n* The user must be on a role in the application that is making the call.\n* One or more user assigned roles from the application that is making the request has WRITE rights to that partition.\n* The partition is from the requesting user OR at least has one user assigned role from the source application that is a SuperRole and ReadOnly flag is false.\n*Failures on conditions above will result on client side error code **401***\n\n**Scope:** Users, admins are only allowed to write on their own partitions if the conditions above pass. Root and SuperRole (w/ReadOnly to false) users are allowed to write on all partitions from all users.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/PartsSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartsSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Create or update user partitions",
        "tags" : [ "Partitions" ]
      },
      "parameters" : [ {
        "description" : "The user ID of the user to make the operation.",
        "in" : "path",
        "name" : "userID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }, {
        "description" : "The partition ID of the user to make the operation. In case of creating new partition through POST operation, parameter is disregarded, but it's encouraged to used constant `new` for best practices.",
        "in" : "path",
        "name" : "partID",
        "required" : true,
        "schema" : {
          "default" : "new",
          "type" : "string"
        }
      } ],
      "summary" : "User partition manipulation"
    },
    "/user/{userID}/someParts" : {
      "get" : {
        "description" : "Get specified user partitions object with the specified user ID.\n\n**Scope:** Users with permission to read that partition. Admins and roots have rights to read partitions from the users they have access to.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PartsGet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "summary" : "Get specified partitions objects",
        "tags" : [ "Partitions" ]
      },
      "parameters" : [ {
        "description" : "The user ID of the user to make the operation.",
        "in" : "path",
        "name" : "userID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }, {
        "description" : "The partition ID of the user to make the operation. In case of creating new partition through POST operation, parameter is disregarded, but it's encouraged to used constant `new` for best practices.",
        "in" : "path",
        "name" : "partID",
        "required" : true,
        "schema" : {
          "default" : "new",
          "type" : "string"
        }
      } ],
      "summary" : "User partition manipulation"
    },
    "/user/{userID}/password" : {
      "delete" : {
        "description" : "Request user password reset if user is already registered and do not have any restriction on system. Restrictions on the system will prevent any password action and will return 40x status code. Only root type of users can override it.\\\n**Scope:** Users are allowed to reset their own passwords. Admins are allowed to reset their own password and passwords from users under their administration. Roots are allowed to reset all users password at any moment.",
        "parameters" : [ {
          "description" : "The user **EMAIL** of the user to make the operation.",
          "in" : "path",
          "name" : "userID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PasswordDel"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Request user password reset.",
        "tags" : [ "Password" ]
      },
      "description" : "Management operations for user password",
      "parameters" : [ {
        "description" : "The user ID of the user to make the operation.",
        "in" : "path",
        "name" : "userID",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "put" : {
        "description" : "Update user password if user is already registered and do not have any restriction on system. Restrictions on the system will prevent any password action and will return 40x status code. \\\n**Scope:** This is a RAU route. Admin and users are allowed to changed their passwords. Root users are able to change other users password without oldpassword and choose if is temporary or not.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/PasswordSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PasswordSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Update user password",
        "tags" : [ "Password" ]
      },
      "post" : {
        "description" : "Confirm user password reset with confirmation code and new password. \\\n**Scope:** This is a open scope route.",
        "parameters" : [ {
          "description" : "The user **EMAIL** of the user to make the operation.",
          "in" : "path",
          "name" : "userID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/PasswordResetSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PasswordResetSet"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Confirm user password reset",
        "tags" : [ "Password" ]
      },
      "summary" : "User password manipulation"
    },
    "/validate" : {
      "description" : "IDM Token validation",
      "post" : {
        "description" : "Register a new user into the system. \\\n**Scope:** This call does not have a scope.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Validate"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Login"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Validate user token",
        "tags" : [ "Authentication" ]
      },
      "summary" : "Token validation operations"
    },
    "/challenge" : {
      "description" : "IDM Challenge response",
      "post" : {
        "description" : "Respond to challenge with custom context. \\\n**Scope:** This call does not have a scope.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/ChallengeSet"
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Login"
          },
          "400" : {
            "$ref" : "#/components/responses/ErrorAPI"
          },
          "401" : {
            "$ref" : "#/components/responses/ErrorAPIUnauthorized"
          }
        },
        "security" : [ {
          "AppAuth" : [ ]
        } ],
        "summary" : "Accept user custom challenge response (MFA, password change)",
        "tags" : [ "Authentication" ]
      },
      "summary" : "Token validation operations"
    }
  },
  "security" : [ {
    "AppAuth" : [ ]
  }, {
    "UserAuth" : [ ]
  } ],
  "servers" : [ {
    "description" : "Development Endpoint",
    "url" : "https://1tmq92jibd.execute-api.ca-central-1.amazonaws.com/dev",
    "variables" : { }
  } ],
  "tags" : [ {
    "description" : "Application operations in the system",
    "name" : "Application"
  }, {
    "description" : "Applications operations in the system",
    "name" : "Applications"
  }, {
    "description" : "Application access token operations in the system",
    "name" : "Access Token"
  }, {
    "description" : "Application access tokens operations in the system",
    "name" : "Access Tokens"
  }, {
    "description" : "Application role operations in the system",
    "name" : "Role"
  }, {
    "description" : "Application roles operations in the system",
    "name" : "Roles"
  }, {
    "description" : "User operations in the system",
    "name" : "User"
  }, {
    "description" : "Users operations in the system",
    "name" : "Users"
  }, {
    "description" : "User multi factor authentication operations in the system",
    "name" : "MFA"
  }, {
    "description" : "User password operations in the system",
    "name" : "Password"
  }, {
    "description" : "User data partition operations in the system",
    "name" : "Partition"
  }, {
    "description" : "User data partitions operations in the system",
    "name" : "Partitions"
  }, {
    "description" : "Partition access control list operations in the system",
    "name" : "Partition ACL"
  }, {
    "description" : "Partitions access control list operations in the system",
    "name" : "Partition ACLs"
  }, {
    "description" : "Registration related operation in the system",
    "name" : "Registration"
  }, {
    "description" : "Confirm registration related operations in the system",
    "name" : "Registration Confirmation"
  }, {
    "description" : "Authentication related operations in the system",
    "name" : "Authentication"
  } ]
}