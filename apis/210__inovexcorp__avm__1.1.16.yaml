openapi: 3.0.1
paths:
  '/catalogs/{catalogId}/records/{recordId}/versions':
    get:
      operationId: getVersions
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
        - name: ascending
          in: query
          schema:
            type: boolean
            default: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createVersion
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                title:
                  type: string
                description:
                  type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/catalogs/{catalogId}/records/{recordId}':
    get:
      operationId: getRecord
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateRecord
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteRecord
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /catalogs:
    get:
      operationId: getCatalogs
      parameters:
        - name: type
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}':
    get:
      operationId: getCatalog
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records':
    get:
      operationId: getRecords
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: ascending
          in: query
          schema:
            type: boolean
            default: true
        - name: searchText
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createRecord
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                title:
                  type: string
                identifier:
                  type: string
                description:
                  type: string
                markdown:
                  type: string
                keywords:
                  type: array
                  items:
                    $ref: '#/components/schemas/FormDataBodyPart'
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/catalogs/{catalogId}/records/{recordId}/distributions':
    get:
      operationId: getUnversionedDistributions
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
        - name: ascending
          in: query
          schema:
            type: boolean
            default: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createUnversionedDistribution
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                format:
                  type: string
                accessURL:
                  type: string
                downloadURL:
                  type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/catalogs/{catalogId}/records/{recordId}/distributions/{distributionId}':
    get:
      operationId: getUnversionedDistribution
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: distributionId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateUnversionedDistribution
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: distributionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: deleteUnversionedDistribution
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: distributionId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/tags':
    post:
      operationId: createTag
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                iri:
                  type: string
                commit:
                  type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/catalogs/{catalogId}/records/{recordId}/versions/latest':
    get:
      operationId: getLatestVersion
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/versions/{versionId}':
    get:
      operationId: getVersion
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateVersion
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteVersion
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/versions/{versionId}/distributions':
    get:
      operationId: getVersionedDistributions
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: versionId
          in: path
          required: true
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
        - name: ascending
          in: query
          schema:
            type: boolean
            default: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createVersionedDistribution
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: versionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                format:
                  type: string
                accessURL:
                  type: string
                downloadURL:
                  type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/catalogs/{catalogId}/records/{recordId}/versions/{versionId}/distributions/{distributionId}':
    get:
      operationId: getVersionedDistribution
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: versionId
          in: path
          required: true
          schema:
            type: string
        - name: distributionId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateVersionedDistribution
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: versionId
          in: path
          required: true
          schema:
            type: string
        - name: distributionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteVersionedDistribution
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: versionId
          in: path
          required: true
          schema:
            type: string
        - name: distributionId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/versions/{versionId}/commit':
    get:
      operationId: getVersionCommit
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: versionId
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/branches':
    get:
      operationId: getBranches
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
        - name: ascending
          in: query
          schema:
            type: boolean
            default: true
        - name: applyUserFilter
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createBranch
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                title:
                  type: string
                description:
                  type: string
                commitId:
                  type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/catalogs/{catalogId}/records/{recordId}/branches/master':
    get:
      operationId: getMasterBranch
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/branches/{branchId}':
    get:
      operationId: getBranch
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateBranch
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteBranch
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/branches/{branchId}/commits':
    get:
      operationId: getCommitChain
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
        - name: targetId
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createBranchCommit
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
        - name: message
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/catalogs/{catalogId}/records/{recordId}/branches/{branchId}/commits/{commitId}':
    get:
      operationId: getBranchCommit
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
        - name: commitId
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/branches/{branchId}/difference':
    get:
      operationId: getDifference
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
        - name: targetId
          in: query
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/catalogs/{catalogId}/records/{recordId}/branches/{branchId}/conflicts':
    get:
      operationId: getConflicts
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
        - name: targetId
          in: query
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/branches/{branchId}/commits/{commitId}/resource':
    get:
      operationId: downloadCompiledResource
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
        - name: commitId
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
        - name: applyInProgressCommit
          in: query
          schema:
            type: boolean
            default: false
        - name: fileName
          in: query
          schema:
            type: string
            default: resource
      responses:
        default:
          description: default response
          content:
            application/octet-stream: {}
            text/*: {}
            application/*: {}
  '/catalogs/{catalogId}/records/{recordId}/in-progress-commit':
    get:
      operationId: getInProgressCommit
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateInProgressCommit
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additions:
                  type: string
                deletions:
                  type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createInProgressCommit
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: deleteInProgressCommit
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /catalogs/record-types:
    get:
      operationId: getRecordTypes
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /catalogs/sort-options:
    get:
      operationId: getSortOptions
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/branches/{branchId}/commits/head':
    get:
      operationId: getHead
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/catalogs/{catalogId}/records/{recordId}/branches/{branchId}/conflicts/resolution':
    post:
      operationId: merge
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
        - name: targetId
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additions:
                  type: string
                deletions:
                  type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/commits/{sourceId}/difference':
    get:
      operationId: getDifference_1
      parameters:
        - name: sourceId
          in: path
          required: true
          schema:
            type: string
        - name: targetId
          in: query
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/commits/{commitId}/resource':
    get:
      operationId: getCompiledResource
      parameters:
        - name: commitId
          in: path
          required: true
          schema:
            type: string
        - name: entityId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/commits/{commitId}':
    get:
      operationId: getCommit
      parameters:
        - name: commitId
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/commits/{commitId}/history':
    get:
      operationId: getCommitHistory
      parameters:
        - name: commitId
          in: path
          required: true
          schema:
            type: string
        - name: targetId
          in: query
          schema:
            type: string
        - name: entityId
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/merge-requests/{requestId}/comments':
    get:
      operationId: getComments
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createComment
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: query
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  /merge-requests:
    get:
      operationId: getMergeRequests
      parameters:
        - name: sort
          in: query
          schema:
            type: string
        - name: ascending
          in: query
          schema:
            type: boolean
            default: false
        - name: accepted
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createMergeRequests
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                recordId:
                  type: string
                sourceBranchId:
                  type: string
                targetBranchId:
                  type: string
                assignees:
                  type: array
                  items:
                    $ref: '#/components/schemas/FormDataBodyPart'
                removeSource:
                  type: boolean
                  default: false
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/merge-requests/{requestId}':
    get:
      operationId: getMergeRequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateMergeRequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    post:
      operationId: acceptMergeRequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: deleteMergeRequest
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/merge-requests/{requestId}/comments/{commentId}':
    get:
      operationId: getComment
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: deleteComment
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /datasets:
    get:
      operationId: getDatasetRecords
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          schema:
            type: string
        - name: ascending
          in: query
          schema:
            type: boolean
            default: true
        - name: searchText
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createDatasetRecord
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                repositoryId:
                  type: string
                datasetIRI:
                  type: string
                description:
                  type: string
                markdown:
                  type: string
                keywords:
                  type: array
                  items:
                    $ref: '#/components/schemas/FormDataBodyPart'
                ontologies:
                  type: array
                  items:
                    $ref: '#/components/schemas/FormDataBodyPart'
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/datasets/{datasetRecordId}':
    get:
      operationId: getDatasetRecord
      parameters:
        - name: datasetRecordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteDatasetRecord
      parameters:
        - name: datasetRecordId
          in: path
          required: true
          schema:
            type: string
        - name: force
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/datasets/{datasetRecordId}/data':
    post:
      operationId: uploadData
      parameters:
        - name: datasetRecordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                file:
                  $ref: '#/components/schemas/FormDataContentDisposition'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: clearDatasetRecord
      parameters:
        - name: datasetRecordId
          in: path
          required: true
          schema:
            type: string
        - name: force
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/delimited-files/{documentName}':
    get:
      operationId: getRows
      parameters:
        - name: documentName
          in: path
          required: true
          schema:
            type: string
        - name: rowCount
          in: query
          schema:
            type: integer
            format: int32
            default: 10
        - name: separator
          in: query
          schema:
            type: string
            default: ','
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: upload
      parameters:
        - name: documentName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                delimitedFile:
                  type: object
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /delimited-files:
    post:
      operationId: upload_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                delimitedFile:
                  $ref: '#/components/schemas/FormDataContentDisposition'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/delimited-files/{documentName}/map':
    get:
      operationId: etlFile_1
      parameters:
        - name: documentName
          in: path
          required: true
          schema:
            type: string
        - name: mappingRecordIRI
          in: query
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
        - name: containsHeaders
          in: query
          schema:
            type: boolean
            default: true
        - name: separator
          in: query
          schema:
            type: string
            default: ','
        - name: fileName
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/octet-stream: {}
            text/*: {}
            application/*: {}
    post:
      operationId: etlFile
      parameters:
        - name: documentName
          in: path
          required: true
          schema:
            type: string
        - name: mappingRecordIRI
          in: query
          schema:
            type: string
        - name: datasetRecordIRI
          in: query
          schema:
            type: string
        - name: containsHeaders
          in: query
          schema:
            type: boolean
            default: true
        - name: separator
          in: query
          schema:
            type: string
            default: ','
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/delimited-files/{documentName}/map-preview':
    post:
      operationId: etlFilePreview
      parameters:
        - name: documentName
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
        - name: containsHeaders
          in: query
          schema:
            type: boolean
            default: true
        - name: separator
          in: query
          schema:
            type: string
            default: ','
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                jsonld:
                  type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  '/delimited-files/{documentName}/map-to-ontology':
    post:
      operationId: etlFileOntology
      parameters:
        - name: documentName
          in: path
          required: true
          schema:
            type: string
        - name: mappingRecordIRI
          in: query
          schema:
            type: string
        - name: ontologyRecordIRI
          in: query
          schema:
            type: string
        - name: branchIRI
          in: query
          schema:
            type: string
        - name: update
          in: query
          schema:
            type: boolean
            default: false
        - name: containsHeaders
          in: query
          schema:
            type: boolean
            default: true
        - name: separator
          in: query
          schema:
            type: string
            default: ','
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/mappings/{recordId}':
    get:
      operationId: getMapping
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteMapping
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /mappings:
    post:
      operationId: upload_2
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                markdown:
                  type: string
                keywords:
                  type: array
                  items:
                    $ref: '#/components/schemas/FormDataBodyPart'
                file:
                  $ref: '#/components/schemas/FormDataContentDisposition'
                jsonld:
                  type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /session:
    get:
      operationId: getCurrentUser
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: login
      parameters:
        - name: username
          in: query
          schema:
            type: string
        - name: password
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: logout
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /groups:
    get:
      operationId: getGroups
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createGroup
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/FormDataBodyPart'
                members:
                  type: array
                  items:
                    $ref: '#/components/schemas/FormDataBodyPart'
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/groups/{groupTitle}':
    get:
      operationId: getGroup
      parameters:
        - name: groupTitle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateGroup
      parameters:
        - name: groupTitle
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: deleteGroup
      parameters:
        - name: groupTitle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/groups/{groupTitle}/roles':
    get:
      operationId: getGroupRoles
      parameters:
        - name: groupTitle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: addGroupRoles
      parameters:
        - name: groupTitle
          in: path
          required: true
          schema:
            type: string
        - name: roles
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: removeGroupRole
      parameters:
        - name: groupTitle
          in: path
          required: true
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/groups/{groupTitle}/users':
    get:
      operationId: getGroupUsers
      parameters:
        - name: groupTitle
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: addGroupUser
      parameters:
        - name: groupTitle
          in: path
          required: true
          schema:
            type: string
        - name: users
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: removeGroupUser
      parameters:
        - name: groupTitle
          in: path
          required: true
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/users/{username}/roles':
    get:
      operationId: getUserRoles
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: includeGroups
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: addUserRoles
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: roles
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: removeUserRole
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /users:
    get:
      operationId: getUsers
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createUser
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/FormDataBodyPart'
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/users/{username}':
    get:
      operationId: getUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/users/{username}/password':
    put:
      operationId: resetPassword
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: newPassword
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    post:
      operationId: changePassword
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: currentPassword
          in: query
          schema:
            type: string
        - name: newPassword
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/users/{username}/groups':
    get:
      operationId: listUserGroups
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: addUserGroup
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: group
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: removeUserGroup
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: group
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /users/username:
    get:
      operationId: getUsername
      parameters:
        - name: iri
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/imported-ontologies/{url}':
    get:
      operationId: verifyUrl
      parameters:
        - name: url
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /ontologies:
    post:
      operationId: uploadOntologyJson
      parameters:
        - name: title
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: markdown
          in: query
          schema:
            type: string
        - name: keywords
          in: query
          schema:
            type: array
            items:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}':
    get:
      operationId: downloadOntologyFile
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: rdfFormat
          in: query
          schema:
            type: string
            default: jsonld
        - name: fileName
          in: query
          schema:
            type: string
            default: ontology
      responses:
        default:
          description: default response
          content:
            application/octet-stream: {}
            text/*: {}
            application/*: {}
    put:
      operationId: uploadChangesToOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: saveChangesToOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: entityId
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/ontologies/{recordId}/branches/{branchId}':
    delete:
      operationId: deleteOntologyBranch
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/ontologies/{recordId}/vocabulary-stuff':
    get:
      operationId: getVocabularyStuff
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/ontology-stuff':
    get:
      operationId: getOntologyStuff
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/iris':
    get:
      operationId: getIRIsInOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/annotations':
    get:
      operationId: getAnnotationsInOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: addAnnotationToOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/annotations/{annotationId}':
    delete:
      operationId: deleteAnnotationFromOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: annotationId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/classes':
    get:
      operationId: getClassesInOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: applyInProgressCommit
          in: query
          schema:
            type: boolean
            default: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: addClassToOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/classes/{classId}':
    delete:
      operationId: deleteClassFromOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: classId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/datatypes':
    get:
      operationId: getDatatypesInOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: addDatatypeToOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/datatypes/{datatypeId}':
    delete:
      operationId: deleteDatatypeFromOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: datatypeId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/object-properties':
    get:
      operationId: getObjectPropertiesInOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: addObjectPropertyToOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/object-properties/{objectPropertyId}':
    delete:
      operationId: deleteObjectPropertyFromOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: objectPropertyId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/data-properties':
    get:
      operationId: getDataPropertiesInOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: addDataPropertyToOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/data-properties/{dataPropertyId}':
    delete:
      operationId: deleteDataPropertyFromOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: dataPropertyId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/named-individuals':
    get:
      operationId: getNamedIndividualsInOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: addIndividualToOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/named-individuals/{individualId}':
    delete:
      operationId: deleteIndividualFromOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: individualId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/imported-iris':
    get:
      operationId: getIRIsInImportedOntologies
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/imported-ontology-iris':
    get:
      operationId: getImportedOntologyIRIs
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/imported-ontologies':
    get:
      operationId: getImportsClosure
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: rdfFormat
          in: query
          schema:
            type: string
            default: jsonld
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/imported-annotations':
    get:
      operationId: getAnnotationsInImportedOntologies
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/imported-classes':
    get:
      operationId: getClassesInImportedOntologies
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/imported-datatypes':
    get:
      operationId: getDatatypesInImportedOntologies
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/imported-object-properties':
    get:
      operationId: getObjectPropertiesInImportedOntologies
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/imported-data-properties':
    get:
      operationId: getDataPropertiesInImportedOntologies
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/imported-named-individuals':
    get:
      operationId: getNamedIndividualsInImportedOntologies
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/class-hierarchies':
    get:
      operationId: getOntologyClassHierarchy
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: nested
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/object-property-hierarchies':
    get:
      operationId: getOntologyObjectPropertyHierarchy
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: nested
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/data-property-hierarchies':
    get:
      operationId: getOntologyDataPropertyHierarchy
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: nested
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/annotation-property-hierarchies':
    get:
      operationId: getOntologyAnnotationPropertyHierarchy
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: nested
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/concept-hierarchies':
    get:
      operationId: getConceptHierarchy
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: nested
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/concept-scheme-hierarchies':
    get:
      operationId: getConceptSchemeHierarchy
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: nested
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/classes-with-individuals':
    get:
      operationId: getClassesWithIndividuals
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/entity-usages/{entityIri}':
    get:
      operationId: getEntityUsages
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: entityIri
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: queryType
          in: query
          schema:
            type: string
            default: select
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/search-results':
    get:
      operationId: getSearchResults
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: searchText
          in: query
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/failed-imports':
    get:
      operationId: getFailedImports
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  '/ontologies/{recordId}/query':
    get:
      operationId: queryOntology
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
        - name: query
          in: query
          schema:
            type: string
        - name: branchId
          in: query
          schema:
            type: string
        - name: commitId
          in: query
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            default: jsonld
        - name: includeImports
          in: query
          schema:
            type: boolean
            default: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /states:
    get:
      operationId: getStates
      parameters:
        - name: application
          in: query
          schema:
            type: string
        - name: subjects
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createState
      parameters:
        - name: application
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/states/{stateId}':
    get:
      operationId: getState
      parameters:
        - name: stateId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateState
      parameters:
        - name: stateId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    delete:
      operationId: deleteState
      parameters:
        - name: stateId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /provenance-data:
    get:
      operationId: getActivities
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 50
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /pep:
    post:
      operationId: evaluateRequest
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  /policies:
    get:
      operationId: getPolicies
      parameters:
        - name: relatedSubject
          in: query
          schema:
            type: string
        - name: relatedResource
          in: query
          schema:
            type: string
        - name: relatedAction
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: createPolicy
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  '/policies/{policyId}':
    get:
      operationId: retrievePolicy
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updatePolicy
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  '/record-permissions/{recordId}':
    get:
      operationId: retrieveRecordPolicy
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updateRecordPolicy
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /sparql:
    get:
      operationId: downloadQuery
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: dataset
          in: query
          schema:
            type: string
        - name: fileType
          in: query
          schema:
            type: string
        - name: fileName
          in: query
          schema:
            type: string
            default: results
      responses:
        default:
          description: default response
          content:
            application/octet-stream: {}
            text/*: {}
            application/*: {}
  /sparql/page:
    get:
      operationId: getPagedResults
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: dataset
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        default:
          description: default response
          content:
            application/json: {}
components:
  schemas:
    BodyPart:
      type: object
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          type: object
        headers:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            type:
              type: string
            subtype:
              type: string
            parameters:
              type: object
              additionalProperties:
                type: string
            wildcardType:
              type: boolean
            wildcardSubtype:
              type: boolean
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
        parameterizedHeaders:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
    ContentDisposition:
      type: object
      properties:
        type:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        fileName:
          type: string
        creationDate:
          type: string
          format: date-time
        modificationDate:
          type: string
          format: date-time
        readDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
    FormDataBodyPart:
      type: object
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          type: object
        headers:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            type:
              type: string
            subtype:
              type: string
            parameters:
              type: object
              additionalProperties:
                type: string
            wildcardType:
              type: boolean
            wildcardSubtype:
              type: boolean
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
        simple:
          type: boolean
        formDataContentDisposition:
          $ref: '#/components/schemas/FormDataContentDisposition'
        name:
          type: string
        value:
          type: string
        parameterizedHeaders:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
    FormDataContentDisposition:
      type: object
      properties:
        type:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        fileName:
          type: string
        creationDate:
          type: string
          format: date-time
        modificationDate:
          type: string
          format: date-time
        readDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
        name:
          type: string
    MessageBodyWorkers:
      type: object
    MultiPart:
      type: object
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          type: object
        headers:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            type:
              type: string
            subtype:
              type: string
            parameters:
              type: object
              additionalProperties:
                type: string
            wildcardType:
              type: boolean
            wildcardSubtype:
              type: boolean
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
        bodyParts:
          type: array
          items:
            $ref: '#/components/schemas/BodyPart'
        parameterizedHeaders:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
    ParameterizedHeader:
      type: object
      properties:
        value:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string