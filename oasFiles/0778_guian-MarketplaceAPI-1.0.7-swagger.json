{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/guian/MarketplaceAPI/1.0.7"
  } ],
  "info" : {
    "description" : "This is a simple API",
    "version" : "1.0.7",
    "title" : "Simple Inventory API",
    "contact" : {
      "email" : "you@your-company.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags" : [ {
    "name" : "product",
    "description" : "Everything about the products",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "http://swagger.io"
    }
  }, {
    "name" : "store",
    "description" : "Access to store orders"
  }, {
    "name" : "user",
    "description" : "Operations about user",
    "externalDocs" : {
      "description" : "Find out more about our store",
      "url" : "http://swagger.io"
    }
  }, {
    "name" : "catalog",
    "description" : "Everything you can get without authentication",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "http://yoursister.io"
    }
  } ],
  "paths" : {
    "/abstractitem" : {
      "get" : {
        "summary" : "limited list of products with search string",
        "operationId" : "listProducts",
        "tags" : [ "product" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "licence",
          "description" : "pass an optional licence id for looking up product",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "in" : "query",
          "name" : "category",
          "description" : "pass an optional category id for looking up product",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "in" : "query",
          "name" : "searchString",
          "description" : "pass an optional search string for looking up product",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "skip",
          "description" : "number of records to skip for pagination",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0
          }
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "maximum number of records to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0,
            "maximum" : 50
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AbstractItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "product" ],
        "summary" : "Add a new abstractItem to the database",
        "operationId" : "addAbstractItem",
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AbstractItem"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "product" ],
        "summary" : "Update an existing AbstractItem",
        "operationId" : "updateProduct",
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AbstractItem"
              }
            }
          }
        }
      }
    },
    "/abstractitem/{AbstractItemId}" : {
      "get" : {
        "tags" : [ "product" ],
        "summary" : "Find an item by ID",
        "description" : "Returns a single abstract item",
        "operationId" : "getAbstractItemById",
        "parameters" : [ {
          "name" : "AbstractItemId",
          "in" : "path",
          "description" : "ID of abstract item to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AbstractItem"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AbstractItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "product" ],
        "summary" : "Updates an item in the store with form data",
        "operationId" : "updateAbstractITemWithForm",
        "parameters" : [ {
          "name" : "AbstractItemId",
          "in" : "path",
          "description" : "ID of AbstractItem that needs to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:abstractitem", "read:abstractitem" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "description" : "Updated name of the product",
                    "type" : "string"
                  },
                  "status" : {
                    "description" : "Updated status of the product",
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "product" ],
        "summary" : "Deletes an abstract item",
        "operationId" : "deleteAbstractItem",
        "parameters" : [ {
          "name" : "AbstractItemId",
          "in" : "path",
          "description" : "abstract item id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:abstractitem", "read:abstractitem" ]
        } ]
      }
    },
    "/abstractitem/{AbstractItemId}/uploadImage" : {
      "post" : {
        "tags" : [ "product" ],
        "summary" : "uploads an image for an AbstractItem",
        "operationId" : "uploadFile",
        "parameters" : [ {
          "name" : "AbstractItemId",
          "in" : "path",
          "description" : "ID of item to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/octet-stream" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        }
      }
    },
    "/collectionitem" : {
      "get" : {
        "summary" : "list of CollectionItem for a given user",
        "operationId" : "listCollectionItems",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "user",
          "description" : "pass the user id to see his collection",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CollectionItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Create a CollectionItem",
        "operationId" : "createCollectionItem",
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:user", "read:user" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CollectionItem"
              }
            }
          }
        }
      }
    },
    "/collectionitem/{CollectionItemId}" : {
      "get" : {
        "summary" : "get a specific collection item by id",
        "operationId" : "getCollectionItem",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "CollectionItemId",
          "description" : "pass the requested item id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionItem"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Updates a CollectionItem item",
        "operationId" : "updateCollectionItem",
        "parameters" : [ {
          "name" : "CollectionItemId",
          "in" : "path",
          "description" : "ID of CollectionItem that needs to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:user", "read:user" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CollectionItem"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Deletes a CollectionItem",
        "operationId" : "deleteCollectionItem",
        "parameters" : [ {
          "name" : "CollectionItemId",
          "in" : "path",
          "description" : "CollectionItem id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:user", "read:user" ]
        } ]
      }
    },
    "/wishlistitem" : {
      "get" : {
        "summary" : "list of WishListItem for a given wishList",
        "operationId" : "listWishListItem",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "wishListId",
          "description" : "pass an optional wishListId for looking up items",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/WishListItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Create a WishListItem",
        "operationId" : "createWishListItem",
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:user", "read:user" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WishListItem"
              }
            }
          }
        }
      }
    },
    "/wishlistitem/{WishListItemId}" : {
      "get" : {
        "summary" : "get a specific wishlist item by id",
        "operationId" : "wishListItem",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "WishListItemId",
          "description" : "pass the requested item id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WishListItem"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "product" ],
        "summary" : "Updates a wishListItem item",
        "operationId" : "updateWishListItem",
        "parameters" : [ {
          "name" : "WishListItemId",
          "in" : "path",
          "description" : "ID of WishListItem that needs to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:user", "read:user" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WishListItem"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "product" ],
        "summary" : "Deletes an createWishList item",
        "operationId" : "deleteWishListItem",
        "parameters" : [ {
          "name" : "WishListItemId",
          "in" : "path",
          "description" : "wishlist item id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:user", "read:user" ]
        } ]
      }
    },
    "/wishlist" : {
      "get" : {
        "summary" : "get list of all whish lists for a given user",
        "operationId" : "getWishLists",
        "tags" : [ "user" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "username",
          "description" : "get wish list for the given user (or current logged in user)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "all wish lists for one user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/WishList"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "create new WishList",
        "operationId" : "createWishList",
        "tags" : [ "user" ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "example" : "MyNewWishlist"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "wishList created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/wishlist/{WishListId}" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Updates a wishList name",
        "operationId" : "updateWishList",
        "parameters" : [ {
          "name" : "WishListId",
          "in" : "path",
          "description" : "ID of WishListItem that needs to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:user", "read:user" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "name" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "product" ],
        "summary" : "Deletes an abstract item",
        "operationId" : "deleteWishList",
        "parameters" : [ {
          "name" : "WishListId",
          "in" : "path",
          "description" : "abstract item id to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:user", "read:user" ]
        } ]
      }
    },
    "/licence" : {
      "get" : {
        "summary" : "limited list of funko Licence",
        "operationId" : "getLicences",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "category",
          "description" : "pass an optional category for looking up licences",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "skip",
          "description" : "number of records to skip for pagination",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0
          }
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "maximum number of records to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0,
            "maximum" : 50
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Licence"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "catalog" ],
        "summary" : "Add a new Licence to the database",
        "operationId" : "addLicence",
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Licence"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Update an existing Licence",
        "operationId" : "updateLicence",
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Licence"
              }
            }
          }
        }
      }
    },
    "/category" : {
      "get" : {
        "summary" : "limited list of category",
        "operationId" : "list categories",
        "tags" : [ "catalog" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "skip",
          "description" : "number of records to skip for pagination",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0
          }
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "maximum number of records to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0,
            "maximum" : 50
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "catalog" ],
        "summary" : "Add a new Category to the database",
        "operationId" : "addCategory",
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Category"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "catalog" ],
        "summary" : "Update an existing category",
        "operationId" : "updateCategory",
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "item not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Category"
              }
            }
          }
        }
      }
    },
    "/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "description" : "Created user object",
          "required" : true
        }
      }
    },
    "/user/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "operationId" : "logoutUser",
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "operationId" : "getUserByName",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be updated",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "description" : "Updated user object",
          "required" : true
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/friend" : {
      "get" : {
        "summary" : "list all friends",
        "operationId" : "listFriends",
        "responses" : {
          "200" : {
            "description" : "all Friendship with any state",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "send a new friend request",
        "operationId" : "addFriend",
        "description" : "to validate a friendship, both friend have to \"addFriend(the other)\"",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The name of the new friend",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ]
      }
    },
    "/friend/{username}" : {
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete friendship",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "removeFriend",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The friend that needs to be removed",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid message ID supplied"
          },
          "404" : {
            "description" : "message not found"
          }
        }
      }
    },
    "/message" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "limited list of message",
        "description" : "get all message sent or received by the given user id order by date descending",
        "operationId" : "listMessages",
        "parameters" : [ {
          "in" : "query",
          "name" : "userId",
          "description" : "get all message sent or received by the given user id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "skip",
          "description" : "number of records to skip for pagination",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0
          }
        }, {
          "in" : "query",
          "name" : "limit",
          "description" : "maximum number of records to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0,
            "maximum" : 50
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "messages sent to given user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Message"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "send a new message to a user",
        "operationId" : "sendMessage",
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "to" : {
                    "type" : "string",
                    "example" : "Tommy"
                  },
                  "content" : {
                    "type" : "string",
                    "example" : "pas de pb"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Update an existing message",
        "operationId" : "updateMessage",
        "parameters" : [ {
          "name" : "messageId",
          "in" : "path",
          "description" : "The message that needs to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int(32)"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Message not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Message"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete messageId",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteMessage",
        "parameters" : [ {
          "name" : "messageId",
          "in" : "path",
          "description" : "The message that needs to be deleted",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid message ID supplied"
          },
          "404" : {
            "description" : "message not found"
          }
        }
      }
    },
    "/notification" : {
      "get" : {
        "summary" : "list of notification for the current user",
        "operationId" : "listNotification",
        "parameters" : [ {
          "in" : "query",
          "name" : "userId",
          "description" : "get all notification sent to the given user id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "notification sent to given user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Notification"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "delete all notifications for a user",
        "operationId" : "clearNotification",
        "parameters" : [ {
          "in" : "query",
          "name" : "userId",
          "description" : "get all notification sent to the given user id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:user", "read:user" ]
        } ]
      }
    },
    "/notification/{notificationId}" : {
      "post" : {
        "summary" : "Update an existing message",
        "operationId" : "setViewed",
        "parameters" : [ {
          "name" : "notificationId",
          "in" : "path",
          "description" : "set the notification viewed (isNew = false)",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int(32)"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Message not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "productstore_auth" : [ "write:products", "read:products" ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Message"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete notification",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteNotification",
        "parameters" : [ {
          "name" : "notificationId",
          "in" : "path",
          "description" : "The notification that needs to be deleted",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid message ID supplied"
          },
          "404" : {
            "description" : "message not found"
          }
        }
      }
    },
    "/task" : {
      "get" : {
        "summary" : "list of task for the current user",
        "operationId" : "listTasks",
        "parameters" : [ {
          "in" : "query",
          "name" : "userId",
          "description" : "get all tasks for the given user id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "task to be performed by the given user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Error" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "example" : 666
          },
          "message" : {
            "type" : "string",
            "format" : "Oops, something went very wrong"
          }
        }
      },
      "StateEnum" : {
        "type" : "integer",
        "enum" : [ 1, 2, 3, 4, 5 ]
      },
      "Category" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 12
          },
          "name" : {
            "type" : "string",
            "example" : "Super heroes"
          },
          "description" : {
            "type" : "string",
            "example" : "Dudes wearing underwear on top of tights having super powers making absolutely no sense at all. People seem to be loving that."
          },
          "logoUrl" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "Category"
        }
      },
      "Licence" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 42
          },
          "name" : {
            "type" : "string",
            "example" : "Game of Thrones"
          },
          "description" : {
            "type" : "string",
            "example" : "Game of Thrones is an American fantasy drama television series created by David Benioff and D. B. Weiss for HBO. It is an adaptation of A Song of Ice and Fire, George R. R. Martin's series of fantasy novels, the first of which is A Game of Thrones. The show was both produced and filmed in Belfast and elsewhere in the United Kingdom."
          },
          "logoUrl" : {
            "type" : "string",
            "format" : "uri",
            "example" : "https://www.placedespop.com/img/licences/thumbs/game-of-thrones-logo_0x80.png"
          },
          "categoryId" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 12
          }
        },
        "xml" : {
          "name" : "Licence"
        }
      },
      "AbstractItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 123456
          },
          "name" : {
            "type" : "string",
            "example" : "Spongebob Squarepants (Rainbow)"
          },
          "description" : {
            "type" : "string",
            "example" : "cute rainbow Squarepants"
          },
          "ref" : {
            "type" : "string",
            "example" : "13776-DZ-1U4"
          },
          "number" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 558
          },
          "url_img_box" : {
            "type" : "string",
            "format" : "uri",
            "example" : "https://www.funko.com/craftmin/products/49842_SpongebobSquarepants_SpongebobPride_POP_GLAM-1-WEB-903647dbe9af31a6878d2485de07bf22.png"
          },
          "url_img_nobox" : {
            "type" : "string",
            "format" : "uri",
            "example" : "https://www.funko.com/craftmin/products/49842_SpongebobSquarepants_SpongebobPride_POP_GLAM-WEB-fdd8d4ea40f3fbd2313e47e64b83011f.png"
          },
          "licenceId" : {
            "type" : "string",
            "example" : 42
          },
          "category" : {
            "type" : "string",
            "example" : 12
          },
          "limited_edition_size" : {
            "type" : "boolean",
            "example" : false
          },
          "weight" : {
            "type" : "number",
            "example" : 2.3
          },
          "size" : {
            "type" : "string",
            "example" : "other"
          },
          "firstprice" : {
            "type" : "number",
            "example" : 11.5
          },
          "firstprice_chase" : {
            "type" : "number",
            "example" : 13.4
          },
          "offer_quantity" : {
            "type" : "integer",
            "example" : 234
          },
          "offer_quatity_chase" : {
            "type" : "integer",
            "example" : 98
          }
        }
      },
      "Item" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 12326
          },
          "abstractItem" : {
            "$ref" : "#/components/schemas/AbstractItem"
          },
          "productionDate" : {
            "type" : "string",
            "format" : "date"
          },
          "specificDescription" : {
            "type" : "string",
            "example" : "wonderfull rainbow Spongebob, small scratch on the side"
          },
          "url_img_box" : {
            "type" : "string",
            "format" : "uri",
            "example" : "https://www.funko.com/craftmin/products/49842_SpongebobSquarepants_SpongebobPride_POP_GLAM-1-WEB-903647dbe9af31a6878d2485de07bf22.png"
          },
          "url_img_nobox" : {
            "type" : "string",
            "format" : "uri",
            "example" : "https://www.funko.com/craftmin/products/49842_SpongebobSquarepants_SpongebobPride_POP_GLAM-WEB-fdd8d4ea40f3fbd2313e47e64b83011f.png"
          },
          "isChase" : {
            "type" : "boolean"
          },
          "isCustom" : {
            "type" : "boolean"
          },
          "state" : {
            "$ref" : "#/components/schemas/StateEnum"
          },
          "boxState" : {
            "$ref" : "#/components/schemas/StateEnum"
          }
        }
      },
      "CollectionItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1234524
          },
          "Item" : {
            "$ref" : "#/components/schemas/Item"
          },
          "addedAt" : {
            "type" : "string",
            "format" : "date"
          },
          "purchasedAt" : {
            "type" : "string",
            "format" : "date"
          },
          "pricePurchase" : {
            "type" : "string",
            "example" : "8"
          }
        }
      },
      "WishListItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 12345664
          },
          "abstractItem" : {
            "$ref" : "#/components/schemas/AbstractItem"
          },
          "WishListId" : {
            "type" : "integer",
            "format" : "int(64)"
          },
          "addedAt" : {
            "type" : "string",
            "format" : "date"
          },
          "bounty" : {
            "type" : "number"
          },
          "maxPrice" : {
            "type" : "string",
            "example" : "8"
          },
          "mailNotif" : {
            "type" : "boolean",
            "example" : true
          },
          "state" : {
            "$ref" : "#/components/schemas/StateEnum"
          },
          "boxState" : {
            "$ref" : "#/components/schemas/StateEnum"
          },
          "chase" : {
            "type" : "integer",
            "example" : 2
          },
          "custom" : {
            "type" : "integer",
            "example" : 0
          },
          "quantity" : {
            "type" : "number",
            "example" : 1
          }
        }
      },
      "WishList" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 876
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1234
          },
          "name" : {
            "type" : "string",
            "example" : "ma super liste de Funko Marvel"
          },
          "isPrivate" : {
            "type" : "boolean"
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1234
          },
          "username" : {
            "type" : "string",
            "example" : "guian"
          },
          "firstName" : {
            "type" : "string",
            "example" : "guillaume"
          },
          "lastName" : {
            "type" : "string",
            "example" : "andouard"
          },
          "email" : {
            "type" : "string",
            "example" : "fakeemail@fake.com"
          },
          "password" : {
            "type" : "string",
            "example" : "R93IRC4D3R4CR2"
          },
          "seller_class" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 2
          },
          "user_role" : {
            "type" : "integer",
            "format" : "int32"
          },
          "address_1" : {
            "type" : "string",
            "example" : "232 rue de la rivière"
          },
          "address_2" : {
            "type" : "string",
            "example" : "Appartement C"
          },
          "city" : {
            "type" : "string",
            "example" : "Montpellier"
          },
          "zipcode" : {
            "type" : "string",
            "example" : 34000
          },
          "country" : {
            "type" : "string",
            "example" : "France"
          },
          "dob" : {
            "type" : "string",
            "example" : "01/12/1982"
          },
          "is_active" : {
            "type" : "boolean",
            "example" : true
          },
          "is_registered" : {
            "type" : "boolean",
            "example" : true
          },
          "send_mail_mp" : {
            "type" : "boolean",
            "example" : false
          }
        },
        "xml" : {
          "name" : "User"
        }
      },
      "Message" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 4321
          },
          "sender_id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1235
          },
          "sender_username" : {
            "type" : "string",
            "example" : "Mendosa"
          },
          "receiver_id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1234
          },
          "receiver_username" : {
            "type" : "string",
            "example" : "guian"
          },
          "sent_at" : {
            "type" : "string",
            "example" : "1976-04-19T12:59-0500"
          },
          "content" : {
            "type" : "string",
            "example" : "Salu, le prix c'est tro cher. possible baisser le prix stp merci"
          }
        }
      },
      "Notification" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 4321
          },
          "user_id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1234
          },
          "notifType" : {
            "type" : "integer",
            "format" : "int(32)",
            "example" : 3
          },
          "content" : {
            "type" : "string",
            "example" : "You just sold a bunch of crap"
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "example" : "20200323-14:56:23gmt+1"
          },
          "isNew" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "Task" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 4321
          },
          "user_id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1234
          },
          "transaction_id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 8765
          },
          "task_type" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 2
          }
        }
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    },
    "securitySchemes" : {
      "productstore_auth" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
            "scopes" : {
              "write:products" : "modify products in your account",
              "read:products" : "read your products"
            }
          }
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      }
    }
  }
}