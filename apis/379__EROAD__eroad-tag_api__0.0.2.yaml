openapi: 3.0.1
info:
  title: EROAD Where API
  description: 'EROAD Tag API allows customer to register, track and alert the EROAD
    tags '
  version: 0.0.2
servers:
- url: https://api.where.eroad.co.nz/
security:
- bearerAuth: []
  ApiKeyAuth: []
- BasicAuth: []
paths:
  /login:
    get:
      tags:
      - Auth
      description: Authenticate the user based on the given Auth header and return
        a JWT access token for API calls
      parameters:
      - name: Authorization
        in: header
        description: This endpoint requires HTTP Basic authentication with your username
          & password. You can do this manually by constructing a string in this {username}:{password},
          then encoding the string in Base64.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request is processed successfully and the list of filters is
            returned where
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Bad request. Incorrect criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /appdata:
    get:
      tags:
      - AppData
      description: Fetch the list of data types specified by the user. Max of 10 returned
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Maximum number of results to return
        schema:
          type: number
      - name: offset
        in: query
        description: Offset of the results to return
        schema:
          type: number
      - name: type
        in: query
        description: The type of data to return. Supported types currently are 'asset_type'
          and 'site_name'
        schema:
          type: string
      - name: search
        in: query
        description: The search string
        schema:
          type: string
      responses:
        200:
          description: Request is processed successfully and the list of filters is
            returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppData'
            application/xml:
              schema:
                $ref: '#/components/schemas/AppData'
        400:
          description: Bad request. Incorrect criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /filter:
    get:
      tags:
      - Filter
      description: Fetch the list of favorite filters for a given user. Only a max
        of 10 returned at any given point in time.
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request is processed successfully and the list of filters is
            returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/FilterResponse'
        400:
          description: Bad request. Incorrect criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      tags:
      - Filter
      description: Allows you to create a filter
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      requestBody:
        description: The Filter to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter'
          application/xml:
            schema:
              $ref: '#/components/schemas/Filter'
        required: true
      responses:
        201:
          description: Filter created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
            application/xml:
              schema:
                $ref: '#/components/schemas/Filter'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
  /filter/{id}:
    get:
      tags:
      - Filter
      description: Fetch a specific user by the given id
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
            application/xml:
              schema:
                $ref: '#/components/schemas/Filter'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      tags:
      - Filter
      description: Update the filter
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The filter object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter'
          application/xml:
            schema:
              $ref: '#/components/schemas/Filter'
        required: true
      responses:
        200:
          description: Request is processed successfully and updated filter is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
            application/xml:
              schema:
                $ref: '#/components/schemas/Filter'
        400:
          description: Bad request. Incorrect criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Filter
      description: Delete the given filter identified by id
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: Filter deleted successfully
          content: {}
  /filter/options:
    get:
      tags:
      - Filter
      description: Fetch the list of options for a given filter type. Only a max of
        10 options will be returned at any given time.
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: parent
        in: query
        description: The parent type of the filter. E.g. 'asset' or 'site'
        required: true
        schema:
          type: string
      - name: field
        in: query
        description: The field of the parent type. E.g. 'asset_type', 'job_code',
          'owner', 'cost_centre' etc..
        required: true
        schema:
          type: string
      - name: text
        in: query
        description: The text to search for. E.g. 'Customer', 'Internal Depot' etc..
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request is processed successfully and the list of options is
            returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterOption'
            application/xml:
              schema:
                $ref: '#/components/schemas/FilterOption'
        400:
          description: Bad request. Incorrect criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /sites:
    get:
      tags:
      - Site
      description: Allows you to retrieve the list of sites for given criteria. The
        full list is retrieved if criteria is not provided.
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: name
        in: query
        description: Name of the Site to search by.
        schema:
          type: string
      - name: filter[geofenceType]
        in: query
        description: Filter by geofence type. E.g. 'Customer Site', 'Internal Depot'
        schema:
          type: string
      - name: filter[assetType]
        in: query
        description: Filter by asset type. E.g. 'Cage', 'Container', 'Pallet'
        schema:
          type: string
      - name: sort_by
        in: query
        description: Comma separated string of fields to sort the results on. E.g.
          '+name,-customer,+geofenceType'. + indicates asc and - indicates desc
        schema:
          type: string
      - name: limit
        in: query
        description: Number of results to retrieve
        schema:
          type: integer
          default: 20
      - name: offset
        in: query
        description: The index of the first entry to retrieve
        schema:
          type: integer
          default: 0
      responses:
        200:
          description: Request is processed successfully and the list of sites is
            returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/SiteResponse'
        400:
          description: Bad request. Incorrect criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      tags:
      - Site
      description: Allows you to create a site.
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to authenticate the user
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      requestBody:
        description: The Site object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
          application/xml:
            schema:
              $ref: '#/components/schemas/Site'
        required: true
      responses:
        201:
          description: Site created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
            application/xml:
              schema:
                $ref: '#/components/schemas/Site'
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
  /search/sites:
    post:
      tags:
      - Search
      description: Search for sites
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      requestBody:
        description: The Filter to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteSearchRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/SiteSearchRequest'
        required: true
      responses:
        200:
          description: List of Sites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/SiteResponse'
        default:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
  /sites/{id}:
    get:
      tags:
      - Site
      description: Allows you to fetch a site by the given id
      parameters:
      - name: id
        in: path
        description: The id of the site to fetch
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Bearer token to authenticate the user
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request is processed successfully and the list of sites is
            returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
            application/xml:
              schema:
                $ref: '#/components/schemas/Site'
        400:
          description: Bad request. Incorrect criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      tags:
      - Site
      description: Allows you to update a site
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to authenticate the user
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The identifier of the site to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: The Site object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
          application/xml:
            schema:
              $ref: '#/components/schemas/Site'
        required: true
      responses:
        204:
          description: Site updated successfully
          content: {}
        400:
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
  /assets:
    get:
      tags:
      - Asset
      description: Allows you to retrieve the list of Assets for given criteria. The
        full list is retrieved if criteria is not provided.
      operationId: findAssets
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: sort
        in: query
        description: Field to sort the results on. For multiple fields, specify a
          comma separated string such as '+assetCode,-batteryLevel'
        schema:
          type: string
      - name: limit
        in: query
        description: Number of results to retrieve
        schema:
          type: integer
          default: 20
      - name: offset
        in: query
        description: The index of the first entry to retrieve.
        schema:
          type: integer
          default: 0
      responses:
        200:
          description: List of Assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AssetResponse'
        default:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      tags:
      - Asset
      description: Allows you to create a Asset. There are a few mandatory fields
        such as the assetId, assetAge, assetType and costCentre.
      operationId: addAsset
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to authenticate the user
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      requestBody:
        description: The Asset object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
          application/xml:
            schema:
              $ref: '#/components/schemas/Asset'
        required: true
      responses:
        201:
          description: Asset created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
            application/xml:
              schema:
                $ref: '#/components/schemas/Asset'
        400:
          description: "Validation errors. Error code:\n * 0: Generic Error \n * 1:\
            \ Invalid AssetType. Allowed values are Asset, TRAILER or ASSET \n * 2:\
            \ Missing mandatory field name, registrationPlate, make or axles for Asset\
            \ or TRAILER\n * 3: Invalid field name or assetType for ASSET\n * 4 Display\
            \ name or Registration Plate already exists\n * 5 Missing or invalid groups"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        default:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
  /search/assets:
    post:
      tags:
      - Search
      description: Search for assets
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      requestBody:
        description: The Filter to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetSearchRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AssetSearchRequest'
        required: true
      responses:
        200:
          description: List of Assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AssetResponse'
        default:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
  /search/sites/{id}/assets:
    post:
      tags:
      - Search
      description: Search for assets
      parameters:
      - name: id
        in: path
        description: ID of the sites to fetch the assets for
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Bearer token to check if the user is authorized to make this
          request
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      requestBody:
        description: The Filter to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetSearchRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AssetSearchRequest'
        required: true
      responses:
        200:
          description: List of Assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AssetResponse'
        default:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
  /assets/{id}:
    get:
      tags:
      - Asset
      description: Allows you to retrieve a Asset by identifier
      operationId: getAssetById
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to authenticate the user
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The identifier of the Asset to get
        required: true
        schema:
          type: string
      responses:
        200:
          description: Asset updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetWithLocationHistory'
            application/xml:
              schema:
                $ref: '#/components/schemas/AssetWithLocationHistory'
        404:
          description: Asset not found
          content: {}
        default:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      tags:
      - Asset
      description: Allows you to update a Asset
      operationId: updateAsset
      parameters:
      - name: Authorization
        in: header
        description: Bearer token to authenticate the user
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The identifier of the Asset to update
        required: true
        schema:
          type: string
      requestBody:
        description: The Asset to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetUpdate'
          application/xml:
            schema:
              $ref: '#/components/schemas/AssetUpdate'
        required: true
      responses:
        200:
          description: Asset updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
            application/xml:
              schema:
                $ref: '#/components/schemas/Asset'
        400:
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Asset not found
          content: {}
        default:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Asset
      description: Delete the asset identified by the given id. Dis-associates all
        tags associated with this asset
      parameters:
      - name: Authorization
        in: header
        description: Bearer token
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: Asset deleted successfully
          content: {}
  /assets/summary:
    get:
      tags:
      - Asset
      description: Get an overall summary of assets for all sites
      parameters:
      - name: Authorization
        in: header
        description: Bearer token
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      responses:
        200:
          description: Summary retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetQuantity'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetQuantity'
  /search/assets/summary:
    post:
      tags:
      - Search
      description: Get an overall summary of assets for all sites
      parameters:
      - name: Authorization
        in: header
        description: Bearer token
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      requestBody:
        description: The Filter to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter'
          application/xml:
            schema:
              $ref: '#/components/schemas/Filter'
        required: true
      responses:
        200:
          description: Summary retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetQuantity'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetQuantity'
      x-codegen-request-body-name: body
  /search/assetstate:
    post:
      tags:
      - Search
      description: Get the current state of the list of assets provided
      parameters:
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Bearer token
        required: true
        schema:
          type: string
      requestBody:
        description: The Filter to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter'
          application/xml:
            schema:
              $ref: '#/components/schemas/Filter'
        required: true
      responses:
        200:
          description: Summary retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetQuantity'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetQuantity'
      x-codegen-request-body-name: body
  /search/summary:
    post:
      tags:
      - Search
      description: Get an overall site & asset summary for the organization that the
        logged in user belongs to
      parameters:
      - name: Authorization
        in: header
        description: Bearer token
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      requestBody:
        description: The Filter to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter'
          application/xml:
            schema:
              $ref: '#/components/schemas/Filter'
        required: true
      responses:
        200:
          description: Summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientSummary'
            application/xml:
              schema:
                $ref: '#/components/schemas/ClientSummary'
      x-codegen-request-body-name: body
  /search/location/devices:
    post:
      tags:
      - Device
      description: Return the most recent location of the devices that belong to the
        organization of the logged in user. If no device IDs are passed in the payload,
        data will be returned for all devices. Max value supported for limit is 20.
        If the payload consists of more than 20 device IDs, the caller will have to
        make more than 1 call to get all the data they need
      parameters:
      - name: Authorization
        in: header
        description: Bearer token
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      requestBody:
        description: The Filter to be applied
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DeviceLocationRequest'
          application/xml:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DeviceLocationRequest'
        required: true
      responses:
        200:
          description: Device Locations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceLocationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/DeviceLocationResponse'
      x-codegen-request-body-name: body
  /sites/{id}/assets:
    get:
      tags:
      - Asset
      description: Allows you to retrieve the list of Assets in inventory for the
        given site.
      parameters:
      - name: Authorization
        in: header
        description: Bearer token
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: api key from the login call
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The identifer of the site
        required: true
        schema:
          type: string
      - name: assetTypes
        in: query
        description: Comma separated list of asset types to filter on. Empty list
          means all asset types will be returned
        schema:
          type: string
      - name: limit
        in: query
        description: Number of results to retrieve
        schema:
          type: integer
          default: 20
      - name: offset
        in: query
        description: The index of the first entry to retrieve.
        schema:
          type: integer
          default: 0
      responses:
        200:
          description: List of Assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetState'
            application/xml:
              schema:
                $ref: '#/components/schemas/AssetState'
        400:
          description: Bad request. Incorrect criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthenticated. The authorization token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Forbidden. Request is not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        429:
          description: Too many requests. Rate limits may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorModel'
components:
  schemas:
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
        tokenType:
          type: string
        refreshToken:
          type: string
    BillingReportResponse:
      type: object
      properties:
        totalCount:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        devices:
          type: array
          description: Contains a list of devices
          items:
            $ref: '#/components/schemas/DeviceBillingUsage'
    DeviceBillingUsage:
      type: object
      properties:
        deviceId:
          type: string
        lastPing:
          type: string
        location:
          type: string
    BillingReportRequest:
      type: object
      properties:
        billingRef:
          type: string
        sort:
          type: string
        limit:
          type: integer
        offset:
          type: integer
    BillingRef:
      type: object
      properties:
        billingRef:
          type: string
        month:
          type: string
        year:
          type: integer
    AssetLocation:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the Asset
          readOnly: true
        gpsFix:
          $ref: '#/components/schemas/GpsFix'
    Coordinate:
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
      description: WGS84 latitude and longitude for the site.
    GpsFix:
      type: object
      properties:
        timestamp:
          type: string
          description: UTC date and time of the transaction.
          format: date-time
        coordinate:
          $ref: '#/components/schemas/Coordinate'
        deviceType:
          type: string
          description: the type of device that picked up the ping.
        deviceId:
          type: string
          description: the UUID of device that picked up the ping.
        distance:
          type: integer
          description: distance to the device in meters
          format: int32
        batteryLevel:
          type: integer
          description: battery level as a percentage of the device
          format: int32
        SignalStrength:
          type: integer
          description: strength of the signal.
          format: int32
        engineMeasure:
          type: string
      description: Contains GPS fix data
    groupResponse:
      required:
      - count
      - offset
      - total
      type: object
      properties:
        count:
          type: integer
          description: The number of results retrieved.
        offset:
          type: integer
          description: The index of the first entry to retrieve.
        total:
          type: integer
          description: The total number of groups retrieved by the query.
        groups:
          type: array
          items:
            $ref: '#/components/schemas/group'
    AssetResponse:
      required:
      - count
      - offset
      - total
      type: object
      properties:
        count:
          type: integer
          description: The number of results retrieved.
        offset:
          type: integer
          description: The index of the first entry to retrieve.
        total:
          type: integer
          description: The total number of Assets retrieved by the query.
        Assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
    group:
      required:
      - name
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
    Tag:
      required:
      - deviceId
      type: object
      properties:
        id:
          type: string
          readOnly: true
        deviceId:
          type: string
        batteryLevel:
          type: number
    TagResponse:
      type: object
      properties:
        tag:
          $ref: '#/components/schemas/Tag'
        history:
          type: array
          items:
            $ref: '#/components/schemas/GpsFix'
    AssetState:
      required:
      - assetId
      type: object
      properties:
        id:
          type: string
          description: Required when updating an Asset
          readOnly: true
        assetId:
          type: string
        costCentre:
          type: string
        purchaseDate:
          type: string
        purchaseAmount:
          type: string
        notes:
          type: string
        assetAge:
          type: string
        AssetTypeCategory:
          type: string
        assetType:
          type: string
        lastUpdated:
          type: string
        lastLocation:
          type: string
        batteryLevel:
          type: string
    AssetWithLocationHistory:
      required:
      - assetId
      type: object
      properties:
        id:
          type: string
          description: Required when updating a Asset
          readOnly: true
        assetId:
          type: string
        assetType:
          type: string
        assetTypeId:
          type: number
        costCentre:
          type: string
        purchaseDate:
          type: string
        purchaseAmount:
          type: string
        notes:
          type: string
        assetAge:
          type: string
        AssetTypeCategory:
          type: string
          description: NZ IRD types
        lastUpdated:
          type: string
        lastLocation:
          type: string
        batteryLevel:
          type: number
        businessUnit:
          type: string
        jobCode:
          type: string
        owner:
          type: string
        assignedLocation:
          type: number
        internalTypeName:
          type: string
        coordinates:
          $ref: '#/components/schemas/Coordinate'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        locationHistory:
          type: array
          items:
            $ref: '#/components/schemas/AssetHistory'
    AssetHistory:
      type: object
      properties:
        timestamp:
          type: string
        description:
          type: string
    AssetUpdate:
      required:
      - assetId
      type: object
      properties:
        id:
          type: string
          description: Required when updating a Asset
          readOnly: true
        assetId:
          type: string
        name:
          type: string
        allowAssignedDeviceId:
          type: boolean
        assetType:
          type: string
        assetTypeId:
          type: number
        costCentre:
          type: string
        purchaseDate:
          type: string
        purchaseAmount:
          type: string
        notes:
          type: string
        assetAge:
          type: string
        AssetTypeCategory:
          type: string
          description: NZ IRD types
        lastUpdated:
          type: string
        lastLocation:
          type: string
        batteryLevel:
          type: number
        businessUnit:
          type: string
        jobCode:
          type: string
        owner:
          type: string
        assignedLocation:
          type: number
        internalTypeName:
          type: string
        devicesToAdd:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        devicesToRemove:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    AppData:
      type: object
      properties:
        id:
          type: string
          description: ID of the object
          readOnly: true
        name:
          type: string
          description: Name of the object
    Asset:
      required:
      - assetId
      type: object
      properties:
        id:
          type: string
          description: Required when updating a Asset
          readOnly: true
        assetId:
          type: string
        name:
          type: string
        allowAssignedDeviceId:
          type: boolean
        assetType:
          type: string
        assetTypeId:
          type: number
        costCentre:
          type: string
        purchaseDate:
          type: string
        purchaseAmount:
          type: string
        notes:
          type: string
        assetAge:
          type: string
        AssetTypeCategory:
          type: string
          description: NZ IRD types
        lastUpdated:
          type: string
        lastLocation:
          type: string
        batteryLevel:
          type: number
        businessUnit:
          type: string
        jobCode:
          type: string
        owner:
          type: string
        assignedLocation:
          type: number
        internalTypeName:
          type: string
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    ErrorModel:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    AssetQuantity:
      required:
      - quantity
      type: object
      properties:
        assetType:
          type: string
        quantity:
          type: integer
          format: int32
    Site:
      required:
      - name
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the Asset
          readOnly: true
        name:
          type: string
        customer:
          type: string
        geofenceTypeId:
          type: number
          description: 1 for Internal Depot, 2 for Customer Site
        geofenceType:
          type: number
        status:
          type: boolean
        businessAddress:
          type: string
        contactNumber:
          type: string
        notes:
          type: string
        businessUnit:
          type: string
        costCentre:
          type: string
        jobCode:
          type: string
        owner:
          type: string
        activeStartDate:
          type: string
        activeEndDate:
          type: string
        shape:
          type: string
          description: A WKT formatted string representing a polygon for a geofence.
            E.g. POLYGON((0 1, 1 2, 2 3, 3 4, 4 5, 0 1))
    SiteResponse:
      required:
      - count
      - offset
      - total
      type: object
      properties:
        count:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        sites:
          type: array
          items:
            $ref: '#/components/schemas/Site'
    Role:
      type: object
      properties:
        id:
          type: number
          description: Unique identifier for the role
        name:
          type: string
    User:
      required:
      - email
      - firstName
      - lastName
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        username:
          type: string
        phone:
          type: string
        role:
          $ref: '#/components/schemas/Role'
    UserProfile:
      type: object
      properties:
        s3PhotoUrl:
          type: string
    UserResponse:
      required:
      - count
      - offset
      - total
      type: object
      properties:
        count:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    FilterOption:
      type: object
      properties:
        data:
          type: array
          items:
            type: string
    FilterResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
    Filter:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the filter.
          readOnly: true
        name:
          type: string
          description: Name of the filter.
        status:
          type: string
          description: Status indicating whether the filter is currently applied or
            not
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterObj'
    FilterObj:
      type: object
      properties:
        parent:
          type: string
          description: Parent type of the field. E.g. 'asset' or 'site'
        field:
          type: string
          description: Field of the parent. E.g. 'assetType', 'jobCode' etc.
        operator:
          type: string
          description: Operation describing the field type. E.g. 'eq', 'lt', 'gt',
            'lte', 'gte'
        valueType:
          type: string
          description: Type of the value. E.g. List, Integer, Boolean, Date, DateRange
        data:
          type: array
          items:
            type: string
    SiteSearchRequest:
      type: object
      properties:
        search:
          type: string
          description: Field to search for. Compare on site name or customer
        sort:
          type: string
          description: Field to sort the results on. E.g. +site_name, -customer etc.
        limit:
          type: number
          description: Number of results to retrieve
        offset:
          type: number
          description: The index of the first entry to retrieve
        siteName:
          type: string
          description: Name of the site to filter on.
        customer:
          type: string
          description: Name of the customer to filter on.
        geofenceType:
          type: string
          description: Filter indicating if a particular geofence type results should
            only be returned. E.g. 'customer_site', 'internal_depot' or 'in_transit'
        showSiteName:
          type: boolean
          description: boolean indicating whether the field site_name should be returned
            in the results
        showCustomer:
          type: boolean
          description: boolean indicating whether the field customer should be returned
            in the results
        showGeofenceType:
          type: boolean
          description: boolean indicating whether the field geofence type should be
            returned in the results
        filter:
          $ref: '#/components/schemas/Filter'
    SiteSummary:
      type: object
      properties:
        id:
          type: number
          description: Unique identifier of the site
          readOnly: true
        name:
          type: string
          description: Name of the site
        geofence:
          type: string
          description: WKT Polygon String
        numberOfAssets:
          type: number
          description: Total number of assets at the site
    AssetSummary:
      type: object
      properties:
        id:
          type: number
          description: Unique identifier of the asset
          readOnly: true
        name:
          type: string
          description: Name of the asset
        assetType:
          type: string
          description: Name of the asset type
        coordinates:
          $ref: '#/components/schemas/Coordinate'
    ClientSummary:
      type: object
      properties:
        siteSummary:
          type: array
          items:
            $ref: '#/components/schemas/SiteSummary'
        assetSummary:
          type: array
          items:
            $ref: '#/components/schemas/AssetSummary'
    AssetSearchRequest:
      type: object
      properties:
        search:
          type: string
          description: Field to search for. Compare on asset id
        sort:
          type: string
          description: Field to sort the results on. E.g. +site_name, -customer etc.
        limit:
          type: number
          description: Number of results to retrieve
        offset:
          type: number
          description: The index of the first entry to retrieve
        siteName:
          type: string
          description: Name of the site to filter on
        customer:
          type: string
          description: Name of the customer to filter on
        geofenceType:
          type: string
          description: Filter indicating if a particular geofence type results should
            only be returned. E.g. 'customer_site', 'internal_depot' or 'in_transit'
        filter:
          $ref: '#/components/schemas/Filter'
    DeviceLocationRequest:
      type: object
      properties:
        offset:
          type: number
          description: The offset to start the results from
        limit:
          type: number
          description: The max number of results to return at once
        deviceIds:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    DeviceLocationResponse:
      type: object
      properties:
        offset:
          type: number
          description: The offset to start the results from
        limit:
          type: number
          description: The max number of results to return at once
        deviceLocations:
          type: array
          items:
            $ref: '#/components/schemas/DeviceLocation'
    Device:
      type: object
      properties:
        deviceId:
          type: string
          description: The ID of the device
    DeviceLocation:
      type: object
      properties:
        deviceId:
          type: string
          description: The ID of the device
        coordinates:
          $ref: '#/components/schemas/Coordinate'
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BasicAuth:
      type: http
      scheme: basic