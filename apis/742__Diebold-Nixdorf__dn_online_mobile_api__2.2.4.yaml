openapi: "3.0.1"

info:
  title: DN Online & Mobile API
  description: >-
    Public Online & Mobile API of Diebold Nixdorf to access the Transaction
    Middleware.
  version: 2.2.4
  contact:
    name: DN Online & Mobile API
    email: ronald.schmieder@dieboldnixdorf.com

tags:
- name: DN Online Mobile API
  description: >-
    Public Online Mobile API of Diebold Nixdorf to access the Transaction
    Middleware.
  externalDocs:
    description: Find out more
    url: 'http://dieboldnixdorf.com'

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'

servers:
- url: 'http://localhost:8080/trxsafe-webservice-c3-webapp/OM-API/v2'
- url: 'https://localhost:8080/trxsafe-webservice-c3-webapp/OM-API/v2'

paths:
  /getAccounts:
    get:
      tags: ["Account Information API"]
      summary: Get the account list of a consumer
      description: Retrieves a list of all accounts of a consumer
      operationId: getAccounts
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      - $ref: '#/components/parameters/bankCodeParam'
      responses:
        '200':
          $ref: '#/components/responses/getAccountsResponse'
        '303':
          $ref: '#/components/responses/authErrorResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /getAccountTypes:
    get:
      tags: ["Account Information API"]
      summary: Returns a list of supported account types
      description: >-
        Returns a list of supported account types.

          | Symbolic name              | Comment                                                        |
          |----------------------------|----------------------------------------------------------------|
          | NOT_SPECIFIED              | Default value for unknowaccounts.                              |
          | GIRO                       | Giro account.                                                  |
          | SAVINGS                    | Savings account. (ISO 8583; MC DE.54->10 / VISA DE.54->10).    |
          | SECURITIES_DEPOSIT         | Depot of securities (shares and so on).                        |
          | SAVINGS_SECURITIES_DEPOSIT | Savings securities.                                            |
          | GIRO_SECURITIES_DEPOSIT    | Giro securities.                                               |
          | FIXED_TERM_DEPOSIT         | Fixed term deposit.                                            |
          | CREDIT_CARD                | Credit card account. (ISO 8583; MC DE.54->30 / VISA DE.54->30).|
          | LOAN                       | An account that covers a credit and its balance and movements. |
          | MORTGAGE                   | Security for a loan.                                           |
          | FOREIGN_CURRENCY           | An account that holds money in a foreign curreny.              |
          | EXTERNAL                   | An account that represents an account of a foreign institution.|
          | CHECKING                   | Checking account. (ISO 8583; MC DE.54->20 / VISA DE.54->20)    |
          | UNIVERSAL                  | ISO 8583; VISA DE.54->40)                                      |
          | SPENDING_POWER             | ISO 8583; VISA DE.54->64)                                      |
          | FEE_COLLECTION_ACCOUNT     | used to collect fees                                           |
          | ATM                        | ATM                                                            |
          | VENDOR                     | Vendor                                                         |
          | SHAREHOLDER                | Shareholder                                                    |
          | GENERAL_LEDGER             | General ledger                                                 |
          | CASH_RESERVE               | Cash Reserve Line of Credit                                    |
          | LOAN_DENIAL                | Load denial                                                    |
          | LEASE                      | Lease                                                          |
          | CONSUMER_LOAN              | Consumer loan                                                  |
          | COMMERCIAL_LOAN            | Cemercial loan                                                 |
          | RETIREMENT_LOAN            | Retirement loan                                                |
          | EXTERNAL_LOAN              | External loan                                                  |
          | SHARE                      | Share                                                          |
          | INDIVIDUAL_RETIREMENT      | Individual Retirement Account(IRA)                             |

      operationId: getAccountTypes
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      - $ref: '#/components/parameters/bankCodeParam'
      responses:
        '200':
          $ref: '#/components/responses/getAccountTypesResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /checkAccount:
    get:
      tags: ["Account Information API"]
      summary: Check, if an account exist.
      description: The given account is checked, if it exists.
      operationId: checkAccount
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      - $ref: '#/components/parameters/accountNumberParam'
      - $ref: '#/components/parameters/bankCodeParam'
      - $ref: '#/components/parameters/accountTypeParam'
      responses:
        '200':
          $ref: '#/components/responses/checkAccountResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /getTransactions:
    get:
      tags: ["Account Information API"]
      summary: Returns all transactions of a given account.
      description: >-
        Get all transactions of a given account.<br> Regarding the parameter
        "endDate":
          * The optional end date for the transactions search.
          * At server side an offset in days is configured, which is used to calculate the time frame for the query.
            Example: endDate is set to the current date/today. At the server there is a configured offset of -10. Watch out: Minus 10!
            The timeframe will becalculated as: today - 10 (days).
          * If no endDate is given the current date is used instead.
      operationId: getTransactions
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      - $ref: '#/components/parameters/accountNumberParam'
      - $ref: '#/components/parameters/bankCodeParam'
      - $ref: '#/components/parameters/accountTypeParam'
      - name: endDate
        in: query
        description: >-
          The optional end date for the transactions search.

          At server side an offset in days is configured, which is used to
          calculate the time frame for the query.

          Example: endDate is set to the current date/today. At the server
          there is a configured offset of -10. Watch out: Minus 10!

          The timeframe will becalculated as: today - 10 (days).

          The date pattern is defined "YYYY-MM-DD", with YYYY as 4-digit year,
          MM as 2-digit month and DD as 2-digit day of month.

          An example of a valid date is: 2017-01-31

          If no endDate is given the current date is used instead.

          The parameter endDate is defined by date-time - RFC3339

          Please see: https://tools.ietf.org/html/rfc3339
        schema:
          type: string
          pattern: '([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'
      responses:
        '200':
          $ref: '#/components/responses/getTransactionsResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /getScheduledTransactions:
    get:
      summary: >-
        Returns an array of transactions for the given account, which are
        scheduled to be executed in the future.
      description: >-
        Get all transactions for the given account, which are scheduled to be
        executed in the future.
      operationId: getScheduledTransactions
      tags:
      - Account Information API
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      - $ref: '#/components/parameters/accountNumberParam'
      - $ref: '#/components/parameters/bankCodeParam'
      - $ref: '#/components/parameters/accountTypeParam'
      responses:
        '200':
          $ref: '#/components/responses/getScheduledTransactionsResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /getAccountDetails:
    get:
      summary: Returns detailed informations regarding a given account.
      description: Returns detailed informations regarding a given account.
      operationId: getAccountDetails
      tags:
      - Account Information API
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      - $ref: '#/components/parameters/accountNumberParam'
      - $ref: '#/components/parameters/bankCodeParam'
      - $ref: '#/components/parameters/accountTypeParam'
      responses:
        '200':
          $ref: '#/components/responses/getAccountDetailsResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /createTransfer:
    post:
      tags:
      - Account Transaction API
      summary: create a Cashtransfer
      description: >-
        Create a chash transfer request. Either from an account or to an
        account, depending on the sign of the amount
      operationId: createTransfer
      requestBody:
        $ref: '#/components/requestBodies/createTransferRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/createTransferResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /createDispute/{transactionId}:
    post:
      tags:
      - Account Transaction API
      summary: File a dispute
      description: >-
        File a dispute for the transaction with the given transactionId. An email with the textual content provided
        by the user is send to the bank authorities to handle the issue.
      operationId: createDispute
      parameters:
      - name: transactionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/createDisputeRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/createDisputeResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /getStandingOrders:
    get:
      tags:
      - Account Transaction API
      summary: Get a list of standing orders.
      description: Get a list of standing orders.
      operationId: getStandingOrders
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getStandingOrdersResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /createStandingOrder:
    post:
      tags:
      - Account Transaction API
      summary: Create a standing order transaction.
      description: Create a standing order transaction
      operationId: createStandingOrder
      requestBody:
        $ref: '#/components/requestBodies/standingOrderRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/createStandingOrderResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /updateStandingOrder/{referenceId}:
    post:
      tags:
      - Account Transaction API
      summary: Update an existing standing order/scheduled transaction.
      description: >-
        Update a standing order/scheduled transaction. The referenceId parameter
        contains the value to identify the standing order.
      operationId: updateStandingOrder
      parameters:
      - name: referenceId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/standingOrderRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/updateStandingOrderResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /deleteStandingOrder/{referenceId}:
    post:
      tags:
      - Account Transaction API
      summary: Delete an already created standing order.
      description: >-
        Delete a already created standing order.
      operationId: deleteStandingOrder
      parameters:
      - name: referenceId
        in: path
        required: true
        schema:
          type: string
          minLength: 1
          description: 'The transaction ID of the standing order to be deleted.'
          example: 46CAADAB-87D8-47B0-8B0B-4F46973EA2A3
      requestBody:
        $ref: '#/components/requestBodies/deleteStandingOrderRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/deleteStandingOrderResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /createCashout4Me:
    post:
      tags:
      - Prestaged Transaction API
      summary: Create a prestaged cash out for the consumer himself.
      description: >-
        Create a prestaged chash out transaction request. Attention: If a
        bankCode if given in the sourceAccount member of the request, it is
        checked, if the bankCode (aka routingCode) exists in the PC/E master
        data! To be precise: It is checked, if that bankCode (routingCode)
        exists in the master data table ROUTINGCODE. If so, the generated
        accessCode is assigend to the node assigned to this routingCode.
      operationId: createCashout4Me
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCashout4MeRequest'
        description: The prestaged  cash out request
        required: true
      responses:
        '200':
          $ref: '#/components/responses/createCashout4MeResponse'
        default:
          $ref: '#/components/responses/defaultResponse'


  /createCashout2You:
    post:
      tags:
      - Prestaged Transaction API
      summary: >-
        Create a prestaged cash out transaction for different person. Attention:
        If a bankCode is given in the sourceAccount member of the request, it is
        checked, if the bankCode (aka routingCode) exists in the PC/E master
        data! To be precise: It is checked that the bankCode (routingCode)
        exists in the master data table ROUTINGCODE. If so, the generated
        accessCode is assigend to the node assigned to this routingCode.
      description: Create a prestaged cash out transaction request.
      operationId: createCashout2You
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCashout2YouRequest'
        description: The prestaged  cash out request
        required: true
      responses:
        '200':
          $ref: '#/components/responses/createCashout2YouResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /createDeposit:
    post:
      tags:
      - Prestaged Transaction API
      summary: Create a prestaged cash in / deposit transaction for the consumer.
      description: >-
        Create a prestaged deposit transaction request.<br> __Attention__: If a
        bankCode if given in the targetAccount member of the request, it is
        checked, if the bankCode (aka routingCode) exists in the PC/E master
        data!<br> To be precise: It is checked, if that bankCode (routingCode)
        exists in the master data table ROUTINGCODE. If so, the generated
        accessCode is assigend to the node assigned to this routingCode.
        <br><br> __Handling of split desposit transactions__<br> If the request
        contains the member splitData, the prestaged desposit will be processed
        as a __*split deposit*__. <br>In case of  a __*split deposit*__, the
        request contains additionally user defined accounts and amounts in the
        following way:

        * The target account (*here account 76555001*) must have a particular
        split amount grater than or equal of the sum of all amounts in the
        splitData arra.

        * The splitData array contains the remaining deposits in the following
        way:
          * Any number of additional split amounts can be added (*see account 76555002 and 76555003*)
          * The amount of each element in the splitData array (*account 76555002 and 76555003*) are substracted from the amount of the target account.
          * The remaining value, in this case *$150.00*, will be booked to the target account (account 76555001)
          * In case of if any of the amounts are negative, an exception will be thrown.
          * In case the sum of all amounts in the splitData array is greater than the amount given in the targetAccount, an exception will be thrown.

        __Example:__

          {<BLOCKQUOTE>"consumerId": "46CAADAB-87D8-47B0-8B0A-4F46973EA2E8",
          "targetAccount": {<BLOCKQUOTE>
                "accountNumber": "76555001",
                "bankCode": "1203000",
                "accountType": "GIRO"</BLOCKQUOTE>},
              "amount": {<BLOCKQUOTE>"value": 1000.00,
                "currency": "USD"</BLOCKQUOTE>}
            "splitData":
            [<BLOCKQUOTE>{<BLOCKQUOTE>"account": {<BLOCKQUOTE>"accountNumber": "76555002",
                  "bankCode": "1203000",
                  "accountType": "SAVINGS"</BLOCKQUOTE>},
                "amount": {<BLOCKQUOTE>"value": 250.00,
                  "currency": "USD"</BLOCKQUOTE>}</BLOCKQUOTE>
              },
              {<BLOCKQUOTE>"account": {<BLOCKQUOTE>"accountNumber": "76555003",
                  "bankCode": "1203000",
                  "accountType": "MORTGAGE"</BLOCKQUOTE>},
                "amount": {<BLOCKQUOTE>"value": 600.00,
                  "currency": "USD"</BLOCKQUOTE>}</BLOCKQUOTE>}
            </BLOCKQUOTE>]
            </BLOCKQUOTE></BLOCKQUOTE>}
      operationId: createDeposit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createDepositRequest'
        description: The prestaged  deposit request
        required: true
      responses:
        '200':
          $ref: '#/components/responses/createDepositResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /createBranchDeposit:
    post:
      tags:
      - Prestaged Transaction API
      summary: >-
        Create a prestaged deposit transaction for the consumer, which can be
        performed in a branch.
      description: >-
        Create a branch based prestaged deposit transaction request. Attention:
        If a bankCode is given in the account member of the request, it is
        checked, if the bankCode (aka routingCode) exists in the PC/E master
        data! To be precise: It is checked, if that bankCode (routingCode)
        exists in the master data table ROUTINGCODE. If so, the generated
        accessCode is assigend to the node assigned to this routingCode.
      operationId: createBranchDeposit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createBranchDepositRequest'
        description: The prestaged  deposit request
        required: true
      responses:
        '200':
          $ref: '#/components/responses/createBranchDepositResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /deletePrestagedTransaction:
    post:
      tags:
      - Prestaged Transaction API
      summary: Delete an already created prestaged transaction.
      description: >-
        Delete a already created prestaged transaction. The transaction can be
        every kind of a prestaged transaction.
      operationId: deletePrestagedTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deletePrestagedTransactionRequest'
        description: The delete prestaged transaction request
        required: true
      responses:
        '200':
          $ref: '#/components/responses/deletePrestagedTransactionResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /getPrestagedTransactions:
    get:
      summary: Get the list of all prestaged transactions of a consumer.
      description: Retrieves a list of all prestaged transactions of a consumer.
      tags:
      - Prestaged Transaction API
      operationId: getPrestagedTransactions
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      - $ref: '#/components/parameters/accountNumberParam'
      - $ref: '#/components/parameters/bankCodeParam'
      - $ref: '#/components/parameters/accountTypeParam'
      responses:
        '200':
          $ref: '#/components/responses/getPrestagedTransactionsResponse'
        default:
          $ref: '#/components/responses/defaultResponse'


  /getLocations:
    post:
      tags:
      - Location API
      summary: get all locations
      description: Retrieve all locations of ATMs within a given radius
      operationId: getLocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getLocationsRequest'
        description: >-
          The latitude of the location. Format: DD.dddd. Range form -90.0000 to
          +90.0000
        required: true
      responses:
        '200':
          $ref: '#/components/responses/getLocationsResponse'
        default:
          $ref: '#/components/responses/defaultResponse'


  /getCreditors:
    get:
      summary: Get a list of system wide defined payees.
      description: >-
        Retrieves a list of payees.
        Just to make it clear once and for all, the workflow is as follows:
        First the mobile app calls 'getCreditors' to get a list of all system wide available creditors.
        This list is displayed to the customer, using the provided data (CreditorData), to enable the customer
        to choose the right one creditor.
        The customer selects the creditor from this list to whom he wishes to pay an invoice.
        The app uses the provided data from the response of the call "getCreditors" to show the customer (already)
        fields with which he can further limit the invoice to be paid if necessary.
        Thereafter the app calls 'getSinglePaymentOrderData' again with the 'creditorId' of the selected creditor
        and - if there was any input from the customer - a pre-filled object of SinglePaymentOrderRequestData.
        The server answers again with a SinglePaymentOrderResponseData object, which contains the PaymentOrderData,
        which was found in the servers database.
        The returned PaymentOrderData should uniquely identify a certain payment transaction of the customer.
        The mobile app presents the payment data to the customer and the customer fills in or
        corrects - any - missing transaction data/fields.
        Finally the app calls 'createTransfer' using the whole (entered or corrected) data for a transfer transaction.
      operationId: getCreditors
      tags:
      - Miscellaneous API
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      - $ref: '#/components/parameters/bankCodeParam'
      responses:
        '200':
          $ref: '#/components/responses/getCreditorsResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /getSinglePaymentOrderData/{paymentCode}:
    post:
      summary: Get the details of a system wide defined creditor as returned in the getCreditorsResponse of a getCreditors call.
      description: Retrieve creditor details.
      operationId: getSinglePaymentOrderData
      tags:
      - Miscellaneous API
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      - name: paymentCode
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SinglePaymentOrderRequestData'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/getSinglePaymentOrderDataResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /getPreferences:
    get:
      summary: Get a list of user defined parameters.
      description: Retrieves a list of parameters.
      operationId: getPreferences
      tags:
      - Miscellaneous API
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      - $ref: '#/components/parameters/panParam'
      - name: scope
        in: query
        required: false
        description: >-
          The 'scope' of the preferences. If the scope is not given, all
          preferences are returned without taking any certain scope into
          account.
        schema:
          type: string
          minLength: 1
          maxLength: 255
      responses:
        '200':
          $ref: '#/components/responses/getPreferencesResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /setPreferences:
    post:
      tags:
      - Miscellaneous API
      summary: >-
        Set a list of user defined parameters, which can be used to store any
        information.
      description: Set a list of parameters.
      operationId: setPreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setPreferencesRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/setPreferencesResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /getClientBranding:
    get:
      summary: Get the client branding file.
      description: Retrieves the base64 encoded client branding data.
      operationId: getClientBranding
      tags:
      - Miscellaneous API
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getClientBrandingResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /updateAccountNickName:
    post:
      tags:
      - Account Transaction API
      summary: update the account nickname
      description: update the account nickname
      operationId: updateAccountNickName
      requestBody:
        $ref: '#/components/requestBodies/updateAccountNickNameRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/updateAccountNickNameResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /getGenericTransactionOrders:
    get:
      summary: Get a list of generic transaction orders as defined by/in the TXM OCM.
      description: Retrieves a list generic transaction orders.
      operationId: getGenericTransactionOrders
      tags:
      - Miscellaneous API
      parameters:
      - $ref: '#/components/parameters/sessionTokenParam'
      - $ref: '#/components/parameters/consumerIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getGenericTransactionOrdersResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

  /performGenericTransactionOrder:
    post:
      tags:
      - Miscellaneous API
      summary: >-
        Set a list of user defined parameters, which can be used to store any
        information.
      description: Set a list of parameters.
      operationId: performGenericTransactionOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/performGenericTransactionOrderRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/performGenericTransactionOrderResponse'
        default:
          $ref: '#/components/responses/defaultResponse'

components:

  ##############
  # Security  #
  ##############
  securitySchemes:
    bearerAuth:            # security scheme: bearer authentication using the http authorization header
      type: http
      scheme: bearer

    oAuth2:                # plain, old OAuth2 flow
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        implicit:          # <---- OAuth2 flow (implicit)
          authorizationUrl: https://login.microsoftonline.com/52846f0f-bc96-4a36-939b-f4d04bb473a0/oauth2/v2.0/authorize
          scopes:
            https://graph.windows.net/.default: https://graph.windows.net/.default

    openId:                # security scheme: openID connect
      type: openIdConnect  # The id_token MUST be transmitted in the parameter sessionToken and the accessToken MUST BE transmitted in the http authorization header with scheme bearer
      openIdConnectUrl: https://login.microsoftonline.com/52846f0f-bc96-4a36-939b-f4d04bb473a0/v2.0/.well-known/openid-configuration

  ##############
  # PARAMETERS #
  ##############
  parameters:
    sessionTokenParam:
      name: sessionToken
      in: query
      description: >-
        A unique identifier of a consumer session (within an external system), which is required to validate the consumer session.
        The default implementation expects in the sessionToken parameter a valid openId Connect id_token.
        Moreover, the default implementation expects in the authorization header of the http request the 
        authorization schema "Bearer" followed by a valid openId Connect access token. 
      required: true
      schema:
        type: string

    consumerIdParam:
      name: consumerId
      in: query
      description: >-
        A unique identifier of a consumer (within an external system), which is
        required to identify the consumer.
            Maybe the consumerId is moreover/also used to authorize the consumer against an external system
      required: true
      schema:
        type: string
        minLength: 1

    panParam:
      name: pan
      in: query
      required: true
      description: >-
        The PAN of the card to get the preferences for.
      schema:
        type: string
        pattern: '^\d+$'
        format: PAN
        minLength: 13
        maxLength: 19
        example: "4761739028380180"

    accountNumberParam:
      name: accountNumber
      in: query
      required: true
      description: >
        The account number. The length varies greatly. In Europe defined by ISO
        13616/2007 See also:
        https://en.wikipedia.org/wiki/International_Bank_Account_Number
      schema:
        type: string
        minLength: 2
        maxLength: 32
        example: DE19123412341234123412

    bankCodeParam:
      name: bankCode
      in: query
      required: false
      description: |
        Contains the BIC (aka. bank identifier code)
          The BIC - also known as SWIFT-code - as defined by ISO 9362 is required in/for cross border transfers/transactions.
          Please see: https://en.wikipedia.org/wiki/ISO_9362
          This field can also be used to send/receive an ABA RTN (ABA routing transit number) or Canadian TN(Canadian transit number).
          See also: https://en.wikipedia.org/wiki/Routing_transit_number
      schema:
        type: string
        minLength: 8
        maxLength: 11

    accountTypeParam:
      name: accountType
      in: query
      required: true
      description: >
        The default account type is 820000 (NOT_SPECIFIED). Please see:
        /getAccountTypes for all possible values.
      schema:
        $ref: '#/components/schemas/AccountTypeEnum'

    bankIdTypeParam:
      name: bankIdType
      in: path
      description: >-
        Parameter that identifies the bankId type. Possible values:
        - ROUTINGNUMBER
        - SWIFTCODE
        - NAME
      required: true
      schema:
        $ref: '#/components/schemas/BankIdTypeEnum'

    bankIdParam:
      name: bankId
      in: path
      description: >-
        The bank identifier e.g.
      required: true
      schema:
        type: string

  requestBodies:
    createTransferRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createTransferRequest'
      description: The request body used for create transfer requests
      required: true

    createDisputeRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createDisputeRequest'
      description: The request body used for create dispute requests
      required: true

    standingOrderRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standingOrderRequest'
      description: The request body used for create/update standing order requests
      required: true

    deleteStandingOrderRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/deleteStandingOrderRequest'
      description: The request body used for delete standing order requests
      required: true

    updateAccountNickNameRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updateAccountNickNameRequest'
      description: The request body used for update account nickname requests
      required: true

  schemas:
    # TODO: sort schemas by matching categories 'enum', 'base type' (no refs), 'extended type' (refs)
    BankIdTypeEnum:
      type: string
      enum:
      - ROUTINGNUMBER
      - SWIFTCODE
      - NAME

    AccountNumber:
      description: >
        The account number. The length varies greatly. In Europe defined by
        ISO 13616/2007

        See also:

        https://en.wikipedia.org/wiki/International_Bank_Account_Number
      type: string
      minLength: 2
      maxLength: 32
      example: DE19123412341234123412

    AccountWarning:
      description: Warnings regarding the bank account of a user.
      type: object
      properties:
        effectiveDate:
          description: Date since the warning is active.
          type: string
          maxLength: 255
          example: 'Thu Nov 28 10:40:41 CET 2019'
        expirationDate:
          description: Date where the warning will expire.
          type: string
          maxLength: 255
          example: 'Thu Nov 28 10:40:41 CET 2019'
        warningCode:
          description: A warning code.
          type: string
          maxLength: 255
          example: 'A3056-XT'
        warningText:
          description: Warning description text.
          type: string
          maxLength: 255
          example: 'Too much money in the bank'
        category:
          description: The warning category
          type: string
          maxLength: 255
          example: 'SEVERE_WARNINGS'

    RoutingNumber:
      type: string
      pattern: '^[\d]+$'
      minLength: 9
      maxLength: 9

    SwiftCode:
      description: |
        Contains the BIC (aka. bank identifier code)
        The BIC - also known as SWIFT-code - as defined by ISO 9362 is required in/for cross border transfers/transactions.
        Please see: https://en.wikipedia.org/wiki/ISO_9362

        This field can also be used to send/receive an ABA RTN (ABA routing transit number) or Canadian TN (Canadian transit number).
        See also: https://en.wikipedia.org/wiki/Routing_transit_number
        The bank code is NOT required!
      type: string
      pattern: '^[A-Z0-9]+$'
      minLength: 8
      maxLength: 11

    Name:
      type: string
      minLength: 1
      maxLength: 255

    Error:
      type: object
      description: |
        The error property is optional.
        It is set only if an error has been detected.
      required:
      - code
      properties:
        code:
          description: An error code as outlined in the PC/E documentation.
          type: integer
          format: int32
          minimum: 0
          example: 850004
        message:
          description: 'An optional, additional message which describes the error.'
          type: string
          maxLength: 255
          example: >-
            Internal server error. A database connection could not be
            established.

    ResponseBase:
      type: object
      required:
      - success
      properties:
        success:
          description: |
            Returns True or False to indicate the success of the API call.
            The The error property is optional.
            It is set only if an error has been detected.
          type: boolean
          example: true
        error:
          $ref: '#/components/schemas/Error'

    Credentials:
      description: >-
        The Credentials contains the sessionToken and the consumerId used to
        identity and authorize the user session.
      type: object
      required:
      - sessionToken
      - consumerId
      properties:
        sessionToken:
          type: string
          description: >-
            A unique identifier of a consumer session (within an external
            system), which is required to validate the consumer session.
          example: 46CAADAB-87D8-47B0-8B0A-4F46973EA2E8
        consumerId:
          type: string
          minLength: 1
          description: >-
            A unique identifier of a consumer (within an external system), which
            is required to identify the consumer. Maybe the consumerId is
            moreover/also used to authorize the consumer against an external
            system.
          example: 46CAADAB-87D8-47B0-8B0A-4F46973EA2E8

    AdditionalCreditorFieldDescription:
      description: A key value pair to store/retrieve a key and a value as strings in a generic way. Used in some API calls/objects.
      type: object
      required:
      - fieldName
      - minFieldLength
      - maxFieldLength
      properties:
        fieldName:
          description: A unique key which identifies a certain value.
          type: string
          minimum: 1
          maximum: 255
          example: 'invoice number'
        minFieldLength:
          description: 'Conatains the minimum length of the input field.'
          type: integer
          example: 10
        maxFieldLength:
          description: 'Conatains the maximum length of the input field.'
          type: integer
          example: 55

    KeyValuePair:
      description: A key value pair to store/retrieve a key and a value as strings in a generic way. Used in some API calls/objects.
      type: object
      required:
      - key
      - value
      properties:
        key:
          description: A unique key which identifies a certain value.
          type: string
          minimum: 1
          maximum: 255
          example: this-is-a-sample-key
        value:
          description: >-
            The assigned value of the key. It contains a maximum of 1MB data.
            The data is <font color='red'>ALWAYS base64 encoded</font>
          type: string
          minLength: 0
          maxLength: 1048576
          example: this-is-a-sample-value

    Currency:
      description: |
        The currency code as defined by ISO 20022, ActiveCurrencyCode
        See also: https://en.wikipedia.org/wiki/ISO_4217
      type: string
      minLength: 3
      maxLength: 3
      pattern: '[A-Z]{3,3}'
      example: USD

    Amount:
      description: The basic type of an amount.
      type: object
      required:
      - value
      - currency
      properties:
        value:
          description: >-
            The amount value of the given currency. As defined by ISO 20022,
            CurrencyAndAmount.
          type: string
          pattern: '[0-9]{1,13}\.[0-9]{1,3}'
          minimum: 0
          example: 345.67
        currency:
          $ref: '#/components/schemas/Currency'

    TypedAmount:
      description: An enhanced type of amount carrying additional type data.
      allOf:
        - $ref: '#/components/schemas/Amount'
        - type: object
          properties:
            amounttype:
              type: string

    Date:
      type: string
      pattern: '([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'
      description: >
        The date pattern is defined "YYYY-MM-DD", with YYYY as 4-digit year, MM
        as 2-digit month and DD as 2-digit day of month.

        Date string as defined by date-time - RFC3339

        Please see: https://tools.ietf.org/html/rfc3339
      example: '2017-01-31'

    Time:
      type: string
      format: 'HH:mm:ssZ'
      description: >-
        A time as defined by date-time - RFC3339. Please see:
        https://tools.ietf.org/html/rfc3339
      example: '15:00:00.05Z'

    TimeStamp:
      type: string
      format: 'yyyy-MM-dd HH:mm:ssZ'
      description: >-
        A timestamp as defined by date-time - RFC3339. Please see:
        https://tools.ietf.org/html/rfc3339
      example: '2017-10-02T15:00:00.05Z'

    MsisdnString:
      type: string
      format: '^\+(?:[0-9]\x20?){6,14}[0-9]$'
      description: >-
        The numbers must start with a plus sign, followed by the country code and national number regarding ITU-T E.123 and ITU-T E.164
        Phone numbers cannot contain more than 15 digits. The shortest international phone numbers in use contain seven digits.

    TransactionComment:
      type: string
      minimum: 1
      maximum: 255
      description: >-
        A comment field to provide more context to the transaction
      example: 'A very important transaction'

    Recipient:
      type: string
      minimum: 1
      maximum: 255
      description: >-
        A field to provide more context about the transaction recipient
      example: 'Mr. Smith'

    MSISDN:
      type: object
      required:
      - MSISDN
      properties:
        MSISDN:
          $ref: '#/components/schemas/MsisdnString'

    MailAddressString:
      type: string
      format: '^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$'
      description: "A valid eMail addressas defined by RFC5322."

    MailAddress:
      type: object
      required:
      - MailAddress
      properties:
        MailAddress:
          $ref: '#/components/schemas/MailAddressString'

    WorkstationType:
      type: string
      enum:
      - TYPE_INVALID
      - TYPE_ATM
      - TYPE_STP
      - TYPE_SST
      - TYPE_POS
      - TYPE_CRS
      - TYPE_CCDM
      description: >
        The type of the device at the location, such as Automated Teller Machine
        (ATM), Self Service Terminal (SST), Statement Printer (SP)

          | Symbolic name | Comment                            |
          |---------------|------------------------------------|
          | TYPE_INVALID  | Invalid type information/Unknown   |
          | TYPE_ATM      | Automated Teller Machine (CashOut) |
          | TYPE_STP      | Statement printer                  |
          | TYPE_SST      | Self Service Terminal              |
          | TYPE_POS      | Point of Sales                     |
          | TYPE_CRS      | Cash Recycler (Cash in/Cash out)   |
          | TYPE_CCDM     | Check/Cash Deposit Module          |
          <br>
      example: TYPE_ATM

    WorkstationStatus:
      type: string
      enum:
      - UNKNOWN
      - OPEN_CONSUMER
      - OPEN_CONSUMER_WITH_RESTRICTIONS
      - GREEN_IT
      - CLOSE_CONSUMER
      description: >-
        The required current state of the the device(s) near to the given
        location, such as
          Online, Online with restrictions, ...
          If the array is empty, all states of devices are considered.

          | Symbolic name                    | Comment                                                                                              |
          |----------------------------------|------------------------------------------------------------------------------------------------------|
          | UNKNOWN                          | The device status is unknown or not one of the following states.                                     |
          | OPEN_CONSUMER                    | The device (e.g. the ATM) is ready to serve customers.                                               |
          | OPEN_CONSUMER_WITH_RESTRICTIONS  | The device is ready, but has (some) limitations, e.g. not all transactions are supported right now.  |
          | GREEN_IT                         | The device is in GeenIT mode.                                                 |
          | CLOSE_CONSUMER                   | The device is NOT ready to serve customers. However this does not seem to make sense.                 |
      example: OPEN_CONSUMER

    AccountTypeEnum:
      type: string
      enum:
      - NOT_SPECIFIED
      - GIRO
      - LOAN
      - SAVINGS
      - SECURITIES_DEPOSIT
      - SAVINGS_SECURITIES_DEPOSIT
      - GIRO_SECURITIES_DEPOSIT
      - FIXED_TERM_DEPOSIT
      - CREDIT_CARD
      - MORTGAGE
      - FOREIGN_CURRENCY
      - EXTERNAL
      - CHECKING
      - UNIVERSAL
      - SPENDING_POWER
      - FEE_COLLECTION_ACCOUNT
      - ATM
      - VENDOR
      - SHAREHOLDER
      - GENERAL_LEDGER
      - CASH_RESERVE
      - LOAN_DENIAL
      - LEASE
      - CONSUMER_LOAN
      - COMMERCIAL_LOAN
      - RETIREMENT_LOAN
      - EXTERNAL_LOAN
      - SHARE
      - INDIVIDUAL_RETIREMENT
      - CARD_PAN
      - HEALTH_SAVINGS
      - CREDIT
      - CREDIT_LINE
      - CERTIFIED_DEPOSIT
      - INSTALLMENT
      example: GIRO
      description: >-
        The default account type is 820000 (NOT_SPECIFIED). Please see:
        /getAccountTypes for all possible values.

    ShortAccountInfo:
      type: object
      required:
      - accountNumber
      - accountType
      properties:
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        bankCode:
          $ref: '#/components/schemas/SwiftCode'
        accountType:
          $ref: '#/components/schemas/AccountTypeEnum'

    AccountInfo:
      type: object
      required:
      - accountNumber
      - accountType
      properties:
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountTypeEnum'
        accountName:
          type: string
          maxLength: 255
          description: The account name which is displayed to the user.
          example: Personal Checking Account
        accountOwnerName:
          type: string
          maxLength: 255
          description: The name of the account owner.
          example: Betty Adams
        accountStatus:
          type: string
          maxLength: 255
          description: Status description of the account.
        accountOwnership:
          type: string
          maxLength: 255
          minLength: 1
          description: Ownership description of the account.
          example: Betty Adams
        accountWarnings:
          type: array
          items:
            $ref: '#/components/schemas/AccountWarning'
        accountCurrency:
          $ref: '#/components/schemas/Currency'
        amounts:
          type: array
          items:
            $ref: '#/components/schemas/TypedAmount'
        possibleTransactions:
          description: >-
            A list of possible transactions, which can be performed on this
            account.
          type: array
          items:
            type: string
            description: 'Transaction name'
          example: 'WITHDRAWAL,CASH_IN,LOAD_PREPAID'
        properties:
          description: >-
            A list of addtional account properties.
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'

    OmApiAccountRef:
      type: object
      required:
      - accountNumber
      - accountType
      properties:
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountTypeEnum'

    Address:
      type: object
      required:
      - street
      - streetno
      - city
      - zipcode
      properties:
        street:
          type: string
          maxLength: 255
          description: The name of the street.
          example: Mainstreet
        streetno:
          type: string
          maxLength: 255
          description: The street number of this address.
          example: '119'
        city:
          type: string
          maxLength: 255
          description: The name of the city.
          example: New York
        zipcode:
          type: string
          maxLength: 255
          description: The zip code of this city.
          example: NY 5467
        countrycode:
          type: string
          maxLength: 255
          description: |
            The ISO 3166 (alpha-3) country code of this address.
            See also: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
          example: USA

    AccountWithAmount:
      type: object
      required:
      - account
      - amount
      properties:
        account:
          $ref: '#/components/schemas/ShortAccountInfo'
        amount:
          $ref: '#/components/schemas/Amount'

    DenominationAlgorithm:
      type: object
      required:
      - algorithm
      properties:
        algorithm:
          type: string
          enum:
          - EVENLY_MIXED
          - HIGH_NOTES_PREFERED
          - LOW_NOTES_PREFERED
          description: >-
            The denomination algorithm determines the number and type of notes
            to be output at the ATM for that cashout transaction.

            | Symbolic name       |
            Comment
            |
            |---------------------|------------------------------------------------------------------------------------------------------|
            | EVENLY_MIXED        | The denomination mix is based on thresholds
            and the available cassettes. The amount is decreased by  |
            |                     | the highest possible note as long as the
            remaining amount is lower as the threshold for this note.   |
            |                     | This is to be continued with lower notes
            until the remaining amount is 0.                            | |
            HIGH_NOTES_PREFERED | As few notes as possible are extracted from
            the cash units, i.e. the cash units with notes of high   |
            |                     | value are
            preferred.
            | | LOW_NOTES_PREFERED  | Here the MANY_UNITS algorithm is used.
            However if one kind of denomination accumulate to more than   |
            |                     | 66% of the requested amount one of this
            notes is divided into lower denominations until the sum of   |
            |                     | values of that denomination is below 66% of
            the complete amount.                                     | <br>
          example: EVENLY_MIXED

    PaymentType:
      type: object
      required:
      - paymentType
      properties:
        paymentType:
          type: string
          enum:
          - LOAN
          - CREDIT_CARD
          - BILL
          - NOT_SPECIFIED
          description: >
            The payment type of a transfer transaction.

            | Symbolic name |
            Comment                                                        |
            |---------------|----------------------------------------------------------------|
            | NOT_SPECIFIED | The payment type has not been specified or is
            simply unknown.  | | LOAN          | Payment to Loan
            Account.                                       | | CREDIT_CARD   |
            Payment for Credit card.                                       |
              <br>
          example: LOAN

    PaymentSubType:
      type: object
      required:
      - paymentSubType
      properties:
        paymentSubType:
          type: string
          enum:
          - PRINCIPAL
          - REGULAR
          - PAYOFF
          - NOT_SPECIFIED
          description: >
            The payment sub type (especially for loan payment) of a transfer
            transaction.

            | Symbolic name |
            Comment                                                            |
            |---------------|--------------------------------------------------------------------|
            | NOT_SPECIFIED | The payment sub type has not been specified or is
            simply unknown.  | | REGULAR       | Payment sub type regular/common
            payment.                           | | PRINCIPAL     | Payment type
            sub type is PRINCIPAL.                                | |
            PAYOFF        | Paying Off the Loan
            Balance.                                       |
              <br>
          example: REGULAR

    GenericTransactionOrderField:
      type: object
      required:
      - fieldId
      - fieldOrderNo
      - active
      - textId
      properties:
        fieldId:
          type: string
          maxLength: 32
          description: 'A unique identifier (UUID) for a field in a generic transaction order. It should not be displayed to the customer but used to identifiy a certain field'
          example: '228A57E6-FCE9-47BC-B26A-7DD516A24959'
        fieldOrderNo:
          type: integer
          description: 'Defines order id of that field. Each field have a unique field order id. The mobile client or web view should arrange the fields according to their field numbers.'
          example: 1
        active:
          type: boolean
          description: Defines if the field is 'active'.
          example: true
        textId:
          type: string
          maxLength: 50
          description: Contains the text id, which is used to get the correct translatio out of the languageProperties of the  generic transaction order the field belongs to.
          example: "no_of_checkbooks"
        inputType:
          type: integer
          enum:
          - 1
          - 2
          - 3
          description: >-
            The input type of the input field as specified
            | Value | meaning       |
            |   1   | NUMERIC       |
            |   2   | ALPHA_NUMERIC |
            |   3   | OPTION        |
          example: 1
        selectOptions:
          type: string
          maxLength: 250
          description: >-
            'Contains the possible, selectable options of an options field as json object (array). This a value should only be used as long as the inputType is 3 (OPTION). The language specific value has to be picked up by the UI according the users UI language from the language properties of the generic order.'
          example: '["shipping_option_Home_address","shipping_option_Branch_pickup"]'

    GenericTransactionOrderRequestField:
      type: object
      required:
      - fieldId
      - fieldValue
      properties:
        fieldId:
          type: string
          maxLength: 32
          description: 'A unique identifier (UUID) for a field in a generic transaction order. It should not be displayed to the customer but used to identifiy a certain field'
          example: '228A57E6-FCE9-47BC-B26A-7DD516A24959'
        fieldValue:
          type: string
          maxLength: 255
          description: "Contains the (user input) value of that field. Allowed characters are: ^([\\s]*[a-zA-Z0-9]*[\\s_.'-ßöÖäÄüÜ$€?!:;@]?[,]?)*$"
          example: "1"

    GenericTransactionOrder:
      type: object
      required:
      - genericTransactionOrderId
      - genericTransactionOrderTypeId
      - shippingAddress
      - languageProperties
      - fields
      properties:
        genericTransactionOrderId:
          type: string
          maxLength: 32
          description: 'A unique identifier (UUID) for generic transaction order type. It should not be displayed to the customer but used to identifiy a certain generic transaction order type'
          example: '228A57E6-FCE9-47BC-B26A-7DD516A24959'
        genericTransactionOrderTypeId:
          type: string
          maxLength: 50
          description: 'A symbolic name for that generic transaction order type.'
          example: 'Checkbook'
        shippingAddress:
          type: string
          maxLength: 100
          description: 'The address where the result/outcome of that generic transaction order should be shipped to.'
          example: '26 Shelly Lane, Bella Vista, Arkansas, USA'
        languageProperties:
          type: string
          maxLength: 2000
          description: 'A JSON object, which contains the language properties.'
          example: '{"de":{"shipping_option_Home_address":"Postanschift","no_of_checks":"Anzahl Schecks pro Buch","shipping_option_Branch_pickup":"Filialabholung","Checkbook":"Scheck-Buch","no_of_checkbooks":"Anzahl Scheckbücher","shipping_option":"Versandoptionen"},"en":{"shipping_option_Home_address":"Home address","no_of_checks":"No of checks per book","shipping_option_Branch_pickup":"Branch pickup","Checkbook":"Checkbook","no_of_checkbooks":"No of checkbooks","shipping_option":"Shipping options"}}'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/GenericTransactionOrderField'
          description: The fields of that order type.

    CreditorData:
      type: object
      required:
      - paymentCode
      - paymentSubCode
      - paymentType
      - creditorId
      properties:
        paymentCode:
          type: string
          maxLength: 20
          description: 'A unique identifier for the payment code'
          example: '32435545'
        paymentSubCode:
          type: string
          maxLength: 20
          description: 'A unique identifier for the payment sub code'
          example: '32435545'
        decription:
          type: string
          maxLength: 255
          description: 'A description'
          example: 'A description of a creditor.'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        billerNetworkId:
          type: string
          maxLength: 20
          description: 'The biller network Id.'
          example: '32435545'
        institution:
          type: string
          maxLength: 40
          description: 'Institution of the creditor.'
          example: '32435545'
        partialPaymentsAllowed:
          type: boolean
          description: 'Is set to true, if partial payments are allowed for this creditor.'
          example: false
        active:
          type: boolean
          description: 'Is set to true, if this creditor is active/can be used.'
          example: true
        paymentGroup:
          type: string
          maxLength: 70
          description: 'The payment group of the creditor.'
          example: 'Payment group'
        creditorId:
          type: string
          maxLength: 255
          description: 'A unique identifier for the creditor'
          example: '32435545'
        additionalFields:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalCreditorFieldDescription'

    BankDetails:
      type: object
      properties:
        swiftCode:
          $ref: '#/components/schemas/SwiftCode'
        routingNumber:
          type: string
          maxLength: 9
          description: An ABA RTN as described here https://en.wikipedia.org/wiki/ABA_routing_transit_number
          example: 091000022
        bankName:
          type: string
          maxLength: 255
          description: The name of the bank the subsidiary belongs to.
          example: U.S. Bank
        subsidiaryName:
          type: string
          maxLength: 255
          description: The name of the subsidiary.
          example: International Money Transfer Department
        country:
          type: string
          maxLength: 255
          description: The country in which the subsidiary is located.
          example: United States
        city:
          type: string
          maxLength: 255
          description: The city in which the subsidiary is located.
          example: Minneapolis, MN
        subsidiaryAddress:
          type: string
          maxLength: 255
          description: The address of the subsidiary.
          example: 800 Nicollet Mall, Bc-Mn-H20i Minneapolis, Mn 55402

    SinglePaymentOrderRequestData:
      type: object
      properties:
        sourceAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        targetAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        requestedAmount:
          $ref: '#/components/schemas/Amount'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        paymentSubType:
          $ref: '#/components/schemas/PaymentSubType'
        usageText:
          type: string
          maxLength: 255
          description: 'The usage text message.'
          example: 'Invoice# 2273355A'
        senderName:
          type: string
          maxLength: 255
          description: 'The name of the sender.'
          example: 'A. Rich. Guy'
        receiverName:
          type: string
          maxLength: 255
          description: 'The name of the receiver.'
          example: 'A. Poor Guy'
        orderId:
          type: string
          maxLength: 255
          description: 'An optional field for an orderId or somethimg like that.'
          example: 'Order# 9832327A565'
        referenceNumber:
          type: string
          maxLength: 255
          description: 'An optional field for a reference number or somethimg like that.'
          example: 'Reference# 935546655'
        scheduledDate:
          $ref: '#/components/schemas/Date'

    SinglePaymentOrderResponseData:
      type: object
      properties:
        sourceAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        targetAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        requestedAmount:
          $ref: '#/components/schemas/Amount'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        paymentSubType:
          $ref: '#/components/schemas/PaymentSubType'
        usageText:
          type: string
          maxLength: 255
          description: 'The usage text message.'
          example: 'Invoice# 2273355A'
        senderName:
          type: string
          maxLength: 255
          description: 'The name of the sender.'
          example: 'A. Rich. Guy'
        receiverName:
          type: string
          maxLength: 255
          description: 'The name of the receiver.'
          example: 'A. Poor Guy'
        orderId:
          type: string
          maxLength: 255
          description: 'An optional field for an orderId or somethimg like that.'
          example: 'Order# 9832327A565'
        referenceNumber:
          type: string
          maxLength: 255
          description: 'An optional field for an reference num,ber or somethimg like that.'
          example: 'Reference# 935546655'
        scheduledDate:
          $ref: '#/components/schemas/Date'

    Location:
      type: object
      required:
      - locationId
      - status
      - latitude
      - longitude
      properties:
        locationId:
          type: string
          maxLength: 255
          description: 'A unique identifier for a ATM, Branch, ...'
          example: '32435545'
        type:
          $ref: '#/components/schemas/WorkstationType'
        status:
          $ref: '#/components/schemas/WorkstationStatus'
        address:
          $ref: '#/components/schemas/Address'
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          description: >-
            The latitude of the location. Format: DD.dddd. Range form -90.000000
            to +90.000000
          example: 51.367043
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          description: >-
            The longitude of the location. Format: DDD.dddd. Range form
            -180.000000 to +180.000000
          example: 12.481767
        supportedTransactions:
          type: array
          items:
            type: string
            enum:
            - WITHDRAWAL
            - DEPOSIT
            - CHECK_DEPOSIT
            - CHECK_CASHING
            - CASH_PAYMENT
            description: >
              The type of transactions supported by the machine. If the array is
              a subset of the request parameter requiredTransactions in the
              getLocationsRequest.

              | Symbolic name     |
              Comment                                                |
              |-------------------|--------------------------------------------------------|
              | WITHDRAWAL        | The machine supports a cash out
              transaction            | | DEPOSIT           | The machine
              supports a cash in transaction             | | CHECK_DEPOSIT     |
              The machine supports a check deposit transaction       | |
              CHECK_CASHING     | The machine supports a check cashing
              transaction       | | CASH_PAYMENT      | The machine supports a
              cash payment transaction        |
                <br>
            example: WITHDRAWAL

    Transaction:
      type: object
      required:
      - amount
      - transactionDate
      - transactionComments
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        sourceAccount:
          $ref: '#/components/schemas/OmApiAccountRef'
        beneficiaryAccount:
          $ref: '#/components/schemas/OmApiAccountRef'
        referenceId:
          type: string
          maxLength: 255
          description: 'The reference Id, if there is any aka. <b>primanota</b>'
          example: '87536789'
        transactionID:
          type: string
          maxLength: 255
          description: 'The transaction Id, if there is any.'
          example: '97536789'
        transactionDate:
          type: string
          pattern: '([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'
          description: >
            The date when the transaction was executed, if the transaction is
            part of a getTransactionsResponse.

            The date at which the transaction should be executed, if the
            transaction is part of the response to a
            getScheduledTransactionsRequest.

            The date pattern is defined "YYYY-MM-DD", with YYYY as 4-digit year,
            MM as 2-digit month and DD as 2-digit day of month.

            As defined by date-time - RFC3339

            Please see: https://tools.ietf.org/html/rfc3339

            An example of a valid date is: 2017-01-31
          example: '2017-01-31'
        transactionComments:
          type: string
          maxLength: 255
          example: Thanks for your credit.

    ScheduledTransaction:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        fromAccountNumber:
          $ref: '#/components/schemas/AccountNumber'
        fromAccountType:
          type: string
          maxLength: 255
          description: 'The source account type.'
        toAccountNumber:
          $ref: '#/components/schemas/AccountNumber'
        toAccountType:
          type: string
          maxLength: 255
          description: 'The beneficiary account type.'
        referenceId:
          type: string
          maxLength: 255
          description: 'The reference Id, if there is any aka. <b>primanota</b>'
          example: '87536789'
        transactionID:
          type: string
          maxLength: 255
          description: 'The transaction Id, if there is any.'
          example: '97536789'
        transactionType:
          type: string
          maxLength: 255
          description: 'The type of the transaction (Fiserv and Fiserv DNA only)'
        nextTransactionDate:
          type: string
          pattern: '([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'
          description: >
            The date at which the transaction should be executed.

            The date pattern is defined "YYYY-MM-DD", with YYYY as 4-digit year,
            MM as 2-digit month and DD as 2-digit day of month.

            As defined by date-time - RFC3339

            Please see: https://tools.ietf.org/html/rfc3339

            An example of a valid date is: 2017-01-31
          example: '2017-01-31'
        lastTransactionDate:
          type: string
          pattern: '([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'
          description: >
            The date at which the transaction was last executed.

            The date pattern is defined "YYYY-MM-DD", with YYYY as 4-digit year,
            MM as 2-digit month and DD as 2-digit day of month.

            As defined by date-time - RFC3339

            Please see: https://tools.ietf.org/html/rfc3339

            An example of a valid date is: 2017-01-31
          example: '2017-01-31'
        transactionComments:
          type: string
          maxLength: 255
          example: Thanks for your credit.
        frequency:
          type: string
          maxLength: 255

    StandingOrder:
      description: The StandingOrder model object
      type: object
      required:
      - orderId
      - amount
      - sourceAccount
      - beneficiaryAccount
      - receiverName
      - recurrenceType
      - startDate
      - endAfter
      properties:
        orderId:
          type: string
        amount:
          $ref: '#/components/schemas/Amount'
        sourceAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        beneficiaryAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        receiverName:
          type: string
          minLength: 1
          maxLength: 255
        transactionComment:
          type: string
          minLength: 1
          maxLength: 255
        recurrenceType:
          type: string
          enum:
          - DAILY
          - WEEKLY
          - MONTHLY
          - YEARLY
        firstExecutionDate:
          $ref: '#/components/schemas/Date'
        lastExecutionDate:
          $ref: '#/components/schemas/Date'
        lastExecutionState:
          type: string
        nextExecutionDate:
          $ref: '#/components/schemas/Date'
        endAfter:
          type: string
          description: >-
            This string can contain different values:<br> 1.) The parameter
            contains "NO_END". In this case the execution will happen as long as
            the standing order exists. Pay attention to the capitalization! 2.)
            The parameter contains a positive and integer number. The standing
            order is executed as often as defined by this positive, integer
            number in the parameter "endAfter". 3.) The parameter contains a
            values which matches a date with the pattern like
            '([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'. In this case
            the date defines the latest execution date.
          example: '1'

    CommonPrestagedTransactionInfo:
      type: object
      required:
      - transactionId
      - transactionType
      - amount
      - accessCode
      - dateValidFrom
      - dateValidTo
      - transactionState
      properties:
        transactionId:
          type: string
          minLength: 1
          description: The transaction ID of the newly created prestaged transaction.
          example: 5c2af6a642984309b4f094671824c730
        amount:
          $ref: '#/components/schemas/Amount'
        transactionType:
          type: string
          enum:
          - CASHOUT
          - DEPOSIT
          - BRANCH_DEPOSIT
          description: >
            The type of a prestaged transaction.

            | Symbolic name  | Comment                                                  |
            |----------------|----------------------------------------------------------|
            | CASHOUT        | It was a cashout (credit) transaction.                   |
            | DEPOSIT        | It was a cashin (debit/deposit) transaction.             |
            | BRANCH_DEPOSIT | It was a cashin (debit/deposit) transaction in a branch. |
              <br>
          example: CASHOUT, DEPOSIT or BRANCH_DEPOSIT
        accessCode:
          type: string
          minLength: 1
          description: The access code of the newly created prestaged transaction.
          example: 0815
        dateCreated:
          type: string
          format: 'yyyy-MM-dd HH:mm:ssZ'
          description: >-
            The date when the prestaged transaction was created. As defined by
            date-time - RFC3339. Please see: https://tools.ietf.org/html/rfc3339
          example: '2017-10-02T15:00:00.05Z'
        dateValidFrom:
          type: string
          format: 'yyyy-MM-dd HH:mm:ssZ'
          description: >-
            The date from which the prestaged transaction is valid. As defined
            by date-time - RFC3339. Please see:
            https://tools.ietf.org/html/rfc3339
          example: '2017-10-02T15:00:00.05Z'
        dateValidTo:
          type: string
          format: 'yyyy-MM-dd HH:mm:ssZ'
          description: >-
            The date until the prestaged transaction is valid. As defined by
            date-time - RFC3339. Please see: https://tools.ietf.org/html/rfc3339
          example: '2017-10-01T18:00:00.00Z'
        transactionState:
          type: string
          enum:
          - FAILED
          - CREATED
          - PENDING
          - PAYED
          - EXPIRED
          description: >
            The state of a prestaged transaction.

            | Symbolic name | Comment                                                                                            |
            |---------------|----------------------------------------------------------------------------------------------------|
            | FAILED        | The pending transaction failed for whatever reason, e.g. expired or so. It's a final state.        |
            | CREATED       | The pending transaction has been created. State will asynchronously change to PENDING immediately. |
            | PENDING       | The transaction is valid and pending.                                                              |
            | PAYED         | The transaction has been executed and is in a final state.                                         |
            | EXPIRED       | The transaction is expired. This is a final state too.                                             |

              <br>
          example: PENDING

    PrestagedCashoutTransactionInfo:
      allOf:
        - $ref: '#/components/schemas/CommonPrestagedTransactionInfo'
        - type: object
          required:
          - denominationAlgorithm
          properties:
            cardlessMode:
              type: string
              enum:
              - SELF
              - OTHER
              - MEANINGLESS
              description: >
                The type of a prestaged transaction.

                | Symbolic name | Comment                                                                              |
                |---------------|--------------------------------------------------------------------------------------|
                | SELF          | It was a cashout (credit) transaction for the customer himself.                      |
                | OTHER         | It was a cashout (credit) transaction for a different person. Not for the customer.  |
                | MEANINGLESS   | It wasn't a cashout (credit) transaction, so the the 'cardlessMode' is meaningless.  |
              example: SELF
            denominationAlgorithm:
              $ref: '#/components/schemas/DenominationAlgorithm'
            msisdn:
              $ref: '#/components/schemas/MsisdnString'
            mailAddress:
              $ref: '#/components/schemas/MailAddressString'
            transactionComment:
              $ref: '#/components/schemas/TransactionComment'
            recipient:
              $ref: '#/components/schemas/Recipient'

    PrestagedDepositTransactionInfo:
      allOf:
        - $ref: '#/components/schemas/CommonPrestagedTransactionInfo'
        - type: object
          properties:
            splitData:
              type: array
              items:
                $ref: '#/components/schemas/AccountWithAmount'
              description: >-
                If the request contains the member splitData, the prestaged cashin
                will be processed as a split cashin.

    PrestagedBranchDepositTransactionInfo:
      allOf:
        - $ref: '#/components/schemas/CommonPrestagedTransactionInfo'
        - type: object
          properties:
            description:
              type: string
              minLength: 0
              maxLength: 255
              description: "An optional description text, which is maybe set while performing a createBranchDeposit call."
            transferText:
              type: string
              minLength: 0
              maxLength: 255
              description: "An optional transfer text, which is maybe set while performing a createBranchDeposit call."

    ###########################################################################################################################
    #                                                                                                                         #
    #   Request objects                                                                                                       #
    #                                                                                                                         #
    ###########################################################################################################################
    createTransferRequest:
      type: object
      required:
      - credentials
      - amount
      - sourceAccount
      - beneficiaryAccount
      - receiverName
      description: >-
        If the beneficiaryAccount routing code is the same as the sourceAccount
        routing code, than a so called 'on-us' transaction will be made. If the
        routing codes are not the same than a so called 'non-on-us' transaction
        will be made.
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        amount:
          $ref: '#/components/schemas/Amount'
        sourceAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        beneficiaryAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        paymentSubType:
          $ref: '#/components/schemas/PaymentSubType'
        receiverName:
          type: string
          minLength: 1
          maxLength: 255
          description: The name of the receiver
          example: John D. Rockefeller
        transactionComments:
          type: string
          maxLength: 255
          example: Thanks for your credit.

    createDisputeRequest:
      type: object
      required:
      - credentials
      - dispute
      description: >-
        The createDisputeRequest contains all information necessary to file a dispute
        for a transaction in the users account.
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        dispute:
          type: string
          minLength: 1
          description: The dispute message sent to the bank
          example: I did not buy this!

    standingOrderRequest:
      type: object
      required:
      - createTransferRequest
      - recurrenceType
      - startDate
      - endAfter
      description: >-
        The createStandingOrderRequest contains additional to the parameters of
        a createTransferRequest some other data required to create a stnding
        order such as recurrence etc.<br> Regarding the parameter "startDate":
          * The date when the standing order transaction should be executed for the first time. *Attention*: The date must be at least one day in the future.
          * The parameter "recurrence" defines the next/further execution time(s).
      properties:
        createTransferRequest:
          $ref: '#/components/schemas/createTransferRequest'
        recurrenceType:
          type: string
          enum:
          - DAILY
          - WEEKLY
          - MONTHLY
          - YEARLY
          description: The recurrence of a standing order transaction.
          example: MONTHLY
        startDate:
          $ref: '#/components/schemas/Date'
        endAfter:
          type: string
          description: >-
            This string can contain different values:<br> 1.) The parameter
            contains "NO_END". In this case the execution will happen as long as
            the standing order exists. Pay attention to the capitalization! 2.)
            The parameter contains a positive and integer number. The standing
            order is executed as often as defined by this positive, integer
            number in the parameter "endAfter". 3.) The parameter conatins a
            values which matches a date with the pattern like
            '([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'. In this case
            the date defines the latest execution date.
          example: '1'

    createCashout4MeRequest:
      type: object
      required:
      - credentials
      - amount
      - sourceAccount
      - overdraftConfirmed
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        amount:
          $ref: '#/components/schemas/Amount'
        sourceAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        transactionComment:
          $ref: '#/components/schemas/TransactionComment'
        denominationAlgorithm:
          $ref: '#/components/schemas/DenominationAlgorithm'
        overdraftConfirmed:
          type: boolean
          description: >-
            Check for overdraft situation. If a  overdraft situation occurs a
            special error code is send back to the client to inform the client
            regarding this situation.
          example: true

    createCashout2YouRequest:
      type: object
      required:
      - credentials
      - amount
      - sourceAccount
      - destinationOfSecureCode
      - secureCode
      - overdraftConfirmed
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        amount:
          $ref: '#/components/schemas/Amount'
        sourceAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        transactionComment:
          $ref: '#/components/schemas/TransactionComment'
        recipient:
          $ref: '#/components/schemas/Recipient'
        destinationOfSecureCode:
          oneOf:
          - $ref: '#/components/schemas/MSISDN'
          - $ref: '#/components/schemas/MailAddress'
        secureCode:
          type: string
          minLength: 1
          pattern: '^\d+$'
          description: >-
            The secure code of the prestaged tranasction. This code must be
            transmitted from the sender to the receiver of the Cashout2You for
            authorization purpose, e.g. by a phone call or SMS.
          example: 0815
        denominationAlgorithm:
          $ref: '#/components/schemas/DenominationAlgorithm'
        overdraftConfirmed:
          type: boolean
          description: >-
            Check for overdraft situation. If a  overdraft situation occurs a
            special error code is send back to the client to inform the client
            regarding this situation.
          example: true

    createDepositRequest:
      type: object
      required:
      - credentials
      - targetAccount
      - amount
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        targetAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        amount:
          $ref: '#/components/schemas/Amount'
        splitData:
          type: array
          items:
            $ref: '#/components/schemas/AccountWithAmount'
          description: >-
            If the request contains the member splitData, the prestaged cashin
            will be processed as a split cashin.

    createBranchDepositRequest:
      type: object
      required:
      - credentials
      - targetAccount
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        targetAccount:
          $ref: '#/components/schemas/ShortAccountInfo'
        owner:
          type: string
          description: 'The owner of the account. '
          maxLength: 128
          example: Bill Gates
        description:
          type: string
          description: 'An optional description of the deposit request. '
          example: It is always nice to put more money to my account.
        transferText:
          type: string
          description: 'An optional text of the deposit request. '
          example: Money rules the world.

    deletePrestagedTransactionRequest:
      type: object
      required:
      - credentials
      - transactionId
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        transactionId:
          type: string
          minLength: 1
          description: 'The transaction ID of the prestaged transaction to be deleted.  '
          example: 46CAADAB-87D8-47B0-8B0B-4F46973EA2A3

    executePrestagedTransactionRequest:
      type: object
      required:
      - credentials
      - prestagedTransactionToken
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        prestagedTransactionToken:
          type: string
          description: An expiring token issued from the server
          example: 'dfe4295c7d35c9e246ef02fedc307846137c028af44ac0de8b4a585b5cbf134c'

    deleteStandingOrderRequest:
      type: object
      required:
      - credentials
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'

    setPreferencesRequest:
      type: object
      required:
      - credentials
      - PAN
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        PAN:
          type: string
          pattern: '^\d+$'
          format: PAN
          minLength: 13
          maxLength: 19
          description: >-
            The PAN of the card to get the preferences for.
          example: "4761739028380180"
        scope:
          type: string
          minLength: 1
          description: >-
            If given, the 'scope' will be used to set the given preferences. If
            the scope is not given, the default scope will be used.
          example: defaultInvoiceRecipient
        preferences:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'

    getLocationsRequest:
      type: object
      required:
      - latitude
      - longitude
      - radius
      - wkstStates
      - requiredTransactions
      properties:
        consumerId:
          type: string
          minLength: 1
          description: >-
            A unique identifier of a consumer (within an external system), which
            is optionally to identify the consumer. Maybe the consumerId is
            moreover/also used to authorize the consumer against an external
            system.
          example: 46CAADAB-87D8-47B0-8B0A-4F46973EA2E8
        latitude:
          type: number
          format: DD.dddd
          description: >-
            The latitude of the location. Format: DD.dddd. Range form -90.0000
            to +90.0000
          example: 51.367
        longitude:
          type: number
          format: DDD.dddd
          description: >-
            The longitude of the location. Format: DDD.dddd. Range form
            -180.0000 to +180.0000
          example: 12.4815
        radius:
          type: integer
          minimum: 0
          maximum: 1000
          description: The radius in kilometer to search for locations.
          example: 15
        wkstStates:
          type: array
          items:
            type: string
            enum:
            - OPEN_CONSUMER
            - OPEN_CONSUMER_WITH_RESTRICTIONS
            - GREEN_IT
            - CLOSE_CONSUMER
            description: >
              The required current state of the the device(s) near to the given
              location, such as Online, Online with restrictions, ... If the
              array is empty, OPEN_CONSUMER and OPEN_CONSUMER_WITH_RESTRICTIONS
              is set as default.

                | Symbolic name                    | Comment                                                                                              |
                |----------------------------------|------------------------------------------------------------------------------------------------------|
                | OPEN_CONSUMER                    | The device (e.g. the ATM) is ready to serve customers.                                               |
                | OPEN_CONSUMER_WITH_RESTRICTIONS  | The device is ready, but has (some) limitations, e.g. not all transactions are supported right now.  |
                | GREEN_IT                         | The device is in GeenIT mode.                                                                        |
                | CLOSE_CONSUMER                   | The device is NOT ready to serve customers. However, this does not seem to make sense.               |
              <br>
            example: OPEN_CONSUMER
        requiredTransactions:
          type: array
          items:
            type: string
            enum:
            - WITHDRAWAL
            - DEPOSIT
            - CHECK_DEPOSIT
            - CHECK_CASHING
            - CASH_PAYMENT
            description: >
              The type of transactions that must be supported by the machine. If
              the array is empty, WITHDRAWAL is used as default.

              | Symbolic name     |
              Comment                                                |
              |-------------------|--------------------------------------------------------|
              | WITHDRAWAL        | The machine supports a cash out
              transaction            | | DEPOSIT           | The machine
              supports a cash in transaction             | | CHECK_DEPOSIT     |
              The machine supports a check deposit transaction       | |
              CHECK_CASHING     | The machine supports a check cashing
              transaction       | | CASH_PAYMENT      | The machine supports a
              cash payment transaction        |
                <br>
            example: WITHDRAWAL

    updateAccountNickNameRequest:
      type: object
      required:
      - credentials
      - account
      - accountName
      description: ''
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        account:
          $ref: '#/components/schemas/ShortAccountInfo'
        accountName:
          type: string
          minLength: 1
          maxLength: 255
          description: The new name of the account
          example: FastCashAccount

    performGenericTransactionOrderRequest:
      type: object
      required:
      - credentials
      - genericTransactionOrderId
      - fields
      description: >-
        The value object providing the data needed to perfrom the generic transaction order with
        the given genericTransactionOrderId
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        genericTransactionOrderId:
          type: string
          maxLength: 32
          description: 'A unique identifier (UUID) for generic transaction order type. It should not be displayed to the customer but used to identifiy a certain generic transaction order type'
          example: '228A57E6-FCE9-47BC-B26A-7DD516A24959'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/GenericTransactionOrderRequestField'
          description: The fields of that generic order transaction.

    ###########################################################################################################################
    #                                                                                                                         #
    #   Response objects                                                                                                      #
    #                                                                                                                         #
    ###########################################################################################################################

    DeletePrestagedTransactionResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'

    GetCreditorsResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        creditors:
          type: array
          items:
            $ref: '#/components/schemas/CreditorData'

    GetSinglePaymentOrderDataResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        singlePaymentOrderData:
          $ref: '#/components/schemas/SinglePaymentOrderResponseData'

    GetPreferencesResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        preferences:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'

    GetClientBrandingResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        clientBranding:
          type: string
          minLength: 0
          description: >-
            The returned client branding data is <font color='red'>ALWAYS base64
            encoded</font>

    GetAccountsResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountInfo'

    GetAccountTypesResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountTypeEnum'
          example:
          - GIRO
          - SAVINGS
          - SECURITIES_DEPOSIT

    GetTransactionsResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'

    GetScheduledTransactionsResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/ScheduledTransaction'

    GetAccountDetailsResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        accountDetails:
          $ref: '#/components/schemas/AccountInfo'

    CreateCashout4MeResponse:
      type: object
      required:
      - responseStatus
      - prestagedTransactionInfo
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        prestagedTransactionInfo:
          $ref: '#/components/schemas/PrestagedCashoutTransactionInfo'
        lastScheduledTransactions:
          type: array
          items:
            $ref: '#/components/schemas/ScheduledTransaction'
#        lastPrestagedTransactions:
#          type: array
#          items:
#            $ref: '#/components/schemas/PrestagedCashout4MeTransactionInfo'

    CreateCashout2YouResponse:
      type: object
      required:
      - responseStatus
      - prestagedTransactionInfo
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        prestagedTransactionInfo:
          $ref: '#/components/schemas/PrestagedCashoutTransactionInfo'
        lastScheduledTransactions:
          type: array
          items:
            $ref: '#/components/schemas/ScheduledTransaction'
#        lastPrestagedTransactions:
#          type: array
#          items:
#            $ref: '#/components/schemas/PrestagedCashout2YouTransactionInfo'

    CreateDepositResponse:
      type: object
      required:
      - responseStatus
      - prestagedTransactionInfo
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        prestagedTransactionInfo:
          $ref: '#/components/schemas/PrestagedDepositTransactionInfo'

    CreateBranchDepositResponse:
      type: object
      required:
      - responseStatus
      - prestagedTransactionInfo
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        prestagedTransactionInfo:
          $ref: '#/components/schemas/PrestagedBranchDepositTransactionInfo'

    GetPrestagedTransactionsResponse:
      type: object
      required:
      - responseStatus
      - accountInfo
      - transactions
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        accountInfo:
          $ref: '#/components/schemas/ShortAccountInfo'
        transactions:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/PrestagedCashoutTransactionInfo'
            - $ref: '#/components/schemas/PrestagedDepositTransactionInfo'
            - $ref: '#/components/schemas/PrestagedBranchDepositTransactionInfo'

    executePrestagedTransactionResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'

    GetStandingOrdersResponse:
      type: object
      required:
      - responseStatus
      - standingOrders
      properties:
        standingOrders:
          type: array
          items:
            $ref: '#/components/schemas/StandingOrder'
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'

    CreateTransferResponse:
      type: object
      required:
      - responseStatus
      - referenceId
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        referenceId:
          type: string
          description: 'The unique identifier of the create transfer transaction. '
          example: 46CAADAB-87D8-47B0-8B0A-4F46973EA2E8

    GetGenericTransactionOrdersResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        genericTransactionOrders:
          type: array
          items:
            $ref: '#/components/schemas/GenericTransactionOrder'

    getBankDetailsResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        bankDetailsList:
          type: array
          items:
            $ref: '#/components/schemas/BankDetails'

    GetLocationsResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'

    CheckAccountResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'

    CreateDisputeResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'

    DeleteStandingOrderResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'

    PerformGenericTransactionOrderResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'

    SetPreferencesResponse:
      type: object
      required:
      - responseStatus
      properties:
        responseStatus:
          $ref: '#/components/schemas/ResponseBase'

  #############
  # Responses #
  #############
  responses:
    checkAccountResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckAccountResponse'

    createBranchDepositResponse:
      description: No further data are returned in case of a successful call.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateBranchDepositResponse'

    createCashout2YouResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCashout2YouResponse'

    createCashout4MeResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCashout4MeResponse'

    createDepositResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateDepositResponse'

    createDisputeResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateDisputeResponse'

    createStandingOrderResponse:
      description: No further data are returned in case of a successful call.
      content:
        application/json:
          schema:
            #TODO: Create separate response object
            $ref: '#/components/schemas/CreateTransferResponse'

    createTransferResponse:
      description: No further data are returned in case of a successful call.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTransferResponse'

    deletePrestagedTransactionResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeletePrestagedTransactionResponse'

    deleteStandingOrderResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteStandingOrderResponse'

    getAccountDetailsResponse:
      description: Returns numerous details regarding the given account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetAccountDetailsResponse'

    getAccountsResponse:
      description: Returns a list of accounts.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetAccountsResponse'

    getAccountTypesResponse:
      description: Returns a fixed list of available account types.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetAccountTypesResponse'

    getCreditorsResponse:
      description: OK. The list of pending prestaged transactions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCreditorsResponse'

    getClientBrandingResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetClientBrandingResponse'

    getGenericTransactionOrdersResponse:
      description: OK. The list of generic transaction orders.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetGenericTransactionOrdersResponse'

    getLocationsResponse:
      description: No further data are returned in case of a successful call.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetLocationsResponse'

    getPreferencesResponse:
      description: OK. The preferences key-value map.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetPreferencesResponse'

    getPrestagedTransactionsResponse:
      description: Returns a list of prestaged transactions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetPrestagedTransactionsResponse'

    getScheduledTransactionsResponse:
      description: >-
        Returns an array of transactions for the given account, which are
        scheduled to be executed in the future.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetScheduledTransactionsResponse'

    getSinglePaymentOrderDataResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetSinglePaymentOrderDataResponse'

    getStandingOrdersResponse:
      description: Returns a list of standing orders.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetStandingOrdersResponse'

    getTransactionsResponse:
      description: Returns an array of transactions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTransactionsResponse'

    performGenericTransactionOrderResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PerformGenericTransactionOrderResponse'

    setPreferencesResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SetPreferencesResponse'

    updateAccountNickNameResponse:
      description: Returns response status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseBase'

    updateStandingOrderResponse:
      description: No further data are returned in case of a successful call.
      content:
        application/json:
          schema:
            #TODO: Create separate response object
            $ref: '#/components/schemas/CreateTransferResponse'

    authErrorResponse:
      description: >-
        The authentication faild. A redirect URL is return where the client can get a new valid open ID Connect id_token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    defaultResponse:
      description: >-
        Unexpected error. Please see/inspect 'code' and 'message' properties
        of the error for more/detailed informations.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
- bearerAuth: []
- oAuth2: []
- openId: []