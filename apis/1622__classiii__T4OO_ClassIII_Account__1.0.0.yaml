openapi: 3.0.0
servers:
  - description: test server
    #url: http://api4desktop.classiii.io:3000/api/v1/translate/file-translate
    url: https://test.classiii.io/api/v1
info:
  description: アカウントAPIドキュメント
  version: "1.0.0"
  title: アカウントAPI
  contact:
    email: s-liu@rozetta.jp
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: account
    description: アカウントAPI
paths:
  /auth-code:
    post:
      tags:
        - account
      summary: 認証コード
      description: T-4OOのユーザーの情報により、認証コードを獲得、クライアント側でパスワードが暗号化される。このAPIが現段階では実装していない、MOCK　APIです、何を入力しても、固定値を返答する。
      requestBody:
        content:
          application/x-www-form-urlencod:
            schema:
              type: object
              properties:
                orgId:
                  type: string
                  description: 会社Id
                userId:
                  type: string
                  description: ユーザーId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthCode'
              example:  
                status: success
                data: {
                  id: d290f1ee-6c54-4b01-90e6-d701748f0851
                }
        '400':
          description: bad orgId or bad userId
  /authenticate:
    post:
      tags:
        - account
      summary: ユーザー情報認証
      description: >-
        T-4OOのユーザーの情報（会社Id、ユーザーId、暗号化されたパスワード,暗号化する方法はauth-codeでもらったCODEをKEYにして、RC4の暗号化する）で認証を行い、認証できたら、accessKeyとsecretKeyを発行する。accessKeyとsecretKeyは他のAPI用のAccessToeknの発行に利用される。このAPIが現段階では実装していない、MOCK　APIです、何を入力しても、固定値を返答する。
      requestBody:
        content:
          application/x-www-form-urlencod:
            schema:
              type: object
              properties:
                orgId:
                  type: string
                  description: 会社Id
                userId:
                  type: string
                  description: ユーザーId
                password:
                  type: string
                  description: パスワード 
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                status: success
                data: {
                  accessKey: 8c76e418-9842-455b-aac1-5be28e8e4e94,
                  secretKey: d290f1ee-6c54-4b01-90e6-d701748f0851
                }
        '400':
          description: bad orgId or bad userId
components:
  schemas:
    PayloadData:
      type: object
      nullable: true
      oneOf:
        - $ref: '#/components/schemas/AuthCode'
        - $ref: '#/components/schemas/Authentication'
      example: {"accessKey":"d290f1ee-6c54-4b01-90e6-d701748f0851","secretKey":"8c76e418-9842-455b-aac1-5be28e8e4e94"}
    Result:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          $ref: '#/components/schemas/PayloadData'
      xml:
        name: Order
    AuthCode:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
      xml:
        name: AuthCode
    Authentication:
      type: object
      properties:
        accessKey:
          type: string
          format: uuid
          example: 8c76e418-9842-455b-aac1-5be28e8e4e94
        secretKey:
          type: string
          format: uuid
          example: efffb72b-b2c5-458f-8388-42b2627e2c82
      xml:
        name: Authentication
