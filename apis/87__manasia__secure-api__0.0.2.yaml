openapi: 3.0.0
info:
  title: Secure API
  description: API for Sysdig Secure
  version: "0.0.2"
# the domain of the service
servers:
  - url: https://secure.sysdig.com
tags:
  - $ref: "api/audit/audit.yaml#/components/tags/audit"
paths:
  /settings/falco/tags:
    get:
      summary: Get falco rule tags
      description: Get all tags defined in the combined user + system rules files.
      tags:
        - FalcoRules
      responses:
        200:
          description: The set of tags
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoRulesTags"
  /settings/falco/ruleNames:
    get:
      summary: Get falco rule names
      description: Get the names of all rules defined in the combined user + system rules files.
      tags:
        - FalcoRules
      responses:
        200:
          description: The set of rule names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoRulesNames"
  /settings/falco/userRulesFile:
    get:
      summary: Get the user rules falco content.
      description: |
        Get the current user rules (called custom rules in the UI) falco content.
      tags:
        - FalcoRules
      responses:
        200:
          description: The user rules content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFalcoRulesContent"
    put:
      summary: Set the user rules falco content.
      description: >-
        Set the current user rules (called custom rules in the UI)
        falco content. This content is always validated by passing the
        current system rules file plus the current user rules file to
        the open source falco executable to verify that falco can read
        the combination of files. As knowing the current value of the
        `version` field is required to successfully update the rules
        file, in order to update the rules content you must first do a
        GET and update the `content` property. The `version` property
        in the response will be incremented on success.
      tags:
        - FalcoRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserFalcoRulesContent"
      responses:
        200:
          description: The user rules content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFalcoRulesContent"
        400:
          description: The provided falco rules content was not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoRulesError"
  /settings/falco/systemRulesFile:
    get:
      summary: Get the system rules falco content.
      description: |
        Get the current system rules (called default rules in the UI) falco content.
      tags:
        - FalcoRules
      responses:
        200:
          description: The system rules content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemFalcoRulesContent"
    put:
      summary: Set the system rules falco content.
      description: >-
        Set the current system rules (called default rules in the UI)
        falco content. In SaaS deployments this endpoint requires
        super-user privileges. In on-premise deployments, it can be
        used by users that can set the user rules file. See
        userRulesFile for details on validation and versioning.
      tags:
        - FalcoRules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SystemFalcoRulesContent"
      responses:
        200:
          description: The system rules content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemFalcoRulesContent"
        400:
          description: The provided falco rules content was not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoRulesError"
  /settings/falco/customRulesFiles:
    get:
      summary: Get the custom falco rules files.
      description: |
        Get the custom falco rules files e.g. the set of falco rules managed by a customer.
      tags:
        - FalcoRulesFiles
      responses:
        200:
          description: The custom falco rules files.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomFalcoRulesFiles"

    put:
      summary: Set the custom rules files e.g. the set of falco rules managed by a customer.
      description: >-
        Set the current custom falco rules files. This
        content is always validated by passing the current default
        rules files plus the submitted customer rules files and
        any Secure UI generated rules to the open source falco executable
        to verify that falco can read the combination of
        files. The backend should choose the variant that has the
        greatest required_engine_version for each file, and then run
        open source falco with the -d option to verify the files. As
        knowing the current value of the `version` field is required
        to successfully update the rules file, in order to update the
        rules content you must first do a GET and update the `content`
        property. The `version` property in the response will be
        incremented on success.
      tags:
        - FalcoRulesFiles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomFalcoRulesFiles"
      responses:
        200:
          description: The custom falco rules files
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomFalcoRulesFiles"
        400:
          description: The provided falco rules content was not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoRulesError"
  /settings/falco/defaultRulesFiles:
    get:
      summary: Get the default falco rules files.
      description: |
        Get the default falco rules files e.g. the set of falco rules managed by sysdig.
      tags:
        - FalcoRulesFiles
      responses:
        200:
          description: The default falco rules files.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultFalcoRulesFiles"

    put:
      summary: Set the default rules files e.g. the set of falco rules managed by Sysdig.
      description: >-
        Set the current default falco rules files e.g. set of falco
        rules managed by sysdig. In SaaS deployments this endpoint
        requires super-user privileges. In on-premise deployments, it
        can be used by users that can set the custom rules files. This
        content is always validated by passing the current default
        rules files plus the current user rules file (see
        /settings/falco/userRulesFile) to the open source falco
        executable to verify that falco can read the combination of
        files. The backend should choose the variant that has the
        greatest required_engine_version for each file, and then run
        open source falco with the -d option to verify the files. As
        knowing the current value of the `version` field is required
        to successfully update the rules file, in order to update the
        rules content you must first do a GET and update the `content`
        property. The `version` property in the response will be
        incremented on success.
      tags:
        - FalcoRulesFiles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefaultFalcoRulesFiles"
      responses:
        200:
          description: The default falco rules files
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultFalcoRulesFiles"
        400:
          description: The provided falco rules content was not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoRulesError"
  /settings/falco/newestDefaultRulesFiles:
    get:
      summary: Get the newest default falco rules files.
      description: |
        Get the newest default falco rules files e.g. the set of falco rules managed by sysdig.
      tags:
        - FalcoRulesFiles
      responses:
        200:
          description: The newest falco rules files.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewestDefaultFalcoRulesFiles"
  /policies:
    get:
      summary: Retrieve security policies
      description: |
        Returns information about policies configured by the current customer sorted by priority. Policies which are not in the priority list are added at the end of the list.
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: number
            format: integer
        - name: limit
          in: query
          required: false
          schema:
            type: number
            format: integer
        - name: filter
          in: query
          description: string to look for in policy names/descriptions
          required: false
          schema:
            type: string
        - name: severity
          in: query
          description: filter for severity. It can either be a single number or an array of numbers.
          required: false
          schema:
            type: string
            format: json
      tags:
        - Policies
      responses:
        200:
          description: An array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Policy"
    post:
      summary: Create a new security policy
      description: |
        Save a new security policy, but do not add it to the priority list yet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
      tags:
        - Policies
      responses:
        200:
          description: The saved policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        400:
          description: The provided policy is not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyError"

  /policies/deleteAll:
    post:
      summary: Delete all policies of a customer
      description: Delete all policies of a customer and remove them from the priority list.
      tags:
        - Policies
      responses:
        200:
          description: All policies deleted
  /policies/createDefault:
    post:
      summary: Create default policies for the current customer.
      tags:
        - Policies
      description: This will create both falco default policies and other Sysdig-defined policies. Policies created by this API will be "builtin".
      responses:
        200:
          description: The created default policies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Policy"
  /policies/{policyId}:
    get:
      summary: Retrieve info about a single policy
      parameters:
        - name: "policyId"
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Policies
      responses:
        200:
          description: The policy with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
    put:
      summary: Update info associated with a policy
      description: The "builtin" flag of the policy is not changed. The version is incremented when the update is successful.
      parameters:
        - name: "policyId"
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Policies
      responses:
        200:
          description: The policy with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        400:
          description: The provided policy is not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyError"
    delete:
      summary: Delete a policy
      parameters:
        - name: "policyId"
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Policies
      responses:
        200:
          description: The policy that was just deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
  /policies/priorities:
    get:
      summary: Return the list of policyIds sorted by priority.
      description: Firsts in the list are the one with higher priority. The list can contain both enabled and disabled policies, but elements not in the list are always disabled.
      tags:
        - Policies
        - Priorities
      responses:
        200:
          description: Policies with priority
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Priorities"
    put:
      summary: Change the priorities of the policies.
      description: Assign a new priority to one or multiple policies.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Priorities"
      tags:
        - Policies
        - Priorities
      responses:
        200:
          description: Policies with updated priority
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Priorities"
  /secure/rules:
    post:
      summary: Create a new rule
      description: |
        Save a new rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuntimePolicyRule"
      tags:
        - Rules
        - PoliciesV2
      responses:
        200:
          description: The saved rule
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuntimePolicyRule"
        400:
          description: The provided rule is not valid
          content:
            text/plain:
              schema:
                type: string
  /secure/rules/{ruleId}:
    get:
      summary: Retrieve info about a single rule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Rules
        - PoliciesV2
      responses:
        200:
          description: The rule with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuntimePolicyRule"
    put:
      summary: Update info associated with a rule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuntimePolicyRule"
      tags:
        - Rules
        - PoliciesV2
      responses:
        200:
          description: The rule with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuntimePolicyRule"
        400:
          description: The provided rule is not valid
          content:
            text/plain:
              schema:
                type: string
    delete:
      summary: Delete a rule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Rules
        - PoliciesV2
      responses:
        200:
          description: The rule that was deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuntimePolicyRule"
  /secure/rules/summaries:
    get:
      summary: Retrieve a list of summary rule information, grouped by rule name.
      description: |
        Returns the list of rules in the system. These are grouped by name and do not necessarily represent individual rule objects, as multiple rules can have the same name.
      tags:
        - Rules
        - PoliciesV2
      responses:
        200:
          description: An array of rules grouped by name.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LightRuntimePolicyRule"
  /secure/rules/groups:
    get:
      summary: Retrieve a group of all rules having a given name.
      description: Retrieve a group of all rules having the given name. This is used to show how a base rule is modified by later rules that override/append to the rule.
      tags:
        - Rules
        - PoliciesV2
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: An array of rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RuntimePolicyRule"
  /secure/falco/macros:
    post:
      summary: Create a new macro
      description: |
        Save a new macro
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FalcoMacro"
      tags:
        - FalcoMacros
        - PoliciesV2
      responses:
        200:
          description: The saved FalcoMacro
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoMacro"
        400:
          description: The provided FalcoMacro was invalid
          content:
            text/plain:
              schema:
                type: string

  /secure/falco/macros/{macroId}:
    get:
      summary: Retrieve info about a single macro
      parameters:
        - name: macroId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - FalcoMacros
        - PoliciesV2
      responses:
        200:
          description: The macro with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoMacro"
    put:
      summary: Update info associated with a macro
      parameters:
        - name: macroId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FalcoMacro"
      tags:
        - FalcoMacros
        - PoliciesV2
      responses:
        200:
          description: The macro with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoMacro"
        400:
          description: The updated macro is not valid
          content:
            text/plain:
              schema:
                type: string
    delete:
      summary: Delete a macro
      parameters:
        - name: macroId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - FalcoMacros
        - PoliciesV2
      responses:
        200:
          description: The macro that was just deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoMacro"
  /secure/falco/macros/summaries:
    get:
      summary: Retrieve a list of summary macro information, grouped by macro name.
      description: |
        Returns the list of macros in the system. These are grouped by name and do not necessarily represent individual macro objects, as multiple macros can have the same name.
      tags:
        - FalcoMacros
        - PoliciesV2
      responses:
        200:
          description: An array of macros grouped by name.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LightFalcoMacro"
  /secure/falco/macros/groups:
    get:
      summary: Retrieve a group of all falco macros having a given name.
      description: Retrieve a group of all falco macros having the given name. This is used to show how a base macro is modified by later macros that override/append to the macro.
      tags:
        - FalcoMacros
        - PoliciesV2
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: An array of macros
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FalcoMacro"
  /secure/falco/lists:
    post:
      summary: Create a new falco list
      description: |
        Save a new falcolist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FalcoList"
      tags:
        - FalcoLists
        - PoliciesV2
      responses:
        200:
          description: The saved falco list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoList"
        400:
          description: The provided falco list is not valid
          content:
            text/plain:
              schema:
                type: string
  /secure/falco/lists/{falcolistId}:
    get:
      summary: Retrieve info about a single falco list
      parameters:
        - name: falcolistId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - FalcoLists
        - PoliciesV2
      responses:
        200:
          description: The falco list with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoList"
    put:
      summary: Update info associated with a falcolist
      parameters:
        - name: falcolistId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FalcoList"
      tags:
        - FalcoLists
        - PoliciesV2
      responses:
        200:
          description: The falco list with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoList"
        400:
          description: The provided falcolist is not valid
          content:
            text/plain:
              schema:
                type: string
    delete:
      summary: Delete a falco list
      parameters:
        - name: falcolistId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - FalcoLists
        - PoliciesV2
      responses:
        200:
          description: The falco list that was just deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FalcoList"
  /secure/falco/lists/summaries:
    get:
      summary: Retrieve a list of summary falco list information, grouped by list name.
      description: |
        Returns the list of falco lists in the system. These are grouped by name and do not necessarily represent individual falco list objects, as multiple falco lists can have the same name.
      tags:
        - FalcoLists
        - PoliciesV2
      responses:
        200:
          description: An array of falco lists grouped by name.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LightFalcoList"
  /secure/falco/lists/groups:
    get:
      summary: Retrieve a group of falco lists having a given name.
      description: Retrieve a group of all falco lists having the given name. This is used to show how a base list is modified by later lists that override/append to the list.
      tags:
        - FalcoLists
        - PoliciesV2
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: An array of lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FalcoList"
  /v2/policies:
    get:
      summary: Retrieve security policies
      description: Returns information about policies configured by the current customer. Policies can be filtered by priority and scope.
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: number
            format: integer
          example: 0
        - name: limit
          in: query
          required: false
          schema:
            type: number
            format: integer
          example: 10
        - name: filter
          in: query
          description: string to look for in policy names/descriptions
          required: false
          schema:
            type: string
          example: "Write below"
        - name: severity
          in: query
          description: finds policies that correspond to a numeric value representing a severity. The query param can be repeated to look for multiple severities
          required: false
          schema:
            type: number
          example: 3
      tags:
        - PoliciesV2
      responses:
        200:
          description: An array of policies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PolicyV2"
    post:
      summary: Create a new security policy
      description: Save a new security policy.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyV2"
      tags:
        - PoliciesV2
      responses:
        200:
          description: The newly created policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyV2"
        400:
          description: The submitted policy was invalid
          content:
            text/plain:
              schema:
                type: string
  /v2/policies/batch:
    post:
      summary: Create a new security policy and rules in a transaction
      description: Save a new security policy and rules in a transaction. If the policy or any of the rules fail validation, the operation is canceled (no policy or rule is created) and an error response is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - policy
                - rules
              properties:
                policy:
                  $ref: "#/components/schemas/PolicyV2"
                rules:
                  type: array
                  description: Array of rules to create. If no rules need to be created, this will be an empty array
                  items:
                    $ref: "#/components/schemas/RuntimePolicyRule"
      tags:
        - PoliciesV2
      responses:
        200:
          description: The newly created policy and rules
          content:
            application/json:
              schema:
                type: object
                required:
                  - policy
                  - rules
                properties:
                  policy:
                    $ref: "#/components/schemas/PolicyV2"
                  rules:
                    type: array
                    description: Array of newly created rules. If no rules were created, this will be an empty array
                    items:
                      $ref: "#/components/schemas/RuntimePolicyRule"
        400:
          description: A submitted policy or rule was invalid
          content:
            text/plain:
              schema:
                type: string
  /v2/policies/{id}:
    get:
      summary: Retrieve the security policy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - PoliciesV2
      responses:
        200:
          description: The requested policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyV2"
    put:
      summary: Update the security policy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyV2"
      tags:
        - PoliciesV2
      responses:
        200:
          description: The requested policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyV2"
        400:
          description: The updated policy was invalid
          content:
            text/plain:
              schema:
                type: string
    delete:
      summary: Delete the security policy.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - PoliciesV2
      responses:
        200:
          description: The deleted policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyV2"
  /v2/policies/default:
    post:
      summary: Create default policies for the current customer.
      description: Create new policies based on the currently available set of rules. For now, this only covers Falco rules, but we might extend the endpoint later. The backend should use the defaultPolicies property of a previously provided FalcoRulesFiles model as guidance on the set of policies to create. The backend should only create new policies (not delete or modify), and should only create new policies if there is not an existing policy with the same name.
      tags:
        - PoliciesV2
      responses:
        200:
          description: The created default policies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PolicyV2"
    get:
      summary: View what default policies would be created for the current customer.
      description: Identical to post, but does not actually create any policies. Instead, returns what policies would be created if a post were made.
      tags:
        - PoliciesV2
      responses:
        200:
          description: The default policies that would be created with a post verb.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PolicyV2"
  /policyEvents:
    get:
      summary: retrieve list of policy events
      description: When `sampling` is not specified and there is no `aggregations`, events are not aggregated. When `sampling` is not specified but there is `aggregations`, events are aggregated according to the scope keys in `aggregations`. When `sampling` is specified, events are aggregated by timestamp, according to the `sampling` value (and possibly the event fields specified in `aggregations`)
      tags:
        - PolicyEvents
      parameters:
        - $ref: "#/components/parameters/policyEventOffset"
        - $ref: "#/components/parameters/policyEventLimit"
        - $ref: "#/components/parameters/policyEventFrom"
        - $ref: "#/components/parameters/policyEventTo"
        - $ref: "#/components/parameters/policyEventSampling"
        - name: orderBy
          in: query
          required: false
          schema:
            type: string
          description: when specified, it says how to sort policyevents inside the same bucket
        - name: dir
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
        - name: metrics
          in: query
          required: false
          schema:
            type: string
          description: It should be provided as a JSON array (e.g. `...&metrics=["container.id"]&...`). When present it specifies which metrics each event should have attached. By metric we mean all monitor metrics (e.g. k8s.ns, container.id, container.image, host.mac, etc.)
        - $ref: "#/components/parameters/policyEventScopeFilter"
        - $ref: "#/components/parameters/policyEventEventFilter"
        - $ref: "#/components/parameters/policyEventAggregations"
      responses:
        200:
          description: List of policy events
          content:
            application/json:
              schema:
                type: array
                description: Each element can be a PolicyEvent or an AggregatedPolicyEvent
                items:
                  $ref: "#/components/schemas/PolicyEvent"

  /policyEvents/{policyEventId}:
    get:
      summary: Expand an aggregated policy event
      description: When requesting the detail of a single aggregated event, it is important to keep the same parameters in the request, to be sure to obtain the same element. Parameters specify how to dynamically aggregated events, while the ID identifies one of them.
      tags:
        - PolicyEvents
      parameters:
        - name: "policyEventId"
          description: This should match the id property of a previously fetched AggregatedPolicyEvent
          in: path
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/policyEventOffset"
        - $ref: "#/components/parameters/policyEventLimit"
        - $ref: "#/components/parameters/policyEventFrom"
        - $ref: "#/components/parameters/policyEventTo"
        - $ref: "#/components/parameters/policyEventSampling"
        - $ref: "#/components/parameters/policyEventScopeFilter"
        - $ref: "#/components/parameters/policyEventEventFilter"
        - $ref: "#/components/parameters/policyEventAggregations"
      responses:
        200:
          description: List containing the expanded policy event
          content:
            application/json:
              schema:
                type: array
                description: The element should be a PolicyEvent
                items:
                  $ref: "#/components/schemas/PolicyEvent"

  /secure/profileGroups:
    get:
      summary: Retrieve list of all profile groups (no profileIndices)
      tags:
        - Profiles
      responses:
        200:
          description: List of all profile groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProfileGroup"
    post:
      summary: Create default profile grouping
      description: For now it will just create the "by_container_image" grouping
      tags:
        - Profiles
      responses:
        200:
          description: New created groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProfileGroup"
  /secure/profileGroups/{profileGroupId}:
    get:
      summary: Get the profile group with the given id (with profileIndices)
      parameters:
        - name: profileGroupId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Profiles
      responses:
        200:
          description: Profile group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileGroup"
  /secure/profileGroups/{profileGroupId}/profiles:
    get:
      summary: Get basic info about profiles for a given ProfileGroup
      parameters:
        - name: profileGroupId
          in: path
          required: true
          schema:
            type: integer
        - name: filter
          in: query
          description: >-
            If specified, filter to only include profiles where the profile name or image name
            (registry/repository:tag@hash) contains this string. Defaults to empty string
          required: false
          schema:
            type: string
        - name: sortMethod
          in: query
          description: Sorting method. Defaults to `desc`.
          required: false
          schema:
            type: string
            enum:
              - desc
              - asc
        - name: sortBy
          in: query
          description: >-
            Field used to sort. Defaults to `score`. Profiles with `status:'FINALIZED'` will always
            appear above `status:'LEARNING'`, for all values of `sortBy` except
            `sortBy:'status', sortMethod:'asc'`.
          required: false
          schema:
            type: string
            enum:
              - score
              - profileName
              - status
              - createdOn
        - name: status
          in: query
          description: >-
            A comma-separated list of statuses. If specified, only profiles with these statuses will
            be retrieved. Defaults to `['FINALIZED','LEARNING']`
          required: false
          schema:
            type: string
            enum:
              - FINALIZED
              - LEARNING
        - name: scoreMin
          in: query
          description: >-
            If specified, only profiles with a confidence score at least this amount will be
            retrieved. Defaults to `0`
          required: false
          schema:
            type: integer
        - name: scopeFilter
          in: query
          description: >-
            If specified, this is a scope filter string (e.g. `container.image = nginx`). Defaults
            to Everywhere
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: >-
            If specified, a 0-based index on the profiles list. Only entries >= `offset` will be
            retrieved. Defaults to `0`. If any filters are also specified, this index will be
            applied on the filtered list. An empty list will be retrieved if this index overflows
            the list.
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: >-
            If specified, a limit on the number of entries retrieved. If any filters are also
            specified, the limit will be applied on the filtered list. `limit` must be >= `1` and if
            it overflows the list all entries will be retrieved. Defaults to length of list
          required: false
          schema:
            type: integer
      tags:
        - Profiles
      responses:
        "200":
          description: The retrieved profiles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profiles"
  /secure/profileGroups/{profileGroupId}/profiles/{profileName}:
    get:
      summary: Get detailed info about a profile (specified by name) in the specified group
      parameters:
        - name: profileGroupId
          in: path
          required: true
          schema:
            type: integer
        - name: profileName
          in: path
          required: true
          schema:
            type: string
      tags:
        - Profiles
      responses:
        200:
          description: Detailed info about a Profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
  /secure/profiles/{profileId}:
    get:
      summary: Get detailed info about a profile by its UUID
      parameters:
        - name: profileId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Profiles
      responses:
        200:
          description: Detailed info about a Profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
  /secure/profiles/{profileId}/actions/reset:
    post:
      summary: Reset a profile by its UUID
      tags:
        - Profiles
      description: |
        Schedule a profile for reset, this will defer the erasure of a previously profile collected state and automatically trigger the profile recomputation with incoming fingerprint data stream.
      parameters:
        - name: profileId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: {}
      responses:
        200:
          description: |
            Detailed info about the reset action has been scheduled on the Profile. The actual deletion will happen asynchronously.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileActionResetResponse"
  /v1/benchmarkResults:
    get:
      summary: Retrieve benchmark results
      description: |
        Return a set of benchmark results (that is, the result of the agent running benchmark tasks). Using the query parameters, you can limit the results by time or by host that generated the results.
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: number
            format: integer
          description: when specified, only the first 'limit' results will be reported
        - name: dir
          in: query
          required: false
          schema:
            type: string
            enum: [NEXT, PREV]
          description: the direction (PREV or NEXT) that determines which results to return in relation to cursor
        - name: cursor
          in: query
          required: false
          schema:
            type: number
            format: long
          description: time in Ns of the result to use as basis for getting the previous or next <limit> benchmark results
        - name: filter
          in: query
          required: false
          schema:
            type: string
          description: an optional case insensitive filter used to match against the completed task name and return matching results
      tags:
        - Benchmarking
      responses:
        200:
          description: A batch of benchmark results matching the provided filter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BenchmarkResults"
        400:
          description: The scopeFilter is not syntatically valid.
        422:
          description: The provided parameters are invalid, the limit is too high, or the scopeFilter contains container-level filters.
  /v1/benchmarkResults/{id}:
    get:
      summary: Retrieve the details for a specific benchmark task run result
      description: |
        Return details for a single benchmark task run result
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Benchmarking
      responses:
        200:
          description: The task run results for the given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BenchmarkResult"
        404:
          description: The task result with the specified ID was not found
  /v1/benchmarkResults/{id}/csv:
    get:
      summary: Download the details for a specific benchmark task run result
      description: |
        Initiates a download for a single benchmark task run result
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Benchmarking
      responses:
        200:
          description: The download request was received successfully
          content:
            text/csv:
              schema:
                type: string
          headers:
            content-disposition:
              schema:
                type: string
              description: string in the format of 'attachment; filename="{task-type}-{host.mac}-{run-date}.csv"'
            content-type:
              schema:
                type: string
              description: text/csv
        404:
          description: The task result with the specified ID was not found
  /v1/benchmarkTasks:
    post:
      summary: Create a new benchmark task
      description: |
        Create a new benchmark task, adding it to the set of tasks run for this customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BenchmarkTask"
      tags:
        - Benchmarking
      responses:
        200:
          description: The newly added task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BenchmarkTask"
    get:
      summary: Get the current list of tasks
      description: |
        Return the complete set of tasks run for this customer
      tags:
        - Benchmarking
      responses:
        200:
          description: An array of benchmark tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BenchmarkTask"
  /v1/benchmarkTasks/{id}:
    get:
      summary: Retrieve info about a single task using the task id
      description: |
        Return info about a single benchmark task with id=task id
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Benchmarking
      responses:
        200:
          description: The task with the given id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BenchmarkTask"
    put:
      summary: Update info associated with a task
      description: The version is incremented when the update is successful.
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Benchmarking
      responses:
        200:
          description: The updated task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BenchmarkTask"
    delete:
      summary: Delete the task with the given id
      description: |
        Delte the task with id=id
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Benchmarking
      responses:
        200:
          description: The object representing the task that was just deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BenchmarkTask"
  /v1/benchmarkTasks/run:
    post:
      summary: Run benchmark tasks immediately
      description: Run the set of tasks for this customer immediately
      requestBody:
        description: Set of task ids
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BenchmarkTaskIds"
      tags:
        - Benchmarking
      responses:
        200:
          description: OK
  /v1/benchmarkTests/{moduleName}/{schemaVersion}:
    get:
      summary: Retrieve the list of tests for a particular test module and schema version
      description: Retrieve the list of tests for a particular test module and schema version
      parameters:
        - name: moduleName
          in: path
          required: true
          schema:
            type: string
            enum: [docker-bench-security, kube-bench]
        - name: schemaVersion
          in: path
          required: true
          schema:
            type: string
          description: Matches a return value from /api/benchmarkTests/{moduleName}/schemaVersions
      tags:
        - Benchmarking
      responses:
        200:
          description: The object representing the tests for that module and schema version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BenchmarkTestSuite"
  /v1/benchmarkTests/modules:
    get:
      summary: Retrieve the available modules for benchmarking
      description: Retrieve the available modules for benchmarking
      tags:
        - Benchmarking
      responses:
        200:
          description: The array representing the available modules for benchmarking
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BenchmarkModule"
  /v1/benchmarkTests/{moduleName}/schemaVersions:
    get:
      summary: Retrieve the available benchmark versions for a module
      description: Retrieve the available benchmark versions for a module
      tags:
        - Benchmarking
      parameters:
        - name: moduleName
          in: path
          required: true
          schema:
            type: string
            enum: [docker-bench-security, kube-bench]
      responses:
        200:
          description: The array representing the available benchmark version for that module
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BenchmarkVersion"
  /api/scanning/v1/images/{imageDigest}/vulnSummary:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1images~1{imageDigest}~1vulnSummary"
  /api/scanning/v1/images/{imageDigest}/vuln/{vtype}:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1images~1{imageDigest}~1vuln~1{vtype}"
  /api/scanning/v1/images/{imageDigest}/content/{ctype}:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1images~1{imageDigest}~1content~1{ctype}"
  /api/scanning/v1/images/{imageDigest}/checkSummary:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1images~1{imageDigest}~1checkSummary"
  /api/scanning/v1/images/{imageDigest}/checkSummary/{policyId}:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1images~1{imageDigest}~1checkSummary~1{policyId}"
  /api/scanning/v1/policies:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1policies"
  /api/scanning/v1/auditPolicies:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1auditPolicies"
  /api/scanning/v1/policies/{id}:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1policies~1{id}"
  /api/scanning/v1/registryDisplayNames:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1registryDisplayNames"
  /api/scanning/v1/whitelists:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1whitelists"
  /api/scanning/v1/whitelists/{id}:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1whitelists~1{id}"
  /api/scanning/v1/mappings:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1mappings"
  /api/scanning/v1/whitelistedImages:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1whitelistedImages"
  /api/scanning/v1/blacklistedImages:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1blacklistedImages"
  /api/scanning/v1/alerts:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1alerts"
  /api/scanning/v1/alerts/{id}:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1alerts~1{id}"
  /api/scanning/v1/query/containers:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1query~1containers"
  /api/scanning/v1/reports:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1reports"
  /api/scanning/v1/reports/csv:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1reports~1csv"
  /api/scanning/v1/results:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1results"
  /api/scanning/v1/retention/policy:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1retention~1policy"
  /api/v1/activityAudit/summary:
    $ref: "api/audit/audit.yaml#/paths/api~1v1~1activityAudit~1summary"
  /api/v1/activityAudit/events:
    $ref: "api/audit/audit.yaml#/paths/api~1v1~1activityAudit~1events"
  /api/v1/activityAudit/events/{type}/{eventId}:
    $ref: "api/audit/audit.yaml#/paths/api~1v1~1activityAudit~1events~1{type}~1{eventId}"
  /api/v1/activityAudit/events/{type}/{eventId}/trace:
    $ref: "api/audit/audit.yaml#/paths/api~1v1~1activityAudit~1events~1{type}~1{eventId}~1trace"
  /api/scanning/v1/onboarding:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1onboarding"
  /api/scanning/v1/onboarding/{customerId}:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1onboarding~1{customerId}"
  /api/scanning/v1/system/feeds:
    $ref: "api/scanning/scanning.yaml#/paths/api~1scanning~1v1~1system~1feeds"
  /api/v1/policyDescriptors:
    get:
      summary: Retrieve the list of available MetricDescriptor objects for the customer
      description: Retrieve the list of available MetricDescriptor objects for the customer
      tags:
        - Policies
      responses:
        200:
          description: The array representing the available metric descriptors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricDescriptorResponseWrapper"
components:
  parameters:
    policyEventFrom:
      name: from
      in: query
      required: true
      schema:
        type: number
        format: long
      description: time in Us. It allows to reduce the time window of events to consider.
    policyEventTo:
      name: to
      in: query
      required: true
      schema:
        type: number
        format: long
      description: time in Us. It allows to reduce the time window of events to consider.
    policyEventOffset:
      name: offset
      in: query
      required: false
      schema:
        type: number
        format: integer
      description: when specified, the first X (aggregated) events will be skipped
    policyEventLimit:
      name: limit
      in: query
      required: false
      schema:
        type: number
        format: integer
      description: when specified, only the first X (aggregated) events will be reported
    policyEventSampling:
      name: sampling
      in: query
      required: false
      schema:
        type: number
        format: long
      description: sampling in us. When sampling is specified, events are aggregated by time (if you specify 1 sec as sampling, all events happening in the same second will be aggregated together and just a summary of them will be presented to the user). It should not be 0 and it should not be too small compared to `from` and `to`. When the number of buckets that would be generated is more than 365, the request is not accepted.
    policyEventScopeFilter:
      name: scopeFilter
      in: query
      required: false
      schema:
        type: string
      description: this is a SysdigMonitor-like filter (e.g "container.image=ubuntu"). When provided, events are filtered by their scope, so only a subset will be returned (e.g. "container.image=ubuntu" will provide only events that have happened on an ubuntu container)
    policyEventEventFilter:
      name: eventFilter
      in: query
      required: false
      schema:
        type: string
      description: this is a SysdigMonitor-like filter (e.g. policyEvent.policyId=3). When provided, events are filtered by some of their properties. Currently the supported set of filters is  policyEvent.all(which can be used just with `matches`, policyEvent.policyId, policyEvent.id, policyEvent.severity, policyEvent.ruleTye, policyEvent.ruleSubtype.
    policyEventAggregations:
      name: aggregations
      in: query
      required: false
      schema:
        type: string
      description: It should be provided as a JSON array (e.g. `...&aggregations=["container.image"]&...`). When present it specifies how to aggregate events (`sampling` does not need to be specified, because when it\'s present it automatically means events will be aggregated). This field can either be a list of scope metrics or a list of policyEvents fields but (currently) not a mix of the two. When policy events fields are specified, only these can be used= severity, agentId, containerId, policyId, ruleType.
  schemas:
    FalcoRulesTags:
      type: object
      required: ["tags"]
      properties:
        tags:
          type: array
          description: Array of tags from the combined user and system rules content.
          items:
            type: object
            required: ["id"]
            properties:
              id:
                type: string
                description: The value is a tag from the combined content.
                example: "tag1"
    FalcoRulesNames:
      type: object
      required: ["ruleNames"]
      properties:
        ruleNames:
          type: array
          description: Array of rule names from the combined user and system rules content.
          items:
            type: object
            required: ["id"]
            properties:
              id:
                type: string
                description: The value is a rule name from the combined content.
                example: "ruleName1"
    FalcoRulesVariant:
      type: object
      required: ["requiredEngineVersion", "content"]
      properties:
        required_engine_version:
          type: number
          format: integer
          description: The minimum falco engine version that can read this rules file variant.
        content:
          type: string
          description: A string containing the yaml contents of a falco rules file variant.
          example: "- macro: open_write\n  condition: something"
    FalcoRulesFile:
      type: object
      required: ["name", "variants"]
      properties:
        name:
          type: string
          description: A name for this file. Should be used in UI to distinguish between files.
          example: "falco_rules.yaml"
        variants:
          type: array
          description: An array of alternate versions for the given file. An agent should choose the highest version that is compatible with its included falco engine.
          items:
            $ref: "#/components/schemas/FalcoRulesVariant"
    NewestFalcoRulesFile:
      type: object
      required: ["name", "requiredEngineVersion", "content"]
      properties:
        name:
          type: string
          description: A name for this file. Should be used in UI to distinguish between files.
          example: "falco_rules.yaml"
        required_engine_version:
          type: number
          format: integer
          description: The minimum falco engine version that can read this rules file variant.
        content:
          type: string
          description: A string containing the yaml contents of a falco rules file variant.
          example: "- macro: open_write\n  condition: something"
    FalcoRulesFiles:
      type: object
      required: ["version", "tag", "files"]
      properties:
        version:
          type: integer
          description: Version of the object. Incremented on each update and used for optimistic locking
        tag:
          type: string
          description: An externally provided version identifier (e.g. git tag) that can be used to uniquely identify this set of files.
          example: "v0.1.2"
        files:
          type: array
          description: A list of files that comprise the set of rules files
          items:
            $ref: "#/components/schemas/FalcoRulesFile"
        defaultPolicies:
          type: array
          description: A list of reference policies that can be created from the provided falco rules. Used by the /v2/policies/default endpoint.
          items:
            $ref: "#/components/schemas/PolicyV2Info"
    NewestFalcoRulesFiles:
      type: object
      required: ["version", "tag", "files"]
      properties:
        version:
          type: integer
          description: Version of the object. Incremented on each update and used for optimistic locking
        tag:
          type: string
          description: An externally provided version identifier (e.g. git tag) that can be used to uniquely identify this set of files.
          example: "v0.1.2"
        files:
          type: array
          description: A list of files that comprise the set of rules files
          items:
            $ref: "#/components/schemas/NewestFalcoRulesFile"
    CustomFalcoRulesFiles:
      type: object
      properties:
        customFalcoRulesFiles:
          allOf:
            - $ref: "#/components/schemas/FalcoRulesFiles"
    NewestDefaultFalcoRulesFiles:
      type: object
      properties:
        newestDefaultFalcoRulesFiles:
          allOf:
            - $ref: "#/components/schemas/NewestFalcoRulesFiles"
    DefaultFalcoRulesFiles:
      type: object
      properties:
        defaultFalcoRulesFiles:
          allOf:
            - $ref: "#/components/schemas/FalcoRulesFiles"
    FalcoRulesContent:
      type: object
      required: ["version", "createdOn", "modifiedOn", "content"]
      properties:
        version:
          type: number
          format: integer
          description: The version is incremented when the update is successful.
        createdOn:
          type: number
          format: integer
          description: A timestamp (in milliseconds) of when the rules object was first created.
        modifiedOn:
          type: number
          format: integer
          description: A timestamp (in milliseconds) of when the rules object was last modified.
        content:
          type: string
          description: A string containing the yaml contents of a falco rules file.
          example: "- macro: open_write\n  condition: something"
    UserFalcoRulesContent:
      type: object
      properties:
        userFalcoRulesFile:
          allOf:
            - $ref: "#/components/schemas/FalcoRulesContent"
    SystemFalcoRulesContent:
      type: object
      properties:
        systemFalcoRulesFile:
          allOf:
            - $ref: "#/components/schemas/FalcoRulesContent"
    PolicyV2Info:
      type: object
      properties:
        name:
          type: string
          description: A short name for the policy
          example: "Check filesystem activity"
        description:
          type: string
          description: Description of policy
          example: "Monitor all filesystem operations and look for suspicious or notable behavior"
        severity:
          type: integer
          description: How severe is this policy when violated. Range from 0 to 7 included.
          items:
            type: string
          example: 4
        enabled:
          type: boolean
          description: True if the policy should be considered
          example: true
        scope:
          type: string
          description: Where the policy is being applied- Container, Host etc..
          example: "container.image.repository = sysdig/agent"
        ruleNames:
          type: array
          description: Array of rule names. (They must be names instead of ids, as the rules list view is by name, to account for multiple rules having the same name).
          items:
            type: string
          example:
            [
              "Write below binary dir",
              "Write below root",
              "Write below monitored dir",
            ]
        actions:
          type: array
          items:
            $ref: "#/components/schemas/PolicyAction"
    PolicyV2:
      type: object
      allOf:
        - $ref: "#/components/schemas/PolicyV2Info"
        - type: object
          properties:
            id:
              type: integer
              description: Unique identifier representing a specific policy.
              example: 1
            version:
              type: integer
              description: Version of the object. Incremented on each update and used for optimistic locking
              example: 18
            createdOn:
              type: integer
              description: A timestamp (in milliseconds) of when the rules object was first created.
              example: 1553702727177
            modifiedOn:
              type: integer
              description: A timestamp (in milliseconds) of when the rules object was last modified.
              example: 1553702738288
            origin:
              $ref: "#/components/schemas/RuntimePolicyObjectOrigin"
            versionId:
              $ref: "#/components/schemas/RuntimePolicyObjectVersionId"
            notificationChannelIds:
              type: array
              items:
                type: integer
                example: [3, 5]
            profile:
              $ref: "#/components/schemas/ProfileModelMeta"
    MatchEffect:
      type: string
      enum:
        - MATCH_EFFECT_ACCEPT
        - MATCH_EFFECT_DENY
    MatchEffectDefault:
      type: string
      enum:
        - DEFAULT_MATCH_EFFECT_ACCEPT
        - DEFAULT_MATCH_EFFECT_DENY
        - DEFAULT_MATCH_EFFECT_NEXT

    MatchList:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
        onMatch:
          $ref: "#/components/schemas/MatchEffect"
    ProcessMatchList:
      type: object
      allOf:
        - $ref: "#/components/schemas/MatchList"
    FileSystemMatchList:
      type: object
      allOf:
        - $ref: "#/components/schemas/MatchList"
        - type: object
          properties:
            accessType:
              type: string
              enum: [ACCESS_READ, ACCESS_READWRITE]
    SyscallMatchList:
      type: object
      allOf:
        - $ref: "#/components/schemas/MatchList"
    ContainerImagesMatchList:
      type: object
      allOf:
        - $ref: "#/components/schemas/MatchList"
    PortsMatchList:
      type: object
      allOf:
        - $ref: "#/components/schemas/MatchList"
        - type: object
          properties:
            netProto:
              type: string
              enum: [PROTO_TCP, PROTO_UDP]

    FalcoConfiguration:
      type: object
      properties:
        ruleNameRegEx:
          type: string
        tags:
          type: array
          items:
            type: string
        fields:
          type: array
          description: Array of sysdig filters that will be resolved in the policyEvent
          items:
            type: string
    ProcessConfiguration:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/ProcessMatchList"
        onDefault:
          $ref: "#/components/schemas/MatchEffectDefault"
        fields:
          type: array
          description: Array of sysdig filters that will be resolved in the policyEvent
          items:
            type: string
    FileSystemConfiguration:
      type: object
      properties:
        readWritePaths:
          type: object
          properties:
            list:
              type: array
              items:
                $ref: "#/components/schemas/FileSystemMatchList"
            onDefault:
              $ref: "#/components/schemas/MatchEffectDefault"
        fields:
          type: array
          description: Array of sysdig filters that will be resolved in the policyEvent
          items:
            type: string
    SyscallConfiguration:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/SyscallMatchList"
        onDefault:
          $ref: "#/components/schemas/MatchEffectDefault"
        fields:
          type: array
          description: Array of sysdig filters that will be resolved in the policyEvent
          items:
            type: string
    ContainerImagesConfiguration:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/ContainerImagesMatchList"
        onDefault:
          $ref: "#/components/schemas/MatchEffectDefault"
        fields:
          type: array
          description: Array of sysdig filters that will be resolved in the policyEvent
          items:
            type: string
    NetworkConfiguration:
      type: object
      properties:
        inbound:
          type: object
          properties:
            onDefault:
              $ref: "#/components/schemas/MatchEffectDefault"
        outbound:
          type: object
          properties:
            onDefault:
              $ref: "#/components/schemas/MatchEffectDefault"
        listeningPorts:
          type: object
          properties:
            list:
              type: array
              items:
                $ref: "#/components/schemas/PortsMatchList"
            onDefault:
              $ref: "#/components/schemas/MatchEffectDefault"
        fields:
          type: array
          description: Array of sysdig filters that will be resolved in the policyEvent
          items:
            type: string
    ProfileConfiguration:
      type: object
      properties:
        profileGroupId:
          type: string
          description: Id of a Profile Grouping coming from the Profile API
        processesEnabled:
          type: boolean
        fileSystemEnabled:
          type: boolean
        syscallsEnabled:
          type: boolean
        listeningPortsEnabled:
          type: boolean
        inboundEnabled:
          type: boolean
        outboundEnabled:
          type: boolean
        containerImagesEnabled:
          type: boolean

    StopPolicyAction:
      type: object
    CapturePolicyAction:
      type: object
      properties:
        filter:
          type: string
          description: specifies the subset to match
          example: proc.name=cat or proc.name=vi
        isLimitedToContainer:
          type: boolean
        beforeEventNs:
          type: integer
          description: period of time to capture before event in nanoseconds
        afterEventNs:
          type: integer
          description: period of time to capture after event in nanoseconds
        name:
          type: string
          description: the name of the file in which the capture will be saved
        storageType:
          type: string
          description: specifies which strategy will be taken to store the capture
          enum: [LOCAL, S3, AGENT, PROVIDED, CASSANDRA]
        bucketName:
          type: string
          description: identifies an s3 compliant bucket
        folder:
          type: string
          description: the name of an s3 folder (enables the user to specify a bucket that is not in the default bucket root folder '/')
        storageId:
          type: integer
          description: specifies the id of a row in the file_storage table that corresponds to a FileStorageDetails.java object
    PausePolicyAction:
      type: object
    PolicyAction:
      type: object
      description: Could be one of '#/components/schemas/StopPolicyAction', '#/components/schemas/CapturePolicyAction' or '#/components/schemas/PausePolicyAction'
    PolicyActionResult:
      type: object
      description: Result of a policy action

    Priorities:
      type: object
      properties:
        createdOn:
          type: integer
        modifiedOn:
          type: integer
        policyIds:
          type: array
          description: Array of policyIds sorted by priority
          items:
            type: integer
        version:
          type: integer

    Policy:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier representing a specific policy.
        version:
          type: integer
          description: Version of the object. Incremented on each update and used for optimistic locking
        createdOn:
          type: integer
        modifiedOn:
          type: integer
        name:
          type: string
        description:
          type: string
          description: Description of policy
        severity:
          type: integer
          description: How severe is this policy when violated. Range from 0 to 7 included.
        isBuiltin:
          type: boolean
          description: True if the policy is created by sysdig by default
        enabled:
          type: boolean
          description: True if the policy should be considered
        hostScope:
          type: boolean
          description: When True the policy applies also to the host (when applicable)
        containerScope:
          type: boolean
          description: When True the policy applies also to containers (when applicable)
        scope:
          type: string
          description: Where to apply the policy
        excludedScope:
          type: string
          description: A scope (in the same format as `scope`) that is excluded from the one specified in `scope`.
        falcoConfiguration:
          $ref: "#/components/schemas/FalcoConfiguration"
        processesConfiguration:
          $ref: "#/components/schemas/ProcessConfiguration"
        fileSystemConfiguration:
          $ref: "#/components/schemas/FileSystemConfiguration"
        syscallConfiguration:
          $ref: "#/components/schemas/SyscallConfiguration"
        networkConfiguration:
          $ref: "#/components/schemas/NetworkConfiguration"
        containerImagesConfiguration:
          $ref: "#/components/schemas/ContainerImagesConfiguration"
        profileConfiguration:
          $ref: "#/components/schemas/ProfileConfiguration"
        notificationChannelIds:
          type: array
          items:
            type: integer
        actions:
          type: array
          items:
            $ref: "#/components/schemas/PolicyAction"
        policyEventsCount:
          type: integer
          description: Number of policy events triggered by this policy

    FalcoRulesError:
      type: object
      description: Details on why a falco rules file could not be saved.
      properties:
        errors:
          type: array
          description: a list of errors
          items:
            type: object
            properties:
              message:
                type: string
                description: a longer human-readable description of the error
                example: 'Error loading rules: [string "-- Copyright (C) 2016-2018 Draios Inc dba Sys..."]:357: Unknown rule object: {condition="(e"...'
              reason:
                description: >
                  A short string identifying the error. Reasons may include:
                    * `Invalid YAML syntax`: invalid yaml (this is already used in many places, so no "ID")
                    * `FALCO_RULES_INVALID`: valid yaml, but invalid falco rules file
                    * `FALCO_RULES_ERROR`: some errors on the backend side while trying to validate the rules.
                  This list may not be complete.
                type: string
                enum:
                  [
                    "Invalid YAML syntax",
                    FALCO_RULES_INVALID,
                    FALCO_RULES_ERROR,
                  ]
    PolicyError:
      type: object
      description: Details on why a policy action could not be performed.
      properties:
        errors:
          type: array
          description: a list of errors
          items:
            type: object
            properties:
              message:
                type: string
                description: a longer human-readable description of the error
                example: "Policy missing action property"
              reason:
                description: >
                  A short string identifying the error. Reasons may include:
                    * `POLICIES_NO_DETAIL`: no details in the policy
                    * `POLICIES_INVALID_DETAIL`: detail is present but not valid for some reason
                    * `POLICIES_INVALID_TYPE`: policy type not valid
                    * `POLICIES_NO_TYPE`: policy without type
                    * `POLICIES_CAPTURE_TOO_LONG`: the policy has an action with a capture that could be to
                  This list may not be complete.
                type: string
                enum:
                  [
                    POLICIES_NO_DETAIL,
                    POLICIES_INVALID_DETAIL,
                    POLICIES_INVALID_TYPE,
                    POLICIES_NO_TYPE,
                    POLICIES_CAPTURE_TOO_LONG,
                  ]

    EventProfileDetails:
      type: object
      description: TBD

    AggregatedPolicyEvent:
      type: object
      description: when sampling or aggregations are specified, policy events are aggregated together and form an "Aggregated Policy Event"
      properties:
        aggregatedCount:
          type: integer
          description: number of events that have been aggregated together
        aggregatedMetrics:
          type: array
          description: value for each one of the aggregation keys if any (if sampling is specified, the first metric is the time of the aggregated events)
          items:
            type: string
        id:
          type: string
          description: string that identifies a specific aggregated event. Notice that for the identifier to be used correctly, the same parameters should be specified in the request. This is because events are aggregated dynamically and IDs and if you change the `sampling` parameter, the same ID would not have sense anymore.
        isAggregated:
          type: boolean
        minSeverity:
          type: integer
        maxSeverity:
          type: integer
        minTimestamp:
          type: integer
        maxTimestamp:
          type: integer
        metrics:
          type: object
        outputs:
          type: object
        policyIds:
          type: object
        ruleTypes:
          type: object
        fields:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
        aggregatedActionResults:
          type: object
    PolicyEvent:
      type: object
      properties:
        isAggregated:
          type: boolean
        hostMac:
          type: string
        containerId:
          type: string
        name:
          type: string
        severity:
          type: number
        metrics:
          type: array
          description: array of (scope) metrics
          items:
            type: string
        policyId:
          type: number
        actionResults:
          type: array
          items:
            $ref: "#/components/schemas/PolicyActionResult"
        ruleType:
          type: string
          enum:
            - RULE_TYPE_PROCESS
            - RULE_TYPE_CONTAINER
            - RULE_TYPE_FILESYSTEM
            - RULE_TYPE_NETWORK
            - RULE_TYPE_SYSCALL
            - RULE_TYPE_FALCO
        ruleSubType:
          type: string
          enum:
            - RULE_SUBTYPE_INBOUND
            - RULE_SUBTYPE_OUTBOUND
            - RULE_SUBTYPE_LISTENING
            - RULE_SUBTYPE_READWRITE
            - RULE_SUBTYPE_READ
        resource:
          type: string
        output:
          type: string
        fields:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
        isFalsePositive:
          type: boolean
        profileDetails:
          $ref: "#/components/schemas/EventProfileDetails"
    ProfileModelMeta:
      type: object
      required:
        - profileId
        - profileName
        - profileVersion
        - imageId
        - imageName
      properties:
        profileId:
          type: string
          description: UUID of the profile, based on a SHA of (imageId + profileVersion).
        profileName:
          type: string
          description: Name of the profile, which includes registry/repository:tag@hash.
        profileVersion:
          type: integer
          description: Version of the profile, incremented when the model is updated.
        imageId:
          type: string
          description: UUID of the image, based on a SHA256 of the image content.
        imageName:
          type: string
          description: Name of the image, as registry/repository:tag.
    ProfileResult:
      type: object
      required:
        - score
      properties:
        score:
          type: integer
          description: Value from 0 to 1000 representing the score of the category or subcategory.
    ProfileProposalRule:
      allOf:
        - type: object
          required:
            - name
            - ruleName
          properties:
            name:
              type: string
              description: Short description of the subcategory.
              example: files rw
            ruleName:
              type: string
              description: Name of the rule object.
              example: Unexpected spawned process postgres in image a1b2c3d4e5f6
        - $ref: "#/components/schemas/RuntimePolicyRuleType"
        - $ref: "#/components/schemas/ProfileResult"
    ProfileProposal:
      allOf:
        - type: object
          required:
            - subcategories
          properties:
            subcategories:
              type: array
              description: A category has at least one subcategory. Each subcategory refers to one rule and has its own score and status.
              example: The category `fileSystemProposal` will have an `items` array with subcategories such as "files rw" which refers to a single rule.
              items:
                $ref: "#/components/schemas/ProfileProposalRule"
        - $ref: "#/components/schemas/ProfileResult"
    ProfileIndex:
      allOf:
        - $ref: "#/components/schemas/ProfileModelMeta"
        - $ref: "#/components/schemas/ProfileResult"
        - type: object
          required:
            - status
            - profileGroupId
            - processesProposal
            - fileSystemProposal
            - syscallProposal
            - networkProposal
            - containerImagesProposal
          properties:
            status:
              type: string
              description: Status of the model (learning or finalized).
              enum: [LEARNING, FINALIZED]
            profileGroupId:
              type: integer
              description: Identifier of the profile group.
            processesProposal:
              $ref: "#/components/schemas/ProfileProposal"
            fileSystemProposal:
              $ref: "#/components/schemas/ProfileProposal"
            syscallProposal:
              $ref: "#/components/schemas/ProfileProposal"
            networkProposal:
              $ref: "#/components/schemas/ProfileProposal"
            containerImagesProposal:
              $ref: "#/components/schemas/ProfileProposal"
    Profiles:
      type: object
      properties:
        offset:
          type: integer
          description: The start offset used
        limit:
          type: integer
          description: The limit used. 0 for no limit.
        canLoadMore:
          type: boolean
          description: True if more results can be fetched.
        profiles:
          type: array
          items:
            $ref: "#/components/schemas/ProfileIndex"
          description: The profiles retrieved
    ProfileGroup:
      type: object
      properties:
        id:
          type: integer
          description: Identifier of this profile group.
        type:
          type: string
          description: Specify whether the profile engine aggregates data at the container or host level.
          enum: [AT_HOSTS, AT_CONTAINERS]
        aggregationKeys:
          type: array
          description: List of metrics used to identify the entity to be profiles (e.g. ["container.image"].
          items:
            type: string
        uniqueIdKeys:
          type: array
          description: List of metrics used to identify a sub-entity inside an entity (e.g. ["container.id"].
          items:
            type: string
        profileCount:
          type: integer
          description: Number of profiles computed within the profileGroup.
          items:
            type: integer
        lastTimestampUs:
          type: number
          format: int64
    Profile:
      type: object
      properties:
        profileGroupId:
          type: integer
          description: Identifier of the related profile group.
        id:
          type: string
          description: UUID of this profile.
        name:
          type: string
          description: Name of the profile inside the profileGroup.
        mainKeyValues:
          type: array
          description: Values for the ProfileGroup.aggregationKeys.
          items:
            type: string
        profileLifeTracker:
          $ref: "#/components/schemas/ProfileLifeTracker"
        proposedPolicy:
          $ref: "#/components/schemas/PolicyV2"
        proposedRules:
          type: array
          description: Array of rules referred to by the proposed policy in `proposedPolicy`, that have not yet been created. Each of the `ruleNames` in `proposedPolicy` must refer to a rule's `name` of either a proposed rule in this array or a rule that already exists.
          items:
            $ref: "#/components/schemas/RuntimePolicyRule"
    ProfileActionResetResponse:
      type: object
      description: "Profile reset action response"
      properties:
        resetTimeUs:
          type: integer
    ProfileLifeTracker:
      type: object
      description: keep track of the life of an entity
      properties:
        firstSeenUs:
          type: integer
        lastSeenUs:
          type: integer
        currentTimeUs:
          type: integer
        activeTimeUs:
          type: integer
    BenchmarkResultAttributes:
      type: array
      description: A general-purpose set of attribute + value pairs that provide additional information about a result. Put here to prevent polluting the ComplianceResult object with too many attributes.
      items:
        type: object
        maxProperties: 1
        example:
          k8sNodeType: "master"
        properties:
          k8sNodeType:
            type: string
            description: If master, this result represents a kube-bench result that was run on the master node. If node, this result was run on a worker node.
            enum: [master, node]
          dockerBenchScore:
            type: number
            description: For docker-bench results, the score. The score is computed by the docker-bench script, but is currently the number of passing tests minus the number of failed tests.
    BenchmarkResults:
      type: object
      required: ["cursor", "limit", "dir", "canLoadMore", "filter", "results"]
      properties:
        cursor:
          type: number
          description: The current timestamp in Ns being used as the cursor for pagination.
        limit:
          type: number
          description: The current limit used to fetch this set of result objects.
        dir:
          type: string
          description: The current direction used to fetch this set of result objects.
          enum: [PREV, NEXT]
        canLoadMore:
          type: boolean
          description: Flag that indicates whether or not there are more results that can be loaded
        filter:
          type: string
          description: Filter used to match against the completed task name and return matching results
        results:
          type: array
          items:
            $ref: "#/components/schemas/LightBenchmarkResult"
    LightBenchmarkResult:
      type: object
      required: ["id", "timestampNs", "hostMac", "taskName", "successful"]
      properties:
        id:
          type: string
          description: UUID representing a specific Benchmark Result.
        timestampNs:
          type: number
          description: The time at which this result was created
        hostMac:
          type: string
          description: The mac address of the agent that created this result
        taskName:
          type: string
          description: The compliance task that generated this result
        resultSchema:
          type: string
          description: A string that identifies the format of the ids and/or descriptions in this result. For example, when using the kube-bench module this field identifies the K8s version used to perform the tests, which in turn identifies the specific mapping from test ids to test descriptions. This field is only used for agent/backend communication and need not be read by the frontend.
        testsRun:
          type: number
          description: An overall count of the number of "tests" run by this task. The notion of a "test" is generic and up to the module.
        passCount:
          type: number
          description: An overall count of the number of "tests" passed by this task. The notion of a "test" is generic and up to the module.
        failCount:
          type: number
          description: An overall count of the number of "tests" failed by this task. The notion of a "test" is generic and up to the module.
        warnCount:
          type: number
          description: An overall count of the number of "tests" marked as warn by this task. The notion of a "test" is generic and up to the module.
        risk:
          type: string
          description: An overall notion of whether this result indicates a low, medium, or high risk environment.
          enum: [low, medium, high]
        successful:
          type: boolean
          description: Whether or not this result represents a task that ran successfully.
        attributes:
          $ref: "#/components/schemas/BenchmarkResultAttributes"
    BenchmarkResult:
      allOf:
        - $ref: "#/components/schemas/LightBenchmarkResult"
        - type: object
          properties:
            failureDetails:
              type: string
              description: When successful=false, details on why the benchmark task failed.
            filterWarning:
              type: string
              description: Explains why it was not possible to filter results such as the agent being an old version or that the kubernetes version configured for filtering does not match the kubernetes version of the test results
            tests:
              type: array
              description: When successful=true, contains details on the tests performed by the result and their status.
              items:
                type: object
                required:
                  [
                    "sectionId",
                    "description",
                    "testsRun",
                    "passCount",
                    "failCount",
                    "warnCount",
                    "results",
                  ]
                properties:
                  sectionId:
                    type: string
                    description: The section test id of a particular task run. While Kube and Docker use numbers for this property, we are using a string here to allow for more free form like "daemon configuration" in future modules.
                  description:
                    type: string
                    description: A string to represent what this test section covers
                  testsRun:
                    type: number
                    description: The total number of test results in this given section
                  passCount:
                    type: number
                    description: The number of passed test results in this given section
                  failCount:
                    type: number
                    description: The number of fail test results in this given section
                  warnCount:
                    type: number
                    description: The number of warn test results in this given section
                  results:
                    type: array
                    description: List of test results
                    items:
                      $ref: "#/components/schemas/BenchmarkResultTestResult"
    BenchmarkResultTestResult:
      type: object
      required: ["testNumber", "description", "status"]
      properties:
        testNumber:
          type: string
          description: The sub-section id for this test result
        description:
          type: string
          description: A string to represent what this sub-section covers
        status:
          type: string
          enum: [pass, fail, warn, info]
          description: A string to identify the sub-sections test status
        details:
          type: string
          description: Additional details giving more context into the result of this sub-section. This string should not include the content contained in the items property
        items:
          type: array
          items:
            type: string
            description: The name of the affected images, containers, etc.
        remediation:
          type: string
          description: Remediation information for this test if a known fix is available.
    BenchmarkTask:
      type: object
      required:
        [
          "id",
          "name",
          "version",
          "moduleName",
          "schedule",
          "enabled",
          "scope",
          "testSuite",
        ]
      properties:
        id:
          type: integer
          description: Unique identifier representing a specific task.
        name:
          type: string
          description: |
            The name of the task e.g. "Check Docker Compliance"
        version:
          type: integer
          description: Version of the object. Incremented on each update and used for optimistic locking
        moduleName:
          type: string
          description: |
            The name of the module that implements this task. Separate
            from task name in case you want to use the same module to
            run separate tasks with different scopes or schedules.
          enum: [docker-bench-security, kube-bench]
        enabled:
          type: boolean
          description: Whether this task should actually run as defined by its schedule.
        scope:
          type: string
          description: |
            The agent will only run the task on hosts matching this
            scope or on hosts where containers match this scope.
        schedule:
          type: string
          description: |
            The frequency at which this task should run. Expressed as an [ISO 8601 Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)
        testSuite:
          $ref: "#/components/schemas/BenchmarkTestSuite"
    BenchmarkTaskIds:
      type: object
      required: ["items"]
      properties:
        items:
          type: array
          description: a list of task ids. Each id corresponds to the id used in /benchmarkTasks/{id}, etc.
          items:
            type: number
    BenchmarkTestSuite:
      type: object
      required: ["schemaVersion", "sections", "moduleName"]
      properties:
        schemaVersion:
          type: string
          description: Matches a value returned by /api/benchmarkTests/{moduleName}/schemaVersions
        moduleName:
          type: string
          description: |
            The name of the module that implements this task. Separate
            from task name in case you want to use the same module to
            run separate tasks with different scopes or schedules.
          enum: [docker-bench-security, kube-bench]
        sections:
          type: array
          description: a list of benchmark sections
          items:
            $ref: "#/components/schemas/BenchmarkSection"
    BenchmarkSection:
      type: object
      required: ["sectionId", "description", "filtered", "tests"]
      properties:
        sectionId:
          type: string
        description:
          type: string
        filtered:
          type: boolean
        tests:
          type: array
          items:
            $ref: "#/components/schemas/BenchmarkTest"
    BenchmarkTest:
      type: object
      required: ["testNumber", "description", "filtered", "level"]
      properties:
        testNumber:
          type: string
        description:
          type: string
        filtered:
          type: boolean
        level:
          type: string
          enum: [Level 1, Level 2]
    ScanningVulnSummaryMap:
      type: object
      properties:
        vulnType:
          type: object
          properties:
            severity:
              type: integer
    ScanningVulnerabilities:
      type: object
      properties:
        imageDigest:
          type: string
          description: The targeted image digest
        vtype:
          type: string
          description: The type of vulnerabilities retrieved
        filter:
          type: string
          description: The filter used
        sort:
          type: string
          description: The sorting method used
        sortBy:
          type: string
          description: The field used to sort the result
        hasFix:
          type: boolean
          description: Wether only vulns with a fix have been retrieved
        filters:
          type: string
          description: The severities retrieved
        offset:
          type: integer
          description: The start offset used
        limit:
          type: integer
          description: The limit used. 0 for no limit.
        canLoadMore:
          type: boolean
          description: True if more results can be fetched.
        vulnCounts:
          type: object
          properties:
            total:
              type: integer
              description: The total count of vulnerabilities.
            new:
              type: integer
              description: The total count of new vulnerabilities.
            fixed:
              type: integer
              description: The total count of fixed vulnerabilities.
            shared:
              type: integer
              description: The total count of shared vulnerabilities.
          description: Total counts of comparison statuses.
        vulns:
          type: array
          items:
            type: object
            description: Anchore Vulnerability object plus comparison status.
          description: The vulnerabilities retrieved.
    ScanningImageContent:
      type: object
      properties:
        imageDigest:
          type: string
          description: The targeted image digest
        ctype:
          type: string
          description: The type of content retrieved
        filter:
          type: string
          description: The filter used
        sort:
          type: string
          description: The sorting method used
        sortBy:
          type: string
          description: The field used to sort the result
        offset:
          type: integer
          description: The start offset used
        limit:
          type: integer
          description: The limit used. 0 for no limit.
        canLoadMore:
          type: boolean
          description: True if more results can be fetched.
        content:
          type: array
          items:
            type: object
            description: >-
              Anchore Content{Package,Files,JAVA}Response.Content entry
              object
          description: The content retrieved
    ScanningCheckSummary:
      type: object
      properties:
        imageDigest:
          type: string
          description: The targeted image digest
        at:
          type: string
          description: The RFC-3339 timestamp of the evaluation
        tag:
          type: string
          description: The image full tag
        status:
          type: string
          description: Final evaluation status
        policyBundleId:
          type: string
          description: The bundle ID used in this evaluation
        finalAction:
          type: string
          description: Final evaluation action
        finalActionReason:
          type: string
          description: Final evaluation action reason
        nStops:
          type: integer
          description: Total number of stop rules triggered
        nWarns:
          type: integer
          description: Total number of warn rules triggered
        policies:
          type: array
          items:
            type: object
            properties:
              policyId:
                type: string
                description: Policy ID
              policyName:
                type: string
                description: Policy Name
              nStops:
                type: integer
                description: Number of stop rules triggered from this policy
              nWarns:
                type: integer
                description: Number of warn rules triggered from this policy
              rules:
                type: array
                items:
                  type: object
                  properties:
                    gate:
                      type: string
                      description: An Anchore rule gate
                    trigger:
                      type: string
                      description: An Anchore rule trigger
                    nStops:
                      type: integer
                      description: >-
                        Number of stop rules triggered from this gate/trigger
                        pair
                    nWarns:
                      type: integer
                      description: >-
                        Number of warn rules triggered from this gate/trigger
                        pair
    ScanningCheckPolicySummary:
      type: object
      properties:
        imageDigest:
          type: string
          description: The targeted image digest
        at:
          type: string
          description: The RFC-3339 timestamp of the evaluation
        tag:
          type: string
          description: The image full tag
        policyId:
          type: string
          description: The targeted policy ID
        policy:
          type: object
          description: An Anchore Policy object
        rules:
          type: array
          items:
            type: object
            properties:
              gate:
                type: string
                description: An Anchore rule gate
              trigger:
                type: string
                description: An Anchore rule trigger
              nStops:
                type: integer
                description: Number of stop rules triggered from this gate/trigger pair
              nWarns:
                type: integer
                description: Number of warn rules triggered from this gate/trigger pair
              rows:
                type: array
                items:
                  $ref: "#/components/schemas/ScanningCheckRuleOutput"
                description: the list of outputs for this pair/gate trigger
    ScanningCheckRuleOutput:
      type: object
      properties:
        Image_Id:
          type: string
          description: The ID of the image that triggered this rule.
        Repo_Tag:
          type: string
          description: The name of the image that triggered this rule.
        Trigger_Id:
          type: string
          description: The trigger identifier responsible for this rule output.
        Gate:
          type: string
          description: The gate of this rule.
        Trigger:
          type: string
          description: The trigger of this rule.
        Check_Output:
          type: string
          description: Human-readable output string of this rule.
        Gate_Action:
          type: string
          description: The action of this rule.
        Whitelisted:
          type: string
          description: Whether this rule was whitelisted in the policy.
        Policy_Id:
          type: string
          description: The ID of the policy that contains the triggered rule.
    ScanningPolicy:
      type: object
      required:
        - name
        - rules
      properties:
        id:
          type: string
          description: >
            Unique identifier associated with this policy. It's created backend
            side.
        comment:
          type: string
          description: |
            A human-readable description.
        name:
          type: string
          description: |
            The name of the policy.
        version:
          type: string
          description: |
            Version of the policy.
        isDefault:
          type: boolean
          description: >
            If true, this policy is referenced in the default mapping
            (registry=repository=tag=*)
        rules:
          description: >
            An array of Anchore PolicyRule elements (while creating/updating a
            policy, new rule IDs will be created backend side)
          type: array
          items:
            type: object
        policyBundleId:
          type: string
          description: >
            An Anchore policy bundle ID. While retrieving this object, this is the
            bundle ID that contains this policy. While inserting/updating, this is
            the target bundle, and if not specified, the currently active bundle
            will be used.
    ScanningWhitelist:
      type: object
      required:
        - name
        - items
      properties:
        id:
          type: string
          description: >
            Unique identifier associated with this whitelist. It's created backend
            side.
        comment:
          type: string
          description: |
            A human-readable description.
        name:
          type: string
          description: |
            The name of the whitelist.
        version:
          type: string
          description: |
            Version of the whitelist.
        items:
          description: >
            An array of Anchore WhitelistItem elements (while creating/updating a
            whitelist, new whitelistItemIDs will be created backend side)
          type: array
          items:
            type: object
        policyBundleId:
          type: string
          description: >
            An Anchore policy bundle ID. While retrieving this object, this is the
            bundle ID that contains this whitelist. While inserting/updating, this
            is the target bundle, and if not specified, the currently active bundle
            will be used.
    ScanningImageList:
      type: object
      required:
        - items
      properties:
        items:
          description: |
            A list of image names to be {white,black}listed
          type: array
          items:
            type: string
        policyBundleId:
          type: string
          description: >
            An Anchore policy bundle ID. While retrieving this object, this is the
            bundle ID that contains this image list. While inserting/updating,
            this is the target bundle, and if not specified, the currently active
            bundle will be used.
    ScanningMappingList:
      type: object
      required:
        - items
      properties:
        items:
          description: |
            A list of mappings as Anchore MappingRule elements
          type: array
          items:
            type: object
        policyBundleId:
          type: string
          description: >
            An Anchore policy bundle ID. While retrieving this object, this is
            the bundle ID that contains this mapping list. While
            inserting/updating, this is the target bundle, and if not specified,
            the currently active bundle will be used.
    ScanningAlert:
      type: object
      required:
        - name
        - type
        - enabled
        - autoscan
        - triggers
        - notificationChannelIds
      properties:
        alertId:
          type: string
          description: >
            Unique identifier associated with this alert. It's created backend
            side.
        enabled:
          type: boolean
          description: Whether this alert should actually be applied.
        name:
          type: string
          description: The name of the alert.
        description:
          type: string
          description: The description of the alert.
        type:
          type: string
          description: The type of the alert.
          enum:
            - runtime
            - repository
        scope:
          type: string
          description: >-
            An AND-composed string of predicates that selects the scope in which
            the alert will be applied. Only used when type=runtime.
        repositories:
          type: array
          items:
            type: object
            required:
              - registry
              - repository
              - tag
            properties:
              registry:
                type: string
                description: The image registry.
              repository:
                type: string
                description: The image repository.
              tag:
                type: string
                description: The image tag.
          description: >-
            The list of images for which the alert will be applied.
            Only used when type=repository.
        triggers:
          type: object
          items:
            type: object
            required:
              - unscanned
              - analysis_update
              - vuln_update
              - policy_eval
            properties:
              unscanned:
                type: boolean
                description: >-
                  True if the alert should trigger for unscanned images. Only
                  used when type=runtime.
              analysis_update:
                type: boolean
                description: >-
                  True if the alert should trigger when a new image is analyzed.
                  Only used when type=repository.
              vuln_update:
                type: boolean
                description: >-
                  True if the alert should trigger if the set of vulnerabilities
                  for an image changes.
              policy_eval:
                type: boolean
                description: >-
                  True if the alert should trigger when the final result of the
                  policy evaluation for a policy changes.
        autoscan:
          type: boolean
          description: True if the alert should automatically analyze unscanned images.
        onlyPassFail:
          type: boolean
          description: >-
            True if the policy_eval trigger should activate only when the result
            changes from pass to fail.
        notificationChannelIds:
          type: array
          items:
            type: integer
    ScanningQueryBody:
      type: object
      required:
        - scope
        - time
        - skipPolicyEvaluation
      properties:
        scope:
          type: string
          description: >-
            An AND-composed string of predicates that selects the scope in which
            the alert will be applied.
        time:
          type: object
          description: "The selected time range (unix timestamp, microseconds)"
          properties:
            from:
              type: integer
            to:
              type: integer
        skipPolicyEvaluation:
          type: boolean
          description: "If true, no policy evaluations will be triggered for the images."
    ScanningQueryResponse:
      type: object
      properties:
        scope:
          type: string
        time:
          type: object
          properties:
            from:
              type: integer
            to:
              type: integer
        images:
          type: array
          items:
            type: object
            properties:
              imageId:
                type: string
              repo:
                type: string
              tag:
                type: string
              digest:
                type: string
              parentDigest:
                type: string
              analysisStatus:
                type: string
              policyEvalStatus:
                type: string
              containers:
                type: array
                items:
                  type: object
                  properties:
                    containerId:
                      type: string
    ScanningReportQueryBody:
      type: object
      required:
        - queryType
        - scopeType
      properties:
        queryType:
          type: string
          description: Generate the report based on the given query type.
          enum:
            - image
            - vuln
            - pkg
            - policies
        scopeType:
          type: string
          description: Filter the results based on the given scope.
          enum:
            - runtime
            - static
        runtimeScope:
          type: object
          required:
            - scope
          properties:
            scope:
              type: string
              description: >-
                An AND-composed string of predicates that selects the scope in which
                the alert will be applied.
            time:
              type: object
              description: "The selected time range (unix timestamp, microseconds)"
              properties:
                from:
                  type: integer
                to:
                  type: integer
        staticScope:
          type: object
          properties:
            registry:
              type: string
              description: >-
                Filter the results based on the registry name.
            repository:
              type: string
              description: >-
                Filter the results based on the repository name.
            tag:
              type: string
              description: >-
                Filter the results based on the given image tag.
        vulnQueryFilter:
          type: object
          properties:
            vulnId:
              type: string
              description: >-
                Filter the results based on the vulnerability ID.
            age:
              type: object
              description: "The selected time range (value as specified by iso8601)"
              properties:
                from:
                  type: string
                  example: "2019-07-31T00:00:00-07:00"
                to:
                  type: string
                  example: "2019-08-02T20:15:24-07:00"
            severity:
              type: string
              description: >-
                Filter the results based on the vulnerability severity.
              enum:
                - Critical
                - High
                - Medium
                - Low
                - Negligible
                - Unknown
            fixAvailable:
              type: string
              description: >-
                Filter the results based on vulnerabolity with fixes.
            pkgName:
              type: string
              description: >-
                Filter the results based on the given package name.
            pkgVersion:
              type: string
              description: >-
                Filter the results based on the given package version.
        pkgQueryFilter:
          type: object
          properties:
            name:
              type: string
              description: >-
                Filter the results based on the given package name.
            version:
              type: string
              description: >-
                Filter the results based on the given package version.
        policyQueryFilter:
          type: object
          properties:
            imageDigest:
              type: string
              description: "Filter the results based on image digest"
            result:
              type: string
              description: >-
                Filter the results based on the result of a policy evaluation.
              enum:
                - pass
                - fail
            lastEvaluatedAfter:
              type: string
              description: >-
                Timestamp value for policy evaluation (value as specified by iso8601).
                Show all the policy evaluations after this timestamp.
              example: "2019-07-15T14:47:08-07:00"
            lastEvaluatedBefore:
              type: string
              description: >-
                Timestamp value for policy evaluation (value as specified by iso8601)
                Show all the policy evaluations before this timestamp.
              example: "2019-07-15T14:47:08-07:00"
        sort:
          description: Sorting method. Defaults to descendent.
          type: string
          enum:
            - desc
            - asc
        sortBy:
          type: string
          description: >-
            Field used to determine sorting column. Defaults to severity.
          enum:
            - imageName
            - tag
            - vulnId
            - fixedIn
            - severity
            - pkgName
            - pkgVersion
            - evaluationDate
            - bundleId
            - result
        offset:
          type: integer
          description: >-
            If specified, a 0-based index on the list. Only
            entries >= offset will be retrieved. Defaults to 0.
        limit:
          type: integer
          description: >-
            If specified, a limit on the number of entries retrieved.
            limit must be >= 1 and if it overflows the list all entries will be
            retrieved.
        filter:
          type: string
          description: The string on which the results are to be filtered.
    ScanningReportResponse:
      type: object
      properties:
        imageQueryResponse:
          type: array
          items:
            type: object
            properties:
              imageName:
                type: string
              vulnId:
                type: string
              severity:
                type: string
              age:
                type: integer
              pkgName:
                type: string
              pkgVersion:
                type: string
              tag:
                type: string
              fixedIn:
                type: string
              depName:
                type: string
              depVersion:
                type: string
              runtime:
                type: object
                properties:
                  clusterName:
                    type: string
                  namespace:
                    type: string
                  deployment:
                    type: string
                  pod:
                    type: string
                  hostname:
                    type: string
                  containerLabels:
                    type: string
        vulnQueryResponse:
          type: array
          items:
            type: object
            properties:
              vulnId:
                type: string
              severity:
                type: string
              age:
                type: integer
              pkgName:
                type: string
              pkgVersion:
                type: string
              tag:
                type: string
              fixedIn:
                type: string
              imageName:
                type: string
              depName:
                type: string
              depVersion:
                type: string
              runtime:
                type: object
                properties:
                  clusterName:
                    type: string
                  namespace:
                    type: string
                  deployment:
                    type: string
                  pod:
                    type: string
                  hostname:
                    type: string
                  containerLabels:
                    type: string
        pkgQueryResponse:
          type: array
          items:
            type: object
            properties:
              pkgName:
                type: string
              pkgVersion:
                type: string
              imageNames:
                type: array
                items:
                  type: string
              vulnIds:
                type: array
                items:
                  type: string
              runtime:
                type: array
                items:
                  type: object
                  properties:
                    clusterName:
                      type: string
                    namespace:
                      type: string
                    deployment:
                      type: string
                    pod:
                      type: string
                    hostname:
                      type: string
                    containerLabels:
                      type: string
        policyQueryResponse:
          type: array
          items:
            type: object
            properties:
              imageName:
                type: string
              tag:
                type: string
              result:
                type: string
              policyId:
                type: string
              evaluationDate:
                type: string
              finalAction:
                type: string
              imageDigest:
                type: string
              runtime:
                type: object
                properties:
                  clusterName:
                    type: string
                  namespace:
                    type: string
                  deployment:
                    type: string
                  pod:
                    type: string
                  hostname:
                    type: string
                  containerLabels:
                    type: string
        sort:
          type: string
          description: The sorting method used
        sortBy:
          type: string
          description: The field used to sort the result
        offset:
          type: integer
          description: The start offset used
        limit:
          type: integer
          description: The limit used. Must be >= 1.
        canLoadMore:
          type: boolean
          description: True if more results can be fetched.
        filter:
          type: string
          description: The string on which the results are to be filtered.
    ScanningRetentionBody:
      type: object
      required:
        - datePolicy
        - tagsPolicy
      properties:
        datePolicy:
          type: integer
          description: Date policy in seconds. By default, the range is between 30 and 90 days (in seconds)
          example: 2592000
        tagsPolicy:
          type: integer
          description: Tags policy. Number of tags that triggers the retention policy
          example: 5
    RuntimePolicyObjectOrigin:
      type: string
      description: A string naming the entity that created this rule. This, combined with the version identifier, corresponds to the "Published by" field in the UI. The origin should be "Secure UI" for objects created by the Secure UI, "Sysdig" for objects provided by Sysdig, and "Customer" for objects provided programmatically by the customer.
      enum: ["Secure UI", "Sysdig", "Customer"]
      example: "Secure UI"
    RuntimePolicyObjectVersionId:
      type: string
      description: A string representing the version of the file that contained this rule. This, combined with the origin, corresponds to the "Published by" field in the UI. For rules with origin == Sysdig/Customer, the version identifier should come from the version property of the FalcoRulesFiles object that originally contained the rule. For rules with origin == Secure UI, the version should be a constant string "current".
      example: "v1.2.3"
    RuntimePolicyObjectPublishedBy:
      type: object
      required: [origin, versionId]
      properties:
        origin:
          $ref: "#/components/schemas/RuntimePolicyObjectOrigin"
        versionId:
          $ref: "#/components/schemas/RuntimePolicyObjectVersionId"
    RuntimePolicyRuleType:
      type: object
      required:
        - ruleType
      properties:
        ruleType:
          type: string
          description: Indicates the rule type
          enum:
            - PROCESS
            - CONTAINER
            - FILESYSTEM
            - NETWORK
            - SYSCALL
            - FALCO
          example: "FALCO"
    LightRuntimePolicyRulesObject:
      type: object
      required:
        - ids
        - name
        - publishedBys
        - modifiedOn
      properties:
        ids:
          type: array
          items:
            type: integer
          description: The specific object ids having this name
          example: [6, 17, 21]
        name:
          type: string
          description: A name for this object. For Falco rules/macros/lists, should exactly be the value of the "rule"/"macro"/"list" property of the yaml object.
          example: "Write Below Binary Dir"
        publishedBys:
          type: array
          items:
            type: object
            allOf:
              - $ref: "#/components/schemas/RuntimePolicyObjectPublishedBy"
          description: A set of (origin,versionId) pairs for all the objects sharing this name.
        modifiedOn:
          type: number
          format: integer
          description: A timestamp (in milliseconds) of when the rules object was last modified.
          example: 1553702738288
    RuntimePolicyRulesObject:
      type: object
      required:
        - id
        - name
        - origin
        - versionId
        - filename
        - version
        - modifiedOn
        - createdOn
      properties:
        id:
          type: integer
          description: A unique identifier representing a specific rule
          example: 1
        name:
          type: string
          description: A name for this object. For Falco rules/macros/lists, should exactly be the value of the "rule"/"macro"/"list" property of the yaml object.
          example: "Write Below Binary Dir"
        origin:
          $ref: "#/components/schemas/RuntimePolicyObjectOrigin"
        versionId:
          $ref: "#/components/schemas/RuntimePolicyObjectVersionId"
        filename:
          type: string
          description: Name of the file in which the rule is defined. For Default Falco rules, this should come from the name property of the FalcoRulesFile object that contained this rule. For other falco rules, the filename should be "falco_rules.local.yaml". For non-falco rules, the filename should be "fast_rules.local.yaml".
          example: "falco_rules.local.yaml"
        version:
          type: number
          format: integer
          description: The version is incremented when the update is successful.
          example: 5
        createdOn:
          type: number
          format: integer
          description: A timestamp (in milliseconds) of when the rules object was first created.
          example: 1553702727177
        modifiedOn:
          type: number
          format: integer
          description: A timestamp (in milliseconds) of when the rules object was last modified.
          example: 1553702738288
    TaggedPolicyObject:
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          description: The set of tags
          items:
            type: string
          example: ["Kubernetes", "CIS Compliance", "File Integrity"]
    LightRuntimePolicyRule:
      allOf:
        - $ref: "#/components/schemas/LightRuntimePolicyRulesObject"
        - $ref: "#/components/schemas/RuntimePolicyRuleType"
        - $ref: "#/components/schemas/UsedFalcoObject"
        - $ref: "#/components/schemas/TaggedPolicyObject"
    RuntimePolicyRule:
      allOf:
        - $ref: "#/components/schemas/RuntimePolicyRulesObject"
        - $ref: "#/components/schemas/TaggedPolicyObject"
        - type: object
          required:
            - description
            - details
          properties:
            description:
              type: string
              description: A description of this rule. No newlines/formatting.
              example: "an attempt to write to any file below a set of binary directories"
            details:
              type: object
              oneOf:
                - $ref: "#/components/schemas/FalcoRuleDetails"
                - $ref: "#/components/schemas/ProcessRuleDetails"
                - $ref: "#/components/schemas/FileSystemRuleDetails"
                - $ref: "#/components/schemas/SyscallRuleDetails"
                - $ref: "#/components/schemas/ContainerImagesRuleDetails"
                - $ref: "#/components/schemas/NetworkRuleDetails"
    AppendableFalcoObject:
      type: object
      properties:
        append:
          type: string
          enum: [true, false]
          description: If true, this object should be appended to an object with the same name that has already been loaded. Defaults to false if not present.
          example: "true"
    BaseFalcoObject:
      allOf:
        - $ref: "#/components/schemas/RuntimePolicyRulesObject"
        - $ref: "#/components/schemas/AppendableFalcoObject"
    UsedFalcoObject:
      type: object
      required:
        - usedCount
      properties:
        usedCount:
          type: integer
          description: The number of rules that refer to this object (macro/list) OR the number of policies that refer to this rule
    LightFalcoMacro:
      allOf:
        - $ref: "#/components/schemas/LightRuntimePolicyRulesObject"
        - $ref: "#/components/schemas/UsedFalcoObject"
    FalcoMacro:
      allOf:
        - $ref: "#/components/schemas/BaseFalcoObject"
        - $ref: "#/components/schemas/FalcoCondition"
    LightFalcoList:
      allOf:
        - $ref: "#/components/schemas/LightRuntimePolicyRulesObject"
        - $ref: "#/components/schemas/UsedFalcoObject"
    FalcoList:
      allOf:
        - $ref: "#/components/schemas/BaseFalcoObject"
        - $ref: "#/components/schemas/FalcoItems"
    FalcoRuleDetails:
      allOf:
        - $ref: "#/components/schemas/AppendableFalcoObject"
        - $ref: "#/components/schemas/RuntimePolicyRuleType"
        - $ref: "#/components/schemas/FalcoCondition"
        - type: object
          required:
            - output
            - priority
          properties:
            output:
              type: string
              description: A string describing the output string to generate when this rule matches an event. Should exactly match the output property of the rule\'s output field
              example: "File below a known binary directory opened for writing (user=%user.name command=%proc.cmdline file=%fd.name)"
            priority:
              type: string
              description: A string describing the falco rule\'s priority. This is only included so the resulting rule can be converted back to yaml easily. For the purposes of policy events, the policy\'s severity should be used instead of this value.
              enum:
                - emergency
                - alert
                - critical
                - error
                - warning
                - notice
                - informational
                - debug
              example: "error"
            source:
              type: string
              description: A string naming the kinds of events this rule should run on. Note that this is different that the file containing the rule. This is naming an event source.
              enum:
                - k8s_audit
                - syscall
              example: syscall
    RuntimePolicyRuleList:
      type: object
      description: Represents a list of items and whether the list represents a set of items to match or not match
      required:
        - items
        - matchItems
      properties:
        items:
          type: array
          items:
            type: string
            description: the set of paths/syscalls/ports/etc.
            example: ["/bin", "usr/bin"]
        matchItems:
          type: boolean
          description: If true, the rule matches if the path/syscall/port matches one of the items in the list. If false, the rule matches if the path/syscall/port/etc does not match any of the items in the list.
          example: true
    ProcessRuleDetails:
      type: object
      required:
        - processes
        - ruleType
      properties:
        processes:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleList"
        ruleType:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleType"

    FileSystemRuleDetails:
      type: object
      required:
        - readWritePaths
        - readPaths
        - ruleType
      properties:
        readWritePaths:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleList"
        readPaths:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleList"
        ruleType:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleType"
    SyscallRuleDetails:
      type: object
      required:
        - syscalls
        - ruleType
      properties:
        syscalls:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleList"
        ruleType:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleType"
    ContainerImagesRuleDetails:
      type: object
      required:
        - containers
        - ruleType
      properties:
        containers:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleList"
        ruleType:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleType"
    NetworkRuleDetails:
      type: object
      required:
        - tcpListenPorts
        - udpListenPorts
        - allOutbound
        - allInbound
        - ruleType
      properties:
        allOutbound:
          type: boolean
          description: If true, then all outbound connection attempts match this rule
          example: true
        allInbound:
          type: boolean
          description: If true, then all inbound connection attempts match this rule
          example: true
        tcpListenPorts:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleList"
        udpListenPorts:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleList"
        ruleType:
          allOf:
            - $ref: "#/components/schemas/RuntimePolicyRuleType"
    FalcoCondition:
      type: object
      required:
        - condition
      properties:
        condition:
          type: object
          required:
            - condition
            - components
          properties:
            condition:
              type: string
              description: the full condition text exactly as represented in the yaml file
              example: "evt.type in (open, openat) and bin_dir and fd.name in (monitored_directories)"
            components:
              type: array
              description: an array containing the broken-up components of this falco rule\'s condition field
              items:
                type: object
                oneOf:
                  - $ref: "#/components/schemas/FalcoConditionText"
                  - $ref: "#/components/schemas/FalcoMacroReference"
                  - $ref: "#/components/schemas/FalcoListReference"
    FalcoItems:
      type: object
      required:
        - items
      properties:
        items:
          type: object
          required:
            - items
            - components
          properties:
            items:
              type: array
              description: the array of items as represented in the yaml List
              example:
                [
                  bash,
                  '"sh -c node -e \"require(''nan'')\""',
                  monitored_directories,
                ]
              items:
                type: string
                description: the item text or list name
                example: monitored_directories
            components:
              type: array
              description: an array containing the broken-up components of this falco list\'s items field
              items:
                type: object
                oneOf:
                  - $ref: "#/components/schemas/FalcoListText"
                  - $ref: "#/components/schemas/FalcoListReference"
    FalcoConditionText:
      type: object
      required:
        - conditionText
      properties:
        text:
          type: string
          description: An opaque hunk of condition text. May contain a mix of fields, relational operators, etc. Basically anything between Macro/List references.
          example: "evt.type in (open, openat) and "
    FalcoListText:
      type: object
      required:
        - listText
      properties:
        text:
          type: string
          description: Any sort of text that might make sense to put in a list
          example: "item 1"
    FalcoMacroReference:
      type: object
      required:
        - falcoMacroReference
      properties:
        falcoMacroReference:
          type: string
          description: The name of a FalcoMacro object. (Intentionally using names instead of ids so it can be passed directly from falco without falco having its own notion of rule/macro/list ids).
          example: "bin_dir"
    FalcoListReference:
      type: object
      required:
        - falcoListReference
      properties:
        falcoListReference:
          type: string
          description: The name of a FalcoList object. (Intentionally using names instead of ids so it can be passed directly from falco without falco having its own notion of rule/macro/list ids).
          example: "monitored_directories"
    BenchmarkModule:
      type: object
      properties:
        name:
          type: string
          description: The name of the module for benchmarking
          example: "docker-bench-security"
        displayName:
          type: string
          description: The text used to identify the benchmark module to an end user
          example: "CIS Docker Bench"
    BenchmarkVersion:
      type: object
      properties:
        name:
          type: string
          description: The text used to identify the benchmark version that is passed as an argument to the kube bench program
          example: "cis-1.4"
        displayName:
          type: string
          description: The text used to identify the benchmark version to an end user
          example: "Kubernetes v1.4"
        enabled:
          type: boolean
          description: True if the user can create new tasks with this version
          example: true
    MetricDescriptorResponseWrapper:
      type: object
      properties:
        total:
          type: integer
          description: the entire quantity of results
        offset:
          type: integer
          description: the location of the returned subset of results relative to the entire list of results
        labelDescriptors:
          type: array
          items:
            $ref: "#/components/schemas/MetricDescriptor"
    MetricDescriptor:
      type: object
      properties:
        id:
          type: string
          description: The name of the descriptor
          example: "agent.id"
        metricType:
          type: string
          example: "tag"
        type:
          type: string
          example: "string"
        scale:
          type: integer
        description:
          type: string
        category:
          type: string
          example: "host"
        namespaces:
          type: array
          items:
            type: string
            example: "host"
        scopes:
          type: array
          items:
            type: string
            example: "container"
        timeAggregations:
          type: array
          items:
            type: string
            example: "concat"
        groupAggregations:
          type: array
          items:
            type: string
            example: "concat"
        identity:
          type: boolean
        canMonitor:
          type: boolean
        canGroupBy:
          type: boolean
        canFilter:
          type: boolean
        heuristic:
          type: boolean