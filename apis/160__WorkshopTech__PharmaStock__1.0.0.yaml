penapi: 3.0.0
info:
  description: This is a simple API
  version: "1.0.0"
  title: Simple Inventory API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /drug:
    get: 
      tags: 
        - Drug
      summary: get reminder list 
      operationId: getDrugs
      description: Get all reminder 
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Drug'
        '400':
          description: bad input parameter
    post:
      tags:
        - Drug
      summary: adds a drug
      operationId: addDrug
      description: Adds a drug to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drug'
        description: Inventory item to add
  /reminder:
    get: 
      tags: 
        - Reminder
      summary: get reminder list 
      operationId: getReminders
      description: Get all reminder 
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reminder'
        '400':
          description: bad input parameter
    post:
      tags:
        - Reminder
      summary: adds an reminder
      operationId: addReminder
      description: Adds an reminder to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reminder'
        description: Inventory item to add  
  /users:
    post:
      tags:
        - Users
      summary: adds an user
      operationId: addUser
      description: Adds an user to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithPassword'
        description: Inventory item to add
  /users/{id}:
    get:
      tags:
        - Users
      summary: Gets a user by ID.
      description: >
        A detailed description of the operation.
        Use markdown for rich text representation,
        such as **bold**, *italic*, and [links](https://swagger.io).
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
    patch:
      tags:
        - Users
      summary: patch a user by ID.
      description: >
        A detailed description of the operation.
        Use markdown for rich text representation,
        such as **bold**, *italic*, and [links](https://swagger.io).
      operationId: patchUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithPassword'
        description: Inventory item to add
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/WorkshopTech/workshops/1.0.0
  - url: 'https://virtserver.swaggerhub.com/WorkshopTech/medocs/1.0.0'
components:
  schemas:
    Drug:
      type: object
      required: 
        - name
        - stockBox
        - stockUnit
        - molecules
      properties:
        id: 
          type: integer
        name: 
          type: string
          example: "paracetamol"
        stockBox: 
          type: integer
          example: 2
        stockUnit: 
          type: integer
          example: 15
        description: 
          type: string
          example: "Une description"
        molecules: 
          type: string
          example: "H2O"
        sigle: 
          type: string
          example: "le sigle"
        allergenes: 
          type: string
          example: "mon allergenes"
    Reminder: 
      type: object
      required: 
        - startDate
        - endDate
        - stockDrug
        - name
      properties: 
        name: 
          type: string
          example: "my reminder"
        startDate: 
          type: object
          format: date-time
          example: "15-02-2018"
        endDate: 
          type: object
          format: date-time
          example: "15-02-2018"
        frequence: 
          type: integer 
        stockDrug: 
          type: integer
    UserWithPassword:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            password:
              type: string
              example: "sonpassword"
    User:
      type: object
      required:
        - firstName
        - lastName
        - age
        - email
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
          example: Jean
        lastName:
          type: string
          example: Dupont
        email:
          type: string
          example: JeanDupon@sonmail.com
        age:
          type: integer
          example: 45
        allergies:
          type: string
          example: monallergies
        others:
          type: string