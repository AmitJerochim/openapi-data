openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - url: http://ccms.domain:port/
  - url: https://ccms.domain:port/
    
info:
  description: >-
    API documentation, this swagger describes the requests and responses between
    the Consent Management System backend and the partner's backend.


    The format of the response depends on the HTTP status:

    - in case the status is **successful** (`20X`), you'll have a JSON response
    with some data (depends on the API)

    - in case the status is **failed** (`400`, `404`, `500` ...), you'll have
    the JSON common error response from SQL server


    The list of returned HTTP statuses and response codes can be found in the
    description of each API.
      
    ```
      Note: All provider organizations are in bulgarian local time. All DateTime properties are in ( ISO 8601 and RFC 3339 yyyy-MM-ddTHH:mm:ssZ ) format
    ```
  version: "1.0.1"
  title: Consent Managment API
  contact:
    name: Bulpros Consulting AD
tags:
  - name: dataSubject
    description: All dataSubject related operations
  - name: consent
    description: All consent related operations
paths:
  /api/rpc/subject.dataSubject.add:
    post:
      tags:
        - dataSubject
      summary: Request for dataSubject create
      operationId: dataSubjectCreate
      description: dataSubject request operation.
      security: 
        - BasicAuth: []
      parameters:
        - name: X-Tenant
          in: header
          required: true
          description: 'Passing tenant to API. Example: name of bank'
          schema:
            type: string
      responses:
        '200':
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/DataSubjectCreateResponse'
        '400':
          description: Bad Request. Request error / Database error
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not Found.
        '500':
          description: >-
            Technical errors (caused by server) , include all unchecked
            exceptions (internal error) and request-timeout'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSubjectCreateBody'
        description: Request's JSON body, see Model description
  /api/rpc/consent.consent.add:
    post:
      tags:
        - consent
      summary: Request for consent create
      operationId: consentCreate
      description: |
        consent  request operation.
      security: 
        - BasicAuth: []
      parameters:
        - name: X-Tenant
          in: header
          required: true
          description: 'Passing tenant to API. Example: name of bank'
          schema:
            type: string
      responses:
        '200':
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ConsentCreateResponse'
        '400':
          description: Bad Request. Request error / Database error
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not Found.
        '500':
          description: >-
            Technical errors (caused by server) , include all unchecked
            exceptions (internal error) and request-timeout'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentCreateBody'
        description: Inventory item to add
  /api/rpc/consent.consent.edit:
    post:
      tags:
        - consent
      summary: Request for consent edit
      operationId: consentEdit
      description: |
        consent  request operation.
      security: 
        - BasicAuth: []
      parameters:
        - name: X-Tenant
          in: header
          required: true
          description: 'Passing tenant to API. Example: name of bank'
          schema:
            type: string
      responses:
        '200':
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ConsentCreateResponse'
        '400':
          description: Bad Request. Request error / Database error
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not Found.
        '500':
          description: >-
            Technical errors (caused by server) , include all unchecked
            exceptions (internal error) and request-timeout'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentEditBody'
        description: Inventory item to add
  /api/rpc/consent.consent.fetch:
    post:
      tags:
        - consent
      summary: Request for consent fetch
      operationId: consentFetch
      description: |
        consent  request operation.
      security: 
        - BasicAuth: []
      parameters:
        - name: X-Tenant
          in: header
          required: true
          description: 'Passing tenant to API. Example: name of bank'
          schema:
            type: string
      responses:
        '200':
          description: Created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ConsentFetchResponse'
        '400':
          description: Bad Request. Request error / Database error
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not Found.
        '500':
          description: >-
            Technical errors (caused by server) , include all unchecked
            exceptions (internal error) and request-timeout'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentFetchBody'
        description: Inventory item to add
  /health/{tenant}:
    get:
      tags:
        - monitoring
      summary: Request for checking evironment 
      description: |
        evironment request operation.
      operationId: environmentCheck
      parameters:
        - name: tenant
          in: path
          description: 'Passing tenant to request. Example: name of bank'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  backEnd:
                    type: boolean
                    example: true
                  db:
                    type: boolean
                    example: true
        '400':
          description: Bad Request. Request error / Database error
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not Found.
        '500':
          description: >-
            Technical errors (caused by server) , include all unchecked
            exceptions (internal error) and request-timeout'
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: Unauthorized! Information is missing or invalid
      headers:
        Authentication:
          description: API key used to authenticate yourself (prefixed with Basic).
          schema:
            type: string
        X-Tenant:
          description: Passing tenant to API
          schema:
            type: string
  schemas:
    DataSubjectCreateBody:
      type: object
      required: 
        - method
        - params
      properties:
        method:
          type: string
          default: subject.dataSubject.add
          example: subject.dataSubject.add
        params:
          type: object
          required:
            - dataSubject
          properties:
            dataSubject:
              type: object
              required:
                - identifierType
                - identifierValue
                - corporate
              properties:
                identifierType:
                  type: string
                  example: username
                identifierValue:
                  type: string
                  example: hristo.petrov
                corporate:
                  type: string
                  example: 0
                  enum: [
                    "0",
                    "1"
                  ]
            dataSubjectCategory:
              type: array
              items:
                type: string
                example: 2
              description: expecting array of ids
    ConsentCreateBody:
      type: object
      required: 
        - method
        - params
      properties:
        method:
          type: string
          example: consent.consent.add
        params:
          type: object
          required:
            - consent
          properties:
            consent:
              type: object
              properties:
                purposeId:
                  type: integer
                  example: 101
                source:
                  type: string
                  example: someSource
                consentType:
                  type: string
                  example: someConsentType
                consentLink:
                  type: string
                  example: url
                dataSubjectId:
                  type: integer
                  example: 20
            consentAttachment:
              type: array
              minItems: 0
              maxItems: 10
              items:
                type: object
                required:
                  - consentFileId
                properties:
                  consentFileId:
                    type: string
                    example: 1
            consentAttributes:
              type: array
              items:
                type: string
                example: 1013
              description: expecting array of ids
              uniqueItems: true
            consentExternalProcessors:
              type: array
              items:
                type: string
                example: 3
              description: expecting array of ids
              uniqueItems: true
            consentCustomAttributes:
              type: array
              items:
                type: object
                required:
                  - attributeKey
                  - attributeType
                  - attributeValue
                properties:
                  attributeType:
                    type: string
                    example: text
                    enum: [
                      text,
                      number,
                      date
                    ]
                  attributeKey:
                    type: string
                    example: name
                  attributeValue:
                    type: string
                    example: Ivan
                  purposeCatId:
                    type: string
                    example: null
                    default: null
                  purposeAttributeId:
                    type: string
                    example: null
                    default: null
            consentContactChannel:
              type: array
              items:
                type: string
                example: 2
              description: expecting array of ids
              uniqueItems: true
    ConsentEditBody:
      type: object
      required: 
        - method
        - params
      properties:
        method:
          type: string
          default: consent.consent.edit
          example: consent.consent.edit
        params:
          type: object
          required:
            - consent
          properties:
            consent:
              type: object
              properties:
                statusId:
                  type: integer
                  example: 2
    ConsentFetchBody:
      type: object
      required: 
        - method
        - params
      properties:
        method:
          type: string
          default: consent.consent.fetch
          example: consent.consent.fetch
        params:
          type: object
          required:
            - dataSubjectId
          properties:
            dataSubjectId:
              type: integer
              example: 3
    DataSubjectCreateResponse:
      type: array
      items:
        type: array
        items:
          type: object
          properties:
            dataSubjectId:
              type: string
              example: 1
            status:
              type: string
              example: active
    ConsentCreateResponse:
      type: array
      items:
        type: array
        items:
          type: object
          properties:
            consentId:
              type: string
              example: 1
            status:
              type: string
              example: received
              description: >-
                consent statuses [received, valid, withdrawn, rejected, expired]
    ConsentFetchResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              consentId:
                type: string
                example: 12
              purposeId:
                type: string
                example: 17
              source:
                type: string
                example: someSource
              statusId:
                type: string
                example: 1
              purposeName:
                type: string
                example: Recruitment
              creationDate:
                type: string
                format: date-time
                description: 'Datetime of transaction (format: ISO 8601 and RFC 3339 yyyy-MM-ddTHH:mm:ssZ)'
                example: '2018-04-21T12:17:17.487Z'
              endDate:
                type: string
                format: date-time
                description: 'Datetime of transaction (format: ISO 8601 and RFC 3339 yyyy-MM-ddTHH:mm:ssZ)'
                example: '2018-04-21T12:17:17.487Z'
              lastUpdateDate:
                type: string
                format: date-time
                description: 'Datetime of transaction (format: ISO 8601 and RFC 3339 yyyy-MM-ddTHH:mm:ssZ)'
                example: '2018-04-21T12:17:17.487Z'
              expiryDate:
                type: string
                format: date-time
                description: 'Datetime of transaction (format: ISO 8601 and RFC 3339 yyyy-MM-ddTHH:mm:ssZ)'
                example: '2018-04-21T12:17:17.487Z'
              rowNum:
                type: string
                example: "1"
        pagination:
          type: object
          properties:
            pageSize:
              type: integer
              example: 25
            recordsTotal:
              type: integer
              example: 3
            pageNumber:
              type: integer
              example: 1
            pagesTotal:
              type: integer
              example: 1
    error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
