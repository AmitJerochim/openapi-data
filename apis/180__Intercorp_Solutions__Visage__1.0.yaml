openapi: 3.0.0
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Intercorp_Solutions/Visage/1.0
  - description: URL for Visage
    url: 'https://ec2-54-184-61-67.us-west-2.compute.amazonaws.com'
info:
  description: >-
    An API for Facial Recognition.
  version: "1.0"
  title: Visage by Intercorp Solutions
  
tags:
  - name: Collections
    description: >-
      Collections are groupings of persons. Each person must be a member of one
      and only one collection. A collection is identified by an id.
  - name: Persons
    description: >-
      A person represents a single identity identified by the tuple
      `(collection_id, person_id)`. Each person must belong to one and only one
      collection.
  - name: Faces
    description: >-
      A person identified by `(collection_id, person_id)` in a collection may
      have several images registered for facial recognition. Each face has its
      own `id` in addition to `(collection_id, person_id)` that links a
      registered face to a person
  - name: Enrollment
    description: >-
      An enrollment is an abstraction built on top of collections, persons, and
      faces.
paths:
  /collections:
    get:
      tags:
        - Collections
      summary: gets a list of collections
      operationId: getCollections
      description: |
        By passing in the appropriate options, you can search for
        available collections in the system
      parameters:
        - in: header
          name: X-API-Key
          description: authentication for the API
          required: true
          schema:
            type: string
        - in: query
          name: search
          description: pass an optional search string for looking up collections
          required: false
          schema:
            type: string
        - in: query
          name: sortkey
          description: >-
            the collections are sorted by this key. It can only be 'id' or
            'name'
          schema:
            type: string
            enum:
              - id
              - name
        - in: query
          name: fromkey
          description: >-
            if specified, records will only be returned only if the sort key
            (name or id) > than the specified fromkey. This item cannot be
            specified if beforekey is also specified.
          schema:
            type: string
        - in: query
          name: beforekey
          description: >-
            if specified, records will only be returned only if the sort key
            (name or id) < than the specified beforekey. This item cannot be
            specified if fromkey is also specified.
          schema:
            type: string
        - in: query
          name: limit
          description: maximum number of records to return (default 25)
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 500
      responses:
        '200':
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionsResponse'
        '400':
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          description: an error related to incorrect values in API call
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          description: an error related to rate limits exceeded for your API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRateLimitResponse'
        '500':
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          description: an error related to a database or unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          description: an error if the API is temporarily overloaded with requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnavailableResponse'
  '/collection/{id}':
    description: |
      This resource represents a collection in the system.
      Each collection is identified by a numeric `id`.
    get:
      tags:
        - Collections
      summary: gets a collection
      operationId: getCollection
      parameters:
        - name: X-API-Key
          in: header
          description: authentication for the API
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: collection ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
    delete:
      tags:
        - Collections
      summary: delete a collection
      operationId: deleteCollection
      parameters:
        - name: X-API-Key
          in: header
          description: authentication for the API
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: collection ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  /collection:
    post:
      description: >-
        The `id` and the `name` of the collection are specified in the body. If
        `id` is not specified, a new `id` will be generated.
      tags:
        - Collections
      summary: create a collection
      operationId: createCollection
      parameters:
        - in: header
          name: X-API-Key
          description: authentication for the API
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
    put:
      tags:
        - Collections
      summary: update a collection
      description: >-
        The `id` and `name` must be specified in the body. This operation
        updates the name of the collection identified by `id`
      operationId: updateCollection
      parameters:
        - name: X-API-Key
          in: header
          description: authentication for the API
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  '/persons/{collection_id}':
    get:
      tags:
        - Persons
      summary: gets a list of persons in the specified collection
      operationId: getPersons
      description: |
        By passing in the appropriate options, you can search for
        available persons in the system
      parameters:
        - in: header
          name: X-API-Key
          description: authentication for the API
          required: true
          schema:
            type: string
        - name: collection_id
          in: path
          description: collection ID
          required: true
          schema:
            type: string
        - in: query
          name: search
          description: pass an optional search string for looking up persons
          required: false
          schema:
            type: string
        - in: query
          name: sortkey
          description: persons are sorted by this key. It can only be 'id' or 'name'
          schema:
            type: string
            enum:
              - id
              - name
        - in: query
          name: fromkey
          description: >-
            if specified, records will only be returned only if the sort key
            (name or id) > than the specified fromkey. This item cannot be
            specified if beforekey is also specified.
          schema:
            type: string
        - in: query
          name: beforekey
          description: >-
            if specified, records will only be returned only if the sort key
            (name or id) < than the specified beforekey. This item cannot be
            specified if fromkey is also specified.
          schema:
            type: string
        - in: query
          name: limit
          description: maximum number of records to return (default 25)
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 500
      responses:
        '200':
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonsResponse'
        '400':
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          description: an error related to incorrect values in API call
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          description: an error related to rate limits exceeded for your API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRateLimitResponse'
        '500':
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          description: an error related to a database or unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/person/{collection_id}/{person_id}':
    get:
      tags:
        - Persons
      summary: gets a person
      operationId: getPerson
      parameters:
        - name: X-API-Key
          in: header
          description: authentication for the API
          required: true
          schema:
            type: string
        - name: collection_id
          in: path
          description: collection ID
          required: true
          schema:
            type: string
        - name: person_id
          in: path
          description: person ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
    delete:
      tags:
        - Persons
      summary: deletes a person
      operationId: deletePerson
      parameters:
        - name: X-API-Key
          in: header
          description: authentication for the API
          required: true
          schema:
            type: string
        - name: collection_id
          in: path
          description: collection ID
          required: true
          schema:
            type: string
        - name: person_id
          in: path
          description: person ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDeleteResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  /person:
    post:
      tags:
        - Persons
      summary: create a person
      description: >-
        If only `name` and `collection_id` are specified in the body, a
        `person_id` is automatically generated, otherwise if `person_id` is also
        specified, the system will use the specified value. Optional argument
        `notes` can be added if there is a need to specify additional
        information about a person. The `thumbnail` is a base64 encoded image.
        You could convert an image to a base64 string
        [here](https://www.browserling.com/tools/image-to-base64) or view a
        base64 string as an image
        [here](https://codebeautify.org/base64-to-image-converter).
      operationId: createPerson
      parameters:
        - in: header
          name: X-API-Key
          description: authentication for the API
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonPostResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
    put:
      tags:
        - Persons
      summary: update a person
      description: >-
        A `collection_id` and `person_id` must be specified in the body to
        identify a person, the values of all the other fields will be used to
        update the existing values. Optional argument `notes` can be added if
        there is a need to specify additional information about a person. The
        `thumbnail` is a base64 encoded image. You could convert an image to a
        base64 string [here](https://www.browserling.com/tools/image-to-base64)
        or view a base64 string as an image
        [here](https://codebeautify.org/base64-to-image-converter).
      operationId: updatePerson
      parameters:
        - name: X-API-Key
          in: header
          description: authentication for the API
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  '/faces/{collection_id}/{person_id}':
    get:
      description: >
        Use this endpoint to get the registered faces for a particular person
        identified by `(collection_id, person_id)` This method returns a list of
        faces where each face has a thumbnail as a base64 encoded image.
      tags:
        - Faces
      summary: gets a list of faces
      operationId: getFaces
      parameters:
        - name: X-API-Key
          in: header
          description: authentication for the API
          required: true
          schema:
            type: string
        - name: collection_id
          in: path
          description: collection ID
          required: true
          schema:
            type: string
        - name: person_id
          in: path
          description: person ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacesResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  '/face/{collection_id}/{person_id}/{id}':
    delete:
      tags:
        - Faces
      summary: deletes a face
      operationId: deleteFace
      parameters:
        - name: X-API-Key
          in: header
          description: authentication for the API
          required: true
          schema:
            type: string
        - name: collection_id
          in: path
          description: collection ID
          required: true
          schema:
            type: string
        - name: person_id
          in: path
          description: person ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: face ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  /face:
    post:
      tags:
        - Faces
      summary: create a face
      description: >-
        This endpoint can be used to register an additional face for the person
        specified by `(collection_id, person_id)`. The thumbnail is a base64
        encoded image. You could convert an image to a base64 string
        [here](https://www.browserling.com/tools/image-to-base64) or view a
        base64 string as an image
        [here](https://codebeautify.org/base64-to-image-converter)
      operationId: createFace
      parameters:
        - in: header
          name: X-API-Key
          description: authentication for the API
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Face'
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  /enrollment:
    description: |
      Takes a collection id, person_id and a list of descriptors
      for enrollment. Returns the ids of the faces created.
    post:
      tags:
        - Enrollment
      summary: enroll a face
      description: >-
        <p>This convenience endpoint allows for the creation/update of a
        collection, person and associated faces all in one API call.</p> <p>For
        a specified <code>collection_id</code> if a collection by that id does
        not exist, it will be created.</p> <p>If a <code>collection_name</code>
        is specified then it will be used if a collection is created or if a
        collection already exists, its name will be updated.</p> <p>If a
        <code>collection_name</code> is not specified and a collection is
        created due to a new <code>collection_id</code>, then the created
        collection will have an auto-generated random name.</p> <p>For a
        specified <code>person_id</code> if a person by that id does not exist,
        it will be created.</p> <p>If a <code>person_name</code> is specified
        then it will be used if a person is created or if a person already
        exists, its name will be updated.</p> <p>If a <code>person_name</code>
        is not specified and a person is created due to a new
        <code>person_id</code>, then the created person will have an
        auto-generated random name.</p> <p>Optional argument <code>notes</code>
        can be added if there is a need to specify additional information
        related to an enrolled person.</p> <p>The <code>images</code> parameter
        in the body must contain a list of strings which are base64 encoded
        images of a person's face. More than one image of a person can be
        specified and <b>you will obtain better results by specifying more than
        one image of various views of a person's face.</b></p> <p>Minimally, to
        use this API call, you must specify <code>collection_id</code>,
        <code>person_id</code>, <code>images</code>.</p> <p>This call replaces
        all previously registered faces by the images specified in the
        <code>images</code> parameter. If you are incrementally adding images
        for a person (instead of one-shot as supported by this API call), it is
        recommended that you use the <code>/face</code> end-point instead. </p>
        <p>You could convert an image to a base64 string <a
        href="https://www.browserling.com/tools/image-to-base64">here</a> or
        view a base64 string as an image <a
        href="https://codebeautify.org/base64-to-image-converter">here</a></p>
      operationId: enroll
      parameters:
        - in: header
          name: X-API-Key
          description: authentication for the API
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  '/enrollment/{collection_id}/{person_id}':
    delete:
      tags:
        - Enrollment
      summary: deletes enrolled faces by ID
      description: >-
        For a person specified by `(collection_id, person_id)`, this call
        removes the person and all registered faces. This call is syntactic
        sugar for `DELETE /person/collection_id/person_id`. It is to be noted
        that this call **does not** delete the collection that the person
        belongs too.
      operationId: deleteEnrollment
      parameters:
        - name: X-API-Key
          in: header
          description: authentication for the API
          required: true
          schema:
            type: string
        - name: collection_id
          in: path
          description: collection ID
          required: true
          schema:
            type: string
        - name: person_id
          in: path
          description: person ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollDeleteResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  /detect:
    post:
      tags:
        - Detect
      summary: detect a face crop
      description: >-
        <p>This endpoint allows you to detect a face crop from a single
        <code> image</code>. </p> <p>Before using <code> searchdetections</code> 
        endpoint, initially you need to detect a face crop from a base64 image.
        <p>You could convert an image to a base64 string <a
        href="https://www.browserling.com/tools/image-to-base64">here</a> or
        view a base64 string as an image <a
        href="https://codebeautify.org/base64-to-image-converter">here</a>.</p>
      operationId: detect
      parameters:
        - in: header
          name: X-API-Key
          description: authentication for the API
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Detect'
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  /search:
    post:
      tags:
        - Search
      summary: search for a face
      description: >-
        <p>This endpoint allows you to search for faces from a specified list of
        <code> images</code>. To achieve better results, it is a recommended
        practice that you search with more than one image with several different
        angles of a person's face.</p> <p>If a <code>collection_id</code> is
        supplied, the search will only be within the specified collection.</p>
        <p>If a <code>person_id</code> is supplied along with
        <code>collection_id</code>, the search will only serve as a verification
        which performs a one-to-one match between the images of the person
        supplied in the request and the images of the person in the database.
        <p>You could convert an image to a base64 string <a
        href="https://www.browserling.com/tools/image-to-base64">here</a> or
        view a base64 string as an image <a
        href="https://codebeautify.org/base64-to-image-converter">here</a>.</p>
      operationId: search
      parameters:
        - in: header
          name: X-API-Key
          description: authentication for the API
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Search'
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
  /searchdetections:
    post:
      tags:
        - Search
      summary: search by a face crop
      description: >-
        <p>This endpoint allows you to search only by face crops from a specified list of
        <code> images</code>. It is possible to parse a list of dictionaries with different parameters
        in one go. To achieve better results, it is a recommended
        practice that you search with more than one image with several different
        angles of a person's face.</p> <p>If a <code>collection_id</code> is
        supplied, the search will only be within the specified collection.</p>
        <p>If a <code>person_id</code> is supplied along with
        <code>collection_id</code>, the search will only serve as a verification
        which performs a one-to-one match between the face crop of the person
        supplied in the request and the images of the person in the database.
        <p>You could convert a face crop to a base64 string <a
        href="https://www.browserling.com/tools/image-to-base64">here</a> or
        view a base64 string as a face crop <a
        href="https://codebeautify.org/base64-to-image-converter">here</a>.</p>
      operationId: searchdetections
      parameters:
        - in: header
          name: X-API-Key
          description: authentication for the API
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SearchDetections'
      responses:
        '200':
          description: Successful operation
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: The total number of requests allowed for the active window.
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests remaining in the active window.
            X-RateLimit-Reset:
              schema:
                type: integer
              description: The UTC date/time at which the current rate limit window resets.
            Retry-After:
              schema:
                type: integer
              description: >-
                Seconds to retry after or the http date when the Rate Limit will
                be reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDetectionsResponse'
        '400':
          description: please refer to **/collections** for error format and headers
        '429':
          description: please refer to **/collections** for error format and headers
        '500':
          description: please refer to **/collections** for error format and headers
components:
  schemas:
    Collection:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
    CollectionsResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
    CollectionResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          $ref: '#/components/schemas/Collection'
    DeleteResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          $ref: '#/components/schemas/DeletedObject'
    DeletedObject:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    Person:
      type: object
      required:
        - collection_id
      properties:
        collection_id:
          type: string
        person_id:
          type: string
        name:
          type: string
        notes:
          type: string
          example: An example note
        thumbnail:
          type: string
          example: >-
            iVBORw0KGgoAAAANSUhEUgAAABcAAAAXCAMAAADX9CSSAAADAFBMVEUrKin///8tLCosKyrz8/P+/v709PT39/f6+vqura0XFhQpKCcAAAAZGBYmJSQiISAcGxkSEA4jIh/k5OTd3d03NjXU1NTNzc3r6+vj4+OHhoZ1dHQODAk8OztGRURiYmG7u7tpaGibm5qlpKSUk5NZWFd8fHuzs7LExMRPTk6MjIx3d3ZKSUhCQUBlZWTKyckwMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6Ojo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tMTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1eXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29wcHBxcXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGCgoKDg4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OUlJSVlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWmpqanp6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4uLi5ubm6urq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnKysrLy8vMzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc3Nzd3d3e3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u7u7v7+/w8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7///+FAnGNAAAAv0lEQVR4nGWQ2w4CIQxEW2gBdTfxA/ZNH/z/L5TpZS9KAiknzHQKNWWsIW2hxyx6M0KJlbDWLmqEcGhiqikHVxF9Gi6FQk7AQ9nx3Olqp/OavINPjD6ByTGTY0483wEzSQQojrchro9gfY3nXRofc70Xa73ya3PgueC9Fx/I6eQ9x4pIHXONRomjsPzc81p33hgBfnGdiUxjJolrLXfLfzu1hMqyTX5cvajGT195FDbX1Tt+A/zq7QNgruUvv+gXvbQEnGtoWBUAAAAASUVORK5CYII=
    PersonsResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          type: array
          items:
            $ref: '#/components/schemas/Person'
    PersonResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          $ref: '#/components/schemas/Person'
    DeletedPerson:
      type: object
      required:
        - collection_id
        - person_id
      properties:
        collection_id:
          type: string
        person_id:
          type: string
    PersonDeleteResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          $ref: '#/components/schemas/DeletedPerson'
    PostPerson:
      type: object
      required:
        - collection_id
      properties:
        collection_id:
          type: string
        person_id:
          type: string
        name:
          type: string
        thumbnail:
          type: string
          example: >-
            iVBORw0KGgoAAAANSUhEUgAAABcAAAAXCAMAAADX9CSSAAADAFBMVEUrKin///8tLCosKyrz8/P+/v709PT39/f6+vqura0XFhQpKCcAAAAZGBYmJSQiISAcGxkSEA4jIh/k5OTd3d03NjXU1NTNzc3r6+vj4+OHhoZ1dHQODAk8OztGRURiYmG7u7tpaGibm5qlpKSUk5NZWFd8fHuzs7LExMRPTk6MjIx3d3ZKSUhCQUBlZWTKyckwMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6Ojo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tMTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1eXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29wcHBxcXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGCgoKDg4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OUlJSVlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWmpqanp6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4uLi5ubm6urq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnKysrLy8vMzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc3Nzd3d3e3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u7u7v7+/w8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7///+FAnGNAAAAv0lEQVR4nGWQ2w4CIQxEW2gBdTfxA/ZNH/z/L5TpZS9KAiknzHQKNWWsIW2hxyx6M0KJlbDWLmqEcGhiqikHVxF9Gi6FQk7AQ9nx3Olqp/OavINPjD6ByTGTY0483wEzSQQojrchro9gfY3nXRofc70Xa73ya3PgueC9Fx/I6eQ9x4pIHXONRomjsPzc81p33hgBfnGdiUxjJolrLXfLfzu1hMqyTX5cvajGT195FDbX1Tt+A/zq7QNgruUvv+gXvbQEnGtoWBUAAAAASUVORK5CYII=
    PersonPostResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          $ref: '#/components/schemas/PostPerson'
    Face:
      type: object
      required:
        - collection_id
        - person_id
      properties:
        collection_id:
          type: string
        person_id:
          type: string
        thumbnail:
          type: string
          example: >-
            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
    FacesResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          type: array
          items:
            $ref: '#/components/schemas/Face'
    FaceResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          $ref: '#/components/schemas/Face'
    Enrollment:
      type: object
      required:
        - collection_id
        - person_id
        - images
      properties:
        collection_id:
          type: string
          example: MusiciansId
        collection_name:
          type: string
          example: Musicians
        person_id:
          type: string
          example: AdeleId
        person_name:
          type: string
          example: Adele (no glasses)
        notes:
          type: string
          example: An example note
        images:
          type: array
          items:
            type: string
            example: >-
              
    EnrollmentResult:
      type: object
      required:
        - id
        - collection_id
        - collection_name
        - person_id
        - person_name
      properties:
        id:
          type: string
          format: uuid
        collection_id:
          type: string
          example: MusiciansId
        collection_name:
          type: string
          example: Musicians
        person_id:
          type: string
          example: AdeleId
        person_name:
          type: string
          example: Adele (no glasses)
    EnrollResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          type: array
          items:
            $ref: '#/components/schemas/EnrollmentResult'
    EnrollDeleteResponse:
      type: object
      required:
        - response_id
        - response
      properties:
        response_id:
          type: string
          format: uuid
        response:
          $ref: '#/components/schemas/DeletedPerson'
    Detect:
      type: object
      required:
        - image
      properties:
        image:
          type: string
          example: >-
              
    DetectResult:
      type: object
      required:
        - bounding_box
        - face_crop
        - confidence
      properties:
        bounding_box:
          type: string
          example: {'left': 299,
                    'top': 94,
                    'right': 437,
                    'bottom': 276}
        face_crop:
          type: string
          example: >-
            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
        confidence:
          type: string
          example: 0.99
    DetectResponse:
      type: object
      required:
        - response_id
        - response
        - collection_id
      properties:
        response_id:
          type: string
          format: uuid
        response:
          type: array
          items:
            $ref: '#/components/schemas/DetectResult'
    Search:
      type: object
      required:
        - images
      properties:
        collection_id:
          type: string
          example: MusiciansId
        person_id:
          type: string
          example: AdeleId
        images:
          type: array
          items:
            type: string
            example: >-
              