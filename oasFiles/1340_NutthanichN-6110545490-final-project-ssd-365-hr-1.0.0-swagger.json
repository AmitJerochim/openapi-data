{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "1.0.0",
    "title" : "Reverse 365 Human Resources API",
    "description" : "APIs to resemble the functionalities of Dynamic 365 Human Resources. This is a part of 01219243 Software Specification and Design (Lab section) final project."
  },
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/NutthanichN/6110545490-final-project-ssd-365-hr/1.0.0"
  } ],
  "tags" : [ {
    "name" : "Authentication",
    "description" : "Authentication to self-service for a managers and an employee"
  }, {
    "name" : "User"
  }, {
    "name" : "Task",
    "description" : "A task assigned to a managers and an employee"
  }, {
    "name" : "Compensation plan"
  }, {
    "name" : "Leave and absence report"
  }, {
    "name" : "Training course"
  } ],
  "security" : [ {
    "BearerAuth" : [ ]
  } ],
  "paths" : {
    "/manager-self-service/login" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Login to Manager Self-service",
        "requestBody" : {
          "required" : true,
          "content" : {
            "applictaion/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email" : {
                    "type" : "string"
                  },
                  "password" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully login",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "userToken" : {
                      "type" : "string"
                    },
                    "user" : {
                      "$ref" : "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid credentials"
          },
          "403" : {
            "description" : "Access denied"
          }
        }
      }
    },
    "/employee-self-service/login" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Login to Employee Self-service",
        "requestBody" : {
          "required" : true,
          "content" : {
            "applictaion/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email" : {
                    "type" : "string"
                  },
                  "password" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully login",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "userToken" : {
                      "type" : "string"
                    },
                    "user" : {
                      "$ref" : "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid credentials"
          },
          "403" : {
            "description" : "Access denied"
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Returns a list of users.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      },
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Create a new user.",
        "description" : "Lets the user create a new user.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully create a new user"
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      }
    },
    "/users/{userId}" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Returns a user by ID.",
        "description" : "Return user's information by ID",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of the user to return.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid user ID"
          },
          "404" : {
            "description" : "No existing user with the specified ID"
          }
        }
      },
      "put" : {
        "tags" : [ "User" ],
        "summary" : "Updates a particular user by ID.",
        "description" : "Lets the user updates user's data.",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of the user to update.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully update user's data"
          },
          "400" : {
            "description" : "Invalid user ID"
          },
          "404" : {
            "description" : "No existing user with the specified ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "User" ],
        "summary" : "Deletes a user with the specified ID.",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of the user to delete.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully delete the specified user"
          },
          "204" : {
            "description" : "Successfully delete the specified user"
          },
          "404" : {
            "description" : "No existing user with the specified ID"
          }
        }
      }
    },
    "/tasks" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Returns a list of tasks.",
        "description" : "Returns a list of tasks available for the employees to work with.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      },
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Creates a new task.",
        "description" : "Lets the user creates a new task to assign to other user.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Task"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully create a new task"
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      }
    },
    "/tasks/{taskId}" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Returns a task by ID.",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of the task to return.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "appliction/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request"
          },
          "404" : {
            "description" : "No existing task with the specified ID"
          }
        }
      },
      "put" : {
        "tags" : [ "Task" ],
        "summary" : "Updates a task by ID.",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of the task to update.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Task"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully updated the specified task"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "404" : {
            "description" : "No existing task with the specified ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "Task" ],
        "summary" : "Deletes a task with the specified ID.",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of the task to delete.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the specified task"
          },
          "204" : {
            "description" : "Successfully deleted the specified task"
          },
          "404" : {
            "description" : "No existing task with the specified ID"
          }
        }
      }
    },
    "/compensation" : {
      "get" : {
        "tags" : [ "Compensation plan" ],
        "summary" : "Returns a list of compensation plans.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Compensation"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      },
      "post" : {
        "tags" : [ "Compensation plan" ],
        "summary" : "Creates a new compensation plan.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Compensation"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created a new compensation plan"
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      }
    },
    "/compensation/{compensationId}" : {
      "get" : {
        "tags" : [ "Compensation plan" ],
        "summary" : "Returns a compensation plan by ID.",
        "parameters" : [ {
          "name" : "compensationId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of the compensation plan to return.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "appliction/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Compensation"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request"
          },
          "404" : {
            "description" : "No existing compensation plan with the specified ID"
          }
        }
      },
      "put" : {
        "tags" : [ "Compensation plan" ],
        "summary" : "Updates a compensation plan by ID.",
        "parameters" : [ {
          "name" : "compensationId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of the compensation plan to update.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Compensation"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully updated the specified compensation plan"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "404" : {
            "description" : "No existing compensation plan with the specified ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "Compensation plan" ],
        "summary" : "Deletes a compensation plan with the specified ID.",
        "parameters" : [ {
          "name" : "compensationId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of the compensation plan to delete.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the specified compensation plan"
          },
          "204" : {
            "description" : "Successfully deleted the specified compensation plan"
          },
          "404" : {
            "description" : "No existing compensation plan with the specified ID"
          }
        }
      }
    },
    "/leave-and-absence" : {
      "get" : {
        "tags" : [ "Leave and absence report" ],
        "summary" : "Returns a list of leave reports.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LeaveReport"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      },
      "post" : {
        "tags" : [ "Leave and absence report" ],
        "summary" : "Creates a new leave report.",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LeaveReport"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created a new report"
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      }
    },
    "/leave-and-absence/{reportId}" : {
      "get" : {
        "tags" : [ "Leave and absence report" ],
        "summary" : "Returns a leave report by ID.",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of a leave report to return.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LeaveReport"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request"
          },
          "404" : {
            "description" : "No existing leave report with the specified ID"
          }
        }
      },
      "put" : {
        "tags" : [ "Leave and absence report" ],
        "summary" : "Updates a leave report by ID.",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of a leave to update.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LeaveReport"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Successfully updated the specified leave report"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "404" : {
            "description" : "No existing leave report with the specified ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "Leave and absence report" ],
        "summary" : "Deletes a leave report with the specified ID.",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of a leave report to delete.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the specified report"
          },
          "204" : {
            "description" : "Successfully deleted the specified report"
          },
          "404" : {
            "description" : "No existing report with the specified ID"
          }
        }
      }
    },
    "/courses" : {
      "get" : {
        "tags" : [ "Training course" ],
        "summary" : "Returns a list of training courses.",
        "description" : "Returns a list of training course from the organization that is available for the employees.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Course"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      },
      "post" : {
        "tags" : [ "Training course" ],
        "summary" : "Creates a new training course",
        "responses" : {
          "200" : {
            "description" : "Successfully created a new training course"
          },
          "400" : {
            "description" : "Invalid request"
          }
        }
      }
    },
    "/courses/{courseId}" : {
      "get" : {
        "tags" : [ "Training course" ],
        "summary" : "Returns a training course by ID.",
        "parameters" : [ {
          "name" : "courseId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of a training course to return.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Course"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request"
          },
          "404" : {
            "description" : "No existing course with the specified ID"
          }
        }
      },
      "put" : {
        "tags" : [ "Training course" ],
        "summary" : "Updates a course by ID",
        "parameters" : [ {
          "name" : "courseId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of a training course to update.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Course"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the specified course"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "404" : {
            "description" : "No existing course with the specified ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "Training course" ],
        "summary" : "Deletes a training course with the specified ID.",
        "parameters" : [ {
          "name" : "courseId",
          "in" : "path",
          "required" : true,
          "description" : "The ID of a training course to update.",
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the specified course"
          },
          "204" : {
            "description" : "Successfully deleted the specified course"
          },
          "404" : {
            "description" : "No existing course with the specified ID"
          }
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "BearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    },
    "schemas" : {
      "User" : {
        "type" : "object",
        "required" : [ "id", "name" ],
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "role" : {
            "type" : "integer"
          },
          "roleName" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "teamId" : {
            "type" : "integer"
          },
          "birthDate" : {
            "type" : "string",
            "format" : "date"
          },
          "jobDescription" : {
            "type" : "string"
          },
          "positions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Position"
            }
          },
          "department" : {
            "$ref" : "#/components/schemas/Department"
          },
          "yearOfService" : {
            "type" : "number",
            "format" : "float"
          },
          "skills" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Skill"
            }
          },
          "certificates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Certificate"
            }
          },
          "salary" : {
            "type" : "number",
            "format" : "double"
          },
          "hiringStatus" : {
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "email" : {
            "type" : "string"
          },
          "telephone" : {
            "type" : "string"
          },
          "tasks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          },
          "courses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Course"
            }
          }
        }
      },
      "Position" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "yearInPosition" : {
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "Department" : {
        "type" : "object",
        "required" : [ "id", "name" ],
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "integer"
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          }
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "address" : {
            "type" : "string"
          },
          "purpose" : {
            "type" : "string"
          },
          "primary" : {
            "type" : "boolean"
          }
        }
      },
      "Skill" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "levelType" : {
            "type" : "string"
          },
          "level" : {
            "type" : "integer"
          },
          "levelDate" : {
            "type" : "string",
            "format" : "date"
          },
          "yearOfExperience" : {
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "Task" : {
        "type" : "object",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "assignedUsers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "Course" : {
        "type" : "object",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "attendees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "Certificate" : {
        "type" : "object",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "expiredDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "Compensation" : {
        "type" : "object",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "processName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "processType" : {
            "type" : "string"
          },
          "cycleStartDate" : {
            "type" : "string",
            "format" : "date"
          },
          "cycleEndDate" : {
            "type" : "string",
            "format" : "date"
          },
          "transactionActiveDate" : {
            "type" : "string",
            "format" : "date"
          },
          "increasePercent" : {
            "type" : "number",
            "format" : "float"
          },
          "increaseAmount" : {
            "type" : "number",
            "format" : "double"
          },
          "employees" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          }
        }
      },
      "LeaveReport" : {
        "type" : "object",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "typeId" : {
            "type" : "integer"
          },
          "typeName" : {
            "type" : "string"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date"
          },
          "accrualFrequencyId" : {
            "type" : "integer"
          },
          "accrualFrequency" : {
            "type" : "string"
          },
          "author" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      }
    }
  }
}