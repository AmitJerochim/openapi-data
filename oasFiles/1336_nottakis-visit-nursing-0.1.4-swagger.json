{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "0.1.4",
    "title" : "API",
    "description" : "visit-nursing API Endpoint"
  },
  "servers" : [ {
    "description" : "local",
    "url" : "http://localhost:3000"
  }, {
    "description" : "dev",
    "url" : "https://he1tuudkof.execute-api.ap-northeast-1.amazonaws.com/dev/"
  }, {
    "description" : "prod",
    "url" : "https://"
  } ],
  "tags" : [ {
    "name" : "Groups",
    "description" : "Everything about Groups Endpoint"
  }, {
    "name" : "Staffs",
    "description" : "Everything about Staffs Endpoint"
  }, {
    "name" : "Users",
    "description" : "Everything about Users Endpoint"
  }, {
    "name" : "TrainingLogs",
    "description" : "Everything about TrainingLogs Endpoint"
  }, {
    "name" : "Menus",
    "description" : "Everything about Menus Endpoint"
  } ],
  "paths" : {
    "/hc" : {
      "get" : {
        "summary" : "API health check",
        "operationId" : "healthCheck",
        "responses" : {
          "200" : {
            "description" : "Successful operation"
          }
        }
      }
    },
    "/groups" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Get groups with the institition ID",
        "operationId" : "getGroups",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/InstitutionIdInQuery"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      },
      "post" : {
        "tags" : [ "Groups" ],
        "summary" : "Create group with the institition ID",
        "operationId" : "postGroup",
        "description" : "",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Group"
        },
        "responses" : {
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/groups/{groupId}" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Get group with the group ID",
        "operationId" : "getGroup",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdInPath"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      },
      "put" : {
        "tags" : [ "Groups" ],
        "summary" : "Update group with the group ID",
        "operationId" : "putGroup",
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdInPath"
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Group"
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups" ],
        "summary" : "Delete group with the group ID",
        "operationId" : "deleteGroup",
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdInPath"
        } ],
        "description" : "No return value\n",
        "responses" : {
          "204" : {
            "description" : "Successful operation"
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/staffs" : {
      "get" : {
        "tags" : [ "Staffs" ],
        "summary" : "Get staffs with the group ID (descending)",
        "operationId" : "getStaffs",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdInQuery"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Staff"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      },
      "post" : {
        "tags" : [ "Staffs" ],
        "summary" : "Create staff with the group ID",
        "operationId" : "postStaff",
        "description" : "",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Staff"
        },
        "responses" : {
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Staff"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/staffs/{staffId}" : {
      "get" : {
        "tags" : [ "Staffs" ],
        "summary" : "Get staff with the staff ID",
        "operationId" : "getStaff",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/StaffIdInPath"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Staff"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      },
      "put" : {
        "tags" : [ "Staffs" ],
        "summary" : "Update staff with the staff ID",
        "operationId" : "putStaff",
        "parameters" : [ {
          "$ref" : "#/components/parameters/StaffIdInPath"
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Staff"
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Staff"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      },
      "delete" : {
        "tags" : [ "Staffs" ],
        "summary" : "Delete staff with the staff ID",
        "operationId" : "deleteStaff",
        "parameters" : [ {
          "$ref" : "#/components/parameters/StaffIdInPath"
        } ],
        "description" : "No return value\n",
        "responses" : {
          "204" : {
            "description" : "Successful operation"
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/staffs/getStaffsByInstitutionId" : {
      "get" : {
        "tags" : [ "Staffs" ],
        "summary" : "Get staffs by institution ID (descending)",
        "operationId" : "getStaffsByInstitutionId",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/InstitutionIdInQuery"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Staff"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get users with the group ID (descending)",
        "operationId" : "getUsers",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/GroupIdInQuery"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Create user with the group ID",
        "operationId" : "postUser",
        "description" : "",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/User"
        },
        "responses" : {
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/users/{userId}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get user with the user ID",
        "operationId" : "getUser",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/UserIdInPath"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Update user with the user ID",
        "operationId" : "putUser",
        "parameters" : [ {
          "$ref" : "#/components/parameters/UserIdInPath"
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/User"
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete user with the user ID",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "$ref" : "#/components/parameters/UserIdInPath"
        } ],
        "description" : "No return value\n",
        "responses" : {
          "204" : {
            "description" : "Successful operation"
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/users/getUsersByStaffId" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get users by staff ID (descending)",
        "operationId" : "getUsersByStaffId",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/StaffIdInQuery"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/trainingLogs/getLogsByIds" : {
      "get" : {
        "tags" : [ "TrainingLogs" ],
        "summary" : "Get trainingLogs by the user ID and menu ID (descending)",
        "operationId" : "getLogsByIds",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/UserIdInQuery"
        }, {
          "$ref" : "#/components/parameters/MenuIdInQuery"
        }, {
          "$ref" : "#/components/parameters/StartDateOfTrainingLog"
        }, {
          "$ref" : "#/components/parameters/EndDateOfTrainingLog"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TrainingLog"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/trainingLogs/getLogByIds" : {
      "get" : {
        "tags" : [ "TrainingLogs" ],
        "summary" : "Get trainingLog by the user ID and menu ID (descending)",
        "operationId" : "getLogByIds",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/UserIdInQuery"
        }, {
          "$ref" : "#/components/parameters/MenuIdInQuery"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TrainingLog"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/trainingLogs/getPrevious" : {
      "get" : {
        "tags" : [ "TrainingLogs" ],
        "summary" : "Get previous training logs with the user ID (descending)",
        "operationId" : "getPreviousTrainingLogs",
        "description" : "",
        "parameters" : [ {
          "$ref" : "#/components/parameters/UserIdInQuery"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TrainingLog"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/trainingLogs/setPrevious" : {
      "post" : {
        "tags" : [ "TrainingLogs" ],
        "summary" : "Set previous training logs with the user ID",
        "operationId" : "setPreviousTrainingLogs",
        "description" : "",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/TrainingLogs"
        },
        "responses" : {
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TrainingLog"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/menus" : {
      "get" : {
        "tags" : [ "Menus" ],
        "summary" : "Get menus",
        "operationId" : "getMenus",
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Menu"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400InvalidArgumentError"
          },
          "403" : {
            "$ref" : "#/components/responses/403ForbiddenError"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFoundError"
          },
          "500" : {
            "$ref" : "#/components/responses/500InternalServerError"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Group" : {
        "title" : "Group",
        "description" : "",
        "properties" : {
          "id" : {
            "title" : "Group ID",
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "institutionId" : {
            "title" : "Institution Id",
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "example" : "青山ステーション"
          },
          "createdAt" : {
            "title" : "Created At",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "title" : "Updated At",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "required" : [ "id", "institutionId", "name", "createdAt", "updatedAt" ]
      },
      "Staff" : {
        "title" : "Staff",
        "description" : "",
        "properties" : {
          "id" : {
            "title" : "Staff ID",
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "institutionId" : {
            "title" : "Institution Id",
            "type" : "string",
            "format" : "uuid"
          },
          "groupId" : {
            "title" : "Group Id",
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "title" : "氏名",
            "type" : "string",
            "example" : "佐々木淳一"
          },
          "kana" : {
            "title" : "ふりがな",
            "type" : "string",
            "example" : "ささきじゅんいち"
          },
          "createdAt" : {
            "title" : "Created At",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "title" : "Updated At",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "required" : [ "id", "institutionId", "groupId", "name", "kana", "createdAt", "updatedAt" ]
      },
      "User" : {
        "title" : "User",
        "description" : "",
        "properties" : {
          "id" : {
            "title" : "User ID",
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "groupId" : {
            "title" : "Group ID",
            "type" : "string",
            "format" : "uuid"
          },
          "staffId" : {
            "title" : "Staff ID",
            "type" : "string",
            "format" : "uuid"
          },
          "birthday" : {
            "title" : "誕生日",
            "type" : "string",
            "format" : "date"
          },
          "careId" : {
            "title" : "介護保険番号",
            "type" : "string",
            "example" : "01234-56789"
          },
          "careLevel" : {
            "title" : "要介護度",
            "type" : "string",
            "enum" : [ "0", "1", "2", "3", "4", "5", "6", "999" ],
            "description" : "* \"0\" - 要支援1 * \"1\" - 要支援2 * \"2\" - 要介護1 * \"3\" - 要介護2 * \"4\" - 要介護3 * \"5\" - 要介護4 * \"6\" - 要介護5 * \"999\" - 介護認定なし\n"
          },
          "gender" : {
            "title" : "性別",
            "type" : "string",
            "enum" : [ "0", "1" ],
            "description" : "* \"0\" - 男性 * \"1\" - 女性\n"
          },
          "name" : {
            "title" : "氏名",
            "type" : "string",
            "example" : "井上邦子"
          },
          "kana" : {
            "title" : "ふりがな",
            "type" : "string",
            "example" : "いのうえくにこ"
          },
          "dayOfWeek" : {
            "title" : "訪問曜日",
            "type" : "array",
            "items" : {
              "type" : "boolean"
            },
            "example" : [ 0, 1, 0, 0, 0, 1, 0 ],
            "description" : "Order: Mon, Tue, Wed, Thu, Fri, Sat, Sun\n"
          },
          "createdAt" : {
            "title" : "Created At",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "title" : "Updated At",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "required" : [ "id", "groupId", "staffId", "birthday", "careId", "careLevel", "gender", "name", "kana", "dayOfWeek", "createdAt", "updatedAt" ]
      },
      "TrainingLog" : {
        "title" : "TrainingLog",
        "description" : "",
        "properties" : {
          "userId" : {
            "title" : "User ID",
            "type" : "string",
            "format" : "uuid"
          },
          "menuId" : {
            "title" : "Menu ID",
            "type" : "integer"
          },
          "target" : {
            "title" : "目標",
            "type" : "object",
            "properties" : {
              "time" : {
                "type" : "number",
                "format" : "float",
                "example" : 60
              },
              "count" : {
                "type" : "integer",
                "example" : 10
              },
              "angle" : {
                "type" : "number",
                "format" : "float",
                "example" : 90
              }
            }
          },
          "result" : {
            "title" : "結果",
            "type" : "object",
            "properties" : {
              "time" : {
                "type" : "number",
                "format" : "float",
                "example" : 68.6
              },
              "count" : {
                "type" : "integer",
                "example" : 10
              },
              "angle" : {
                "type" : "number",
                "format" : "float",
                "example" : 93.2
              }
            }
          },
          "endedAt" : {
            "title" : "Ended At",
            "type" : "string",
            "format" : "date-time"
          },
          "createdAt" : {
            "title" : "Created At",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "title" : "Updated At",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "required" : [ "userId", "menuId", "target", "result", "endedAt", "createdAt", "updatedAt" ]
      },
      "Menu" : {
        "title" : "Menu",
        "description" : "",
        "properties" : {
          "id" : {
            "title" : "Menu ID",
            "type" : "integer",
            "readOnly" : true
          },
          "name" : {
            "title" : "訓練名",
            "type" : "string",
            "example" : "指組み上げ・肩関節周囲ストレッチ"
          },
          "description" : {
            "title" : "説明",
            "type" : "string",
            "example" : "①仰向けになり、お腹の上で指を組みます。②肘を天井の方に伸ばし、ゆっくりと頭の上まで両手を持って行きます。③そのまま、呼吸を楽にして30秒程保持します。10回ほど繰り返します。"
          },
          "movieUrl" : {
            "title" : "映像URL",
            "type" : "string",
            "example" : "https://www.youtube.com/watch?v=uilkmUoXoLU"
          },
          "disease" : {
            "title" : "疾患",
            "type" : "string",
            "example" : "片麻痺（脳卒中など）"
          },
          "part" : {
            "title" : "部位",
            "type" : "string",
            "example" : "右上半身"
          },
          "posture" : {
            "title" : "姿勢",
            "type" : "string",
            "example" : "立位"
          },
          "createdAt" : {
            "title" : "Created At",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "title" : "Updated At",
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "required" : [ "id", "name", "description", "movieUrl", "disease", "part", "posture", "createdAt", "updatedAt" ]
      }
    },
    "parameters" : {
      "InstitutionIdInQuery" : {
        "in" : "query",
        "name" : "institutionId",
        "description" : "Institution ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        }
      },
      "GroupIdInPath" : {
        "in" : "path",
        "name" : "groupId",
        "description" : "Group ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        }
      },
      "GroupIdInQuery" : {
        "in" : "query",
        "name" : "groupId",
        "description" : "Group ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        }
      },
      "StaffIdInPath" : {
        "in" : "path",
        "name" : "staffId",
        "description" : "Staff ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        }
      },
      "StaffIdInQuery" : {
        "in" : "query",
        "name" : "staffId",
        "description" : "Staff ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        }
      },
      "UserIdInPath" : {
        "in" : "path",
        "name" : "userId",
        "description" : "User ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        }
      },
      "UserIdInQuery" : {
        "in" : "query",
        "name" : "userId",
        "description" : "User ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        }
      },
      "MenuIdInQuery" : {
        "in" : "query",
        "name" : "menuId",
        "description" : "Menu ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        }
      },
      "StartDateOfTrainingLog" : {
        "in" : "query",
        "name" : "startDate",
        "description" : "Start Date",
        "schema" : {
          "type" : "string",
          "format" : "date",
          "example" : "2020-05-01"
        }
      },
      "EndDateOfTrainingLog" : {
        "in" : "query",
        "name" : "endDate",
        "description" : "End Date",
        "schema" : {
          "type" : "string",
          "format" : "date",
          "example" : "2020-05-31"
        }
      }
    },
    "requestBodies" : {
      "Group" : {
        "description" : "Group",
        "required" : true,
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Group"
            }
          }
        }
      },
      "Staff" : {
        "description" : "Staff",
        "required" : true,
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Staff"
            }
          }
        }
      },
      "User" : {
        "description" : "User",
        "required" : true,
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/User"
            }
          }
        }
      },
      "TrainingLogs" : {
        "description" : "TrainingLogs",
        "required" : true,
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TrainingLog"
              }
            }
          }
        }
      }
    },
    "responses" : {
      "400InvalidArgumentError" : {
        "description" : "Invalid Argument Error"
      },
      "403ForbiddenError" : {
        "description" : "Unauthorized Error"
      },
      "404NotFoundError" : {
        "description" : "Not Found Error"
      },
      "409DuplicatedError" : {
        "description" : "Duplicated Error"
      },
      "500InternalServerError" : {
        "description" : "Internal Server Error"
      }
    }
  },
  "security" : [ {
    "ApiKeyAuth" : [ ]
  } ]
}