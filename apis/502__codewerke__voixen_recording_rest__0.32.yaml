openapi: 3.0.2
info:
  version: "0.32"
  title: 'voiXen Recording API'
  description: |
    # RFC for read access to recording data within voiXen callcenter

    ## Public API URL
    
    __https://api2.voixen.com__

    Some hints:
    

    __Bearer authentication__ (also called __token authentication__) is an [HTTP authentication scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the `Authorization` header when making requests to protected resources:

    ```
    Authorization: Bearer <token>
    ```
    
    ## Get a token
    
    ```
    curl -X POST -H 'Content-Type: application/json' --data '{"username":"username","password":"password"}' /api/login
    ```
    
    ## Request recordings
    
    ```
    curl -H "Authorization: Bearer ${TOKEN}" /api/recordings?limit=1
    ```
    
    ## Request recordings with scroll mode 
    
    ```
    curl -H "Authorization: Bearer ${TOKEN}" /api/recordings?limit=100&scroll=1m
    ```

    Get first 100 hits. Keep connection alive for 1 minute. Increase the
    value so it fits to your poll interval.
    The SuccessfulResponseType returns a scroll_id to get the next chunk.
    It is required to add the request page with start because the server
    needs this information. Best way is to use the _links.next.href from
    the response.

    ---
  contact:
    name: 'voiXen GmbH'
    url: 'https://www.voixen.ai'
    email: 'thomas@voixen.ai'
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/codewerke/voixen_recording_rest/0.2
paths:
  /login:
    post:
      tags:
        - Security management
      summary: "Login to create access token"
      operationId: Login
      parameters:
        - name: username
          in: query
          description: "Valid username or email address"
          schema:
            type: string
        - name: password
          in: query
          description: "Valid password"
          schema:
            type: string
      responses:
        201:
          description: Successful creation of access token
          content:
            application/json:
              schema:
                type: string
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRob21hcyBNYW50aGV5IiwiYWRtaW4iOnRydWUsImp0aSI6ImUzYmRlYTA3LTk5NDAtNDQ2My1iYTY2LTJjMWFiYjU2MGE4NiIsImlhdCI6MTU1MDgzMDM0OSwiZXhwIjoxNTUwODMzOTU5fQ.JUMZjx87N3TIMB9XgoL8CTyqdjhFuKgHzjoPH4073Bc"
        403:
          description: Failed access
          content:
            text/plain:
              example: "Unknown credentials passed."
  /recordings:
    get:
      security:
        - bearerAuth: []
      tags:
        - Read recording data
      summary: "Search recordings"
      description: "Search recordings and read their metadata, transcripts and audio. Results will be paginated with a page size of 50 by default."
      operationId: GetMultipleRecordings
      parameters: 
        - name: startdate
          in: query
          description: "Filter records that have been created after the given timestamp in format ISO8601 (ex. 2007-12-24T18:21Z)"
          schema:
            type: string
        - name: enddate
          in: query
          description: "Filter records that have been created before the given timestamp in format ISO8601 (ex. 2007-12-24T18:21Z)"
          schema:
            type: string
        - name: lastupdated
          in: query
          description: "Filter records that have been updated after the given timestamp in format ISO8601 (ex. 2007-12-24T18:21Z)"
          schema:
            type: string
        - name: project
          in: query
          description: "Filter records that are assigned to the given project"
          schema:
            type: string
        - name: agentname
          in: query
          description: "Filter records by agent name"
          schema:
            type: string
        - name: tag
          in: query
          description: "Filter records that have the given tag assigned"
          schema:
            type: string
        - name: attribute
          in: query
          description: "Filter records with an attribute attributename:attributevalue"
          schema:
            type: string
        - name: querystring
          in: query
          description: "Filter string according to the format that is used by the UI"
          schema:
            type: string
        - name: limit
          in: query
          description: "Number of results per page. If no number is specified the number of results will be limited to 50 by default. Maximum value is 1000."
          schema:
            type: number
        - name: start
          in: query
          description: "Start page for paging. Please note that paging is 1-based."
          schema:
            type: number
        - name: sort
          in: query
          description: "Sort by field"
          schema:
            type: string
            enum:
              - id
              - startdate
              - lastupdated
        - name: sortorder
          in: query
          description: "Sort order (Ascending or descending)"
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: fields
          in: query
          description: Pick fields from RecordingType for result set. One or more fields delimited by comma. (ex. fields=id,filename,createdate) |
            Set empty param to omit recordings (&fields)
          schema:
            type: string
            enum:
              - id
              - filename
              - createdate
              - updatedate
              - project
              - agentname
              - callduration
              - callernumber
              - tsagent
              - tscustomer
              - tag
              - attributes
              - audiolink
      responses:
        200:
          description: Successful query with response
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponseType'
        400:
          description: Bad request maybe due to bad search params
          content:
            text/plain:
              schema:
                title: Bad request
                type: string
                example: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: No recordings found with given query parameters
          content:
            text/plain:
              schema:
                title: No recordings found
                type: string
                example: Not found
  '/recordings/{recordingId}':
    get:
      security:
        - bearerAuth: []
      tags:
        - Read recording data
      summary: Get recording by its id
      description: Returns a single recording
      operationId: getRecordingById
      parameters:
        - name: recordingId
          in: path
          description: ID of recording to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful query with response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordingType'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: No recordings found with given id
          content:
            text/plain:
              schema:
                title: No recordings found
                type: string
                example: Not found
components:
  schemas:
    SuccessfulResponseType:
      type: object
      properties:
        recordings:
          type: array
          items:
            $ref: '#/components/schemas/RecordingType'
        total:
          type: number
          description: Number of total hits
          example: 500
        count:
          type: number
          description: Number of returned hits
          example: 50
        limit:
          type: number
          description: Number of used limit
          example: 50
        page:
          type: number
          description: Current page number
          example: 2
        pages:
          type: number
          description: Number of total pages
          example: 10
        lastpage:
          type: number
          description: Number of last page for direct access (without scroll)
          example: 200
        scroll_id:
          type: string
          description: Cursor for the next chunk in scroll mode (empty if only 1 page exists)
          example: XnF1ZXJ5VGhlbkZldGNoAwAAAAAA5Fj5FkF1Y1llY1A2UnhPbUtnWHFIcmt1WEEAAABUAOaRoBYtcU1jY1BLNFRxYUhMejRfaUg3ZWJ3AAAAAADkWPoWQXVjWWVjUDZSeE9tS2dYcUhya3VYQQ==
        _links:
          $ref: '#/components/schemas/Links'
    Links:
      type: object
      properties:
        self:
          type: object
          properties:
            href:
              type: string
              description: Link for this search result (not in scroll mode)
              example: /api/recordings?limit=1&start=2
        prev:
          type: object
          properties:
            href:
              type: string
              description: Link for previous page (not in scroll mode)
              example: /api/recordings?limit=1&start=1
        next:
          type: object
          properties:
            href:
              type: string
              description: Link for next page (empty if only 1 page exists)
              example: /api/recordings?limit=1&start=3
                /api/recordings?scroll_id=XnF1ZXJ5VGhlbkZldGNoAwAAAAAA5Fj5FkF1Y1llY1A2UnhPbUtnWHFIcmt1WEEAAABUAOaRoBYtcU1jY1BLNFRxYUhMejRfaUg3ZWJ3AAAAAADkWPoWQXVjWWVjUDZSeE9tS2dYcUhya3VYQQ
        first:
          type: object
          properties:
            href:
              type: string
              description: Link for first page (not in scroll mode)
              example: /api/recordings?limit=1&start=1
        last:
          type: object
          properties:
            href:
              type: string
              description: Link for last page (not in scroll mode)
              example: /api/recordings?limit=1&start=7478
    RecordingType:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique ID of the voice recording
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        filename:
          type: string
          description: The original filename that was used during upload.
          example: "SuperAwesomeRecording.mp3"
        createdate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        updatedate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
        project:
          type: string
          description: The project that was assigned during upload
          example: "Project Megasale"
        agentname:
          type: string
          description: The name of the agent who recorded this call
          example: "John Doe"
        callduration:
          type: number
          description: Duration of the call in seconds
          example: "136"
        callernumber:
          type: string
          description: Phone number of customer
          example: "+49 2381 123455"
        tsagent:
          type: string
          description: The transcript of the agents channel or agent and customer if recorded in mono
          example: "Welcome to the voixen callcenter..."
        tscustomer:
          type: string
          description: The transcript of the customer channel
          example: "Hello! My name is Miller and I am calling to buy this new awesome API!"
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagType'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
        audiolink:
          type: string
          description: Presigned link to the audio file.
          example: "https://voixen-prod-callcenter.s3.eu-west-1.amazonaws.com/c0710d52-900d-4461-9139-7c18a50fab84.wav?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAITVZXKYF2ZBH6PRQ%2F20190429%2Feu-west-1%2Fs3%2Faws4_request&X-Amz-Date=20190429T090053Z&X-Amz-Expires=14400&X-Amz-Signature=e5fdf15908df2feec52f910ea0e67423c112144c0eb646877613872e7c1ce066&X-Amz-SignedHeaders=host"
    TagType:
      type: object
      properties:
        extendedtype:
          type: string
          enum:
            - Composer
            - User
          description: The extended type of the tag
          example: Composer
        value:
          type: string
          description: The display value of the tag
          example: "SuperAweSome Value"
    AttributeType:
      type: object
      properties:
        title:
          type: string
          description: The title of the attribute that was given on upload
          example: "CRM_CallId"
        value:
          type: string
          description: The display value of the attribute
          example: "CRM00075"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
