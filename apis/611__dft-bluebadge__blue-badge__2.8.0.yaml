openapi: 3.0.0
info:
  title: Blue Badge Management Service
  description: External API for local authorities to manage Blue Badges.
  version: "2.8.0"
  contact:
    email: bluebadge-support@valtech.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Badges
    description: Badge related operations.
  - name: Applications
    description: Application related operations
  - name: Reference Data
    description: Reference Data related operations.
paths:
  '/badges/{badgeNumber}':
    parameters:
      - $ref: '#/components/parameters/BadgeNumberPathParam'
    get:
      tags:
        - Badges
      summary: Retrieve a Blue Badge given the Blue Badge number parameter.
      operationId: retrieveBlueBadge
      description: |
        Retrieves a Blue Badge given the blueBadgeNumber.
      responses:
        '200':
          description: |
            Response when Blue Badge can be retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadgeResponse'
        '404':
          description: A Blue Badge cannot be found given the parameters specified.
    delete:
      tags:
        - Badges
      summary: Delete a badge
      operationId: deleteBlueBadge
      description: Delete a Blue Badge.
      responses:
        '200':
          description: Deleted.
    put:
      tags:
        - Badges
      summary: Update a badge
      operationId: updateBlueBadge
      description: Update a Blue Badge. The person/organisation and contact details can be updated. Only ‘Ordered’ or ‘Issued’ badges that have yet to expire can be updated.
      responses:
        '200':
          description: Updated.
        '403':
          description: When the badge is not associated to your LA.
        '404':
          description: When the badge number cannot be found
        '400':
          description: If the badge is in a invalid state or there are field validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBadgeRequest'
  '/badges/{badgeNumber}/replacements':
    parameters:
      - $ref: '#/components/parameters/BadgeNumberPathParam'
    post:
      tags:
        - Badges
      summary: Request replacement badge
      operationId: replaceBlueBadge
      description: >-
        Cancel an existing badge and order a new badge with the same details
        (including expiry date), with a start date of today.
      responses:
        '200':
          description: |
            Badge replacement complete.  New badge number returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadgeNumberResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadgeReplaceRequest'
  '/badges/{badgeNumber}/reinstate':
    parameters:
      - $ref: '#/components/parameters/BadgeNumberPathParam'
    post:
      tags:
        - Badges
      summary: Request reinstate badge
      operationId: reinstateBlueBadge
      description: Reinstate a cancelled badge with immediate effect.
      responses:
        '200':
          description: Badge reinstated successfully.
        '403':
          description: When the badge is not associated to your LA.
        '400':
          description: When the badge is not in CANCELLED status or may be expired
  '/badges/{badgeNumber}/cancellations':
    parameters:
      - $ref: '#/components/parameters/BadgeNumberPathParam'
    post:
      tags:
        - Badges
      summary: Request cancel badge
      operationId: cancelBlueBadge
      description: Cancel a badge with immediate effect.
      responses:
        '200':
          description: Badge cancellation requested.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadgeCancelRequest'
  /badges/print-batch:
    post:
      tags:
        - Badges
      summary: Request print batch
      operationId: printBatch
      description: Print a batch. Restricted to internal admin operations
      security: 
        - OAuth2: [admin]
      responses:
        '200':
          description: Batch print requested.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrintBatchRequest'
  '/badges/print-batch/{batchId}':
    parameters:
      - $ref: '#/components/parameters/BatchIdPathParam'
    post:
      tags:
        - Badges
      summary: Request to resend a print batch
      operationId: reprintBatch
      description: Reprint a batch. Restricted to internal admin operations
      security: 
        - OAuth2: [admin]
      responses:
        '200':
          description: Reprint Batch requested.
  /badges/collect-batches:
    post:
      tags:
        - Badges
      summary: Process results of print batches
      operationId: collectBatches
      description: Process print batch results. Restricted to internal admin operations
      security: 
        - OAuth2: [admin]
      responses:
        '200':
          description: Print batch results processed.
  /badges:
    get:
      tags:
        - Badges
      summary: Find a Blue Badge given the specified query parameters
      operationId: findBlueBadge
      description: |
        By passing in appropriate options, you can search for
        available badges in the system.  Options are a partial match for name
        and a exact match for the rest of the fields.
        All submitted options must be matched. At least 1 parameter
        must be provided.
        Provide name or/and postCode or/and nino or/and laShortCode or/and statuses or/ and expiryDateTo or/ and expiryDateFrom to filter json response.
        Provide local authority short code and accept application/zip
        to download all Blue Badge data for a local authority.
      parameters:
        - $ref: '#/components/parameters/NameParam'
        - $ref: '#/components/parameters/PostCodeParam'
        - $ref: '#/components/parameters/NinoParam'
        - $ref: '#/components/parameters/LaShortCodeParam'
        - $ref: '#/components/parameters/StatusesParam'
        - $ref: '#/components/parameters/ExpiryDateFromParam'
        - $ref: '#/components/parameters/ExpiryDateToParam'
        - $ref: '#/components/parameters/LocalAuthorityShortCodeParam'
        - $ref: '#/components/parameters/PageNumParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: |
            Response when Blue Badges can (or can not) be found.
            Either JSON BadgesResponse or application/zip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadgesResponse'
            application/zip:
              schema:
                description: Zip file containing a CSV of all badges
                type: string
                format: binary
                example: >
                  "badgeNo","badgeStatus","partyCode","localAuthorityShortCode","localAuthorityRef","appDate","appChannelCode","startDate","expiryDate","eligibilityCode","notForReassessment","deliverToCode","deliverOptionCode","cancelReasonCode","replaceReasonCode","orderDate","rejectedReason","rejectedDateTime","issuedDateTime","printRequestDateTime"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
    post:
      tags:
        - Badges
      summary: Order badges
      operationId: orderBlueBadges
      description: >-
        Place an order for a new badge, which will add a new record to the
        central record immediately and result in a fulfilment request being sent
        to the printer with no further intervention required.
      responses:
        '200':
          description: Badges created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadgeNumbersResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadgeOrderRequest'
  '/applications/{applicationId}':
    parameters:
      - $ref: '#/components/parameters/ApplicationIdPathParam'
    delete:
      description: Delete an application.
      tags:
        - Applications
      summary: Delete an application
      operationId: deleteApplication
      responses:
        '200':
          description: Deleted.
        '404':
          description: Application did not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
    get:
      description: Retrieve an application.
      tags:
        - Applications
      summary: Retrieve an application.
      operationId: retrieveApplication
      responses:
        '200':
          description: ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application-ApplicationResponse'
        '404':
          description: Application did not exist
    put:
      description: Update the application
      tags:
        - Applications
      summary: Update the application specified.
      operationId: updateApplication
      responses:
        '200':
          description: Application was updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/application-ApplicationUpdate'
  '/applications/{applicationId}/transfers':
    parameters:
      - $ref: '#/components/parameters/ApplicationIdPathParam'
    post:
      tags:
        - Applications
      summary: Request application transfer
      operationId: transferApplication
      description: Transfer an application to new local authority with immediate effect.
      responses:
        '200':
          description: Application transfer requested.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/application-ApplicationTransferRequest'
  /applications:
    post:
      tags:
        - Applications
      summary: Create an application.
      description: Restricted to public Web App
      operationId: createApplication
      security: 
        - OAuth2: [admin]
      responses:
        '200':
          description: OK.  Response body contains new application id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application-CreateApplicationResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/application-Application'
    get:
      description: |
        Find applications.
      parameters:
        - in: query
          name: name
          description: >
            'Search by organisation or person name, results contain search
            param'
          schema:
            type: string
        - in: query
          name: postcode
          description: |
            'Returns results starting with the parameter.'
          required: false
          schema:
            type: string
        - in: query
          name: from
          description: 'From submission date inclusive. 2018-12-25T12:30:45Z'
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          description: 'To submission date inclusive. 2018-12-25T12:30:45Z'
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: applicationTypeCode
          required: false
          schema:
            type: string
            enum:
              - NEW
              - RENEW
              - CANCEL
              - REVOKE
        - in: query
          name: applicationStatus
          description: The status of application to find.
          required: false
          schema:
            $ref: '#/components/schemas/ApplicationStatusField'
        - in: query
          name: transferred
          description: Flag to filter applications being transferred from other LAs. Default to null - returning all applications.
          required: false
          schema:
            type: boolean
        - in: query
          name: ascendingOrder
          description: Flag to change order of returned value based on application submission date. Default to false.
          required: false
          schema:
            type: boolean
        - in: query
          name: eligibilityCode
          description: Type of eligibility to filter application
          required: false
          schema:
            $ref: '#/components/schemas/EligibilityCodeField'
        - in: query
          name: partyCode
          description: Party type code to filter application
          required: false
          schema:
            $ref: '#/components/schemas/PartyTypeCodeField'
        - in: query
          name: pageNum
          description: The page to return. Must be a positive number. Default is 1.
          schema:
            type: integer
        - in: query
          name: pageSize
          description: The number of results. Min 1 max 200. Default 50
          schema:
            type: integer
        - in: query
          name: completedApplicationLast
          description: The flag to indicate completed applications will be at the end of the returned list of applications. Default is False.
          required: false
          schema:
            type: boolean
      tags:
        - Applications
      summary: Find applications.
      operationId: findApplications
      responses:
        '200':
          description: |
            Response with Zero, One or Many application summaries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application-ApplicationSummaryResponse'
  '/reference-data/{domain}':
    parameters:
      - in: path
        name: domain
        description: Domain to retrieve data for
        required: true
        schema:
          type: string
    get:
      tags:
        - Reference Data
      summary: Retrieve all reference data for a domain
      operationId: findByDomain
      responses:
        '200':
          description: An array of reference data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceDataResponse'    
  '/reference-data/postcode/{postcode}':
    parameters:
      - in: path
        name: postcode
        description: Postcode to search
        required: true
        schema:
          type: string
    get:
      tags:
        - Reference Data
      summary: Retrieve LA reference data for a postcode
      operationId: findLAByPostcode
      responses:
        '200':
          description: An single of reference data for the corresponding LA
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleReferenceDataResponse'
  '/reference-data/councils/{shortCode}':
    parameters:
      - in: path
        name: shortCode
        description: Local Council short code
        required: true
        schema:
          type: string
    put:
      tags:
        - Reference Data
      summary: Update Local Council data
      description: Restricted to admin Web App
      operationId: updateLocalCouncil
      security: 
        - OAuth2: [admin]
      responses:
        '200':
          description: Ok.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '404':
          description: Local Council not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalCouncil'
        description: Local Council data
        required: true
  '/reference-data/authorities/{shortCode}':
    parameters:
      - in: path
        name: shortCode
        description: Local Authority short code
        required: true
        schema:
          type: string
    put:
      tags:
        - Reference Data
      summary: Update Local Authority data
      description: Restricted to admin Web App
      operationId: updateLocalAuthority
      security: 
        - OAuth2: [admin]
      responses:
        '200':
          description: Ok.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '404':
          description: Local Authority not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'                
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalAuthority'
        description: Local authority data
        required: true
servers:
  - url: 'https://virtserver.swaggerhub.com/dft-bluebadge/blue-badge/1.0.0'
components:
  parameters:
    LocalAuthorityShortCodeParam:
      in: query
      name: laShortCode
      schema:
        type: string
    BadgeNumberParam:
      in: query
      name: badgeNumber
      description: A valid badge number.
      schema:
        type: string
    BadgeNumberPathParam:
      in: path
      name: badgeNumber
      description: A valid badge number.
      required: true
      schema:
        type: string
    NameParam:
      in: query
      name: name
      description: Search the badge holder's name.
      schema:
        type: string
        maxLength: 100
    PostCodeParam:
      in: query
      name: postCode
      description: A valid postcode with or without spaces. It should be an exact match.
      schema:
        type: string
        maxLength: 20
    NinoParam:
      in: query
      name: nino
      description: A valid nino with or without spaces. It should be an exact match.
      example: BN102966C
      schema:
        type: string
    LaShortCodeParam:
      in: query
      name: laShortCode
      description: A valid local authority short code. It should be an exact match.
      example: ABERD
      schema:
        type: string
    StatusesParam:
      in: query
      name: statuses
      description: A valid status or comma separated list of statuses. It will return any badges in any of the provided statuses.
      example: 'ORDERED,ISSUED'
      schema:
        type: string
        enum:
          - ISSUED
          - CANCELLED
          - REPLACED
          - ORDERED
          - PROCESSED
          - REJECT
    ExpiryDateFromParam:
      in: query
      name: expiryDateFrom
      description: A valid date in format 'yyyy-MM-dd'. It will return all badges which expiry date is equal or after the expiryDateFrom.
      example: '2019-05-01'
      schema:
        type: string
        format: date
    ExpiryDateToParam:
      in: query
      name: expiryDateTo
      description: A valid date in format 'yyyy-MM-dd'. It will return all badges which expiry date is equal or before the expiryDateTo.
      example: '2019-05-31'
      schema:
        type: string
        format: date
    PageNumParam:
      in: query
      name: pageNum
      description: The page to return. Must be a positive number. Default is 1.
      schema:
        type: integer
    PageSizeParam:
      in: query
      name: pageSize
      description: The number of results. Min 1 max 200. Default 50
      schema:
        type: integer
    BatchIdPathParam:
      in: path
      name: batchId
      description: A valid batch id.
      required: true
      schema:
        type: string
    ApplicationIdPathParam:
      in: path
      name: applicationId
      required: true
      schema:
        type: string
  schemas:
    CommonResponse:
      type: object
      properties:
        context:
          type: string
        id:
          type: string
        method:
          type: string
        error:
          $ref: '#/components/schemas/Error'
        pagingInfo:
          $ref: '#/components/schemas/PagingInfo'
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        reason:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              reason:
                type: string
              message:
                type: string
              location:
                type: string
              locationType:
                type: string
    PagingInfo:
      type: object
      properties:
        total:
          type: integer
          description: The total number of results for the search.
        count:
          type: integer
          description: The number of results included within the response
        pageSize:
          type: integer
          description: The number of results per page. Equivalent to the page limit
        pageNum:
          type: integer
          description: >-
            The index of the first result included within the response, within
            the total results
        pages:
          type: integer
          description: Total number of pages for the given page limit
    BadgeNumberResponse:
      description: Returns a badge number.
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - type: object
          properties:
            data:
              type: string
              example: 095715
              description: The unique badge number for this badge.
    BadgeCancelRequest:
      type: object
      properties:
        badgeNumber:
          type: string
          example: 72B9HA
          description: The unique badge number for this badge.
        cancelReasonCode:
          type: string
          maxLength: 10
          description: |
            A short code from the CANCEL group of reference data.
          example: REVOKE
      required:
        - badgeNumber
        - cancelReasonCode
    BadgeReplaceRequest:
      type: object
      properties:
        badgeNumber:
          type: string
          description: The unique badge number for this badge.
          example: 72B9HA
        replaceReasonCode:
          type: string
          maxLength: 10
          description: A short code from the REPLACE group of reference data.
          example: STOLE
        deliverToCode:
          type: string
          maxLength: 10
          description: A short code from the DELIVER group of reference data.
          example: HOME
        deliveryOptionCode:
          type: string
          maxLength: 10
          description: A short code from the DELOP group of reference data.
          example: STAND
      required:
        - badgeNumber
        - replaceReasonCode
        - deliverToCode
        - deliveryOptionCode
    PrintBatchRequest:
      type: object
      properties:
        batchType:
          type: string
          description: Batch type. Could be FASTTRACK or STANDARD or LA
          example: FASTRACK
      required:
        - batchType
    BadgeNumbersResponse:
      description: Contains a list of Badge numbers.
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                type: string
                example: 095215
                description: The unique badge number for this badge.
    BadgesResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/BadgeSummary'
    BadgeResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Badge'
    BadgeSummary:
      type: object
      properties:
        badgeNumber:
          type: string
          description: The unique badge number for this badge.
          example: 095215
        partyTypeCode:
          type: string
          maxLength: 10
          description: A short code from the PARTY group of reference data.
          example: PERSON
        name:
          type: string
          maxLength: 100
          description: The name of the badge holder Organisation or Person
          example: Ms Mary Inglethorpe
        nino:
          type: string
          pattern: >-
            ^(?!BG)(?!GB)(?!NK)(?!KN)(?!TN)(?!NT)(?!ZZ)(?:[A-CEGHJ-PR-TW-Z][A-CEGHJ-NPR-TW-Z])(?:\s*\d\s*){6}([A-D]|\s)$
          description: The badge holder's National Insurance number.
          example: NY186548E
        localAuthorityShortCode:
          type: string
          description: Short code of local authority
          pattern: '^[A-Z]+$'
          example: BLACK
        postCode:
          type: string
          example: SK6 8GH
          pattern: '^[A-Za-z]{1,2}[0-9][0-9A-Za-z]?\s?[0-9][A-Za-z]{2}$'
        expiryDate:
          type: string
          format: date
          description: The date the Blue Badge expires.
          example: '2019-06-10'
        statusCode:
          type: string
          maxLength: 10
          description: A short code from the STATUS group of reference data.
          example: ISSUED
    Badge:
      type: object
      properties:
        badgeNumber:
          type: string
          example: 091215
          description: The unique badge number for this badge.
        party:
          $ref: '#/components/schemas/Party'
        localAuthorityShortCode:
          type: string
          description: Short code of local authority
          pattern: '^[A-Z]+$'
          example: BLACK
        localAuthorityRef:
          type: string
          description: >-
            A reference to enable local authorities to link this badge to
            records in other systems
          example: YOURREF
        applicationDate:
          type: string
          format: date
          description: >-
            The date that the initial application was received by the issuing
            local authority.
          example: '2017-07-21'
        applicationChannelCode:
          type: string
          description: >-
            A short code from the APPSOURCE group of reference data e.g. ONLINE,
            PAPER, PHONE or INPERSON.
          example: INPERSON
        orderDate:
          type: string
          format: date
          description: The date that the badge was ordered by the issuing local authority.
          example: '2018-07-07'
        startDate:
          type: string
          format: date
          description: The date that the badge comes into effect.
          example: '2018-07-07'
        expiryDate:
          type: string
          format: date
          description: The date the badge expires.
          example: '2019-06-31'
        eligibilityCode:
          type: string
          maxLength: 10
          description: A short code from the ELIGIBILIT group of reference data.
          example: WALKD
        notForReassessment:
          type: boolean
          nullable: true
          description: A flag to indicate future re-assessment is required for this applicant. This flag is NULL for organisation and automatic eligible person.  
          example: true
        imageLink:
          type: string
          maxLength: 255
          description: A URL for the badge photo.
          example: 'http://tiny.url?q=ab63fg'
        cancelReasonCode:
          type: string
          maxLength: 10
          description: |
            A short code from the CANCEL group of reference data.
          example: NOLONG
        replaceReasonCode:
          type: string
          maxLength: 10
          description: |
            A short code from the REPLACE group of reference data.
          example: STOLE
        statusCode:
          type: string
          description: >-
            A short code from the STATUS group of reference data. The current
            status of the badge e.g. ACTIVE, EXPIRED, CANCELLED.
          example: CANCELLED
        issuedDate:
          type: string
          format: date-time
          description: The datetime the badge was issued.
          example: '2019-03-07T01:01:00'
        printRequestDateTime:
          type: string
          format: date-time
          description: The datetime the badge was sent to print.
          example: '2019-03-07T01:01:00'
        rejectedReason:
          type: string
          description: The reason a badge was rejected by print provider
          example: missing values
        transferredFromLaCode:
          type: string
          description: Local Authority that transferred the badge to current Authority.
          example: ABCD
        transferredFromDateTime:
          type: string
          format: date-time
          example: '2019-03-07T01:01:00'
        cancelledDateTime:
          type: string
          format: date-time
          example: '2019-03-07T01:01:00Z'
        replacedDateTime:
          type: string
          format: date-time
          example: '2019-03-07T01:01:00Z'
    BadgeOrderRequest:
      type: object
      properties:
        party:
          $ref: '#/components/schemas/Party'
        localAuthorityShortCode:
          type: string
          example: ABERD
          pattern: '^[A-Z]+$'
          description: Short code of local authority.
        localAuthorityRef:
          type: string
          maxLength: 100
          example: YOURCODE
        applicationDate:
          type: string
          format: date
          example: '2017-07-21'
          description: >-
            The date that the initial application was received by the issuing
            local authority.
        applicationChannelCode:
          type: string
          maxLength: 10
          example: ONLINE
          description: >-
            A short code from the APPSOURCE group of reference data. e.g. 
            ONLINE, PAPER, PHONE or INPERSON.
        startDate:
          type: string
          format: date
          example: '2019-06-30'
          description: Cannot be in the past.
        expiryDate:
          type: string
          format: date
          example: '2019-07-01'
          description: >
            The date the Blue Badge expires. Must be greater than 7 days and within 3 years of start date.
        eligibilityCode:
          type: string
          maxLength: 10
          example: CHILDBULK
          description: >-
            A short code from the ELIGIBILITY group of reference data. Reason
            for badge.Cannot order a badge with ELIGIBILITY type of TERMILL.
        notForReassessment:
          type: boolean
          nullable: true
          description: >- 
            A flag to indicate future re-assessment is not required for this applicant. This flag is NULL for organisation and automatic eligibility person. It is optional for discretionary eligibility person badges. NULL, true or false can be set for discretionary eligibility person badges.
          example: true
        assessmentType:
          $ref: '#/components/schemas/AssessmentTypeField'
        imageFile:
          type: string
          description: >-
            Base64 encoded.  Must be less than 20MB, and of format JPG, PNG, or
            GIF.
        deliverToCode:
          type: string
          maxLength: 10
          example: HOME
          description: A short code from the DELIVER group of reference data.
        deliveryOptionCode:
          type: string
          maxLength: 10
          example: STAND
          description: >-
            A short code from the DELOP group of reference data. e.g. STAND or
            FAST
        numberOfBadges:
          type: integer
          minimum: 1
          maximum: 999
          example: 1
          description: 'Must be 1 for a person, can be multiple for an organisation.'
      required:
        - party
        - partyTypeCode
        - name
        - contactNumber
        - startDate
        - expiryDate
        - applicationDate
        - applicationChannelCode
        - deliverToCode
        - deliveryOptionCode
    UpdateBadgeRequest:
      type: object
      description: >-
        Note. The party type code cannot be updated.
        Badge status must be ORDERED or ISSUED.
        Badge expiry must be in the future.

      properties:
        badgeNumber: 
          type: string
          description: The badge to update. 
        party:
          $ref: '#/components/schemas/Party'
        transferToLaShortCode:
          type: string
          description: >-
            Local Authority shortcode to transfer the badge to.
        notForReassessment:
          type: boolean
          nullable: true
          description: >- 
            A flag to indicate future re-assessment is not required for this applicant. This flag is NULL for organisation and automatic eligibility person. It is optional for discretionary eligibility person badges. NULL, true or false can be set for discretionary eligibility person badges.
          example: true
      required:
        - party
    Party:
      type: object
      description: If the party type code is PERSON, then the person field is mandatory and the organisation field must be null. And vice versa for type code of ORG.
      properties:
        typeCode:
          $ref: '#/components/schemas/PartyTypeCodeField'
        contact:
          $ref: '#/components/schemas/Contact'
        person:
          $ref: '#/components/schemas/Person'
        organisation:
          $ref: '#/components/schemas/Organisation'
      required:
        - typeCode
        - contact
    Person:
      type: object
      properties:
        badgeHolderName:
          type: string
          example: Dwight Appleman
          maxLength: 100
        nino:
          type: string
          description: The badge holder's National Insurance number.
          example: NY188796B
          pattern: >- 
            ^(?!BG)(?!GB)(?!NK)(?!KN)(?!TN)(?!NT)(?!ZZ)(?:[A-CEGHJ-PR-TW-Z][A-CEGHJ-NPR-TW-Z])(?:\s*\d\s*){6}([A-D]?\s*)$
        dob:
          type: string
          format: date
          example: '1972-09-13'
          description: Date of birth YYYY-MM-DD
        genderCode:
          $ref: '#/components/schemas/GenderCodeField'
      required:
        - badgeHolderName
        - dob
        - genderCode
      example:
        badgeHolderName: Fred Bloggs
        nino: NY188796B
        dob: '1972-09-12'
        genderCode: MALE
    Organisation:
      type: object
      properties:
        badgeHolderName:
          type: string
      required:
        - badgeHolderName
      example:
        badgeHolderName: The Monroe Institute
    Contact:
      type: object
      properties:
        fullName:
          type: string
          maxLength: 100
          description: >-
            The administrative contact for the badge(s). Note - this is
            mandatory for Organisation badges
          example: June Whitfield
        buildingStreet:
          type: string
          maxLength: 50
          example: 65 Basil Chambers
        line2:
          type: string
          maxLength: 40
          example: Northern Quarter
        townCity:
          type: string
          maxLength: 40
          example: Manchester
        postCode:
          type: string
          example: SK6 8GH
          pattern: '^[A-Za-z]{1,2}[0-9][0-9A-Za-z]?\s?[0-9][A-Za-z]{2}$'
        primaryPhoneNumber:
          type: string
          maxLength: 20
          pattern: '^\s*(?:0\s?|\+?44\s?)(?:\d\s?){9,10}\s*$'
          example: 01616548765
        secondaryPhoneNumber:
          type: string
          maxLength: 20
          pattern: '^$|^\s*(?:0\s?|\+?44\s?)(?:\d\s?){9,10}\s*$'
          example: 01616548765
        emailAddress:
          type: string
          pattern: aligns with GOV.UK Notify email validation - further information available at https://github.com/alphagov/notifications-utils/blob/master/notifications_utils/recipients.py#L442th GOV.UK Notify email validation - further information available at https://github.com/alphagov/notifications-utils/blob/master/notifications_utils/recipients.py#L442
          maxLength: 100
          example: june@bigbrainknitting.com
      required:
        - buildingStreet
        - townCity
        - postCode
        - primaryPhoneNumber
    application-CreateApplicationResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - type: object
          properties:
            data:
              type: string
              example: 12341234-1234-1234-1234-123412341234
    application-ApplicationSummaryResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/application-ApplicationSummary'
    application-ApplicationResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/application-Application'
    application-ApplicationTransferRequest:
      type: object
      properties:
        transferToLaShortCode:
          type: string
          description: The code for the new local authority.
          example: BIRM
      required:
        - transferToLaShortCode
    application-ApplicationSummary:
      type: object
      properties:
        applicationId:
          type: string
          description: The unique badge number for this application - a UUID
          example: 12345678-1234-1234-1234-123412341234
        partyTypeCode:
          $ref: '#/components/schemas/PartyTypeCodeField'
        applicationTypeCode:
          $ref: '#/components/schemas/ApplicationTypeCodeField'
        nino:
          type: string
          description: The badgeholders national insurance number
          example: NS123458S
          pattern: >-
            ^(?!BG)(?!GB)(?!NK)(?!KN)(?!TN)(?!NT)(?!ZZ)(?:[A-CEGHJ-PR-TW-Z][A-CEGHJ-NPR-TW-Z])(?:\s*\d\s*){6}([A-D]|\s)$
        dob:
          type: string
          format: date
          example: '1972-09-13'
          description: Date of birth YYYY-MM-DD
        name:
          type: string
          description: The name of the badge holder Organisation or Person
          example: John Smith
          maxLength: 100
        submissionDate:
          type: string
          format: date-time
          description: Submitted date and time
          example: '2018-12-25T12:30:45Z'
        eligibilityCode:
          $ref: '#/components/schemas/EligibilityCodeField'
        applicationStatus:
          $ref: '#/components/schemas/ApplicationStatusField'
    application-Application:
      type: object
      properties:
        applicationId:
          type: string
          description: The unique number for this application - a UUID
          example: 12345678-1234-1234-1234-123456781234
        applicationTypeCode:
          $ref: '#/components/schemas/ApplicationTypeCodeField'
        localAuthorityCode:
          type: string
          description: The code for the local authority.
          example: BIRM
        transferredLaFromCode:
          type: string
          description: The code for the local authority transferred from.
          example: BIRM
        transferredFromLaDate:
          type: string
          format: date-time
          description: Transferred from LA date
          example: '2018-12-25T12:30:45Z'
        paymentTaken:
          type: boolean
          example: true
          description: >-
            Indicates whether or not payment was taken as part of the
            application. In edge cases this could be set false, but the payment
            status could not be determined, in which case paymentReference will
            be set to Unknown
        paymentReference:
          type: string
          example: PVAUETDW43CM
          description: >-
            The reference of the payment taken as part of the application. Will
            be set to Unknown if the status of the payment could not be
            determined.
        submissionDate:
          type: string
          format: date-time
          description: Submitted date and time. Populated automatically on create
          example: '2018-12-25T12:30:45Z'
        existingBadgeNumber:
          type: string
        applicationReplaceReasonCode:
          $ref: '#/components/schemas/ReplaceReasonCodeField'
        referenceNumber:
          type: string
          description: >-
              An optional crime reference number in case badge lost or stolen. 
        party:
          $ref: '#/components/schemas/application-Party'
        eligibility:
          $ref: '#/components/schemas/application-Eligibility'
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/application-Artifact'
        applicationStatus:
          $ref: '#/components/schemas/ApplicationStatusField'
      required:
        - applicationTypeCode
        - paymentTaken
        - localAuthorityCode
        - party
    application-ApplicationUpdate:
      type: object
      properties:
        applicationStatus:
          $ref: '#/components/schemas/ApplicationStatusField'
    application-Party:
      type: object
      properties:
        typeCode:
          $ref: '#/components/schemas/PartyTypeCodeField'
        contact:
          $ref: '#/components/schemas/application-Contact'
        person:
          $ref: '#/components/schemas/application-Person'
        organisation:
          $ref: '#/components/schemas/application-Organisation'
      required:
        - typeCode
        - contact
    application-Person:
      type: object
      properties:
        badgeHolderName:
          type: string
          example: John Smith
          maxLength: 100
        nino:
          type: string
          description: The badge holder's National Insurance number.
          example: NY188796B
          pattern: >-
            ^(?!BG)(?!GB)(?!NK)(?!KN)(?!TN)(?!NT)(?!ZZ)(?:[A-CEGHJ-PR-TW-Z][A-CEGHJ-NPR-TW-Z])(?:\s*\d\s*){6}([A-D]?\s*)$
        dob:
          type: string
          format: date
          example: '1970-05-29'
          description: Date of birth YYYY-MM-DD
        nameAtBirth:
          type: string
          example: John Smith
          maxLength: 100
        genderCode:
          $ref: '#/components/schemas/GenderCodeField'
      required:
        - badgeHolderName
        - dob
        - genderCode
    application-Organisation:
      type: object
      properties:
        badgeHolderName:
          type: string
          example: Trotters Independant Traders
          maxLength: 100
        isCharity:
          type: boolean
          example: false
        charityNumber:
          type: string
          maxLength: 100
          example: '12345'
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/application-Vehicle'
        numberOfBadges:
          type: integer
          minimum: 1
          description: 'Must be 1 for a person, can be multiple for an organisation.'
          example: 1
        organisationNeeds:
          type: string
          example: Description of conditions
          maxLength: 10000
      required:
        - badgeHolderName
        - isCharity
        - numberOfBadges
    application-Vehicle:
      type: object
      properties:
        registrationNumber:
          type: string
          maxLength: 7
          example: VK61VZZ
        typeCode:
          $ref: '#/components/schemas/VehicleTypeCodeField'
        usageFrequency:
          type: string
          maxLength: 100
          example: Daily
    application-Contact:
      type: object
      properties:
        fullName:
          type: string
          maxLength: 100
          example: Mabel Jones
          description: Mandatory if Organisation
        buildingStreet:
          type: string
          maxLength: 100
          example: 65 Basil Chambers
        line2:
          type: string
          maxLength: 100
          example: Northern Quarter
        townCity:
          type: string
          maxLength: 100
          example: Manchester
        postCode:
          type: string
          example: SK6 8GH
          pattern: >-
            ^$|^([Gg][Ii][Rr]
            0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([AZa-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z]))))[\s]*[0-9][A-Za-z]{2})$
        primaryPhoneNumber:
          type: string
          example: '01234123123'
          maxLength: 20
        secondaryPhoneNumber:
          type: string
          example: 07970777111
          maxLength: 20
        emailAddress:
          type: string
          pattern: aligns with GOV.UK Notify email validation - further information available at https://github.com/alphagov/notifications-utils/blob/master/notifications_utils/recipients.py#L442th GOV.UK Notify email validation - further information available at https://github.com/alphagov/notifications-utils/blob/master/notifications_utils/recipients.py#L442
          maxLength: 100
          example: nobody@blancmange.com
      required:
        - buildingStreet
        - townCity
        - postCode
        - primaryPhoneNumber
    application-Eligibility:
      type: object
      properties:
        typeCode:
          $ref: '#/components/schemas/EligibilityCodeField'
        descriptionOfConditions:
          type: string
          maxLength: 10000
          example: Freetext
        benefit:
          $ref: '#/components/schemas/application-Benefit'
        walkingDifficulty:
          $ref: '#/components/schemas/application-WalkingDifficulty'
        disabilityArms:
          $ref: '#/components/schemas/application-DisabilityArms'
        healthcareProfessionals:
          type: array
          items:
            $ref: '#/components/schemas/application-HealthcareProfessional'
        blind:
          $ref: '#/components/schemas/application-Blind'
        childUnder3:
          $ref: '#/components/schemas/application-ChildUnder3'
        hiddenDisability:
          $ref: '#/components/schemas/application-HiddenDisability'
      required:
        - typeCode
    application-ChildUnder3:
      type: object
      description: >-
        bulkyMedicalEquipmentTypeCode is DEPRECATED - use the array version. 
        Until removed One entry will be put in the non array field by citizen
        application if there are multiple codes entered. All entered values will
        be in the array version.
      properties:
        bulkyMedicalEquipmentTypeCode:
          $ref: '#/components/schemas/BulkyMedicalEquipmentTypeCodeField'
        bulkyMedicalEquipmentTypeCodes:
          type: array
          items:
            $ref: '#/components/schemas/BulkyMedicalEquipmentTypeCodeField'
        otherMedicalEquipment:
          type: string
          description: A short description of the medical equipment.
          maxLength: 100
          example: Oxygen cylinders
      required:
        - bulkyMedicalEquipmentTypeCodes
    application-Blind:
      type: object
      properties:
        registeredAtLaId:
          type: string
          description: Local Authority registered blind at
          example: BIRM
    application-Benefit:
      type: object
      properties:
        isIndefinite:
          type: boolean
          example: true
        expiryDate:
          type: string
          format: date
          example: '2022-03-30'
      required:
        - isIndefinite
    application-HiddenDisability:
      type: object
      properties:
        risk: 
          type: boolean
          example: true
        riskWhen: 
          $ref: '#/components/schemas/JourneyFrequencyCodeField'
        riskExample:
          type: string
          maxLength: 3000
          example: Freetext
        planning:
          type: boolean
          example: false
        planningJourneys:
          $ref: '#/components/schemas/PlanningFrequencyCodeField'
        anxiety:
          type: boolean
          example: true
        anxietyFrequency:
          $ref: '#/components/schemas/JourneyFrequencyCodeField'
        anxietyDescription:
          type: string
          maxLength: 3000
          description: A short description on when an applicant becomes extremely anxious/fearful
        awareness:
          type: boolean
          example: true
        awarenessFrequency:
          $ref: '#/components/schemas/JourneyFrequencyCodeField'
        awarenessDescription:
          type: string
          maxLength: 3000
          description: A short description on when an applicant finds it difficult or impossible to control his/her actions and lack awareness of the impact they could have on others
        control:
          type: boolean
          example: true
        controlFrequency:
          $ref: '#/components/schemas/JourneyFrequencyCodeField'
        controlDescription:
          type: string
          maxLength: 3000
          description: A short description to give examples of the situations that cause the meltdowns
        somethingElse:
          type: boolean
          example: true
        somethingElseDescription:
          type: string
          maxLength: 3000
          description: A short description to describe what affects you taking a journey
        stepsToImprove:
          type: string
          maxLength: 5000
          description: A short description to describe steps are currently taken to try to improve journeys
        stepsEffective:
          type: string
          description: A short description to describe how effective are these steps
          maxLength: 1000
        walkingDifficulty:
          $ref: '#/components/schemas/application-WalkingDifficultyUnderHidden'
        treatments:
          type: array
          items:
            $ref: '#/components/schemas/application-Treatment'
        medications:
          type: array
          items:
            $ref: '#/components/schemas/application-Medication'
    application-HealthcareProfessional:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          example: Freetext
        location:
          type: string
          maxLength: 100
          example: Freetext
        email:
          type: string
          pattern: aligns with GOV.UK Notify email validation - further information available at https://github.com/alphagov/notifications-utils/blob/master/notifications_utils/recipients.py#L442th GOV.UK Notify email validation - further information available at https://github.com/alphagov/notifications-utils/blob/master/notifications_utils/recipients.py#L442
          maxLength: 100
          example: june@bigbrainknitting.com
        phoneNumber:
          type: string
          pattern: '^\s*(?:0\s?|\+?44\s?)(?:\d\s?){9,10}\s*$'
          example: 01616548765
        buildingStreet:
          type: string
          maxLength: 50
          example: 65 Basil Chambers
        line2:
          type: string
          maxLength: 40
          example: Northern Quarter
        townCity:
          type: string
          maxLength: 40
          example: Manchester
        postCode:
          type: string
          example: SK6 8GH
          pattern: '^[A-Za-z]{1,2}[0-9][0-9A-Za-z]?\s?[0-9][A-Za-z]{2}$'
    application-DisabilityArms:
      type: object
      properties:
        drivingFrequency:
          type: string
          maxLength: 100
        isAdaptedVehicle:
          type: boolean
          example: true
        adaptedVehicleDescription:
          type: string
          maxLength: 255
      required:
        - isAdaptedVehicle
    application-WalkingDifficulty:
      type: object
      properties:
        typeCodes:
          type: array
          description: |
            'Short codes from the WALKDIFF group of data.  At least 1 required.'
          items:
            $ref: '#/components/schemas/WalkingDifficultyTypeCodeField'
        always:
          type: boolean
          description: Whether applicant always has walking difficulty
        frequencyDescription:
          type: string
          maxLength: 1000
          description: >-
            Description of how frequently applicant has difficulty
        durationDescription:
          type: string
          maxLength: 1000
          description: >-
            Description of how long applicant has difficulty
        painDescription:
          description: >-
            Only entered if 'PAIN' type selected and then mandatory.
          type: string
          maxLength: 2000
        balanceDescription:
          description: >-
            Only entered if 'BALANCE' type selected and then mandatory.
          type: string
          maxLength: 2000
        healthProfessionsForFalls:
          description: >-
            Whether the applicant has seen a health proffession for a fall. Only entered if 'BALANCE' type selected and then mandatory.
          type: boolean
        dangerousDescription:
          description: >-
            Only entered if 'DANGER' type selected and then mandatory.
          type: string
          maxLength: 2000
        chestLungHeartEpilepsy:
          description: >-
            Whether the applicant has a chest, lung or heart condition or they have epilepsy. Only entered if 'DANGER' type selected and then mandatory.
          type: boolean
        otherDescription:
          description: >-
            Only entered if 'SOMELSE' type selected and then mandatory.
          type: string
          maxLength: 2000
        walkingPain:
          $ref: '#/components/schemas/application-WalkingPain'
        walkingBalance:
          $ref: '#/components/schemas/application-WalkingBalance'
        walkingAids:
          type: array
          items:
            $ref: '#/components/schemas/application-WalkingAid'
        walkingLengthOfTimeCode:
          $ref: '#/components/schemas/WalkingLengthOfTimeCodeField'
        walkingSpeedCode:
          $ref: '#/components/schemas/WalkingSpeedCodeField'
        treatments:
          type: array
          items:
            $ref: '#/components/schemas/application-Treatment'
        medications:
          type: array
          items:
            $ref: '#/components/schemas/application-Medication'
        breathlessness:
          $ref: '#/components/schemas/application-Breathlessness'
      required:
        - walkingLengthOfTimeCode
    application-WalkingDifficultyUnderHidden:
      type: object
      properties:
        typeCodes:
          type: array
          description: |
            'Short codes from the WALKDIFF group of data.  At least 1 required.'
          items:
            $ref: '#/components/schemas/WalkingDifficultyTypeCodeField'
        always:
          type: boolean
          description: Whether applicant always has walking difficulty
        frequencyDescription:
          type: string
          maxLength: 1000
          description: >-
            Description of how frequently applicant has difficulty
        durationDescription:
          type: string
          maxLength: 1000
          description: >-
            Description of how long applicant has difficulty
        painDescription:
          description: >-
            Only entered if 'PAIN' type selected and then mandatory.
          type: string
          maxLength: 2000
        balanceDescription:
          description: >-
            Only entered if 'BALANCE' type selected and then mandatory.
          type: string
          maxLength: 2000
        healthProfessionsForFalls:
          description: >-
            Whether the applicant has seen a health proffession for a fall. Only entered if 'BALANCE' type selected and then mandatory.
          type: boolean
        dangerousDescription:
          description: >-
            Only entered if 'DANGER' type selected and then mandatory.
          type: string
          maxLength: 2000
        chestLungHeartEpilepsy:
          description: >-
            Whether the applicant has a chest, lung or heart condition or they have epilepsy. Only entered if 'DANGER' type selected and then mandatory.
          type: boolean
        otherDescription:
          description: >-
            Only entered if 'SOMELSE' type selected and then mandatory.
          type: string
          maxLength: 2000
        walkingPain:
          $ref: '#/components/schemas/application-WalkingPain'
        walkingBalance:
          $ref: '#/components/schemas/application-WalkingBalance'
        walkingAids:
          type: array
          items:
            $ref: '#/components/schemas/application-WalkingAid'
        walkingLengthOfTimeCode:
          $ref: '#/components/schemas/WalkingLengthOfTimeCodeField'
        walkingSpeedCode:
          $ref: '#/components/schemas/WalkingSpeedCodeField'
        breathlessness:
          $ref: '#/components/schemas/application-Breathlessness'
      required:
        - walkingLengthOfTimeCode
    application-WalkingPain:
      type: object
      properties:
        typeCodes:
          type: array
          description: > 
            'Short codes from the WALKPAIN group of data. At least 1 required'
          items:
            $ref: '#/components/schemas/WalkingPainTypeCodeField'
        relief: 
          type: boolean
          description: Whether applicant takes pain relief
        copeDescription:
          type: string
          maxLength: 1000
          description: >
            'Description of how applicant is able to cope with pain'
        breaksDescription:
          type: string
          maxLength: 1000
          description: >
            'Description of how applicant take breaks in walking to cope with pain'
        sickDescription:
          type: string
          maxLength: 1000
          description: >
            'Description of how pain may cause applicant feel sick'
        unbearableDescription:
          type: string
          maxLength: 1000
          description: >
            'Description of how the pain is unbearable to applicant'
        otherDescription:
          type: string
          maxLength: 1000
          description: >
            'Other description of walking pain'
    application-WalkingBalance:
      type: object
      properties:
        typeCodes:
          type: array
          description: >
            'Short codes from BALANCE group of data. At least 1 required'
          items:
            $ref: '#/components/schemas/WalkingBalanceTypeCodeField'
        supermarketDescription:
          type: string
          maxLength: 1000
          description: >
            'Description of how applicant can move around supermarkets with supporting trolley'
        stairsDescription:
          type: string
          maxLength: 1000
          description: >
            'Description of how applicant can walk up/down a single flight of stairs in a house'
        indoorsDescription:
          type: string
          maxLength: 1000
          description: >
            'Description of how applicant can walk around indoors'
        shoppingCentreDescription:
          type: string
          maxLength: 1000
          description: >
            'Description whether applicant can walk around a small shopping centre'
        otherDescription:
          type: string
          maxLength: 1000
          description: >
            'Other description of walking balance'
    application-Breathlessness:
      type: object
      properties:
        typeCodes:
          type: array
          description: >
            'Short codes from the BREATHLESS group of data. At least 1
            required.'
          items:
            $ref: '#/components/schemas/BreathlessnessTypeCodeField'
        otherDescription:
          description: >-
            Only entered if something else type selected and even then not
            required.
          type: string
          maxLength: 255
      required:
        - typeCode
    application-Medication:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          example: Paracetamol
        isPrescribed:
          type: boolean
          example: true
        frequency:
          type: string
          maxLength: 100
          example: Twice daily.
        quantity:
          type: string
          maxLength: 100
          example: '1 tablet, 20mg'
    application-Treatment:
      type: object
      properties:
        description:
          type: string
          maxLength: 100
        time:
          type: string
          maxLength: 100
          example: 6 months
    application-WalkingAid:
      type: object
      properties:
        description:
          type: string
          maxLength: 100
        usage:
          type: string
          maxLength: 100
        howProvidedCode:
          $ref: '#/components/schemas/HowProvidedCodeField'
      required:
        - howProvidedCode
    application-Artifact:
      description: Provided files/evidence
      type: object
      properties:
        type:
          description: The artifact type
          type: string
          enum:
            - PROOF_ELIG
            - SUPPORT_DOCS
            - PROOF_ADD
            - PROOF_ID
            - PHOTO
          example: PROOF_ADD
        link:
          description: The link to the artifact
          type: string
      required:
        - type
        - link
    LocalCouncil:
      type: object
      properties:
        description:
          type: string
          description: Council name
          maxLength: 100
        welshDescription:
          type: string
          description: Council name in Welsh
          maxLength: 100
    LocalAuthority:
      type: object
      properties:
        description:
          type: string
        welshDescription:
          type: string
        paymentsEnabled:
          type: boolean
        nameLine2:
          type: string
          description: name line 2
          example: null
        addressLine1:
          type: string
          description: address line 1
          example: high street 1
        addressLine2:
          type: string
          description: address line 2
          example: borough
        addressLine3:
          type: string
          description: address line 3
          example: city
        addressLine4:
          type: string
          description: address line 4
          example: other
        town:
          type: string
          description: town
          example: Manchester
        county:
          type: string
          description: county
          example: Lancashire
        postcode:
          type: string
          description: postcode
          example: SW1P 4DR
        country:
          type: string
          description: country
          example: United Kingdom
        nation:
          type: string
          description: 'ENG, WLS, SCO or NIR'
          example: ENG
        contactNumber:
          type: string
          description: contact phone number
          example: 01632 960493
        contactUrl:
          type: string
          description: web site url
          example: 'https://www.gov.uk/'
        emailAddress:
          type: string
          description: email address
          example: abc@abcdefghijk.co.uk
        badgePackType:
          type: string
          description: 'badge pack type STANDARD, WALLET'
          example: STANDARD
        badgeCost:
          type: number
          minimum: 0
          maximum: 999.99
          description: badge cost
          example: 100
        differentServiceSignpostUrl:
          type: string
          description: Service signpost url
          example: 'http://tiny.url?q=ab63fg'
        streamlinedCitizenReapplicationJourneyEnabled:
          type: boolean
          description: when true, enables streamlined citizen reapplication journey
      required:
        - description
        - postcode
        - country
        - nation
        - contactUrl
    ReferenceDataResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ReferenceData'
    SingleReferenceDataResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ReferenceData'
    ReferenceData:
      type: object
      properties:
        shortCode:
          type: string
          description: Identifier of data item
          example: AFRFCS
        description:
          type: string
          description: Display value of data item
          example: Armed Forces Compensation scheme
        metaData:
          type: object
          additionalProperties: true
          description: JSON block of meta data for the item
          example: '{"nation":"Scotland"}'
        groupShortCode:
          type: string
          description: Group of data.
          example: ELIGIBILIT
        groupDescription:
          type: string
          description: Description of group
          example: Eligibility
        subgroupShortCode:
          type: string
          description: Id of a subgroup
          example: ELIG_AUTO
        subgroupDescription:
          type: string
          description: Display value of a sub group
          example: Automatic
        displayOrder:
          type: integer
          description: Order to display
    PartyTypeCodeField:
      type: string
      enum:
        - PERSON
        - ORG
      example: PERSON
    ApplicationTypeCodeField:
      type: string
      enum:
        - NEW
        - RENEW
        - CANCEL
        - REPLACE
      example: NEW
    EligibilityCodeField:
      type: string
      enum:
        - PIP
        - PIPPLAN
        - DLA
        - AFRFCS
        - WPMS
        - BLIND
        - WALKD
        - ARMS
        - CHILDBULK
        - CHILDVEHIC
        - TERMILL
      example: PIP
    GenderCodeField:
      type: string
      enum:
        - FEMALE
        - MALE
        - UNSPECIFIE
      example: FEMALE
    VehicleTypeCodeField:
      type: string
      enum:
        - CAR
        - PEOPLECAR
        - MINIBUS
        - OTHERVEH
      example: CAR
    BulkyMedicalEquipmentTypeCodeField:
      type: string
      enum:
        - CAST
        - OXYSAT
        - OXYADMIN
        - SYRINGE
        - PARENT
        - PUMP
        - SUCTION
        - VENT
        - OTHER
        - NONE
      example: CAST
      description: NONE is deprecated
    WalkingDifficultyTypeCodeField:
      type: string
      enum:
        - PAIN
        - BREATH
        - BALANCE
        - DANGER
        - STRUGGLE
        - SOMELSE
        - LONGTIME
      example: PAIN
    WalkingLengthOfTimeCodeField:
      type: string
      enum:
        - CANTWALK
        - LESSMIN
        - FEWMIN
        - MORETEN
        - ONEFIVE
        - FIVETEN
      example: CANTWALK
    WalkingPainTypeCodeField:
      type: string
      enum:
        - COPE
        - BREAKS
        - SICK
        - UNBEARABLE
        - OTHER
      example: BREAKS
    WalkingBalanceTypeCodeField:
      type: string
      enum:
        - SUPERMARKE
        - STAIRS
        - INDOORS
        - SHOPPING
        - OTHER
    WalkingSpeedCodeField:
      description: 'Required if able to walk, i.e. Walking length of time not cannot walk.'
      type: string
      enum:
        - MSLOW
        - SLOW
        - SAME
        - FAST
      example: SLOW
    HowProvidedCodeField:
      type: string
      enum:
        - PRESCRIBE
        - PRIVATE
        - SOCIAL
        - PERSON
      example: PRIVATE
    ApplicationStatusField:
      type: string
      enum:
        - TODO
        - INPROGRESS
        - COMPLETED
      example: TODO
      description: The new application status
    BreathlessnessTypeCodeField:
      type: string
      enum:
        - UPHILL
        - KEEPUP
        - OWNPACE
        - DRESSED
        - OTHER
      example: UPHILL
      description: Further breathlessness information
    AssessmentTypeField:
      type: string
      description: >-
            A short code to describe type of assessment performed on any discretionary eligibilities. This is REQUIRED only for discretionary eligibilities.
            e.g. PERSON, PHONE, DESK, APPEAL or GP.
            GP is ONLY accepted by Welsh authorities.
      enum:
        - PERSON
        - PHONE
        - DESK
        - APPEAL
        - GP
      example: PHONE
    PlanningFrequencyCodeField:
      type: string
      description: >-
          A short code to describe how frequently an applicant struggles to plan a journey.
      enum:
        - UNFAMILIAR
        - EVERY
      example: EVERY
    JourneyFrequencyCodeField:
      type: string
      description: >-
          A short code to describe how frequently an applicant finds it difficult in a journey
      enum:
        - ALMOSNEVER
        - SOMETIMES
        - ALMOSEVERY
        - EVERY
    ReplaceReasonCodeField:
      type: string
      description: >-
          A short code to explain why badge replacement application is needed
      enum:
        - DAMAGED
        - LOST
        - STOLEN
        - UNDELIVER