openapi: '3.0.2'
info:
  title: 'SightMap Rest API'
  version: 'v1.20200306'
  description: |
    # Introduction

    The SightMap API uses standard HTTP verbs to communicate and HTTP status codes to indicate status and errors. All responses come in standard JSON. The SightMap API is served over HTTPS to ensure data privacy; HTTP is not supported.

    # Errors

    The SightMap API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:

    ```
    {
      "message": "Not found"
    }
    ```

    # Versioning

    The API follows an _only add, never remove_ philosophy. This is a common, best practice for API's to follow.

    Versions are communicated as `VERSION.RELEASE-DATE`, where `VERSION` denotes the version number of the API and prefixed to all API request paths, such as `/v1/assets`. `RELEASE-DATE` denotes backwards-compatible changes to the API.

    When any non-backwards compatible additions must be made to the API, the version number will be incremented.

    ## Backwards-compatible changes

    We consider the following changes to be backwards-compatible:

    - Adding new API resources.
    - Adding new optional request parameters to existing API methods.
    - Adding new properties to existing API responses.
    - Changing the order of properties in existing API responses.
    - Changing the length or format of object IDs or other opaque strings.
    - You can safely assume object IDs we generate will never exceed 255 characters, but you should be able to handle IDs of up to that length. If for example youâ€™re using MySQL, you should store IDs in a `VARCHAR(255) COLLATE utf8_bin` column (the `COLLATE` configuration ensures case-sensitivity in lookups).

    # Authentication

    For requests which require Authentication, an API Key can be provided by either the `api-key` query parameter or `API-Key` header. If neither query parameter or header is provided, a `401` status code is returned with the following JSON:

    ```
    {
      "message": "No API key found in headers or querystring"
    }
    ```

    If your API key cannot be validated, a `403` status code is returned with the following JSON:

    ```
    {
      "message": "Invalid authentication credentials"
    }
    ```

servers:
  - url: https://api.sightmap.com/v1
    description: Production
  - url: https://api.dev.sightmap.com/v1
    description: Development
  - url: https://api.sightmap.local/v1
    description: Local Development

paths:
  /assets:
    get:
      summary: 'List assets'
      description: |
        Returns a list of assets.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: 'Asset list returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Assets']
  /assets/{asset}:
    get:
      summary: 'View an asset'
      description: |
        Returns a asset.
      parameters:
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Resource returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Assets']
  /assets/{asset}/multifamily/units:
    get:
      summary: 'List units'
      description: |
        Returns a list of units for an asset.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Unit list returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Unit'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Units']
  /assets/{asset}/multifamily/units/{unit}:
      get:
        summary: 'View a unit'
        description: |
          Returns a specific unit.
        parameters:
          - name: asset
            in: path
            description: 'An asset ID.'
            required: true
            schema:
              type: string
          - name: unit
            in: path
            description: 'A unit ID.'
            required: true
            schema:
              type: string
        responses:
          '200':
            description: 'Resource returned'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Unit'
          '401':
            $ref: '#/components/responses/NoAPIKeyError'
          '403':
            $ref: '#/components/responses/AccessDeniedError'
          '404':
            $ref: '#/components/responses/ResourceNotFoundError'
        security:
          - apiKeyInHeader: []
          - apiKeyInQuery: []
        tags: ['Units']
  /assets/{asset}/multifamily/floors:
    get:
      summary: 'List floors'
      description: |
        Returns a list of floors for the asset.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Floors list returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Floor'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Floors']
  /assets/{asset}/multifamily/floors/{floor}:
    get:
      summary: 'View a floor'
      description: |
        Returns a specific floor.
      parameters:
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
        - name: floor
          in: path
          description: 'A floor ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Resource returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Floor'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Floors']
  /assets/{asset}/multifamily/floor-plans:
    get:
      summary: 'List floor plans'
      description: |
        Returns a list of floor plans.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Floor plan list returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FloorPlan'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Floor Plans']
  /assets/{asset}/multifamily/floor-plans/{floor-plan}:
    get:
      summary: 'View a floor plan'
      description: |
        Returns a specific floor plan.
      parameters:
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
        - name: floor-plan
          in: path
          description: 'A floor plan ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Resource returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorPlan'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Floor Plans']
  /assets/{asset}/multifamily/pricing:
    get:
      summary: 'List pricing processes'
      description: |
        Returns the pricing processes on an asset.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Process list returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PricingProcess'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Pricing & Availability']
  /assets/{asset}/multifamily/pricing/{process}:
    get:
      summary: 'View a pricing process'
      description: |
        Returns a specific pricing process.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
        - name: process
          in: path
          description: 'A process ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Resource returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricingProcess'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Pricing & Availability']
  /assets/{asset}/multifamily/pricing/{process}/entries:
    get:
      summary: 'List pricing'
      description: |
        Returns the pricing entries for a process. Note there may be many entries for a unit, such is the case for `revenue_management` pricing strategies.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
        - name: process
          in: path
          description: 'A process ID.'
          required: true
          schema:
            type: string
        - name: flat-pricing
          in: query
          description: 'Force a flat pricing view of the entry data.'
          required: false
          schema:
            type: string
            enum:
                - '1'
                - '0'
        - name: unit
          in: query
          description: 'A unit ID to filter the list on.'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Pricing list returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PricingEntry'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Pricing & Availability']
  /assets/{asset}/multifamily/pricing/{process}/units:
    get:
      summary: 'List units'
      description: |
        Returns the units for a process.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
        - name: process
          in: path
          description: 'A process ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Unit list returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PricingUnit'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Pricing & Availability']
  /assets/{asset}/multifamily/pricing/{process}/units/{unit}:
    get:
      summary: 'View a unit'
      description: |
        Returns a specific unit on a process.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - name: asset
          in: path
          description: 'An asset ID.'
          required: true
          schema:
            type: string
        - name: process
          in: path
          description: 'A process ID.'
          required: true
          schema:
            type: string
        - name: unit
          in: path
          description: 'A unit ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Resource returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricingUnit'
        '401':
          $ref: '#/components/responses/NoAPIKeyError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '404':
          $ref: '#/components/responses/ResourceNotFoundError'
      security:
        - apiKeyInHeader: []
        - apiKeyInQuery: []
      tags: ['Pricing & Availability']

components:
  securitySchemes:
    apiKeyInHeader:
      type: apiKey
      name: API-Key
      description: |
        An API key sent via the `API-Key` header.
        ```
        curl -i -H "API-Key: 12345" https://api.sightmap.com/v1/assets
        ```
      in: header
    apiKeyInQuery:
      type: apiKey
      name: api-key
      description: |
        An API key sent via the `api-key` query parameter.
        ```
        curl -i https://api.sightmap.com/v1/assets?api-key=12345
        ```
      in: query

  parameters:
    Page:
      name: page
      description: Request a specific page of resources.
      in: query
      required: false
      schema:
        type: integer
        format: int32
    PerPage:
      name: per-page
      description: Limit the number of returned resources.
      in: query
      required: false
      schema:
        type: integer
        format: int32
  responses:
    NoAPIKeyError:
      description: 'No API key found'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                description: 'The error message.'
                type: string
          example:
            message: 'No API key found in request'
    AccessDeniedError:
      description: 'Access denied due to insufficient permissions'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                description: 'The error message.'
                type: string
          example:
            message:'Access denied'
    ResourceNotFoundError:
      description: 'No resource exists'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                description: 'The error message.'
                type: string
          example:
            message: 'No resource exists'
  schemas:
    Paging:
      description: Meta data for paging through list responses.
      type: object
      properties:
        per_page:
          description: 'The number of resources returned per page.'
          type: integer
          format: int32
        current_page:
          description: 'The current page number.'
          type: integer
          format: int32
        prev_url:
          description: 'A fully qualified URL to the previous page.'
          type: string
          nullable: true
        next_url:
          description: 'A fully qualified URL to the next page.'
          type: string
          nullable: true
      example:
        per_page: 100
        current_page: 1
        prev_url: null
        next_url: null
    Asset:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        market:
          type: string
          enum:
          - 'agriculture'
          - 'airplane'
          - 'airport'
          - 'cemetery'
          - 'condos'
          - 'coworking'
          - 'cruise_ship'
          - 'data_center'
          - 'education'
          - 'gallery_museum'
          - 'geography'
          - 'government'
          - 'harbor_marina'
          - 'healthcare'
          - 'hospitality'
          - 'industrial'
          - 'infrastructure'
          - 'land'
          - 'logistics'
          - 'master_planned'
          - 'mixed_use'
          - 'multifamily'
          - 'office'
          - 'other'
          - 'parking'
          - 'rentable_items'
          - 'resort'
          - 'retail'
          - 'salon'
          - 'self_storage'
          - 'senior_living'
          - 'single_family'
          - 'spa'
          - 'stadium_arena'
          - 'student'
          - 'theme_park'
        name:
          type: string
        display_name:
          type: string
        description:
          type: string
          nullable: true
        unit_count:
          description: 'The number of units the asset has.'
          type: integer
          format: int32
        address_line1:
          type: string
        address_line2:
          type: string
          nullable: true
        address_city:
          type: string
        address_state:
          description: 'Two letter abbreviated state or province.'
          type: string
        address_country:
          description: 'An ISO 3166-1 alpha-3 country code.'
          type: string
        address_postal_code:
          type: string
        address_latitude:
          type: number
          format: float
          nullable: true
        address_longitude:
          type: number
          format: float
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: '1323'
        uuid: 'd5779fbb-43fe-4d54-b642-266ce815a3f3'
        market: 'multifamily'
        name: 'The Lofts at New Main'
        display_name: 'The Lofts at New Main'
        description: null
        unit_count: 138
        address_line1: '100 New Main St'
        address_line2: null
        address_city: 'Cleveland'
        address_state: 'OH'
        address_country: 'USA'
        address_postal_code: '91801'
        address_latitude: 41.433243
        address_longitude: -81.3941872
        created_at: '2017-09-11T17:08:59+00:00'
        updated_at: '2019-10-10T04:25:58+00:00'
    Unit:
      type: object
      properties:
        id:
          type: string
        asset_id:
          description: 'The asset the unit is in.'
          type: string
        floor_id:
          description: 'The floor the unit is on.'
          type: string
        floor_plan_id:
          description: 'The floor plan of the unit.'
          type: string
        map_id:
          description: 'The map ID of the unit. Will be the same as `id`.'
          type: string
        unit_number:
          description: 'The unit number.'
          type: string
        area:
          description: 'The area of the unit represented as square footage or square meters.'
          type: integer
          format: int32
        view_image_url:
          description: 'A fully qualified URL to a view image of the unit.'
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: '258670'
        asset_id: '1323'
        floor_id: '4730'
        floor_plan_id: '14641'
        map_id: '258670'
        unit_number: 'E13'
        area: 700
        view_image_url: null
        created_at: '2017-09-11T17:09:18+00:00'
        updated_at: '2018-01-20T03:44:39+00:00'
    FloorPlan:
      type: object
      properties:
        id:
          type: string
        asset_id:
          description: 'The asset floor plan belongs to.'
          type: string
        name:
          type: string
        bedroom_count:
          description: 'The number of bedrooms.'
          type: integer
          format: int32
        bathroom_count:
          description: 'The number of bathrooms. Fractional values represent partials baths (e.g. `1.5` is 1 1/2 baths).'
          type: number
          format: float
        image_url:
          description: 'A fully qualified URL to an image of the floor plan.'
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: '14641'
        asset_id: '1323'
        name: '1 Bed 1 Bath'
        bedroom_count: 1
        bathroom_count: 1
        image_url: 'https://cdn.sightmap.com/assets/dg/ow/dgow3mqzv2m/9c/85/9c85d1e22823d175faa9d03fbb4b973a.jpg'
        created_at: '2017-09-11T17:09:18+00:00'
        updated_at: '2018-11-30T22:21:05+00:00'
    Floor:
      type: object
      properties:
        id:
          type: string
        asset_id:
          description: 'The asset the floor belongs to.'
          type: string
        name:
          type: string
        filter_label:
          description: 'The default filter label for the floor.'
          type: string
        filter_short_label:
          description: 'The default short filter label for the floor.'
          type: string
        sort:
          description: 'The sort order of the floor.'
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: '4730'
        asset_id: '1323'
        name: '1'
        filter_label: 'Floor 1'
        filter_short_label: '1'
        sort: 2
        created_at: '2017-09-11T17:09:17+00:00'
        updated_at: '2019-01-02T22:01:09+00:00'
    PricingProcess:
      type: object
      properties:
        id:
          type: string
        asset_id:
          description: 'The asset the process belongs to.'
          type: string
        type:
          description: |
            The type value represents how the process receives its pricing &
            availability data.

            - `poll`: The data is requested by our system at configured intervals.
            - `push`: The data is sent to the API.
            - `manual`: The data is input by a user via our staff or customer portals.
          enum:
          - 'poll'
          - 'push'
          - 'manual'
        pricing_strategy:
          type: string
          enum:
          - 'flat_pricing'
          - 'revenue_management'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: '1145'
        asset_id: '1323'
        type: 'manual'
        name: 'Lofts at New Main - Manual'
        pricing_strategy: 'flat_pricing'
        created_at: '2018-04-03T19:27:33+00:00'
        updated_at: '2018-04-03T19:27:33+00:00'
    PricingUnit:
      type: object
      properties:
        id:
          type: string
        pricing_id:
          description: 'The pricing process the unit belongs to.'
          type: string
          nullable: true
        provider_id:
          description: 'A third-party ID matched on the unit.'
          type: string
          nullable: true
        unit_number:
          description: 'The unit number.'
          type: string
        status:
          description: 'The status value on the unit.'
          type: string
          nullable: true
        price:
          description: 'The lease price of the unit.'
          type: integer
          nullable: true
        full_price:
          description: 'The full price of the unit. When this value is provided, the `price` attribute then represents a discounted price.'
          type: integer
          nullable: true
        specials_description:
          type: string
          nullable: true
        available_on:
          description: 'The date the unit is available for lease.'
          type: string
          format: date
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: '258722'
        pricing_id: '1151'
        provider_id: '40B'
        unit_number: 'SE40B'
        status: null
        price: 2400
        full_price: null
        specials_description: null
        available_on: '2018-08-28'
        updated_at: '2020-09-015T18:07:00+00:00'
        created_at: '2018-04-05T18:13:20+00:00'
    PricingEntry:
      type: object
      properties:
        price:
          description: 'The lease price of the unit.'
          type: integer
        available_on:
          description: 'The date the unit is available for lease.'
          type: string
          format: date
        lease_term:
          description: 'The lease term.'
          type: integer
          nullable: true
        lease_starts_on:
          description: 'The date the lease starts on.'
          type: string
          format: date
          nullable: true
        unit_id:
          description: 'The unit the entry belongs to.'
          type: string
        unit_number:
          description: 'The unit number.'
          type: string
        provider_id:
          description: 'A third-party ID matched on the unit.'
          type: string
          nullable: true
        status:
          description: 'The status value on the unit.'
          type: string
          nullable: true
        leasing_fields:
          description: |
            An arbitrary set of key-value pairs. The value of each key must be scalar (i.e. strings, numbers, etc.) with string values having a 2000 character limit. This allows additional values to be passed which are required for the various online leasing flows.
          type: object
          nullable: true
        created_at:
          type: string
          format: date-time
      example:
        - price: 2400
          available_on: '2018-08-28'
          lease_term: 11
          lease_starts_on: '2018-09-15'
          unit_id: '258722'
          unit_number: 'SE40B'
          provider_id: '40B'
          status: null
          leasing_fields:
            unit_id: '40B'
            building_id: 'SE'
          created_at: '2020-09-015T18:07:00+00:00'
        - price: 2625
          available_on: '2018-08-28'
          lease_term: 12
          lease_starts_on: '2018-09-15'
          unit_id: '258722'
          unit_number: 'SE40B'
          provider_id: '40B'
          status: null
          leasing_fields:
            unit_id: '40B'
            building_id: 'SE'
          created_at: '2020-09-015T18:07:00+00:00'