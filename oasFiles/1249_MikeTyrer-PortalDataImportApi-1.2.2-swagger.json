{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/miketongUD/PortalDataImport/1.0.0"
  } ],
  "info" : {
    "version" : "1.2.2",
    "title" : "Portal Data Import API",
    "description" : "API to load data in to portals.\n1.2.2 + Add Sandbox authorisation\n1.2.1 + Align document types with the V2 Portals\n1.2.0 + Removed the submitBasket endpoint as not yet required.\n1.1.1 + Add Product to contract details, needed for quote + Add Pricebook to contract details, needed for quote\n1.1.0 + Change usages from array to object (breaking change) + Add brokeragePaymentTerm to ContractDetails + Added commercialUsagePercentage to ContractDetails\n1.0.6 + Add contact to site\n1.0.5 + Added Smart Meter marketing to SME Gas and SME Electric"
  },
  "security" : [ {
    "application" : [ "read", "write" ]
  } ],
  "paths" : {
    "/createBasket" : {
      "post" : {
        "summary" : "Send a Basket of data to a supplier portal",
        "description" : "Allows baskets of new prospects to be imported in to a portal.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateBasketResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateBasketRequest"
              }
            }
          },
          "description" : "the data to import",
          "required" : true
        }
      }
    },
    "/addDocument" : {
      "post" : {
        "summary" : "Attach a document to a previously created Basket",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddDocumentResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddDocumentRequest"
              }
            }
          }
        }
      }
    },
    "/status" : {
      "get" : {
        "summary" : "Server heartbeat operation",
        "description" : "This operation shows how to override the global security defined above, as we want to open it up for all users.",
        "security" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AddDocumentRequest" : {
        "type" : "object",
        "required" : [ "basketId", "documentName" ],
        "properties" : {
          "basketId" : {
            "type" : "string"
          },
          "documentName" : {
            "type" : "string"
          },
          "documentContent" : {
            "type" : "string",
            "format" : "binary"
          },
          "documentType" : {
            "type" : "string",
            "enum" : [ "ElecSignedContract", "ElecDocuSignedContract", "ElecVerbalContractRecording", "ElecVerbalContractScript", "GasSignedContract", "GasDocuSignedContract", "GasVerbalContractRecording", "GasVerbalContractScript", "WaterSignedContract", "WaterDocuSignedContract", "WaterVerbalContractRecording", "WaterVerbalContractScript", "DualFuelSignedContract", "DualFuelDocuSignedContract", "DualFuelVerbalContractRecording", "DualFuelVerbalContractScript", "Loa", "General", "VatExemption", "CclExemption", "DdMandate", "ProofOfChangeOfTenancy", "TaxExemptionDocumentation", "ProofOfPayment", "ProofOfAddress", "ProofOfTrading", "ProofOfBusiness", "VatDeclarationForm" ]
          }
        }
      },
      "CreateBasketRequest" : {
        "type" : "object",
        "required" : [ "sites" ],
        "properties" : {
          "basketId" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "eb06113b-c916-4b80-8e18-a82bbe8a8293"
          },
          "brokerage" : {
            "$ref" : "#/components/schemas/BrokerageIdentifier"
          },
          "aggregatorBrokerage" : {
            "$ref" : "#/components/schemas/BrokerageIdentifier"
          },
          "agent" : {
            "$ref" : "#/components/schemas/AgentIdentifier"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "sites" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Site"
            },
            "minItems" : 1
          }
        }
      },
      "SubmitBasketRequest" : {
        "type" : "object",
        "properties" : {
          "basketId" : {
            "type" : "string"
          }
        }
      },
      "BillingDetails" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/PafAddress"
          },
          "contact" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "deliveryMethod" : {
            "type" : "string",
            "enum" : [ "Email", "Post", "Online", "Both" ]
          },
          "frequency" : {
            "type" : "string",
            "enum" : [ "Monthly", "Quarterly" ]
          },
          "payment" : {
            "$ref" : "#/components/schemas/PaymentDetails"
          }
        }
      },
      "PaymentDetails" : {
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string",
            "enum" : [ "CashOrCheque", "FixedDirectDebit", "VariableDirectDebit", "RecieptofBill", "BACS", "Prepayment" ]
          },
          "paymentTermInDays" : {
            "type" : "integer"
          },
          "directDebitDayOfMonth" : {
            "type" : "integer",
            "minimum" : 1,
            "maximum" : 31
          },
          "fixedDirectDebitPaymentAmount" : {
            "type" : "number"
          },
          "useExistingBankDetails" : {
            "type" : "boolean"
          },
          "bankDetails" : {
            "$ref" : "#/components/schemas/BankDetails"
          }
        }
      },
      "BankDetails" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "branchName" : {
            "type" : "string"
          },
          "sortCode" : {
            "type" : "string",
            "pattern" : "[0-9]{6}"
          },
          "accountNumber" : {
            "type" : "string",
            "pattern" : "[0-9]{8}"
          },
          "accountName" : {
            "type" : "string"
          },
          "requires2signatures" : {
            "type" : "boolean"
          },
          "address" : {
            "$ref" : "#/components/schemas/PafAddress"
          }
        }
      },
      "Site" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "McDonalds oxford road"
          },
          "groupName" : {
            "type" : "string",
            "example" : "North West"
          },
          "contact" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "isChangeOfTenancy" : {
            "type" : "boolean"
          },
          "occupancyType" : {
            "type" : "string",
            "enum" : [ "Landlord", "Owner", "Tenant" ]
          },
          "moveInDate" : {
            "type" : "string",
            "format" : "date"
          },
          "siteAddress" : {
            "$ref" : "#/components/schemas/PafAddress"
          },
          "utilities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UtilityBaseType"
            }
          }
        }
      },
      "ContractDetails" : {
        "type" : "object",
        "properties" : {
          "isRenewalForSupplier" : {
            "type" : "boolean",
            "description" : "Does the supplier already supply this meter, either for the same customer or the previous occupant if change of tenancy."
          },
          "isRenewalForBrokerage" : {
            "type" : "boolean"
          },
          "isNewConnection" : {
            "type" : "boolean"
          },
          "isOutOfContract" : {
            "type" : "boolean",
            "description" : "Cannot always infer this from the currentContractEndDate as this might not be known"
          },
          "currentSupplier" : {
            "$ref" : "#/components/schemas/SupplierIdentifier"
          },
          "newSupplier" : {
            "$ref" : "#/components/schemas/SupplierIdentifier"
          },
          "hasTerminationNoticeBeenServedWithCurrentSupplier" : {
            "type" : "boolean"
          },
          "anyOutstandingDebtWithCurrentSupplier" : {
            "type" : "boolean"
          },
          "fulfilmentCode" : {
            "type" : "string"
          },
          "pricebook" : {
            "type" : "string"
          },
          "product" : {
            "type" : "string"
          },
          "commercialUsagePercentage" : {
            "type" : "integer"
          },
          "brokeragePaymentTerm" : {
            "type" : "string",
            "enum" : [ "WholeLife", "Annual" ]
          },
          "currentContractEndDate" : {
            "type" : "string",
            "format" : "date"
          },
          "newContractStartDate" : {
            "type" : "string",
            "format" : "date"
          },
          "newContractEndDate" : {
            "type" : "string",
            "format" : "date"
          }
        }
      },
      "ElecPriceComponent" : {
        "type" : "object",
        "properties" : {
          "rateType" : {
            "type" : "string",
            "enum" : [ "StandingCharge", "Unit", "Day", "Night", "Weekend", "EveningAndWeekend", "CapacityCharge", "ReactiveCharge", "Fits", "DirectDebit", "ChequeSurcharge" ]
          },
          "amount" : {
            "type" : "number"
          },
          "uplift" : {
            "type" : "number"
          },
          "unit" : {
            "type" : "string",
            "enum" : [ "pencePerDay", "pencePerMonth", "pencePerKwh", "pencePerDayPerKva", "pencePerKvarh" ]
          }
        }
      },
      "GasPriceComponent" : {
        "type" : "object",
        "properties" : {
          "rateType" : {
            "type" : "string",
            "enum" : [ "StandingCharge", "Unit", "DirectDebit", "ChequeSurcharge" ]
          },
          "amount" : {
            "type" : "number"
          },
          "uplift" : {
            "type" : "number"
          },
          "unit" : {
            "type" : "string",
            "enum" : [ "pencePerDay", "pencePerMonth", "pencePerKwh" ]
          }
        }
      },
      "WaterPriceComponent" : {
        "type" : "object",
        "properties" : {
          "rateType" : {
            "type" : "string",
            "enum" : [ "Water", "Sewerage", "Drainage", "Retail", "DirectDebit", "ChequeSurcharge" ]
          },
          "amount" : {
            "type" : "number"
          },
          "uplift" : {
            "type" : "number"
          },
          "unit" : {
            "type" : "string",
            "enum" : [ "poundsPerYear" ]
          }
        }
      },
      "ElecMeterUsage" : {
        "type" : "object",
        "properties" : {
          "unit" : {
            "type" : "integer"
          },
          "day" : {
            "type" : "integer"
          },
          "night" : {
            "type" : "integer"
          },
          "eveningAndWeekend" : {
            "type" : "integer"
          },
          "weekend" : {
            "type" : "integer"
          },
          "reactive" : {
            "type" : "integer"
          },
          "capacity" : {
            "type" : "integer"
          }
        }
      },
      "GasMeterUsage" : {
        "type" : "object",
        "properties" : {
          "unit" : {
            "type" : "integer"
          }
        }
      },
      "WaterMeterUsage" : {
        "type" : "object",
        "properties" : {
          "meterId" : {
            "type" : "string",
            "minLength" : 11,
            "maxLength" : 11
          },
          "annualVolume" : {
            "type" : "integer"
          }
        }
      },
      "SmeElectricity" : {
        "type" : "object",
        "properties" : {
          "mpanTop" : {
            "type" : "string",
            "minLength" : 8,
            "maxLength" : 8,
            "example" : "03801631"
          },
          "mpanBottom" : {
            "type" : "string",
            "format" : "numeric",
            "minLength" : 13,
            "maxLength" : 13,
            "example" : "1640000651453"
          },
          "meterSerialNumbers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "example" : [ "K13W307788" ]
          },
          "associatedMpans" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "numeric",
              "minLength" : 13,
              "maxLength" : 13
            },
            "example" : [ "1610028163255", "1610028163246" ]
          },
          "usage" : {
            "$ref" : "#/components/schemas/ElecMeterUsage"
          },
          "rates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ElecPriceComponent"
            }
          },
          "marketing" : {
            "type" : "object",
            "properties" : {
              "smartMeter" : {
                "$ref" : "#/components/schemas/SmartMeterMarketing"
              }
            }
          }
        }
      },
      "SmeGas" : {
        "type" : "object",
        "properties" : {
          "emergencyContacts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Contact"
            }
          },
          "mprn" : {
            "type" : "string",
            "format" : "numeric",
            "minLength" : 6,
            "maxLength" : 10
          },
          "meterSerialNumbers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "associatedMprns" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "numeric",
              "minLength" : 6,
              "maxLength" : 10
            }
          },
          "usage" : {
            "$ref" : "#/components/schemas/GasMeterUsage"
          },
          "rates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GasPriceComponent"
            }
          },
          "marketing" : {
            "type" : "object",
            "properties" : {
              "smartMeter" : {
                "$ref" : "#/components/schemas/SmartMeterMarketing"
              }
            }
          }
        }
      },
      "SmeWater" : {
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string",
            "enum" : [ "England", "Scotland" ]
          },
          "spidcore" : {
            "type" : "string",
            "format" : "numeric",
            "minLength" : 10,
            "maxLength" : 10
          },
          "waterSpid" : {
            "type" : "string",
            "format" : "numeric",
            "minLength" : 13,
            "maxLength" : 13
          },
          "sewerageSpid" : {
            "type" : "string",
            "format" : "numeric",
            "minLength" : 13,
            "maxLength" : 13
          },
          "usage" : {
            "$ref" : "#/components/schemas/WaterMeterUsage"
          },
          "rates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WaterPriceComponent"
            }
          }
        }
      },
      "SmartMeterMarketing" : {
        "type" : "object",
        "properties" : {
          "contact" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "hasInterest" : {
            "type" : "boolean"
          },
          "refusalDate" : {
            "type" : "string",
            "format" : "date"
          },
          "refusalReason" : {
            "type" : "string"
          }
        }
      },
      "Customer" : {
        "type" : "object",
        "properties" : {
          "referenceCodes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReferenceCode"
            },
            "example" : [ {
              "value" : "ABC1234567",
              "ownerType" : "Supplier"
            }, {
              "value" : "123-321X",
              "ownerType" : "Brokerage"
            } ]
          },
          "groupName" : {
            "type" : "string",
            "example" : "Restaurants",
            "description" : "A group used for organising and filtering customers."
          },
          "letterOfAuthority" : {
            "$ref" : "#/components/schemas/LetterOfAuthority"
          },
          "contact" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "company" : {
            "$ref" : "#/components/schemas/Company"
          }
        }
      },
      "Company" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "McDonalds Ltd"
          },
          "tradingAs" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Limited", "SoleTrader", "Partnership", "NonLimited", "PLC", "Charity", "ChurchOrCommunityOrganisation", "NonProfit", "PublicSector", "MutualSociety", "RoyalCharter", "JerseyBased" ]
          },
          "number" : {
            "type" : "string"
          },
          "dateOfIncorportation" : {
            "type" : "string",
            "format" : "date"
          },
          "dateOfDissolution" : {
            "type" : "string",
            "format" : "date"
          },
          "isScottishCharity" : {
            "type" : "boolean"
          },
          "isMicroBusiness" : {
            "type" : "boolean"
          },
          "sicCodes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SicCode"
            }
          },
          "address" : {
            "$ref" : "#/components/schemas/PafAddress"
          },
          "contacts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Contact"
            }
          },
          "dataSource" : {
            "type" : "string",
            "enum" : [ "Broker", "CompaniesHouse", "CharitiesCommission", "ExperianBusinessTargetter" ]
          }
        }
      },
      "SicCode" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "pattern" : "[0-9]{4}"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "ReferenceCode" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "ownerType" : {
            "type" : "string",
            "enum" : [ "Supplier", "Brokerage" ]
          }
        },
        "example" : {
          "value" : "ABC1234567",
          "ownerType" : "Supplier"
        }
      },
      "LetterOfAuthority" : {
        "type" : "object",
        "properties" : {
          "accessLevel" : {
            "type" : "string",
            "enum" : [ "None", "Full", "Readonly" ]
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date"
          }
        },
        "example" : {
          "accessLevel" : "full",
          "expiryDate" : "2020-02-05"
        }
      },
      "BrokerageIdentifier" : {
        "type" : "object",
        "properties" : {
          "udId" : {
            "type" : "string"
          }
        },
        "example" : {
          "udid" : "BKG-12873"
        }
      },
      "AgentIdentifier" : {
        "type" : "object",
        "properties" : {
          "udId" : {
            "type" : "string",
            "format" : "email"
          }
        }
      },
      "SupplierIdentifier" : {
        "type" : "object",
        "properties" : {
          "udId" : {
            "type" : "string"
          }
        },
        "example" : {
          "udid" : "bgb"
        }
      },
      "Contact" : {
        "type" : "object",
        "description" : "A contact, usually a person, including the information on how to contact them",
        "properties" : {
          "title" : {
            "type" : "string",
            "enum" : [ "Mr", "Mrs", "Miss", "Ms", "Mx", "Misc", "Dr", "Prof", "Admiral", "Captain", "Father", "Lady", "Lord", "Sir", "Rev", "Dame", "Rt Hon", "Sister" ],
            "example" : "Mr"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Joe"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Bloggs"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date"
          },
          "isACompanyOwner" : {
            "type" : "boolean",
            "example" : true
          },
          "email" : {
            "type" : "string",
            "format" : "email"
          },
          "phoneNumbers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PhoneNumber"
            }
          },
          "jobTitle" : {
            "type" : "string",
            "example" : "Director"
          },
          "consent" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "thirdPartyEmail", "thirdPartyPost", "thirdPartySms", "thirdPartyPhone", "thirdPartyFaceToFace", "supplierEmail", "supplierPost", "supplierSms", "supplierPhone", "supplierFaceToFace", "supplierContractEmail", "supplierContractPost", "supplierContractSms", "supplierContractPhone", "supplierContractFaceToFace" ]
            }
          },
          "homeAddress" : {
            "$ref" : "#/components/schemas/HomeAddress"
          }
        }
      },
      "HomeAddress" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/PafAddress"
          },
          "moveInDate" : {
            "type" : "string",
            "format" : "date"
          },
          "previousAddress" : {
            "$ref" : "#/components/schemas/HomeAddress"
          }
        }
      },
      "PhoneNumber" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "string",
            "format" : "phoneNumber",
            "pattern" : "^(((\\+44\\s?\\d{4}|\\(?0\\d{4}\\)?)\\s?\\d{3}\\s?\\d{3})|((\\+44\\s?\\d{3}|\\(?0\\d{3}\\)?)\\s?\\d{3}\\s?\\d{4})|((\\+44\\s?\\d{2}|\\(?0\\d{2}\\)?)\\s?\\d{4}\\s?\\d{4}))(\\s?#(\\d{4}|\\d{3}))?$"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "mobile", "landline", "fax" ]
          }
        }
      },
      "UtilityBaseType" : {
        "description" : "Represents a gas/elec/water utility. Meter point address in ECOES, XOSERVE may be different to the site address so they can be specified here.\n        ",
        "properties" : {
          "BillingDetails" : {
            "$ref" : "#/components/schemas/BillingDetails"
          },
          "ContractDetails" : {
            "$ref" : "#/components/schemas/ContractDetails"
          },
          "Address" : {
            "$ref" : "#/components/schemas/PafAddress"
          },
          "smeElectricDetails" : {
            "$ref" : "#/components/schemas/SmeElectricity"
          },
          "smeGasDetails" : {
            "$ref" : "#/components/schemas/SmeGas"
          },
          "smeWaterDetails" : {
            "$ref" : "#/components/schemas/SmeWater"
          }
        }
      },
      "PafAddress" : {
        "type" : "object",
        "properties" : {
          "organisationName" : {
            "type" : "string",
            "example" : "UD Group"
          },
          "departmentName" : {
            "type" : "string",
            "example" : "Marketing"
          },
          "subBuildingName" : {
            "type" : "string",
            "example" : "2nd Floor"
          },
          "buildingName" : {
            "type" : "string",
            "example" : "Parkway House"
          },
          "buildingNumber" : {
            "type" : "string",
            "example" : null
          },
          "dependentThoroughfareName" : {
            "type" : "string",
            "example" : null
          },
          "thoroughfareName" : {
            "type" : "string",
            "example" : "Palatine Rd"
          },
          "doubleDependentLocality" : {
            "type" : "string"
          },
          "dependentLocality" : {
            "type" : "string",
            "example" : null
          },
          "postTown" : {
            "type" : "string",
            "example" : "Northenden"
          },
          "county" : {
            "type" : "string",
            "example" : null
          },
          "postcode" : {
            "type" : "string",
            "example" : "M22 4DB"
          },
          "poBox" : {
            "type" : "string",
            "example" : null
          }
        }
      },
      "CreateBasketResponse" : {
        "type" : "object",
        "properties" : {
          "basketId" : {
            "type" : "string"
          },
          "success" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "SentToPortal", "FailedToSendToPortal" ]
          },
          "portalUrl" : {
            "type" : "string"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "AddDocumentResponse" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SubmitBasketResponse" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Submitted", "FailedToSubmit" ]
          },
          "portalUrl" : {
            "type" : "string"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "application" : {
        "type" : "oauth2",
        "flows" : {
          "clientCredentials" : {
            "tokenUrl" : "https://sandbox-signon.brokerutilityhub.com/connect/token",
            "scopes" : {
              "udgs-connected-api" : "allows cnnction to connected API",
              "v2portal-api" : "allows access to V2 portal"
            }
          }
        }
      }
    }
  }
}