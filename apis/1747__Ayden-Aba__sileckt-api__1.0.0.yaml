openapi: 3.0.0
info:
  title: Silekt API
  version: 1.0.0
components:
  schemas:
    array_notification:
      type: array
      items:
        $ref: "#/components/schemas/notification"

    notification:
      type: object
      properties:
        id:
          type: integer
        read:
          type: boolean
        float_time:
          type: number
          description: "timestamp"
        notified_at:
          type: string
          description: "custom time string which represents can date or time until notification (maybe)"
        left_image:
          type: string
          description: "s3 bucket url"
        subject:
          type: object
          properties:
            type:
              type: string
            id:
              type: integer
        body:
          type: string
      example:
        {
          "id": 13446,
          "read": false,
          "float_time": 1572615000.0,
          "notified_at": "3d",
          "left_image": "http://sileckt.pixelforcesystems.com.au/assets/sileckt-logo-on-black-4b086dcce07beefb1a76b4f7bc17d32f1534d0215ce3da9496cba22efe2bbd52.png",
          "subject": {
            "type": "LifeAdminEvent",
            "id": 196
          },
          "body": "<b>Life Admin</b> your Insurance Jetski is today"
        }

    coupon:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
        discount_info:
          type: string
        terms_and_conditions:
          type: string
        location:
          type: string
        image:
          type: string
          description: "s3 bucket image url"
        company_logo:
          type: string
          description: "s3 bucket image url"
        company_name:
          type: string
        end_date:
          type: string
        saved:
          type: boolean
        redeemed:
          type: boolean
        expired:
          type: boolean
      example:
        {
          "id": 140,
          "description": "test",
          "discount_info": "$20.00 OFF",
          "terms_and_conditions": "https://sileckt.pixelforcesystems.com.au/",
          "location": "Australia",
          "image": "http://s3-ap-southeast-2.amazonaws.com/sileckt/Coupon/images/000/000/140/original/866-200x300-006d04cd82d6ca661cd4adc6932f48b6.jpg?1572846863",
          "company_logo": "http://s3-ap-southeast-2.amazonaws.com/sileckt/seller_users/logos/000/000/053/sm/sileckt_seller_53_logo-76957478b6bea5a4d5d3b9126e9166fe.png?1558177724",
          "company_name": "Pizza Culture",
          "end_date": "6 December 2019",
          "saved": false,
          "redeemed": false,
          "expired": false
        }

    array_coupon_slim:
      type: array
      items:
        $ref: "#/components/schemas/coupon_slim"

    coupon_slim:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
        discount_info:
          type: string
        terms_and_conditions:
          type: string
        saved:
          type: boolean
        redeemed:
          type: boolean
        image:
          type: string
        company_name:
          type: string
      example:
        {
          "id": 140,
          "description": "test",
          "discount_info": "$20.00 OFF",
          "terms_and_conditions": "https://sileckt.pixelforcesystems.com.au/",
          "saved": false,
          "redeemed": false,
          "image": "http://s3-ap-southeast-2.amazonaws.com/sileckt/Coupon/images/000/000/140/original/866-200x300-006d04cd82d6ca661cd4adc6932f48b6.jpg?1572846863",
          "company_name": "Pizza Culture"
        }

    life_admin_event_input:
      type: object
      properties:
        life_admin_event:
          type: object
          required:
            - name
            - date_range
            - start_time_attr
            - end_time_attr
          properties:
            name:
              type: string
            date_range:
              type: string
              example: "10/10/2019-10/10/2019"
            start_time_attr:
              type: string
              example: "09:00AM"
            end_time_attr:
              type: string
              example: "12:00PM"
            all_day:
              type: boolean
            budget:
              type: number
            main_tag_category_id:
              type: integer
              description: "id of main tag category to apply to life admin event"
            sub_tag_category_id:
              type: integer
              description: "id of sub tag category to apply to life admin event"
            recurrence:
              type: number
              description: "{ never: 0, weekly: 1, fortnightly: 2, monthly: 3, annually: 4 }"
            body:
              type: string
            image:
              $ref: "#/components/schemas/image_input"
            friend_ids:
              type: array
              items:
                type: integer

    array_life_admin_event_slim:
      type: array
      items:
        $ref: "#/components/schemas/life_admin_event_slim"

    life_admin_event_slim:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        event_type:
          type: integer
          description: "enum{ normal: 0, tagged: 1 }"
        all_day:
          type: boolean
        start_time:
          type: string
          example: "09:00AM"
        end_time:
          type: string
          example: "12:00PM"
        image:
          type: string

    life_admin_event:
      type: object
      properties:
        edit:
          type: boolean
        id:
          type: integer
        event_type:
          type: integer
          description: "enum{ normal: 0, tagged: 1 }"
        name:
          type: string
        body:
          type: string
        budget:
          type: number
        recurrence:
          type: integer
          description: "enum{ never: 0, weekly: 1, fortnightly: 2, monthly: 3, annually: 4 }"
        all_day:
          type: boolean
        start_date:
          type: string
          example: "Thursday, 10 October 2019"
        end_date:
          type: string
          example: "Thursday, 10 October 2019"
        start_time:
          type: string
          example: "09:00AM"
        end_time:
          type: string
          example: "12:00PM"
        image:
          type: string
        invited_friends:
          type: array
          items:
            $ref: "#/components/schemas/user_slim"
      example:
        {
          "edit": null,
          "id": 14,
          "event_type": 0,
          "name": "test event",
          "body": null,
          "budget": null,
          "recurrence": 0,
          "all_day": false,
          "start_date": "Thursday, 10 October 2019",
          "end_date": "Thursday, 10 October 2019",
          "start_time": "09:00AM",
          "end_time": "12:00PM",
          "image": "http://localhost:3000/assets/life-admin-img-diy-0df3e60677a8444e878eeb459db55826e2153c073574f265c0ec925fbf998acd.png",
          "invited_friends":
            [
            {
              "id": 5,
              "full_name": " ",
              "user_image": "http://localhost:3000/assets/default-image-Unspecified-bc20f893be08dc857a98c430a7a7cb896fdac3339b26f15f0c660595fd4d231c.png",
            },
            ],
        }

    array_sub_tag_category:
      type: array
      items:
        $ref: "#/components/schemas/sub_tag_category"

    sub_tag_category:
      type: object
      example:
        { "id": 18, "name": "Boat", "life_admin_event_name": "Loan Boat" }
      properties:
        id:
          type: integer
        name:
          type: string
        life_admin_event_name:
          type: string

    array_main_tag_category:
      type: array
      items:
        $ref: "#/components/schemas/main_tag_category"

    main_tag_category:
      type: object
      example:
        {
          "id": 3,
          "name": "Appointment",
          "image": "http://sileckt.pixelforcesystems.com.au/assets/life-admin-img-appointment-c49352f23188beb8957a4e610f3640b45f81d86c39e0c3368b81d07331ac6633.png",
          "has_start_time_and_end_time": true,
          "can_invite_friends": false,
        }
      properties:
        id:
          type: integer
        name:
          type: string
        image:
          type: string
        has_start_and_end_time:
          type: boolean
        can_invite_friends:
          type: boolean

    chat:
      type: object
      properties:
        id:
          type: integer
        muted:
          type: boolean
        user:
          $ref: "#/components/schemas/user_slim"
        chat_messages:
          $ref: "#/components/schemas/array_chat_message"

    array_chat_slim:
      type: array
      items:
        $ref: "#/components/schemas/chat_slim"

    chat_slim:
      type: object
      properties:
        id:
          type: integer
        muted:
          type: boolean
        last_message:
          type: string
        last_message_time:
          type: integer
        unread_message_count:
          type: integer
        user:
          $ref: "#/components/schemas/user_slim"

    array_chat_message:
      type: array
      items:
        $ref: "#/components/schemas/chat_message"

    chat_message:
      type: object
      properties:
        id:
          type: integer
          description: "message id"
        body:
          type: string
          description: "message body"
        time:
          type: integer
          description: "UNIX timestamp"
        user:
          $ref: "#/components/schemas/user_slim"

    array_friend_request:
      type: array
      items:
        $ref: "#/components/schemas/friend_request"

    friend_request:
      type: object
      description: "on db level, friend request can have status 0 = pending, 1 = accepted, 2 = deleted"
      properties:
        id:
          type: integer
        user:
          type: object
          properties:
            id:
              type: integer
            full_name:
              type: string
            user_image:
              type: string

    array_user_slim:
      type: array
      description: "list of slim user objs"
      items:
        $ref: "#/components/schemas/user_slim"

    user_slim:
      type: object
      description: "Slim user obj, with just id, full_name and user_image"
      properties:
        id:
          type: integer
        full_name:
          type: string
        user_image:
          type: string
          description: "s3 bucket url"

    user_thread_skoop:
      type: object
      description: "User thread with embedded linked Skoops"
      properties:
        id:
          type: integer
        body:
          type: string
        image:
          type: string
          description: "s3 bucket url"
        skoops:
          $ref: "#/components/schemas/array_skoop"

    array_user_thread:
      type: array
      items:
        $ref: "#/components/schemas/user_thread"

    user_thread:
      type: object
      properties:
        id:
          type: integer
        body:
          type: string
        image:
          type: string
          description: "s3 bucket url"

    array_fan:
      type: array
      items:
        $ref: "#/components/schemas/fan"

    fan:
      type: object
      properties:
        id:
          type: integer
        full_name:
          type: string
        user_image:
          type: string

    skoop_params:
      type: object
      properties:
        background_color:
          $ref: "#/components/schemas/background_color"
        font_style:
          $ref: "#/components/schemas/font_style"
        size_type:
          $ref: "#/components/schemas/size_type"
        body:
          type: string
        video:
          type: string
        images:
          $ref: "#/components/schemas/array_image_input"

    skoop_update_params:
      type: object
      properties:
        background_color:
          $ref: "#/components/schemas/background_color"
        font_style:
          $ref: "#/components/schemas/font_style"
        body:
          type: string

    size_type:
      type: integer
      example: 0
      enum:
        - square
        - portrait
        - landscape

    font_style:
      type: integer
      example: 2
      enum:
        - classic
        - italic
        - bold
        - upper_case
        - script
        - typewriter

    background_color:
      type: integer
      example: 1
      enum:
        - white
        - red
        - orange
        - yellow
        - green
        - teal_blue
        - blue
        - purple
        - pink

    array_attachment:
      type: array
      description: "list / array of attachments"
      items:
        $ref: "#/components/schemas/attachment"

    attachment:
      type: object
      description: "image attached to a skoop"
      properties:
        id:
          type: integer
          example: 1744
        skoop_id:
          type: integer
          example: 1987
        image:
          type: string
          example: "http://s3-ap-southeast-2.amazonaws.com/sileckt/attachments/assets/000/001/744/original/-1216755723-4e9177c242dd4f6b25093dc9b8af9e63.?1561366895"

    array_image_position:
      type: array
      description: "a list / array of images, with positon order numbers"
      items:
        $ref: "#/components/schemas/image_position"

    image_position:
      type: object
      description: "image url and position"
      properties:
        id:
          type: integer
          description: "db image id"
          example: 262
        image:
          type: string
          description: "s3 bucket url of image"
          example: "http://s3-ap-southeast-2.amazonaws.com/sileckt/user_cover_images/images/000/000/262/original/data-006d04cd82d6ca661cd4adc6932f48b6.?1572569206"
        position:
          type: integer
          description: "order position of image"
          example: 2

    image_position_input:
      type: integer
      example: 1
      description: "order position for image"

    array_image_input:
      type: array
      items:
        $ref: "#/components/schemas/image_input"

    image_input:
      type: string
      example: "https://picsum.photos/id/866/200/300, or base64 encoded img"
      description: "give url if online image (server will upload to s3), otherwise just provide base64 encoded image"

    user_device_request_body:
      type: object
      description: "not sure exactly what this is for / what each of the fields looks like."
      properties:
        user_device:
          type: object
          properties:
            user_id:
              type: integer
            device_type:
              type: string
            device_model_info:
              type: string
            device_token:
              type: string
            device_uuid:
              type: string
            device_os_version:
              type: string
            app_version:
              type: string

    array_skoop:
      type: array
      items:
        $ref: "#/components/schemas/skoop"

    skoop:
      type: object
      properties:
        id:
          type: number
        user_id:
          type: number
        background_color:
          type: number
        font_style:
          type: number
        size_type:
          type: number
        user_image:
          type: string
        user_full_name:
          type: string
        skoop_time:
          type: string
          example: "06 July"
        has_comments:
          type: boolean
        fan:
          type: boolean
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/skoop_attachment"
        in_text_threads:
          type: array
          items:
            type: number
        end_text_threads:
          type: array
          items:
            type: number
        body:
          type: string

    skoop_attachment:
      type: object
      properties:
        id:
          type: integer
        skoop_id:
          type: integer
        image:
          type: string
          description: The url of image on s3 bucket

    user_sign_up_request_body:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
            password:
              type: string

    user_sign_in_request_body:
      type: object
      properties:
        login:
          type: string
          description: email addr
        password:
          type: string

    user:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        user_name:
          type: string
        gender:
          type: string
        origin_country:
          type: string
        phone_number:
          type: string
        post_code:
          type: string
        country:
          type: string
        personal_description:
          type: string
        religion:
          type: string
        political_views:
          type: string
        current_location:
          type: string
        country_visited:
          type: string
        profession:
          type: string
        high_school:
          type: string
        university:
          type: string
        aspirations:
          type: string
        relationship_status:
          type: string
        current_state:
          type: string
        interested_in:
          type: string
        degrees:
          type: string
        work_phone_number:
          type: string
        movies:
          type: string
        tv_shows:
          type: string
        books:
          type: string
        musics:
          type: string
        languages:
          type: string
        bucket_list:
          type: string
        favourite_sports:
          type: string
        sports_played:
          type: string
        hobbies:
          type: string
        full_name:
          type: string
        user_image:
          type: string
        user_image_original:
          type: string
        access_token:
          type: string
        date_of_birth:
          type: string
        current_step:
          type: integer
          description: "step_name: 0, step_dob: 1, step_gender: 2, step_location: 3, step_user_name: 4, complete: 5"
        cover_images:
          $ref: "#/components/schemas/array_image_position"
        family_friends:
          $ref: "#/components/schemas/array_image_position"
        favourite_memories:
          $ref: "#/components/schemas/array_image_position"
        pets:
          $ref: "#/components/schemas/array_image_position"
        skoops:
          $ref: "#/components/schemas/array_skoop"
        user_threads:
          type: string
        thread_skoops:
          type: string
        attachments:
          type: string

  responses:
    ERROR_NO_AUTH:
      description: "no auth"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: array
                items:
                  type: string
                  example: "Please login or signup"

    CURRENT_USER:
      description: "updated current user"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/user"

  parameters:
    previous_page_last_id:
      name: previous_page_last_id
      in: query
      required: false
      description: "id of the last skoop on the previous page. this is how fetch more / pagination is done"
      schema:
        type: integer
        example: 2221

    id:
      name: id
      in: query
      required: true
      description: The id of a user to query
      schema:
        type: integer

    X-USER-ID:
      name: X-USER-ID
      in: header
      required: true
      description: user id
      schema:
        type: string

    X-USER-ACCESS-TOKEN:
      name: X-USER-ACCESS-TOKEN
      in: header
      required: true
      description: user id
      schema:
        type: string

paths:
  /users/sign_up:
    post:
      description: "users#create"
      tags:
        - user
      requestBody:
        description: email and password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_sign_up_request_body"
      responses:
        "200":
          $ref: "#/components/responses/CURRENT_USER"
        "422":
          description: |-
            {error: ['Email address can not be blank']}
            {error: ['Password can not be blank']}
            {error: ['This email address has already been used.']}
            {error: @user.errors.full_messages}

  /users/sign_in:
    post:
      description: "users#sign_in"
      tags:
        - user
      requestBody:
        description: login and password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_sign_in_request_body"
      responses:
        "200":
          $ref: "#/components/responses/CURRENT_USER"
        "401":
          description: |-
            {error: ['Email or Username can not be blank']}
            {error: ['Password can not be blank']}
            {error: ['Invalid Email or Password']}

  /users/update:
    post:
      description: "users#update, don't include the id in the request body, only fields you want to update."
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          $ref: "#/components/responses/CURRENT_USER"
        "422":
          description: "{error: res}"

  /users/reset_password:
    post:
      description: "users#reset_password"
      tags:
        - user
      requestBody:
        description: email
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: "just responds with an empty object"
          content:
            application/json: {}
        "404":
          description: '{error: ["We couldn''t find a user with this email."]}'

  /users/deactive:
    post:
      description: "users#deactive, [DNT]"
      tags:
        - user
      responses:
        "200":
          description: "just response with an empty object"
          content:
            application/json: {}

  /users/show:
    get:
      description: "users#show. no id given returns the current user (me). supplying a valid id attempts to return profile of that user, only returns if a friend."
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          $ref: "#/components/responses/CURRENT_USER"
        "4XX":
          description: "Not friend yet (returns even if supplied id does not exist)"

  /users/skoops:
    get:
      description: "users#user_skoops"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: "a list of skoops for the given user id"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/skoop"
        "404":
          description: "Couldn't find User with 'id'="

  /user_reports:
    post:
      description: "submit / create a user report"
      tags:
        - user_reports
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "The id of the user to report"
                user_offence_reason_id:
                  type: integer
                  description: "The id of the user_offence_reason. Current reasons are: Rude or Vulgar, Sexual Harrassment, Bullying, 'Threadtening'"
      responses:
        "200":
          description: "empty response on success..."
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "500":
          description: "happens when you give an invalid user_id, or user_offence_reason_id"

  /user_offence_reasons:
    get:
      description: "user_offence_reasons#index"
      tags:
        - user_offence_reasons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "list of user offence reasons (used for reporting users)"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    body:
                      type: string
                      example: "Rude or Vulgar / Sexual Harrassment / Bullying / 'Threadtening'"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /friendships:
    delete:
      description: "friendships#destroy"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          name: friend_id
          required: true
          description: "id of friend to delete"
          schema:
            type: integer
      responses:
        "200":
          description: "plain: {}, always returns this..."
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /user_devices:
    post:
      description: "user_devices#create, creates a user_device? not sure when this is used"
      tags:
        - user_devices
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_device_request_body"
      responses:
        "200":
          description: "plain: {}"
          content:
            application/json: {}
        "422":
          description: "{error: user_device.errors.full_messages}"

    delete:
      description: "user_devices#destroy, deletes a user device. NB does not 404 if device cannot be found."
      tags:
        - user_devices
      parameters:
        - in: query
          name: device_token
          required: false
          schema:
            type: string
        - in: query
          name: device_type
          required: false
          schema:
            type: string
        - in: query
          name: device_uuid
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "plain: {}"
          content:
            application/json: {}

  /user_cover_images:
    post:
      description: "set cover images for user"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  $ref: "#/components/schemas/image_input"
                position:
                  $ref: "#/components/schemas/image_position_input"
      responses:
        "200":
          $ref: "#/components/responses/CURRENT_USER"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: |-
            {error: ['Image can not be blank.']}
            {error: ['Position can not be blank.']}

  /pets:
    post:
      description: "set pets images for user"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  $ref: "#/components/schemas/image_input"
                position:
                  $ref: "#/components/schemas/image_position_input"
      responses:
        "200":
          $ref: "#/components/responses/CURRENT_USER"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: |-
            {error: ['Image can not be blank.']}
            {error: ['Position can not be blank.']}

  /favourite_memories:
    post:
      description: "set favourite memories for user"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  $ref: "#/components/schemas/image_input"
                position:
                  $ref: "#/components/schemas/image_position_input"
      responses:
        "200":
          $ref: "#/components/responses/CURRENT_USER"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: |-
            {error: ['Image can not be blank.']}
            {error: ['Position can not be blank.']}

  /family_friends:
    post:
      description: "set family_friends images for user"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  $ref: "#/components/schemas/image_input"
                position:
                  $ref: "#/components/schemas/image_position_input"
      responses:
        "200":
          $ref: "#/components/responses/CURRENT_USER"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: |-
            {error: ['Image can not be blank.']}
            {error: ['Position can not be blank.']}

  /attachments:
    get:
      description: "get list of images attached to skoops for user"
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "list of attachments, is empty array if no attachments"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/array_attachment"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /searches/location_search:
    get:
      description: "searches#location_search"
      tags:
        - searches
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          name: search_text
          required: true
          schema:
            type: string
            example: "Australia"
            description: "Can search by either state or country. Performs a lookup in respective state and country tables in DB. Cannot do city."
      responses:
        "200":
          description: "success, list of countries / states that match search_text"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    country:
                      type: string
                    state:
                      type: string
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: "{error: ['Search text can not be blank.']}"

  # /searches/friend_search:
  #   get:
  #     description: "searches#friend_search"
  #     tags:
  #       - searches
  #     responses:
  #       "422":
  #         description: "{error: ['Invalid Search type.']}"

  # /searches/chat_search:
  #   get:
  #     description: "searches#chat_search"
  #     tags:
  #       - searches
  #     responses:
  #       "200":
  #         description: "chat search"

  # /searches/coupon_search:
  #   get:
  #     description: "searches#coupon_search"
  #     tags:
  #       - searches
  #     responses:
  #       "422":
  #         description: "{error: ['Search text can not be blank.']}"

  /countries:
    get:
      description: "get countries avail in system"
      tags:
        - countries
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          name: search_text
          required: false
          schema:
            type: string
            example: "Australia"
            description: "Country search string"
      responses:
        "200":
          description: "list of countries"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Australia"
                  description: "Country name"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /languages:
    get:
      description: "get languages avail in system"
      tags:
        - languages
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          name: search_text
          required: false
          schema:
            type: string
            example: "Spanish"
            description: "language search string"
      responses:
        "200":
          description: "list of languages"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Australia"
                  description: "Country name"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /skoops:
    get:
      description: "gets 5 skoops for current user"
      tags:
        - skoops
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - $ref: "#/components/parameters/previous_page_last_id"
      responses:
        "200":
          description: "5 skoops"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/array_skoop"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

    post:
      description: "skoops#create, NB: can't figure out how to attach images to skoop"
      tags:
        - skoops
      responses:
        "200":
          description: show
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/skoop_params"
        "422":
          description: "{error: @skoop.errors.full_messages}"

  "/skoops/:id":
    get:
      description: "skoops#show, get single skoop"
      tags:
        - skoops
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          required: true
          description: "skoop id"
          schema:
            type: integer
      responses:
        "200":
          description: "skoop"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/skoop"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "skoop not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      type: string
                      example: "Couldn't find Skoop with an out of range ID"

    put:
      description: "skoops#update"
      tags:
        - skoops
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          required: true
          description: "skoop id"
          schema:
            type: integer
      requestBody:
        description: "params to update, can only update the listed params"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/skoop_update_params"
      responses:
        "200":
          description: "skoop"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/skoop"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "skoop not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      type: string
                      example: "Couldn't find Skoop with an out of range ID"

    delete:
      description: "delete skoop"
      tags:
        - skoops
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          required: true
          description: "id of skoop to delete"
          schema:
            type: integer
      responses:
        "200":
          description: "skoop"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/skoop"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "skoop not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      type: string
                      example: "Couldn't find Skoop with an out of range ID"
  /fans:
    get:
      description: "get fans for a given skoop id"
      tags:
        - fans
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: skoop_id
          required: true
          description: "id of skoop to get fans of"
          schema:
            type: integer
        - in: query
          name: search_text
          required: true
          schema:
            type: string
            example: "a"
            description: "filters name of fans returned"
      responses:
        "200":
          description: "list of fans for given skoop"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/array_fan"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

    post:
      description: "create / delete fan of skoop, fan is ID'd by the auth credentials"
      tags:
        - fans
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: skoop_id
          required: true
          description: "id of skoop to get fans of"
          schema:
            type: integer
        - in: query
          name: fan
          required: true
          schema:
            type: boolean
            example: false
            description: "true => become fan, false => unbecome fan"
      responses:
        "200":
          description: "plain: {}, (empty response)"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: "{error: fan.errors.full_messages}"

  /user_threads:
    get:
      description: "get user threads"
      tags:
        - user_threads
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "list of user threads + list skoops, linked via the id of the skoop.in_test_threads key"
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_threads:
                    $ref: "#/components/schemas/array_user_thread"
                  skoops:
                    $ref: "#/components/schemas/array_skoop"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  "/user_threads/:id":
    get:
      description: "get single user thread"
      tags:
        - user_threads
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          required: true
          description: "id of user_thread to get"
          schema:
            type: integer
      responses:
        "200":
          description: "user thread with id, with embedded skoops which reference the user_thread"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_thread_skoop"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "Couldn't find UserThread with id"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      type: string
                      example: "Couldn't find UserThread with 'id'=....."
    delete:
      description: "delete single user thread"
      tags:
        - user_threads
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          required: true
          description: "id of user_thread to delete"
          schema:
            type: integer
      responses:
        "200":
          description: "empty response on success...."
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "Couldn't find UserThread with id"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      type: string
                      example: "Couldn't find UserThread with 'id'=....."

  /user_threads/existing_threads:
    get:
      description: "gets list of existing user_thread body strings for current user"
      tags:
        - user_threads
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: array
                example:
                  [
                    "Europeing",
                    "FoodArt",
                    "Harper",
                    "Sileckt",
                    "TravelAmerica",
                    "TravelEurope",
                    "bucketlist",
                    "bucketlist1",
                  ]
                items:
                  type: string
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /skoop_offence_reasons:
    get:
      description: "get list of skoop offence reasons with ids. skoop offence id is required when creating a user_skoop_report"
      tags:
        - user_skoop_reports
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "list of offence reasons"
          content:
            application/json:
              schema:
                type: array
                example:
                  [
                  { "id": 3, "body": "It's sexually explicit" },
                  { "id": 4, "body": "It's bullying" },
                  { "id": 5, "body": "It's threatening" },
                  { "id": 2, "body": "It's rude or vulgar" },
                  { "id": 6, "body": "It's spam" },
                  { "id": 1, "body": "This should not be on Sileckt" },
                  ]
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    body:
                      type: string
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /user_skoop_reports:
    post:
      description: "report a skoop posted by a user"
      tags:
        - user_skoop_reports
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                skoop_id:
                  type: integer
                  description: "id of skoop to report"
                skoop_offence_reason:
                  type: integer
                  description: "id of report offence reason. see GET /skoop_offence_reasons for how to get offence reaons ids"
      responses:
        "200":
          description: "empty object response on success..."
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: "if try to report same skoop ID again"
          content:
            application/json:
              schema:
                type: object
                example: { "error": ["User has already been taken"] }
        "500":
          description: "empty response, get this if skoop_id or skoop_offence_reason_id does not exist."

  /comments UNDOCUMENTED:
    get:
      description: "comments#index"
      tags:
        - comments
      responses:
        "200":
          description: "get comments"
          content:
            application/json: {}
    post:
      description: "comments#create couldn't get to work"
      tags:
        - comments
      responses:
        "200":
          description: '"api/v1/skoops/show"'
          content:
            application/json: {}
        "422":
          description: "{error: comment.errors.full_messages}"

  /comments/:id/like UNDOCUMENTED:
    post:
      description: "comments#like"
      tags:
        - comments
      responses:
        "200":
          description: "plain: ({success => true}).to_json"
          content:
            application/json: {}
        "422":
          description: '{error: ["Comment not found"]}'

  /comments/:id/unlike UNDOCUMENTED:
    post:
      description: "comments#unlike"
      tags:
        - comments
      responses:
        "200":
          description: "plain: ({success => true}).to_json"
          content:
            application/json: {}
        "422":
          description: '{error: ["Comment not found"]}'

  /comments/:id UNDOCUMENTED:
    delete:
      description: "comments#destroy"
      tags:
        - comments
      responses:
        "200":
          description: '"api/v1/skoops/show"'
          content:
            application/json: {}
        "422":
          description: '{error: ["Comment not found"]}'

  /block_lists:
    get:
      description: "block_lists#index"
      tags:
        - block_lists
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "get list of blocked users"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/array_user_slim"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

    post:
      description: "block_lists#create"
      tags:
        - block_lists
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "id of user to add to block list"
      responses:
        "200":
          description: "plain: {} on success"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: "{error: ['Block Failed.']}"

  "/block_lists/:user_id":
    delete:
      description: "block_lists#destroy"
      tags:
        - block_lists
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          required: true
          description: "user id of block to remove"
          name: user_id
          schema:
            type: integer
      responses:
        "200":
          description: "plain: {}, returns this on success, also returns if user_id DNE"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /friend_requests:
    get:
      description: "get pending friend requests received (does not give requets sent or accepted / rejected)"
      tags:
        - friend_requests
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "list of pending received friend requests"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/array_friend_request"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

    post:
      description: "create a friend request"
      tags:
        - friend_requests
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          required: true
          description: "email addr or username of user to friend request (easier to use email)"
          name: search_text
          schema:
            type: string
            example: "test1@test.com"
      responses:
        "200":
          description: "plain: {}"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: |-
            {error: ['Email or Username can not be blank']}
            {error: ['Unblock this person first!']}

  "/friend_requests/:id":
    put:
      description: "accept friend request"
      tags:
        - friend_requests
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: friend_request_id
          required: true
          description: "id of friend req to accept"
          schema:
            type: integer
      responses:
        "200":
          description: "plain: {}"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: "if friend_request_id DNE or try accept deleted req: {error: ['Error, Friend Request Accept Failed']}"

    delete:
      description: "delete friend request"
      tags:
        - friend_requests
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: friend_request_id
          required: true
          description: "id of friend req to delete"
          schema:
            type: integer
      responses:
        "200":
          description: "plain: {}"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: "if friend_request_id DNE: {error: ['Error, Friend Request Accept Failed']}"

  /news_ads UNDOCUMENTED:
    get:
      description: "news_ads#index"
      tags:
        - news_ads
      responses:
        "200":
          description: "UNDOCUMENTED"

  /news_ads/:id/data_track UNDOCUMENTED:
    get:
      description: "news_ads#data_track"
      tags:
        - news_ads
      responses:
        "200":
          description: "plain: {}"
          content:
            application/json: {}

  /news_categories UNDOCUMENTED:
    get:
      description: "news_categories#index"
      tags:
        - news_categories
      responses:
        "200":
          description: "plain: news_categories.to_json, status: 200"
          content:
            application/json: {}

  /chat_messages:
    get:
      description: "returns last 20 messages for given chat_id, relative to given previous_page_last_id, up to deleted chat history"
      tags:
        - chat_messages
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - $ref: "#/components/parameters/previous_page_last_id"
        - in: path
          name: chat_id
          required: true
          description: "id of chat to lookup"
          schema:
            type: integer
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/array_chat_message"
        "404":
          description: "chat_id not found"
          content:
            application/json:
              schema:
                type: object
                example: "{
                  'error': [
                  'Couldn't find Chat with 'id'=111231233'
                  ]
                  }"
        "500":
          description: "internal server error if invalid previous_page_last_id"

    post:
      description: "create / send chat message"
      tags:
        - chat_messages
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  type: integer
                message_body:
                  type: string
                message_image:
                  type: string
                message_image_url:
                  type: string
      responses:
        "200":
          description: "success, returns created message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/chat_message"
        "401":
          description: "{error: ['Not friend yet.']}"
        "422":
          description: "{error: chat_message.errors.full_messages}"

  "/chat_messages/:id":
    delete:
      description: "delete chat message with given id"
      tags:
        - chat_messages
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          required: true
          name: chat_message_id
          description: "id of chat message to delete"
          schema:
            type: integer
      responses:
        "200":
          description: "plain: {}"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: '{ "error": [ "Couldnt find ChatMessage with id=" ] }'

  /chats:
    get:
      description: "get list of chats for user"
      tags:
        - chats
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/array_chat_slim"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /chats/show:
    get:
      description: "get specific chat for user (query by chat id or user id)"
      tags:
        - chats
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          required: false
          name: id
          description: "id of chat to get"
          schema:
            type: integer
        - in: query
          required: false
          name: user_id
          description: "get chat which is to given user_id"
          schema:
            type: integer
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/chat"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  "/chats/:id":
    delete:
      description: "deletes chat history up to last message"
      tags:
        - chats
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: chat_id
          required: true
          description: "id of chat to operate on"
          schema:
            type: integer
      responses:
        "200":
          description: "plain: {} on success"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  "/chats/:id/mute":
    post:
      description: "chats#mute"
      tags:
        - chats
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: chat_id
          required: true
          description: "id of chat to operate on"
          schema:
            type: integer
        - in: query
          name: mute
          required: true
          description: "mute or unmute chat"
          schema:
            type: boolean
      responses:
        "200":
          description: "plain: {}"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: "{error: ['Mute should be true or false.']}"

  /main_tag_categories:
    get:
      description: "list of main categories in db"
      tags:
        - main_tag_categories
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  diy_image:
                    type: string
                  main_tag_categories:
                    $ref: "#/components/schemas/array_main_tag_category"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /sub_tag_categories:
    get:
      description: "list of sub categories for a given main tag category in db"
      tags:
        - sub_tag_categories
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          name: main_tag_category_id
          required: false
          description: "main tag category id for which to fetch sub tag categories"
          schema:
            type: integer
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  diy_image:
                    type: string
                  main_tag_categories:
                    $ref: "#/components/schemas/array_sub_tag_category"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /life_admin_events:
    get:
      description: "get life admin events for a given day. if no date query param passed. just uses today."
      tags:
        - life_admin_events
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          name: date
          required: false
          description: "date to fetch life admin events for"
          schema:
            type: string
            example: "10/10/2019"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/array_life_admin_event_slim"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

    post:
      description: "create a life admin event"
      tags:
        - life_admin_events
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - life_admin_event
              properties:
                life_admin_event:
                  type: object
                  required:
                    - name
                    - date_range
                    - start_time_attr
                    - end_time_attr
                  properties:
                    name:
                      type: string
                    date_range:
                      type: string
                      example: "10/10/2019-10/10/2019"
                    start_time_attr:
                      type: string
                      example: "09:00AM"
                    end_time_attr:
                      type: string
                      example: "12:00PM"
                    all_day:
                      type: boolean
                    budget:
                      type: number
                    main_tag_category_id:
                      type: integer
                      description: "id of main tag category to apply to life admin event"
                    sub_tag_category_id:
                      type: integer
                      description: "id of sub tag category to apply to life admin event"
                    recurrence:
                      type: number
                      description: "{ never: 0, weekly: 1, fortnightly: 2, monthly: 3, annually: 4 }"
                    body:
                      type: string
                    image:
                      $ref: "#/components/schemas/image_input"
                    friend_ids:
                      type: array
                      items:
                        type: integer
      responses:
        "200":
          description: "success (returns created life_admin_event)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/life_admin_event"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: "{error: @life_admin_event.errors.full_messages}"

  "/life_admin_events/:id":
    get:
      description: "get single life_admin_event by id"
      tags:
        - life_admin_events
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          required: true
          description: "id of life_admin_event to get"
          schema:
            type: integer
      responses:
        "200":
          description: "success (returns life_admin_event)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/life_admin_event"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "{ error: [ Couldn't find LifeAdminEvent with 'id'=1513132 ] }"

    post:
      description: "update single life admin event"
      tags:
        - life_admin_events
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          required: true
          description: "id of life_admin_event to get"
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/life_admin_event_input"
      responses:
        "200":
          description: "success (returns updated life_admin_event)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/life_admin_event"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "{ error: [ Couldn't find LifeAdminEvent with 'id'=1513132 ] }"

    delete:
      description: "delete single life_admin_event by id"
      tags:
        - life_admin_events
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          required: true
          description: "id of life_admin_event to delete"
          schema:
            type: integer
      responses:
        "200":
          description: "success (returns empty obj)"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "{ error: [ Couldn't find LifeAdminEvent with 'id'=1513132 ] }"

  "/event_invitations/:id/accept":
    post:
      description: "accept an event invitation"
      tags:
        - event_invitations
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          required: true
          description: "id of event_invitation to accept"
          schema:
            type: integer
      responses:
        "200":
          description: "plain: ({success => true}).to_json"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "{ error: [ Couldn't find EventInvitation with 'id'=1513132 ] }"

  "/event_invitations/:id/decline":
    post:
      description: "decline an event invitation"
      tags:
        - event_invitations
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          required: true
          description: "id of event_invitation to decline"
          schema:
            type: integer
      responses:
        "200":
          description: "plain: ({success => true}).to_json"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "{ error: [ Couldn't find EventInvitation with 'id'=1513132 ] }"

  /main_categories:
    get:
      description: "main_categories#index"
      tags:
        - main_categories
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                example:
                  [
                  {
                    "id": 1,
                    "name": "Automotive"
                  },
                  {
                    "id": 2,
                    "name": "Entertainment"
                  },
                  {
                    "id": 3,
                    "name": "Fitness"
                  },
                  {
                    "id": 10,
                    "name": "Gears"
                  },
                  {
                    "id": 4,
                    "name": "Health"
                  },
                  {
                    "id": 6,
                    "name": "Insurance"
                  },
                  {
                    "id": 7,
                    "name": "Restaurants"
                  },
                  {
                    "id": 5,
                    "name": "Retail Shopping"
                  },
                  {
                    "id": 8,
                    "name": "Trades & Services"
                  },
                  {
                    "id": 9,
                    "name": "Travel"
                  }
                  ]
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /key_categories:
    get:
      description: "get key categories for given main category ids"
      tags:
        - key_categories
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          name: main_category_ids
          schema:
            type: array
            items:
              type: integer
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
              example:
                [
                {
                  "id": 1,
                  "name": "Dealers"
                },
                {
                  "id": 2,
                  "name": "Detailing"
                },
                {
                  "id": 3,
                  "name": "Gas Station"
                },
                {
                  "id": 4,
                  "name": "Repairs"
                },
                {
                  "id": 5,
                  "name": "Retail"
                },
                {
                  "id": 6,
                  "name": "Cinema's"
                },
                {
                  "id": 7,
                  "name": "Music"
                },
                {
                  "id": 9,
                  "name": "Sporting Events"
                },
                {
                  "id": 8,
                  "name": "Theatre"
                }
                ]
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: "{error: ['Main Category Ids invalid']}"

  /sub_categories:
    get:
      description: "get sub categories for given key category ids"
      tags:
        - key_categories
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          name: key_category_ids
          schema:
            type: array
            items:
              type: integer
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
              example:
                [
                {
                  "id": 1,
                  "name": "New"
                },
                {
                  "id": 2,
                  "name": "Used"
                },
                {
                  "id": 11,
                  "name": "Car Wash"
                }
                ]
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "422":
          description: "{error: ['Key Category Ids invalid']}"

  /coupons:
    get:
      description: "coupons#index"
      tags:
        - coupons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: query
          name: search_text
          description: "search string to filter on coupon company name"
          schema:
            type: string
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  seed_val:
                    type: number
                    description: "not sure what this is"
                  coupons:
                    $ref: "#/components/schemas/array_coupon_slim"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /coupons/:id/view:
    get:
      description: "get a single coupon by id"
      tags:
        - coupons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          required: true
          name: coupon_id
          description: "coupon to query"
          schema:
            type: integer
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/coupon"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "could not find coupon with id"
          content:
            application/json:
              schema:
                type: object
                example: {
                  "error": [
                    "Couldn't find Coupon with 'id'=141110"
                  ]
                }

  /coupons/:id/save:
    post:
      description: "mark coupon as saved"
      tags:
        - coupons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: coupon_id
          required: true
          description: "coupon to operate on"
          schema:
            type: integer
      responses:
        "200":
          description: "success (empty response)"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "could not find coupon with id"
          content:
            application/json:
              schema:
                type: object
                example: {
                  "error": [
                    "Couldn't find Coupon with 'id'=141110"
                  ]
                }

  /coupons/:id/unsave:
    post:
      description: "mark coupon as NOT saved (unsave)"
      tags:
        - coupons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: coupon_id
          required: true
          description: "coupon to operate on"
          schema:
            type: integer
      responses:
        "200":
          description: "success (empty response)"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "could not find coupon with id"
          content:
            application/json:
              schema:
                type: object
                example: {
                  "error": [
                    "Couldn't find Coupon with 'id'=141110"
                  ]
                }

  "/coupons/:id/redeem":
    post:
      description: "redeem a coupon"
      tags:
        - coupons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: coupon_id
          required: true
          description: "coupon to operate on"
          schema:
            type: integer
      responses:
        "200":
          description: "success (empty response)"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "could not find coupon with id"
          content:
            application/json:
              schema:
                type: object
                example: {
                  "error": [
                    "Couldn't find Coupon with 'id'=141110"
                  ]
                }
        "422":
          description: "bad input"
          content:
            application/json:
              schema:
                type: object
              examples:
                already_redeemed:
                  value: {
                    "error": [
                      "Sorry, you have already redeemed this coupon"
                    ]
                  }
                wrong_code?:
                  value: {
                    "error": [
                      "Error, please try again"
                    ]
                  }
                sold_out:
                  value: {
                    "error": [
                      "Sorry, this coupon is sold out"
                    ]
                  }

  /coupons/:id/share:
    post:
      description: "share a coupon with a friend"
      tags:
        - coupons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: coupon_id
          required: true
          description: "coupon to operate on"
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                friend_id:
                  type: integer
      responses:
        "200":
          description: "success (empty response)"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "could not find coupon with id"
          content:
            application/json:
              schema:
                type: object
                example: {
                  "error": [
                    "Couldn't find Coupon with 'id'=141110"
                  ]
                }
        "422":
          description: "bad input"
          content:
            application/json:
              schema:
                type: object
              examples:
                invalid_friend_id:
                  value: {
                    "error": [
                      "Invalid friend id."
                    ]
                  }

  /coupons/coupon_wallet:
    get:
      description: "get coupon wallet (saved coupons)"
      tags:
        - coupons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  coupons:
                    $ref: "#/components/schemas/array_coupon_slim"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /coupons/create_coupons UNDOCUMENTED:
    get:
      description: "couldn't figure out how to retrieve results"
      tags:
        - coupons
      responses:
        "200":
          description: "partial: coupons"
          content:
            application/json: {}

  /notifications:
    get:
      description: "get today's and earlier notifications"
      tags:
        - coupons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  today_notifications:
                    $ref: "#/components/schemas/array_notification"
                  earlier_notifications:
                    $ref: "#/components/schemas/array_notification"
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /notifications/:id:
    put:
      description: "mark notification as read"
      tags:
        - coupons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          description: "id of notification to operate on"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "success (empty response obj)"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "could not find notification with id"
          content:
            application/json:
              schema:
                type: object
                example: {
                  "error": [
                    "Couldn't find Notification with 'id'="
                  ]
                }

    delete:
      description: "delete a notification"
      tags:
        - coupons
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
        - in: path
          name: id
          description: "id of notification to delete"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "success (empty response obj)"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"
        "404":
          description: "could not find notification with id"
          content:
            application/json:
              schema:
                type: object
                example: {
                  "error": [
                    "Couldn't find Notification with 'id'="
                  ]
                }

  /notifications/unread_number:
    get:
      description: "get the number of unread notifications for current user"
      tags:
        - notifications
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  unread_number:
                    type: integer
                    example: 5
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /notifications/unread_chat_number:
    get:
      description: "get the number of unread chat notifications for current user. notification probably created on new chat messages (untested)."
      tags:
        - notifications
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  unread_chat_number:
                    type: integer
                    example: 0
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /notifications/clear_notifications_badge:
    post:
      description: "clears all notification counts (excluding chat notifications)"
      tags:
        - notifications
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "success (empty response)"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"

  /notifications/clear_chats_badge:
    post:
      description: "clears all chat notification counts (only chat notifications)"
      tags:
        - notifications
      parameters:
        - $ref: "#/components/parameters/X-USER-ID"
        - $ref: "#/components/parameters/X-USER-ACCESS-TOKEN"
      responses:
        "200":
          description: "success (empty response)"
          content:
            application/json: {}
        "401":
          $ref: "#/components/responses/ERROR_NO_AUTH"