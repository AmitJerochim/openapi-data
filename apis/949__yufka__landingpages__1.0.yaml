openapi: 3.0.0
info:
  version: '1.0'
  title: 'Landing Pages in Maileon'
  description: 'API for Landing Pages. Operations to maintain landing pages and landing page templates'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/yufka/landingpages/1.0
tags:
  - name: general
    description: General operations
  - name: templates
    description: Template related operations
  - name: pages
    description: Landing page collection related operations
paths:
  /hp/types:
    get:
      tags:
        - general
      summary: lists all page and template page types
      operationId: listTypes
      responses:
        '200':
          description: List of currently available types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PageType'

  /hp/templates:
    get:
      tags:
        - templates
      summary: get list of all templates
      responses:
        '200':
          description: retrieve list of all templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PageType'
    post:
      tags:
        - templates
      summary: create new template resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageTemplate'
      responses:
        '201':
          description: successfully created
          content:
            application/json:
              schema:
                type: integer
                nullable: false
  /hp/templates/{id}:
    get:
      tags:
        - templates
      summary: get template by id
      parameters: 
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
          description: ID of hosted page template
      responses:
        '200':
          description: retrieve template by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTemplate'
        '400':
          description: id <= 0 not accepted
        '404':
          description: no template can be found for ID
    put:
      tags:
        - templates
      summary: update template
      parameters: 
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
            description: ID of hosted page template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageTemplate'
      responses:
        '200':
          description: updated successfuly
        '204':
          description: nothing to update
        '404':
          description: no object found to be updated
        '500':
          description: something very wrong
  /hp/pages:
    get:
      tags:
        - pages
      summary: get list of all pages for current account
      responses:
        '200':
          description: retrieve list of all landing pages for account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Page'
    post:
      tags:
        - pages
      summary: create new page resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      responses:
        '201':
          description: successfully created
          content:
            application/json:
              schema:
                type: integer
                nullable: false
              example: 234
        '400':
          description: can not create new hosted page. Object is null or empty
        '500':
          description: could not create hosted page
  /hp/pages/{id}/settings:
    get:
      tags:
        - settings
      summary: create settings for hosted page
      parameters: 
        - in: path
          name: id
          required: true
          description: ID of page for which settings have to be created
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: retrieve list of all landing pages for account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Settings'
    post:
      tags:
        - settings
      summary: create settings for hosted page
      parameters: 
        - in: path
          name: id
          required: true
          description: ID of page for which settings have to be created
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
      responses:
        '201':
          description: setting succcessfuly created
        '409':
          description: settings can not be created since already exist
        '404':
          description: no page with requested ID exists
        '500':
          description: something very wrong
    put:
      tags:
        - settings
      summary: update settings for existing landing page
      parameters: 
        - in: path
          name: id
          required: true
          description: ID of page for which settings have to be updated
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      responses:
        '201':
          description: update successfull
        '204':
          description: nothing to update
        '404':
          description: no page with requested ID exists
        '500':
          description: something very wrong
  /hp/pages/cproperties:
    get:
      tags: 
        - util
      summary: retrieve map of custom contact properties and data types
      responses:
        '200':
          description: retrieve map of custom contact properties with data types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: string
        '404':
          description: if no custom properties available
        '500':
          description: something very wrong
  /hp/pages/{id}:
    put:
      tags:
        - pages
      summary: update existing landing page
      parameters: 
        - in: path
          name: id
          required: true
          description: ID of page to update
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      responses:
        '200':
          description: update successfull
        '204':
          description: nothing to update
        '404':
          description: no object found to be updated
        '500':
          description: something very wrong
    get:
      tags:
        - pages
      summary: get landing page by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of page to update
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Hosted page for following ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          description: id <= not accepted
        '404':
          description: Hosted page for ID does not exist
components:
  schemas:
    PageType:
      type: string
      description: all possible template and landing page types
      enum:
        - SIGNUP_SUCCESS
        - CONFIRMATION_SUCCESS
        - PROFILE_UPDATE
        - PROFILE_UPDATE_SUCCESS
        - UNSUBSCRIBE_SUCCESS
        - FORWARD_TO_FRIEND
        - FORWARD_TO_FRIEND_SUCCESS
        - MAILING_ARCHIVE
        - ABOUT_SENDER
        - RATING_FORM
        - RATING_THANK_YOU
        - PAGE_NOT_FOUND
        - UNKNOWN
      example: SIGNUP_SUCCESS
      
    PageState:
      type: string
      description: all possible states of landing page
      enum:
        - DRAFT
        - ARCHIVED
        - PUBLISHED
      example: DRAFT
    
    PageTemplate:
      type: object
      description: Template for landing page. Basically a landing page with minimal number of metadata.
      required:
        - id
        - name
        - type
        - htmlData
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Ups Page Not Found Template
        type:
          $ref: '#/components/schemas/PageType'
        htmlData:
          type: string
          example: <div class="cols"></div>
    Page:
      type: object
      description: Landing page object.
      required:
        - id
        - name
        - type
        - state
        - path
        - htmlData
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Signup for news page
        type:
          $ref: '#/components/schemas/PageType'
        state:
          $ref: '#/components/schemas/PageState'
        path:
          type: string
          description: path to hosting.
          example: https://localhost/h/some_path
        htmlData:
          type: string
          example: <div class="cols"></div>
    
    Settings:
      description: Object that describes settings object of page
      type: object
      required:
        - name
        - path
        - settings
        - input-fields
        - output-fields
      properties:
        name:
          type: string
          example: page_name
        path:
          type: string
          example: page_path
        settings:
          type: string
          example: need to discuss what we save here
        input-fields:
          type: object
          $ref: '#/components/schemas/IOSettingsFieldObject'
        output-fields:
          type: object
          $ref: '#/components/schemas/IOSettingsFieldObject'
    
    IOSettingsFieldObject:
      type: object
      required:
        - standard
        - custom
      properties:
        standard:
          type: object
          $ref : '#/components/schemas/StandardFieldList'
        custom:
          type: object
          $ref : '#/components/schemas/CustomFieldList'
          
    
    CustomField:
      type: string
      example: custom_field_name
    
    CustomFieldList:
      description: list of custom fields
      type: array
      items:
        $ref : '#/components/schemas/CustomField'
      example: [custom_field_name, other_custom_field_name]
    
    StandardFieldList:
      description: list of standard fields
      type: array
      items:
        $ref : '#/components/schemas/StandardField'
      example:
        [EMAIL, TITLE]
    StandardField:
      description: describes shema of field object
      type: string
      enum:
        - EMAIL
        - FULLNAME
        - FIRSTNAME
        - LASTNAME
        - NAMEDAY
        - TITLE
        - ORGANIZATION
        - GENDER
        - SALUTATION
        - BIRTHDAY
        - LOCALE
        - COUNTRY
        - STATE
        - REGION
        - CITY
        - ADDRESS
        - HNR
        - ZIP
      example: EMAIL
        
          
    EditorData:
      description: Initialization data that is transfered to plugin on start
      type: object
      required:
        - userName
        - userLocale
        - userTheme
        - accountId
        - pageId
        - apiKey
        - poweredBy
      properties:
        userName:
          type: string
          example: Max Musterman
        userLocale:
          type: string
          example: en-EN
        userTheme:
          type: string
          example: xqueue
        accountId:
          type: integer
          example: 1234
        pageId:
          type: integer
          example: 14
        apiKey:
          type: string
          example: 260afd12-3b6a-40de-910c-b52102e280b1
        poweredBy:
          type: boolean
          example: true
    JwtToken:
      description: JWT token that works as a session object. TBD.
    UserData:
      description: User data for editor like last used colors, tools, settings etc. TBD
