openapi: "3.0.0"
info:
  version: "0.0.1"
  title: Sehatin Mobile eHealth

tags:
- name: "signin"
  description: "Signin"
- name: "app"
  description: "Common operation"
- name: "org"
  description: "Organization data"
- name: "sub"
  description: "Sub data"
- name: "schedule"
  description: "Schedule of Sub"
- name: "queue"
  description: "Queue data"
- name: "ticket"
  description: "Ticket data"
- name: "booking-param"
  description: "BookingParam data"
- name: "payment"
  description: "Payment data"
- name: "banner"
  description: "Banner data"
# - name: "user"
#   description: "Operations about user"
- name: "me"
  description: "Operation about current user"

servers:
  - url: https://rest.sehatin.com/v1
    description: Main server

security:
- ApiKey: []
- Bearer: []

paths:

  /app/upload:    
    post:
      tags:
      - 'app'
      summary: 'Upload image'
      description: 'Upload image'
      requestBody:        
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: OK
          content:
            application/json:              
              schema:
                type: object
                properties:
                  filename: 
                    type: string
                  url:
                    type: string
                    format: uri


  /signin/firebase:
    post:
      tags:
      - 'signin'
      summary: 'SignIn/Up by Firebase'
      description: Default authentication process. If user is not available, it will be created
      security: []
      requestBody:        
        content:
          application/json:
            schema: 
              type: object
              properties:
                token:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:              
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT bearer token
  /signin/local:
    post:
      tags:
      - 'signin'
      summary: 'SignIn/Up by email-password'
      description: 'SignIn/Up by email-password. For testing only'
      security: []
      requestBody:        
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:              
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT bearer token


  /orgs:
    get:
      tags:
      - 'org'
      summary: 'Get Org'
      description: 'Get Org'
      responses:
        200:
          description: List of Org
          content:
            application/json:              
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Org' 

    post:
      tags:
      - 'org'
      summary: 'Create Org'
      description: 'Create Org'
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Org'
      responses:
        200:
          description: OK
          content:
            application/json:              
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Org' 
    

  /orgs/{id}:
    
    parameters: 
    - $ref: '#/components/parameters/id'

    get:
      tags:
      - 'org'
      summary: 'Find Org by ID'
      description: 'Return a single Org'
      responses:
        200:
          description: OK
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/Org'
        404:
          description: "Org not found"

    put:
      tags:
      - 'org'
      summary: 'Update Org by ID'
      description: 'Update Org by ID'
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Org'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
    
    delete:
      tags:
      - 'org'
      summary: 'Delete Org by ID'
      description: 'Delete Org by ID'
      responses:
        200:
          description: OK


  /subs:
    get:
      tags:
      - 'sub'
      summary: Get Sub by orgID
      description: Get Sub by orgID
      parameters: 
      - name: org_id
        in: query
        required: true
        description: Org ID
        schema:
          type: integer
      responses:
        200:
          description: 'List of Sub'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sub' 
    post:
      tags:
      - 'sub'
      summary: 'Create Sub'
      description: 'Create Sub'
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sub'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sub' 


  /subs/{id}:
    parameters: 
    - $ref: '#/components/parameters/id'

    get:
      tags:
      - sub
      summary: Find Sub by ID
      description: Find Sub by ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sub'
        404:
          description: "Sub not found"

    put:
      tags:
      - sub
      summary: Update Sub by ID
      description: Update Sub by ID
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sub'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sub'


  /queues:
    get:
      tags:
      - 'queue'
      summary: Get Queue by Sub ID
      description: Get Queue by Sub ID
      parameters: 
      - name: sub_id
        in: query
        required: true
        description: Sub ID
        schema:
          type: integer
      responses:
        200:
          description: 'List of Queue'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Queue' 
  

  /queues/{id}:
    parameters: 
    - $ref: '#/components/parameters/id'

    get:
      tags:
      - queue
      summary: Find Queue by ID
      description: Find Queue by ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queue'
        404:
          description: Queue not found

    put:
      tags:
      - queue
      summary: Update Queue by ID
      description: Update Queue by ID
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Queue'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queue'


  /queues/{id}/call:
    
    get:
      tags:
      - queue
      summary: Call next Ticket in this Queue
      description:  Call next Ticket in this Queue
      parameters: 
      - $ref: '#/components/parameters/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        404:
          description: Queue not found
  

  /tickets:
    get:
      tags:
      - 'ticket'
      summary: Get Tickets by Queue ID
      description: Get Tickets by Queue ID
      parameters: 
      - name: queue_id
        in: query
        required: true
        description: Queue ID
        schema:
          type: integer
      responses:
        200:
          description: 'List of Tickets'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket' 

    post:
      tags:
      - 'ticket'
      summary: 'Create Ticket'
      description: 'Create Ticket'
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Ticket'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket' 


  /tickets/{id}:
    parameters: 
    - $ref: '#/components/parameters/id'

    get:
      tags:
      - ticket
      summary: Find Ticket by ID
      description: Find Ticket by ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        404:
          description: Ticket not found

    put:
      tags:
      - ticket
      summary: Update Ticket by ID
      description: Update Ticket by ID
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  

  /tickets/{id}/status/{status}:

    put:
      tags:
      - ticket
      summary: Update status Ticket by ID
      description: Update status Ticket by ID
      parameters: 
      - $ref: '#/components/parameters/id'
      - name: status
        in: path
        description: status of Ticket
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        404:
          description: Ticket not found


  /tickets/{id}/confirm/{image}:

    put:
      tags:
      - ticket
      summary: Confirm payment of Ticket by user
      description: Confirm payment of Ticket by user
      parameters: 
      - $ref: '#/components/parameters/id'
      - name: image
        in: path
        description: image id from upload result
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        404:
          description: Ticket not found


  /tickets/{id}/verify:
    put:
      tags:
      - ticket
      summary: Verify user payment of Ticket by admin
      description: Return a single Ticket
      parameters: 
      - $ref: '#/components/parameters/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        404:
          description: Ticket not found


  /schedules:
    get:
      tags:
      - 'schedule'
      summary: Get Schedule by subID
      description: Get Schedule by subID
      parameters: 
      - name: sub_id
        in: query
        required: true
        description: Sub ID
        schema:
          type: integer
      responses:
        200:
          description: 'List of Schedule'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule' 
    post:
      tags:
      - 'schedule'
      summary: 'Create Schedule'
      description: 'Create Schedule'
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'


  /schedules/{id}:
    parameters: 
    - $ref: '#/components/parameters/id'

    get:
      tags:
      - schedule
      summary: Find Schedule by ID
      description: Find Schedule by ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        404:
          description: Schedule not found

    put:
      tags:
      - schedule
      summary: Update Schedule by ID
      description: Update Schedule by ID
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        200:
          description: OK   
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
    
    delete:
      tags:
      - schedule
      summary: Delete Schedule by ID
      description: Delete Schedule by ID
      responses:
        200:
          description: OK


  /booking-params:

    get:
      tags:
      - 'booking-param'
      summary: Get BookingParam by subID
      description: Get BookingParam by subID
      parameters: 
      - name: sub_id
        in: query
        required: true
        description: Sub ID
        schema:
          type: integer
      responses:
        200:
          description: 'List of BookingParam'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingParam' 
    
    post:
      tags:
      - 'booking-param'
      summary: 'Create BookingParam'
      description: 'Create BookingParam'
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingParam'


  /booking-params/{id}:
    parameters: 
    - $ref: '#/components/parameters/id'

    get:
      tags:
      - booking-param
      summary: Find BookingParam by ID
      description: Find BookingParam by ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingParam'
        404:
          description: BookingParam not found

    put:
      tags:
      - booking-param
      summary: Update BookingParam by ID
      description: Update BookingParam by ID
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingParam'
      responses:
        200:
          description: OK     
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingParam'
    
    delete:
      tags:
      - booking-param
      summary: Delete BookingParam by ID
      description: Update BookingParam by ID
      responses:
        200:
          description: OK


  /banners:
    get:
      tags:
      - 'banner'
      summary: Get Active Banner
      description: Get Active Banner
      responses:
        200:
          description: 'List of Banner'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Banner' 
    
    post:
      tags:
      - 'banner'
      summary: 'Create Banner'
      description: 'Create Banner'
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Banner'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Banner'


  /banners/{id}:
    parameters: 
    - $ref: '#/components/parameters/id'

    get:
      tags:
      - banner
      summary: Find Banner by ID
      description: Find Banner by ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Banner'
        404:
          description: Banner not found

    put:
      tags:
      - banner
      summary: Update Banner by ID
      description: Update Banner by ID
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Banner'
      responses:
        200:
          description: OK     
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Banner'
  

  /payments:
    get:
      tags:
      - 'payment'
      summary: Get Payment
      description: Get Payment
      responses:
        200:
          description: 'List of Payment'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment' 
  

  /payments/{id}:
    parameters: 
    - $ref: '#/components/parameters/id'

    get:
      tags:
      - payment
      summary: Find Payment by ID
      description: Find Payment by ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        404:
          description: Payment not found

    put:
      tags:
      - payment
      summary: Update Payment by ID
      description: Update Payment by ID
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        200:
          description: OK     
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'


  # /users:    
    # post:
    #   tags:
    #   - 'user'
    #   summary: 'Create User'
    #   description: 'Create User'
    #   requestBody:        
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/User'
    #   responses:
    #     200:
    #       description: OK
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/User'


  # /users/{id}:
  #   parameters: 
  #   - $ref: '#/components/parameters/id'

  #   get:
  #     tags:
  #     - user
  #     summary: Find User by ID
  #     description: Find User by ID
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       404:
  #         description: User not found

  #   put:
  #     tags:
  #     - user
  #     summary: Update User by ID
  #     description: Update User by ID
  #     requestBody:        
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       200:
  #         description: OK     
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  

  /me/profile:
    get:
      tags:
      - me
      summary: Get current user profile
      description: Get current user profile
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags:
      - me
      summary: Update current user profile
      description: Update current user profile
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'


  /me/roles:
    get:
      tags:
      - me
      summary: Get current user roles
      description: Get current user roles
      responses:
        200:
          description: List of Role
          content:
            application/json:              
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role' 


  /me/tickets:  
    get:
      tags:
      - me
      summary: Get current user booked tickets
      description: Get current user booked tickets
      parameters: 
      - name: queue_id
        in: query
        schema:
          type: integer
      - name: limit
        in: query
        schema:
          type: integer
      - name: offset
        in: query
        schema:
          type: integer
      responses:
        200:
          description: List of Ticket
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket' 

    post:
      tags:
      - me
      summary: Create a ticket
      description: Create a ticket
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Ticket'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket' 


components:
  schemas:

    Org:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        type:
          type: string
          enum: [rs,puskesmas,klinik,dokter]
        address:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        timezone:
          type: integer
          description: Timezone in minutes
        map:
          type: string
          description: Google map url
        pictures:
          type: array
          description: Org photos
          items:
            type: string
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
        deleted_at:
          $ref: '#/components/schemas/Timestamp'
            
    Sub:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        org_id:
          type: integer
        name:
          type: string
        type:
          type: integer
        book_type:
          type: integer
          description: 1=Admin only, 2=Free, 3=Free w/ Verify, 4=Pay admin, 5=Pay Yukngantri
        fee_reg:
          type: integer
        fee_app:
          type: integer
        credit:
          type: integer
        prefix:
          type: string
        info:
          type: string
        pictures:
          type: array
          description: Sub photos
          items:
            type: string
        open_queue:
          type: integer
          description: amount of days the queue will be created before H date
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
        deleted_at:
          $ref: '#/components/schemas/Timestamp'
          
    Queue:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        org_id:
          type: integer
          readOnly: true
        sub_id:
          type: integer
          readOnly: true
        schedule_id:
          type: integer
          readOnly: true
        date:
          type: string
          format: date
          readOnly: true
        open_at: 
          type: integer
        close_at:
          type: integer
        max_queue:
          type: integer
        op:
          type: string
          description: Operator for this queue (usually doctor name)
        status:
          type: integer
          description: 0=open, 1=closed, 2=holiday
        total:
          type: integer
          description: total tickets in this queue
          readOnly: true
        called:
          type: integer
          description: number of tickets called
          readOnly: true
        verify:
          type: integer
          description: number of ticket need to be verified by admin
          readOnly: true
        info:
          type: string
          description: info about this queue by admin
        book_type:
          type: integer
          description: type booking
        payment_id:
          type: integer
          description: paymentID ref
        fee_reg:
          type: integer
          description: fee for registration into org
        fee_app:
          type: integer
          description: fee for yukngantri app
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
        deleted_at:
          $ref: '#/components/schemas/Timestamp'
          
    Ticket:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        org_id:
          type: integer
          description: orgID ref
          readOnly: true
        queue_id:
          type: integer
          description: queueID ref
          readOnly: true
        user_id:
          type: integer
          description: userID that create this ticket
          readOnly: true
        by_admin:
          type: integer
          description: determine user or admin that create the ticket (user:0, admin:1)
          readOnly: true
        org_name:
          type: string
          description: store org name
          readOnly: true
        sub_name:
          type: string
          description: store sub name
          readOnly: true
        number:
          type: integer
          description: the number of ticket in queue
          readOnly: true
        prefix:
          type: string
          description: prefix char for ticket number
          readOnly: true
        user_data:
          type: object
          description: data input by user, in key-value pairs
        status:
          type: integer
          description: status of the ticket (-3=payment required, -2=check payment, 0=waiting, 1=called, 2=skipped, 3=complete, 4=missed, 5=cancel, 6=invalid)
        payment_id:
          type: integer
          description: paymentID ref
        transfer_code:
          type: integer
          description: transfer code for bank transfer checking
          readOnly: true
        fee_reg:
          type: integer
          description: fee for registration into org
          readOnly: true
        fee_app:
          type: integer
          description: fee for yukngantri app
          readOnly: true
        credit:
          type: integer
          description: credit needed to create this ticket
          readOnly: true
        credit_return:
          type: integer
          description: credit returned to user if s/he comes
          readOnly: true
        confirm_at:
          type: string
          format: date-time
          description: payment confirmation time by user
          readOnly: true
        confirm_image:
          type: string
          description: payment confirmation image related to this ticket
        called_at:
          type: string
          format: date-time
          description: time the ticket called by admin
          readOnly: true
        called_by:
          type: integer
          description: adminID that call this ticket
          readOnly: true
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
          
    Schedule:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        org_id:
          type: integer
          description: orgID ref
          readOnly: true
        sub_id:
          type: integer
          description: subID ref
          readOnly: true
        day:
          type: integer
          description: day of week
        open_at:
          type: integer
          description: time open in minutes (UTC)
        close_at:
          type: integer
          description: time closed in minutes (UTC). -1 means no exact time
        max_queue:
          type: integer
          description: max tickets can created in the queue
        op:
          type: string
          description: Operator of the queue (usualy the doctor)      
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
        deleted_at:
          $ref: '#/components/schemas/Timestamp'

    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        name:
          type: string
        birth:
          type: string
          format: date
        gender:
          type: string
          enum: [M, F]
        picture:
          type: string
        credit:
          type: integer
          description: Credit poin that user have. Used for create ticket and returned if s/he comes. +1 everyday
          readOnly: true
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'

    Role:
      type: object
      properties:
        role: 
          type: string
        type:
          type: string
          description: Values (admin,user)
        org:
          $ref: '#/components/schemas/Org'

    BookingParam:
      type: object
      properties:
        id:
          type: integer
        org_id:
          type: integer
        sub_id:
          type: integer
        no:
          type: integer
          description: Ordering number
        type:
          type: integer
          description: Input type (0=singleline, 1=multiline, 2=numeric, 3=phone, 4=email, 16=date, 17=time, 18=image, 19=single-choices, 20=multi-choices)
        optional:
          type: integer
          description: 1=optional, null=required
        label:
          type: string
        label_error:
          type: string
        label_hint:
          type: string
        regex:
          type: string
          description: ReGex used to validate value
        choices:
          type: string
          description: Multiple values separated by comma

    Banner:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        org_id:
          type: integer
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        picture:
          type: string
        note:
          type: string

    Payment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        org_id:
          type: integer
        name:
          type: string
          example: Bank BCA
        account:
          type: string
          example: 0123456789
        detail:
          type: string
          example: a.n. PT Ideplex
        status:
          type: integer

    Timestamp:
      type: string
      format: date-time
      readOnly: true

    Error:
      type: object
      properties:
        message: 
          type: string

  requestBodies:
    Ticket:
      required: true
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        
        
  parameters:
    id:
      name: id
      in: path
      description: Object ID
      required: true
      schema:
        type: integer


  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-Api-Key

    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT