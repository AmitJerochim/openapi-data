openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/mnediw/booking/1.0.1
info:
  description: Simple Booking API
  version: "1.0.1"
  title: Simple Booking API
  contact:
    email: you@your-company.com
    name: Martin Neumann
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: backend
    description: SAPI calls needed for the backend
  - name: frontend
    description: API calls needed for the frontend
paths:
  /housings/{id}:
    get:
      tags:
        - frontend
      summary: Gets a housing by ID.
      description: >
        Delivers the basic data for a housing.
      operationId: getHousingById
      parameters:
        - name: id
          in: path
          description: Housing ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Housing'
        '400':
          description: 'invalid input, object invalid'                
  /housings/{id}/freedays:
    get:
      tags:
        - frontend
      summary: Gets free booking days for the housing.
      description: >
        By default all days have to be marked as "booked". This call delivers the days on which we can be sure that the housing is free. Delivers an array of single dates (ordered). If there is no direct successor for one date then this date has to be marked as "free for arrival". If there is no direct predecessor for one date then this date has to be marked as "free for departure".
      operationId: getFreedaysByHousingId
      parameters:
        - name: id
          in: path
          description: Housing ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string
                  format: date
                example: ["2020-08-29","2020-08-30"]
        '400':
          description: 'invalid input, object invalid'
  /housings/{id}/arrivaldays:
    get:
      tags:
        - frontend
      summary: Gets possible arriving (and departure) days for the housing.
      description: >
        This call delivers the days on which arrival (and departure) is possible. On all other days no arrival and departure possible!
      operationId: getArrivaldaysByHousingId
      parameters:
        - name: id
          in: path
          description: Housing ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string
                  format: date
                example: ["2020-08-29","2020-08-30"]
        '400':
          description: 'invalid input, object invalid' 
  /housings/{id}/price:
    get:
      tags:
        - frontend
      summary: Fetches the price for the given data
      description: >
        This call delivers the price (in EUR) for the given housing in the given time for the given persons.
      operationId: getPriceByHousingId
      parameters:
        - name: id
          in: path
          description: Housing ID
          required: true
          schema:
            type: integer
            format: int64
        - name: persons
          in: query
          description: Number of persons, must be in the range that is set in the housing object
          required: true
          schema:
            type: integer
            format: int64
        - name: arrival
          in: query
          description: Arrival date
          required: true
          schema:
            type: string
            format: date
            example: "2020-08-29"
        - name: departure
          in: query
          description: Departure date
          required: true
          schema:
            type: string
            format: date
            example: "2020-09-12"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: number
                example: 1234.56
        '400':
          description: 'invalid input, object invalid'                    
  /housings/{id}/booking:
    post:
      tags:
        - frontend
      summary: Saves a booking
      description: >
        This call saves the booking for the price (in EUR) for the given housing in the given time for the given persons.
      operationId: createBookingByHousingId
      parameters:
        - name: id
          in: path
          description: Housing ID
          required: true
          schema:
            type: integer
            format: int64
        - name: persons
          in: query
          description: Number of persons, must be in the range that is set in the housing object
          required: true
          schema:
            type: integer
            format: int64
        - name: arrival
          in: query
          description: Arrival date
          required: true
          schema:
            type: string
            format: date
            example: "2020-08-29"
        - name: departure
          in: query
          description: Departure date
          required: true
          schema:
            type: string
            format: date
            example: "2020-09-12"
        - name: price
          in: query
          description: The price the user accepted with the booking. Will be checked if it fits the real price.
          required: true
          schema:
            type: number
            example: 1234.56
        - name: familyName
          in: query
          description: Family Name
          required: true
          schema:
            type: string
            example: "Smith"
        - name: firstName
          in: query
          description: First Name
          required: true
          schema:
            type: string
            example: "John"
        - name: street
          in: query
          description: Street
          required: true
          schema:
            type: string
            example: "Main Street 123"
        - name: zip
          in: query
          description: Postal Code
          required: true
          schema:
            type: string
            example: "01234"
        - name: city
          in: query
          description: City
          required: true
          schema:
            type: string
            example: "New Town"
        - name: country
          in: query
          description: Country
          required: true
          schema:
            type: string
            example: "Deutschland"
        - name: email
          in: query
          description: Email
          required: true
          schema:
            type: string
            example: "info@example.com"
        - name: phone
          in: query
          description: (Mobile) phone
          required: true
          schema:
            type: string
            example: "++49 123 456789"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                example: "Thank you for booking our charming house. We will send you an email with your invoice."
        '400':
          description: 'invalid input, object invalid'                    
components:
  schemas:
    Housing:
      required:
        - id
        - name
        - maxPersons
      properties:
        id:
          type: integer
          format: int64
          example: 999
        name:
          type: string
          example: Holiday home "Rose Garden"
        maxPersons:
          type: integer
          example: 4
        minPersons:
          type: integer
          example: 2
          default: 2
        description:
          type: string
          description: "Important things to tell the user (about whats included in the price etc)"
          example: "Our prices include cleaning, toilet paper and 2 black cats."
          default: ""
        terms:
          type: string
          description: "The (external) link to the terms and conditions"
          example: "https://www.test.com/terms_and_conditions.html"
          default: ""
      type: object
