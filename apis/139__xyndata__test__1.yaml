openapi: 3.0.0
info:
  version: "1"
  title: xyndata test
  description: 'xyndata Test API'
paths:
  /status:
    get:
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - System
      description: API status information
      summary: API status information
      x-eov-operation-id: status
      x-eov-operation-handler: system
  /me:
    get:
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Authorization Error
        '500':
          description: Internal Server error
      security:
        - Bearer: []
      tags:
        - Auth
      description: information about user
      summary: Info about "Me"
      x-eov-operation-id: userMe
      x-eov-operation-handler: auth
  /me/ping:
    get:
      responses:
        '200':
          description: Successful response.
        '403':
          description: Authorization Error
        '500':
          description: Internal Server error
      security:
        - Bearer: []
      tags:
        - Auth
      description: Session Wakeup
      summary: User Ping
      x-eov-operation-id: userPing
      x-eov-operation-handler: auth
  /user/login:
    post:
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '200':
          description: >-
            An authentification token, it remains valid until logout.
            Alternatively, it will timeout after 15 minutes without any
            interaction or Internet connection. The token is also used for the
            security bearer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '403':
          description: The user is not authorized to access to the XUC Admin.
        '500':
          description: Internal Server error
      tags:
        - Auth
      description: User Login
      x-eov-operation-id: userLogin
      x-eov-operation-handler: auth
  /user/logout:
    post:
      responses:
        '200':
          description: Successful Response
        '403':
          description: Authorization Error
        '500':
          description: Internal Server error
      security:
        - Bearer: []
      tags:
        - Auth
      description: >-
        To shutdown all User session properly, call logout before terminating
        your application
      summary: User Logout
      x-eov-operation-id: userLogout
      x-eov-operation-handler: auth
  /licenses:
    get:
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: active
          required: false
          description: Filter by license active flag
          schema:
            type: boolean
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LicenseResponse'
        '403':
          description: Authorization Error
        '500':
          description: Internal Server error
      security:
        - Bearer: []
      tags:
        - Licenses
      description: All Licenses
      summary: All Licenses
      x-eov-operation-id: listLicenses
      x-eov-operation-handler: license
  
  /users:
    get:
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/customerParam'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '403':
          description: Authorization Error
        '500':
          description: Internal Server error
      security:
        - Bearer: []
      tags:
        - Users
      description: All Users
      summary: All Users
      x-eov-operation-id: listUsers
      x-eov-operation-handler: user
    post:
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Authorization Error
        '500':
          description: Internal Server error
      security:
        - Bearer: []
      tags:
        - Users
      description: Create New User
      summary: Create new User
      x-eov-operation-id: createUser
      x-eov-operation-handler: user
  '/users/{userId}':
    delete:
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Authorization Error
        '404':
          description: User does not exist
        '500':
          description: Internal Server error
      security:
        - Bearer: []
      tags:
        - Users
      description: Delete User
      summary: Delete User
      x-eov-operation-id: deleteUser
      x-eov-operation-handler: user
    get:
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Authorization Error
        '404':
          description: User does not exist
        '500':
          description: Internal Server error
      security:
        - Bearer: []
      tags:
        - Users
      description: information about User By Id
      summary: User by ID
      x-eov-operation-id: getUser
      x-eov-operation-handler: user
    put:
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Authorization Error
        '404':
          description: User does not exist
        '500':
          description: Internal Server error
      security:
        - Bearer: []
      tags:
        - Users
      description: Update User
      summary: Update User
      x-eov-operation-id: updateUser
      x-eov-operation-handler: user
components:
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        minimum: 0
        default: 0
    limitParam:
      in: query
      name: limit
      required: false
      description: The numbers of items to return.
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
    customerParam:
      in: query
      name: customer
      required: false
      description: Filter by customer ID
      schema:
        type: string
        format: uuid
    orderParam:
      in: query
      name: order
      required: false
      description: Order by
      schema:
        type: object
        properties:
          asc:
            type: string
          desc:
            type: string
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    License:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/License'
  securitySchemes:
    Bearer:
      in: header
      name: Authorization
      type: apiKey
  schemas:
    Credentials:
      type: object
      properties:
        password:
          description: >-
            The password
          format: password
          type: string
        username:
          description: >-
            An unique user identification user such as a user number, user name
            which identifies the user.
          type: string
      required:
        - password
        - username
      additionalProperties: false
    Token:
      type: object
      properties:
        created:
          description: The data-time string is given in ISO 8601 format.
          format: date-time
          type: string
        token:
          type: string
      required:
        - created
        - token
      additionalProperties: false
    User:
      type: object
      properties:
        customer_id:
          format: uuid
          type: string
        username:
          type: string
        password:
          format: password
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          format: email
          type: string
        phone:
          type: string
      required:
        - username
        - password
        - firstname
        - lastname
      additionalProperties: false
    UserResponse:
      type: object
      properties:
        id:
          format: uuid
          type: string
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          format: email
          type: string
        phone:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
        - id
        - username
        - firstname
        - lastname
      additionalProperties: false
    License:
      type: object
      properties:
        name:
          type: string
        active:
          type: boolean 
      required:
        - name
        - active
      additionalProperties: false
    LicenseResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        active:
          type: boolean
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
        - id
        - active
      additionalProperties: false
    Status:
      type: object
      properties:
        status:
          type: string
      required:
        - status
      additionalProperties: false
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/xyndata/test/1
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/xyndata/test/api/1
