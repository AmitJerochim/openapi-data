openapi: 3.0.0
servers:
  - description: Lob API Auto Mocking
    url: https://api.lob.com/v1
info:
  version: "2"
  title: Lob Api Documentation
  description: >-
    CRUD Operations for PostCard, Template and  Address

      
tags:
- name: "Postcards"
  description: "The postcards endpoint allows you to easily print and mail postcards. The API provides endpoints for creating postcards, retrieving individual postcards, canceling postcards, and retrieving a list of postcards."
- name: "Addresses"
  description: "To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID."
- name: "Templates"
  description: "These API endpoints allow you to create, retrieve, update and delete reusable HTML templates for use with the print & mail API."  
  
paths:
  /postcards:
    get:
      tags: 
        - 'Postcards'
      security: 
        - basicAuth: []
      summary: Retrieves the List of all Postcards Present
      description: >-
             Returns the List of all Postcards
      responses:
        '200':
          description: OK
          
    post:
      tags: ['Postcards']
      security: 
        - basicAuth: []
      summary: Create the Postcard Object 
      requestBody:
          description: "Created Postcard object"
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Postcard"  
      responses:
        '200':
          description: OK  
          
  
  /postcard/{postcard_id}:
    get:
      tags: ['Postcards']
      security: 
        - basicAuth: []
      summary: Retrieves the Postcards based on ID  
      parameters:
        - name: "postcard_id"
          in: "path"
          description: "Get Postcard object with Id"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: Ok   
     
    delete:
      tags: ['Postcards']
      security: 
        - basicAuth: []
      summary: Delete the Postcard based on Id    
      parameters:
        - name: "postcard_id"
          in: "path"
          description: "Postcard Id to be deleted"
          required: true
          schema:
            type: "string"
      responses:
        '201':
          description: Deletion Successfull    
          
  /addresses:
    get:
      tags: ['Addresses']
      security: 
        - basicAuth: []
      summary: ReList all addresses
      description: >-
             Returns the List of all Postcards
      responses:
        '200':
          description: OK
    post:
      tags: ['Addresses']
      security: 
        - basicAuth: []
      summary: Create an address
      requestBody:
          description: "Created Postcard object"
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAddress"  
      responses:
        '200':
          description: OK  
          
  /addresses/{addresses_id}:
    get:
      tags: ['Addresses']
      security: 
        - basicAuth: []
      summary: Retrieve an address
      parameters:
        - name: "addresses_id"
          in: "path"
          description: "Get Postcard object with Id"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: Ok   
     
    delete:
      tags: ['Addresses']
      security: 
        - basicAuth: []
      summary: Delete an address   
      parameters:
        - name: "addresses_id"
          in: "path"
          description: "Postcard Id to be deleted"
          required: true
          schema:
            type: "string"
      responses:
        '201':
          description: Deletion Successfull            
  
  
  
  /templates:
    get:
      tags: ['Templates']
      security: 
        - basicAuth: []
      summary: Retrieve a template
      description: >-
             Returns the List of all Postcards
      responses:
        '200':
          description: OK
    post:
      tags: ['Templates']
      security: 
        - basicAuth: []
      summary: Create a template
      requestBody:
          description: "Created Postcard object"
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Templates"  
      responses:
        '200':
          description: OK  
          
  /templates/{templates_id}:
    get:
      tags: ['Templates']
      security: 
        - basicAuth: []
      summary: Retrieves the Postcards based on ID  
      parameters:
        - name: "templates_id"
          in: "path"
          description: "Get Postcard object with Id"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: Ok   
    post:
      tags: ['Templates']
      security: 
        - basicAuth: []
      summary: Update a template
      parameters:
        - name: "templates_id"
          in: "path"
          description: "Get Postcard object with Id"
          required: true
          schema:
            type: "string"
      requestBody:
          description: "Created Postcard object"
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTemplates"        
      responses:
            '200':
              description: Ok   
    delete:
      tags: ['Templates']
      security: 
        - basicAuth: []
      summary: Delete a template  
      parameters:
        - name: "templates_id"
          in: "path"
          description: "Postcard Id to be deleted"
          required: true
          schema:
            type: "string"
      responses:
        '201':
          description: Deletion Successfull                    
      
components:
  schemas:
    CreateAddress:
     type: object
     properties:
      description:
        type: "string"
        example: "Harry - Office"
      name:
        type: "string"
        example: "Harry Zhang"
      company:
        type: "string"
        example: "Lob"        
      address_line1:
        type: "string"
        example: "185 Berry St"          
      address_line2:
        type: "string"
        example: "# 6100"    
      address_city:
        type: "string"
        example: "San Francisco"        
      address_state:
        type: "string"
        example: "CA"        
      address_zip:
        type: "string"
        example: "94107"        
      address_country:
        type: "string"
        example: "US"        
      phone:
        type: "string"
        example: "5555555555"        
      email:
        type: "string"
        example: "harry@lob.com"              
        
    UpdateTemplates:
       type: object
       properties:
          description:
            type: "string"
            example: "PosCard Description"
          published_version:
            type: "string"
            example: "PosCard Description"
      
    
    Templates:
     type: object
     properties:
        description:
          type: "string"
          example: "PosCard Description"
        html:
          type: "string"
          example: "PosCard Description"
    
    Postcard:
     type: object
     properties:
       description: 
          type: "string"
          example: "PosCard Description"
       to:
         type: object
         properties:
            name: 
              type: "string"
              example: "john Doe"
            address_line1: 
              type: "string"
              example: "185 Berry St"
            address_line2: 
              type: "string"
              example: "# 6100"              
            address_city: 
              type: "string"
              example: "San Francisco"              
            address_state: 
              type: "string"
              example: "CA"  
            address_zip: 
              type: "string"
              example: "94107"                  
       from:
         type: "string"
       back:
         type: "string"
       front:
          type: "string"
       
    
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      
    apiKey:
      type: apiKey
      name: apikey
      in: header
