openapi: 3.0.2
info:
  version: 1.0.8
  title: Consumer App API
  description: Documentation for BigDish Consumer API
servers:
  - url: 'https://system-staging.bigdish.com/api'
    description: Staging Server
  - url: 'https://system.bigdish.com/api'
    description: Production Server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Regions:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          has_premium:
            type: boolean
          name:
            type: string
          timezone:
            type: string
          country:
            $ref: '#/components/schemas/Country'
        required:
          - id
          - name
          - timezone
          - country
    Country:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        phonecode:
          type: string
      required:
        - id
        - name
        - phonecode
    Categories:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          is_premium:
            type: boolean
          name:
            type: string
          priority:
            type: integer
        required:
          - id
          - name
          - priority
    Token:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
      required:
        - access_token
        - refresh_token
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        cover:
          type: string
        mobile:
          type: integer
        email:
          type: string
      required:
        - id
        - name
        - email
    Cities:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
        required:
          - id
          - name
    Ambiences:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
        required:
          - id
          - name
    FoodTypes:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
        required:
          - id
          - name
    Dishes:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          price:
            type: number
            format: float
          name:
            type: string
          description:
            type: string
        required:
          - id
          - price
          - name
          - description
    Images:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          title:
            type: string
          src:
            type: string
        required:
          - id
          - title
          - src
    Restaurant:
      type: object
      properties:
        id:
          type: integer
        is_premium:
          type: boolean
        slug:
          type: string
        name:
          type: string
        cover_small:
          type: string
        description:
          type: string
        avg_price:
          type: integer
        avg_price_formatted:
          type: string
        main_cuisine:
          type: string
          description: Useful for storing Restaurant Details in user's calendar
        types:
          $ref: '#/components/schemas/FoodTypes'
        galleries:
          $ref: '#/components/schemas/Images'
        menu_galleries:
          $ref: '#/components/schemas/Images'
        dishes:
          $ref: '#/components/schemas/Dishes'
        branches:
          $ref: '#/components/schemas/Branches'
      required:
        - id
        - slug
        - name
        - cover_small
        - description
        - avg_price
        - avg_price_formatted
        - main_cuisine
        - types
        - galleries
        - menu_galleries
        - dishes
        - branches
    Branches:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          slug:
            type: string
          region_id:
            type: integer
            description: Useful for storing 'Recently viewed restaurants' in client side
          restaurant_id:
            type: integer
          address:
            type: string
          contact_nr:
            type: string
            description: Useful for displaying branch contact number
          max_days:
            type: integer
          longitude:
            type: number
            format: float
          latitude:
            type: number
            format: float
          opening_hours:
            type: string
          fine_print:
            type: string
          deal_description:
            type: string
          distance:
            type: number
            format: float
          restaurant:
            $ref: '#/components/schemas/Restaurant'
          deals:
            $ref: '#/components/schemas/Deals'
        required:
          - id
          - slug
          - region_id
          - restaurant_id
          - address
          - contact_nr
          - max_days
          - longitude
          - latitude
          - opening_hours
          - fine_print
          - deal_description
          - distance
          - restaurant
    RestaurantResults:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          type:
            type: string
          restaurant:
            $ref: '#/components/schemas/Restaurant'
        required:
          - id
          - name
          - type
          - restaurant
    Promo:
      type: object
      properties:
        id:
          type: integer
        discount:
          type: integer
        availset:
          type: integer
        timeslot:
          type: string
        timeslot_formatted:
          type: string
        timestamp:
          type: number
          format: double
        maxset:
          type: integer
        left:
          type: integer
        deal_id:
          type: array
          items:
            type: integer
      required:
        - id
        - availset
        - timeslot
        - timestamp
        - maxset
        - left
    Promos:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          discount:
            type: integer
          availset:
            type: integer
          timeslot:
            type: string
          timeslot_formatted:
            type: string
          timestamp:
            type: number
            format: double
          maxset:
            type: integer
          left:
            type: integer
          deal_id:
            type: array
            items:
              type: integer
        required:
          - id
          - availset
          - timeslot
          - timestamp
          - maxset
          - left
    Reservation:
      type: object
      properties:
        id:
          type: integer
        party_size:
          type: integer
        discount:
          type: integer
        name:
          type: string
        mobile:
          type: string
        email:
          type: string
        voucher_code:
          type: string
        code:
          type: string
        deal_data:
          $ref: '#/components/schemas/Deal'
        promo:
          $ref: '#/components/schemas/Promo'
      required:
        - id
        - party_size
        - name
        - mobile
        - email
        - voucher_code
        - code
        - promo
    Deal:
      type: object
      properties:
        id:
          type: integer
        old_price:
          type: string
        price:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - id
        - old_price
        - price
        - name
        - description
    Deals:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          old_price:
            type: string
          price:
            type: string
          name:
            type: string
          description:
            type: string
        required:
          - id
          - old_price
          - price
          - name
          - description
    Reservations:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          party_size:
            type: integer
          discount:
            type: integer
          name:
            type: string
          mobile:
            type: string
          email:
            type: string
          voucher_code:
            type: string
          code:
            type: string
          deal_data:
            $ref: '#/components/schemas/Deal'
          promo:
            $ref: '#/components/schemas/Promo'
        required:
          - id
          - party_size
          - name
          - mobile
          - email
          - voucher_code
          - code
          - promo
    Vouchers:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          region_id:
            type: integer
          voucher_code:
            type: string
          cover_image:
            type: string
paths:
  /regions:
    get:
      summary: Load available regions
      tags:
        - Settings Service
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: src
          required: true
          description: Where the request is being called?
          schema:
            type: string
            enum:
              - ios
              - android
              - web
            default: ios
      responses:
        '200':
          description: Region Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Regions'
        default:
          description: Unexpected error
  /categories:
    get:
      summary: Load curated category items
      tags:
        - Restaurant Service
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: src
          required: true
          description: Where the request is being called?
          schema:
            type: string
            enum:
              - ios
              - android
              - web
            default: ios
        - in: query
          name: region
          required: true
          description: Selected Region Name
          schema:
            type: string
            default: Bath
        - in: query
          name: region_id
          required: true
          description: Selected Region ID
          schema:
            type: integer
            default: 4
      responses:
        '200':
          description: Category Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Categories'
        default:
          description: Unexpected error
  /oauth/access_token:
    post:
      summary: Login user via email and password
      tags:
        - Authentication Service
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Valid bigdish email
                  example: testbigdish@gmail.com
                password:
                  type: string
                  description: Valid account password
                  example: password
                grant_type:
                  type: string
                  enum:
                    - password
                  default: password
                  description: Constant value
                client_id:
                  type: integer
                  enum:
                    - 4
                  default: 4
                  description: Constant value
                client_secret:
                  type: string
                  enum:
                    - EcNCl4WcMCMzOWpiUw0IK6jN7NtSRgZ
                  default: EcNCl4WcMCMzOWpiUw0IK6jN7NtSRgZ
                  description: Constant value
              required:
                - username
                - password
                - grant_type
                - client_id
                - client_secret
      responses:
        '200':
          description: User Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  token:
                    $ref: '#/components/schemas/Token'
        default:
          description: Unexpected error
  /oauth/access_token/fb:
    post:
      summary: Login user via facebook token
      tags:
        - Authentication Service
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                facebook_token:
                  type: string
                  enum:
                    - >-
                      EAARpVP7DYWQBAFyFGNsDSSuPEiqHBqQwpbhsclEZAW8JkZAnTG7IZBKzAFyRQGDFCCgwqDESuHbBu4K9xUeY1XMuk2336pWTQnZB4QMbZB44RZBmZAgnJF0xbjwNZAjPU1DIutGlwA9ZAcu6tIlsJxpwE3Sg6TZCWFFFn6DaWHqn1giE0pzXnwkqHCS2LVLpZC1Vrt3FXilWEpNksDYJ7bZA7EDB
                  default: >-
                    EAARpVP7DYWQBAFyFGNsDSSuPEiqHBqQwpbhsclEZAW8JkZAnTG7IZBKzAFyRQGDFCCgwqDESuHbBu4K9xUeY1XMuk2336pWTQnZB4QMbZB44RZBmZAgnJF0xbjwNZAjPU1DIutGlwA9ZAcu6tIlsJxpwE3Sg6TZCWFFFn6DaWHqn1giE0pzXnwkqHCS2LVLpZC1Vrt3FXilWEpNksDYJ7bZA7EDB
                  description: >-
                    Sample Token is from a Test User in BigDish Dev Facebook
                    App.
                grant_type:
                  type: string
                  enum:
                    - facebook
                  default: facebook
                  description: Constant value
                client_id:
                  type: integer
                  enum:
                    - 4
                  default: 4
                  description: Constant value
                client_secret:
                  type: string
                  enum:
                    - EcNCl4WcMCMzOWpiUw0IK6jN7NtSRgZ
                  default: EcNCl4WcMCMzOWpiUw0IK6jN7NtSRgZ
                  description: Constant value
              required:
                - facebook_token
                - grant_type
                - client_id
                - client_secret
      responses:
        '200':
          description: User Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  token:
                    $ref: '#/components/schemas/Token'
        default:
          description: Unexpected error
  /users:
    post:
      summary: Create a bigdish account via email and password
      tags:
        - User Service
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: BigDish account email address
                password:
                  type: string
                  description: BigDish account password
                fullname:
                  type: string
                  description: BigDish account user's full name
                opt_newsletter:
                  type: boolean
                  enum:
                    - true
                    - false
                  default: true
                  description: BigDish should send promotional email to the user's email?
              required:
                - email
                - password
                - fullname
                - opt_newsletter
      responses:
        '200':
          description: User Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  token:
                    $ref: '#/components/schemas/Token'
        default:
          description: Unexpected error
  /password/reset:
    post:
      summary: Send a reset password email to specified email address
      tags:
        - User Service
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: BigDish account email address
              required:
                - email
      responses:
        '200':
          description: Status Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: error code
                  message:
                    type: string
                    description: error message
        default:
          description: Unexpected error
  /feedbacks:
    post:
      summary: Send a user feedback to BigDish
      tags:
        - User Service
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
                name:
                  type: string
                  description: User's full name
                message:
                  type: string
                  description: User's feedback
                user_id:
                  type: string
                  description: User's Id (if user is logged in)
              required:
                - email
                - name
                - message
      responses:
        '200':
          description: Status Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: error code
                  message:
                    type: string
                    description: error message
        default:
          description: Unexpected error
  /devices:
    post:
      summary: Send user's device token to enable Push Notifications
      tags:
        - User Service
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: User's device token
                user_id:
                  type: string
                  description: User's Id
              required:
                - token
      responses:
        '200':
          description: Status Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: error code
                  message:
                    type: string
                    description: error message
        default:
          description: Unexpected error
  /cities:
    get:
      summary: Load available cities for selected region
      tags:
        - Settings Service
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: src
          required: true
          description: Where the request is being called?
          schema:
            type: string
            enum:
              - ios
              - android
              - web
            default: ios
        - in: query
          name: region
          required: true
          description: Selected Region Name
          schema:
            type: string
            default: Bath
        - in: query
          name: region_id
          required: true
          description: Selected Region ID
          schema:
            type: integer
            default: 4
      responses:
        '200':
          description: Cities Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Cities'
        default:
          description: Unexpected error
  /ambiences:
    get:
      summary: Load pre defined ambiences
      tags:
        - Restaurant Service
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: per_page
          required: true
          description: Limit results page count
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Cities Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ambiences'
        default:
          description: Unexpected error
  /types:
    get:
      summary: Load pre defined food types
      tags:
        - Restaurant Service
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: per_page
          required: true
          description: Limit results page count
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Food Types Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/FoodTypes'
        default:
          description: Unexpected error
  '/restaurants/{restaurantId}/branches/{branchId}':
    get:
      summary: Load branch details
      tags:
        - Restaurant Service
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: path
          name: restaurantId
          required: true
          description: Restaurant Id
          schema:
            type: integer
          example: 773
        - in: path
          name: branchId
          required: true
          description: Branch Id
          schema:
            type: integer
          example: 790
        - in: query
          name: people
          deprecated: true
          description: Filter promo's partysize
          schema:
            type: integer
        - in: query
          name: timestamp
          deprecated: true
          description: Filter promo's timestamp
          schema:
            type: number
            format: double
      responses:
        '200':
          description: Branches Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Branches'
        default:
          description: Unexpected error
  '/restaurants/{restaurantId}/branches/{branchId}/promos':
    get:
      summary: Load branch promos
      tags:
        - Promo Service
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 342
        - in: query
          name: src
          required: true
          description: Where the request is being called?
          schema:
            type: string
            enum:
              - ios
              - android
              - web
            default: ios
        - in: path
          name: restaurantId
          required: true
          description: Restaurant Id
          schema:
            type: integer
          example: 773
        - in: path
          name: branchId
          required: true
          description: Branch Id
          schema:
            type: integer
          example: 790
        - in: query
          name: people
          description: Filter promo's partysize
          schema:
            type: integer
          example: 2
        - in: query
          name: timestamp
          description: Filter promo on a specific timestamp
          schema:
            type: number
            format: double
        - in: query
          name: date
          description: Filter promo on a specific date
          schema:
            type: string
        - in: query
          name: day_filter
          description: >-
            Paginate promo to the next available (0 - anyday, anytime, 1 -
            anyday, specific time, 2 - specific day, any time, no loop)
          schema:
            type: integer
            enum:
              - 0
              - 1
              - 2
            default: 0
        - in: query
          name: edit
          description: Is loading promos on edit reservation page.
          schema:
            type: boolean
            enum:
              - true
              - false
            default: false
        - in: query
          name: transaction_id
          description: >-
            To be used together with `edit`. Provide the reservation id being
            edited.
          schema:
            type: integer
      responses:
        '200':
          description: Promos Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Promos'
        default:
          description: Unexpected error
  /v2/restaurants:
    get:
      summary: Filter Restaurants
      tags:
        - Restaurant Service
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: region
          required: true
          description: Selected Region Name
          schema:
            type: string
            default: Bath
        - in: query
          name: region_id
          required: true
          description: Selected Region ID
          schema:
            type: integer
            default: 4
        - in: query
          name: page
          required: true
          description: Paginate results
          schema:
            type: integer
            default: 1
        - in: query
          name: city_id
          description: Filter restaurants by city
          schema:
            type: integer
        - in: query
          name: category_id
          description: Filter restaurants by category
          schema:
            type: integer
        - in: query
          name: type
          description: >-
            Filter restaurants by food types (e.g. 1,4,5). Don't pass any value
            if you want to include all food types.
          schema:
            type: string
        - in: query
          name: ambience
          description: >-
            Filter restaurants by ambiences (e.g. 1,4,5). Don't pass any value
            if you want to include all ambiences.
          schema:
            type: string
        - in: query
          name: dish
          description: Filter restaurants by dish name
          schema:
            type: string
        - in: query
          name: expanded
          description: Should always be TRUE when filtering by dish name otherwise FALSE.
          schema:
            type: boolean
            default: false
        - in: query
          name: avg_price
          description: 'Filter restaurants by price (e.g. 200,400,600)'
          schema:
            type: string
            enum:
              - 200
              - 400
              - 600
              - '800,1000'
              - '200,400'
              - '200,400,600'
              - '200,400,600,800,1000'
            default: '200,400,600,800,1000'
        - in: query
          name: sort_by
          description: Sort results by these types
          schema:
            type: string
            enum:
              - distance
              - name
              - most_booked
              - avg_price_asc
              - avg_price_desc
            default: most_booked
        - in: query
          name: show_empty
          deprecated: true
          description: Should show restaurant results with no promos
          schema:
            type: boolean
        - in: query
          name: people
          deprecated: true
          description: Filter promo's partysize
          schema:
            type: integer
        - in: query
          name: timestamp
          deprecated: true
          description: Filter promo's timestamp
          schema:
            type: number
            format: double
      responses:
        '200':
          description: Restaurants Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Restaurant'
        default:
          description: Unexpected error
  /expanded-search:
    get:
      summary: Search Restaurants by name/dishes
      tags:
        - Restaurant Service
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: region
          required: true
          description: Selected Region Name
          schema:
            type: string
            default: Bath
        - in: query
          name: region_id
          required: true
          description: Selected Region ID
          schema:
            type: integer
            default: 4
        - in: query
          name: page
          required: true
          description: Paginate results
          schema:
            type: integer
            default: 1
        - in: query
          name: name
          description: Search query
          schema:
            type: string
      responses:
        '200':
          description: RestaurantResults Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RestaurantResults'
        default:
          description: Unexpected error
  /reservations:
    get:
      summary: Load current/past reservations of a user
      description: Get access token from `/oauth/access_token`
      tags:
        - Reservation Service
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: page
          required: true
          description: Paginate results
          schema:
            type: integer
            default: 1
        - in: query
          name: filter
          required: true
          description: Filter reservations (current/past)
          schema:
            type: string
            enum:
              - current
              - past
            example: current
      responses:
        '200':
          description: Reservations Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Reservations'
        default:
          description: Unexpected error
    post:
      summary: Create a reservation
      description: Get access token from `/oauth/access_token`
      tags:
        - Reservation Service
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                version:
                  type: integer
                  description: Indicate API Version
                  example: 342
                promo_id:
                  type: integer
                  description: Selected promo id
                timestamp:
                  type: number
                  format: double
                  description: Selected promo timestamp
                date_reserved:
                  type: string
                  description: Selected date of reservation
                party_size:
                  type: integer
                  description: Selected party size
                name:
                  type: string
                  description: User's full name
                mobile:
                  type: string
                  description: User's mobile number
                email:
                  type: string
                  description: User's email
              required:
                - version
                - promo_id
                - timestamp
                - date_reserved
                - party_size
                - name
                - mobile
                - email
      responses:
        '200':
          description: Reservation Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Reservation'
        default:
          description: Unexpected error
  '/reservations/{editRsvnId}':
    put:
      summary: Update a reservation
      description: Get access token from `/oauth/access_token`
      tags:
        - Reservation Service
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: editRsvnId
          required: true
          description: Reservation Id to edit
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                version:
                  type: integer
                  description: Indicate API Version
                  example: 342
                edit:
                  type: boolean
                  description: Set to TRUE when editing
                  example: true
                promo_id:
                  type: integer
                  description: Selected promo id
                timestamp:
                  type: number
                  format: double
                  description: Selected promo timestamp
                date_reserved:
                  type: string
                  description: Selected date of reservation
                party_size:
                  type: integer
                  description: Selected party size
                name:
                  type: string
                  description: User's full name
                mobile:
                  type: string
                  description: User's mobile number
                email:
                  type: string
                  description: User's email
              required:
                - version
                - promo_id
                - timestamp
                - date_reserved
                - party_size
                - name
                - mobile
                - email
      responses:
        '200':
          description: Reservation Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Reservation'
        default:
          description: Unexpected error
  '/reservations/{delRsvnId}':
    put:
      summary: Delete a reservation
      description: Get access token from `/oauth/access_token`
      tags:
        - Reservation Service
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: delRsvnId
          required: true
          description: Reservation Id to delete
          schema:
            type: integer
      responses:
        '200':
          description: Reservation Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Reservation'
        default:
          description: Unexpected error
  /vouchers:
    get:
      summary: Load available vouchers
      description: Get access token from `/oauth/access_token`
      tags:
        - Promo Service
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: src
          required: true
          description: Where the request is being called?
          schema:
            type: string
            enum:
              - ios
              - android
              - web
            default: ios
        - in: query
          name: region
          required: true
          description: Selected Region Name
          schema:
            type: string
            default: Bath
        - in: query
          name: region_id
          required: true
          description: Selected Region ID
          schema:
            type: integer
            default: 4
      responses:
        '200':
          description: Vouchers Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Vouchers'
        default:
          description: Unexpected error
  /vouchers/validate:
    get:
      summary: Validate a voucher
      description: Get access token from `/oauth/access_token`
      tags:
        - Promo Service
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: src
          required: true
          description: Where the request is being called?
          schema:
            type: string
            enum:
              - ios
              - android
              - web
            default: ios
        - in: query
          name: region
          required: true
          description: Selected Region Name
          schema:
            type: string
            default: Bath
        - in: query
          name: region_id
          required: true
          description: Selected Region ID
          schema:
            type: integer
            default: 4
        - in: query
          name: party_size
          required: true
          description: Selected party size
          schema:
            type: integer
            default: 2
        - in: query
          name: code
          required: true
          description: Provided voucher code
          schema:
            type: string
        - in: query
          name: email
          required: true
          description: Email address where voucher code sent
          schema:
            type: string
      responses:
        '200':
          description: Status Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: error code
                  message:
                    type: string
                    description: error message
        default:
          description: Unexpected error
  /users/me:
    get:
      summary: Load user profile
      description: >-
        Load user profile including wishlist and fav restaurants. Get access
        token from `/oauth/access_token`.
      tags:
        - User Service
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: query
          name: src
          required: true
          description: Where the request is being called?
          schema:
            type: string
            enum:
              - ios
              - android
              - web
            default: ios
        - in: query
          name: sort_by
          description: Sort wishlist/fav restaurant results by these types
          schema:
            type: string
            enum:
              - distance
              - name
              - date_added
            default: date_added
        - in: query
          name: order
          description: Sort asc/desc restaurant results
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: ASC
      responses:
        '200':
          description: User Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
    put:
      summary: Update user profile
      description: >-
        Parameter values are optional. Get access token from
        `/oauth/access_token`.
      tags:
        - User Service
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                version:
                  type: integer
                  description: Indicate API Version
                  example: 342
                mobile:
                  type: number
                  format: double
                  description: Updated user's mobile number
                region_id:
                  type: integer
                  description: Updated user's region
                new_password:
                  type: string
                  description: Updated user's password
                name:
                  type: string
                  description: Updated user's full name
      responses:
        '200':
          description: User Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
  '/users/{userId}/favorites':
    post:
      summary: Add restaurant to favorites
      description: Get access token from `/oauth/access_token`.
      tags:
        - User Service
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: path
          name: userId
          required: true
          description: User Id
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                version:
                  type: integer
                  description: Indicate API Version
                  example: 342
                branch_id:
                  type: integer
                  description: Branch Id to add
                  example: 790
      responses:
        '200':
          description: Status Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: error code
                  message:
                    type: string
                    description: error message
        default:
          description: Unexpected error
    delete:
      summary: Remove restaurant to favorites
      description: Get access token from `/oauth/access_token`.
      tags:
        - User Service
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: path
          name: userId
          required: true
          description: User Id
          schema:
            type: integer
        - in: query
          name: branch_id
          required: true
          description: Branch Id to remove
          schema:
            type: integer
      responses:
        '200':
          description: Status Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: error code
                  message:
                    type: string
                    description: error message
        default:
          description: Unexpected error
  '/users/{userId}/wishlist':
    post:
      summary: Add restaurant to wishlist
      description: Get access token from `/oauth/access_token`.
      tags:
        - User Service
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: path
          name: userId
          required: true
          description: User Id
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                version:
                  type: integer
                  description: Indicate API Version
                  example: 342
                branch_id:
                  type: integer
                  description: Branch Id to add
                  example: 790
      responses:
        '200':
          description: Status Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: error code
                  message:
                    type: string
                    description: error message
        default:
          description: Unexpected error
    delete:
      summary: Remove restaurant to wishlist
      description: Get access token from `/oauth/access_token`.
      tags:
        - User Service
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: version
          required: true
          description: Indicate API Version
          schema:
            type: integer
            default: 340
        - in: path
          name: userId
          required: true
          description: User Id
          schema:
            type: integer
        - in: query
          name: branch_id
          required: true
          description: Branch Id to remove
          schema:
            type: integer
      responses:
        '200':
          description: Status Object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    description: error code
                  message:
                    type: string
                    description: error message
        default:
          description: Unexpected error