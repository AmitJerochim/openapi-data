penapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/retailsolution/GeneralAPI/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/retailsolution/BO-integration/1.0.0
  - description: Retail Solution Back Office Integration (stage server)
    url: https://stage.retailsolution.no/ords/posmother/genapi
info:
  version: "1.0.0"
  title: General API for accessing Articles, POS users and Loyalty customers
  description: >-
    Read and write data related to Articles,
    POS users and loyality customers. Expect changes.
security:
  - accessCode:
      - read
      - write

paths:

  /article/{articleId}:
    get:
      parameters:
       -  name: articleId
          example: 4567
          description: >-
            The id of the article to return.
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      tags: 
        - Article
      summary: Get article information
      description: >-
        Send in the article id and get the article information returned back in
        the body. Use the id sent back from the create article api.
      security: []
      responses:
        '200':
          description: An article object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: The specified articleId is invalid (not a number).
        '404':
          description: An article with the specified articleId was not found.
        default:
          description: Unexpected error
    put:
      parameters:
        - name: articleId
          example: 4567
          description: >-
            The id of the article to update.
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      tags:
        - Article
      summary: Update article
      description: >-
          Send in the article id and the article content. The updated article
          is returned in the response (only the fields sent in, not the entire article).
          
          
          When updating an article only the `articleId` and `external_number` are mandatory. The other fields only need to be the ones requiring an update.
      security: []
      responses:
        '202': #Accepted
          description: The updated article object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: The specified articleId is invalid (not a number).
        '404':
          description: An article with the specified articleId was not found.
        default:
          description: Unexpected error

  /article:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Articles'
      tags: 
        - Article
      summary: Create new article
      description: >-
        Send the new article(s) to our system.  
          
        Take note that you should **not** set the id, our system will do that and add it to the respons object.
          
        Please store the articleId(s) in your system.
      security: []
      responses:
        '201': #Created
          description: An array of article objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Articles'
        '400':
          description: >-
            An array of article objects with error messages.
            
            An error was found in one or more articles, please fix the errors and resend the json (no articles where imported so resend all of them).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleWithError'
        '401':
          description: Please authorize.
        '403':
          description: You do not have this privelige.
        default:
          description: Something else went wrong. Please contact us for further assistance.
  
  /article/groups:
    get:
      tags:
      - Article Groups
      summary: Retrieve all article groups and their sub-groups.
      description: >-
        Use this list to find out which groups and sub-groups the system currently
        holds. Pleaes use these groups when adding new articles to the system.
      security: []
      responses:
        '200':
          description: An object containing all groups and their sub-groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleGroups'
        '401':
          description: Please authorize.
        '403':
          description: You do not have this privelige.
        default:
          description: Unexpected error.

  /pos_user/{userId}:
    get:
      parameters:
        - name: userId
          example: 345
          description: >-
            The userId of the user you want to get information from.
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      tags:
      - POS Users
      summary: Get POS user information.
      description: >-
        Send in the userId that was sent back from our system when the user
        was created. The user object is returned in the response.  
          
        Take note, the ident identification can only be set, we do not return it in get operations.
      security: []
      responses:
        '200':
          description: The userId was found and a user object is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Please authorize.
        '403':
          description: You do not have this privelige.
        default:
          description: Unexpected error.
    put:
      parameters: 
        - name: userId
          example: 345
          description: >-
            The userId of the POS user you want to change.
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      tags: 
      - POS Users
      summary: Update POS user.
      description: >-
        Send in the userId and the user content. The updated POS user is sent
        back in the respons.
          
        Take note, the ident identification can only be set, we do not return
        it in the respons body.
      security: []
      responses:
        '200':
          description: The userId was found and a user object is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Please authorize.
        '403':
          description: You do not have this privelige.
        default:
          description: Unexpected error.
  
  /pos_user:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      tags: 
        - POS Users
      summary: Create a new POS user
      description: >-
        Send the new POS user to our system.  
          
        Please store the userId in your system.
      security: []
      responses:
        '201': #Created
          description: A POS user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Please authorize.
        '403':
          description: You do not have this privelige.
        default:
          description: Could not create the user

  /pos_user/roles:
    get:
      tags:
        - POS User roles
      summary: Get role information
      description: >-
        Get a list of roles (name and description) defined in the system.  
          
        Please use these roles when creating a new user or updating an existing one.
      responses:
        '200':
          description: The user roles found are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoles'
        '401':
          description: Please authenticate.
        '403':
          description: You do not have this privelige.
        default:
          description: Unexpected error.
  
  /customer/{id}:
    get:
      tags: 
      - Loyalty Customers
      parameters: 
        - name: id
          example: '282011e3-4129-4f5e-bae4-eb7297809060'
          description: The id of the customer you want information on.
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        '200':
         description: The customer information is returned.
         content:
           application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyUser'
        '204':
          description: The user does not exist.
        '401':
          description: Please authenticate.
        '403':
          description: You do not have this privilige.
        default:
          description: Unexpected error.
    post:
      tags:
        - Loyalty Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyInfo'
      parameters:
        - name: id
          example: '282011e3-4129-4f5e-bae4-eb7297809060'
          description: >-
            The id of the customer you want to insert.
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        '201':
          description: The insert was a success.
        '401':
          description: Please authenticate.
        '403':
          description: You do not have this privilige or customer already exists.
        default:
          description: Unexpected error.
  /customer/group:
    get:
      description: 'Gets a list of the active customer groups'
      security: []
      tags: 
        - CustomerGroups
        
      responses:
        '200': 
          description: Array of customer group objects.  
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroups'

components:
  schemas:
  
    ArticlePrice:
      type: object
      properties:
        tax_value_pct: 
          type: number
          example: 25
        net:
          type: number
          example: 100
        gross:
          type: number
          example: 125
        ledger_account_num:
          type: number
          description: Ledger account number (sales account). This account must exist in the Account plan
          example: 3001
        customer_group:
          $ref: '#/components/schemas/CustomerGroup'

      required: 
        - tax_value_pct
        - net
        - gross
        - ledger_account_num

    CustomerGroups:
      type: array
      items:
        $ref: '#/components/schemas/CustomerGroup'

    CustomerGroup:
      type: object
      properties:
        name:
          description: Unique name for custmer group
          type: string
          example: EMPLOYEES
        department:
          type: string
          example: Department A
      required:
        - name
  
    Articles:
      type: array
      items:
        $ref: '#/components/schemas/Article'
    
    ArticleWithError:
      allOf:
        -  $ref: '#/components/schemas/Article'
      type: object
      properties:
        error:
          type: array
          readOnly: true
          items:
            type: string
          example: 
            - Article name missing - while checking the json integrity we noticed that the name is missing, please add it.
            - Article price missing - while checking the json integrity we noticed that the price is missing, please add it.

    Article:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 4567
        name:
          type: string
          example: 'Pizza Margherita #10'
        display_name:
          type: string
          example: 'Pizza Marggerita'
          description: Name of article to be used on receipt and customer display in POS
        external_number:
          type: string
          description: External primary key (PLU) of the article
        item_grou_number:
          type: string
          description: Exteral item group number of the article.
        cost_price:
          type: number
          description: The cost price of the article
          example: 4.67
        ean:
          type: array
          items:
            type: number
          example: [234567, 987896785, 33244897]
          uniqueItems: true
        description:
          type: string
          description: 'Detailed description about article. Shown in POS and in webshop.'
          example: A delicious pizza
        group:
          type: string
          example: Hot Food
        sub_group:
          type: string
          example: Pizza
        nutri_allergens:
          type: string
          example: nuts, lactose, wheat
        nutri_ingredients:
          type: string
          example: Wheat, salt, water, cheese, tomato
        nutri_category:
          type: string
          description: The categorization of article related to food marking
          enum: ['Kjølevare','Frysevare','Delikatesse','Ost','Bakevare','Spekemat','Varmmat','Fisk Villfanget','Fisk Oppdrett','Skjell']
        nutri_instructions:
          type: string
          description: 'Usage/preparation instructions'
        nutri_days_expiry:
          type: number
          description: 'Number of days'
        nutri_producer:
          type: string
          description: 'Article producer name'
        prices:
          type: array
          items: 
            $ref: '#/components/schemas/ArticlePrice'
          minimum: 1
      required: 
        - name
        - group
        - sub_group
        - prices
        - ean
        - external_number
    
    ArticleSubGroups:
      type: array
      items:
        type: string
      example:
        - Pizza
        - Pasta
        - Risotto
      minimum: 1
    
    ArticleGroups:
      type: array
      minimum: 1
      items:
        type: object
        properties:
          group:
            type: string
            example: Hot Food
          sub_groups:
            $ref: '#/components/schemas/ArticleSubGroups'
    
    IdentInteger:
      type: object
      properties:
        name:
          type: string
          enum: [Pin Code]
          example: Pin Code
        value:
          type: integer
          example: 12345
    
    IdentString:
      type: object
      properties:
        name:
          type: string
          enum: [Swipe Card, Password]
          example: Swipe Card
        value:
          type: string
          example: A45C65D
  
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 345
        username:
          type: string
          maxLength: 100
          example: olan
        first_name:
          type: string
          maxLength: 100
          example: Ola
        last_name:
          type: string
          maxLength: 100
          example: Normann
        email:
          type: string
          maxLength: 50
          example: ola@normann.no
        ident:
          type: array
          writeOnly: true
          items:
            anyOf:
              - $ref: '#/components/schemas/IdentInteger'
              - $ref: '#/components/schemas/IdentString'
          minItems: 1
        roles:
          type: array
          minItems: 1
          items:
            type: string
          example:
            - Hovmester
            - Backoffice
      required:
        - username
        - ident
        - roles
    
    UserRoles:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            maxLength: 50
            example: Hovmester
          description:
            type: string
            maxLength: 500
            example: Alle rettigheter

    LoyaltyInfo:
      type: object
      properties:
        coffee_points:
          type: number
          example: 4
        youfood_points:
          type: number
          example: 3

    LoyaltyProgram:
      type: object
      properties:
        Id:
          type: number
          example: 3634
        Name:
          type: string
          example: Kaffe
        Type:
          type: string
          example: PointsGift
        RewardLimit:
          type: integer
          example: 10
        CurrenPoints:
          type: integer
          example: 2
        LastEarning:
          type: string
          format: date-time

    LoyaltyUser:
      type: object
      properties:
        CustomerClient:
          type: object
          properties:
            CustomerId:
              type: string
              example: '282011e3-4129-4f5e-bae4-eb7297809060'
            FullName:
              type: string
              example: Ola Normann
            LastOrder:
              type: string
              format: date-time
            CustomerLoyalityPrograms:
              type: array
              items:
                $ref: '#/components/schemas/LoyaltyProgram'

  securitySchemes:
    oAuth2:
      type: oauth2
      description: 'Client credentials. ClientID and secret will be received from RS Customer Service'
      flows:
        clientCredentials:
          tokenUrl: https://stage.retailsolution.no/ords/posmother/oauth/token